aleph.
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
HOW IT WORKS:

aleph contains two processors:

1.	atmel AVR32 A0512.
	handles screen, encoders, panel switches, footswitches, USB, I2C, sdcard, and CV input.

2.	analog devices blackfin bf533.
	handles audio I/O, DSP processing, and CV output.

let's nickname these two processors the "controller" and the "dsp," respectively.

the controller is booted from internal flash memory.
it is connected to the dsp by an SPI bus (a fast, 3-wire serial protocol.)
to run a given audio program, the controller resets the dsp and sends a bootable binary image (.ldr) over the SPI bus.
with the dsp running, the same SPI bus carries parameter changes.

audio programs share a common format and protocol, much like an Audio Unit or VST plugin in software. 
each has a number of parameters and a protocol to describe them.	

the controller has a custom bootloader, which runs when a certain key combination is detected at powerup.
this bootloader is capable of flashing the internal memory with a new executable binary (.elf)

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
CODE STRUCTURE

-----------------------
----- controller :

aleph/avr32/src : 
	contains default low-level routines specific to the Aleph hardware.
	application authors can use these sources, or replace them with their own as desired.

aleph/asf-x.x.x :
	a copy of the Atmel Software Framework.	
	this contains low-level drivers and utilies provided by Atmel, lightly modified by us.

aleph/apps/ : 
	contains a number of project directories which define actual functionality for the controller.
	each directory should contain app-specific sources and Makefile.

aleph/apps/bees:
	this is our main control routing/management application.


aleph/common : 
	routines that both the dsp and the controller need to agree on.
	this includes the SPI protocol and fixed-point math routines.

aleph/avr32_boot  : 
	avr32 bootloader and hardware test program.

---------------------
----- dsp :

aleph/bfin/src:	
	low-level sources for audio programs.
	these routines interact with the blackfin hardware directly, 
	and should be changed only with great care to avoid damaging the proces

aleph/bfin/modules :
	contains a number of project directories for specific audio modules.	
	
aleph/audio : 
	common audio functions implemented in fixed-point for speed on the blackfin,
	(envelopes, filters, buffers, oscillators, etc)
	these should be freely added to as needed by new modules.	
	currently there is no rigid class structure to these things, but we could impose one.

aleph/null : 
	a portaudio-based audio wrapper, 
	suitable for preliminary development of new audio modules.
