aleph.
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


b todo
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

accounting // investment
estimate // production expenses
	BOM, spreadsheet update
	rlc estimates
production workflow

avr uart
i2c

mechanical fixes, circuit revision
	plate drawing for jay
	
TEST POINTS
SIMPLIFY
USB -> AVR?
	http://www.makestuff.eu/wordpress/electronics/nanduino/usb-messaging/
	http://pyusb.sourceforge.net/docs/1.0/tutorial.html
	http://tuxgraphics.org/electronics/200901/tuxgraphics-isp-header.shtml
	
1u ceramic caps
larger caps, some electrolytic?

hat
	input gain stage
		???? FET switched input
	# remove 5v supply on CV in		
	output gain stage
		reschem, layout
	headphone amp
		# TPA6111A2
		
http://stompville.co.uk/?p=470
		

balanced
	AD8476 balanced line driver
	http://www.uneeda-audio.com/zbal.htm
	http://www.harmonycentral.com/t5/Lessons-Theory/Balanced-Vs-Unbalanced-I-O-How-It-Works/ba-p/34639794

enclosure
	http://www.evsmetal.com/history.php
	http://www.mcalpin-ind.com/history.html

12V system redesign
	http://www.ti.com/lit/ds/symlink/lmr62014.pdf
	http://www.coilcraft.com/xal50xx.cfm
	MBR0520L
	
i2c protection?
	USE A BAS70 like the cv in
	22 ohm inline?

test ADC protection.

soft power control, redo resistor values

schem cleanup

aleph infographic diagram



e todo
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

blackfin fixes
-- add DAC support in core framework.
-- implement more modules 
----- poly synth
----- add/test audio filters

USB host support for more devices.
-- MIDI
-- gamepad
-- FTDI

better interrupt management.
-- if a routine needs to disable interrupts, it should check if they are enabled first.
-- might be a better use of priority levels
-- might be necessary to choose specific IRQ lines to enable/disable. macro or inline.

I2C.

optimizations.

more operators.
-- ADC
-- timer
-- basic sequencer
-- etc

BEES
-- ui stuff

better parameter scaling / setting (lookups or smarter dynamic scaling ).

standalones.



team todo
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

text
	benchmarking
	concise description
	technical/functional/abstract // whitepaper
	documentation // framework/toolchain and specs
	manual // instructional
	bees ui


	
think about
	dsp page (integrate with setups page?)
	symbols when page changing
	extended menu via last button (up triangle)
	macros in routing mode, for example: insert trigger here (preserves routing to existing target)
	operator page, each operator can have menu button which calls custom UI (ie, list editor)
	remote control system-- all bees functions (ie create operator, etc) callable via USB/serial


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
CODE DIRECTORIES:

things are a bit messy (sorry) but here are the most important areas:

----- control 

aleph/avr32 : 
	avr32-specific stuff. this should really be restructured so that low-level stuff can be separate and re-usable by different applications. 
	run 'make' here to build the main avr32 firmware (aleph/avr32/aleph.hex)
 
aleph/asf-x.x.x : a copy of the Atmel Software Framework (peripheral drivers and such), partly stripped down and very lightly modified for our purposes. there's still a lot of useless example projects and so on.

aleph/bees  : 
	BEES is the random provisional name for our main control routing/management application. this is all the platform-agnostic stuff in that program. in here there is also a linux program to emulate the aleph's interface, that has not seen much use or attention since we got the hardware working.
	run 'make' here to build the interface tester for linux, such as it is (aleph/bees/bees)

aleph/common : 
	should be just stuff that is used by both the bfin and the avr, like SPI protocol headers and 16.16 fixed-point math routines. in practice a bunch of crap has snuck in here like the FAT library and headers that are used by both the test and delployment versions of BEES. should clean this up.

aleph/boot  : 
	avr32 bootloader. confusingly, this has its own stripped-down copy of bees/ since it uses much of the UI element stuff with different menus.
	run 'make' here to build the avr32 bootloader (aleph/boot/aleph-boot.elf), 'make program' to load it over JTAG.


----- audio

aleph/bfin  : 
	blackfin stuff. unlike the avr32 code, i made these makefiles from scratch, so they are more basic but perhaps allow for a more sensible organization of sources. aleph/bfin/src is base stuff that is common to all DSP code. aleph/bfin/modules contains individual DSP projects, usually just one sourcefile each with an audio callback and so forth. 
	run 'make' in aleph/bfin/modules/foo to build the 'foo' modlue (foo.ldr).

aleph/audio : common audio functions implemented in fixed-point for speed on the blackfin. still very modest as yet, could use lots more things. whatever filters/oscillators/analysis you can think of. could be more sensibly organized in an OOP fashion, on the other hand i'm ok with keeping it pretty basic.

aleph/null : a silly little portaudio-based program to test blackfin module code. so far i've been writing modules in here and then copying them over to aleph/bfin/modules, which is very dumb but i haven't the time to make them synchronous. 
	run 'make' here to build the audio testing program for linux (aleph/null/null)


[EMB, jun 4]
