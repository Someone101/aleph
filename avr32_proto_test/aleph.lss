
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003008  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80005200  80005200  00005600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000904  80005400  80005400  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80005d04  80005d04  00006104  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .bss          00001928  00000008  00000008  00000000  2**2
                  ALLOC
  8 .heap         0000d6d0  00001930  00001930  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000c28  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002033  00000000  00000000  00006d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001a21c  00000000  00000000  00008d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000354a  00000000  00000000  00022fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014f57  00000000  00000000  000264f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000207c  00000000  00000000  0003b44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000413a  00000000  00000000  0003d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000061a4  00000000  00000000  00041602  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 015d3943  00000000  00000000  000477a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00005910  00000000  00000000  0161b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf d0 30 	sub	pc,pc,-12240

Disassembly of section .text:

80002004 <sdramc_init>:
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
80002004:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002008:	ee 78 42 3f 	mov	r8,999999
8000200c:	f8 08 00 09 	add	r9,r12,r8
80002010:	e0 68 de 83 	mov	r8,56963
80002014:	ea 18 43 1b 	orh	r8,0x431b
80002018:	f2 08 06 48 	mulu.d	r8,r9,r8
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
8000201c:	18 96       	mov	r6,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000201e:	f2 07 16 12 	lsr	r7,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002022:	32 7b       	mov	r11,39
80002024:	fe cc cc 24 	sub	r12,pc,-13276
80002028:	c7 2d       	rcall	8000230c <gpio_enable_module>
  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();

  // Enable SDRAM mode for CS1.
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
8000202a:	fe 68 10 00 	mov	r8,-126976
8000202e:	f0 f9 01 24 	ld.w	r9,r8[292]
80002032:	a1 b9       	sbr	r9,0x1
80002034:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80002038:	f0 f8 01 24 	ld.w	r8,r8[292]
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000203c:	e0 68 4d d3 	mov	r8,19923
80002040:	ea 18 10 62 	orh	r8,0x1062
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002044:	ee 05 15 03 	lsl	r5,r7,0x3
80002048:	ea 07 00 03 	add	r3,r5,r7
8000204c:	ee 03 00 23 	add	r3,r7,r3<<0x2
80002050:	e6 c3 fc 19 	sub	r3,r3,-999
80002054:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002058:	ee 09 15 04 	lsl	r9,r7,0x4
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000205c:	e6 0b 15 12 	lsl	r11,r3,0x12
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002060:	0e 19       	sub	r9,r7
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002062:	f2 03 15 02 	lsl	r3,r9,0x2
80002066:	e6 c3 fc 19 	sub	r3,r3,-999
8000206a:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000206e:	f2 c9 fc 19 	sub	r9,r9,-999
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002072:	e6 0e 15 06 	lsl	lr,r3,0x6
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002076:	f2 08 06 42 	mulu.d	r2,r9,r8
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000207a:	ee 0c 15 05 	lsl	r12,r7,0x5
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000207e:	e6 09 16 06 	lsr	r9,r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002082:	0e 0c       	add	r12,r7
80002084:	0e 15       	sub	r5,r7
80002086:	ee 0c 00 13 	add	r3,r7,r12<<0x1
8000208a:	a1 75       	lsl	r5,0x1
8000208c:	e6 c3 fc 19 	sub	r3,r3,-999
80002090:	ea c5 fc 19 	sub	r5,r5,-999
80002094:	e6 08 06 42 	mulu.d	r2,r3,r8
80002098:	ea 08 06 44 	mulu.d	r4,r5,r8
8000209c:	e6 08 16 06 	lsr	r8,r3,0x6
800020a0:	a3 65       	lsl	r5,0x2
800020a2:	bd 68       	lsl	r8,0x1c
800020a4:	e2 15 0f 00 	andl	r5,0xf00,COH
800020a8:	e8 18 00 d9 	orl	r8,0xd9
800020ac:	0a 48       	or	r8,r5
800020ae:	e2 1e f0 00 	andl	lr,0xf000,COH
800020b2:	f1 ee 10 0e 	or	lr,r8,lr
800020b6:	f2 08 15 10 	lsl	r8,r9,0x10
800020ba:	e6 18 00 0f 	andh	r8,0xf,COH
800020be:	10 4e       	or	lr,r8
800020c0:	f2 08 15 14 	lsl	r8,r9,0x14
800020c4:	e6 18 00 f0 	andh	r8,0xf0,COH
800020c8:	fd e8 10 08 	or	r8,lr,r8
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020cc:	fe 6a 20 00 	mov	r10,-122880
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
800020d0:	e6 1b 0f 00 	andh	r11,0xf00,COH
800020d4:	f1 eb 10 0b 	or	r11,r8,r11
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020d8:	95 2b       	st.w	r10[0x8],r11
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800020da:	74 28       	ld.w	r8,r10[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800020dc:	30 18       	mov	r8,1
800020de:	95 08       	st.w	r10[0x0],r8
  AVR32_SDRAMC.mr;
800020e0:	74 08       	ld.w	r8,r10[0x0]
  sdram[0];
800020e2:	fc 18 d0 00 	movh	r8,0xd000
800020e6:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
800020e8:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800020ec:	ee 0a 10 64 	mul	r10,r7,100
800020f0:	f0 0a 00 0a 	add	r10,r8,r10

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800020f4:	14 38       	cp.w	r8,r10
800020f6:	e0 88 00 06 	brls	80002102 <sdramc_init+0xfe>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800020fa:	e1 b8 00 42 	mfsr	r8,0x108
800020fe:	10 3a       	cp.w	r10,r8
80002100:	cf d3       	brcs	800020fa <sdramc_init+0xf6>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002102:	e1 b8 00 42 	mfsr	r8,0x108
80002106:	10 3a       	cp.w	r10,r8
80002108:	fe 9b ff fd 	brhi	80002102 <sdramc_init+0xfe>

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
8000210c:	fe 68 20 00 	mov	r8,-122880
80002110:	30 2a       	mov	r10,2
80002112:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002114:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002116:	fc 18 d0 00 	movh	r8,0xd000
8000211a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000211c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002120:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002124:	12 38       	cp.w	r8,r9
80002126:	e0 88 00 06 	brls	80002132 <sdramc_init+0x12e>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
8000212a:	e1 b8 00 42 	mfsr	r8,0x108
8000212e:	10 39       	cp.w	r9,r8
80002130:	cf d3       	brcs	8000212a <sdramc_init+0x126>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002132:	e1 b8 00 42 	mfsr	r8,0x108
80002136:	10 39       	cp.w	r9,r8
80002138:	fe 9b ff fd 	brhi	80002132 <sdramc_init+0x12e>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
8000213c:	fe 68 20 00 	mov	r8,-122880
80002140:	30 4a       	mov	r10,4
80002142:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002144:	70 08       	ld.w	r8,r8[0x0]
80002146:	f8 09 15 01 	lsl	r9,r12,0x1
8000214a:	e0 68 4d d3 	mov	r8,19923
8000214e:	ea 18 10 62 	orh	r8,0x1062
80002152:	f2 c9 fc 19 	sub	r9,r9,-999
80002156:	30 0a       	mov	r10,0
80002158:	f2 08 06 48 	mulu.d	r8,r9,r8
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
8000215c:	fc 1b d0 00 	movh	r11,0xd000
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
80002160:	f2 0c 16 06 	lsr	r12,r9,0x6
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002164:	96 08       	ld.sh	r8,r11[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002166:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000216a:	f0 0c 00 09 	add	r9,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000216e:	12 38       	cp.w	r8,r9
80002170:	e0 88 00 06 	brls	8000217c <sdramc_init+0x178>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002174:	e1 b8 00 42 	mfsr	r8,0x108
80002178:	10 39       	cp.w	r9,r8
8000217a:	cf d3       	brcs	80002174 <sdramc_init+0x170>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
8000217c:	e1 b8 00 42 	mfsr	r8,0x108
80002180:	10 39       	cp.w	r9,r8
80002182:	fe 9b ff fd 	brhi	8000217c <sdramc_init+0x178>
80002186:	2f fa       	sub	r10,-1
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80002188:	58 2a       	cp.w	r10,2
8000218a:	ce d1       	brne	80002164 <sdramc_init+0x160>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
8000218c:	fe 68 20 00 	mov	r8,-122880
80002190:	30 39       	mov	r9,3
80002192:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
80002194:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002196:	fc 18 d0 00 	movh	r8,0xd000
8000219a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000219c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800021a0:	e0 69 4d d3 	mov	r9,19923
800021a4:	ea 19 10 62 	orh	r9,0x1062
800021a8:	ee 0b 15 01 	lsl	r11,r7,0x1
800021ac:	f6 cb fc 19 	sub	r11,r11,-999
800021b0:	f6 09 06 4a 	mulu.d	r10,r11,r9
800021b4:	f6 09 16 06 	lsr	r9,r11,0x6
800021b8:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800021bc:	12 38       	cp.w	r8,r9
800021be:	e0 88 00 06 	brls	800021ca <sdramc_init+0x1c6>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800021c2:	e1 b8 00 42 	mfsr	r8,0x108
800021c6:	10 39       	cp.w	r9,r8
800021c8:	cf d3       	brcs	800021c2 <sdramc_init+0x1be>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
800021ca:	e1 b8 00 42 	mfsr	r8,0x108
800021ce:	10 39       	cp.w	r9,r8
800021d0:	fe 9b ff fd 	brhi	800021ca <sdramc_init+0x1c6>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800021d4:	30 09       	mov	r9,0
800021d6:	fe 68 20 00 	mov	r8,-122880
800021da:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
800021dc:	70 09       	ld.w	r9,r8[0x0]
  sdram[0];
800021de:	fc 19 d0 00 	movh	r9,0xd000
800021e2:	92 09       	ld.sh	r9,r9[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800021e4:	e0 69 1e 84 	mov	r9,7812
800021e8:	e0 6b de 83 	mov	r11,56963
800021ec:	ea 1b 43 1b 	orh	r11,0x431b
800021f0:	ec 0b 06 4a 	mulu.d	r10,r6,r11
800021f4:	b3 8b       	lsr	r11,0x12
800021f6:	b3 3b       	mul	r11,r9
800021f8:	e0 69 4d d3 	mov	r9,19923
800021fc:	ea 19 10 62 	orh	r9,0x1062
80002200:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002204:	f6 09 16 06 	lsr	r9,r11,0x6
80002208:	91 19       	st.w	r8[0x4],r9
  AVR32_SDRAMC.tr;
8000220a:	70 18       	ld.w	r8,r8[0x4]
}
8000220c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80002210 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002210:	fe 68 14 00 	mov	r8,-125952
80002214:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002216:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000221a:	91 09       	st.w	r8[0x0],r9
}
8000221c:	5e fc       	retal	r12

8000221e <gpio_enable_pin_pull_up>:


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->puers = 1 << (pin & 0x1F);
8000221e:	30 18       	mov	r8,1
80002220:	f0 0c 09 48 	lsl	r8,r8,r12
#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002224:	a5 9c       	lsr	r12,0x5
80002226:	a9 6c       	lsl	r12,0x8
80002228:	e0 2c f0 00 	sub	r12,61440
  gpio_port->puers = 1 << (pin & 0x1F);
8000222c:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002230:	5e fc       	retal	r12

80002232 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002232:	f8 08 16 05 	lsr	r8,r12,0x5
80002236:	a9 68       	lsl	r8,0x8
80002238:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000223c:	71 88       	ld.w	r8,r8[0x60]
8000223e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002242:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002246:	5e fc       	retal	r12

80002248 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002248:	30 18       	mov	r8,1
8000224a:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000224e:	a5 9c       	lsr	r12,0x5
80002250:	a9 6c       	lsl	r12,0x8
80002252:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002256:	f9 48 00 54 	st.w	r12[84],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000225a:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000225e:	99 18       	st.w	r12[0x4],r8
}
80002260:	5e fc       	retal	r12

80002262 <gpio_clr_gpio_pin>:
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002262:	30 18       	mov	r8,1
80002264:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002268:	a5 9c       	lsr	r12,0x5
8000226a:	a9 6c       	lsl	r12,0x8
8000226c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002270:	f9 48 00 58 	st.w	r12[88],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80002274:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002278:	99 18       	st.w	r12[0x4],r8
}
8000227a:	5e fc       	retal	r12

8000227c <gpio_tgl_gpio_pin>:
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000227c:	30 18       	mov	r8,1
8000227e:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002282:	a5 9c       	lsr	r12,0x5
80002284:	a9 6c       	lsl	r12,0x8
80002286:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000228a:	f9 48 00 5c 	st.w	r12[92],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000228e:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002292:	99 18       	st.w	r12[0x4],r8
}
80002294:	5e fc       	retal	r12

80002296 <gpio_enable_pin_interrupt>:
int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002296:	30 1a       	mov	r10,1
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80002298:	f8 08 16 05 	lsr	r8,r12,0x5

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
8000229c:	f4 0c 09 49 	lsl	r9,r10,r12
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
800022a0:	a9 68       	lsl	r8,0x8
800022a2:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
800022a6:	f1 49 00 c4 	st.w	r8[196],r9
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
800022aa:	14 3b       	cp.w	r11,r10
800022ac:	c0 c0       	breq	800022c4 <gpio_enable_pin_interrupt+0x2e>
800022ae:	c0 82       	brcc	800022be <gpio_enable_pin_interrupt+0x28>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800022b0:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800022b4:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022b8:	f1 49 00 94 	st.w	r8[148],r9
800022bc:	5e fd       	retal	0
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
800022be:	58 2b       	cp.w	r11,2
800022c0:	c0 90       	breq	800022d2 <gpio_enable_pin_interrupt+0x3c>
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1s = 1 << (pin & 0x1F);
800022c2:	5e fa       	retal	r10
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
800022c4:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800022c8:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022cc:	f1 49 00 94 	st.w	r8[148],r9
800022d0:	5e fd       	retal	0
    gpio_port->imr0s = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800022d2:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800022d6:	f1 49 00 b4 	st.w	r8[180],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022da:	f1 49 00 94 	st.w	r8[148],r9
800022de:	5e fd       	retal	0

800022e0 <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022e0:	f8 08 16 05 	lsr	r8,r12,0x5
800022e4:	a9 68       	lsl	r8,0x8
800022e6:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800022ea:	f0 f8 00 d0 	ld.w	r8,r8[208]
800022ee:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800022f2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800022f6:	5e fc       	retal	r12

800022f8 <gpio_clear_pin_interrupt_flag>:
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800022f8:	30 18       	mov	r8,1
800022fa:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022fe:	a5 9c       	lsr	r12,0x5
80002300:	a9 6c       	lsl	r12,0x8
80002302:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
80002306:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
8000230a:	5e fc       	retal	r12

8000230c <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000230c:	eb cd 40 f8 	pushm	r3-r7,lr
80002310:	18 98       	mov	r8,r12
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002312:	58 0b       	cp.w	r11,0
80002314:	c3 c0       	breq	8000238c <gpio_enable_module+0x80>
80002316:	30 0e       	mov	lr,0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002318:	30 16       	mov	r6,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000231a:	1c 9c       	mov	r12,lr
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000231c:	30 15       	mov	r5,1
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
8000231e:	30 24       	mov	r4,2
80002320:	30 33       	mov	r3,3
80002322:	c0 d8       	rjmp	8000233c <gpio_enable_module+0x30>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002324:	ea 07 09 4a 	lsl	r10,r5,r7
80002328:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000232a:	93 aa       	st.w	r9[0x28],r10
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000232c:	93 2a       	st.w	r9[0x8],r10
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000232e:	2f fe       	sub	lr,-1
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002330:	30 09       	mov	r9,0
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002332:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002334:	1c 3b       	cp.w	r11,lr
80002336:	e0 88 00 1a 	brls	8000236a <gpio_enable_module+0x5e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000233a:	2f e8       	sub	r8,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000233c:	11 87       	ld.ub	r7,r8[0x0]
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
8000233e:	11 9a       	ld.ub	r10,r8[0x1]
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002340:	ee 09 16 05 	lsr	r9,r7,0x5
80002344:	a9 69       	lsl	r9,0x8
80002346:	e0 29 f0 00 	sub	r9,61440

  // Enable the correct function.
  switch (function)
8000234a:	ec 0a 18 00 	cp.b	r10,r6
8000234e:	c1 00       	breq	8000236e <gpio_enable_module+0x62>
80002350:	ce a3       	brcs	80002324 <gpio_enable_module+0x18>
80002352:	e8 0a 18 00 	cp.b	r10,r4
80002356:	c1 60       	breq	80002382 <gpio_enable_module+0x76>
80002358:	e6 0a 18 00 	cp.b	r10,r3
8000235c:	c0 e0       	breq	80002378 <gpio_enable_module+0x6c>
8000235e:	30 19       	mov	r9,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002360:	2f fe       	sub	lr,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002362:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002364:	1c 3b       	cp.w	r11,lr
80002366:	fe 9b ff ea 	brhi	8000233a <gpio_enable_module+0x2e>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
8000236a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000236e:	ea 07 09 4a 	lsl	r10,r5,r7
80002372:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002374:	93 aa       	st.w	r9[0x28],r10
80002376:	cd bb       	rjmp	8000232c <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002378:	ea 07 09 4a 	lsl	r10,r5,r7
8000237c:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000237e:	93 9a       	st.w	r9[0x24],r10
80002380:	cd 6b       	rjmp	8000232c <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002382:	ea 07 09 4a 	lsl	r10,r5,r7
80002386:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002388:	93 9a       	st.w	r9[0x24],r10
8000238a:	cd 1b       	rjmp	8000232c <gpio_enable_module+0x20>
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000238c:	16 9c       	mov	r12,r11
8000238e:	ce eb       	rjmp	8000236a <gpio_enable_module+0x5e>

80002390 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002390:	c0 08       	rjmp	80002390 <_unhandled_interrupt>
80002392:	d7 03       	nop

80002394 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002394:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002398:	fe c8 cf 48 	sub	r8,pc,-12472
8000239c:	a5 9b       	lsr	r11,0x5
8000239e:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800023a2:	70 18       	ld.w	r8,r8[0x4]
800023a4:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800023a8:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
800023aa:	c1 20       	breq	800023ce <INTC_register_interrupt+0x3a>
800023ac:	58 1a       	cp.w	r10,1
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
800023ae:	c1 b0       	breq	800023e4 <INTC_register_interrupt+0x50>
800023b0:	58 2a       	cp.w	r10,2
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800023b2:	c2 50       	breq	800023fc <INTC_register_interrupt+0x68>
800023b4:	fe c9 d0 86 	sub	r9,pc,-12154
800023b8:	fe c8 d1 b8 	sub	r8,pc,-11848
800023bc:	f2 08 01 08 	sub	r8,r9,r8
800023c0:	fe 79 08 00 	mov	r9,-63488
800023c4:	ea 18 c0 00 	orh	r8,0xc000
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800023c8:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800023cc:	5e fc       	retal	r12
800023ce:	fe 78 08 00 	mov	r8,-63488
800023d2:	fe c9 d1 d2 	sub	r9,pc,-11822
800023d6:	fe ca d0 d2 	sub	r10,pc,-12078
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800023da:	f4 09 01 09 	sub	r9,r10,r9
800023de:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
800023e2:	5e fc       	retal	r12
800023e4:	fe c9 d0 d2 	sub	r9,pc,-12078
800023e8:	fe c8 d1 e8 	sub	r8,pc,-11800
800023ec:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800023f0:	fe 79 08 00 	mov	r9,-63488
800023f4:	bf a8       	sbr	r8,0x1e
800023f6:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800023fa:	5e fc       	retal	r12
800023fc:	fe c9 d0 dc 	sub	r9,pc,-12068
80002400:	fe c8 d2 00 	sub	r8,pc,-11776
80002404:	f2 08 01 08 	sub	r8,r9,r8
80002408:	fe 79 08 00 	mov	r9,-63488
8000240c:	bf b8       	sbr	r8,0x1f
8000240e:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002412:	5e fc       	retal	r12

80002414 <INTC_init_interrupts>:
80002414:	eb cd 40 c0 	pushm	r6-r7,lr
80002418:	fe c8 d2 18 	sub	r8,pc,-11752
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000241c:	e3 b8 00 01 	mtsr	0x4,r8
80002420:	fe c6 d1 1c 	sub	r6,pc,-12004
80002424:	fe ce cf d4 	sub	lr,pc,-12332

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002428:	10 16       	sub	r6,r8
8000242a:	30 0c       	mov	r12,0
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000242c:	fe cb 00 9c 	sub	r11,pc,156

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002430:	fe 77 08 00 	mov	r7,-63488
80002434:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002436:	58 0a       	cp.w	r10,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002438:	c0 70       	breq	80002446 <INTC_init_interrupts+0x32>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000243a:	7c 19       	ld.w	r9,lr[0x4]
8000243c:	30 08       	mov	r8,0

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000243e:	12 ab       	st.w	r9++,r11
80002440:	2f f8       	sub	r8,-1
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002442:	14 38       	cp.w	r8,r10
80002444:	cf d3       	brcs	8000243e <INTC_init_interrupts+0x2a>
80002446:	ee 0c 09 26 	st.w	r7[r12<<0x2],r6
8000244a:	2f 8e       	sub	lr,-8
8000244c:	2f fc       	sub	r12,-1
8000244e:	59 4c       	cp.w	r12,20
80002450:	cf 21       	brne	80002434 <INTC_init_interrupts+0x20>
80002452:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002456:	d7 03       	nop

80002458 <_get_interrupt_handler>:
80002458:	e0 68 00 83 	mov	r8,131
8000245c:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002460:	fe 78 08 00 	mov	r8,-63488
80002464:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002468:	f2 ca ff c0 	sub	r10,r9,-64
8000246c:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002470:	58 0c       	cp.w	r12,0
80002472:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002474:	fe c8 d0 24 	sub	r8,pc,-12252
80002478:	f8 0c 12 00 	clz	r12,r12
8000247c:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002480:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002484:	72 18       	ld.w	r8,r9[0x4]
80002486:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000248a:	5e fc       	retal	r12

8000248c <pdca_disable>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000248c:	58 ec       	cp.w	r12,14
8000248e:	e0 8b 00 08 	brhi	8000249e <pdca_disable+0x12>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002492:	a7 6c       	lsl	r12,0x6
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002494:	30 28       	mov	r8,2


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002496:	e0 3c 00 00 	sub	r12,65536
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8000249a:	99 58       	st.w	r12[0x14],r8

}
8000249c:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000249e:	3f fc       	mov	r12,-1
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800024a0:	30 28       	mov	r8,2
800024a2:	99 58       	st.w	r12[0x14],r8

}
800024a4:	5e fc       	retal	r12

800024a6 <pdca_disable_interrupt_transfer_complete>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800024a6:	58 ec       	cp.w	r12,14
800024a8:	e0 88 00 0c 	brls	800024c0 <pdca_disable_interrupt_transfer_complete+0x1a>
800024ac:	3f fc       	mov	r12,-1
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800024ae:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800024b2:	ed b8 00 10 	bld	r8,0x10
800024b6:	c0 d1       	brne	800024d0 <pdca_disable_interrupt_transfer_complete+0x2a>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800024b8:	30 28       	mov	r8,2
800024ba:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
800024bc:	78 b8       	ld.w	r8,r12[0x2c]
800024be:	5e fc       	retal	r12


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800024c0:	a7 6c       	lsl	r12,0x6
800024c2:	e0 3c 00 00 	sub	r12,65536
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800024c6:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800024ca:	ed b8 00 10 	bld	r8,0x10
800024ce:	cf 50       	breq	800024b8 <pdca_disable_interrupt_transfer_complete+0x12>
800024d0:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800024d2:	30 28       	mov	r8,2
800024d4:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
800024d6:	78 b8       	ld.w	r8,r12[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800024d8:	d5 03       	csrf	0x10
800024da:	5e fc       	retal	r12

800024dc <pdca_init_channel>:
  return pdca_channel;
}


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
800024dc:	d4 01       	pushm	lr


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800024de:	f8 09 15 06 	lsl	r9,r12,0x6
800024e2:	e0 39 00 00 	sub	r9,65536

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800024e6:	58 ec       	cp.w	r12,14
800024e8:	f9 b8 0b ff 	movhi	r8,-1
800024ec:	f0 0e 17 b0 	movhi	lr,r8
800024f0:	f2 08 17 80 	movls	r8,r9
800024f4:	f2 0e 17 80 	movls	lr,r9
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800024f8:	e1 ba 00 00 	mfsr	r10,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800024fc:	ed ba 00 10 	bld	r10,0x10
80002500:	c3 21       	brne	80002564 <pdca_init_channel+0x88>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002502:	30 2a       	mov	r10,2
80002504:	9d 9a       	st.w	lr[0x24],r10
  pdca_channel->isr;
80002506:	7c ba       	ld.w	r10,lr[0x2c]
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002508:	58 fc       	cp.w	r12,15
8000250a:	f9 b9 02 ff 	movhs	r9,-1
void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000250e:	e1 ba 00 00 	mfsr	r10,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
80002512:	ed ba 00 10 	bld	r10,0x10
80002516:	c2 11       	brne	80002558 <pdca_init_channel+0x7c>
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80002518:	30 1a       	mov	r10,1
8000251a:	93 9a       	st.w	r9[0x24],r10
  pdca_channel->isr;
8000251c:	72 b9       	ld.w	r9,r9[0x2c]
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000251e:	e1 b9 00 00 	mfsr	r9,0x0
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002522:	ee 19 00 01 	eorh	r9,0x1
80002526:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1

  if (global_interrupt_enabled) cpu_irq_disable();
8000252a:	c1 51       	brne	80002554 <pdca_init_channel+0x78>
  pdca_channel->mar = (unsigned long)opt->addr;
8000252c:	76 0a       	ld.w	r10,r11[0x0]
8000252e:	91 0a       	st.w	r8[0x0],r10
  pdca_channel->tcr = opt->size;
80002530:	76 1a       	ld.w	r10,r11[0x4]
80002532:	91 2a       	st.w	r8[0x8],r10
  pdca_channel->psr = opt->pid;
80002534:	76 4a       	ld.w	r10,r11[0x10]
80002536:	91 1a       	st.w	r8[0x4],r10
  pdca_channel->marr = (unsigned long)opt->r_addr;
80002538:	76 2a       	ld.w	r10,r11[0x8]
8000253a:	91 3a       	st.w	r8[0xc],r10
  pdca_channel->tcrr = opt->r_size;
8000253c:	76 3a       	ld.w	r10,r11[0xc]
8000253e:	91 4a       	st.w	r8[0x10],r10
  pdca_channel->mr =
80002540:	76 5a       	ld.w	r10,r11[0x14]
80002542:	91 6a       	st.w	r8[0x18],r10
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002544:	e0 6a 01 00 	mov	r10,256
80002548:	91 5a       	st.w	r8[0x14],r10
  pdca_channel->isr;
8000254a:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
8000254c:	58 09       	cp.w	r9,0
8000254e:	c0 20       	breq	80002552 <pdca_init_channel+0x76>
80002550:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
}
80002552:	d8 0a       	popm	pc,r12=0
  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002554:	d3 03       	ssrf	0x10
80002556:	ce bb       	rjmp	8000252c <pdca_init_channel+0x50>
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002558:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
8000255a:	30 1a       	mov	r10,1
8000255c:	93 9a       	st.w	r9[0x24],r10
  pdca_channel->isr;
8000255e:	72 b9       	ld.w	r9,r9[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80002560:	d5 03       	csrf	0x10
80002562:	cd eb       	rjmp	8000251e <pdca_init_channel+0x42>
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002564:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002566:	30 2a       	mov	r10,2
80002568:	9d 9a       	st.w	lr[0x24],r10
  pdca_channel->isr;
8000256a:	7c ba       	ld.w	r10,lr[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
8000256c:	d5 03       	csrf	0x10
8000256e:	cc db       	rjmp	80002508 <pdca_init_channel+0x2c>

80002570 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002570:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002574:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002576:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002578:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
8000257a:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
8000257e:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002582:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002586:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
8000258a:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
8000258e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002592 <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002592:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002596:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002598:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
8000259c:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800025a0:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800025a4:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
800025a8:	5e fc       	retal	r12

800025aa <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800025aa:	2f 8b       	sub	r11,-8
800025ac:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800025b0:	a1 a8       	sbr	r8,0x0
800025b2:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800025b6:	5e fc       	retal	r12

800025b8 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800025b8:	79 58       	ld.w	r8,r12[0x54]
800025ba:	ed b8 00 00 	bld	r8,0x0
800025be:	cf d1       	brne	800025b8 <pm_wait_for_pll0_locked>
}
800025c0:	5e fc       	retal	r12

800025c2 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800025c2:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800025c4:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800025c8:	99 08       	st.w	r12[0x0],r8
}
800025ca:	5e fc       	retal	r12

800025cc <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800025cc:	ec 5b bb 9f 	cp.w	r11,899999
800025d0:	e0 8b 00 18 	brhi	80002600 <pm_switch_to_osc0+0x34>
800025d4:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800025d6:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800025d8:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800025dc:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800025de:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800025e0:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800025e4:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800025e6:	78 08       	ld.w	r8,r12[0x0]
800025e8:	a3 a8       	sbr	r8,0x2
800025ea:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800025ec:	79 58       	ld.w	r8,r12[0x54]
800025ee:	ed b8 00 07 	bld	r8,0x7
800025f2:	cf d1       	brne	800025ec <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800025f4:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800025f6:	30 19       	mov	r9,1
800025f8:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800025fc:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
800025fe:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002600:	e0 68 c6 bf 	mov	r8,50879
80002604:	ea 18 00 2d 	orh	r8,0x2d
80002608:	10 3b       	cp.w	r11,r8
8000260a:	e0 88 00 0c 	brls	80002622 <pm_switch_to_osc0+0x56>
8000260e:	e0 68 12 00 	mov	r8,4608
80002612:	ea 18 00 7a 	orh	r8,0x7a
80002616:	10 3b       	cp.w	r11,r8
80002618:	f9 bb 03 06 	movlo	r11,6
8000261c:	f9 bb 02 07 	movhs	r11,7
80002620:	cd bb       	rjmp	800025d6 <pm_switch_to_osc0+0xa>
80002622:	30 5b       	mov	r11,5
80002624:	cd 9b       	rjmp	800025d6 <pm_switch_to_osc0+0xa>

80002626 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
80002626:	f8 c9 00 01 	sub	r9,r12,1
8000262a:	f8 08 16 01 	lsr	r8,r12,0x1
8000262e:	f2 08 00 08 	add	r8,r9,r8
80002632:	f0 0b 00 0b 	add	r11,r8,r11
80002636:	f6 0c 0d 0a 	divu	r10,r11,r12
8000263a:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
8000263c:	f4 c8 00 01 	sub	r8,r10,1
80002640:	e0 48 00 fe 	cp.w	r8,254
80002644:	e0 8b 00 04 	brhi	8000264c <getBaudDiv+0x26>
    return -1;
  }

  return baudDiv;
80002648:	5c 8c       	casts.h	r12
}
8000264a:	5e fc       	retal	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);

  if (baudDiv <= 0 || baudDiv > 255) {
8000264c:	5e fe       	retal	-1

8000264e <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000264e:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002650:	30 1a       	mov	r10,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002652:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002654:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002658:	f4 09 18 00 	cp.b	r9,r10
8000265c:	e0 88 00 04 	brls	80002664 <spi_initMaster+0x16>
80002660:	30 2c       	mov	r12,2
80002662:	d8 02       	popm	pc
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002664:	e0 6a 00 80 	mov	r10,128
80002668:	99 0a       	st.w	r12[0x0],r10

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
8000266a:	30 0b       	mov	r11,0

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
8000266c:	70 1a       	ld.w	r10,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
8000266e:	30 1e       	mov	lr,1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
80002670:	16 9c       	mov	r12,r11
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
80002672:	f5 de d0 01 	bfins	r10,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002676:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000267a:	30 f9       	mov	r9,15

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
8000267c:	f5 db d0 e1 	bfins	r10,r11,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002680:	f5 d9 d2 04 	bfins	r10,r9,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
80002684:	91 1a       	st.w	r8[0x4],r10

  return SPI_OK;
}
80002686:	d8 02       	popm	pc

80002688 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80002688:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8000268a:	30 18       	mov	r8,1
8000268c:	f0 0b 18 00 	cp.b	r11,r8
80002690:	5f be       	srhi	lr
80002692:	f0 0a 18 00 	cp.b	r10,r8
80002696:	5f b8       	srhi	r8
80002698:	1c 48       	or	r8,lr
8000269a:	c0 a1       	brne	800026ae <spi_selectionMode+0x26>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
8000269c:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
8000269e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800026a2:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
800026a6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
800026aa:	99 18       	st.w	r12[0x4],r8
800026ac:	d8 0a       	popm	pc,r12=0
                               unsigned char pcs_decode,
                               unsigned char delay)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800026ae:	30 2c       	mov	r12,2
800026b0:	d8 02       	popm	pc

800026b2 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800026b2:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800026b4:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800026b6:	ea 19 00 0f 	orh	r9,0xf
800026ba:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800026bc:	78 1c       	ld.w	r12,r12[0x4]
800026be:	e2 1c 00 04 	andl	r12,0x4,COH
800026c2:	c0 80       	breq	800026d2 <spi_selectChip+0x20>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800026c4:	30 e9       	mov	r9,14
800026c6:	f2 0b 18 00 	cp.b	r11,r9
800026ca:	e0 88 00 12 	brls	800026ee <spi_selectChip+0x3c>
  } else {
    if (chip > 3) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800026ce:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
800026d0:	5e fc       	retal	r12
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
  } else {
    if (chip > 3) {
800026d2:	30 39       	mov	r9,3
800026d4:	f2 0b 18 00 	cp.b	r11,r9
800026d8:	fe 9b ff fb 	brhi	800026ce <spi_selectChip+0x1c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800026dc:	70 19       	ld.w	r9,r8[0x4]
800026de:	2f 0b       	sub	r11,-16
800026e0:	30 1a       	mov	r10,1
800026e2:	f4 0b 09 4b 	lsl	r11,r10,r11
800026e6:	5c db       	com	r11
800026e8:	12 6b       	and	r11,r9
800026ea:	91 1b       	st.w	r8[0x4],r11
800026ec:	5e fc       	retal	r12
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
800026ee:	70 19       	ld.w	r9,r8[0x4]
800026f0:	b1 6b       	lsl	r11,0x10
800026f2:	30 0c       	mov	r12,0
800026f4:	ea 1b ff f0 	orh	r11,0xfff0
800026f8:	e8 1b ff ff 	orl	r11,0xffff
800026fc:	12 6b       	and	r11,r9
800026fe:	91 1b       	st.w	r8[0x4],r11
80002700:	5e fc       	retal	r12

80002702 <spi_unselectChip>:
  return SPI_OK;
}


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002702:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002704:	c0 58       	rjmp	8000270e <spi_unselectChip+0xc>
80002706:	2f f9       	sub	r9,-1
    if (!timeout--) {
80002708:	e0 49 3a 99 	cp.w	r9,15001
8000270c:	c0 d0       	breq	80002726 <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000270e:	78 48       	ld.w	r8,r12[0x10]
80002710:	ed b8 00 09 	bld	r8,0x9
80002714:	cf 91       	brne	80002706 <spi_unselectChip+0x4>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002716:	78 18       	ld.w	r8,r12[0x4]
80002718:	ea 18 00 0f 	orh	r8,0xf
8000271c:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000271e:	fc 18 01 00 	movh	r8,0x100
80002722:	99 08       	st.w	r12[0x0],r8
80002724:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002726:	5e ff       	retal	1

80002728 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002728:	eb cd 40 fe 	pushm	r1-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000272c:	30 34       	mov	r4,3


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
8000272e:	16 97       	mov	r7,r11
80002730:	18 96       	mov	r6,r12
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002732:	f7 35 00 0c 	ld.ub	r5,r11[12]
80002736:	e8 05 18 00 	cp.b	r5,r4
8000273a:	e0 8b 00 09 	brhi	8000274c <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
8000273e:	f7 32 00 0b 	ld.ub	r2,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002742:	30 13       	mov	r3,1
80002744:	e6 02 18 00 	cp.b	r2,r3
80002748:	e0 88 00 05 	brls	80002752 <spi_setupChipReg+0x2a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
      break;
8000274c:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
8000274e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80002752:	f7 31 00 08 	ld.ub	r1,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002756:	30 78       	mov	r8,7
80002758:	f0 01 18 00 	cp.b	r1,r8
8000275c:	fe 98 ff f8 	brls	8000274c <spi_setupChipReg+0x24>
80002760:	31 08       	mov	r8,16
80002762:	f0 01 18 00 	cp.b	r1,r8
80002766:	fe 9b ff f3 	brhi	8000274c <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000276a:	14 9b       	mov	r11,r10
8000276c:	6e 1c       	ld.w	r12,r7[0x4]
8000276e:	c5 cf       	rcall	80002626 <getBaudDiv>
80002770:	ce e5       	brlt	8000274c <spi_setupChipReg+0x24>

  if (baudDiv < 0) {
80002772:	0a 9a       	mov	r10,r5
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002774:	ec 1a 00 01 	eorl	r10,0x1
80002778:	30 08       	mov	r8,0
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
8000277a:	a1 95       	lsr	r5,0x1
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000277c:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80002780:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002784:	ef 3a 00 09 	ld.ub	r10,r7[9]
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002788:	20 81       	sub	r1,8
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000278a:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000278e:	0f 89       	ld.ub	r9,r7[0x0]
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
80002790:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002794:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002798:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000279c:	ef 3a 00 0a 	ld.ub	r10,r7[10]
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800027a0:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800027a4:	e6 09 18 00 	cp.b	r9,r3

  switch(options->reg) {
800027a8:	c0 f0       	breq	800027c6 <spi_setupChipReg+0x9e>
800027aa:	c0 b3       	brcs	800027c0 <spi_setupChipReg+0x98>
800027ac:	30 2a       	mov	r10,2
800027ae:	f4 09 18 00 	cp.b	r9,r10
800027b2:	c0 d0       	breq	800027cc <spi_setupChipReg+0xa4>
800027b4:	e8 09 18 00 	cp.b	r9,r4
800027b8:	cc a1       	brne	8000274c <spi_setupChipReg+0x24>
800027ba:	8d f8       	st.w	r6[0x3c],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800027bc:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027c0:	8d c8       	st.w	r6[0x30],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
800027c2:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027c6:	8d d8       	st.w	r6[0x34],r8
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
800027c8:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027cc:	8d e8       	st.w	r6[0x38],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
800027ce:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027d2:	d7 03       	nop

800027d4 <spi_enable>:
800027d4:	30 18       	mov	r8,1
800027d6:	99 08       	st.w	r12[0x0],r8


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
800027d8:	5e fc       	retal	r12

800027da <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800027da:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800027dc:	c0 58       	rjmp	800027e6 <spi_write+0xc>
800027de:	2f f9       	sub	r9,-1
    if (!timeout--) {
800027e0:	e0 49 3a 99 	cp.w	r9,15001
800027e4:	c0 80       	breq	800027f4 <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800027e6:	78 48       	ld.w	r8,r12[0x10]
800027e8:	ed b8 00 01 	bld	r8,0x1
800027ec:	cf 91       	brne	800027de <spi_write+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800027ee:	5c 7b       	castu.h	r11
800027f0:	99 3b       	st.w	r12[0xc],r11
800027f2:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
800027f4:	5e ff       	retal	1

800027f6 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
800027f6:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800027f8:	c0 58       	rjmp	80002802 <spi_read+0xc>
800027fa:	2f f9       	sub	r9,-1
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
800027fc:	e0 49 3a 99 	cp.w	r9,15001
80002800:	c0 b0       	breq	80002816 <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80002802:	78 48       	ld.w	r8,r12[0x10]
80002804:	e2 18 02 01 	andl	r8,0x201,COH
80002808:	e0 48 02 01 	cp.w	r8,513
8000280c:	cf 71       	brne	800027fa <spi_read+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000280e:	78 28       	ld.w	r8,r12[0x8]
80002810:	30 0c       	mov	r12,0
80002812:	b6 08       	st.h	r11[0x0],r8

  return SPI_OK;
}
80002814:	5e fc       	retal	r12
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002816:	5e ff       	retal	1

80002818 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80002818:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000281a:	76 09       	ld.w	r9,r11[0x0]
8000281c:	58 29       	cp.w	r9,2
8000281e:	e0 8b 00 4b 	brhi	800028b4 <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002822:	76 18       	ld.w	r8,r11[0x4]
80002824:	10 9e       	mov	lr,r8
80002826:	e6 1e c0 00 	andh	lr,0xc000,COH
8000282a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000282e:	af ba       	sbr	r10,0xf
80002830:	1c 4a       	or	r10,lr
80002832:	10 9e       	mov	lr,r8
80002834:	e6 1e 30 00 	andh	lr,0x3000,COH
80002838:	1c 4a       	or	r10,lr
8000283a:	10 9e       	mov	lr,r8
8000283c:	e6 1e 0c 00 	andh	lr,0xc00,COH
80002840:	1c 4a       	or	r10,lr
80002842:	10 9e       	mov	lr,r8
80002844:	e6 1e 03 00 	andh	lr,0x300,COH
80002848:	1c 4a       	or	r10,lr
8000284a:	10 9e       	mov	lr,r8
8000284c:	e6 1e 00 c0 	andh	lr,0xc0,COH
80002850:	1c 4a       	or	r10,lr
80002852:	10 9e       	mov	lr,r8
80002854:	e6 1e 00 30 	andh	lr,0x30,COH
80002858:	1c 4a       	or	r10,lr
8000285a:	10 9e       	mov	lr,r8
8000285c:	e6 1e 00 0c 	andh	lr,0xc,COH
80002860:	1c 4a       	or	r10,lr
80002862:	10 9e       	mov	lr,r8
80002864:	e6 1e 00 03 	andh	lr,0x3,COH
80002868:	1c 4a       	or	r10,lr
8000286a:	10 9e       	mov	lr,r8
8000286c:	e2 1e 60 00 	andl	lr,0x6000,COH
80002870:	1c 4a       	or	r10,lr
80002872:	10 9e       	mov	lr,r8
80002874:	e2 1e 10 00 	andl	lr,0x1000,COH
80002878:	1c 4a       	or	r10,lr
8000287a:	10 9e       	mov	lr,r8
8000287c:	e2 1e 0c 00 	andl	lr,0xc00,COH
80002880:	1c 4a       	or	r10,lr
80002882:	10 9e       	mov	lr,r8
80002884:	e2 1e 03 00 	andl	lr,0x300,COH
80002888:	1c 4a       	or	r10,lr
8000288a:	10 9e       	mov	lr,r8
8000288c:	e2 1e 00 80 	andl	lr,0x80,COH
80002890:	10 9b       	mov	r11,r8
80002892:	1c 4a       	or	r10,lr
80002894:	e2 1b 00 08 	andl	r11,0x8,COH
80002898:	10 9e       	mov	lr,r8
8000289a:	a5 69       	lsl	r9,0x4
8000289c:	e2 1e 00 40 	andl	lr,0x40,COH
800028a0:	2f f9       	sub	r9,-1
800028a2:	1c 4a       	or	r10,lr
800028a4:	e2 18 00 30 	andl	r8,0x30,COH
800028a8:	f5 e8 10 08 	or	r8,r10,r8
800028ac:	16 48       	or	r8,r11
800028ae:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800028b2:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800028b4:	dc 0a       	popm	pc,r12=-1

800028b6 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028b6:	58 2b       	cp.w	r11,2
800028b8:	e0 8b 00 07 	brhi	800028c6 <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800028bc:	a7 6b       	lsl	r11,0x6
800028be:	16 0c       	add	r12,r11
800028c0:	30 58       	mov	r8,5
800028c2:	99 08       	st.w	r12[0x0],r8
800028c4:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028c6:	5e fe       	retal	-1

800028c8 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028c8:	58 2b       	cp.w	r11,2
800028ca:	e0 8b 00 07 	brhi	800028d8 <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800028ce:	a7 6b       	lsl	r11,0x6
800028d0:	2e 0b       	sub	r11,-32
800028d2:	16 0c       	add	r12,r11
800028d4:	78 0c       	ld.w	r12,r12[0x0]
}
800028d6:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028d8:	5e fe       	retal	-1

800028da <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028da:	58 2b       	cp.w	r11,2
800028dc:	e0 8b 00 1a 	brhi	80002910 <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800028e0:	f6 08 15 04 	lsl	r8,r11,0x4
800028e4:	2f f8       	sub	r8,-1
800028e6:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800028ea:	ed b8 00 0f 	bld	r8,0xf
800028ee:	c0 e1       	brne	8000290a <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800028f0:	a7 6b       	lsl	r11,0x6
800028f2:	f8 0b 00 0b 	add	r11,r12,r11
800028f6:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800028fa:	2e 4b       	sub	r11,-28
800028fc:	76 08       	ld.w	r8,r11[0x0]
800028fe:	e0 18 00 00 	andl	r8,0x0
80002902:	f9 e8 10 08 	or	r8,r12,r8
80002906:	97 08       	st.w	r11[0x0],r8

  return value;
}
80002908:	5e fc       	retal	r12
8000290a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000290e:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002910:	5e fe       	retal	-1

80002912 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002912:	d4 31       	pushm	r0-r7,lr
80002914:	20 3d       	sub	sp,12
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002916:	e1 b8 00 00 	mfsr	r8,0x0
8000291a:	50 08       	stdsp	sp[0x0],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000291c:	58 2b       	cp.w	r11,2
8000291e:	e0 8b 00 74 	brhi	80002a06 <tc_configure_interrupts+0xf4>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002922:	74 0e       	ld.w	lr,r10[0x0]
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80002924:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002928:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000292c:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80002930:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80002934:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
80002938:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000293c:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002940:	e6 02 15 06 	lsl	r2,r3,0x6
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80002944:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002948:	e5 e8 10 72 	or	r2,r2,r8<<0x7
8000294c:	12 42       	or	r2,r9
8000294e:	e5 e4 10 52 	or	r2,r2,r4<<0x5
80002952:	e5 e5 10 42 	or	r2,r2,r5<<0x4
80002956:	e5 e6 10 32 	or	r2,r2,r6<<0x3
8000295a:	e5 e7 10 22 	or	r2,r2,r7<<0x2
8000295e:	e5 ee 10 12 	or	r2,r2,lr<<0x1
80002962:	50 22       	stdsp	sp[0x8],r2
80002964:	f6 02 15 06 	lsl	r2,r11,0x6
80002968:	40 21       	lddsp	r1,sp[0x8]
8000296a:	f8 02 00 00 	add	r0,r12,r2
8000296e:	2d c0       	sub	r0,-36
80002970:	81 01       	st.w	r0[0x0],r1
80002972:	40 01       	lddsp	r1,sp[0x0]
80002974:	ee 11 00 01 	eorh	r1,0x1
80002978:	e3 d1 c2 01 	bfextu	r1,r1,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000297c:	c4 71       	brne	80002a0a <tc_configure_interrupts+0xf8>
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000297e:	ec 19 00 01 	eorl	r9,0x1
80002982:	e0 6a 00 80 	mov	r10,128
80002986:	58 08       	cp.w	r8,0
80002988:	f4 08 17 00 	moveq	r8,r10
8000298c:	f9 b8 01 00 	movne	r8,0
80002990:	12 48       	or	r8,r9
80002992:	f8 02 00 02 	add	r2,r12,r2
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002996:	58 03       	cp.w	r3,0
80002998:	f9 b3 00 40 	moveq	r3,64
8000299c:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800029a0:	58 04       	cp.w	r4,0
800029a2:	f9 b4 00 20 	moveq	r4,32
800029a6:	f9 b4 01 00 	movne	r4,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029aa:	f1 e3 10 03 	or	r3,r8,r3
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800029ae:	58 05       	cp.w	r5,0
800029b0:	f9 b5 00 10 	moveq	r5,16
800029b4:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800029b8:	58 06       	cp.w	r6,0
800029ba:	f9 b6 00 08 	moveq	r6,8
800029be:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800029c2:	58 07       	cp.w	r7,0
800029c4:	f9 b7 00 04 	moveq	r7,4
800029c8:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800029cc:	58 0e       	cp.w	lr,0
800029ce:	f9 be 00 02 	moveq	lr,2
800029d2:	f9 be 01 00 	movne	lr,0
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029d6:	a7 6b       	lsl	r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029d8:	2d 82       	sub	r2,-40
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029da:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029dc:	e7 e4 10 04 	or	r4,r3,r4
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029e0:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029e2:	e9 e5 10 05 	or	r5,r4,r5
800029e6:	eb e6 10 06 	or	r6,r5,r6
800029ea:	ed e7 10 07 	or	r7,r6,r7
800029ee:	ef ee 10 0e 	or	lr,r7,lr
800029f2:	85 0e       	st.w	r2[0x0],lr
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029f4:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800029f6:	58 01       	cp.w	r1,0
800029f8:	c0 41       	brne	80002a00 <tc_configure_interrupts+0xee>
800029fa:	02 9c       	mov	r12,r1

  return 0;
}
800029fc:	2f dd       	sub	sp,-12
800029fe:	d8 32       	popm	r0-r7,pc
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
  if (global_interrupt_enabled) Enable_global_interrupt();
80002a00:	d5 03       	csrf	0x10
80002a02:	2f dd       	sub	sp,-12
80002a04:	d8 3a       	popm	r0-r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a06:	2f dd       	sub	sp,-12
80002a08:	dc 3a       	popm	r0-r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002a0a:	d3 03       	ssrf	0x10
80002a0c:	74 0e       	ld.w	lr,r10[0x0]
80002a0e:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
80002a12:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
80002a16:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
80002a1a:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
80002a1e:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
80002a22:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
80002a26:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
80002a2a:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
80002a2e:	ca 8b       	rjmp	8000297e <tc_configure_interrupts+0x6c>

80002a30 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002a30:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002a32:	f6 08 15 04 	lsl	r8,r11,0x4
80002a36:	14 38       	cp.w	r8,r10
80002a38:	e0 8b 00 26 	brhi	80002a84 <usart_set_async_baudrate+0x54>
80002a3c:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002a3e:	f0 09 16 01 	lsr	r9,r8,0x1
80002a42:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80002a46:	f2 08 0d 08 	divu	r8,r9,r8
80002a4a:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002a4c:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a4e:	f0 cb 00 01 	sub	r11,r8,1
80002a52:	e0 4b ff fe 	cp.w	r11,65534
80002a56:	e0 8b 00 1b 	brhi	80002a8c <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002a5a:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002a5c:	e8 6b 00 00 	mov	r11,524288
80002a60:	e4 1a ff f7 	andh	r10,0xfff7
80002a64:	e0 1a fe cf 	andl	r10,0xfecf
80002a68:	59 0e       	cp.w	lr,16
80002a6a:	f6 0e 17 10 	movne	lr,r11
80002a6e:	f9 be 00 00 	moveq	lr,0
80002a72:	fd ea 10 0a 	or	r10,lr,r10
80002a76:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002a78:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80002a7c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002a80:	99 88       	st.w	r12[0x20],r8
80002a82:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002a84:	f6 08 15 03 	lsl	r8,r11,0x3
80002a88:	30 8e       	mov	lr,8
80002a8a:	cd ab       	rjmp	80002a3e <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a8c:	da 0a       	popm	pc,r12=1

80002a8e <usart_spi_selectChip>:


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
80002a8e:	e4 68 00 00 	mov	r8,262144
80002a92:	99 08       	st.w	r12[0x0],r8

  return USART_SUCCESS;
}
80002a94:	5e fd       	retal	0

80002a96 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
80002a96:	30 09       	mov	r9,0
80002a98:	c0 58       	rjmp	80002aa2 <usart_spi_unselectChip+0xc>
80002a9a:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002a9c:	e0 49 27 10 	cp.w	r9,10000
80002aa0:	c0 90       	breq	80002ab2 <usart_spi_unselectChip+0x1c>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
80002aa2:	78 58       	ld.w	r8,r12[0x14]
  } while (!usart_tx_empty(usart));
80002aa4:	ed b8 00 09 	bld	r8,0x9
80002aa8:	cf 91       	brne	80002a9a <usart_spi_unselectChip+0x4>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
80002aaa:	e8 68 00 00 	mov	r8,524288
80002aae:	99 08       	st.w	r12[0x0],r8
80002ab0:	5e fd       	retal	0
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ab2:	5e fe       	retal	-1

80002ab4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002ab4:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002ab6:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ab8:	ed b8 00 01 	bld	r8,0x1
80002abc:	c0 51       	brne	80002ac6 <usart_putchar+0x12>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002abe:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002ac2:	99 7b       	st.w	r12[0x1c],r11
80002ac4:	5e fd       	retal	0
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002ac6:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ac8:	e0 49 27 10 	cp.w	r9,10000
80002acc:	cf 51       	brne	80002ab6 <usart_putchar+0x2>
80002ace:	5e fe       	retal	-1

80002ad0 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002ad0:	17 8a       	ld.ub	r10,r11[0x0]
80002ad2:	58 0a       	cp.w	r10,0
80002ad4:	5e 0c       	reteq	r12
80002ad6:	30 09       	mov	r9,0
80002ad8:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ada:	ed b8 00 01 	bld	r8,0x1
80002ade:	c0 91       	brne	80002af0 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002ae0:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002ae4:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002ae6:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002ae8:	17 8a       	ld.ub	r10,r11[0x0]
80002aea:	58 0a       	cp.w	r10,0
80002aec:	cf 51       	brne	80002ad6 <usart_write_line+0x6>
80002aee:	5e fc       	retal	r12
80002af0:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002af2:	e0 49 27 10 	cp.w	r9,10000
80002af6:	cf 11       	brne	80002ad8 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002af8:	2f fb       	sub	r11,-1
80002afa:	cf 7b       	rjmp	80002ae8 <usart_write_line+0x18>

80002afc <usart_init_spi_master>:
  return USART_SUCCESS;
}


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
80002afc:	eb cd 40 c0 	pushm	r6-r7,lr
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002b00:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002b04:	ed b8 00 10 	bld	r8,0x10
80002b08:	c5 71       	brne	80002bb6 <usart_init_spi_master+0xba>
  usart->idr = 0xFFFFFFFF;
80002b0a:	3f f8       	mov	r8,-1
80002b0c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002b0e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002b10:	30 08       	mov	r8,0
80002b12:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002b14:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002b16:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002b18:	ea 68 61 0c 	mov	r8,680204
80002b1c:	99 08       	st.w	r12[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b1e:	58 0b       	cp.w	r11,0
80002b20:	c4 90       	breq	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
80002b22:	17 c8       	ld.ub	r8,r11[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b24:	30 49       	mov	r9,4
80002b26:	f2 08 18 00 	cp.b	r8,r9
80002b2a:	e0 88 00 44 	brls	80002bb2 <usart_init_spi_master+0xb6>
80002b2e:	30 99       	mov	r9,9
80002b30:	f2 08 18 00 	cp.b	r8,r9
80002b34:	e0 8b 00 3f 	brhi	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
80002b38:	17 d7       	ld.ub	r7,r11[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b3a:	30 3e       	mov	lr,3
80002b3c:	0e 96       	mov	r6,r7
80002b3e:	fc 07 18 00 	cp.b	r7,lr
80002b42:	e0 8b 00 38 	brhi	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
80002b46:	17 e6       	ld.ub	r6,r11[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b48:	fc 06 18 00 	cp.b	r6,lr
80002b4c:	e0 8b 00 33 	brhi	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002b50:	76 0b       	ld.w	r11,r11[0x0]
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
80002b52:	f6 0e 16 01 	lsr	lr,r11,0x1
80002b56:	1c 0a       	add	r10,lr
80002b58:	f4 0b 0d 0a 	divu	r10,r10,r11

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b5c:	f4 ce 00 04 	sub	lr,r10,4
80002b60:	e0 4e ff fb 	cp.w	lr,65531
80002b64:	e0 8b 00 27 	brhi	80002bb2 <usart_init_spi_master+0xb6>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
80002b68:	78 1e       	ld.w	lr,r12[0x4]
80002b6a:	e0 1e ff cf 	andl	lr,0xffcf
80002b6e:	99 1e       	st.w	r12[0x4],lr
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
80002b70:	99 8a       	st.w	r12[0x20],r10
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002b72:	f2 08 18 00 	cp.b	r8,r9
80002b76:	c2 60       	breq	80002bc2 <usart_init_spi_master+0xc6>
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002b78:	78 19       	ld.w	r9,r12[0x4]
80002b7a:	20 58       	sub	r8,5
80002b7c:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002b80:	99 18       	st.w	r12[0x4],r8
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002b82:	ee 08 16 01 	lsr	r8,r7,0x1
80002b86:	af 66       	lsl	r6,0xe
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002b88:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002b8c:	ed e8 11 06 	or	r6,r6,r8<<0x10
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002b90:	e0 69 01 0e 	mov	r9,270
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002b94:	78 18       	ld.w	r8,r12[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002b96:	58 07       	cp.w	r7,0
80002b98:	f9 b7 01 0e 	movne	r7,14
80002b9c:	f2 07 17 00 	moveq	r7,r9
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002ba0:	b3 a8       	sbr	r8,0x12
80002ba2:	ed e7 10 07 	or	r7,r6,r7
80002ba6:	0e 48       	or	r8,r7
80002ba8:	99 18       	st.w	r12[0x4],r8
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002baa:	35 08       	mov	r8,80
80002bac:	99 08       	st.w	r12[0x0],r8
80002bae:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002bb2:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002bb6:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002bb8:	3f f8       	mov	r8,-1
80002bba:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002bbc:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002bbe:	d5 03       	csrf	0x10
80002bc0:	ca 8b       	rjmp	80002b10 <usart_init_spi_master+0x14>
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002bc2:	78 18       	ld.w	r8,r12[0x4]
80002bc4:	b1 b8       	sbr	r8,0x11
80002bc6:	99 18       	st.w	r12[0x4],r8
80002bc8:	cd db       	rjmp	80002b82 <usart_init_spi_master+0x86>
80002bca:	d7 03       	nop

80002bcc <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002bcc:	eb cd 40 e0 	pushm	r5-r7,lr
80002bd0:	18 97       	mov	r7,r12
80002bd2:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002bd4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002bd8:	ed b8 00 10 	bld	r8,0x10
80002bdc:	c2 e1       	brne	80002c38 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
80002bde:	3f f8       	mov	r8,-1
80002be0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002be2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002be4:	30 08       	mov	r8,0
80002be6:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
80002be8:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
80002bea:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002bec:	ea 68 61 0c 	mov	r8,680204
80002bf0:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002bf2:	58 06       	cp.w	r6,0
80002bf4:	c2 00       	breq	80002c34 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
80002bf6:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002bf8:	30 49       	mov	r9,4
80002bfa:	f2 08 18 00 	cp.b	r8,r9
80002bfe:	e0 88 00 1b 	brls	80002c34 <usart_init_rs232+0x68>
80002c02:	30 95       	mov	r5,9
80002c04:	ea 08 18 00 	cp.b	r8,r5
80002c08:	e0 8b 00 16 	brhi	80002c34 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c0c:	0d d9       	ld.ub	r9,r6[0x5]
80002c0e:	30 78       	mov	r8,7
80002c10:	f0 09 18 00 	cp.b	r9,r8
80002c14:	e0 8b 00 10 	brhi	80002c34 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
80002c18:	8c 39       	ld.sh	r9,r6[0x6]
80002c1a:	e0 68 01 01 	mov	r8,257
80002c1e:	f0 09 19 00 	cp.h	r9,r8
80002c22:	e0 8b 00 09 	brhi	80002c34 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
80002c26:	ed 39 00 08 	ld.ub	r9,r6[8]
80002c2a:	30 38       	mov	r8,3
80002c2c:	f0 09 18 00 	cp.b	r9,r8
80002c30:	e0 88 00 0a 	brls	80002c44 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002c34:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c38:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c3a:	3f f8       	mov	r8,-1
80002c3c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c3e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c40:	d5 03       	csrf	0x10
80002c42:	cd 1b       	rjmp	80002be4 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002c44:	6c 0b       	ld.w	r11,r6[0x0]
80002c46:	0e 9c       	mov	r12,r7
80002c48:	cf 4e       	rcall	80002a30 <usart_set_async_baudrate>
80002c4a:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c4c:	cf 40       	breq	80002c34 <usart_init_rs232+0x68>
80002c4e:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002c50:	ea 08 18 00 	cp.b	r8,r5
80002c54:	c2 a0       	breq	80002ca8 <usart_init_rs232+0xdc>
80002c56:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002c58:	20 58       	sub	r8,5
80002c5a:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002c5e:	8f 18       	st.w	r7[0x4],r8
80002c60:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002c62:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002c66:	0d d8       	ld.ub	r8,r6[0x5]
80002c68:	a9 78       	lsl	r8,0x9
80002c6a:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002c6e:	12 48       	or	r8,r9
80002c70:	8f 18       	st.w	r7[0x4],r8
80002c72:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002c74:	8c 38       	ld.sh	r8,r6[0x6]
80002c76:	f2 08 19 00 	cp.h	r8,r9
80002c7a:	e0 88 00 11 	brls	80002c9c <usart_init_rs232+0xd0>
80002c7e:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002c80:	ad b9       	sbr	r9,0xd
80002c82:	8f 19       	st.w	r7[0x4],r9
80002c84:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002c86:	20 28       	sub	r8,2
80002c88:	8f a8       	st.w	r7[0x28],r8
80002c8a:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002c8c:	e0 18 ff f0 	andl	r8,0xfff0
80002c90:	8f 18       	st.w	r7[0x4],r8
80002c92:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002c94:	35 08       	mov	r8,80
80002c96:	8f 08       	st.w	r7[0x0],r8
80002c98:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002c9c:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002c9e:	5c 78       	castu.h	r8
80002ca0:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002ca4:	8f 18       	st.w	r7[0x4],r8
80002ca6:	cf 2b       	rjmp	80002c8a <usart_init_rs232+0xbe>
80002ca8:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002caa:	b1 b8       	sbr	r8,0x11
80002cac:	8f 18       	st.w	r7[0x4],r8
80002cae:	cd 9b       	rjmp	80002c60 <usart_init_rs232+0x94>

80002cb0 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80002cb0:	d4 01       	pushm	lr


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80002cb2:	18 9b       	mov	r11,r12
80002cb4:	fe 7c 18 00 	mov	r12,-59392
80002cb8:	c0 cf       	rcall	80002ad0 <usart_write_line>
80002cba:	d8 02       	popm	pc

80002cbc <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002cbc:	eb cd 40 c0 	pushm	r6-r7,lr
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
80002cc0:	e0 69 14 f6 	mov	r9,5366
80002cc4:	e0 68 14 f8 	mov	r8,5368
80002cc8:	13 8b       	ld.ub	r11,r9[0x0]
80002cca:	11 dc       	ld.ub	r12,r8[0x5]
80002ccc:	30 39       	mov	r9,3
80002cce:	f2 0b 18 00 	cp.b	r11,r9
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002cd2:	c4 60       	breq	80002d5e <sd_mmc_spi_get_capacity+0xa2>
80002cd4:	11 fe       	ld.ub	lr,r8[0x7]
80002cd6:	f1 37 00 08 	ld.ub	r7,r8[8]
80002cda:	a7 87       	lsr	r7,0x6
80002cdc:	ee 0e 00 27 	add	r7,r7,lr<<0x2
80002ce0:	11 ee       	ld.ub	lr,r8[0x6]
80002ce2:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
    capacity = (uint64_t)c_size << 19;
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002ce6:	ab 6e       	lsl	lr,0xa
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002ce8:	f1 39 00 0a 	ld.ub	r9,r8[10]
80002cec:	1c 07       	add	r7,lr
80002cee:	f2 06 16 07 	lsr	r6,r9,0x7
80002cf2:	2f f7       	sub	r7,-1
80002cf4:	f1 3e 00 09 	ld.ub	lr,r8[9]
80002cf8:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80002cfc:	ec 0e 00 1e 	add	lr,r6,lr<<0x1
80002d00:	2f ee       	sub	lr,-2
80002d02:	ee 0e 09 4e 	lsl	lr,r7,lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002d06:	20 1e       	sub	lr,1
80002d08:	e0 6a 14 f0 	mov	r10,5360
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80002d0c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002d10:	95 0e       	st.w	r10[0x0],lr
80002d12:	74 0e       	ld.w	lr,r10[0x0]
80002d14:	2f fe       	sub	lr,-1
80002d16:	fc 0c 09 4e 	lsl	lr,lr,r12
80002d1a:	1c 96       	mov	r6,lr
80002d1c:	30 0e       	mov	lr,0
80002d1e:	1c 97       	mov	r7,lr
    capacity_mult = 0;
80002d20:	e0 6e 14 e4 	mov	lr,5348
80002d24:	fc e7 00 00 	st.d	lr[0],r6
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
80002d28:	e0 67 14 ec 	mov	r7,5356
80002d2c:	30 0e       	mov	lr,0
80002d2e:	ae 0e       	st.h	r7[0x0],lr
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80002d30:	30 97       	mov	r7,9
80002d32:	ee 0c 18 00 	cp.b	r12,r7
80002d36:	e0 88 00 07 	brls	80002d44 <sd_mmc_spi_get_capacity+0x88>
    }
  }
  if (card_type == MMC_CARD)
80002d3a:	74 0e       	ld.w	lr,r10[0x0]
80002d3c:	20 9c       	sub	r12,9
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80002d3e:	fc 0c 09 4c 	lsl	r12,lr,r12
80002d42:	95 0c       	st.w	r10[0x0],r12
80002d44:	58 0b       	cp.w	r11,0
80002d46:	c3 51       	brne	80002db0 <sd_mmc_spi_get_capacity+0xf4>
80002d48:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80002d4c:	f1 38 00 0b 	ld.ub	r8,r8[11]
80002d50:	f3 d9 c0 45 	bfextu	r9,r9,0x2,0x5
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002d54:	a5 98       	lsr	r8,0x5
80002d56:	f1 ea 10 38 	or	r8,r8,r10<<0x3
80002d5a:	2f f8       	sub	r8,-1
80002d5c:	c3 28       	rjmp	80002dc0 <sd_mmc_spi_get_capacity+0x104>
80002d5e:	f1 3e 00 08 	ld.ub	lr,r8[8]
80002d62:	f1 39 00 09 	ld.ub	r9,r8[9]
80002d66:	f3 ee 10 89 	or	r9,r9,lr<<0x8
    ++c_size;
80002d6a:	11 fe       	ld.ub	lr,r8[0x7]
    capacity = (uint64_t)c_size << 19;
80002d6c:	fd de c0 06 	bfextu	lr,lr,0x0,0x6
80002d70:	f3 ee 11 0e 	or	lr,r9,lr<<0x10
80002d74:	2f fe       	sub	lr,-1
80002d76:	fc 09 16 0d 	lsr	r9,lr,0xd
80002d7a:	fc 0a 15 13 	lsl	r10,lr,0x13
    capacity_mult = (c_size >> 13) & 0x01FF;
80002d7e:	e0 6c 14 e4 	mov	r12,5348
80002d82:	12 9b       	mov	r11,r9
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002d84:	f8 eb 00 00 	st.d	r12[0],r10
80002d88:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80002d8c:	e0 69 14 ec 	mov	r9,5356
80002d90:	b2 0a       	st.h	r9[0x0],r10
80002d92:	f8 ea 00 00 	ld.d	r10,r12[0]
80002d96:	92 0c       	ld.sh	r12,r9[0x0]
80002d98:	f4 09 16 09 	lsr	r9,r10,0x9
80002d9c:	b7 7c       	lsl	r12,0x17
80002d9e:	f3 eb 11 79 	or	r9,r9,r11<<0x17
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
80002da2:	20 19       	sub	r9,1
80002da4:	18 09       	add	r9,r12
80002da6:	e0 6a 14 f0 	mov	r10,5360
80002daa:	95 09       	st.w	r10[0x0],r9
80002dac:	f1 39 00 0a 	ld.ub	r9,r8[10]
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80002db0:	f1 38 00 0b 	ld.ub	r8,r8[11]
80002db4:	a7 98       	lsr	r8,0x7
80002db6:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
}
80002dba:	f0 09 00 19 	add	r9,r8,r9<<0x1
80002dbe:	30 18       	mov	r8,1
80002dc0:	2f f9       	sub	r9,-1
80002dc2:	b1 39       	mul	r9,r8
80002dc4:	e0 68 14 ee 	mov	r8,5358
80002dc8:	b0 09       	st.h	r8[0x0],r9
80002dca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dce:	d7 03       	nop

80002dd0 <sd_mmc_spi_read_close_PDCA>:
80002dd0:	d4 01       	pushm	lr
80002dd2:	e0 6b 00 ff 	mov	r11,255
//!
void sd_mmc_spi_read_close_PDCA (void)
{

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002dd6:	fe 7c 28 00 	mov	r12,-55296
80002dda:	fe b0 fd 00 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80002dde:	e0 6b 00 ff 	mov	r11,255
80002de2:	fe 7c 28 00 	mov	r12,-55296
80002de6:	fe b0 fc fa 	rcall	800027da <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002dea:	e0 6b 00 ff 	mov	r11,255
80002dee:	fe 7c 28 00 	mov	r12,-55296
80002df2:	fe b0 fc f4 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80002df6:	e0 6b 00 ff 	mov	r11,255
80002dfa:	fe 7c 28 00 	mov	r12,-55296
80002dfe:	fe b0 fc ee 	rcall	800027da <spi_write>

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002e02:	30 1b       	mov	r11,1
80002e04:	fe 7c 28 00 	mov	r12,-55296
80002e08:	fe b0 fc 7d 	rcall	80002702 <spi_unselectChip>

}
80002e0c:	d8 02       	popm	pc
80002e0e:	d7 03       	nop

80002e10 <sd_mmc_spi_wait_not_busy>:
80002e10:	d4 21       	pushm	r4-r7,lr
80002e12:	20 1d       	sub	sp,4
80002e14:	30 1b       	mov	r11,1
80002e16:	fe 7c 28 00 	mov	r12,-55296
bool sd_mmc_spi_wait_not_busy(void)
{
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002e1a:	fa c6 ff fe 	sub	r6,sp,-2
80002e1e:	fe b0 fc 4a 	rcall	800026b2 <spi_selectChip>
80002e22:	e0 65 15 08 	mov	r5,5384
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002e26:	30 07       	mov	r7,0
80002e28:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80002e2a:	c0 98       	rjmp	80002e3c <sd_mmc_spi_wait_not_busy+0x2c>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002e2c:	1b b8       	ld.ub	r8,sp[0x3]
80002e2e:	aa 88       	st.b	r5[0x0],r8
80002e30:	e8 08 18 00 	cp.b	r8,r4
  {
    retry++;
    if (retry == 200000)
80002e34:	c1 40       	breq	80002e5c <sd_mmc_spi_wait_not_busy+0x4c>
80002e36:	e2 57 0d 40 	cp.w	r7,200000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002e3a:	c1 80       	breq	80002e6a <sd_mmc_spi_wait_not_busy+0x5a>
80002e3c:	e0 6b 00 ff 	mov	r11,255
80002e40:	fe 7c 28 00 	mov	r12,-55296
80002e44:	fe b0 fc cb 	rcall	800027da <spi_write>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002e48:	0c 9b       	mov	r11,r6
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002e4a:	2f f7       	sub	r7,-1
80002e4c:	fe 7c 28 00 	mov	r12,-55296
80002e50:	fe b0 fc d3 	rcall	800027f6 <spi_read>
80002e54:	58 1c       	cp.w	r12,1
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002e56:	ce b1       	brne	80002e2c <sd_mmc_spi_wait_not_busy+0x1c>
80002e58:	3f f8       	mov	r8,-1
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002e5a:	aa 88       	st.b	r5[0x0],r8
80002e5c:	30 1b       	mov	r11,1
80002e5e:	fe 7c 28 00 	mov	r12,-55296
80002e62:	fe b0 fc 50 	rcall	80002702 <spi_unselectChip>
80002e66:	2f fd       	sub	sp,-4
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002e68:	da 2a       	popm	r4-r7,pc,r12=1
80002e6a:	30 1b       	mov	r11,1
80002e6c:	fe 7c 28 00 	mov	r12,-55296
80002e70:	fe b0 fc 49 	rcall	80002702 <spi_unselectChip>
80002e74:	2f fd       	sub	sp,-4
80002e76:	d8 2a       	popm	r4-r7,pc,r12=0

80002e78 <sd_mmc_spi_command>:
80002e78:	eb cd 40 e0 	pushm	r5-r7,lr
80002e7c:	20 1d       	sub	sp,4
80002e7e:	16 97       	mov	r7,r11
80002e80:	18 96       	mov	r6,r12
80002e82:	e0 6b 00 ff 	mov	r11,255
80002e86:	fe 7c 28 00 	mov	r12,-55296
80002e8a:	fe b0 fc a8 	rcall	800027da <spi_write>
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002e8e:	fe 7c 28 00 	mov	r12,-55296
80002e92:	0c 9b       	mov	r11,r6
80002e94:	a7 ab       	sbr	r11,0x6
80002e96:	5c 5b       	castu.b	r11
80002e98:	fe b0 fc a1 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80002e9c:	ee 0b 16 18 	lsr	r11,r7,0x18
80002ea0:	fe 7c 28 00 	mov	r12,-55296
80002ea4:	fe b0 fc 9b 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg>>16);
80002ea8:	ee 0b 16 10 	lsr	r11,r7,0x10
80002eac:	fe 7c 28 00 	mov	r12,-55296
80002eb0:	fe b0 fc 95 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg>>8 );
80002eb4:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80002eb8:	fe 7c 28 00 	mov	r12,-55296
80002ebc:	fe b0 fc 8f 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg    );
80002ec0:	0e 9b       	mov	r11,r7
80002ec2:	fe 7c 28 00 	mov	r12,-55296
80002ec6:	5c 7b       	castu.h	r11
80002ec8:	fe b0 fc 89 	rcall	800027da <spi_write>
  switch(command)
80002ecc:	30 08       	mov	r8,0
80002ece:	f0 06 18 00 	cp.b	r6,r8
80002ed2:	e0 80 00 ec 	breq	800030aa <sd_mmc_spi_command+0x232>
80002ed6:	30 88       	mov	r8,8
80002ed8:	f0 06 18 00 	cp.b	r6,r8
80002edc:	e0 80 00 ee 	breq	800030b8 <sd_mmc_spi_command+0x240>
         break;
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
         break;
      default:
         spi_write(SD_MMC_SPI, 0xff);
80002ee0:	e0 6b 00 ff 	mov	r11,255
80002ee4:	fe 7c 28 00 	mov	r12,-55296
80002ee8:	fe b0 fc 79 	rcall	800027da <spi_write>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002eec:	e0 6b 00 ff 	mov	r11,255

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002ef0:	e0 67 15 08 	mov	r7,5384
80002ef4:	3f f5       	mov	r5,-1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002ef6:	fe 7c 28 00 	mov	r12,-55296

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002efa:	ae 85       	st.b	r7[0x0],r5
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002efc:	fe b0 fc 6f 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002f00:	fa c6 ff fe 	sub	r6,sp,-2
80002f04:	fe 7c 28 00 	mov	r12,-55296
80002f08:	0c 9b       	mov	r11,r6
80002f0a:	fe b0 fc 76 	rcall	800027f6 <spi_read>
80002f0e:	58 1c       	cp.w	r12,1
80002f10:	e0 80 00 db 	breq	800030c6 <sd_mmc_spi_command+0x24e>
     return 0xFF;
   return data_read;
80002f14:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002f16:	ae 8c       	st.b	r7[0x0],r12
80002f18:	ea 0c 18 00 	cp.b	r12,r5
80002f1c:	e0 81 00 c4 	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002f20:	e0 6b 00 ff 	mov	r11,255
80002f24:	fe 7c 28 00 	mov	r12,-55296
80002f28:	fe b0 fc 59 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002f2c:	0c 9b       	mov	r11,r6
80002f2e:	fe 7c 28 00 	mov	r12,-55296
80002f32:	fe b0 fc 62 	rcall	800027f6 <spi_read>
80002f36:	58 1c       	cp.w	r12,1
80002f38:	e0 80 00 c9 	breq	800030ca <sd_mmc_spi_command+0x252>
     return 0xFF;
   return data_read;
80002f3c:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002f3e:	ae 8c       	st.b	r7[0x0],r12
80002f40:	3f f8       	mov	r8,-1
80002f42:	f0 0c 18 00 	cp.b	r12,r8
80002f46:	e0 81 00 af 	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002f4a:	e0 6b 00 ff 	mov	r11,255
80002f4e:	fe 7c 28 00 	mov	r12,-55296
80002f52:	fe b0 fc 44 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002f56:	0c 9b       	mov	r11,r6
80002f58:	fe 7c 28 00 	mov	r12,-55296
80002f5c:	fe b0 fc 4d 	rcall	800027f6 <spi_read>
80002f60:	58 1c       	cp.w	r12,1
80002f62:	e0 80 00 b7 	breq	800030d0 <sd_mmc_spi_command+0x258>
     return 0xFF;
   return data_read;
80002f66:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002f68:	ae 8c       	st.b	r7[0x0],r12
80002f6a:	3f f8       	mov	r8,-1
80002f6c:	f0 0c 18 00 	cp.b	r12,r8
80002f70:	e0 81 00 9a 	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002f74:	e0 6b 00 ff 	mov	r11,255
80002f78:	fe 7c 28 00 	mov	r12,-55296
80002f7c:	fe b0 fc 2f 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002f80:	0c 9b       	mov	r11,r6
80002f82:	fe 7c 28 00 	mov	r12,-55296
80002f86:	fe b0 fc 38 	rcall	800027f6 <spi_read>
80002f8a:	58 1c       	cp.w	r12,1
80002f8c:	e0 80 00 a5 	breq	800030d6 <sd_mmc_spi_command+0x25e>
     return 0xFF;
   return data_read;
80002f90:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002f92:	ae 8c       	st.b	r7[0x0],r12
80002f94:	3f f8       	mov	r8,-1
80002f96:	f0 0c 18 00 	cp.b	r12,r8
80002f9a:	e0 81 00 85 	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002f9e:	e0 6b 00 ff 	mov	r11,255
80002fa2:	fe 7c 28 00 	mov	r12,-55296
80002fa6:	fe b0 fc 1a 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002faa:	0c 9b       	mov	r11,r6
80002fac:	fe 7c 28 00 	mov	r12,-55296
80002fb0:	fe b0 fc 23 	rcall	800027f6 <spi_read>
80002fb4:	58 1c       	cp.w	r12,1
80002fb6:	e0 80 00 93 	breq	800030dc <sd_mmc_spi_command+0x264>
     return 0xFF;
   return data_read;
80002fba:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002fbc:	ae 8c       	st.b	r7[0x0],r12
80002fbe:	3f f8       	mov	r8,-1
80002fc0:	f0 0c 18 00 	cp.b	r12,r8
80002fc4:	c7 01       	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002fc6:	e0 6b 00 ff 	mov	r11,255
80002fca:	fe 7c 28 00 	mov	r12,-55296
80002fce:	fe b0 fc 06 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002fd2:	0c 9b       	mov	r11,r6
80002fd4:	fe 7c 28 00 	mov	r12,-55296
80002fd8:	fe b0 fc 0f 	rcall	800027f6 <spi_read>
80002fdc:	58 1c       	cp.w	r12,1
80002fde:	e0 80 00 82 	breq	800030e2 <sd_mmc_spi_command+0x26a>
     return 0xFF;
   return data_read;
80002fe2:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002fe4:	ae 8c       	st.b	r7[0x0],r12
80002fe6:	3f f8       	mov	r8,-1
80002fe8:	f0 0c 18 00 	cp.b	r12,r8
80002fec:	c5 c1       	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002fee:	e0 6b 00 ff 	mov	r11,255
80002ff2:	fe 7c 28 00 	mov	r12,-55296
80002ff6:	fe b0 fb f2 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002ffa:	0c 9b       	mov	r11,r6
80002ffc:	fe 7c 28 00 	mov	r12,-55296
80003000:	fe b0 fb fb 	rcall	800027f6 <spi_read>
80003004:	58 1c       	cp.w	r12,1
80003006:	c7 10       	breq	800030e8 <sd_mmc_spi_command+0x270>
     return 0xFF;
   return data_read;
80003008:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000300a:	ae 8c       	st.b	r7[0x0],r12
8000300c:	3f f8       	mov	r8,-1
8000300e:	f0 0c 18 00 	cp.b	r12,r8
80003012:	c4 91       	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003014:	e0 6b 00 ff 	mov	r11,255
80003018:	fe 7c 28 00 	mov	r12,-55296
8000301c:	fe b0 fb df 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003020:	0c 9b       	mov	r11,r6
80003022:	fe 7c 28 00 	mov	r12,-55296
80003026:	fe b0 fb e8 	rcall	800027f6 <spi_read>
8000302a:	58 1c       	cp.w	r12,1
8000302c:	c6 10       	breq	800030ee <sd_mmc_spi_command+0x276>
     return 0xFF;
   return data_read;
8000302e:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003030:	ae 8c       	st.b	r7[0x0],r12
80003032:	3f f8       	mov	r8,-1
80003034:	f0 0c 18 00 	cp.b	r12,r8
80003038:	c3 61       	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000303a:	e0 6b 00 ff 	mov	r11,255
8000303e:	fe 7c 28 00 	mov	r12,-55296
80003042:	fe b0 fb cc 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003046:	0c 9b       	mov	r11,r6
80003048:	fe 7c 28 00 	mov	r12,-55296
8000304c:	fe b0 fb d5 	rcall	800027f6 <spi_read>
80003050:	58 1c       	cp.w	r12,1
80003052:	c5 10       	breq	800030f4 <sd_mmc_spi_command+0x27c>
     return 0xFF;
   return data_read;
80003054:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003056:	ae 8c       	st.b	r7[0x0],r12
80003058:	3f f8       	mov	r8,-1
8000305a:	f0 0c 18 00 	cp.b	r12,r8
8000305e:	c2 31       	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003060:	e0 6b 00 ff 	mov	r11,255
80003064:	fe 7c 28 00 	mov	r12,-55296
80003068:	fe b0 fb b9 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000306c:	0c 9b       	mov	r11,r6
8000306e:	fe 7c 28 00 	mov	r12,-55296
80003072:	fe b0 fb c2 	rcall	800027f6 <spi_read>
80003076:	58 1c       	cp.w	r12,1
80003078:	c4 10       	breq	800030fa <sd_mmc_spi_command+0x282>
     return 0xFF;
   return data_read;
8000307a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000307c:	ae 8c       	st.b	r7[0x0],r12
8000307e:	3f f8       	mov	r8,-1
80003080:	f0 0c 18 00 	cp.b	r12,r8
80003084:	c1 01       	brne	800030a4 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003086:	e0 6b 00 ff 	mov	r11,255
8000308a:	fe 7c 28 00 	mov	r12,-55296
8000308e:	fe b0 fb a6 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003092:	0c 9b       	mov	r11,r6
80003094:	fe 7c 28 00 	mov	r12,-55296
80003098:	fe b0 fb af 	rcall	800027f6 <spi_read>
8000309c:	58 1c       	cp.w	r12,1
8000309e:	c3 10       	breq	80003100 <sd_mmc_spi_command+0x288>
     return 0xFF;
   return data_read;
800030a0:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800030a2:	ae 8c       	st.b	r7[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800030a4:	2f fd       	sub	sp,-4
800030a6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  spi_write(SD_MMC_SPI, arg>>8 );
  spi_write(SD_MMC_SPI, arg    );
  switch(command)
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
800030aa:	e0 6b 00 95 	mov	r11,149
800030ae:	fe 7c 28 00 	mov	r12,-55296
800030b2:	fe b0 fb 94 	rcall	800027da <spi_write>
         break;
800030b6:	c1 bb       	rjmp	80002eec <sd_mmc_spi_command+0x74>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
800030b8:	e0 6b 00 87 	mov	r11,135
800030bc:	fe 7c 28 00 	mov	r12,-55296
800030c0:	fe b0 fb 8d 	rcall	800027da <spi_write>
         break;
800030c4:	c1 4b       	rjmp	80002eec <sd_mmc_spi_command+0x74>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800030c6:	ae 85       	st.b	r7[0x0],r5
800030c8:	c2 cb       	rjmp	80002f20 <sd_mmc_spi_command+0xa8>
800030ca:	3f f8       	mov	r8,-1
800030cc:	ae 88       	st.b	r7[0x0],r8
800030ce:	c3 eb       	rjmp	80002f4a <sd_mmc_spi_command+0xd2>
800030d0:	3f f8       	mov	r8,-1
800030d2:	ae 88       	st.b	r7[0x0],r8
800030d4:	c5 0b       	rjmp	80002f74 <sd_mmc_spi_command+0xfc>
800030d6:	3f f8       	mov	r8,-1
800030d8:	ae 88       	st.b	r7[0x0],r8
800030da:	c6 2b       	rjmp	80002f9e <sd_mmc_spi_command+0x126>
800030dc:	3f f8       	mov	r8,-1
800030de:	ae 88       	st.b	r7[0x0],r8
800030e0:	c7 3b       	rjmp	80002fc6 <sd_mmc_spi_command+0x14e>
800030e2:	3f f8       	mov	r8,-1
800030e4:	ae 88       	st.b	r7[0x0],r8
800030e6:	c8 4b       	rjmp	80002fee <sd_mmc_spi_command+0x176>
800030e8:	3f f8       	mov	r8,-1
800030ea:	ae 88       	st.b	r7[0x0],r8
800030ec:	c9 4b       	rjmp	80003014 <sd_mmc_spi_command+0x19c>
800030ee:	3f f8       	mov	r8,-1
800030f0:	ae 88       	st.b	r7[0x0],r8
800030f2:	ca 4b       	rjmp	8000303a <sd_mmc_spi_command+0x1c2>
800030f4:	3f f8       	mov	r8,-1
800030f6:	ae 88       	st.b	r7[0x0],r8
800030f8:	cb 4b       	rjmp	80003060 <sd_mmc_spi_command+0x1e8>
800030fa:	3f f8       	mov	r8,-1
800030fc:	ae 88       	st.b	r7[0x0],r8
800030fe:	cc 4b       	rjmp	80003086 <sd_mmc_spi_command+0x20e>
80003100:	3f f8       	mov	r8,-1
80003102:	e0 6c 00 ff 	mov	r12,255
80003106:	ae 88       	st.b	r7[0x0],r8
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80003108:	2f fd       	sub	sp,-4
8000310a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000310e:	d7 03       	nop

80003110 <sd_mmc_spi_check_hc>:
80003110:	eb cd 40 e0 	pushm	r5-r7,lr
80003114:	20 1d       	sub	sp,4
80003116:	c7 de       	rcall	80002e10 <sd_mmc_spi_wait_not_busy>
80003118:	c0 61       	brne	80003124 <sd_mmc_spi_check_hc+0x14>
8000311a:	3f f7       	mov	r7,-1

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000311c:	0e 9c       	mov	r12,r7
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000311e:	2f fd       	sub	sp,-4
80003120:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003124:	30 1b       	mov	r11,1
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003126:	fe 7c 28 00 	mov	r12,-55296
8000312a:	fe b0 fa c4 	rcall	800026b2 <spi_selectChip>
8000312e:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80003130:	33 ac       	mov	r12,58
80003132:	e0 66 15 08 	mov	r6,5384
80003136:	ca 1e       	rcall	80002e78 <sd_mmc_spi_command>
80003138:	ac 8c       	st.b	r6[0x0],r12
8000313a:	c5 41       	brne	800031e2 <sd_mmc_spi_check_hc+0xd2>
  // check for valid response
  if(r1 != 0) {
8000313c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003140:	fe 7c 28 00 	mov	r12,-55296
80003144:	fe b0 fb 4b 	rcall	800027da <spi_write>
80003148:	fa c5 ff fe 	sub	r5,sp,-2
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000314c:	fe 7c 28 00 	mov	r12,-55296
80003150:	0a 9b       	mov	r11,r5
80003152:	fe b0 fb 52 	rcall	800027f6 <spi_read>
80003156:	58 1c       	cp.w	r12,1
80003158:	c3 a0       	breq	800031cc <sd_mmc_spi_check_hc+0xbc>
8000315a:	1b b7       	ld.ub	r7,sp[0x3]
8000315c:	ef d7 c0 c1 	bfextu	r7,r7,0x6,0x1
80003160:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003164:	fe 7c 28 00 	mov	r12,-55296
80003168:	fe b0 fb 39 	rcall	800027da <spi_write>
8000316c:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000316e:	fe 7c 28 00 	mov	r12,-55296
80003172:	fe b0 fb 42 	rcall	800027f6 <spi_read>
80003176:	58 1c       	cp.w	r12,1
80003178:	c3 20       	breq	800031dc <sd_mmc_spi_check_hc+0xcc>
8000317a:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
8000317c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003180:	ac 88       	st.b	r6[0x0],r8
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003182:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003186:	fe b0 fb 2a 	rcall	800027da <spi_write>
8000318a:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000318c:	fe 7c 28 00 	mov	r12,-55296
80003190:	fe b0 fb 33 	rcall	800027f6 <spi_read>
80003194:	58 1c       	cp.w	r12,1
80003196:	c2 00       	breq	800031d6 <sd_mmc_spi_check_hc+0xc6>
80003198:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
8000319a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000319e:	ac 88       	st.b	r6[0x0],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800031a0:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800031a4:	fe b0 fb 1b 	rcall	800027da <spi_write>
800031a8:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800031aa:	fe 7c 28 00 	mov	r12,-55296
800031ae:	fe b0 fb 24 	rcall	800027f6 <spi_read>
800031b2:	58 1c       	cp.w	r12,1
800031b4:	c0 e0       	breq	800031d0 <sd_mmc_spi_check_hc+0xc0>
800031b6:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
800031b8:	ac 88       	st.b	r6[0x0],r8
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800031ba:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800031bc:	fe 7c 28 00 	mov	r12,-55296
800031c0:	fe b0 fa a1 	rcall	80002702 <spi_unselectChip>
800031c4:	0e 9c       	mov	r12,r7
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
800031c6:	2f fd       	sub	sp,-4
800031c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800031cc:	18 97       	mov	r7,r12
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800031ce:	cc 9b       	rjmp	80003160 <sd_mmc_spi_check_hc+0x50>
800031d0:	e0 68 00 ff 	mov	r8,255
800031d4:	cf 2b       	rjmp	800031b8 <sd_mmc_spi_check_hc+0xa8>
800031d6:	e0 68 00 ff 	mov	r8,255
800031da:	ce 0b       	rjmp	8000319a <sd_mmc_spi_check_hc+0x8a>
800031dc:	e0 68 00 ff 	mov	r8,255
800031e0:	cc eb       	rjmp	8000317c <sd_mmc_spi_check_hc+0x6c>
800031e2:	30 1b       	mov	r11,1

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800031e4:	fe 7c 28 00 	mov	r12,-55296
800031e8:	fe b0 fa 8d 	rcall	80002702 <spi_unselectChip>
800031ec:	c9 7b       	rjmp	8000311a <sd_mmc_spi_check_hc+0xa>
800031ee:	d7 03       	nop

800031f0 <sd_mmc_spi_get_if>:
800031f0:	eb cd 40 e0 	pushm	r5-r7,lr
800031f4:	20 1d       	sub	sp,4
800031f6:	c0 de       	rcall	80002e10 <sd_mmc_spi_wait_not_busy>
800031f8:	c0 51       	brne	80003202 <sd_mmc_spi_get_if+0x12>
800031fa:	3f fc       	mov	r12,-1
800031fc:	2f fd       	sub	sp,-4
800031fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003202:	30 1b       	mov	r11,1
80003204:	fe 7c 28 00 	mov	r12,-55296
80003208:	fe b0 fa 55 	rcall	800026b2 <spi_selectChip>
{
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000320c:	e0 6b 01 aa 	mov	r11,426
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80003210:	e0 67 15 08 	mov	r7,5384
80003214:	30 8c       	mov	r12,8
80003216:	c3 1e       	rcall	80002e78 <sd_mmc_spi_command>
80003218:	ae 8c       	st.b	r7[0x0],r12
8000321a:	ed bc 00 02 	bld	r12,0x2
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000321e:	c5 00       	breq	800032be <sd_mmc_spi_get_if+0xce>
80003220:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003224:	fe 7c 28 00 	mov	r12,-55296
80003228:	fe b0 fa d9 	rcall	800027da <spi_write>
8000322c:	fa c6 ff fe 	sub	r6,sp,-2
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003230:	fe 7c 28 00 	mov	r12,-55296
80003234:	0c 9b       	mov	r11,r6
80003236:	fe b0 fa e0 	rcall	800027f6 <spi_read>
8000323a:	58 1c       	cp.w	r12,1
8000323c:	c4 90       	breq	800032ce <sd_mmc_spi_get_if+0xde>
8000323e:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
80003240:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003244:	ae 88       	st.b	r7[0x0],r8
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003246:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000324a:	fe b0 fa c8 	rcall	800027da <spi_write>
8000324e:	0c 9b       	mov	r11,r6
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003250:	fe 7c 28 00 	mov	r12,-55296
80003254:	fe b0 fa d1 	rcall	800027f6 <spi_read>
80003258:	58 1c       	cp.w	r12,1
8000325a:	c4 00       	breq	800032da <sd_mmc_spi_get_if+0xea>
8000325c:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
8000325e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003262:	ae 88       	st.b	r7[0x0],r8
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003264:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003268:	fe b0 fa b9 	rcall	800027da <spi_write>
8000326c:	0c 9b       	mov	r11,r6
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000326e:	fe 7c 28 00 	mov	r12,-55296
80003272:	e0 65 15 08 	mov	r5,5384
80003276:	fe b0 fa c0 	rcall	800027f6 <spi_read>
8000327a:	58 1c       	cp.w	r12,1
8000327c:	c2 c0       	breq	800032d4 <sd_mmc_spi_get_if+0xe4>
     return 0xFF;
   return data_read;
8000327e:	1b b8       	ld.ub	r8,sp[0x3]
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003280:	aa 88       	st.b	r5[0x0],r8
  if((r1 & 0x01) == 0) {
80003282:	ed b8 00 00 	bld	r8,0x0
80003286:	c3 61       	brne	800032f2 <sd_mmc_spi_get_if+0x102>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003288:	e0 6b 00 ff 	mov	r11,255
8000328c:	fe 7c 28 00 	mov	r12,-55296
80003290:	fe b0 fa a5 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003294:	0c 9b       	mov	r11,r6
80003296:	fe 7c 28 00 	mov	r12,-55296
8000329a:	fe b0 fa ae 	rcall	800027f6 <spi_read>
8000329e:	58 1c       	cp.w	r12,1
800032a0:	c2 00       	breq	800032e0 <sd_mmc_spi_get_if+0xf0>
     return 0xFF;
   return data_read;
800032a2:	1b b8       	ld.ub	r8,sp[0x3]
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800032a4:	ae 88       	st.b	r7[0x0],r8
  if(r1 != 0xaa) {
800032a6:	3a a9       	mov	r9,-86
800032a8:	f2 08 18 00 	cp.b	r8,r9
800032ac:	c1 c1       	brne	800032e4 <sd_mmc_spi_get_if+0xf4>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800032ae:	30 1b       	mov	r11,1
800032b0:	fe 7c 28 00 	mov	r12,-55296
800032b4:	fe b0 fa 27 	rcall	80002702 <spi_unselectChip>
800032b8:	2f fd       	sub	sp,-4
800032ba:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800032be:	30 1b       	mov	r11,1
800032c0:	fe 7c 28 00 	mov	r12,-55296
800032c4:	fe b0 fa 1f 	rcall	80002702 <spi_unselectChip>
800032c8:	2f fd       	sub	sp,-4
800032ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800032ce:	e0 68 00 ff 	mov	r8,255
800032d2:	cb 7b       	rjmp	80003240 <sd_mmc_spi_get_if+0x50>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800032d4:	3f f8       	mov	r8,-1
800032d6:	aa 88       	st.b	r5[0x0],r8
800032d8:	cd 8b       	rjmp	80003288 <sd_mmc_spi_get_if+0x98>
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800032da:	e0 68 00 ff 	mov	r8,255
800032de:	cc 0b       	rjmp	8000325e <sd_mmc_spi_get_if+0x6e>
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800032e0:	3f f8       	mov	r8,-1
800032e2:	ae 88       	st.b	r7[0x0],r8
  if(r1 != 0xaa) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800032e4:	30 1b       	mov	r11,1
800032e6:	fe 7c 28 00 	mov	r12,-55296
800032ea:	fe b0 fa 0c 	rcall	80002702 <spi_unselectChip>
800032ee:	3f fc       	mov	r12,-1
    return SD_FAILURE; /* wrong test pattern */
800032f0:	c8 6b       	rjmp	800031fc <sd_mmc_spi_get_if+0xc>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800032f2:	30 1b       	mov	r11,1
800032f4:	fe 7c 28 00 	mov	r12,-55296
800032f8:	fe b0 fa 05 	rcall	80002702 <spi_unselectChip>
800032fc:	c7 fb       	rjmp	800031fa <sd_mmc_spi_get_if+0xa>
800032fe:	d7 03       	nop

80003300 <sd_mmc_spi_internal_init>:
80003300:	d4 31       	pushm	r0-r7,lr
80003302:	20 1d       	sub	sp,4
80003304:	e6 68 1a 80 	mov	r8,400000
80003308:	e0 69 01 04 	mov	r9,260
8000330c:	e0 67 00 f4 	mov	r7,244
80003310:	72 0a       	ld.w	r10,r9[0x0]
80003312:	8f 18       	st.w	r7[0x4],r8
80003314:	0e 9b       	mov	r11,r7
80003316:	fe 7c 28 00 	mov	r12,-55296
8000331a:	fe b0 fa 07 	rcall	80002728 <spi_setupChipReg>
  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000331e:	30 1b       	mov	r11,1
80003320:	fe 7c 28 00 	mov	r12,-55296
80003324:	fe b0 f9 c7 	rcall	800026b2 <spi_selectChip>
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
80003328:	e0 6b 00 ff 	mov	r11,255
8000332c:	fe 7c 28 00 	mov	r12,-55296
80003330:	fe b0 fa 55 	rcall	800027da <spi_write>
80003334:	e0 6b 00 ff 	mov	r11,255
80003338:	fe 7c 28 00 	mov	r12,-55296
8000333c:	fe b0 fa 4f 	rcall	800027da <spi_write>
80003340:	e0 6b 00 ff 	mov	r11,255
80003344:	fe 7c 28 00 	mov	r12,-55296
80003348:	fe b0 fa 49 	rcall	800027da <spi_write>
8000334c:	e0 6b 00 ff 	mov	r11,255
80003350:	fe 7c 28 00 	mov	r12,-55296
80003354:	fe b0 fa 43 	rcall	800027da <spi_write>
80003358:	e0 6b 00 ff 	mov	r11,255
8000335c:	fe 7c 28 00 	mov	r12,-55296
80003360:	fe b0 fa 3d 	rcall	800027da <spi_write>
80003364:	e0 6b 00 ff 	mov	r11,255
80003368:	fe 7c 28 00 	mov	r12,-55296
8000336c:	fe b0 fa 37 	rcall	800027da <spi_write>
80003370:	e0 6b 00 ff 	mov	r11,255
80003374:	fe 7c 28 00 	mov	r12,-55296
80003378:	fe b0 fa 31 	rcall	800027da <spi_write>
8000337c:	e0 6b 00 ff 	mov	r11,255
80003380:	fe 7c 28 00 	mov	r12,-55296
80003384:	fe b0 fa 2b 	rcall	800027da <spi_write>
80003388:	e0 6b 00 ff 	mov	r11,255
8000338c:	fe 7c 28 00 	mov	r12,-55296
80003390:	fe b0 fa 25 	rcall	800027da <spi_write>
80003394:	e0 6b 00 ff 	mov	r11,255
80003398:	fe 7c 28 00 	mov	r12,-55296
8000339c:	fe b0 fa 1f 	rcall	800027da <spi_write>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800033a0:	30 1b       	mov	r11,1
800033a2:	fe 7c 28 00 	mov	r12,-55296
800033a6:	fe b0 f9 ae 	rcall	80002702 <spi_unselectChip>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
800033aa:	30 08       	mov	r8,0
800033ac:	e0 69 01 08 	mov	r9,264
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800033b0:	30 1b       	mov	r11,1
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
800033b2:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
800033b4:	e0 61 14 f6 	mov	r1,5366
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800033b8:	fe 7c 28 00 	mov	r12,-55296
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
  card_type = MMC_CARD;
800033bc:	a2 88       	st.b	r1[0x0],r8
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800033be:	fe b0 f9 7a 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800033c2:	30 0b       	mov	r11,0
800033c4:	16 9c       	mov	r12,r11
800033c6:	fe b0 fd 59 	rcall	80002e78 <sd_mmc_spi_command>
800033ca:	e0 66 15 08 	mov	r6,5384
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800033ce:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800033d0:	ac 8c       	st.b	r6[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800033d2:	fe 7c 28 00 	mov	r12,-55296
800033d6:	fe b0 f9 96 	rcall	80002702 <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800033da:	e0 6b 00 ff 	mov	r11,255
800033de:	fe 7c 28 00 	mov	r12,-55296
800033e2:	30 05       	mov	r5,0
800033e4:	fe b0 f9 fb 	rcall	800027da <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800033e8:	0c 90       	mov	r0,r6
800033ea:	30 12       	mov	r2,1
800033ec:	c1 78       	rjmp	8000341a <sd_mmc_spi_internal_init+0x11a>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800033ee:	fe b0 f9 62 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800033f2:	30 0b       	mov	r11,0
800033f4:	16 9c       	mov	r12,r11
800033f6:	fe b0 fd 41 	rcall	80002e78 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800033fa:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800033fc:	a0 8c       	st.b	r0[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800033fe:	fe 7c 28 00 	mov	r12,-55296
80003402:	fe b0 f9 80 	rcall	80002702 <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003406:	e0 6b 00 ff 	mov	r11,255
8000340a:	fe 7c 28 00 	mov	r12,-55296
8000340e:	fe b0 f9 e6 	rcall	800027da <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
80003412:	e0 45 00 64 	cp.w	r5,100
80003416:	e0 80 00 b4 	breq	8000357e <sd_mmc_spi_internal_init+0x27e>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000341a:	30 1b       	mov	r11,1
8000341c:	fe 7c 28 00 	mov	r12,-55296
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003420:	16 05       	add	r5,r11
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80003422:	0d 84       	ld.ub	r4,r6[0x0]
80003424:	e0 63 15 08 	mov	r3,5384
80003428:	e4 04 18 00 	cp.b	r4,r2
8000342c:	ce 11       	brne	800033ee <sd_mmc_spi_internal_init+0xee>

  if_cond = sd_mmc_spi_get_if();
8000342e:	ce 1e       	rcall	800031f0 <sd_mmc_spi_get_if>
80003430:	5b fc       	cp.w	r12,-1
  if(if_cond == -1) {
80003432:	e0 80 00 a6 	breq	8000357e <sd_mmc_spi_internal_init+0x27e>
80003436:	58 1c       	cp.w	r12,1
      return false; // card is bad
  } else if (if_cond == 1) {
80003438:	e0 80 00 a6 	breq	80003584 <sd_mmc_spi_internal_init+0x284>
8000343c:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000343e:	fe 7c 28 00 	mov	r12,-55296
80003442:	fe b0 f9 38 	rcall	800026b2 <spi_selectChip>
80003446:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80003448:	33 7c       	mov	r12,55
8000344a:	fe b0 fd 17 	rcall	80002e78 <sd_mmc_spi_command>
8000344e:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003450:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80003452:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003456:	fe b0 f9 56 	rcall	80002702 <spi_unselectChip>
8000345a:	e0 6b 00 ff 	mov	r11,255
      card_type = SD_CARD_2;
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
8000345e:	fe 7c 28 00 	mov	r12,-55296
80003462:	fe b0 f9 bc 	rcall	800027da <spi_write>
80003466:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003468:	fe 7c 28 00 	mov	r12,-55296
8000346c:	fe b0 f9 23 	rcall	800026b2 <spi_selectChip>
80003470:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80003472:	32 9c       	mov	r12,41
80003474:	fe b0 fd 02 	rcall	80002e78 <sd_mmc_spi_command>
80003478:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000347a:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000347c:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003480:	fe b0 f9 41 	rcall	80002702 <spi_unselectChip>
80003484:	e0 6b 00 ff 	mov	r11,255
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003488:	fe 7c 28 00 	mov	r12,-55296
8000348c:	fe b0 f9 a7 	rcall	800027da <spi_write>
80003490:	07 88       	ld.ub	r8,r3[0x0]

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80003492:	e2 18 00 fe 	andl	r8,0xfe,COH
80003496:	e0 80 00 d3 	breq	8000363c <sd_mmc_spi_internal_init+0x33c>
8000349a:	30 08       	mov	r8,0
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
8000349c:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000349e:	a2 88       	st.b	r1[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
800034a0:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800034a4:	fe b0 f9 07 	rcall	800026b2 <spi_selectChip>
800034a8:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800034aa:	16 9c       	mov	r12,r11
800034ac:	fe b0 fc e6 	rcall	80002e78 <sd_mmc_spi_command>
800034b0:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034b2:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800034b4:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034b8:	fe b0 f9 25 	rcall	80002702 <spi_unselectChip>
800034bc:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800034c0:	fe 7c 28 00 	mov	r12,-55296
800034c4:	30 05       	mov	r5,0
800034c6:	fe b0 f9 8a 	rcall	800027da <spi_write>
800034ca:	30 14       	mov	r4,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
800034cc:	c1 68       	rjmp	800034f8 <sd_mmc_spi_internal_init+0x1f8>
800034ce:	fe b0 f8 f2 	rcall	800026b2 <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800034d2:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800034d4:	16 9c       	mov	r12,r11
800034d6:	fe b0 fc d1 	rcall	80002e78 <sd_mmc_spi_command>
800034da:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034dc:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800034de:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034e2:	fe b0 f9 10 	rcall	80002702 <spi_unselectChip>
800034e6:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800034ea:	fe 7c 28 00 	mov	r12,-55296
800034ee:	fe b0 f9 76 	rcall	800027da <spi_write>
800034f2:	e0 45 00 64 	cp.w	r5,100
        // do retry counter
        retry++;
        if(retry > 100)
800034f6:	c4 40       	breq	8000357e <sd_mmc_spi_internal_init+0x27e>
800034f8:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800034fa:	fe 7c 28 00 	mov	r12,-55296
800034fe:	16 05       	add	r5,r11
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003500:	0d 88       	ld.ub	r8,r6[0x0]
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80003502:	e8 08 18 00 	cp.b	r8,r4
80003506:	ce 41       	brne	800034ce <sd_mmc_spi_internal_init+0x1ce>
80003508:	03 88       	ld.ub	r8,r1[0x0]
8000350a:	c4 08       	rjmp	8000358a <sd_mmc_spi_internal_init+0x28a>
8000350c:	03 89       	ld.ub	r9,r1[0x0]
     if(retry == 50000)    // measured approx. 500 on several cards
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
8000350e:	30 28       	mov	r8,2
80003510:	f0 09 18 00 	cp.b	r9,r8
80003514:	e0 80 01 77 	breq	80003802 <sd_mmc_spi_internal_init+0x502>
80003518:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000351a:	fe 7c 28 00 	mov	r12,-55296
8000351e:	fe b0 f8 ca 	rcall	800026b2 <spi_selectChip>
80003522:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80003524:	33 bc       	mov	r12,59
80003526:	fe b0 fc a9 	rcall	80002e78 <sd_mmc_spi_command>
8000352a:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000352c:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000352e:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003532:	fe b0 f8 e8 	rcall	80002702 <spi_unselectChip>
80003536:	e0 6b 00 ff 	mov	r11,255
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000353a:	fe 7c 28 00 	mov	r12,-55296
8000353e:	fe b0 f9 4e 	rcall	800027da <spi_write>
80003542:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003544:	fe 7c 28 00 	mov	r12,-55296
80003548:	fe b0 f8 b5 	rcall	800026b2 <spi_selectChip>
8000354c:	e0 6b 02 00 	mov	r11,512
  r1 = sd_mmc_spi_command(command, arg);
80003550:	31 0c       	mov	r12,16
80003552:	fe b0 fc 93 	rcall	80002e78 <sd_mmc_spi_command>
80003556:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003558:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000355a:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000355e:	fe b0 f8 d2 	rcall	80002702 <spi_unselectChip>
80003562:	e0 6b 00 ff 	mov	r11,255
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003566:	fe 7c 28 00 	mov	r12,-55296
8000356a:	e0 64 15 08 	mov	r4,5384
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000356e:	fe b0 f9 36 	rcall	800027da <spi_write>
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003572:	0d 85       	ld.ub	r5,r6[0x0]
  if (r1 != 0x00)
80003574:	58 05       	cp.w	r5,0
80003576:	c0 41       	brne	8000357e <sd_mmc_spi_internal_init+0x27e>
80003578:	fe b0 fc 4c 	rcall	80002e10 <sd_mmc_spi_wait_not_busy>
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000357c:	c6 31       	brne	80003642 <sd_mmc_spi_internal_init+0x342>
8000357e:	30 0c       	mov	r12,0
  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
  return true;
80003580:	2f fd       	sub	sp,-4
}
80003582:	d8 32       	popm	r0-r7,pc
80003584:	30 28       	mov	r8,2

  if_cond = sd_mmc_spi_get_if();
  if(if_cond == -1) {
      return false; // card is bad
  } else if (if_cond == 1) {
      card_type = SD_CARD_2;
80003586:	a2 88       	st.b	r1[0x0],r8
80003588:	30 28       	mov	r8,2
8000358a:	30 05       	mov	r5,0
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
8000358c:	30 14       	mov	r4,1

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000358e:	30 23       	mov	r3,2
80003590:	c1 d8       	rjmp	800035ca <sd_mmc_spi_internal_init+0x2ca>
80003592:	fe b0 f8 90 	rcall	800026b2 <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003596:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80003598:	30 1c       	mov	r12,1
8000359a:	fe b0 fc 6f 	rcall	80002e78 <sd_mmc_spi_command>
8000359e:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800035a0:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800035a2:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800035a6:	fe b0 f8 ae 	rcall	80002702 <spi_unselectChip>
800035aa:	e0 6b 00 ff 	mov	r11,255
      break;
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800035ae:	fe 7c 28 00 	mov	r12,-55296
800035b2:	fe b0 f9 14 	rcall	800027da <spi_write>
800035b6:	e0 45 c3 4f 	cp.w	r5,49999
      break;
    }
     // do retry counter
     retry++;
     if(retry == 50000)    // measured approx. 500 on several cards
800035ba:	ce 20       	breq	8000357e <sd_mmc_spi_internal_init+0x27e>
800035bc:	2f f5       	sub	r5,-1
800035be:	0d 89       	ld.ub	r9,r6[0x0]
        return false;
  } while (r1);
800035c0:	30 08       	mov	r8,0
800035c2:	f0 09 18 00 	cp.b	r9,r8
800035c6:	ca 30       	breq	8000350c <sd_mmc_spi_internal_init+0x20c>
800035c8:	03 88       	ld.ub	r8,r1[0x0]
800035ca:	e8 08 18 00 	cp.b	r8,r4

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800035ce:	c2 00       	breq	8000360e <sd_mmc_spi_internal_init+0x30e>
800035d0:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800035d2:	fe 7c 28 00 	mov	r12,-55296
800035d6:	cd e3       	brcs	80003592 <sd_mmc_spi_internal_init+0x292>

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800035d8:	e6 08 18 00 	cp.b	r8,r3
800035dc:	ce d1       	brne	800035b6 <sd_mmc_spi_internal_init+0x2b6>
800035de:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800035e0:	fe 7c 28 00 	mov	r12,-55296
800035e4:	fe b0 f8 67 	rcall	800026b2 <spi_selectChip>
800035e8:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800035ea:	33 7c       	mov	r12,55
800035ec:	fe b0 fc 46 	rcall	80002e78 <sd_mmc_spi_command>
800035f0:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800035f2:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800035f4:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800035f8:	fe b0 f8 85 	rcall	80002702 <spi_unselectChip>
800035fc:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800035fe:	fe 7c 28 00 	mov	r12,-55296
80003602:	fe b0 f8 58 	rcall	800026b2 <spi_selectChip>
80003606:	fc 1b 40 00 	movh	r11,0x4000
  r1 = sd_mmc_spi_command(command, arg);
8000360a:	32 9c       	mov	r12,41
8000360c:	cc 7b       	rjmp	8000359a <sd_mmc_spi_internal_init+0x29a>
8000360e:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003610:	fe 7c 28 00 	mov	r12,-55296
80003614:	fe b0 f8 4f 	rcall	800026b2 <spi_selectChip>
80003618:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
8000361a:	33 7c       	mov	r12,55
8000361c:	fe b0 fc 2e 	rcall	80002e78 <sd_mmc_spi_command>
80003620:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003622:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80003624:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003628:	fe b0 f8 6d 	rcall	80002702 <spi_unselectChip>
8000362c:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000362e:	fe 7c 28 00 	mov	r12,-55296
80003632:	fe b0 f8 40 	rcall	800026b2 <spi_selectChip>
80003636:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80003638:	32 9c       	mov	r12,41
8000363a:	cb 0b       	rjmp	8000359a <sd_mmc_spi_internal_init+0x29a>
8000363c:	a2 84       	st.b	r1[0x0],r4

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000363e:	30 18       	mov	r8,1
80003640:	ca 5b       	rjmp	8000358a <sd_mmc_spi_internal_init+0x28a>
80003642:	30 1b       	mov	r11,1
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003644:	fe 7c 28 00 	mov	r12,-55296
80003648:	fe b0 f8 35 	rcall	800026b2 <spi_selectChip>
8000364c:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
8000364e:	30 9c       	mov	r12,9
80003650:	fe b0 fc 14 	rcall	80002e78 <sd_mmc_spi_command>
80003654:	a8 8c       	st.b	r4[0x0],r12
80003656:	e0 81 01 f1 	brne	80003a38 <sd_mmc_spi_internal_init+0x738>
  // check for valid response
  if(r1 != 0x00)
8000365a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000365e:	fe 7c 28 00 	mov	r12,-55296
80003662:	fe b0 f8 bc 	rcall	800027da <spi_write>
80003666:	1a 95       	mov	r5,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003668:	fe 7c 28 00 	mov	r12,-55296
8000366c:	1a 9b       	mov	r11,sp
8000366e:	fe b0 f8 c4 	rcall	800027f6 <spi_read>
80003672:	58 1c       	cp.w	r12,1
80003674:	e0 80 01 ed 	breq	80003a4e <sd_mmc_spi_internal_init+0x74e>
80003678:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000367a:	a8 88       	st.b	r4[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000367c:	3f e9       	mov	r9,-2
8000367e:	f2 08 18 00 	cp.b	r8,r9
80003682:	e0 80 00 d1 	breq	80003824 <sd_mmc_spi_internal_init+0x524>
80003686:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000368a:	fe 7c 28 00 	mov	r12,-55296
8000368e:	fe b0 f8 a6 	rcall	800027da <spi_write>
80003692:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003694:	fe 7c 28 00 	mov	r12,-55296
80003698:	fe b0 f8 af 	rcall	800027f6 <spi_read>
8000369c:	58 1c       	cp.w	r12,1
8000369e:	e0 80 00 c0 	breq	8000381e <sd_mmc_spi_internal_init+0x51e>
800036a2:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800036a4:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800036a6:	3f e9       	mov	r9,-2
800036a8:	f2 08 18 00 	cp.b	r8,r9
800036ac:	e0 80 00 bc 	breq	80003824 <sd_mmc_spi_internal_init+0x524>
800036b0:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800036b4:	fe 7c 28 00 	mov	r12,-55296
800036b8:	fe b0 f8 91 	rcall	800027da <spi_write>
800036bc:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800036be:	fe 7c 28 00 	mov	r12,-55296
800036c2:	fe b0 f8 9a 	rcall	800027f6 <spi_read>
800036c6:	58 1c       	cp.w	r12,1
800036c8:	e0 80 01 cb 	breq	80003a5e <sd_mmc_spi_internal_init+0x75e>
800036cc:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800036ce:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800036d0:	3f e9       	mov	r9,-2
800036d2:	f2 08 18 00 	cp.b	r8,r9
800036d6:	e0 80 00 a7 	breq	80003824 <sd_mmc_spi_internal_init+0x524>
800036da:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800036de:	fe 7c 28 00 	mov	r12,-55296
800036e2:	fe b0 f8 7c 	rcall	800027da <spi_write>
800036e6:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800036e8:	fe 7c 28 00 	mov	r12,-55296
800036ec:	fe b0 f8 85 	rcall	800027f6 <spi_read>
800036f0:	58 1c       	cp.w	r12,1
800036f2:	e0 80 01 b2 	breq	80003a56 <sd_mmc_spi_internal_init+0x756>
800036f6:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800036f8:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800036fa:	3f e9       	mov	r9,-2
800036fc:	f2 08 18 00 	cp.b	r8,r9
80003700:	e0 80 00 92 	breq	80003824 <sd_mmc_spi_internal_init+0x524>
80003704:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003708:	fe 7c 28 00 	mov	r12,-55296
8000370c:	fe b0 f8 67 	rcall	800027da <spi_write>
80003710:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003712:	fe 7c 28 00 	mov	r12,-55296
80003716:	fe b0 f8 70 	rcall	800027f6 <spi_read>
8000371a:	58 1c       	cp.w	r12,1
8000371c:	e0 80 01 a9 	breq	80003a6e <sd_mmc_spi_internal_init+0x76e>
80003720:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80003722:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80003724:	3f e9       	mov	r9,-2
80003726:	f2 08 18 00 	cp.b	r8,r9
8000372a:	c7 d0       	breq	80003824 <sd_mmc_spi_internal_init+0x524>
8000372c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003730:	fe 7c 28 00 	mov	r12,-55296
80003734:	fe b0 f8 53 	rcall	800027da <spi_write>
80003738:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000373a:	fe 7c 28 00 	mov	r12,-55296
8000373e:	fe b0 f8 5c 	rcall	800027f6 <spi_read>
80003742:	58 1c       	cp.w	r12,1
80003744:	e0 80 01 91 	breq	80003a66 <sd_mmc_spi_internal_init+0x766>
80003748:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000374a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000374c:	3f e9       	mov	r9,-2
8000374e:	f2 08 18 00 	cp.b	r8,r9
80003752:	c6 90       	breq	80003824 <sd_mmc_spi_internal_init+0x524>
80003754:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003758:	fe 7c 28 00 	mov	r12,-55296
8000375c:	fe b0 f8 3f 	rcall	800027da <spi_write>
80003760:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003762:	fe 7c 28 00 	mov	r12,-55296
80003766:	fe b0 f8 48 	rcall	800027f6 <spi_read>
8000376a:	58 1c       	cp.w	r12,1
8000376c:	e0 80 01 85 	breq	80003a76 <sd_mmc_spi_internal_init+0x776>
80003770:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80003772:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80003774:	3f e9       	mov	r9,-2
80003776:	f2 08 18 00 	cp.b	r8,r9
8000377a:	c5 50       	breq	80003824 <sd_mmc_spi_internal_init+0x524>
8000377c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003780:	fe 7c 28 00 	mov	r12,-55296
80003784:	fe b0 f8 2b 	rcall	800027da <spi_write>
80003788:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000378a:	fe 7c 28 00 	mov	r12,-55296
8000378e:	fe b0 f8 34 	rcall	800027f6 <spi_read>
80003792:	58 1c       	cp.w	r12,1
80003794:	e0 80 01 75 	breq	80003a7e <sd_mmc_spi_internal_init+0x77e>
80003798:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000379a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000379c:	3f e9       	mov	r9,-2
8000379e:	f2 08 18 00 	cp.b	r8,r9
800037a2:	c4 10       	breq	80003824 <sd_mmc_spi_internal_init+0x524>
800037a4:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800037a8:	fe 7c 28 00 	mov	r12,-55296
800037ac:	fe b0 f8 17 	rcall	800027da <spi_write>
800037b0:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800037b2:	fe 7c 28 00 	mov	r12,-55296
800037b6:	fe b0 f8 20 	rcall	800027f6 <spi_read>
800037ba:	58 1c       	cp.w	r12,1
800037bc:	e0 80 01 68 	breq	80003a8c <sd_mmc_spi_internal_init+0x78c>
800037c0:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800037c2:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800037c4:	3f e9       	mov	r9,-2
800037c6:	f2 08 18 00 	cp.b	r8,r9
800037ca:	c2 d0       	breq	80003824 <sd_mmc_spi_internal_init+0x524>
800037cc:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800037d0:	fe 7c 28 00 	mov	r12,-55296
800037d4:	fe b0 f8 03 	rcall	800027da <spi_write>
800037d8:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800037da:	fe 7c 28 00 	mov	r12,-55296
800037de:	fe b0 f8 0c 	rcall	800027f6 <spi_read>
800037e2:	58 1c       	cp.w	r12,1
800037e4:	e0 80 01 51 	breq	80003a86 <sd_mmc_spi_internal_init+0x786>
800037e8:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800037ea:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800037ec:	3f e9       	mov	r9,-2
800037ee:	f2 08 18 00 	cp.b	r8,r9
800037f2:	c1 90       	breq	80003824 <sd_mmc_spi_internal_init+0x524>
800037f4:	30 1b       	mov	r11,1
  {
    if (retry > 8)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800037f6:	fe 7c 28 00 	mov	r12,-55296
800037fa:	fe b0 f7 84 	rcall	80002702 <spi_unselectChip>
800037fe:	30 0c       	mov	r12,0
80003800:	cc 0a       	rjmp	80003580 <sd_mmc_spi_internal_init+0x280>
80003802:	fe b0 fc 87 	rcall	80003110 <sd_mmc_spi_check_hc>
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
    if_cond = sd_mmc_spi_check_hc();
80003806:	5b fc       	cp.w	r12,-1
    if (if_cond == -1) {
80003808:	fe 90 fe bb 	breq	8000357e <sd_mmc_spi_internal_init+0x27e>
8000380c:	58 1c       	cp.w	r12,1
      return false;
    } else if (if_cond == 1){
8000380e:	fe 91 fe 85 	brne	80003518 <sd_mmc_spi_internal_init+0x218>
80003812:	30 39       	mov	r9,3
          card_type = SD_CARD_2_SDHC;
80003814:	e0 68 14 f6 	mov	r8,5366
80003818:	b0 89       	st.b	r8[0x0],r9
8000381a:	fe 9f fe 7f 	bral	80003518 <sd_mmc_spi_internal_init+0x218>
8000381e:	3f f8       	mov	r8,-1
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80003820:	ac 88       	st.b	r6[0x0],r8
80003822:	c4 7b       	rjmp	800036b0 <sd_mmc_spi_internal_init+0x3b0>
80003824:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003828:	fe 7c 28 00 	mov	r12,-55296
8000382c:	fe b0 f7 d7 	rcall	800027da <spi_write>
80003830:	fa c5 ff fe 	sub	r5,sp,-2
   spi_read(SD_MMC_SPI,&data_read);
80003834:	fe 7c 28 00 	mov	r12,-55296
80003838:	0a 9b       	mov	r11,r5
8000383a:	fe b0 f7 de 	rcall	800027f6 <spi_read>
8000383e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003840:	e0 66 14 f8 	mov	r6,5368
80003844:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003848:	ac 88       	st.b	r6[0x0],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000384a:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000384e:	fe b0 f7 c6 	rcall	800027da <spi_write>
80003852:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80003854:	fe 7c 28 00 	mov	r12,-55296
80003858:	fe b0 f7 cf 	rcall	800027f6 <spi_read>
8000385c:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000385e:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003862:	ac 98       	st.b	r6[0x1],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80003864:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003868:	fe b0 f7 b9 	rcall	800027da <spi_write>
8000386c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000386e:	fe 7c 28 00 	mov	r12,-55296
80003872:	fe b0 f7 c2 	rcall	800027f6 <spi_read>
80003876:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003878:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000387c:	ac a8       	st.b	r6[0x2],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000387e:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003882:	fe b0 f7 ac 	rcall	800027da <spi_write>
80003886:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80003888:	fe 7c 28 00 	mov	r12,-55296
8000388c:	fe b0 f7 b5 	rcall	800027f6 <spi_read>
80003890:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003892:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003896:	ac b8       	st.b	r6[0x3],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80003898:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000389c:	fe b0 f7 9f 	rcall	800027da <spi_write>
800038a0:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800038a2:	fe 7c 28 00 	mov	r12,-55296
800038a6:	fe b0 f7 a8 	rcall	800027f6 <spi_read>
800038aa:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800038ac:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038b0:	ac c8       	st.b	r6[0x4],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800038b2:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038b6:	fe b0 f7 92 	rcall	800027da <spi_write>
800038ba:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800038bc:	fe 7c 28 00 	mov	r12,-55296
800038c0:	fe b0 f7 9b 	rcall	800027f6 <spi_read>
800038c4:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800038c6:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038ca:	ac d8       	st.b	r6[0x5],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800038cc:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038d0:	fe b0 f7 85 	rcall	800027da <spi_write>
800038d4:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800038d6:	fe 7c 28 00 	mov	r12,-55296
800038da:	fe b0 f7 8e 	rcall	800027f6 <spi_read>
800038de:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800038e0:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038e4:	ac e8       	st.b	r6[0x6],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800038e6:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038ea:	fe b0 f7 78 	rcall	800027da <spi_write>
800038ee:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800038f0:	fe 7c 28 00 	mov	r12,-55296
800038f4:	fe b0 f7 81 	rcall	800027f6 <spi_read>
800038f8:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800038fa:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800038fe:	ac f8       	st.b	r6[0x7],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80003900:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003904:	fe b0 f7 6b 	rcall	800027da <spi_write>
80003908:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000390a:	fe 7c 28 00 	mov	r12,-55296
8000390e:	fe b0 f7 74 	rcall	800027f6 <spi_read>
80003912:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003914:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003918:	ed 68 00 08 	st.b	r6[8],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000391c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003920:	fe b0 f7 5d 	rcall	800027da <spi_write>
80003924:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80003926:	fe 7c 28 00 	mov	r12,-55296
8000392a:	fe b0 f7 66 	rcall	800027f6 <spi_read>
8000392e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003930:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003934:	ed 68 00 09 	st.b	r6[9],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80003938:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000393c:	fe b0 f7 4f 	rcall	800027da <spi_write>
80003940:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80003942:	fe 7c 28 00 	mov	r12,-55296
80003946:	fe b0 f7 58 	rcall	800027f6 <spi_read>
8000394a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000394c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003950:	ed 68 00 0a 	st.b	r6[10],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80003954:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003958:	fe b0 f7 41 	rcall	800027da <spi_write>
8000395c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000395e:	fe 7c 28 00 	mov	r12,-55296
80003962:	fe b0 f7 4a 	rcall	800027f6 <spi_read>
80003966:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003968:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000396c:	ed 68 00 0b 	st.b	r6[11],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80003970:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003974:	fe b0 f7 33 	rcall	800027da <spi_write>
80003978:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000397a:	fe 7c 28 00 	mov	r12,-55296
8000397e:	fe b0 f7 3c 	rcall	800027f6 <spi_read>
80003982:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80003984:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003988:	ed 68 00 0c 	st.b	r6[12],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000398c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80003990:	fe b0 f7 25 	rcall	800027da <spi_write>
80003994:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80003996:	fe 7c 28 00 	mov	r12,-55296
8000399a:	fe b0 f7 2e 	rcall	800027f6 <spi_read>
8000399e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800039a0:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800039a4:	ed 68 00 0d 	st.b	r6[13],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800039a8:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800039ac:	fe b0 f7 17 	rcall	800027da <spi_write>
800039b0:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800039b2:	fe 7c 28 00 	mov	r12,-55296
800039b6:	fe b0 f7 20 	rcall	800027f6 <spi_read>
800039ba:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800039bc:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800039c0:	ed 68 00 0e 	st.b	r6[14],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800039c4:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800039c8:	fe b0 f7 09 	rcall	800027da <spi_write>
800039cc:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800039ce:	fe 7c 28 00 	mov	r12,-55296
800039d2:	fe b0 f7 12 	rcall	800027f6 <spi_read>
800039d6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800039d8:	e0 6b 00 ff 	mov	r11,255
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800039dc:	ed 68 00 0f 	st.b	r6[15],r8
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800039e0:	fe 7c 28 00 	mov	r12,-55296
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800039e4:	fe b0 f6 fb 	rcall	800027da <spi_write>
800039e8:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);
800039ec:	fe 7c 28 00 	mov	r12,-55296
800039f0:	fe b0 f6 f5 	rcall	800027da <spi_write>
800039f4:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800039f8:	fe 7c 28 00 	mov	r12,-55296
800039fc:	fe b0 f6 ef 	rcall	800027da <spi_write>
80003a00:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003a02:	fe 7c 28 00 	mov	r12,-55296
80003a06:	fe b0 f6 7e 	rcall	80002702 <spi_unselectChip>
80003a0a:	fe b0 f9 59 	rcall	80002cbc <sd_mmc_spi_get_capacity>
  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80003a0e:	e0 69 01 04 	mov	r9,260
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80003a12:	30 18       	mov	r8,1

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80003a14:	72 0a       	ld.w	r10,r9[0x0]
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80003a16:	e0 69 01 08 	mov	r9,264

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80003a1a:	b2 88       	st.b	r9[0x0],r8
80003a1c:	e0 68 1b 00 	mov	r8,6912
80003a20:	ea 18 00 b7 	orh	r8,0xb7
80003a24:	e0 6b 00 f4 	mov	r11,244
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80003a28:	8f 18       	st.w	r7[0x4],r8
80003a2a:	fe 7c 28 00 	mov	r12,-55296
80003a2e:	fe b0 f6 7d 	rcall	80002728 <spi_setupChipReg>
  return true;
80003a32:	30 1c       	mov	r12,1
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003a34:	fe 9f fd a6 	bral	80003580 <sd_mmc_spi_internal_init+0x280>
80003a38:	30 1b       	mov	r11,1
80003a3a:	fe 7c 28 00 	mov	r12,-55296
    sd_mmc_spi_init_done = false;
80003a3e:	fe b0 f6 62 	rcall	80002702 <spi_unselectChip>
80003a42:	e0 68 01 08 	mov	r8,264
80003a46:	30 0c       	mov	r12,0
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80003a48:	b0 85       	st.b	r8[0x0],r5
80003a4a:	fe 9f fd 9b 	bral	80003580 <sd_mmc_spi_internal_init+0x280>
80003a4e:	3f f8       	mov	r8,-1
80003a50:	a8 88       	st.b	r4[0x0],r8
80003a52:	fe 9f fe 1a 	bral	80003686 <sd_mmc_spi_internal_init+0x386>
80003a56:	3f f8       	mov	r8,-1
80003a58:	ac 88       	st.b	r6[0x0],r8
80003a5a:	fe 9f fe 55 	bral	80003704 <sd_mmc_spi_internal_init+0x404>
80003a5e:	3f f8       	mov	r8,-1
80003a60:	ac 88       	st.b	r6[0x0],r8
80003a62:	fe 9f fe 3c 	bral	800036da <sd_mmc_spi_internal_init+0x3da>
80003a66:	3f f8       	mov	r8,-1
80003a68:	ac 88       	st.b	r6[0x0],r8
80003a6a:	fe 9f fe 75 	bral	80003754 <sd_mmc_spi_internal_init+0x454>
80003a6e:	3f f8       	mov	r8,-1
80003a70:	ac 88       	st.b	r6[0x0],r8
80003a72:	fe 9f fe 5d 	bral	8000372c <sd_mmc_spi_internal_init+0x42c>
80003a76:	3f f8       	mov	r8,-1
80003a78:	ac 88       	st.b	r6[0x0],r8
80003a7a:	fe 9f fe 81 	bral	8000377c <sd_mmc_spi_internal_init+0x47c>
80003a7e:	3f f8       	mov	r8,-1
80003a80:	ac 88       	st.b	r6[0x0],r8
80003a82:	fe 9f fe 91 	bral	800037a4 <sd_mmc_spi_internal_init+0x4a4>
80003a86:	3f f8       	mov	r8,-1
80003a88:	ac 88       	st.b	r6[0x0],r8
80003a8a:	cb 5a       	rjmp	800037f4 <sd_mmc_spi_internal_init+0x4f4>
80003a8c:	3f f8       	mov	r8,-1
80003a8e:	ac 88       	st.b	r6[0x0],r8
80003a90:	fe 9f fe 9e 	bral	800037cc <sd_mmc_spi_internal_init+0x4cc>

80003a94 <sd_mmc_spi_init>:
80003a94:	eb cd 40 10 	pushm	r4,lr
80003a98:	e0 68 00 f4 	mov	r8,244
80003a9c:	fa c4 ff f8 	sub	r4,sp,-8
80003aa0:	e8 ea 00 08 	ld.d	r10,r4[8]
80003aa4:	f0 eb 00 08 	st.d	r8[8],r10
80003aa8:	e0 69 01 04 	mov	r9,260
80003aac:	93 0c       	st.w	r9[0x0],r12
80003aae:	e8 ea 00 00 	ld.d	r10,r4[0]
80003ab2:	f0 eb 00 00 	st.d	r8[0],r10
80003ab6:	fe b0 fc 25 	rcall	80003300 <sd_mmc_spi_internal_init>
80003aba:	e3 cd 80 10 	ldm	sp++,r4,pc
80003abe:	d7 03       	nop

80003ac0 <init_adc>:
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
  (*dst)[3] = (val >> 1) & 0xfff;
}

// setup ad7923
void init_adc(void) {
80003ac0:	d4 01       	pushm	lr
  int i;
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003ac2:	30 1b       	mov	r11,1
80003ac4:	fe 7c 24 00 	mov	r12,-56320
80003ac8:	fe b0 f5 f5 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
80003acc:	e0 6b ff ff 	mov	r11,65535
80003ad0:	fe 7c 24 00 	mov	r12,-56320
80003ad4:	fe b0 f6 83 	rcall	800027da <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003ad8:	30 1b       	mov	r11,1
80003ada:	fe 7c 24 00 	mov	r12,-56320
80003ade:	fe b0 f6 12 	rcall	80002702 <spi_unselectChip>
  // wait for powerup time (5us in datasheet)
   for(i=0; i<100; i++) { ;; }
   //  delay_ms(1);

  /// ok... do it twice
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003ae2:	30 1b       	mov	r11,1
80003ae4:	fe 7c 24 00 	mov	r12,-56320
80003ae8:	fe b0 f5 e5 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
80003aec:	e0 6b ff ff 	mov	r11,65535
80003af0:	fe 7c 24 00 	mov	r12,-56320
80003af4:	fe b0 f6 73 	rcall	800027da <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003af8:	30 1b       	mov	r11,1
80003afa:	fe 7c 24 00 	mov	r12,-56320
80003afe:	fe b0 f6 02 	rcall	80002702 <spi_unselectChip>
   for(i=0; i<100; i++) { ;; }
  //  delay_ms(1);
   
   // write base configuration
   cmd = AD7927_CMD_BASE << 4;
   spi_selectChip( ADC_SPI, ADC_SPI_NPCS );
80003b02:	30 1b       	mov	r11,1
80003b04:	fe 7c 24 00 	mov	r12,-56320
80003b08:	fe b0 f5 d5 	rcall	800026b2 <spi_selectChip>
   spi_write( ADC_SPI, cmd );
80003b0c:	e0 6b 83 10 	mov	r11,33552
80003b10:	fe 7c 24 00 	mov	r12,-56320
80003b14:	fe b0 f6 63 	rcall	800027da <spi_write>
   spi_unselectChip( ADC_SPI, ADC_SPI_NPCS );
80003b18:	30 1b       	mov	r11,1
80003b1a:	fe 7c 24 00 	mov	r12,-56320
80003b1e:	fe b0 f5 f2 	rcall	80002702 <spi_unselectChip>
   for(i=0; i<100; i++) { ;; }
}
80003b22:	d8 02       	popm	pc

80003b24 <adc_poll>:
80003b24:	eb cd 40 c0 	pushm	r6-r7,lr
80003b28:	20 1d       	sub	sp,4
80003b2a:	30 1b       	mov	r11,1
80003b2c:	fe 7c 24 00 	mov	r12,-56320

  //  print_dbg("\r\nsetting up channel 0 with command: ");
  //  print_dbg_ulong(cmd);

  // write to set up channel 0
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003b30:	fe b0 f5 c1 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80003b34:	e0 6b 83 10 	mov	r11,33552
80003b38:	fe 7c 24 00 	mov	r12,-56320
80003b3c:	fe b0 f6 4f 	rcall	800027da <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003b40:	30 1b       	mov	r11,1
80003b42:	fe 7c 24 00 	mov	r12,-56320
80003b46:	fe b0 f5 de 	rcall	80002702 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003b4a:	30 1b       	mov	r11,1
80003b4c:	fe 7c 24 00 	mov	r12,-56320
80003b50:	fe b0 f5 b1 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80003b54:	e0 6b 87 10 	mov	r11,34576
80003b58:	fe 7c 24 00 	mov	r12,-56320
80003b5c:	fe b0 f6 3f 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
80003b60:	fa c6 ff fe 	sub	r6,sp,-2
80003b64:	fe 7c 24 00 	mov	r12,-56320
80003b68:	0c 9b       	mov	r11,r6
80003b6a:	fe b0 f6 46 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003b6e:	30 1b       	mov	r11,1
80003b70:	fe 7c 24 00 	mov	r12,-56320
80003b74:	fe b0 f5 c7 	rcall	80002702 <spi_unselectChip>
  // values need lshift because of extremely weird timing...
  (*dst)[0] = (val >> 1) & 0xfff;
80003b78:	9a 98       	ld.uh	r8,sp[0x2]
80003b7a:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80003b7e:	e0 67 01 1c 	mov	r7,284
80003b82:	30 1b       	mov	r11,1
  //  print_dbg("\r\n got channel 0 data: ");
  //  print_dbg_ulong(val);

  // get channel 1, setup channel 2
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003b84:	ae 08       	st.h	r7[0x0],r8
80003b86:	fe 7c 24 00 	mov	r12,-56320
80003b8a:	fe b0 f5 94 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80003b8e:	e0 6b 8b 10 	mov	r11,35600
80003b92:	fe 7c 24 00 	mov	r12,-56320
80003b96:	fe b0 f6 22 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
80003b9a:	0c 9b       	mov	r11,r6
80003b9c:	fe 7c 24 00 	mov	r12,-56320
80003ba0:	fe b0 f6 2b 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003ba4:	30 1b       	mov	r11,1
80003ba6:	fe 7c 24 00 	mov	r12,-56320
80003baa:	fe b0 f5 ac 	rcall	80002702 <spi_unselectChip>
  (*dst)[1] = (val >> 1) & 0xfff;
80003bae:	9a 98       	ld.uh	r8,sp[0x2]
80003bb0:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80003bb4:	30 1b       	mov	r11,1

  // get channel 2, setup channel 3
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003bb6:	ae 18       	st.h	r7[0x2],r8
80003bb8:	fe 7c 24 00 	mov	r12,-56320
80003bbc:	fe b0 f5 7b 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80003bc0:	e0 6b 8f 10 	mov	r11,36624
80003bc4:	fe 7c 24 00 	mov	r12,-56320
80003bc8:	fe b0 f6 09 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
80003bcc:	0c 9b       	mov	r11,r6
80003bce:	fe 7c 24 00 	mov	r12,-56320
80003bd2:	fe b0 f6 12 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003bd6:	30 1b       	mov	r11,1
80003bd8:	fe 7c 24 00 	mov	r12,-56320
80003bdc:	fe b0 f5 93 	rcall	80002702 <spi_unselectChip>
  (*dst)[2] = (val >> 1) & 0xfff;
80003be0:	9a 98       	ld.uh	r8,sp[0x2]
80003be2:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80003be6:	30 1b       	mov	r11,1
  
  // get channel 3, dummy write
  cmd = ( AD7927_CMD_BASE ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80003be8:	ae 28       	st.h	r7[0x4],r8
80003bea:	fe 7c 24 00 	mov	r12,-56320
80003bee:	fe b0 f5 62 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80003bf2:	e0 6b 83 10 	mov	r11,33552
80003bf6:	fe 7c 24 00 	mov	r12,-56320
80003bfa:	fe b0 f5 f0 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
80003bfe:	0c 9b       	mov	r11,r6
80003c00:	fe 7c 24 00 	mov	r12,-56320
80003c04:	fe b0 f5 f9 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80003c08:	30 1b       	mov	r11,1
80003c0a:	fe 7c 24 00 	mov	r12,-56320
80003c0e:	fe b0 f5 7a 	rcall	80002702 <spi_unselectChip>
  (*dst)[3] = (val >> 1) & 0xfff;
80003c12:	9a 98       	ld.uh	r8,sp[0x2]
80003c14:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80003c18:	ae 38       	st.h	r7[0x6],r8
80003c1a:	e0 66 01 0c 	mov	r6,268
80003c1e:	8e 09       	ld.sh	r9,r7[0x0]
80003c20:	8c 08       	ld.sh	r8,r6[0x0]
80003c22:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
80003c26:	c0 90       	breq	80003c38 <adc_poll+0x114>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
80003c28:	e0 68 01 14 	mov	r8,276
      post_event(&e);
80003c2c:	ac 09       	st.h	r6[0x0],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80003c2e:	91 19       	st.w	r8[0x4],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80003c30:	30 e9       	mov	r9,14
80003c32:	10 9c       	mov	r12,r8
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80003c34:	91 09       	st.w	r8[0x0],r9
80003c36:	cb 5c       	rcall	80003da0 <post_event>
80003c38:	8e 19       	ld.sh	r9,r7[0x2]
80003c3a:	8c 18       	ld.sh	r8,r6[0x2]
80003c3c:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
80003c40:	c0 b0       	breq	80003c56 <adc_poll+0x132>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80003c42:	e0 68 01 0c 	mov	r8,268
80003c46:	b0 19       	st.h	r8[0x2],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80003c48:	e0 68 01 14 	mov	r8,276
80003c4c:	91 19       	st.w	r8[0x4],r9
80003c4e:	30 f9       	mov	r9,15
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80003c50:	10 9c       	mov	r12,r8
80003c52:	91 09       	st.w	r8[0x0],r9
80003c54:	ca 6c       	rcall	80003da0 <post_event>
80003c56:	8e 29       	ld.sh	r9,r7[0x4]
80003c58:	8c 28       	ld.sh	r8,r6[0x4]
      adcOldVal[i] = adcVal[i];
80003c5a:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80003c5e:	c0 b0       	breq	80003c74 <adc_poll+0x150>
      e.eventData = (S16)(adcVal[i]);
80003c60:	e0 68 01 0c 	mov	r8,268
      post_event(&e);
80003c64:	b0 29       	st.h	r8[0x4],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80003c66:	e0 68 01 14 	mov	r8,276
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80003c6a:	91 19       	st.w	r8[0x4],r9
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80003c6c:	31 09       	mov	r9,16
80003c6e:	10 9c       	mov	r12,r8
80003c70:	91 09       	st.w	r8[0x0],r9
80003c72:	c9 7c       	rcall	80003da0 <post_event>
80003c74:	8e 39       	ld.sh	r9,r7[0x6]
      adcOldVal[i] = adcVal[i];
80003c76:	8c 38       	ld.sh	r8,r6[0x6]
80003c78:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
80003c7c:	c0 b0       	breq	80003c92 <adc_poll+0x16e>

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80003c7e:	e0 68 01 0c 	mov	r8,268
80003c82:	b0 39       	st.h	r8[0x6],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80003c84:	e0 68 01 14 	mov	r8,276
    }
  }
}
80003c88:	91 19       	st.w	r8[0x4],r9
80003c8a:	31 19       	mov	r9,17
80003c8c:	10 9c       	mov	r12,r8
80003c8e:	91 09       	st.w	r8[0x0],r9
80003c90:	c8 8c       	rcall	80003da0 <post_event>
80003c92:	2f fd       	sub	sp,-4
80003c94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80003c98 <init_app_timers>:
    //    gpio_tgl_gpio_pin(AVR32_PIN_PA23);
    //    gpio_tgl_gpio_pin(AVR32_PIN_PA24);
}

//====== external
void init_app_timers(void) {
80003c98:	d4 01       	pushm	lr
  set_timer(&screenTimer, eScreenTimerTag, 15,   &screen_timer_callback, 1);
80003c9a:	30 18       	mov	r8,1
80003c9c:	fe c9 ff 3c 	sub	r9,pc,-196
80003ca0:	30 fa       	mov	r10,15
80003ca2:	30 0b       	mov	r11,0
80003ca4:	e0 6c 01 3c 	mov	r12,316
  set_timer(&encTimer,    eEncTimerTag,    5,   &enc_timer_callback,    1);
80003ca8:	e0 a0 08 f0 	rcall	80004e88 <set_timer>
80003cac:	30 18       	mov	r8,1
80003cae:	fe c9 ff b2 	sub	r9,pc,-78
80003cb2:	10 9b       	mov	r11,r8
80003cb4:	30 5a       	mov	r10,5
  set_timer(&adcTimer,    eAdcTimerTag,    5,   &adc_timer_callback,    1);
80003cb6:	e0 6c 01 64 	mov	r12,356
80003cba:	e0 a0 08 e7 	rcall	80004e88 <set_timer>
80003cbe:	30 18       	mov	r8,1
80003cc0:	fe c9 ff cc 	sub	r9,pc,-52
  // test:
  set_timer(&heartbeatTimer, eHeartbeatTimerTag, 500, &heartbeat_callback, 1);
80003cc4:	30 5a       	mov	r10,5
80003cc6:	30 3b       	mov	r11,3
80003cc8:	e0 6c 01 28 	mov	r12,296
80003ccc:	e0 a0 08 de 	rcall	80004e88 <set_timer>
80003cd0:	30 18       	mov	r8,1
80003cd2:	fe c9 ff ea 	sub	r9,pc,-22
}
80003cd6:	e0 6a 01 f4 	mov	r10,500
80003cda:	30 4b       	mov	r11,4
80003cdc:	e0 6c 01 50 	mov	r12,336
80003ce0:	e0 a0 08 d4 	rcall	80004e88 <set_timer>
80003ce4:	d8 02       	popm	pc
80003ce6:	d7 03       	nop

80003ce8 <heartbeat_callback>:
80003ce8:	d4 01       	pushm	lr
80003cea:	31 7c       	mov	r12,23
80003cec:	fe b0 f2 c8 	rcall	8000227c <gpio_tgl_gpio_pin>
80003cf0:	d8 02       	popm	pc
80003cf2:	d7 03       	nop

80003cf4 <adc_timer_callback>:
80003cf4:	d4 01       	pushm	lr
80003cf6:	c1 7f       	rcall	80003b24 <adc_poll>
80003cf8:	d8 02       	popm	pc
80003cfa:	d7 03       	nop

80003cfc <enc_timer_callback>:

// adc polling callback
static void adc_timer_callback(int tag) {
  // print_dbg("\r\n polling adc from timer callback...");
  adc_poll();
}
80003cfc:	eb cd 40 f8 	pushm	r3-r7,lr
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
80003d00:	30 08       	mov	r8,0
80003d02:	e0 66 01 24 	mov	r6,292
80003d06:	e0 67 15 0c 	mov	r7,5388
80003d0a:	ac 88       	st.b	r6[0x0],r8
80003d0c:	e0 65 01 78 	mov	r5,376
    val = enc[i].val;
80003d10:	30 08       	mov	r8,0
80003d12:	30 34       	mov	r4,3
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
      e.eventType = enc[i].event;
      e.eventData = val;
      enc[i].val = 0;
80003d14:	10 93       	mov	r3,r8
80003d16:	f0 08 00 19 	add	r9,r8,r8<<0x1
// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80003d1a:	f2 ce ff ff 	sub	lr,r9,-1

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
80003d1e:	ee 0e 00 2b 	add	r11,r7,lr<<0x2
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80003d22:	ee 0e 04 2a 	ld.sh	r10,r7[lr<<0x2]
80003d26:	96 1b       	ld.sh	r11,r11[0x2]
80003d28:	f6 0c 11 00 	rsub	r12,r11,0
80003d2c:	f6 0a 19 00 	cp.h	r10,r11
80003d30:	e0 89 00 04 	brgt	80003d38 <enc_timer_callback+0x3c>
      e.eventType = enc[i].event;
80003d34:	18 3a       	cp.w	r10,r12
80003d36:	c0 c4       	brge	80003d4e <enc_timer_callback+0x52>
      e.eventData = val;
80003d38:	ee 09 00 29 	add	r9,r7,r9<<0x2
      enc[i].val = 0;
80003d3c:	72 28       	ld.w	r8,r9[0x8]
80003d3e:	8b 1a       	st.w	r5[0x4],r10
      post_event(&e);
80003d40:	8b 08       	st.w	r5[0x0],r8
80003d42:	ee 0e 0a 23 	st.h	r7[lr<<0x2],r3
80003d46:	e0 6c 01 78 	mov	r12,376
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
80003d4a:	c2 bc       	rcall	80003da0 <post_event>
80003d4c:	0d 88       	ld.ub	r8,r6[0x0]
80003d4e:	2f f8       	sub	r8,-1
80003d50:	5c 58       	castu.b	r8
80003d52:	ac 88       	st.b	r6[0x0],r8
80003d54:	e8 08 18 00 	cp.b	r8,r4
      e.eventData = val;
      enc[i].val = 0;
      post_event(&e);
    }
  }
}
80003d58:	fe 98 ff df 	brls	80003d16 <enc_timer_callback+0x1a>
80003d5c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80003d60 <screen_timer_callback>:
80003d60:	d4 01       	pushm	lr
80003d62:	e0 68 02 8c 	mov	r8,652
80003d66:	11 88       	ld.ub	r8,r8[0x0]
80003d68:	58 08       	cp.w	r8,0
80003d6a:	c0 70       	breq	80003d78 <screen_timer_callback+0x18>
  print_dbg(" \lcycles:"); print_dbg_ulong(cyclesNow - cycles);
  cycles = cyclesNow;
  */

  if(refresh) {
    e.eventType = kEventRefresh;
80003d6c:	e0 68 01 78 	mov	r8,376
80003d70:	31 29       	mov	r9,18
    post_event(&e);
80003d72:	10 9c       	mov	r12,r8
80003d74:	91 09       	st.w	r8[0x0],r9
80003d76:	c1 5c       	rcall	80003da0 <post_event>
80003d78:	d8 02       	popm	pc
80003d7a:	d7 03       	nop

80003d7c <init_events>:
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
80003d7c:	e0 6a 01 84 	mov	r10,388
80003d80:	30 08       	mov	r8,0
  getIdx = 0;
80003d82:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
80003d84:	e0 6a 01 88 	mov	r10,392
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
  getIdx = 0;
80003d88:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
80003d8a:	95 08       	st.w	r10[0x0],r8
80003d8c:	e0 68 01 8c 	mov	r8,396
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
80003d90:	f0 ca ff 00 	sub	r10,r8,-256

  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80003d94:	91 09       	st.w	r8[0x0],r9
80003d96:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
  }
}
80003d98:	2f 88       	sub	r8,-8
80003d9a:	14 38       	cp.w	r8,r10
80003d9c:	cf c1       	brne	80003d94 <init_events+0x18>
80003d9e:	5e fc       	retal	r12

80003da0 <post_event>:
80003da0:	d4 01       	pushm	lr
80003da2:	e1 bb 00 00 	mfsr	r11,0x0
80003da6:	d3 23       	ssrf	0x12
    print_dbg_ulong(e->eventType); print_dbg(".");
  } 
  */

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
80003da8:	e0 69 01 84 	mov	r9,388
  INCR_EVENT_INDEX( putIdx );
80003dac:	72 0a       	ld.w	r10,r9[0x0]
80003dae:	f4 c8 ff ff 	sub	r8,r10,-1
80003db2:	93 08       	st.w	r9[0x0],r8
80003db4:	e0 48 00 20 	cp.w	r8,32
80003db8:	f9 b8 00 00 	moveq	r8,0
80003dbc:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
80003dc0:	e0 6e 01 88 	mov	lr,392
80003dc4:	7c 0e       	ld.w	lr,lr[0x0]
    sysEvents[ putIdx ].eventType = e->eventType;
80003dc6:	10 3e       	cp.w	lr,r8
    sysEvents[ putIdx ].eventData = e->eventData;
80003dc8:	c1 00       	breq	80003de8 <post_event+0x48>
80003dca:	e0 69 01 8c 	mov	r9,396
80003dce:	f2 08 00 3a 	add	r10,r9,r8<<0x3
80003dd2:	78 1e       	ld.w	lr,r12[0x4]

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
  if ( putIdx != getIdx  ) {
    sysEvents[ putIdx ].eventType = e->eventType;
80003dd4:	95 1e       	st.w	r10[0x4],lr
80003dd6:	78 0a       	ld.w	r10,r12[0x0]
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
  }
  
  if (fReenableInterrupts) {
80003dd8:	30 1c       	mov	r12,1
80003dda:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
    Enable_interrupt_level( TIMER_INT_LEVEL );
80003dde:	ed bb 00 12 	bld	r11,0x12
    sysEvents[ putIdx ].eventType = e->eventType;
    sysEvents[ putIdx ].eventData = e->eventData;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80003de2:	c0 20       	breq	80003de6 <post_event+0x46>
80003de4:	d5 23       	csrf	0x12
80003de6:	d8 02       	popm	pc
80003de8:	93 0a       	st.w	r9[0x0],r10
80003dea:	30 0c       	mov	r12,0
80003dec:	cf 9b       	rjmp	80003dde <post_event+0x3e>
80003dee:	d7 03       	nop

80003df0 <get_next_event>:
80003df0:	18 99       	mov	r9,r12
80003df2:	e1 bb 00 00 	mfsr	r11,0x0
// Returns non-zero if an event was available
bool get_next_event( event_t *e ) {
  bool status;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );
80003df6:	d3 23       	ssrf	0x12
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80003df8:	e0 68 01 84 	mov	r8,388
80003dfc:	e0 6a 01 88 	mov	r10,392
80003e00:	70 0c       	ld.w	r12,r8[0x0]
80003e02:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
80003e04:	18 38       	cp.w	r8,r12
80003e06:	c1 80       	breq	80003e36 <get_next_event+0x46>
80003e08:	2f f8       	sub	r8,-1
80003e0a:	95 08       	st.w	r10[0x0],r8
80003e0c:	e0 48 00 20 	cp.w	r8,32
80003e10:	f9 b8 00 00 	moveq	r8,0
    e->eventType = sysEvents[ getIdx ].eventType;
80003e14:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->eventData = sysEvents[ getIdx ].eventData;
80003e18:	e0 6a 01 8c 	mov	r10,396
  Disable_interrupt_level( TIMER_INT_LEVEL );
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
80003e1c:	f4 08 00 3c 	add	r12,r10,r8<<0x3
80003e20:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
    e->eventData = sysEvents[ getIdx ].eventData;
80003e24:	78 1c       	ld.w	r12,r12[0x4]
    e->eventType  = 0xff;
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80003e26:	93 08       	st.w	r9[0x0],r8
80003e28:	93 1c       	st.w	r9[0x4],r12
80003e2a:	30 1c       	mov	r12,1
    Enable_interrupt_level( TIMER_INT_LEVEL );
80003e2c:	ed bb 00 12 	bld	r11,0x12
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
    e->eventData = 0;
80003e30:	5e 0c       	reteq	r12
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80003e32:	d5 23       	csrf	0x12
80003e34:	5e fc       	retal	r12
    e->eventData = 0;
80003e36:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80003e38:	e0 68 00 ff 	mov	r8,255
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80003e3c:	93 1c       	st.w	r9[0x4],r12
80003e3e:	93 08       	st.w	r9[0x0],r8
80003e40:	ed bb 00 12 	bld	r11,0x12
80003e44:	5e 0c       	reteq	r12
80003e46:	cf 6b       	rjmp	80003e32 <get_next_event+0x42>

80003e48 <process_enc>:
  enc[3].thresh = 40;

}

// post events based on encoder movements
void process_enc( const U8 idx) {
80003e48:	eb cd 40 f8 	pushm	r3-r7,lr
  //event_t e;  
  // S8 val = 0;
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);
80003e4c:	e0 65 15 0c 	mov	r5,5388
80003e50:	f8 0c 00 14 	add	r4,r12,r12<<0x1
80003e54:	ea 04 00 26 	add	r6,r5,r4<<0x2
80003e58:	0c 97       	mov	r7,r6
80003e5a:	0f 3c       	ld.ub	r12,r7++
80003e5c:	fe b0 f1 eb 	rcall	80002232 <gpio_get_pin_value>
80003e60:	18 93       	mov	r3,r12
80003e62:	0f 8c       	ld.ub	r12,r7[0x0]
80003e64:	fe b0 f1 e7 	rcall	80002232 <gpio_get_pin_value>
80003e68:	0d a8       	ld.ub	r8,r6[0x2]
80003e6a:	e6 0c 00 13 	add	r3,r3,r12<<0x1

  if (pos != enc[idx].pos) {
80003e6e:	5c 53       	castu.b	r3
80003e70:	e6 08 18 00 	cp.b	r8,r3
    enc[idx].val += enc_map[enc[idx].pos][pos];
80003e74:	c0 e0       	breq	80003e90 <process_enc+0x48>
    enc[idx].pos = pos;
80003e76:	2f f4       	sub	r4,-1
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);

  if (pos != enc[idx].pos) {
    enc[idx].val += enc_map[enc[idx].pos][pos];
80003e78:	ac a3       	st.b	r6[0x2],r3
80003e7a:	ea 04 04 29 	ld.sh	r9,r5[r4<<0x2]
80003e7e:	e6 08 00 23 	add	r3,r3,r8<<0x2
80003e82:	fe c8 e9 92 	sub	r8,pc,-5742
80003e86:	f0 03 06 08 	ld.sb	r8,r8[r3]
80003e8a:	12 08       	add	r8,r9
80003e8c:	ea 04 0a 28 	st.h	r5[r4<<0x2],r8
80003e90:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80003e94 <init_encoders>:
80003e94:	eb cd 40 e0 	pushm	r5-r7,lr
80003e98:	32 28       	mov	r8,34
80003e9a:	e0 67 15 0c 	mov	r7,5388
// initialize encoder positions
void init_encoders(void) {
  U8 i;
  // constant data
  enc[0].pin[0] = ENC0_S0_PIN;
  enc[0].pin[1] = ENC0_S1_PIN;
80003e9e:	ae 88       	st.b	r7[0x0],r8
80003ea0:	32 38       	mov	r8,35
  enc[0].event = kEventEncoder0;
80003ea2:	ae 98       	st.b	r7[0x1],r8
80003ea4:	30 a8       	mov	r8,10
  enc[1].pin[0] = ENC1_S0_PIN;
80003ea6:	8f 28       	st.w	r7[0x8],r8
80003ea8:	32 48       	mov	r8,36
80003eaa:	ef 68 00 0c 	st.b	r7[12],r8
  enc[1].pin[1] = ENC1_S1_PIN;
80003eae:	32 58       	mov	r8,37
80003eb0:	ef 68 00 0d 	st.b	r7[13],r8
  enc[1].event = kEventEncoder1;
80003eb4:	30 b8       	mov	r8,11
  enc[2].pin[0] = ENC2_S0_PIN;
80003eb6:	8f 58       	st.w	r7[0x14],r8
80003eb8:	32 68       	mov	r8,38
80003eba:	ef 68 00 18 	st.b	r7[24],r8
  enc[2].pin[1] = ENC2_S1_PIN;
80003ebe:	32 78       	mov	r8,39
80003ec0:	ef 68 00 19 	st.b	r7[25],r8
  enc[2].event = kEventEncoder2;
80003ec4:	30 c8       	mov	r8,12
  enc[3].pin[0] = ENC3_S0_PIN;
80003ec6:	8f 88       	st.w	r7[0x20],r8
80003ec8:	32 88       	mov	r8,40
80003eca:	ef 68 00 24 	st.b	r7[36],r8
  enc[3].pin[1] = ENC3_S1_PIN;
80003ece:	32 98       	mov	r8,41
80003ed0:	ef 68 00 25 	st.b	r7[37],r8
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80003ed4:	30 d8       	mov	r8,13
  enc[2].pin[0] = ENC2_S0_PIN;
  enc[2].pin[1] = ENC2_S1_PIN;
  enc[2].event = kEventEncoder2;
  enc[3].pin[0] = ENC3_S0_PIN;
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
80003ed6:	32 2c       	mov	r12,34
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80003ed8:	8f b8       	st.w	r7[0x2c],r8
80003eda:	fe b0 f1 ac 	rcall	80002232 <gpio_get_pin_value>
80003ede:	18 96       	mov	r6,r12
80003ee0:	0f 9c       	ld.ub	r12,r7[0x1]
80003ee2:	fe b0 f1 a8 	rcall	80002232 <gpio_get_pin_value>
80003ee6:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
80003eea:	30 f6       	mov	r6,15
    enc[i].thresh = 15;
80003eec:	ae ac       	st.b	r7[0x2],r12
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80003eee:	ae 36       	st.h	r7[0x6],r6
80003ef0:	ef 3c 00 0c 	ld.ub	r12,r7[12]
80003ef4:	fe b0 f1 9f 	rcall	80002232 <gpio_get_pin_value>
80003ef8:	18 95       	mov	r5,r12
80003efa:	ef 3c 00 0d 	ld.ub	r12,r7[13]
80003efe:	fe b0 f1 9a 	rcall	80002232 <gpio_get_pin_value>
80003f02:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80003f06:	ef 56 00 12 	st.h	r7[18],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80003f0a:	ef 6c 00 0e 	st.b	r7[14],r12
80003f0e:	ef 3c 00 18 	ld.ub	r12,r7[24]
80003f12:	fe b0 f1 90 	rcall	80002232 <gpio_get_pin_value>
80003f16:	18 95       	mov	r5,r12
80003f18:	ef 3c 00 19 	ld.ub	r12,r7[25]
80003f1c:	fe b0 f1 8b 	rcall	80002232 <gpio_get_pin_value>
80003f20:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80003f24:	ef 56 00 1e 	st.h	r7[30],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80003f28:	ef 6c 00 1a 	st.b	r7[26],r12
80003f2c:	ef 3c 00 24 	ld.ub	r12,r7[36]
80003f30:	fe b0 f1 81 	rcall	80002232 <gpio_get_pin_value>
80003f34:	18 96       	mov	r6,r12
80003f36:	ef 3c 00 25 	ld.ub	r12,r7[37]
80003f3a:	fe b0 f1 7c 	rcall	80002232 <gpio_get_pin_value>
80003f3e:	32 88       	mov	r8,40
80003f40:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
    enc[i].thresh = 15;
  }

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;
80003f44:	ef 58 00 2a 	st.h	r7[42],r8
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80003f48:	ef 6c 00 26 	st.b	r7[38],r12

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;

}
80003f4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003f50 <init_clocks>:
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
}


// initialize clocks
void init_clocks(void) {
80003f50:	d4 01       	pushm	lr
  /// from 251e...
  // Switch to OSC0 to speed up  booting
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pm_switch_to_osc0( &AVR32_PM, FOSC0, OSC0_STARTUP );
80003f52:	30 3a       	mov	r10,3
80003f54:	e0 6b 1b 00 	mov	r11,6912
80003f58:	ea 1b 00 b7 	orh	r11,0xb7
80003f5c:	fe 7c 0c 00 	mov	r12,-62464
80003f60:	fe b0 f3 36 	rcall	800025cc <pm_switch_to_osc0>

  // Set PLL0 (fed from OSC0 = 12 MHz) to 132 MHz
  pm_pll_setup( &AVR32_PM,
80003f64:	31 0e       	mov	lr,16
80003f66:	30 08       	mov	r8,0
80003f68:	1a de       	st.w	--sp,lr
80003f6a:	10 9b       	mov	r11,r8
80003f6c:	30 19       	mov	r9,1
80003f6e:	30 aa       	mov	r10,10
80003f70:	fe 7c 0c 00 	mov	r12,-62464
80003f74:	fe b0 f2 fe 	rcall	80002570 <pm_pll_setup>
		0,   // osc.
		16 ); // lockcount.

  // Set PLL operating range and divider (fpll = fvco/2)
  // -> PLL0 output = 66 MHz
  pm_pll_set_option( &AVR32_PM,
80003f78:	30 08       	mov	r8,0
80003f7a:	30 19       	mov	r9,1
80003f7c:	10 9b       	mov	r11,r8
80003f7e:	12 9a       	mov	r10,r9
80003f80:	fe 7c 0c 00 	mov	r12,-62464
80003f84:	fe b0 f3 07 	rcall	80002592 <pm_pll_set_option>
		     1,  // pll_freq.
		     1,  // pll_div2.
		     0 ); // pll_wbwdisable.

  // start PLL0 and wait for the lock
  pm_pll_enable( &AVR32_PM, 0 );
80003f88:	30 0b       	mov	r11,0
80003f8a:	fe 7c 0c 00 	mov	r12,-62464
80003f8e:	fe b0 f3 0e 	rcall	800025aa <pm_pll_enable>
  pm_wait_for_pll0_locked( &AVR32_PM );
80003f92:	fe 7c 0c 00 	mov	r12,-62464
80003f96:	fe b0 f3 11 	rcall	800025b8 <pm_wait_for_pll0_locked>

  // By default, all peripheral clocks to run at master clock rate

  // Set one waitstate for the flash.  Necessary for > 33MHz CPU freq.
  flashc_set_wait_state( 1 );
80003f9a:	30 1c       	mov	r12,1
80003f9c:	fe b0 f1 3a 	rcall	80002210 <flashc_set_wait_state>

  // Switch to PLL0 as the master clock
  pm_switch_to_clock( &AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0) ;
80003fa0:	30 2b       	mov	r11,2
80003fa2:	fe 7c 0c 00 	mov	r12,-62464
80003fa6:	fe b0 f3 0e 	rcall	800025c2 <pm_switch_to_clock>
80003faa:	2f fd       	sub	sp,-4
#endif

  // intitialize millisecond delay engine
  delay_init(sysclk_get_cpu_hz());
  */
}
80003fac:	d8 02       	popm	pc
80003fae:	d7 03       	nop

80003fb0 <init_bfin_resources>:
80003fb0:	eb cd 40 80 	pushm	r7,lr
80003fb4:	20 4d       	sub	sp,16
80003fb6:	fe c8 e6 9a 	sub	r8,pc,-6502
80003fba:	f0 ea 00 08 	ld.d	r10,r8[8]
80003fbe:	fa eb 00 08 	st.d	sp[8],r10
80003fc2:	f0 e8 00 00 	ld.d	r8,r8[0]
80003fc6:	1a 97       	mov	r7,sp
80003fc8:	fa e9 00 00 	st.d	sp[0],r8
    .spi_mode     = 1,
    .modfdis      = 1
  };

  // assign pins to SPI.
  gpio_enable_module(BFIN_SPI_GPIO_MAP,
80003fcc:	30 5b       	mov	r11,5
80003fce:	fe cc e6 6a 	sub	r12,pc,-6550
		     sizeof(BFIN_SPI_GPIO_MAP) / sizeof(BFIN_SPI_GPIO_MAP[0]));

  // intialize as master
  spi_initMaster(BFIN_SPI, &spiOptions);
80003fd2:	fe b0 f1 9d 	rcall	8000230c <gpio_enable_module>
80003fd6:	1a 9b       	mov	r11,sp
80003fd8:	fe 7c 24 00 	mov	r12,-56320

  // set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(BFIN_SPI, 0, 0, 0);
80003fdc:	fe b0 f3 39 	rcall	8000264e <spi_initMaster>
80003fe0:	30 09       	mov	r9,0
80003fe2:	fe 7c 24 00 	mov	r12,-56320
80003fe6:	12 9a       	mov	r10,r9
80003fe8:	12 9b       	mov	r11,r9

  // enable SPI.
  spi_enable(BFIN_SPI);
80003fea:	fe b0 f3 4f 	rcall	80002688 <spi_selectionMode>
80003fee:	fe 7c 24 00 	mov	r12,-56320

  // intialize the chip register
  spi_setupChipReg(BFIN_SPI, &spiOptions, FPBA_HZ);
80003ff2:	fe b0 f3 f1 	rcall	800027d4 <spi_enable>
80003ff6:	1a 9b       	mov	r11,sp
80003ff8:	e0 6a 14 80 	mov	r10,5248
80003ffc:	ea 1a 03 ef 	orh	r10,0x3ef
80004000:	fe 7c 24 00 	mov	r12,-56320
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
80004004:	fe b0 f3 92 	rcall	80002728 <spi_setupChipReg>
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
  spiOptions.spck_delay = 40;	// delay between CS and transfer
  spiOptions.trans_delay = 10;	// delay between transfers
  spiOptions.stay_act = 1;
80004008:	30 18       	mov	r8,1
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
8000400a:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
8000400e:	ba 88       	st.b	sp[0x0],r8
80004010:	e0 68 96 80 	mov	r8,38528
80004014:	ea 18 00 98 	orh	r8,0x98
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
80004018:	50 18       	stdsp	sp[0x4],r8
8000401a:	31 08       	mov	r8,16
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
8000401c:	fb 68 00 08 	st.b	sp[8],r8
80004020:	30 28       	mov	r8,2
  spiOptions.spck_delay = 40;	// delay between CS and transfer
80004022:	fb 68 00 0c 	st.b	sp[12],r8
80004026:	32 88       	mov	r8,40
  spiOptions.trans_delay = 10;	// delay between transfers
80004028:	fb 68 00 09 	st.b	sp[9],r8
8000402c:	30 a8       	mov	r8,10
  spiOptions.stay_act = 1;
  spiOptions.modfdis = 0;
8000402e:	fb 68 00 0a 	st.b	sp[10],r8
80004032:	30 08       	mov	r8,0
80004034:	1a 9b       	mov	r11,sp
  spi_setupChipReg( BFIN_SPI, &spiOptions, FPBA_HZ );
80004036:	fb 68 00 0d 	st.b	sp[13],r8
8000403a:	e0 6a 14 80 	mov	r10,5248
8000403e:	ea 1a 03 ef 	orh	r10,0x3ef
80004042:	fe 7c 24 00 	mov	r12,-56320
  
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
80004046:	fe b0 f3 71 	rcall	80002728 <spi_setupChipReg>
8000404a:	30 6c       	mov	r12,6
}
8000404c:	fe b0 f0 e9 	rcall	8000221e <gpio_enable_pin_pull_up>
80004050:	2f cd       	sub	sp,-16
80004052:	e3 cd 80 80 	ldm	sp++,r7,pc
80004056:	d7 03       	nop

80004058 <init_gpio>:
80004058:	d4 01       	pushm	lr
8000405a:	32 2c       	mov	r12,34
8000405c:	fe b0 f0 e1 	rcall	8000221e <gpio_enable_pin_pull_up>
80004060:	32 3c       	mov	r12,35
80004062:	fe b0 f0 de 	rcall	8000221e <gpio_enable_pin_pull_up>
80004066:	32 4c       	mov	r12,36
80004068:	fe b0 f0 db 	rcall	8000221e <gpio_enable_pin_pull_up>
8000406c:	32 5c       	mov	r12,37
8000406e:	fe b0 f0 d8 	rcall	8000221e <gpio_enable_pin_pull_up>
80004072:	32 6c       	mov	r12,38
void init_gpio(void) {
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80004074:	fe b0 f0 d5 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
80004078:	32 7c       	mov	r12,39
8000407a:	fe b0 f0 d2 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
8000407e:	32 8c       	mov	r12,40
80004080:	fe b0 f0 cf 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80004084:	32 9c       	mov	r12,41
80004086:	fe b0 f0 cc 	rcall	8000221e <gpio_enable_pin_pull_up>

  gpio_enable_pin_pull_up(SW0_PIN);
8000408a:	31 9c       	mov	r12,25
8000408c:	fe b0 f0 c9 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW1_PIN);
80004090:	31 ac       	mov	r12,26
80004092:	fe b0 f0 c6 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
80004096:	31 bc       	mov	r12,27
80004098:	fe b0 f0 c3 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW3_PIN);
8000409c:	31 cc       	mov	r12,28
8000409e:	fe b0 f0 c0 	rcall	8000221e <gpio_enable_pin_pull_up>
}
800040a2:	d8 02       	popm	pc

800040a4 <init_local_pdca>:
800040a4:	eb cd 40 b0 	pushm	r4-r5,r7,lr
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
}

// init PDCA (Peripheral DMA Controller A) resources for the SPI transfer and start a dummy transfer
void init_local_pdca(void)
{
800040a8:	20 cd       	sub	sp,48
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800040aa:	fe ca e7 72 	sub	r10,pc,-6286
800040ae:	f4 e4 00 10 	ld.d	r4,r10[16]
800040b2:	fa c7 ff e8 	sub	r7,sp,-24
800040b6:	fe c9 e7 46 	sub	r9,pc,-6330
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800040ba:	ee e5 00 10 	st.d	r7[16],r4
800040be:	f2 e4 00 10 	ld.d	r4,r9[16]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800040c2:	fa e5 00 10 	st.d	sp[16],r4
800040c6:	f4 e4 00 00 	ld.d	r4,r10[0]
800040ca:	ee e5 00 00 	st.d	r7[0],r4
800040ce:	f4 e4 00 08 	ld.d	r4,r10[8]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800040d2:	ee e5 00 08 	st.d	r7[8],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800040d6:	f2 e4 00 00 	ld.d	r4,r9[0]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800040da:	1a 9b       	mov	r11,sp

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800040dc:	fa e5 00 00 	st.d	sp[0],r4
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800040e0:	30 1c       	mov	r12,1
800040e2:	f2 e4 00 08 	ld.d	r4,r9[8]

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800040e6:	fa e5 00 08 	st.d	sp[8],r4

  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
800040ea:	fe b0 f1 f9 	rcall	800024dc <pdca_init_channel>
800040ee:	0e 9b       	mov	r11,r7
800040f0:	30 0c       	mov	r12,0
}
800040f2:	fe b0 f1 f5 	rcall	800024dc <pdca_init_channel>
800040f6:	2f 4d       	sub	sp,-48
800040f8:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc

800040fc <init_sd_mmc_resources>:
800040fc:	eb cd 40 80 	pushm	r7,lr
80004100:	20 4d       	sub	sp,16
80004102:	fe c8 e7 fe 	sub	r8,pc,-6146
    .bits = SD_MMC_SPI_BITS, // Defined in conf_sd_mmc_spi.h.
    .spck_delay = 0, 
    .trans_delay = 0, 
    .stay_act = 1, 
    .spi_mode = 0,
    .modfdis = 1 };
80004106:	f0 ea 00 08 	ld.d	r10,r8[8]
8000410a:	fa eb 00 08 	st.d	sp[8],r10
8000410e:	f0 e8 00 00 	ld.d	r8,r8[0]
80004112:	1a 97       	mov	r7,sp
80004114:	fa e9 00 00 	st.d	sp[0],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP, sizeof(SD_MMC_SPI_GPIO_MAP)
80004118:	30 4b       	mov	r11,4
8000411a:	fe cc e7 8e 	sub	r12,pc,-6258
		     / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
8000411e:	fe b0 f0 f7 	rcall	8000230c <gpio_enable_module>
80004122:	1a 9b       	mov	r11,sp
80004124:	fe 7c 28 00 	mov	r12,-55296

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80004128:	fe b0 f2 93 	rcall	8000264e <spi_initMaster>
8000412c:	30 09       	mov	r9,0
8000412e:	fe 7c 28 00 	mov	r12,-55296
80004132:	12 9a       	mov	r10,r9
80004134:	12 9b       	mov	r11,r9

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
80004136:	fe b0 f2 a9 	rcall	80002688 <spi_selectionMode>
8000413a:	fe 7c 28 00 	mov	r12,-55296

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
8000413e:	fe b0 f3 4b 	rcall	800027d4 <spi_enable>
80004142:	ee e8 00 08 	ld.d	r8,r7[8]
80004146:	20 4d       	sub	sp,16
80004148:	fa e9 00 08 	st.d	sp[8],r8
8000414c:	ee e8 00 00 	ld.d	r8,r7[0]
80004150:	e0 6c 14 80 	mov	r12,5248
80004154:	ea 1c 03 ef 	orh	r12,0x3ef
80004158:	fa e9 00 00 	st.d	sp[0],r8
8000415c:	fe b0 fc 9c 	rcall	80003a94 <sd_mmc_spi_init>
}
80004160:	2f cd       	sub	sp,-16
80004162:	2f cd       	sub	sp,-16
80004164:	e3 cd 80 80 	ldm	sp++,r7,pc

80004168 <init_tc>:
80004168:	eb cd 40 80 	pushm	r7,lr
8000416c:	fe cb e8 3c 	sub	r11,pc,-6084
80004170:	18 97       	mov	r7,r12
80004172:	fe b0 f3 53 	rcall	80002818 <tc_init_waveform>
80004176:	e0 6a 02 03 	mov	r10,515
8000417a:	30 0b       	mov	r11,0
8000417c:	0e 9c       	mov	r12,r7
8000417e:	fe b0 f3 ae 	rcall	800028da <tc_write_rc>
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000

  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80004182:	30 0b       	mov	r11,0
80004184:	fe ca e8 58 	sub	r10,pc,-6056
80004188:	0e 9c       	mov	r12,r7
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
8000418a:	fe b0 f3 c4 	rcall	80002912 <tc_configure_interrupts>
8000418e:	0e 9c       	mov	r12,r7
80004190:	30 0b       	mov	r11,0

}
80004192:	fe b0 f3 92 	rcall	800028b6 <tc_start>
80004196:	e3 cd 80 80 	ldm	sp++,r7,pc
8000419a:	d7 03       	nop

8000419c <init_oled_usart>:
8000419c:	d4 01       	pushm	lr
8000419e:	30 4b       	mov	r11,4
800041a0:	fe cc e8 50 	sub	r12,pc,-6064
800041a4:	fe b0 f0 b4 	rcall	8000230c <gpio_enable_module>
800041a8:	e0 6a 1b 00 	mov	r10,6912
800041ac:	ea 1a 00 b7 	orh	r10,0xb7

  // Assign GPIO to SPI.
  gpio_enable_module(USART_SPI_GPIO_MAP,
		     sizeof(USART_SPI_GPIO_MAP) / sizeof(USART_SPI_GPIO_MAP[0]));
  // Initialize USART in SPI mode from OSC0
  usart_init_spi_master(OLED_USART_SPI, &USART_SPI_OPTIONS, FOSC0);
800041b0:	fe cb e8 9c 	sub	r11,pc,-5988
800041b4:	fe 7c 1c 00 	mov	r12,-58368
  delay_ms(10);

}
800041b8:	fe b0 f4 a2 	rcall	80002afc <usart_init_spi_master>
800041bc:	d8 02       	popm	pc
800041be:	d7 03       	nop

800041c0 <init_dbg_usart>:
800041c0:	d4 01       	pushm	lr
800041c2:	30 2b       	mov	r11,2
800041c4:	fe cc e8 3c 	sub	r12,pc,-6084
800041c8:	fe b0 f0 a2 	rcall	8000230c <gpio_enable_module>
  // Set up GPIO for DBG_USART
  gpio_enable_module(DBG_USART_GPIO_MAP,
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(DBG_USART, &DBG_USART_OPTIONS, FPBA_HZ);
800041cc:	e0 6a 14 80 	mov	r10,5248
800041d0:	ea 1a 03 ef 	orh	r10,0x3ef
800041d4:	fe cb e8 7c 	sub	r11,pc,-6020
800041d8:	fe 7c 18 00 	mov	r12,-59392
}
800041dc:	fe b0 f4 f8 	rcall	80002bcc <usart_init_rs232>
800041e0:	d8 02       	popm	pc
800041e2:	d7 03       	nop

800041e4 <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
800041e4:	d4 01       	pushm	lr
  //  U8 i;

  // enable interrupts on GPIO inputs

  // BFIN_HWAIT
  gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_PIN_CHANGE);
800041e6:	30 0b       	mov	r11,0
800041e8:	30 5c       	mov	r12,5
800041ea:	fe b0 f0 56 	rcall	80002296 <gpio_enable_pin_interrupt>

  // encoders
  gpio_enable_pin_interrupt( ENC0_S0_PIN,	GPIO_PIN_CHANGE);
800041ee:	30 0b       	mov	r11,0
800041f0:	32 2c       	mov	r12,34
800041f2:	fe b0 f0 52 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC0_S1_PIN,	GPIO_PIN_CHANGE);
800041f6:	30 0b       	mov	r11,0
800041f8:	32 3c       	mov	r12,35
800041fa:	fe b0 f0 4e 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S0_PIN,	GPIO_PIN_CHANGE);
800041fe:	30 0b       	mov	r11,0
80004200:	32 4c       	mov	r12,36
80004202:	fe b0 f0 4a 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S1_PIN,	GPIO_PIN_CHANGE);
80004206:	30 0b       	mov	r11,0
80004208:	32 5c       	mov	r12,37
8000420a:	fe b0 f0 46 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S0_PIN,	GPIO_PIN_CHANGE);
8000420e:	30 0b       	mov	r11,0
80004210:	32 6c       	mov	r12,38
80004212:	fe b0 f0 42 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S1_PIN,	GPIO_PIN_CHANGE);
80004216:	30 0b       	mov	r11,0
80004218:	32 7c       	mov	r12,39
8000421a:	fe b0 f0 3e 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S0_PIN,	GPIO_PIN_CHANGE);
8000421e:	30 0b       	mov	r11,0
80004220:	32 8c       	mov	r12,40
80004222:	fe b0 f0 3a 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S1_PIN,	GPIO_PIN_CHANGE);
80004226:	30 0b       	mov	r11,0
80004228:	32 9c       	mov	r12,41
8000422a:	fe b0 f0 36 	rcall	80002296 <gpio_enable_pin_interrupt>

  // switches
  gpio_enable_pin_interrupt( SW0_PIN,	        GPIO_PIN_CHANGE);
8000422e:	30 0b       	mov	r11,0
80004230:	31 9c       	mov	r12,25
80004232:	fe b0 f0 32 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW1_PIN,	        GPIO_PIN_CHANGE);
80004236:	30 0b       	mov	r11,0
80004238:	31 ac       	mov	r12,26
8000423a:	fe b0 f0 2e 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW2_PIN,	        GPIO_PIN_CHANGE);
8000423e:	30 0b       	mov	r11,0
80004240:	31 bc       	mov	r12,27
80004242:	fe b0 f0 2a 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_PIN_CHANGE);
80004246:	30 0b       	mov	r11,0
80004248:	31 cc       	mov	r12,28
8000424a:	fe b0 f0 26 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW_EDIT_PIN,	GPIO_PIN_CHANGE);
8000424e:	30 0b       	mov	r11,0
80004250:	31 8c       	mov	r12,24
80004252:	fe b0 f0 22 	rcall	80002296 <gpio_enable_pin_interrupt>
  

  // PA00 - PA07
  INTC_register_interrupt( &irq_port0_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA00 / 8), UI_IRQ_LEVEL );
80004256:	30 2a       	mov	r10,2
80004258:	34 0b       	mov	r11,64
8000425a:	fe cc fd d6 	sub	r12,pc,-554
8000425e:	fe b0 f0 9b 	rcall	80002394 <INTC_register_interrupt>

  // PA16 - PA23
  // INTC_register_interrupt( &irq_port0_line2, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA16 / 8), UI_IRQ_LEVEL);

  // PA24 - PA31
  INTC_register_interrupt( &irq_port0_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA24 / 8), UI_IRQ_LEVEL);
80004262:	30 2a       	mov	r10,2
80004264:	34 3b       	mov	r11,67
80004266:	fe cc fe 56 	sub	r12,pc,-426

  // PB00 - PB07
  INTC_register_interrupt( &irq_port1_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB00 / 8), UI_IRQ_LEVEL );
8000426a:	fe b0 f0 95 	rcall	80002394 <INTC_register_interrupt>
8000426e:	30 2a       	mov	r10,2
80004270:	34 4b       	mov	r11,68
80004272:	fe cc fe ea 	sub	r12,pc,-278

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_LEVEL);
80004276:	fe b0 f0 8f 	rcall	80002394 <INTC_register_interrupt>
8000427a:	30 2a       	mov	r10,2
8000427c:	34 5b       	mov	r11,69

  // PB24 - PB31
  //  INTC_register_interrupt( &irq_port1_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB24 / 8), UI_IRQ_LEVEL);

  // register IRQ for PDCA transfer
  INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1);
8000427e:	fe cc ff 26 	sub	r12,pc,-218
80004282:	fe b0 f0 89 	rcall	80002394 <INTC_register_interrupt>
80004286:	30 1a       	mov	r10,1

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
80004288:	36 0b       	mov	r11,96
8000428a:	fe cc ff 82 	sub	r12,pc,-126
8000428e:	fe b0 f0 83 	rcall	80002394 <INTC_register_interrupt>
80004292:	30 0a       	mov	r10,0
}
80004294:	e0 6b 01 c0 	mov	r11,448
80004298:	fe cc ff f4 	sub	r12,pc,-12
8000429c:	fe b0 f0 7c 	rcall	80002394 <INTC_register_interrupt>
800042a0:	d8 02       	popm	pc
800042a2:	d7 03       	nop

800042a4 <irq_tc>:
800042a4:	eb cd 40 c0 	pushm	r6-r7,lr
800042a8:	e0 68 02 90 	mov	r8,656
800042ac:	30 1a       	mov	r10,1
800042ae:	f0 e6 00 00 	ld.d	r6,r8[0]
800042b2:	30 0b       	mov	r11,0
800042b4:	ec 0a 00 0a 	add	r10,r6,r10
}

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
800042b8:	ee 0b 00 4b 	adc	r11,r7,r11
800042bc:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
800042c0:	e0 66 ff ff 	mov	r6,65535
800042c4:	ea 16 7f ff 	orh	r6,0x7fff
800042c8:	f0 ea 00 00 	ld.d	r10,r8[0]
800042cc:	30 07       	mov	r7,0
800042ce:	0c 3a       	cp.w	r10,r6
800042d0:	ee 0b 13 00 	cpc	r11,r7
800042d4:	e0 8b 00 10 	brhi	800042f4 <irq_tc+0x50>
    tcTicks = 0;
    tcOverflow = 1;
  } else {
    tcOverflow = 0;
800042d8:	30 09       	mov	r9,0
800042da:	e0 68 02 8d 	mov	r8,653
  }
  process_timers();
800042de:	b0 89       	st.b	r8[0x0],r9
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
800042e0:	e0 a0 05 0e 	rcall	80004cfc <process_timers>
800042e4:	30 0b       	mov	r11,0
800042e6:	fe 7c 38 00 	mov	r12,-51200

}
800042ea:	fe b0 f2 ef 	rcall	800028c8 <tc_read_sr>
800042ee:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
  // overflow control
  if(tcTicks > tcMax) { 
    tcTicks = 0;
800042f2:	d6 03       	rete
800042f4:	30 0a       	mov	r10,0
800042f6:	30 0b       	mov	r11,0
    tcOverflow = 1;
800042f8:	f0 eb 00 00 	st.d	r8[0],r10
800042fc:	30 19       	mov	r9,1
800042fe:	e0 68 02 8d 	mov	r8,653
80004302:	b0 89       	st.b	r8[0x0],r9
80004304:	ce eb       	rjmp	800042e0 <irq_tc+0x3c>
80004306:	d7 03       	nop

80004308 <irq_pdca>:
80004308:	d4 01       	pushm	lr
8000430a:	20 1d       	sub	sp,4
8000430c:	d3 03       	ssrf	0x10
8000430e:	30 0c       	mov	r12,0
  volatile U16 delay;
  // Disable all interrupts.
  Disable_global_interrupt();

  // Disable interrupt channel.
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80004310:	fe b0 f0 cb 	rcall	800024a6 <pdca_disable_interrupt_transfer_complete>

  //unselects the SD/MMC memory.
  sd_mmc_spi_read_close_PDCA();
80004314:	fe b0 f5 5e 	rcall	80002dd0 <sd_mmc_spi_read_close_PDCA>

  // wait (FIXME??)
  delay=0; while(delay < 5000) { delay++; }
80004318:	30 08       	mov	r8,0
8000431a:	ba 18       	st.h	sp[0x2],r8
8000431c:	e0 69 13 87 	mov	r9,4999
80004320:	9a 18       	ld.sh	r8,sp[0x2]
80004322:	f2 08 19 00 	cp.h	r8,r9
80004326:	e0 8b 00 0a 	brhi	8000433a <irq_pdca+0x32>
8000432a:	9a 18       	ld.sh	r8,sp[0x2]
8000432c:	2f f8       	sub	r8,-1
8000432e:	ba 18       	st.h	sp[0x2],r8
80004330:	9a 18       	ld.sh	r8,sp[0x2]
80004332:	f2 08 19 00 	cp.h	r8,r9
80004336:	fe 98 ff fa 	brls	8000432a <irq_pdca+0x22>

  // Disable unnecessary channel
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
8000433a:	30 1c       	mov	r12,1
8000433c:	fe b0 f0 a8 	rcall	8000248c <pdca_disable>
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80004340:	30 0c       	mov	r12,0
80004342:	fe b0 f0 a5 	rcall	8000248c <pdca_disable>

  // Enable all interrupts.
  Enable_global_interrupt();
80004346:	d5 03       	csrf	0x10

  end_of_transfer = true;
80004348:	30 19       	mov	r9,1
8000434a:	e0 68 19 2c 	mov	r8,6444
}
8000434e:	b0 89       	st.b	r8[0x0],r9
80004350:	2f fd       	sub	sp,-4
80004352:	d4 02       	popm	lr
80004354:	d6 03       	rete
80004356:	d7 03       	nop

80004358 <irq_port1_line1>:
80004358:	d4 01       	pushm	lr
8000435a:	32 8c       	mov	r12,40
8000435c:	fe b0 ef c2 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004360:	c0 d1       	brne	8000437a <irq_port1_line1+0x22>
80004362:	32 9c       	mov	r12,41
 if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  // ENC3_1
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
80004364:	fe b0 ef be 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004368:	c0 70       	breq	80004376 <irq_port1_line1+0x1e>
    process_enc(3);
8000436a:	30 3c       	mov	r12,3
8000436c:	fe b0 fd 6e 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
80004370:	32 9c       	mov	r12,41
80004372:	fe b0 ef c3 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }

}
80004376:	d4 02       	popm	lr
80004378:	d6 03       	rete
// interrupt handler for PB08-PB15
__attribute__((__interrupt__))
static void irq_port1_line1(void) {
  // ENC3_0
 if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
8000437a:	30 3c       	mov	r12,3
8000437c:	fe b0 fd 66 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
80004380:	32 8c       	mov	r12,40
80004382:	fe b0 ef bb 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80004386:	ce eb       	rjmp	80004362 <irq_port1_line1+0xa>

80004388 <irq_port1_line0>:
80004388:	d4 01       	pushm	lr
8000438a:	32 2c       	mov	r12,34
8000438c:	fe b0 ef aa 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004390:	c3 91       	brne	80004402 <irq_port1_line0+0x7a>
80004392:	32 3c       	mov	r12,35
 if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
80004394:	fe b0 ef a6 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004398:	c2 e1       	brne	800043f4 <irq_port1_line0+0x6c>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
8000439a:	32 4c       	mov	r12,36
8000439c:	fe b0 ef a2 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
800043a0:	c2 31       	brne	800043e6 <irq_port1_line0+0x5e>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
800043a2:	32 5c       	mov	r12,37
800043a4:	fe b0 ef 9e 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
800043a8:	c1 81       	brne	800043d8 <irq_port1_line0+0x50>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
800043aa:	32 6c       	mov	r12,38
800043ac:	fe b0 ef 9a 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
800043b0:	c0 d1       	brne	800043ca <irq_port1_line0+0x42>
    process_enc(2);
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
  }  
  // ENC2_1
  if(gpio_get_pin_interrupt_flag(ENC2_S1_PIN)) {
800043b2:	32 7c       	mov	r12,39
800043b4:	fe b0 ef 96 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
800043b8:	c0 70       	breq	800043c6 <irq_port1_line0+0x3e>
    process_enc(2);
800043ba:	30 2c       	mov	r12,2
800043bc:	fe b0 fd 46 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S1_PIN);
800043c0:	32 7c       	mov	r12,39
800043c2:	fe b0 ef 9b 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }
}
800043c6:	d4 02       	popm	lr
800043c8:	d6 03       	rete
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
    process_enc(2);
800043ca:	30 2c       	mov	r12,2
800043cc:	fe b0 fd 3e 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
800043d0:	32 6c       	mov	r12,38
800043d2:	fe b0 ef 93 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
800043d6:	ce eb       	rjmp	800043b2 <irq_port1_line0+0x2a>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
800043d8:	30 1c       	mov	r12,1
800043da:	fe b0 fd 37 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
800043de:	32 5c       	mov	r12,37
800043e0:	fe b0 ef 8c 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
800043e4:	ce 3b       	rjmp	800043aa <irq_port1_line0+0x22>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
800043e6:	30 1c       	mov	r12,1
800043e8:	fe b0 fd 30 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
800043ec:	32 4c       	mov	r12,36
800043ee:	fe b0 ef 85 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
800043f2:	cd 8b       	rjmp	800043a2 <irq_port1_line0+0x1a>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
800043f4:	30 0c       	mov	r12,0
800043f6:	fe b0 fd 29 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
800043fa:	32 3c       	mov	r12,35
800043fc:	fe b0 ef 7e 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80004400:	cc db       	rjmp	8000439a <irq_port1_line0+0x12>
// interrupt handler for PB00-PB07
__attribute__((__interrupt__))
static void irq_port1_line0(void) {
  // ENC0_0
 if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
80004402:	30 0c       	mov	r12,0
80004404:	fe b0 fd 22 	rcall	80003e48 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
80004408:	32 2c       	mov	r12,34
8000440a:	fe b0 ef 77 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
8000440e:	cc 2b       	rjmp	80004392 <irq_port1_line0+0xa>

80004410 <irq_port0_line3>:
80004410:	d4 01       	pushm	lr
80004412:	31 9c       	mov	r12,25
80004414:	fe b0 ef 66 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004418:	c2 e1       	brne	80004474 <irq_port0_line3+0x64>
8000441a:	31 ac       	mov	r12,26
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    process_sw(0);
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
8000441c:	fe b0 ef 62 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004420:	c2 31       	brne	80004466 <irq_port0_line3+0x56>
    process_sw(1);
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
80004422:	31 bc       	mov	r12,27
80004424:	fe b0 ef 5e 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004428:	c1 81       	brne	80004458 <irq_port0_line3+0x48>
    process_sw(2);
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
8000442a:	31 cc       	mov	r12,28
8000442c:	fe b0 ef 5a 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004430:	c0 d1       	brne	8000444a <irq_port0_line3+0x3a>
    process_sw(3);
    gpio_clear_pin_interrupt_flag(SW3_PIN);
  }
  // SW_EDIT
  if(gpio_get_pin_interrupt_flag(SW_EDIT_PIN)) {
80004432:	31 8c       	mov	r12,24
80004434:	fe b0 ef 56 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80004438:	c0 70       	breq	80004446 <irq_port0_line3+0x36>
    process_sw(4);
8000443a:	30 4c       	mov	r12,4
8000443c:	e0 a0 04 48 	rcall	80004ccc <process_sw>
    gpio_clear_pin_interrupt_flag(SW_EDIT_PIN);
80004440:	31 8c       	mov	r12,24
80004442:	fe b0 ef 5b 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }
}
80004446:	d4 02       	popm	lr
80004448:	d6 03       	rete
    process_sw(2);
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
    process_sw(3);
8000444a:	30 3c       	mov	r12,3
8000444c:	e0 a0 04 40 	rcall	80004ccc <process_sw>
    gpio_clear_pin_interrupt_flag(SW3_PIN);
80004450:	31 cc       	mov	r12,28
80004452:	fe b0 ef 53 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80004456:	ce eb       	rjmp	80004432 <irq_port0_line3+0x22>
    process_sw(1);
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
    process_sw(2);
80004458:	30 2c       	mov	r12,2
8000445a:	e0 a0 04 39 	rcall	80004ccc <process_sw>
    gpio_clear_pin_interrupt_flag(SW2_PIN);
8000445e:	31 bc       	mov	r12,27
80004460:	fe b0 ef 4c 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80004464:	ce 3b       	rjmp	8000442a <irq_port0_line3+0x1a>
    process_sw(0);
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    process_sw(1);
80004466:	30 1c       	mov	r12,1
80004468:	e0 a0 04 32 	rcall	80004ccc <process_sw>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
8000446c:	31 ac       	mov	r12,26
8000446e:	fe b0 ef 45 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80004472:	cd 8b       	rjmp	80004422 <irq_port0_line3+0x12>
// interrupt handler for PA23-PA30
__attribute__((__interrupt__))
static void irq_port0_line3(void) {
  //SW_F0
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    process_sw(0);
80004474:	30 0c       	mov	r12,0
80004476:	e0 a0 04 2b 	rcall	80004ccc <process_sw>
    gpio_clear_pin_interrupt_flag(SW0_PIN);
8000447a:	31 9c       	mov	r12,25
8000447c:	fe b0 ef 3e 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80004480:	cc db       	rjmp	8000441a <irq_port0_line3+0xa>
80004482:	d7 03       	nop

80004484 <irq_port0_line0>:
80004484:	d4 01       	pushm	lr
80004486:	30 5c       	mov	r12,5
80004488:	fe b0 ef 2c 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
8000448c:	c0 a0       	breq	800044a0 <irq_port0_line0+0x1c>
8000448e:	30 5c       	mov	r12,5
// interrupt handler for PA00-PA07
__attribute__((__interrupt__))
static void irq_port0_line0(void) {
  // BFIN_HWAIT
  if(gpio_get_pin_interrupt_flag(BFIN_HWAIT_PIN)) {
    hwait = gpio_get_pin_value(BFIN_HWAIT_PIN);
80004490:	fe b0 ee d1 	rcall	80002232 <gpio_get_pin_value>
80004494:	e0 68 01 80 	mov	r8,384
    gpio_clear_pin_interrupt_flag(BFIN_HWAIT_PIN);
80004498:	b0 8c       	st.b	r8[0x0],r12
8000449a:	30 5c       	mov	r12,5
8000449c:	fe b0 ef 2e 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }
}
800044a0:	d4 02       	popm	lr
800044a2:	d6 03       	rete

800044a4 <main>:
  } // if event
}


////main function
int main (void) {
800044a4:	eb cd 40 c0 	pushm	r6-r7,lr
800044a8:	20 2d       	sub	sp,8
  volatile u64 delay;
  
  // switch to osc0 for main clock
  //  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP); 
  // initialize clocks:
  init_clocks();
800044aa:	fe b0 fd 53 	rcall	80003f50 <init_clocks>
  
  // initialize Interrupt Controllvoider
  INTC_init_interrupts();
800044ae:	fe b0 ef b3 	rcall	80002414 <INTC_init_interrupts>

  // disable interrupts
  Disable_global_interrupt();
800044b2:	d3 03       	ssrf	0x10

  // initialize RS232 debug uart
  init_dbg_usart();
800044b4:	c8 6e       	rcall	800041c0 <init_dbg_usart>
800044b6:	c7 3e       	rcall	8000419c <init_oled_usart>

  // initialize oled uart in SPI mode
  init_oled_usart();
800044b8:	c2 2e       	rcall	800040fc <init_sd_mmc_resources>
800044ba:	fe b0 fd f5 	rcall	800040a4 <init_local_pdca>

  // initialize SD/MMC driver resources: GPIO, SPI and SD/MMC.
  init_sd_mmc_resources();
800044be:	fe b0 fd 79 	rcall	80003fb0 <init_bfin_resources>

  // initialize PDCA controller
  init_local_pdca();
800044c2:	fe 7c 38 00 	mov	r12,-51200

  // initialize blackfin resources
  init_bfin_resources();
800044c6:	c5 1e       	rcall	80004168 <init_tc>

  // initialize application timer
  init_tc(tc);
800044c8:	fe b0 fd c8 	rcall	80004058 <init_gpio>
800044cc:	c8 ce       	rcall	800041e4 <register_interrupts>
800044ce:	c2 5d       	rcall	80004718 <init_oled>

  // initialize other GPIO
  init_gpio();
800044d0:	fe b0 fc 56 	rcall	80003d7c <init_events>

  // register interrupts
  register_interrupts();
800044d4:	fe b0 fc e0 	rcall	80003e94 <init_encoders>

  // initialize the OLED screen
  init_oled();
800044d8:	e0 6c 14 80 	mov	r12,5248
  
  // intialize the event queue
  init_events();
800044dc:	ea 1c 03 ef 	orh	r12,0x3ef
  
  // intialize encoders
  init_encoders();
800044e0:	fe b0 ed 92 	rcall	80002004 <sdramc_init>

  // initialize sdram
  sdramc_init(FMCK_HZ);
800044e4:	c3 ec       	rcall	80004560 <init_mem>
800044e6:	d5 03       	csrf	0x10
800044e8:	e0 68 27 10 	mov	r8,10000
800044ec:	30 09       	mov	r9,0
800044ee:	3f fa       	mov	r10,-1
  //memory managaer
  init_mem();
800044f0:	fa e9 00 00 	st.d	sp[0],r8

  // Enable all interrupts.
  Enable_global_interrupt();
800044f4:	3f fb       	mov	r11,-1

  delay = 10000; while(delay-- > 0) { ;; } 
800044f6:	fa e8 00 00 	ld.d	r8,sp[0]
800044fa:	f0 0a 00 06 	add	r6,r8,r10
800044fe:	f2 0b 00 47 	adc	r7,r9,r11
80004502:	fa e7 00 00 	st.d	sp[0],r6
80004506:	58 08       	cp.w	r8,0
80004508:	5c 29       	cpc	r9
8000450a:	cf 61       	brne	800044f6 <main+0x52>
8000450c:	c7 0c       	rcall	800045ec <screen_test_fill>
8000450e:	c5 3c       	rcall	800045b4 <screen_refresh>
80004510:	fe cc eb 7c 	sub	r12,pc,-5252
80004514:	fe b0 f3 ce 	rcall	80002cb0 <print_dbg>
80004518:	fe b0 fa d4 	rcall	80003ac0 <init_adc>

  //  screen_line(0, 0, "AAAAAH HAAA", 0);
  screen_test_fill();
8000451c:	fe b0 fb be 	rcall	80003c98 <init_app_timers>
  screen_refresh();
80004520:	fe cc eb 80 	sub	r12,pc,-5248

  print_dbg("\r\nALEPH\r\n ");
80004524:	fe b0 f3 c6 	rcall	80002cb0 <print_dbg>
  // send ADC config
  init_adc();
80004528:	e0 67 02 98 	mov	r7,664
  init_app_timers();
8000452c:	e0 6c 02 98 	mov	r12,664

  print_dbg("starting event loop.\n\r");
80004530:	fe b0 fc 60 	rcall	80003df0 <get_next_event>
80004534:	cf c0       	breq	8000452c <main+0x88>
  //static U64 cycles = 0;
  //static U64 cyclesNow = 0;

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {
80004536:	fe cc eb 7e 	sub	r12,pc,-5250
8000453a:	6e 08       	ld.w	r8,r7[0x0]
8000453c:	58 08       	cp.w	r8,0
8000453e:	c0 71       	brne	8000454c <main+0xa8>
    switch(e.eventType) {
        
    case kEventSwitchDown0:
      //      if (check_init()) { return; }
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
80004540:	fe b0 f3 b8 	rcall	80002cb0 <print_dbg>

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {

    switch(e.eventType) {
80004544:	32 0c       	mov	r12,32
80004546:	fe b0 ee 81 	rcall	80002248 <gpio_set_gpio_pin>
        
    case kEventSwitchDown0:
      //      if (check_init()) { return; }
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
8000454a:	cf 1b       	rjmp	8000452c <main+0x88>
      gpio_set_gpio_pin(AVR32_PIN_PB00);
8000454c:	58 18       	cp.w	r8,1
8000454e:	ce f1       	brne	8000452c <main+0x88>
80004550:	fe cc eb 88 	sub	r12,pc,-5240

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {

    switch(e.eventType) {
80004554:	fe b0 f3 ae 	rcall	80002cb0 <print_dbg>
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
      gpio_set_gpio_pin(AVR32_PIN_PB00);
      break;
    case kEventSwitchUp0:
      print_dbg("\r\n switch up");
80004558:	32 0c       	mov	r12,32
8000455a:	fe b0 ee 84 	rcall	80002262 <gpio_clr_gpio_pin>
      gpio_clr_gpio_pin(AVR32_PIN_PB00);
8000455e:	ce 7b       	rjmp	8000452c <main+0x88>

80004560 <init_mem>:
static void sdram_test(void);

// setup heap
void init_mem(void) {

  heapSize = SDRAM_SIZE;
80004560:	fc 19 02 00 	movh	r9,0x200
80004564:	e0 68 02 a8 	mov	r8,680
  pHeapStart = SDRAM;
80004568:	91 09       	st.w	r8[0x0],r9
8000456a:	fc 19 d0 00 	movh	r9,0xd000
8000456e:	e0 68 02 a0 	mov	r8,672
  pHeapEnd = pHeapStart + heapSize;
80004572:	91 09       	st.w	r8[0x0],r9
80004574:	fc 19 d2 00 	movh	r9,0xd200
  heapOffset = 0;
80004578:	e0 68 02 ac 	mov	r8,684
8000457c:	91 09       	st.w	r8[0x0],r9

}
8000457e:	30 09       	mov	r9,0
80004580:	e0 68 02 a4 	mov	r8,676
80004584:	91 09       	st.w	r8[0x0],r9
80004586:	5e fc       	retal	r12

80004588 <write_command>:
  usart_putchar(OLED_USART_SPI, c);
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
80004588:	eb cd 40 80 	pushm	r7,lr
8000458c:	18 97       	mov	r7,r12
  usart_spi_selectChip(OLED_USART_SPI);
8000458e:	fe 7c 1c 00 	mov	r12,-58368
80004592:	fe b0 f2 7e 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004596:	33 bc       	mov	r12,59
80004598:	fe b0 ee 65 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000459c:	0e 9b       	mov	r11,r7
8000459e:	fe 7c 1c 00 	mov	r12,-58368
800045a2:	fe b0 f2 89 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800045a6:	fe 7c 1c 00 	mov	r12,-58368
800045aa:	fe b0 f2 76 	rcall	80002a96 <usart_spi_unselectChip>
}
800045ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800045b2:	d7 03       	nop

800045b4 <screen_refresh>:
800045b4:	eb cd 40 e0 	pushm	r5-r7,lr
800045b8:	e0 67 02 c0 	mov	r7,704
800045bc:	ee c6 f0 00 	sub	r6,r7,-4096
800045c0:	0f 35       	ld.ub	r5,r7++
800045c2:	fe 7c 1c 00 	mov	r12,-58368

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800045c6:	fe b0 f2 64 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
800045ca:	33 bc       	mov	r12,59
800045cc:	fe b0 ee 3e 	rcall	80002248 <gpio_set_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800045d0:	0a 9b       	mov	r11,r5
800045d2:	fe 7c 1c 00 	mov	r12,-58368
800045d6:	fe b0 f2 6f 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800045da:	fe 7c 1c 00 	mov	r12,-58368
800045de:	fe b0 f2 5c 	rcall	80002a96 <usart_spi_unselectChip>
// send screen buffer contents to OLED
void screen_refresh(void) {
  U16 i;
  //  cpu_irq_disable();
  //  Disable_global_interrupt();
  for(i=0; i<GRAM_BYTES; i++) { 
800045e2:	0c 37       	cp.w	r7,r6
    write_data(screen[i]);  
    //write_data(i % 0xf);
  }
  //  cpu_irq_enable();
  //  Enable_global_interrupt();
}
800045e4:	ce e1       	brne	800045c0 <screen_refresh+0xc>
800045e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800045ea:	d7 03       	nop

800045ec <screen_test_fill>:
800045ec:	d4 31       	pushm	r0-r7,lr
800045ee:	20 3d       	sub	sp,12
800045f0:	fe c8 e8 f0 	sub	r8,pc,-5904
800045f4:	70 08       	ld.w	r8,r8[0x0]
800045f6:	50 28       	stdsp	sp[0x8],r8
800045f8:	58 08       	cp.w	r8,0
800045fa:	c7 d0       	breq	800046f4 <screen_test_fill+0x108>
// fill graphics ram with a test pattern
void screen_test_fill(void) {
  u32 i;
  u32 x=0;
  u32 y=0;
  for(i=0; i<font_nglyphs; i++) {
800045fc:	30 02       	mov	r2,0
800045fe:	e0 69 02 b8 	mov	r9,696
80004602:	50 02       	stdsp	sp[0x0],r2
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80004604:	72 0a       	ld.w	r10,r9[0x0]
80004606:	50 12       	stdsp	sp[0x4],r2
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
80004608:	30 10       	mov	r0,1
8000460a:	e0 6b 02 c0 	mov	r11,704
8000460e:	fe c8 ec 06 	sub	r8,pc,-5114
80004612:	40 16       	lddsp	r6,sp[0x4]
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80004614:	40 01       	lddsp	r1,sp[0x0]
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
80004616:	2e 06       	sub	r6,-32
80004618:	30 03       	mov	r3,0
8000461a:	5c 56       	castu.b	r6
  xnum = FONT_CHARW - g->first - g->last;
8000461c:	5c 81       	casts.h	r1
8000461e:	22 06       	sub	r6,32
80004620:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004624:	0d 85       	ld.ub	r5,r6[0x0]
80004626:	0d 98       	ld.ub	r8,r6[0x1]
80004628:	ea 0c 11 00 	rsub	r12,r5,0
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
8000462c:	10 1c       	sub	r12,r8
8000462e:	2f ac       	sub	r12,-6
80004630:	5c 5c       	castu.b	r12
80004632:	58 0c       	cp.w	r12,0
80004634:	c3 a0       	breq	800046a8 <screen_test_fill+0xbc>
80004636:	e6 02 00 07 	add	r7,r3,r2
8000463a:	e0 03 09 4e 	lsl	lr,r0,r3
8000463e:	5c 77       	castu.h	r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80004640:	02 99       	mov	r9,r1
80004642:	a7 67       	lsl	r7,0x6
  if (x%2) {
80004644:	30 08       	mov	r8,0
80004646:	c1 68       	rjmp	80004672 <screen_test_fill+0x86>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80004648:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
  if (x%2) {
8000464c:	e9 da c0 01 	bfextu	r4,r10,0x0,0x1
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80004650:	a1 9a       	lsr	r10,0x1
80004652:	0e 0a       	add	r10,r7
80004654:	58 04       	cp.w	r4,0
80004656:	c5 11       	brne	800046f8 <screen_test_fill+0x10c>
80004658:	f6 0a 07 04 	ld.ub	r4,r11[r10]
8000465c:	e8 14 00 0f 	orl	r4,0xf
80004660:	f6 0a 0b 04 	st.b	r11[r10],r4
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80004664:	2f f9       	sub	r9,-1
80004666:	2f f8       	sub	r8,-1
80004668:	5c 89       	casts.h	r9
      if( (g->data[x + g->first] & (1 << y))) {
8000466a:	f0 0c 18 00 	cp.b	r12,r8
8000466e:	e0 88 00 1d 	brls	800046a8 <screen_test_fill+0xbc>
80004672:	ec 08 00 0a 	add	r10,r6,r8
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80004676:	0a 0a       	add	r10,r5
80004678:	15 aa       	ld.ub	r10,r10[0x2]
  if (x%2) {
8000467a:	1c 6a       	and	r10,lr
8000467c:	ce 61       	brne	80004648 <screen_test_fill+0x5c>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000467e:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
  if (x%2) {
80004682:	e9 da c0 01 	bfextu	r4,r10,0x0,0x1
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80004686:	a1 9a       	lsr	r10,0x1
80004688:	0e 0a       	add	r10,r7
8000468a:	58 04       	cp.w	r4,0
8000468c:	c3 f1       	brne	8000470a <screen_test_fill+0x11e>
8000468e:	f6 0a 07 04 	ld.ub	r4,r11[r10]
80004692:	e0 14 ff f0 	andl	r4,0xfff0
80004696:	f6 0a 0b 04 	st.b	r11[r10],r4
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
8000469a:	2f f9       	sub	r9,-1
8000469c:	2f f8       	sub	r8,-1
8000469e:	5c 89       	casts.h	r9
800046a0:	f0 0c 18 00 	cp.b	r12,r8
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
800046a4:	fe 9b ff e7 	brhi	80004672 <screen_test_fill+0x86>
void screen_test_fill(void) {
  u32 i;
  u32 x=0;
  u32 y=0;
  for(i=0; i<font_nglyphs; i++) {
    x = x + screen_char_squeeze(x, y, i + FONT_ASCII_OFFSET, 0xf);
800046a8:	2f f3       	sub	r3,-1
800046aa:	58 83       	cp.w	r3,8
    x++;
800046ac:	cc 31       	brne	80004632 <screen_test_fill+0x46>
800046ae:	40 09       	lddsp	r9,sp[0x0]
    if (x > NCOLS) {
800046b0:	f8 c8 ff ff 	sub	r8,r12,-1
800046b4:	10 09       	add	r9,r8
800046b6:	50 09       	stdsp	sp[0x0],r9
      x -= NCOLS;
800046b8:	e0 49 00 80 	cp.w	r9,128
      y += FONT_CHARH;
800046bc:	e0 88 00 06 	brls	800046c8 <screen_test_fill+0xdc>
// fill graphics ram with a test pattern
void screen_test_fill(void) {
  u32 i;
  u32 x=0;
  u32 y=0;
  for(i=0; i<font_nglyphs; i++) {
800046c0:	f2 c9 00 80 	sub	r9,r9,128
800046c4:	2f 82       	sub	r2,-8
800046c6:	50 09       	stdsp	sp[0x0],r9
800046c8:	40 18       	lddsp	r8,sp[0x4]
800046ca:	2f f8       	sub	r8,-1
800046cc:	50 18       	stdsp	sp[0x4],r8
800046ce:	40 29       	lddsp	r9,sp[0x8]
800046d0:	12 38       	cp.w	r8,r9
800046d2:	c9 e3       	brcs	8000460e <screen_test_fill+0x22>
800046d4:	e0 68 02 b8 	mov	r8,696
800046d8:	91 0a       	st.w	r8[0x0],r10
800046da:	e0 68 02 b4 	mov	r8,692
800046de:	91 06       	st.w	r8[0x0],r6
800046e0:	e0 68 02 bc 	mov	r8,700
    if (x > NCOLS) {
      x -= NCOLS;
      y += FONT_CHARH;
    }
  }
}
800046e4:	b0 8c       	st.b	r8[0x0],r12
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800046e6:	e0 68 02 b0 	mov	r8,688
800046ea:	30 89       	mov	r9,8
800046ec:	b0 89       	st.b	r8[0x0],r9
800046ee:	e0 68 02 bd 	mov	r8,701
800046f2:	b0 8c       	st.b	r8[0x0],r12
800046f4:	2f dd       	sub	sp,-12
800046f6:	d8 32       	popm	r0-r7,pc
800046f8:	f6 0a 07 04 	ld.ub	r4,r11[r10]
800046fc:	ea 14 ff ff 	orh	r4,0xffff
80004700:	e8 14 ff f0 	orl	r4,0xfff0
80004704:	f6 0a 0b 04 	st.b	r11[r10],r4
80004708:	ca eb       	rjmp	80004664 <screen_test_fill+0x78>
8000470a:	f6 0a 07 04 	ld.ub	r4,r11[r10]
8000470e:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80004712:	f6 0a 0b 04 	st.b	r11[r10],r4
80004716:	ca 7b       	rjmp	80004664 <screen_test_fill+0x78>

80004718 <init_oled>:
80004718:	eb cd 40 80 	pushm	r7,lr
8000471c:	20 2d       	sub	sp,8
8000471e:	d3 03       	ssrf	0x10
80004720:	33 cc       	mov	r12,60
80004722:	fe b0 ed 93 	rcall	80002248 <gpio_set_gpio_pin>
80004726:	e0 68 fb c5 	mov	r8,64453
  //  cpu_irq_disable();
  Disable_global_interrupt();
  // flip the reset pin
  gpio_set_gpio_pin(OLED_RESET_PIN);
  //  delay_ms(1);
  delay = FCPU_HZ >> 10 ; while(delay > 0) { delay--; }
8000472a:	30 09       	mov	r9,0
8000472c:	fa e9 00 00 	st.d	sp[0],r8
80004730:	fa e8 00 00 	ld.d	r8,sp[0]
80004734:	58 08       	cp.w	r8,0
80004736:	5c 29       	cpc	r9
80004738:	c0 f0       	breq	80004756 <init_oled+0x3e>
8000473a:	3f fa       	mov	r10,-1
8000473c:	3f fb       	mov	r11,-1
8000473e:	fa e8 00 00 	ld.d	r8,sp[0]
80004742:	14 08       	add	r8,r10
80004744:	f2 0b 00 49 	adc	r9,r9,r11
80004748:	fa e9 00 00 	st.d	sp[0],r8
8000474c:	fa e8 00 00 	ld.d	r8,sp[0]
80004750:	58 08       	cp.w	r8,0
80004752:	5c 29       	cpc	r9
80004754:	cf 51       	brne	8000473e <init_oled+0x26>
  gpio_clr_gpio_pin(OLED_RESET_PIN);
80004756:	33 cc       	mov	r12,60
80004758:	fe b0 ed 85 	rcall	80002262 <gpio_clr_gpio_pin>
  // delay_ms(1);
  delay=FCPU_HZ >> 10; while(delay > 0) { delay--; }
8000475c:	e0 68 fb c5 	mov	r8,64453
80004760:	30 09       	mov	r9,0
80004762:	fa e9 00 00 	st.d	sp[0],r8
80004766:	fa e8 00 00 	ld.d	r8,sp[0]
8000476a:	58 08       	cp.w	r8,0
8000476c:	5c 29       	cpc	r9
8000476e:	c0 f0       	breq	8000478c <init_oled+0x74>
80004770:	3f fa       	mov	r10,-1
80004772:	3f fb       	mov	r11,-1
80004774:	fa e8 00 00 	ld.d	r8,sp[0]
80004778:	14 08       	add	r8,r10
8000477a:	f2 0b 00 49 	adc	r9,r9,r11
8000477e:	fa e9 00 00 	st.d	sp[0],r8
80004782:	fa e8 00 00 	ld.d	r8,sp[0]
80004786:	58 08       	cp.w	r8,0
80004788:	5c 29       	cpc	r9
8000478a:	cf 51       	brne	80004774 <init_oled+0x5c>
  gpio_set_gpio_pin(OLED_RESET_PIN);
8000478c:	33 cc       	mov	r12,60
8000478e:	fe b0 ed 5d 	rcall	80002248 <gpio_set_gpio_pin>
  //delay_ms(10);
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
80004792:	e2 78 ef 14 	mov	r8,257812
80004796:	30 09       	mov	r9,0
80004798:	fa e9 00 00 	st.d	sp[0],r8
8000479c:	fa e8 00 00 	ld.d	r8,sp[0]
800047a0:	58 08       	cp.w	r8,0
800047a2:	5c 29       	cpc	r9
800047a4:	c0 f0       	breq	800047c2 <init_oled+0xaa>
800047a6:	3f fa       	mov	r10,-1
800047a8:	3f fb       	mov	r11,-1
800047aa:	fa e8 00 00 	ld.d	r8,sp[0]
800047ae:	14 08       	add	r8,r10
800047b0:	f2 0b 00 49 	adc	r9,r9,r11
800047b4:	fa e9 00 00 	st.d	sp[0],r8
800047b8:	fa e8 00 00 	ld.d	r8,sp[0]
800047bc:	58 08       	cp.w	r8,0
800047be:	5c 29       	cpc	r9
800047c0:	cf 51       	brne	800047aa <init_oled+0x92>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800047c2:	fe 7c 1c 00 	mov	r12,-58368
800047c6:	fe b0 f1 64 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800047ca:	33 bc       	mov	r12,59
800047cc:	fe b0 ed 4b 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800047d0:	e0 6b 00 ae 	mov	r11,174
800047d4:	fe 7c 1c 00 	mov	r12,-58368
800047d8:	fe b0 f1 6e 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800047dc:	fe 7c 1c 00 	mov	r12,-58368
800047e0:	fe b0 f1 5b 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800047e4:	fe 7c 1c 00 	mov	r12,-58368
800047e8:	fe b0 f1 53 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800047ec:	33 bc       	mov	r12,59
800047ee:	fe b0 ed 3a 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800047f2:	e0 6b 00 b3 	mov	r11,179
800047f6:	fe 7c 1c 00 	mov	r12,-58368
800047fa:	fe b0 f1 5d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800047fe:	fe 7c 1c 00 	mov	r12,-58368
80004802:	fe b0 f1 4a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004806:	fe 7c 1c 00 	mov	r12,-58368
8000480a:	fe b0 f1 42 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000480e:	33 bc       	mov	r12,59
80004810:	fe b0 ed 29 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004814:	e0 6b 00 91 	mov	r11,145
80004818:	fe 7c 1c 00 	mov	r12,-58368
8000481c:	fe b0 f1 4c 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004820:	fe 7c 1c 00 	mov	r12,-58368
80004824:	fe b0 f1 39 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004828:	fe 7c 1c 00 	mov	r12,-58368
8000482c:	fe b0 f1 31 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004830:	33 bc       	mov	r12,59
80004832:	fe b0 ed 18 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004836:	e0 6b 00 a8 	mov	r11,168
8000483a:	fe 7c 1c 00 	mov	r12,-58368
8000483e:	fe b0 f1 3b 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004842:	fe 7c 1c 00 	mov	r12,-58368
80004846:	fe b0 f1 28 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000484a:	fe 7c 1c 00 	mov	r12,-58368
8000484e:	fe b0 f1 20 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004852:	33 bc       	mov	r12,59
80004854:	fe b0 ed 07 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004858:	33 fb       	mov	r11,63
8000485a:	fe 7c 1c 00 	mov	r12,-58368
8000485e:	fe b0 f1 2b 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004862:	fe 7c 1c 00 	mov	r12,-58368
80004866:	fe b0 f1 18 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000486a:	fe 7c 1c 00 	mov	r12,-58368
8000486e:	fe b0 f1 10 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004872:	33 bc       	mov	r12,59
80004874:	fe b0 ec f7 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004878:	e0 6b 00 86 	mov	r11,134
8000487c:	fe 7c 1c 00 	mov	r12,-58368
80004880:	fe b0 f1 1a 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004884:	fe 7c 1c 00 	mov	r12,-58368
80004888:	fe b0 f1 07 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000488c:	fe 7c 1c 00 	mov	r12,-58368
80004890:	fe b0 f0 ff 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004894:	33 bc       	mov	r12,59
80004896:	fe b0 ec e6 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000489a:	e0 6b 00 81 	mov	r11,129
8000489e:	fe 7c 1c 00 	mov	r12,-58368
800048a2:	fe b0 f1 09 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800048a6:	fe 7c 1c 00 	mov	r12,-58368
800048aa:	fe b0 f0 f6 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800048ae:	fe 7c 1c 00 	mov	r12,-58368
800048b2:	fe b0 f0 ee 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800048b6:	33 bc       	mov	r12,59
800048b8:	fe b0 ec d5 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800048bc:	37 fb       	mov	r11,127
800048be:	fe 7c 1c 00 	mov	r12,-58368
800048c2:	fe b0 f0 f9 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800048c6:	fe 7c 1c 00 	mov	r12,-58368
800048ca:	fe b0 f0 e6 	rcall	80002a96 <usart_spi_unselectChip>
  write_command(0xA8);	// multiplex
  write_command(0x3F);
  write_command(0x86);	// full current range
  write_command(0x81);	// contrast to full
  write_command(0x7F);
  write_command(0xB2);	// frame freq
800048ce:	e0 6c 00 b2 	mov	r12,178
800048d2:	c5 be       	rcall	80004588 <write_command>
800048d4:	35 1c       	mov	r12,81
  write_command(0x51);
800048d6:	c5 9e       	rcall	80004588 <write_command>
800048d8:	e0 6c 00 a8 	mov	r12,168
  write_command(0xA8);	// multiplex
800048dc:	c5 6e       	rcall	80004588 <write_command>
800048de:	33 fc       	mov	r12,63
800048e0:	c5 4e       	rcall	80004588 <write_command>
800048e2:	e0 6c 00 bc 	mov	r12,188
  write_command(0x3F);
800048e6:	c5 1e       	rcall	80004588 <write_command>
800048e8:	31 0c       	mov	r12,16
  write_command(0xBC);	// precharge
800048ea:	c4 fe       	rcall	80004588 <write_command>
800048ec:	e0 6c 00 be 	mov	r12,190
800048f0:	c4 ce       	rcall	80004588 <write_command>
  write_command(0x10);
800048f2:	31 cc       	mov	r12,28
800048f4:	c4 ae       	rcall	80004588 <write_command>
800048f6:	e0 6c 00 ad 	mov	r12,173
  write_command(0xBE);	// voltage
800048fa:	c4 7e       	rcall	80004588 <write_command>
800048fc:	30 2c       	mov	r12,2
800048fe:	c4 5e       	rcall	80004588 <write_command>
  write_command(0x1C);
80004900:	e0 6c 00 a0 	mov	r12,160
80004904:	c4 2e       	rcall	80004588 <write_command>
  write_command(0xAD);	// dcdc
80004906:	35 0c       	mov	r12,80
80004908:	c4 0e       	rcall	80004588 <write_command>
8000490a:	e0 6c 00 a1 	mov	r12,161
  write_command(0x02);
8000490e:	c3 de       	rcall	80004588 <write_command>
80004910:	30 0c       	mov	r12,0
80004912:	c3 be       	rcall	80004588 <write_command>
  write_command(0xA0);	// remap
80004914:	e0 6c 00 a2 	mov	r12,162
80004918:	c3 8e       	rcall	80004588 <write_command>
8000491a:	fe 7c 1c 00 	mov	r12,-58368
  write_command(0x50);
8000491e:	fe b0 f0 b8 	rcall	80002a8e <usart_spi_selectChip>
  write_command(0xA1);	// start
80004922:	33 bc       	mov	r12,59
80004924:	fe b0 ec 9f 	rcall	80002262 <gpio_clr_gpio_pin>
80004928:	34 cb       	mov	r11,76
  write_command(0x0);
8000492a:	fe 7c 1c 00 	mov	r12,-58368
8000492e:	fe b0 f0 c3 	rcall	80002ab4 <usart_putchar>
  write_command(0xA2);	// offset
80004932:	fe 7c 1c 00 	mov	r12,-58368
80004936:	fe b0 f0 b0 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000493a:	fe 7c 1c 00 	mov	r12,-58368
8000493e:	fe b0 f0 a8 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004942:	33 bc       	mov	r12,59
80004944:	fe b0 ec 8f 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004948:	e0 6b 00 b1 	mov	r11,177
8000494c:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
80004950:	fe b0 f0 b2 	rcall	80002ab4 <usart_putchar>
80004954:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004958:	fe b0 f0 9f 	rcall	80002a96 <usart_spi_unselectChip>
8000495c:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004960:	fe b0 f0 97 	rcall	80002a8e <usart_spi_selectChip>
80004964:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
80004966:	fe b0 ec 7e 	rcall	80002262 <gpio_clr_gpio_pin>
8000496a:	35 5b       	mov	r11,85
8000496c:	fe 7c 1c 00 	mov	r12,-58368
80004970:	fe b0 f0 a2 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004974:	fe 7c 1c 00 	mov	r12,-58368
80004978:	fe b0 f0 8f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000497c:	fe 7c 1c 00 	mov	r12,-58368
80004980:	fe b0 f0 87 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004984:	33 bc       	mov	r12,59
80004986:	fe b0 ec 6e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000498a:	e0 6b 00 b4 	mov	r11,180
8000498e:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
80004992:	fe b0 f0 91 	rcall	80002ab4 <usart_putchar>
80004996:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000499a:	fe b0 f0 7e 	rcall	80002a96 <usart_spi_unselectChip>
8000499e:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800049a2:	fe b0 f0 76 	rcall	80002a8e <usart_spi_selectChip>
800049a6:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
800049a8:	fe b0 ec 5d 	rcall	80002262 <gpio_clr_gpio_pin>
800049ac:	30 2b       	mov	r11,2
800049ae:	fe 7c 1c 00 	mov	r12,-58368
800049b2:	fe b0 f0 81 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800049b6:	fe 7c 1c 00 	mov	r12,-58368
800049ba:	fe b0 f0 6e 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800049be:	fe 7c 1c 00 	mov	r12,-58368
800049c2:	fe b0 f0 66 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800049c6:	33 bc       	mov	r12,59
800049c8:	fe b0 ec 4d 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800049cc:	e0 6b 00 b0 	mov	r11,176
800049d0:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
800049d4:	fe b0 f0 70 	rcall	80002ab4 <usart_putchar>
800049d8:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800049dc:	fe b0 f0 5d 	rcall	80002a96 <usart_spi_unselectChip>
800049e0:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800049e4:	fe b0 f0 55 	rcall	80002a8e <usart_spi_selectChip>
800049e8:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
800049ea:	fe b0 ec 3c 	rcall	80002262 <gpio_clr_gpio_pin>
800049ee:	32 8b       	mov	r11,40
800049f0:	fe 7c 1c 00 	mov	r12,-58368
800049f4:	fe b0 f0 60 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800049f8:	fe 7c 1c 00 	mov	r12,-58368
800049fc:	fe b0 f0 4d 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004a00:	fe 7c 1c 00 	mov	r12,-58368
80004a04:	fe b0 f0 45 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004a08:	33 bc       	mov	r12,59
80004a0a:	fe b0 ec 2c 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004a0e:	e0 6b 00 bf 	mov	r11,191
80004a12:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
80004a16:	fe b0 f0 4f 	rcall	80002ab4 <usart_putchar>
80004a1a:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004a1e:	fe b0 f0 3c 	rcall	80002a96 <usart_spi_unselectChip>
80004a22:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004a26:	fe b0 f0 34 	rcall	80002a8e <usart_spi_selectChip>
80004a2a:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
80004a2c:	fe b0 ec 1b 	rcall	80002262 <gpio_clr_gpio_pin>
80004a30:	30 fb       	mov	r11,15
80004a32:	fe 7c 1c 00 	mov	r12,-58368
80004a36:	fe b0 f0 3f 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004a3a:	fe 7c 1c 00 	mov	r12,-58368
80004a3e:	fe b0 f0 2c 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004a42:	fe 7c 1c 00 	mov	r12,-58368
80004a46:	fe b0 f0 24 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004a4a:	33 bc       	mov	r12,59
80004a4c:	fe b0 ec 0b 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004a50:	e0 6b 00 a4 	mov	r11,164
80004a54:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
80004a58:	fe b0 f0 2e 	rcall	80002ab4 <usart_putchar>
80004a5c:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004a60:	fe b0 f0 1b 	rcall	80002a96 <usart_spi_unselectChip>
80004a64:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004a68:	fe b0 f0 13 	rcall	80002a8e <usart_spi_selectChip>
80004a6c:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
80004a6e:	fe b0 eb fa 	rcall	80002262 <gpio_clr_gpio_pin>
80004a72:	e0 6b 00 b8 	mov	r11,184
80004a76:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
80004a7a:	fe b0 f0 1d 	rcall	80002ab4 <usart_putchar>
80004a7e:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004a82:	fe b0 f0 0a 	rcall	80002a96 <usart_spi_unselectChip>
80004a86:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004a8a:	fe b0 f0 02 	rcall	80002a8e <usart_spi_selectChip>
80004a8e:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
80004a90:	fe b0 eb e9 	rcall	80002262 <gpio_clr_gpio_pin>
80004a94:	30 1b       	mov	r11,1
80004a96:	fe 7c 1c 00 	mov	r12,-58368
80004a9a:	fe b0 f0 0d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004a9e:	fe 7c 1c 00 	mov	r12,-58368
80004aa2:	fe b0 ef fa 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004aa6:	fe 7c 1c 00 	mov	r12,-58368
80004aaa:	fe b0 ef f2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004aae:	33 bc       	mov	r12,59
80004ab0:	fe b0 eb d9 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004ab4:	31 1b       	mov	r11,17
80004ab6:	fe 7c 1c 00 	mov	r12,-58368
80004aba:	fe b0 ef fd 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004abe:	fe 7c 1c 00 	mov	r12,-58368
80004ac2:	fe b0 ef ea 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004ac6:	fe 7c 1c 00 	mov	r12,-58368
80004aca:	fe b0 ef e2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004ace:	33 bc       	mov	r12,59
80004ad0:	fe b0 eb c9 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004ad4:	32 2b       	mov	r11,34
80004ad6:	fe 7c 1c 00 	mov	r12,-58368
80004ada:	fe b0 ef ed 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004ade:	fe 7c 1c 00 	mov	r12,-58368
80004ae2:	fe b0 ef da 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004ae6:	fe 7c 1c 00 	mov	r12,-58368
80004aea:	fe b0 ef d2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004aee:	33 bc       	mov	r12,59
80004af0:	fe b0 eb b9 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004af4:	33 2b       	mov	r11,50
80004af6:	fe 7c 1c 00 	mov	r12,-58368
80004afa:	fe b0 ef dd 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004afe:	fe 7c 1c 00 	mov	r12,-58368
80004b02:	fe b0 ef ca 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004b06:	fe 7c 1c 00 	mov	r12,-58368
80004b0a:	fe b0 ef c2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004b0e:	33 bc       	mov	r12,59
80004b10:	fe b0 eb a9 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004b14:	34 3b       	mov	r11,67
80004b16:	fe 7c 1c 00 	mov	r12,-58368
80004b1a:	fe b0 ef cd 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004b1e:	fe 7c 1c 00 	mov	r12,-58368
80004b22:	fe b0 ef ba 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004b26:	fe 7c 1c 00 	mov	r12,-58368
80004b2a:	fe b0 ef b2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004b2e:	33 bc       	mov	r12,59
80004b30:	fe b0 eb 99 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004b34:	35 4b       	mov	r11,84
80004b36:	fe 7c 1c 00 	mov	r12,-58368
80004b3a:	fe b0 ef bd 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004b3e:	fe 7c 1c 00 	mov	r12,-58368
80004b42:	fe b0 ef aa 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004b46:	fe 7c 1c 00 	mov	r12,-58368
80004b4a:	fe b0 ef a2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004b4e:	33 bc       	mov	r12,59
80004b50:	fe b0 eb 89 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004b54:	36 5b       	mov	r11,101
80004b56:	fe 7c 1c 00 	mov	r12,-58368
80004b5a:	fe b0 ef ad 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004b5e:	fe 7c 1c 00 	mov	r12,-58368
80004b62:	fe b0 ef 9a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004b66:	fe 7c 1c 00 	mov	r12,-58368
80004b6a:	fe b0 ef 92 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004b6e:	33 bc       	mov	r12,59
80004b70:	fe b0 eb 79 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004b74:	37 6b       	mov	r11,118
80004b76:	fe 7c 1c 00 	mov	r12,-58368
80004b7a:	fe b0 ef 9d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004b7e:	fe 7c 1c 00 	mov	r12,-58368
80004b82:	fe b0 ef 8a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004b86:	fe 7c 1c 00 	mov	r12,-58368
80004b8a:	fe b0 ef 82 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004b8e:	33 bc       	mov	r12,59
80004b90:	fe b0 eb 69 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004b94:	31 5b       	mov	r11,21
80004b96:	fe 7c 1c 00 	mov	r12,-58368
80004b9a:	fe b0 ef 8d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004b9e:	fe 7c 1c 00 	mov	r12,-58368
80004ba2:	fe b0 ef 7a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004ba6:	fe 7c 1c 00 	mov	r12,-58368
80004baa:	fe b0 ef 72 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004bae:	33 bc       	mov	r12,59
80004bb0:	fe b0 eb 59 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004bb4:	30 0b       	mov	r11,0
80004bb6:	fe 7c 1c 00 	mov	r12,-58368
80004bba:	fe b0 ef 7d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004bbe:	fe 7c 1c 00 	mov	r12,-58368
80004bc2:	fe b0 ef 6a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004bc6:	fe 7c 1c 00 	mov	r12,-58368
80004bca:	fe b0 ef 62 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004bce:	33 bc       	mov	r12,59
80004bd0:	fe b0 eb 49 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004bd4:	33 fb       	mov	r11,63
80004bd6:	fe 7c 1c 00 	mov	r12,-58368
80004bda:	fe b0 ef 6d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004bde:	fe 7c 1c 00 	mov	r12,-58368
80004be2:	fe b0 ef 5a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004be6:	fe 7c 1c 00 	mov	r12,-58368
80004bea:	fe b0 ef 52 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004bee:	33 bc       	mov	r12,59
80004bf0:	fe b0 eb 39 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004bf4:	37 5b       	mov	r11,117
80004bf6:	fe 7c 1c 00 	mov	r12,-58368
80004bfa:	fe b0 ef 5d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004bfe:	fe 7c 1c 00 	mov	r12,-58368
80004c02:	fe b0 ef 4a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004c06:	fe 7c 1c 00 	mov	r12,-58368
80004c0a:	fe b0 ef 42 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004c0e:	33 bc       	mov	r12,59
80004c10:	fe b0 eb 29 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004c14:	30 0b       	mov	r11,0
80004c16:	fe 7c 1c 00 	mov	r12,-58368
80004c1a:	fe b0 ef 4d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004c1e:	fe 7c 1c 00 	mov	r12,-58368
80004c22:	fe b0 ef 3a 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004c26:	fe 7c 1c 00 	mov	r12,-58368
80004c2a:	fe b0 ef 32 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004c2e:	33 bc       	mov	r12,59
80004c30:	fe b0 eb 19 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004c34:	33 fb       	mov	r11,63
80004c36:	fe 7c 1c 00 	mov	r12,-58368
80004c3a:	fe b0 ef 3d 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004c3e:	fe 7c 1c 00 	mov	r12,-58368
80004c42:	30 07       	mov	r7,0
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004c44:	fe b0 ef 29 	rcall	80002a96 <usart_spi_unselectChip>
80004c48:	fe 7c 1c 00 	mov	r12,-58368
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004c4c:	fe b0 ef 21 	rcall	80002a8e <usart_spi_selectChip>
80004c50:	33 bc       	mov	r12,59
  usart_putchar(OLED_USART_SPI, c);
80004c52:	fe b0 ea fb 	rcall	80002248 <gpio_set_gpio_pin>
80004c56:	30 0b       	mov	r11,0
80004c58:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
80004c5c:	fe b0 ef 2c 	rcall	80002ab4 <usart_putchar>
80004c60:	fe 7c 1c 00 	mov	r12,-58368
80004c64:	2f f7       	sub	r7,-1

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004c66:	fe b0 ef 18 	rcall	80002a96 <usart_spi_unselectChip>
80004c6a:	e0 47 10 00 	cp.w	r7,4096
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80004c6e:	ce d1       	brne	80004c48 <init_oled+0x530>
80004c70:	fe 7c 1c 00 	mov	r12,-58368
  usart_putchar(OLED_USART_SPI, c);
80004c74:	fe b0 ef 0d 	rcall	80002a8e <usart_spi_selectChip>
80004c78:	33 bc       	mov	r12,59
80004c7a:	fe b0 ea f4 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_spi_unselectChip(OLED_USART_SPI);
80004c7e:	e0 6b 00 af 	mov	r11,175
80004c82:	fe 7c 1c 00 	mov	r12,-58368
80004c86:	fe b0 ef 17 	rcall	80002ab4 <usart_putchar>
  write_command(0x75);
  write_command(0);
  write_command(63);
		
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
80004c8a:	fe 7c 1c 00 	mov	r12,-58368
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004c8e:	fe b0 ef 04 	rcall	80002a96 <usart_spi_unselectChip>
80004c92:	e2 78 ef 14 	mov	r8,257812
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004c96:	30 09       	mov	r9,0
80004c98:	fa e9 00 00 	st.d	sp[0],r8
  usart_putchar(OLED_USART_SPI, c);
80004c9c:	fa e8 00 00 	ld.d	r8,sp[0]
80004ca0:	58 08       	cp.w	r8,0
80004ca2:	5c 29       	cpc	r9
80004ca4:	c0 f0       	breq	80004cc2 <init_oled+0x5aa>
80004ca6:	3f fa       	mov	r10,-1
  usart_spi_unselectChip(OLED_USART_SPI);
80004ca8:	3f fb       	mov	r11,-1
80004caa:	fa e8 00 00 	ld.d	r8,sp[0]
80004cae:	14 08       	add	r8,r10
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
  write_command(0xAF);	// on

  //  delay_ms(10) 
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
80004cb0:	f2 0b 00 49 	adc	r9,r9,r11
80004cb4:	fa e9 00 00 	st.d	sp[0],r8
80004cb8:	fa e8 00 00 	ld.d	r8,sp[0]
80004cbc:	58 08       	cp.w	r8,0
80004cbe:	5c 29       	cpc	r9
80004cc0:	cf 51       	brne	80004caa <init_oled+0x592>
80004cc2:	d5 03       	csrf	0x10
80004cc4:	2f ed       	sub	sp,-8
80004cc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cca:	d7 03       	nop

80004ccc <process_sw>:
  { kEventSwitchDown3, kEventSwitchUp3 },
  { kEventSwitchDown4, kEventSwitchUp4 },
};

// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
80004ccc:	eb cd 40 80 	pushm	r7,lr
80004cd0:	20 2d       	sub	sp,8
  event_t e;   
  e.eventType = kSwitchEvents[swIdx][gpio_get_pin_value(kSwitchPins[swIdx])];
80004cd2:	fe c8 f2 d2 	sub	r8,pc,-3374
80004cd6:	18 97       	mov	r7,r12
80004cd8:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80004cdc:	fe b0 ea ab 	rcall	80002232 <gpio_get_pin_value>
80004ce0:	fe c8 f3 08 	sub	r8,pc,-3320
80004ce4:	f8 07 00 1c 	add	r12,r12,r7<<0x1
  post_event(&e);
80004ce8:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
80004cec:	1a 9c       	mov	r12,sp
80004cee:	50 08       	stdsp	sp[0x0],r8
}
80004cf0:	fe b0 f8 58 	rcall	80003da0 <post_event>
80004cf4:	2f ed       	sub	sp,-8
80004cf6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cfa:	d7 03       	nop

80004cfc <process_timers>:
}


// process the list of timers.
// called by client at desired tick interval.
void process_timers( void ) {
80004cfc:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d00:	e0 67 12 c0 	mov	r7,4800
    if ( t == 0 ) { continue; }
80004d04:	6e 06       	ld.w	r6,r7[0x0]
80004d06:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d08:	c0 80       	breq	80004d18 <process_timers+0x1c>
80004d0a:	6c 28       	ld.w	r8,r6[0x8]
80004d0c:	58 08       	cp.w	r8,0
80004d0e:	e0 8a 00 05 	brle	80004d18 <process_timers+0x1c>
      // time remaining, decrement tick counter
      t->timeout--;
80004d12:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d14:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d16:	c5 50       	breq	80004dc0 <process_timers+0xc4>
    if ( t == 0 ) { continue; }
80004d18:	6e 16       	ld.w	r6,r7[0x4]
80004d1a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d1c:	c0 80       	breq	80004d2c <process_timers+0x30>
80004d1e:	6c 28       	ld.w	r8,r6[0x8]
80004d20:	58 08       	cp.w	r8,0
80004d22:	e0 8a 00 05 	brle	80004d2c <process_timers+0x30>
      // time remaining, decrement tick counter
      t->timeout--;
80004d26:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d28:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d2a:	c5 90       	breq	80004ddc <process_timers+0xe0>
    if ( t == 0 ) { continue; }
80004d2c:	6e 26       	ld.w	r6,r7[0x8]
80004d2e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d30:	c0 80       	breq	80004d40 <process_timers+0x44>
80004d32:	6c 28       	ld.w	r8,r6[0x8]
80004d34:	58 08       	cp.w	r8,0
80004d36:	e0 8a 00 05 	brle	80004d40 <process_timers+0x44>
      // time remaining, decrement tick counter
      t->timeout--;
80004d3a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d3c:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d3e:	c5 d0       	breq	80004df8 <process_timers+0xfc>
    if ( t == 0 ) { continue; }
80004d40:	6e 36       	ld.w	r6,r7[0xc]
80004d42:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d44:	c0 80       	breq	80004d54 <process_timers+0x58>
80004d46:	6c 28       	ld.w	r8,r6[0x8]
80004d48:	58 08       	cp.w	r8,0
80004d4a:	e0 8a 00 05 	brle	80004d54 <process_timers+0x58>
      // time remaining, decrement tick counter
      t->timeout--;
80004d4e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d50:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d52:	c6 10       	breq	80004e14 <process_timers+0x118>
    if ( t == 0 ) { continue; }
80004d54:	6e 46       	ld.w	r6,r7[0x10]
80004d56:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d58:	c0 80       	breq	80004d68 <process_timers+0x6c>
80004d5a:	6c 28       	ld.w	r8,r6[0x8]
80004d5c:	58 08       	cp.w	r8,0
80004d5e:	e0 8a 00 05 	brle	80004d68 <process_timers+0x6c>
      // time remaining, decrement tick counter
      t->timeout--;
80004d62:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d64:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d66:	c6 50       	breq	80004e30 <process_timers+0x134>
    if ( t == 0 ) { continue; }
80004d68:	6e 56       	ld.w	r6,r7[0x14]
80004d6a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d6c:	c0 80       	breq	80004d7c <process_timers+0x80>
80004d6e:	6c 28       	ld.w	r8,r6[0x8]
80004d70:	58 08       	cp.w	r8,0
80004d72:	e0 8a 00 05 	brle	80004d7c <process_timers+0x80>
      // time remaining, decrement tick counter
      t->timeout--;
80004d76:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d78:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d7a:	c6 90       	breq	80004e4c <process_timers+0x150>
    if ( t == 0 ) { continue; }
80004d7c:	6e 66       	ld.w	r6,r7[0x18]
80004d7e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d80:	c0 80       	breq	80004d90 <process_timers+0x94>
80004d82:	6c 28       	ld.w	r8,r6[0x8]
80004d84:	58 08       	cp.w	r8,0
80004d86:	e0 8a 00 05 	brle	80004d90 <process_timers+0x94>
      // time remaining, decrement tick counter
      t->timeout--;
80004d8a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004d8c:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004d8e:	c6 d0       	breq	80004e68 <process_timers+0x16c>
    if ( t == 0 ) { continue; }
80004d90:	6e 76       	ld.w	r6,r7[0x1c]
80004d92:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004d94:	c0 80       	breq	80004da4 <process_timers+0xa8>
80004d96:	6c 28       	ld.w	r8,r6[0x8]
80004d98:	58 08       	cp.w	r8,0
80004d9a:	e0 8a 00 05 	brle	80004da4 <process_timers+0xa8>
      // time remaining, decrement tick counter
      t->timeout--;
80004d9e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004da0:	8d 28       	st.w	r6[0x8],r8
80004da2:	c0 30       	breq	80004da8 <process_timers+0xac>
80004da4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
80004da8:	6c 48       	ld.w	r8,r6[0x10]
80004daa:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004dac:	c0 30       	breq	80004db2 <process_timers+0xb6>
80004dae:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004db0:	5d 18       	icall	r8
80004db2:	6c 08       	ld.w	r8,r6[0x0]
80004db4:	58 08       	cp.w	r8,0
	  t->timeout = t->timeoutReload;
80004db6:	c6 70       	breq	80004e84 <process_timers+0x188>
80004db8:	6c 38       	ld.w	r8,r6[0xc]
80004dba:	8d 28       	st.w	r6[0x8],r8
80004dbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004dc0:	6c 48       	ld.w	r8,r6[0x10]
80004dc2:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004dc4:	c0 30       	breq	80004dca <process_timers+0xce>
80004dc6:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004dc8:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004dca:	6c 08       	ld.w	r8,r6[0x0]
80004dcc:	58 08       	cp.w	r8,0
80004dce:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004dd2:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004dd6:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004dda:	c9 fb       	rjmp	80004d18 <process_timers+0x1c>
80004ddc:	6c 48       	ld.w	r8,r6[0x10]
80004dde:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004de0:	c0 30       	breq	80004de6 <process_timers+0xea>
80004de2:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004de4:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004de6:	6c 08       	ld.w	r8,r6[0x0]
80004de8:	58 08       	cp.w	r8,0
80004dea:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004dee:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004df2:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004df6:	c9 bb       	rjmp	80004d2c <process_timers+0x30>
80004df8:	6c 48       	ld.w	r8,r6[0x10]
80004dfa:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004dfc:	c0 30       	breq	80004e02 <process_timers+0x106>
80004dfe:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004e00:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004e02:	6c 08       	ld.w	r8,r6[0x0]
80004e04:	58 08       	cp.w	r8,0
80004e06:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004e0a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004e0e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004e12:	c9 7b       	rjmp	80004d40 <process_timers+0x44>
80004e14:	6c 48       	ld.w	r8,r6[0x10]
80004e16:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004e18:	c0 30       	breq	80004e1e <process_timers+0x122>
80004e1a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004e1c:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004e1e:	6c 08       	ld.w	r8,r6[0x0]
80004e20:	58 08       	cp.w	r8,0
80004e22:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004e26:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004e2a:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004e2e:	c9 3b       	rjmp	80004d54 <process_timers+0x58>
80004e30:	6c 48       	ld.w	r8,r6[0x10]
80004e32:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004e34:	c0 30       	breq	80004e3a <process_timers+0x13e>
80004e36:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004e38:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004e3a:	6c 08       	ld.w	r8,r6[0x0]
80004e3c:	58 08       	cp.w	r8,0
80004e3e:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004e42:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004e46:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004e4a:	c8 fb       	rjmp	80004d68 <process_timers+0x6c>
80004e4c:	6c 48       	ld.w	r8,r6[0x10]
80004e4e:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004e50:	c0 30       	breq	80004e56 <process_timers+0x15a>
80004e52:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004e54:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004e56:	6c 08       	ld.w	r8,r6[0x0]
80004e58:	58 08       	cp.w	r8,0
80004e5a:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004e5e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004e62:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004e66:	c8 bb       	rjmp	80004d7c <process_timers+0x80>
80004e68:	6c 48       	ld.w	r8,r6[0x10]
80004e6a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004e6c:	c0 30       	breq	80004e72 <process_timers+0x176>
80004e6e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004e70:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004e72:	6c 08       	ld.w	r8,r6[0x0]
80004e74:	58 08       	cp.w	r8,0
80004e76:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004e7a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004e7e:	ed f8 1a 02 	st.wne	r6[0x8],r8
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004e82:	c8 7b       	rjmp	80004d90 <process_timers+0x94>
80004e84:	8f 78       	st.w	r7[0x1c],r8
80004e86:	c8 fb       	rjmp	80004da4 <process_timers+0xa8>

80004e88 <set_timer>:
80004e88:	eb cd 40 e0 	pushm	r5-r7,lr
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
80004e8c:	58 09       	cp.w	r9,0
80004e8e:	c6 10       	breq	80004f50 <set_timer+0xc8>

// find a timer given a tag and optional callback
static swTimer_t* find_timer( timerCallback callback, int tag ) {
  int k;
  swTimer_t* t;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
80004e90:	e1 be 00 00 	mfsr	lr,0x0
 * \return True if interrupt level is enabled.
 */
static inline bool cpu_irq_level_is_enabled_flags(irqflags_t flags,
		uint32_t level)
{
	return !(flags & (1 << level));
80004e94:	ee 1e 00 04 	eorh	lr,0x4
80004e98:	ed de c2 41 	bfextu	r6,lr,0x12,0x1

  Disable_interrupt_level( TIMER_INT_LEVEL );
80004e9c:	d3 23       	ssrf	0x12

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004e9e:	e0 6e 12 c0 	mov	lr,4800
    if ( t == NULL ) {
80004ea2:	7c 07       	ld.w	r7,lr[0x0]
80004ea4:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004ea6:	c0 40       	breq	80004eae <set_timer+0x26>
80004ea8:	6e 15       	ld.w	r5,r7[0x4]
80004eaa:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004eac:	c5 40       	breq	80004f54 <set_timer+0xcc>
    if ( t == NULL ) {
80004eae:	7c 17       	ld.w	r7,lr[0x4]
80004eb0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004eb2:	c0 40       	breq	80004eba <set_timer+0x32>
80004eb4:	6e 15       	ld.w	r5,r7[0x4]
80004eb6:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004eb8:	c5 60       	breq	80004f64 <set_timer+0xdc>
    if ( t == NULL ) {
80004eba:	7c 27       	ld.w	r7,lr[0x8]
80004ebc:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004ebe:	c0 40       	breq	80004ec6 <set_timer+0x3e>
80004ec0:	6e 15       	ld.w	r5,r7[0x4]
80004ec2:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004ec4:	c5 60       	breq	80004f70 <set_timer+0xe8>
    if ( t == NULL ) {
80004ec6:	7c 37       	ld.w	r7,lr[0xc]
80004ec8:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004eca:	c0 40       	breq	80004ed2 <set_timer+0x4a>
80004ecc:	6e 15       	ld.w	r5,r7[0x4]
80004ece:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004ed0:	c5 40       	breq	80004f78 <set_timer+0xf0>
    if ( t == NULL ) {
80004ed2:	7c 47       	ld.w	r7,lr[0x10]
80004ed4:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004ed6:	c0 40       	breq	80004ede <set_timer+0x56>
80004ed8:	6e 15       	ld.w	r5,r7[0x4]
80004eda:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004edc:	c5 20       	breq	80004f80 <set_timer+0xf8>
    if ( t == NULL ) {
80004ede:	7c 57       	ld.w	r7,lr[0x14]
80004ee0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004ee2:	c0 40       	breq	80004eea <set_timer+0x62>
80004ee4:	6e 15       	ld.w	r5,r7[0x4]
80004ee6:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004ee8:	c5 00       	breq	80004f88 <set_timer+0x100>
    if ( t == NULL ) {
80004eea:	7c 67       	ld.w	r7,lr[0x18]
80004eec:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004eee:	c0 40       	breq	80004ef6 <set_timer+0x6e>
80004ef0:	6e 15       	ld.w	r5,r7[0x4]
80004ef2:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004ef4:	c4 e0       	breq	80004f90 <set_timer+0x108>
    if ( t == NULL ) {
80004ef6:	7c 77       	ld.w	r7,lr[0x1c]
80004ef8:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004efa:	c0 40       	breq	80004f02 <set_timer+0x7a>
80004efc:	6e 15       	ld.w	r5,r7[0x4]
80004efe:	0a 3b       	cp.w	r11,r5
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
80004f00:	c4 c0       	breq	80004f98 <set_timer+0x110>
80004f02:	58 06       	cp.w	r6,0
   
  if ( find_timer( callback, tag ) != NULL ) {
    return false;
  }

  t->callback = callback;
80004f04:	c3 41       	brne	80004f6c <set_timer+0xe4>
  t->tag = tag;
80004f06:	99 49       	st.w	r12[0x10],r9
  t->timeout = ticks;
  t->fperiodic = fPeriodic;
80004f08:	99 1b       	st.w	r12[0x4],r11
  t->timeoutReload = ticks;
80004f0a:	99 08       	st.w	r12[0x0],r8
    return false;
  }

  t->callback = callback;
  t->tag = tag;
  t->timeout = ticks;
80004f0c:	99 3a       	st.w	r12[0xc],r10
}

// Add timer to pointer array. Finds first empty slot.
static bool add_timer( swTimer_t* newTimer) {
  int k;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
80004f0e:	99 2a       	st.w	r12[0x8],r10
80004f10:	e1 ba 00 00 	mfsr	r10,0x0

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80004f14:	d3 23       	ssrf	0x12
80004f16:	e0 68 12 c0 	mov	r8,4800
80004f1a:	7c 09       	ld.w	r9,lr[0x0]
80004f1c:	58 09       	cp.w	r9,0
80004f1e:	c4 80       	breq	80004fae <set_timer+0x126>
80004f20:	70 19       	ld.w	r9,r8[0x4]
80004f22:	58 09       	cp.w	r9,0
80004f24:	c4 40       	breq	80004fac <set_timer+0x124>
80004f26:	70 29       	ld.w	r9,r8[0x8]
80004f28:	58 09       	cp.w	r9,0
80004f2a:	c4 70       	breq	80004fb8 <set_timer+0x130>
80004f2c:	70 39       	ld.w	r9,r8[0xc]
80004f2e:	58 09       	cp.w	r9,0
80004f30:	c4 60       	breq	80004fbc <set_timer+0x134>
80004f32:	70 49       	ld.w	r9,r8[0x10]
80004f34:	58 09       	cp.w	r9,0
80004f36:	c4 50       	breq	80004fc0 <set_timer+0x138>
80004f38:	70 59       	ld.w	r9,r8[0x14]
80004f3a:	58 09       	cp.w	r9,0
80004f3c:	c4 40       	breq	80004fc4 <set_timer+0x13c>
80004f3e:	70 69       	ld.w	r9,r8[0x18]
80004f40:	58 09       	cp.w	r9,0
80004f42:	c4 30       	breq	80004fc8 <set_timer+0x140>
80004f44:	70 78       	ld.w	r8,r8[0x1c]
      Enable_interrupt_level( TIMER_INT_LEVEL );
      return true;
    }
  }

  if (fReenableInterrupts) {
80004f46:	58 08       	cp.w	r8,0
80004f48:	c4 20       	breq	80004fcc <set_timer+0x144>
80004f4a:	e6 1a 00 04 	andh	r10,0x4,COH
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004f4e:	c2 b0       	breq	80004fa4 <set_timer+0x11c>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80004f50:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004f54:	6e 47       	ld.w	r7,r7[0x10]
	  // tag and callback both specified and matched
	  if (fReenableInterrupts)
80004f56:	0e 39       	cp.w	r9,r7
80004f58:	ca b1       	brne	80004eae <set_timer+0x26>
	    Enable_interrupt_level( TIMER_INT_LEVEL );
80004f5a:	58 06       	cp.w	r6,0
80004f5c:	cf a0       	breq	80004f50 <set_timer+0xc8>
80004f5e:	d5 23       	csrf	0x12
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80004f60:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004f64:	6e 47       	ld.w	r7,r7[0x10]
80004f66:	0e 39       	cp.w	r9,r7
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004f68:	ca 91       	brne	80004eba <set_timer+0x32>
80004f6a:	cf 8b       	rjmp	80004f5a <set_timer+0xd2>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80004f6c:	d5 23       	csrf	0x12
80004f6e:	cc cb       	rjmp	80004f06 <set_timer+0x7e>
80004f70:	6e 47       	ld.w	r7,r7[0x10]
80004f72:	0e 39       	cp.w	r9,r7
80004f74:	ca 91       	brne	80004ec6 <set_timer+0x3e>
80004f76:	cf 2b       	rjmp	80004f5a <set_timer+0xd2>
80004f78:	6e 47       	ld.w	r7,r7[0x10]
80004f7a:	0e 39       	cp.w	r9,r7
80004f7c:	ca b1       	brne	80004ed2 <set_timer+0x4a>
80004f7e:	ce eb       	rjmp	80004f5a <set_timer+0xd2>
80004f80:	6e 47       	ld.w	r7,r7[0x10]
80004f82:	0e 39       	cp.w	r9,r7
80004f84:	ca d1       	brne	80004ede <set_timer+0x56>
80004f86:	ce ab       	rjmp	80004f5a <set_timer+0xd2>
80004f88:	6e 47       	ld.w	r7,r7[0x10]
80004f8a:	0e 39       	cp.w	r9,r7
80004f8c:	ca f1       	brne	80004eea <set_timer+0x62>
80004f8e:	ce 6b       	rjmp	80004f5a <set_timer+0xd2>
80004f90:	6e 47       	ld.w	r7,r7[0x10]
80004f92:	0e 39       	cp.w	r9,r7
80004f94:	cb 11       	brne	80004ef6 <set_timer+0x6e>
80004f96:	ce 2b       	rjmp	80004f5a <set_timer+0xd2>
80004f98:	6e 47       	ld.w	r7,r7[0x10]
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
80004f9a:	0e 39       	cp.w	r9,r7
80004f9c:	cd f0       	breq	80004f5a <set_timer+0xd2>
80004f9e:	58 06       	cp.w	r6,0
      return true;
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004fa0:	cb 30       	breq	80004f06 <set_timer+0x7e>
80004fa2:	ce 5b       	rjmp	80004f6c <set_timer+0xe4>
80004fa4:	d5 23       	csrf	0x12
80004fa6:	14 9c       	mov	r12,r10

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80004fa8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
      timers[k] = newTimer;
80004fac:	30 19       	mov	r9,1
      Enable_interrupt_level( TIMER_INT_LEVEL );
80004fae:	fc 09 09 2c 	st.w	lr[r9<<0x2],r12
80004fb2:	d5 23       	csrf	0x12

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80004fb4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004fb8:	30 29       	mov	r9,2
80004fba:	cf ab       	rjmp	80004fae <set_timer+0x126>
80004fbc:	30 39       	mov	r9,3
80004fbe:	cf 8b       	rjmp	80004fae <set_timer+0x126>
80004fc0:	30 49       	mov	r9,4
80004fc2:	cf 6b       	rjmp	80004fae <set_timer+0x126>
80004fc4:	30 59       	mov	r9,5
80004fc6:	cf 4b       	rjmp	80004fae <set_timer+0x126>
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004fc8:	30 69       	mov	r9,6
80004fca:	cf 2b       	rjmp	80004fae <set_timer+0x126>
80004fcc:	30 79       	mov	r9,7
80004fce:	cf 0b       	rjmp	80004fae <set_timer+0x126>

80004fd0 <_stext>:
80004fd0:	e0 7d 00 00 	mov	sp,65536
80004fd4:	fe c0 fd d4 	sub	r0,pc,-556
80004fd8:	e3 b0 00 01 	mtsr	0x4,r0
80004fdc:	d5 53       	csrf	0x15
80004fde:	30 80       	mov	r0,8
80004fe0:	30 81       	mov	r1,8
80004fe2:	02 30       	cp.w	r0,r1
80004fe4:	c0 72       	brcc	80004ff2 <idata_load_loop_end>
80004fe6:	fe c2 f2 de 	sub	r2,pc,-3362

80004fea <idata_load_loop>:
80004fea:	a5 05       	ld.d	r4,r2++
80004fec:	a1 24       	st.d	r0++,r4
80004fee:	02 30       	cp.w	r0,r1
80004ff0:	cf d3       	brcs	80004fea <idata_load_loop>

80004ff2 <idata_load_loop_end>:
80004ff2:	30 80       	mov	r0,8
80004ff4:	e0 61 19 30 	mov	r1,6448
80004ff8:	02 30       	cp.w	r0,r1
80004ffa:	c0 62       	brcc	80005006 <udata_clear_loop_end>
80004ffc:	30 02       	mov	r2,0
80004ffe:	30 03       	mov	r3,0

80005000 <udata_clear_loop>:
80005000:	a1 22       	st.d	r0++,r2
80005002:	02 30       	cp.w	r0,r1
80005004:	cf e3       	brcs	80005000 <udata_clear_loop>

80005006 <udata_clear_loop_end>:
80005006:	fe cf 0b 62 	sub	pc,pc,2914
8000500a:	d7 03       	nop

Disassembly of section .exception:

80005200 <_evba>:
80005200:	c0 08       	rjmp	80005200 <_evba>
	...

80005204 <_handle_TLB_Multiple_Hit>:
80005204:	c0 08       	rjmp	80005204 <_handle_TLB_Multiple_Hit>
	...

80005208 <_handle_Bus_Error_Data_Fetch>:
80005208:	c0 08       	rjmp	80005208 <_handle_Bus_Error_Data_Fetch>
	...

8000520c <_handle_Bus_Error_Instruction_Fetch>:
8000520c:	c0 08       	rjmp	8000520c <_handle_Bus_Error_Instruction_Fetch>
	...

80005210 <_handle_NMI>:
80005210:	c0 08       	rjmp	80005210 <_handle_NMI>
	...

80005214 <_handle_Instruction_Address>:
80005214:	c0 08       	rjmp	80005214 <_handle_Instruction_Address>
	...

80005218 <_handle_ITLB_Protection>:
80005218:	c0 08       	rjmp	80005218 <_handle_ITLB_Protection>
	...

8000521c <_handle_Breakpoint>:
8000521c:	c0 08       	rjmp	8000521c <_handle_Breakpoint>
	...

80005220 <_handle_Illegal_Opcode>:
80005220:	c0 08       	rjmp	80005220 <_handle_Illegal_Opcode>
	...

80005224 <_handle_Unimplemented_Instruction>:
80005224:	c0 08       	rjmp	80005224 <_handle_Unimplemented_Instruction>
	...

80005228 <_handle_Privilege_Violation>:
80005228:	c0 08       	rjmp	80005228 <_handle_Privilege_Violation>
	...

8000522c <_handle_Floating_Point>:
8000522c:	c0 08       	rjmp	8000522c <_handle_Floating_Point>
	...

80005230 <_handle_Coprocessor_Absent>:
80005230:	c0 08       	rjmp	80005230 <_handle_Coprocessor_Absent>
	...

80005234 <_handle_Data_Address_Read>:
80005234:	c0 08       	rjmp	80005234 <_handle_Data_Address_Read>
	...

80005238 <_handle_Data_Address_Write>:
80005238:	c0 08       	rjmp	80005238 <_handle_Data_Address_Write>
	...

8000523c <_handle_DTLB_Protection_Read>:
8000523c:	c0 08       	rjmp	8000523c <_handle_DTLB_Protection_Read>
	...

80005240 <_handle_DTLB_Protection_Write>:
80005240:	c0 08       	rjmp	80005240 <_handle_DTLB_Protection_Write>
	...

80005244 <_handle_DTLB_Modified>:
80005244:	c0 08       	rjmp	80005244 <_handle_DTLB_Modified>
	...

80005250 <_handle_ITLB_Miss>:
80005250:	c0 08       	rjmp	80005250 <_handle_ITLB_Miss>
	...

80005260 <_handle_DTLB_Miss_Read>:
80005260:	c0 08       	rjmp	80005260 <_handle_DTLB_Miss_Read>
	...

80005270 <_handle_DTLB_Miss_Write>:
80005270:	c0 08       	rjmp	80005270 <_handle_DTLB_Miss_Write>
	...

80005300 <_handle_Supervisor_Call>:
80005300:	c0 08       	rjmp	80005300 <_handle_Supervisor_Call>
80005302:	d7 03       	nop

80005304 <_int0>:
80005304:	30 0c       	mov	r12,0
80005306:	fe b0 e8 a9 	rcall	80002458 <_get_interrupt_handler>
8000530a:	58 0c       	cp.w	r12,0
8000530c:	f8 0f 17 10 	movne	pc,r12
80005310:	d6 03       	rete

80005312 <_int1>:
80005312:	30 1c       	mov	r12,1
80005314:	fe b0 e8 a2 	rcall	80002458 <_get_interrupt_handler>
80005318:	58 0c       	cp.w	r12,0
8000531a:	f8 0f 17 10 	movne	pc,r12
8000531e:	d6 03       	rete

80005320 <_int2>:
80005320:	30 2c       	mov	r12,2
80005322:	fe b0 e8 9b 	rcall	80002458 <_get_interrupt_handler>
80005326:	58 0c       	cp.w	r12,0
80005328:	f8 0f 17 10 	movne	pc,r12
8000532c:	d6 03       	rete

8000532e <_int3>:
8000532e:	30 3c       	mov	r12,3
80005330:	fe b0 e8 94 	rcall	80002458 <_get_interrupt_handler>
80005334:	58 0c       	cp.w	r12,0
80005336:	f8 0f 17 10 	movne	pc,r12
8000533a:	d6 03       	rete
8000533c:	d7 03       	nop
8000533e:	d7 03       	nop
80005340:	d7 03       	nop
80005342:	d7 03       	nop
80005344:	d7 03       	nop
80005346:	d7 03       	nop
80005348:	d7 03       	nop
8000534a:	d7 03       	nop
8000534c:	d7 03       	nop
8000534e:	d7 03       	nop
80005350:	d7 03       	nop
80005352:	d7 03       	nop
80005354:	d7 03       	nop
80005356:	d7 03       	nop
80005358:	d7 03       	nop
8000535a:	d7 03       	nop
8000535c:	d7 03       	nop
8000535e:	d7 03       	nop
80005360:	d7 03       	nop
80005362:	d7 03       	nop
80005364:	d7 03       	nop
80005366:	d7 03       	nop
80005368:	d7 03       	nop
8000536a:	d7 03       	nop
8000536c:	d7 03       	nop
8000536e:	d7 03       	nop
80005370:	d7 03       	nop
80005372:	d7 03       	nop
80005374:	d7 03       	nop
80005376:	d7 03       	nop
80005378:	d7 03       	nop
8000537a:	d7 03       	nop
8000537c:	d7 03       	nop
8000537e:	d7 03       	nop
80005380:	d7 03       	nop
80005382:	d7 03       	nop
80005384:	d7 03       	nop
80005386:	d7 03       	nop
80005388:	d7 03       	nop
8000538a:	d7 03       	nop
8000538c:	d7 03       	nop
8000538e:	d7 03       	nop
80005390:	d7 03       	nop
80005392:	d7 03       	nop
80005394:	d7 03       	nop
80005396:	d7 03       	nop
80005398:	d7 03       	nop
8000539a:	d7 03       	nop
8000539c:	d7 03       	nop
8000539e:	d7 03       	nop
800053a0:	d7 03       	nop
800053a2:	d7 03       	nop
800053a4:	d7 03       	nop
800053a6:	d7 03       	nop
800053a8:	d7 03       	nop
800053aa:	d7 03       	nop
800053ac:	d7 03       	nop
800053ae:	d7 03       	nop
800053b0:	d7 03       	nop
800053b2:	d7 03       	nop
800053b4:	d7 03       	nop
800053b6:	d7 03       	nop
800053b8:	d7 03       	nop
800053ba:	d7 03       	nop
800053bc:	d7 03       	nop
800053be:	d7 03       	nop
800053c0:	d7 03       	nop
800053c2:	d7 03       	nop
800053c4:	d7 03       	nop
800053c6:	d7 03       	nop
800053c8:	d7 03       	nop
800053ca:	d7 03       	nop
800053cc:	d7 03       	nop
800053ce:	d7 03       	nop
800053d0:	d7 03       	nop
800053d2:	d7 03       	nop
800053d4:	d7 03       	nop
800053d6:	d7 03       	nop
800053d8:	d7 03       	nop
800053da:	d7 03       	nop
800053dc:	d7 03       	nop
800053de:	d7 03       	nop
800053e0:	d7 03       	nop
800053e2:	d7 03       	nop
800053e4:	d7 03       	nop
800053e6:	d7 03       	nop
800053e8:	d7 03       	nop
800053ea:	d7 03       	nop
800053ec:	d7 03       	nop
800053ee:	d7 03       	nop
800053f0:	d7 03       	nop
800053f2:	d7 03       	nop
800053f4:	d7 03       	nop
800053f6:	d7 03       	nop
800053f8:	d7 03       	nop
800053fa:	d7 03       	nop
800053fc:	d7 03       	nop
800053fe:	d7 03       	nop
