
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002952  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004a00  80004a00  00004e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000050c  80004c00  80004c00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000510c  8000510c  0000550c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .bss          000014a8  00000008  00000008  00000000  2**2
                  ALLOC
  8 .heap         0000db50  000014b0  000014b0  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000550c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000c00  00000000  00000000  0000553c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001feb  00000000  00000000  0000613c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000199f6  00000000  00000000  00008127  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003477  00000000  00000000  00021b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014632  00000000  00000000  00024f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000207c  00000000  00000000  000395c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003da1  00000000  00000000  0003b644  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000658e  00000000  00000000  0003f3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 01402522  00000000  00000000  00045973  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00005920  00000000  00000000  01447e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf d6 f8 	sub	pc,pc,-10504

Disassembly of section .text:

80002004 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002004:	fe 68 14 00 	mov	r8,-125952
80002008:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000200e:	91 09       	st.w	r8[0x0],r9
}
80002010:	5e fc       	retal	r12

80002012 <gpio_enable_pin_pull_up>:


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->puers = 1 << (pin & 0x1F);
80002012:	30 18       	mov	r8,1
80002014:	f0 0c 09 48 	lsl	r8,r8,r12
#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002018:	a5 9c       	lsr	r12,0x5
8000201a:	a9 6c       	lsl	r12,0x8
8000201c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->puers = 1 << (pin & 0x1F);
80002020:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002024:	5e fc       	retal	r12

80002026 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002026:	f8 08 16 05 	lsr	r8,r12,0x5
8000202a:	a9 68       	lsl	r8,0x8
8000202c:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002030:	71 88       	ld.w	r8,r8[0x60]
80002032:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002036:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000203a:	5e fc       	retal	r12

8000203c <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000203c:	30 18       	mov	r8,1
8000203e:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002042:	a5 9c       	lsr	r12,0x5
80002044:	a9 6c       	lsl	r12,0x8
80002046:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000204a:	f9 48 00 54 	st.w	r12[84],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000204e:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002052:	99 18       	st.w	r12[0x4],r8
}
80002054:	5e fc       	retal	r12

80002056 <gpio_clr_gpio_pin>:
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002056:	30 18       	mov	r8,1
80002058:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000205c:	a5 9c       	lsr	r12,0x5
8000205e:	a9 6c       	lsl	r12,0x8
80002060:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002064:	f9 48 00 58 	st.w	r12[88],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80002068:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000206c:	99 18       	st.w	r12[0x4],r8
}
8000206e:	5e fc       	retal	r12

80002070 <gpio_enable_pin_interrupt>:
int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002070:	30 1a       	mov	r10,1
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80002072:	f8 08 16 05 	lsr	r8,r12,0x5

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002076:	f4 0c 09 49 	lsl	r9,r10,r12
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
8000207a:	a9 68       	lsl	r8,0x8
8000207c:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002080:	f1 49 00 c4 	st.w	r8[196],r9
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
80002084:	14 3b       	cp.w	r11,r10
80002086:	c0 c0       	breq	8000209e <gpio_enable_pin_interrupt+0x2e>
80002088:	c0 82       	brcc	80002098 <gpio_enable_pin_interrupt+0x28>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8000208a:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
8000208e:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80002092:	f1 49 00 94 	st.w	r8[148],r9
80002096:	5e fd       	retal	0
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
80002098:	58 2b       	cp.w	r11,2
8000209a:	c0 90       	breq	800020ac <gpio_enable_pin_interrupt+0x3c>
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1s = 1 << (pin & 0x1F);
8000209c:	5e fa       	retal	r10
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
8000209e:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800020a2:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800020a6:	f1 49 00 94 	st.w	r8[148],r9
800020aa:	5e fd       	retal	0
    gpio_port->imr0s = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800020ac:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800020b0:	f1 49 00 b4 	st.w	r8[180],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800020b4:	f1 49 00 94 	st.w	r8[148],r9
800020b8:	5e fd       	retal	0

800020ba <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800020ba:	f8 08 16 05 	lsr	r8,r12,0x5
800020be:	a9 68       	lsl	r8,0x8
800020c0:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800020c4:	f0 f8 00 d0 	ld.w	r8,r8[208]
800020c8:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800020cc:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800020d0:	5e fc       	retal	r12

800020d2 <gpio_clear_pin_interrupt_flag>:
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800020d2:	30 18       	mov	r8,1
800020d4:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800020d8:	a5 9c       	lsr	r12,0x5
800020da:	a9 6c       	lsl	r12,0x8
800020dc:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800020e0:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
800020e4:	5e fc       	retal	r12

800020e6 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800020e6:	eb cd 40 f8 	pushm	r3-r7,lr
800020ea:	18 98       	mov	r8,r12
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800020ec:	58 0b       	cp.w	r11,0
800020ee:	c3 c0       	breq	80002166 <gpio_enable_module+0x80>
800020f0:	30 0e       	mov	lr,0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800020f2:	30 16       	mov	r6,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800020f4:	1c 9c       	mov	r12,lr
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800020f6:	30 15       	mov	r5,1
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800020f8:	30 24       	mov	r4,2
800020fa:	30 33       	mov	r3,3
800020fc:	c0 d8       	rjmp	80002116 <gpio_enable_module+0x30>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800020fe:	ea 07 09 4a 	lsl	r10,r5,r7
80002102:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002104:	93 aa       	st.w	r9[0x28],r10
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002106:	93 2a       	st.w	r9[0x8],r10
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002108:	2f fe       	sub	lr,-1
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000210a:	30 09       	mov	r9,0
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000210c:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000210e:	1c 3b       	cp.w	r11,lr
80002110:	e0 88 00 1a 	brls	80002144 <gpio_enable_module+0x5e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
80002114:	2f e8       	sub	r8,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002116:	11 87       	ld.ub	r7,r8[0x0]
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002118:	11 9a       	ld.ub	r10,r8[0x1]
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000211a:	ee 09 16 05 	lsr	r9,r7,0x5
8000211e:	a9 69       	lsl	r9,0x8
80002120:	e0 29 f0 00 	sub	r9,61440

  // Enable the correct function.
  switch (function)
80002124:	ec 0a 18 00 	cp.b	r10,r6
80002128:	c1 00       	breq	80002148 <gpio_enable_module+0x62>
8000212a:	ce a3       	brcs	800020fe <gpio_enable_module+0x18>
8000212c:	e8 0a 18 00 	cp.b	r10,r4
80002130:	c1 60       	breq	8000215c <gpio_enable_module+0x76>
80002132:	e6 0a 18 00 	cp.b	r10,r3
80002136:	c0 e0       	breq	80002152 <gpio_enable_module+0x6c>
80002138:	30 19       	mov	r9,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000213a:	2f fe       	sub	lr,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000213c:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000213e:	1c 3b       	cp.w	r11,lr
80002140:	fe 9b ff ea 	brhi	80002114 <gpio_enable_module+0x2e>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
80002144:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002148:	ea 07 09 4a 	lsl	r10,r5,r7
8000214c:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000214e:	93 aa       	st.w	r9[0x28],r10
80002150:	cd bb       	rjmp	80002106 <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002152:	ea 07 09 4a 	lsl	r10,r5,r7
80002156:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002158:	93 9a       	st.w	r9[0x24],r10
8000215a:	cd 6b       	rjmp	80002106 <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000215c:	ea 07 09 4a 	lsl	r10,r5,r7
80002160:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002162:	93 9a       	st.w	r9[0x24],r10
80002164:	cd 1b       	rjmp	80002106 <gpio_enable_module+0x20>
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
80002166:	16 9c       	mov	r12,r11
80002168:	ce eb       	rjmp	80002144 <gpio_enable_module+0x5e>

8000216a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000216a:	c0 08       	rjmp	8000216a <_unhandled_interrupt>

8000216c <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000216c:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002170:	fe c8 d5 70 	sub	r8,pc,-10896
80002174:	a5 9b       	lsr	r11,0x5
80002176:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000217a:	70 18       	ld.w	r8,r8[0x4]
8000217c:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002180:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
80002182:	c1 20       	breq	800021a6 <INTC_register_interrupt+0x3a>
80002184:	58 1a       	cp.w	r10,1
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
80002186:	c1 b0       	breq	800021bc <INTC_register_interrupt+0x50>
80002188:	58 2a       	cp.w	r10,2
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000218a:	c2 50       	breq	800021d4 <INTC_register_interrupt+0x68>
8000218c:	fe c9 d6 5e 	sub	r9,pc,-10658
80002190:	fe c8 d7 90 	sub	r8,pc,-10352
80002194:	f2 08 01 08 	sub	r8,r9,r8
80002198:	fe 79 08 00 	mov	r9,-63488
8000219c:	ea 18 c0 00 	orh	r8,0xc000
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800021a0:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800021a4:	5e fc       	retal	r12
800021a6:	fe 78 08 00 	mov	r8,-63488
800021aa:	fe c9 d7 aa 	sub	r9,pc,-10326
800021ae:	fe ca d6 aa 	sub	r10,pc,-10582
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800021b2:	f4 09 01 09 	sub	r9,r10,r9
800021b6:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
800021ba:	5e fc       	retal	r12
800021bc:	fe c9 d6 aa 	sub	r9,pc,-10582
800021c0:	fe c8 d7 c0 	sub	r8,pc,-10304
800021c4:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800021c8:	fe 79 08 00 	mov	r9,-63488
800021cc:	bf a8       	sbr	r8,0x1e
800021ce:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800021d2:	5e fc       	retal	r12
800021d4:	fe c9 d6 b4 	sub	r9,pc,-10572
800021d8:	fe c8 d7 d8 	sub	r8,pc,-10280
800021dc:	f2 08 01 08 	sub	r8,r9,r8
800021e0:	fe 79 08 00 	mov	r9,-63488
800021e4:	bf b8       	sbr	r8,0x1f
800021e6:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800021ea:	5e fc       	retal	r12

800021ec <INTC_init_interrupts>:
800021ec:	eb cd 40 c0 	pushm	r6-r7,lr
800021f0:	fe c8 d7 f0 	sub	r8,pc,-10256
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800021f4:	e3 b8 00 01 	mtsr	0x4,r8
800021f8:	fe c6 d6 f4 	sub	r6,pc,-10508
800021fc:	fe ce d5 fc 	sub	lr,pc,-10756

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002200:	10 16       	sub	r6,r8
80002202:	30 0c       	mov	r12,0
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80002204:	fe cb 00 9a 	sub	r11,pc,154

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002208:	fe 77 08 00 	mov	r7,-63488
8000220c:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000220e:	58 0a       	cp.w	r10,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002210:	c0 70       	breq	8000221e <INTC_init_interrupts+0x32>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002212:	7c 19       	ld.w	r9,lr[0x4]
80002214:	30 08       	mov	r8,0

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002216:	12 ab       	st.w	r9++,r11
80002218:	2f f8       	sub	r8,-1
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000221a:	14 38       	cp.w	r8,r10
8000221c:	cf d3       	brcs	80002216 <INTC_init_interrupts+0x2a>
8000221e:	ee 0c 09 26 	st.w	r7[r12<<0x2],r6
80002222:	2f 8e       	sub	lr,-8
80002224:	2f fc       	sub	r12,-1
80002226:	59 4c       	cp.w	r12,20
80002228:	cf 21       	brne	8000220c <INTC_init_interrupts+0x20>
8000222a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222e:	d7 03       	nop

80002230 <_get_interrupt_handler>:
80002230:	e0 68 00 83 	mov	r8,131
80002234:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002238:	fe 78 08 00 	mov	r8,-63488
8000223c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002240:	f2 ca ff c0 	sub	r10,r9,-64
80002244:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002248:	58 0c       	cp.w	r12,0
8000224a:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000224c:	fe c8 d6 4c 	sub	r8,pc,-10676
80002250:	f8 0c 12 00 	clz	r12,r12
80002254:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002258:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000225c:	72 18       	ld.w	r8,r9[0x4]
8000225e:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002262:	5e fc       	retal	r12

80002264 <pdca_disable>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002264:	58 ec       	cp.w	r12,14
80002266:	e0 8b 00 08 	brhi	80002276 <pdca_disable+0x12>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
8000226a:	a7 6c       	lsl	r12,0x6
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8000226c:	30 28       	mov	r8,2


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
8000226e:	e0 3c 00 00 	sub	r12,65536
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002272:	99 58       	st.w	r12[0x14],r8

}
80002274:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002276:	3f fc       	mov	r12,-1
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002278:	30 28       	mov	r8,2
8000227a:	99 58       	st.w	r12[0x14],r8

}
8000227c:	5e fc       	retal	r12

8000227e <pdca_disable_interrupt_transfer_complete>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000227e:	58 ec       	cp.w	r12,14
80002280:	e0 88 00 0c 	brls	80002298 <pdca_disable_interrupt_transfer_complete+0x1a>
80002284:	3f fc       	mov	r12,-1
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002286:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
8000228a:	ed b8 00 10 	bld	r8,0x10
8000228e:	c0 d1       	brne	800022a8 <pdca_disable_interrupt_transfer_complete+0x2a>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002290:	30 28       	mov	r8,2
80002292:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
80002294:	78 b8       	ld.w	r8,r12[0x2c]
80002296:	5e fc       	retal	r12


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002298:	a7 6c       	lsl	r12,0x6
8000229a:	e0 3c 00 00 	sub	r12,65536
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000229e:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800022a2:	ed b8 00 10 	bld	r8,0x10
800022a6:	cf 50       	breq	80002290 <pdca_disable_interrupt_transfer_complete+0x12>
800022a8:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800022aa:	30 28       	mov	r8,2
800022ac:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
800022ae:	78 b8       	ld.w	r8,r12[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800022b0:	d5 03       	csrf	0x10
800022b2:	5e fc       	retal	r12

800022b4 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800022b4:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
800022b8:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800022ba:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
800022bc:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
800022be:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
800022c2:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
800022c6:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800022ca:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800022ce:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
800022d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800022d6 <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800022d6:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800022da:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800022dc:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800022e0:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800022e4:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800022e8:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
800022ec:	5e fc       	retal	r12

800022ee <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800022ee:	2f 8b       	sub	r11,-8
800022f0:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800022f4:	a1 a8       	sbr	r8,0x0
800022f6:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800022fa:	5e fc       	retal	r12

800022fc <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800022fc:	79 58       	ld.w	r8,r12[0x54]
800022fe:	ed b8 00 00 	bld	r8,0x0
80002302:	cf d1       	brne	800022fc <pm_wait_for_pll0_locked>
}
80002304:	5e fc       	retal	r12

80002306 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002306:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002308:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000230c:	99 08       	st.w	r12[0x0],r8
}
8000230e:	5e fc       	retal	r12

80002310 <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002310:	ec 5b bb 9f 	cp.w	r11,899999
80002314:	e0 8b 00 18 	brhi	80002344 <pm_switch_to_osc0+0x34>
80002318:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000231a:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000231c:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002320:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002322:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002324:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002328:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
8000232a:	78 08       	ld.w	r8,r12[0x0]
8000232c:	a3 a8       	sbr	r8,0x2
8000232e:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002330:	79 58       	ld.w	r8,r12[0x54]
80002332:	ed b8 00 07 	bld	r8,0x7
80002336:	cf d1       	brne	80002330 <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002338:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000233a:	30 19       	mov	r9,1
8000233c:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002340:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
80002342:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002344:	e0 68 c6 bf 	mov	r8,50879
80002348:	ea 18 00 2d 	orh	r8,0x2d
8000234c:	10 3b       	cp.w	r11,r8
8000234e:	e0 88 00 0c 	brls	80002366 <pm_switch_to_osc0+0x56>
80002352:	e0 68 12 00 	mov	r8,4608
80002356:	ea 18 00 7a 	orh	r8,0x7a
8000235a:	10 3b       	cp.w	r11,r8
8000235c:	f9 bb 03 06 	movlo	r11,6
80002360:	f9 bb 02 07 	movhs	r11,7
80002364:	cd bb       	rjmp	8000231a <pm_switch_to_osc0+0xa>
80002366:	30 5b       	mov	r11,5
80002368:	cd 9b       	rjmp	8000231a <pm_switch_to_osc0+0xa>

8000236a <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
8000236a:	f8 c9 00 01 	sub	r9,r12,1
8000236e:	f8 08 16 01 	lsr	r8,r12,0x1
80002372:	f2 08 00 08 	add	r8,r9,r8
80002376:	f0 0b 00 0b 	add	r11,r8,r11
8000237a:	f6 0c 0d 0a 	divu	r10,r11,r12
8000237e:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
80002380:	f4 c8 00 01 	sub	r8,r10,1
80002384:	e0 48 00 fe 	cp.w	r8,254
80002388:	e0 8b 00 04 	brhi	80002390 <getBaudDiv+0x26>
    return -1;
  }

  return baudDiv;
8000238c:	5c 8c       	casts.h	r12
}
8000238e:	5e fc       	retal	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);

  if (baudDiv <= 0 || baudDiv > 255) {
80002390:	5e fe       	retal	-1

80002392 <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002392:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002394:	30 1a       	mov	r10,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002396:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002398:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000239c:	f4 09 18 00 	cp.b	r9,r10
800023a0:	e0 88 00 04 	brls	800023a8 <spi_initMaster+0x16>
800023a4:	30 2c       	mov	r12,2
800023a6:	d8 02       	popm	pc
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800023a8:	e0 6a 00 80 	mov	r10,128
800023ac:	99 0a       	st.w	r12[0x0],r10

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800023ae:	30 0b       	mov	r11,0

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800023b0:	70 1a       	ld.w	r10,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
800023b2:	30 1e       	mov	lr,1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
800023b4:	16 9c       	mov	r12,r11
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
800023b6:	f5 de d0 01 	bfins	r10,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800023ba:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800023be:	30 f9       	mov	r9,15

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800023c0:	f5 db d0 e1 	bfins	r10,r11,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800023c4:	f5 d9 d2 04 	bfins	r10,r9,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
800023c8:	91 1a       	st.w	r8[0x4],r10

  return SPI_OK;
}
800023ca:	d8 02       	popm	pc

800023cc <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800023cc:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800023ce:	30 18       	mov	r8,1
800023d0:	f0 0b 18 00 	cp.b	r11,r8
800023d4:	5f be       	srhi	lr
800023d6:	f0 0a 18 00 	cp.b	r10,r8
800023da:	5f b8       	srhi	r8
800023dc:	1c 48       	or	r8,lr
800023de:	c0 a1       	brne	800023f2 <spi_selectionMode+0x26>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
800023e0:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
800023e2:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800023e6:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
800023ea:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
800023ee:	99 18       	st.w	r12[0x4],r8
800023f0:	d8 0a       	popm	pc,r12=0
                               unsigned char pcs_decode,
                               unsigned char delay)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800023f2:	30 2c       	mov	r12,2
800023f4:	d8 02       	popm	pc

800023f6 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800023f6:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800023f8:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800023fa:	ea 19 00 0f 	orh	r9,0xf
800023fe:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002400:	78 1c       	ld.w	r12,r12[0x4]
80002402:	e2 1c 00 04 	andl	r12,0x4,COH
80002406:	c0 80       	breq	80002416 <spi_selectChip+0x20>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80002408:	30 e9       	mov	r9,14
8000240a:	f2 0b 18 00 	cp.b	r11,r9
8000240e:	e0 88 00 12 	brls	80002432 <spi_selectChip+0x3c>
  } else {
    if (chip > 3) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002412:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
80002414:	5e fc       	retal	r12
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
  } else {
    if (chip > 3) {
80002416:	30 39       	mov	r9,3
80002418:	f2 0b 18 00 	cp.b	r11,r9
8000241c:	fe 9b ff fb 	brhi	80002412 <spi_selectChip+0x1c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002420:	70 19       	ld.w	r9,r8[0x4]
80002422:	2f 0b       	sub	r11,-16
80002424:	30 1a       	mov	r10,1
80002426:	f4 0b 09 4b 	lsl	r11,r10,r11
8000242a:	5c db       	com	r11
8000242c:	12 6b       	and	r11,r9
8000242e:	91 1b       	st.w	r8[0x4],r11
80002430:	5e fc       	retal	r12
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80002432:	70 19       	ld.w	r9,r8[0x4]
80002434:	b1 6b       	lsl	r11,0x10
80002436:	30 0c       	mov	r12,0
80002438:	ea 1b ff f0 	orh	r11,0xfff0
8000243c:	e8 1b ff ff 	orl	r11,0xffff
80002440:	12 6b       	and	r11,r9
80002442:	91 1b       	st.w	r8[0x4],r11
80002444:	5e fc       	retal	r12

80002446 <spi_unselectChip>:
  return SPI_OK;
}


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002446:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002448:	c0 58       	rjmp	80002452 <spi_unselectChip+0xc>
8000244a:	2f f9       	sub	r9,-1
    if (!timeout--) {
8000244c:	e0 49 3a 99 	cp.w	r9,15001
80002450:	c0 d0       	breq	8000246a <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002452:	78 48       	ld.w	r8,r12[0x10]
80002454:	ed b8 00 09 	bld	r8,0x9
80002458:	cf 91       	brne	8000244a <spi_unselectChip+0x4>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000245a:	78 18       	ld.w	r8,r12[0x4]
8000245c:	ea 18 00 0f 	orh	r8,0xf
80002460:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002462:	fc 18 01 00 	movh	r8,0x100
80002466:	99 08       	st.w	r12[0x0],r8
80002468:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000246a:	5e ff       	retal	1

8000246c <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
8000246c:	eb cd 40 fe 	pushm	r1-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002470:	30 34       	mov	r4,3


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002472:	16 97       	mov	r7,r11
80002474:	18 96       	mov	r6,r12
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002476:	f7 35 00 0c 	ld.ub	r5,r11[12]
8000247a:	e8 05 18 00 	cp.b	r5,r4
8000247e:	e0 8b 00 09 	brhi	80002490 <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
80002482:	f7 32 00 0b 	ld.ub	r2,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002486:	30 13       	mov	r3,1
80002488:	e6 02 18 00 	cp.b	r2,r3
8000248c:	e0 88 00 05 	brls	80002496 <spi_setupChipReg+0x2a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
      break;
80002490:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
80002492:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80002496:	f7 31 00 08 	ld.ub	r1,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000249a:	30 78       	mov	r8,7
8000249c:	f0 01 18 00 	cp.b	r1,r8
800024a0:	fe 98 ff f8 	brls	80002490 <spi_setupChipReg+0x24>
800024a4:	31 08       	mov	r8,16
800024a6:	f0 01 18 00 	cp.b	r1,r8
800024aa:	fe 9b ff f3 	brhi	80002490 <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800024ae:	14 9b       	mov	r11,r10
800024b0:	6e 1c       	ld.w	r12,r7[0x4]
800024b2:	c5 cf       	rcall	8000236a <getBaudDiv>
800024b4:	ce e5       	brlt	80002490 <spi_setupChipReg+0x24>

  if (baudDiv < 0) {
800024b6:	0a 9a       	mov	r10,r5
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800024b8:	ec 1a 00 01 	eorl	r10,0x1
800024bc:	30 08       	mov	r8,0
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800024be:	a1 95       	lsr	r5,0x1
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800024c0:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
800024c4:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800024c8:	ef 3a 00 09 	ld.ub	r10,r7[9]
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800024cc:	20 81       	sub	r1,8
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800024ce:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800024d2:	0f 89       	ld.ub	r9,r7[0x0]
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
800024d4:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800024d8:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
800024dc:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800024e0:	ef 3a 00 0a 	ld.ub	r10,r7[10]
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800024e4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800024e8:	e6 09 18 00 	cp.b	r9,r3

  switch(options->reg) {
800024ec:	c0 f0       	breq	8000250a <spi_setupChipReg+0x9e>
800024ee:	c0 b3       	brcs	80002504 <spi_setupChipReg+0x98>
800024f0:	30 2a       	mov	r10,2
800024f2:	f4 09 18 00 	cp.b	r9,r10
800024f6:	c0 d0       	breq	80002510 <spi_setupChipReg+0xa4>
800024f8:	e8 09 18 00 	cp.b	r9,r4
800024fc:	cc a1       	brne	80002490 <spi_setupChipReg+0x24>
800024fe:	8d f8       	st.w	r6[0x3c],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80002500:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002504:	8d c8       	st.w	r6[0x30],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80002506:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000250a:	8d d8       	st.w	r6[0x34],r8
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8000250c:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002510:	8d e8       	st.w	r6[0x38],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002512:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002516:	d7 03       	nop

80002518 <spi_enable>:
80002518:	30 18       	mov	r8,1
8000251a:	99 08       	st.w	r12[0x0],r8


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
8000251c:	5e fc       	retal	r12

8000251e <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000251e:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002520:	c0 58       	rjmp	8000252a <spi_write+0xc>
80002522:	2f f9       	sub	r9,-1
    if (!timeout--) {
80002524:	e0 49 3a 99 	cp.w	r9,15001
80002528:	c0 80       	breq	80002538 <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000252a:	78 48       	ld.w	r8,r12[0x10]
8000252c:	ed b8 00 01 	bld	r8,0x1
80002530:	cf 91       	brne	80002522 <spi_write+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002532:	5c 7b       	castu.h	r11
80002534:	99 3b       	st.w	r12[0xc],r11
80002536:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
80002538:	5e ff       	retal	1

8000253a <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
8000253a:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000253c:	c0 58       	rjmp	80002546 <spi_read+0xc>
8000253e:	2f f9       	sub	r9,-1
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002540:	e0 49 3a 99 	cp.w	r9,15001
80002544:	c0 b0       	breq	8000255a <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80002546:	78 48       	ld.w	r8,r12[0x10]
80002548:	e2 18 02 01 	andl	r8,0x201,COH
8000254c:	e0 48 02 01 	cp.w	r8,513
80002550:	cf 71       	brne	8000253e <spi_read+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002552:	78 28       	ld.w	r8,r12[0x8]
80002554:	30 0c       	mov	r12,0
80002556:	b6 08       	st.h	r11[0x0],r8

  return SPI_OK;
}
80002558:	5e fc       	retal	r12
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000255a:	5e ff       	retal	1

8000255c <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
8000255c:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000255e:	76 09       	ld.w	r9,r11[0x0]
80002560:	58 29       	cp.w	r9,2
80002562:	e0 8b 00 4b 	brhi	800025f8 <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002566:	76 18       	ld.w	r8,r11[0x4]
80002568:	10 9e       	mov	lr,r8
8000256a:	e6 1e c0 00 	andh	lr,0xc000,COH
8000256e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002572:	af ba       	sbr	r10,0xf
80002574:	1c 4a       	or	r10,lr
80002576:	10 9e       	mov	lr,r8
80002578:	e6 1e 30 00 	andh	lr,0x3000,COH
8000257c:	1c 4a       	or	r10,lr
8000257e:	10 9e       	mov	lr,r8
80002580:	e6 1e 0c 00 	andh	lr,0xc00,COH
80002584:	1c 4a       	or	r10,lr
80002586:	10 9e       	mov	lr,r8
80002588:	e6 1e 03 00 	andh	lr,0x300,COH
8000258c:	1c 4a       	or	r10,lr
8000258e:	10 9e       	mov	lr,r8
80002590:	e6 1e 00 c0 	andh	lr,0xc0,COH
80002594:	1c 4a       	or	r10,lr
80002596:	10 9e       	mov	lr,r8
80002598:	e6 1e 00 30 	andh	lr,0x30,COH
8000259c:	1c 4a       	or	r10,lr
8000259e:	10 9e       	mov	lr,r8
800025a0:	e6 1e 00 0c 	andh	lr,0xc,COH
800025a4:	1c 4a       	or	r10,lr
800025a6:	10 9e       	mov	lr,r8
800025a8:	e6 1e 00 03 	andh	lr,0x3,COH
800025ac:	1c 4a       	or	r10,lr
800025ae:	10 9e       	mov	lr,r8
800025b0:	e2 1e 60 00 	andl	lr,0x6000,COH
800025b4:	1c 4a       	or	r10,lr
800025b6:	10 9e       	mov	lr,r8
800025b8:	e2 1e 10 00 	andl	lr,0x1000,COH
800025bc:	1c 4a       	or	r10,lr
800025be:	10 9e       	mov	lr,r8
800025c0:	e2 1e 0c 00 	andl	lr,0xc00,COH
800025c4:	1c 4a       	or	r10,lr
800025c6:	10 9e       	mov	lr,r8
800025c8:	e2 1e 03 00 	andl	lr,0x300,COH
800025cc:	1c 4a       	or	r10,lr
800025ce:	10 9e       	mov	lr,r8
800025d0:	e2 1e 00 80 	andl	lr,0x80,COH
800025d4:	10 9b       	mov	r11,r8
800025d6:	1c 4a       	or	r10,lr
800025d8:	e2 1b 00 08 	andl	r11,0x8,COH
800025dc:	10 9e       	mov	lr,r8
800025de:	a5 69       	lsl	r9,0x4
800025e0:	e2 1e 00 40 	andl	lr,0x40,COH
800025e4:	2f f9       	sub	r9,-1
800025e6:	1c 4a       	or	r10,lr
800025e8:	e2 18 00 30 	andl	r8,0x30,COH
800025ec:	f5 e8 10 08 	or	r8,r10,r8
800025f0:	16 48       	or	r8,r11
800025f2:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800025f6:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800025f8:	dc 0a       	popm	pc,r12=-1

800025fa <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800025fa:	58 2b       	cp.w	r11,2
800025fc:	e0 8b 00 07 	brhi	8000260a <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002600:	a7 6b       	lsl	r11,0x6
80002602:	16 0c       	add	r12,r11
80002604:	30 58       	mov	r8,5
80002606:	99 08       	st.w	r12[0x0],r8
80002608:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000260a:	5e fe       	retal	-1

8000260c <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000260c:	58 2b       	cp.w	r11,2
8000260e:	e0 8b 00 07 	brhi	8000261c <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002612:	a7 6b       	lsl	r11,0x6
80002614:	2e 0b       	sub	r11,-32
80002616:	16 0c       	add	r12,r11
80002618:	78 0c       	ld.w	r12,r12[0x0]
}
8000261a:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000261c:	5e fe       	retal	-1

8000261e <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000261e:	58 2b       	cp.w	r11,2
80002620:	e0 8b 00 1a 	brhi	80002654 <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002624:	f6 08 15 04 	lsl	r8,r11,0x4
80002628:	2f f8       	sub	r8,-1
8000262a:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000262e:	ed b8 00 0f 	bld	r8,0xf
80002632:	c0 e1       	brne	8000264e <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002634:	a7 6b       	lsl	r11,0x6
80002636:	f8 0b 00 0b 	add	r11,r12,r11
8000263a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000263e:	2e 4b       	sub	r11,-28
80002640:	76 08       	ld.w	r8,r11[0x0]
80002642:	e0 18 00 00 	andl	r8,0x0
80002646:	f9 e8 10 08 	or	r8,r12,r8
8000264a:	97 08       	st.w	r11[0x0],r8

  return value;
}
8000264c:	5e fc       	retal	r12
8000264e:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80002652:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002654:	5e fe       	retal	-1

80002656 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002656:	d4 31       	pushm	r0-r7,lr
80002658:	20 3d       	sub	sp,12
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000265a:	e1 b8 00 00 	mfsr	r8,0x0
8000265e:	50 08       	stdsp	sp[0x0],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002660:	58 2b       	cp.w	r11,2
80002662:	e0 8b 00 74 	brhi	8000274a <tc_configure_interrupts+0xf4>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002666:	74 0e       	ld.w	lr,r10[0x0]
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80002668:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000266c:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
80002670:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80002674:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80002678:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000267c:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
80002680:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002684:	e6 02 15 06 	lsl	r2,r3,0x6
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80002688:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000268c:	e5 e8 10 72 	or	r2,r2,r8<<0x7
80002690:	12 42       	or	r2,r9
80002692:	e5 e4 10 52 	or	r2,r2,r4<<0x5
80002696:	e5 e5 10 42 	or	r2,r2,r5<<0x4
8000269a:	e5 e6 10 32 	or	r2,r2,r6<<0x3
8000269e:	e5 e7 10 22 	or	r2,r2,r7<<0x2
800026a2:	e5 ee 10 12 	or	r2,r2,lr<<0x1
800026a6:	50 22       	stdsp	sp[0x8],r2
800026a8:	f6 02 15 06 	lsl	r2,r11,0x6
800026ac:	40 21       	lddsp	r1,sp[0x8]
800026ae:	f8 02 00 00 	add	r0,r12,r2
800026b2:	2d c0       	sub	r0,-36
800026b4:	81 01       	st.w	r0[0x0],r1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800026b6:	40 01       	lddsp	r1,sp[0x0]
800026b8:	ee 11 00 01 	eorh	r1,0x1
800026bc:	e3 d1 c2 01 	bfextu	r1,r1,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800026c0:	c4 71       	brne	8000274e <tc_configure_interrupts+0xf8>
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800026c2:	ec 19 00 01 	eorl	r9,0x1
800026c6:	e0 6a 00 80 	mov	r10,128
800026ca:	58 08       	cp.w	r8,0
800026cc:	f4 08 17 00 	moveq	r8,r10
800026d0:	f9 b8 01 00 	movne	r8,0
800026d4:	12 48       	or	r8,r9
800026d6:	f8 02 00 02 	add	r2,r12,r2
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800026da:	58 03       	cp.w	r3,0
800026dc:	f9 b3 00 40 	moveq	r3,64
800026e0:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800026e4:	58 04       	cp.w	r4,0
800026e6:	f9 b4 00 20 	moveq	r4,32
800026ea:	f9 b4 01 00 	movne	r4,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800026ee:	f1 e3 10 03 	or	r3,r8,r3
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800026f2:	58 05       	cp.w	r5,0
800026f4:	f9 b5 00 10 	moveq	r5,16
800026f8:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800026fc:	58 06       	cp.w	r6,0
800026fe:	f9 b6 00 08 	moveq	r6,8
80002702:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002706:	58 07       	cp.w	r7,0
80002708:	f9 b7 00 04 	moveq	r7,4
8000270c:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002710:	58 0e       	cp.w	lr,0
80002712:	f9 be 00 02 	moveq	lr,2
80002716:	f9 be 01 00 	movne	lr,0
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000271a:	a7 6b       	lsl	r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000271c:	2d 82       	sub	r2,-40
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000271e:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002720:	e7 e4 10 04 	or	r4,r3,r4
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002724:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002726:	e9 e5 10 05 	or	r5,r4,r5
8000272a:	eb e6 10 06 	or	r6,r5,r6
8000272e:	ed e7 10 07 	or	r7,r6,r7
80002732:	ef ee 10 0e 	or	lr,r7,lr
80002736:	85 0e       	st.w	r2[0x0],lr
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002738:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000273a:	58 01       	cp.w	r1,0
8000273c:	c0 41       	brne	80002744 <tc_configure_interrupts+0xee>
8000273e:	02 9c       	mov	r12,r1

  return 0;
}
80002740:	2f dd       	sub	sp,-12
80002742:	d8 32       	popm	r0-r7,pc
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
  if (global_interrupt_enabled) Enable_global_interrupt();
80002744:	d5 03       	csrf	0x10
80002746:	2f dd       	sub	sp,-12
80002748:	d8 3a       	popm	r0-r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000274a:	2f dd       	sub	sp,-12
8000274c:	dc 3a       	popm	r0-r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000274e:	d3 03       	ssrf	0x10
80002750:	74 0e       	ld.w	lr,r10[0x0]
80002752:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
80002756:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
8000275a:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
8000275e:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
80002762:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
80002766:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
8000276a:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
8000276e:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
80002772:	ca 8b       	rjmp	800026c2 <tc_configure_interrupts+0x6c>

80002774 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002774:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002776:	f6 08 15 04 	lsl	r8,r11,0x4
8000277a:	14 38       	cp.w	r8,r10
8000277c:	e0 8b 00 26 	brhi	800027c8 <usart_set_async_baudrate+0x54>
80002780:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002782:	f0 09 16 01 	lsr	r9,r8,0x1
80002786:	f2 0a 00 39 	add	r9,r9,r10<<0x3
8000278a:	f2 08 0d 08 	divu	r8,r9,r8
8000278e:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002790:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002792:	f0 cb 00 01 	sub	r11,r8,1
80002796:	e0 4b ff fe 	cp.w	r11,65534
8000279a:	e0 8b 00 1b 	brhi	800027d0 <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8000279e:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800027a0:	e8 6b 00 00 	mov	r11,524288
800027a4:	e4 1a ff f7 	andh	r10,0xfff7
800027a8:	e0 1a fe cf 	andl	r10,0xfecf
800027ac:	59 0e       	cp.w	lr,16
800027ae:	f6 0e 17 10 	movne	lr,r11
800027b2:	f9 be 00 00 	moveq	lr,0
800027b6:	fd ea 10 0a 	or	r10,lr,r10
800027ba:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800027bc:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
800027c0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800027c4:	99 88       	st.w	r12[0x20],r8
800027c6:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800027c8:	f6 08 15 03 	lsl	r8,r11,0x3
800027cc:	30 8e       	mov	lr,8
800027ce:	cd ab       	rjmp	80002782 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800027d0:	da 0a       	popm	pc,r12=1

800027d2 <usart_spi_selectChip>:


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
800027d2:	e4 68 00 00 	mov	r8,262144
800027d6:	99 08       	st.w	r12[0x0],r8

  return USART_SUCCESS;
}
800027d8:	5e fd       	retal	0

800027da <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
800027da:	30 09       	mov	r9,0
800027dc:	c0 58       	rjmp	800027e6 <usart_spi_unselectChip+0xc>
800027de:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800027e0:	e0 49 27 10 	cp.w	r9,10000
800027e4:	c0 90       	breq	800027f6 <usart_spi_unselectChip+0x1c>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
800027e6:	78 58       	ld.w	r8,r12[0x14]
  } while (!usart_tx_empty(usart));
800027e8:	ed b8 00 09 	bld	r8,0x9
800027ec:	cf 91       	brne	800027de <usart_spi_unselectChip+0x4>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
800027ee:	e8 68 00 00 	mov	r8,524288
800027f2:	99 08       	st.w	r12[0x0],r8
800027f4:	5e fd       	retal	0
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800027f6:	5e fe       	retal	-1

800027f8 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800027f8:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800027fa:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800027fc:	ed b8 00 01 	bld	r8,0x1
80002800:	c0 51       	brne	8000280a <usart_putchar+0x12>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002802:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002806:	99 7b       	st.w	r12[0x1c],r11
80002808:	5e fd       	retal	0
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8000280a:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
8000280c:	e0 49 27 10 	cp.w	r9,10000
80002810:	cf 51       	brne	800027fa <usart_putchar+0x2>
80002812:	5e fe       	retal	-1

80002814 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002814:	17 8a       	ld.ub	r10,r11[0x0]
80002816:	58 0a       	cp.w	r10,0
80002818:	5e 0c       	reteq	r12
8000281a:	30 09       	mov	r9,0
8000281c:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
8000281e:	ed b8 00 01 	bld	r8,0x1
80002822:	c0 91       	brne	80002834 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002824:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002828:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000282a:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8000282c:	17 8a       	ld.ub	r10,r11[0x0]
8000282e:	58 0a       	cp.w	r10,0
80002830:	cf 51       	brne	8000281a <usart_write_line+0x6>
80002832:	5e fc       	retal	r12
80002834:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002836:	e0 49 27 10 	cp.w	r9,10000
8000283a:	cf 11       	brne	8000281c <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
8000283c:	2f fb       	sub	r11,-1
8000283e:	cf 7b       	rjmp	8000282c <usart_write_line+0x18>

80002840 <usart_init_spi_master>:
  return USART_SUCCESS;
}


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
80002840:	eb cd 40 c0 	pushm	r6-r7,lr
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002844:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002848:	ed b8 00 10 	bld	r8,0x10
8000284c:	c5 71       	brne	800028fa <usart_init_spi_master+0xba>
  usart->idr = 0xFFFFFFFF;
8000284e:	3f f8       	mov	r8,-1
80002850:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002852:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002854:	30 08       	mov	r8,0
80002856:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002858:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
8000285a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000285c:	ea 68 61 0c 	mov	r8,680204
80002860:	99 08       	st.w	r12[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002862:	58 0b       	cp.w	r11,0
80002864:	c4 90       	breq	800028f6 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
80002866:	17 c8       	ld.ub	r8,r11[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002868:	30 49       	mov	r9,4
8000286a:	f2 08 18 00 	cp.b	r8,r9
8000286e:	e0 88 00 44 	brls	800028f6 <usart_init_spi_master+0xb6>
80002872:	30 99       	mov	r9,9
80002874:	f2 08 18 00 	cp.b	r8,r9
80002878:	e0 8b 00 3f 	brhi	800028f6 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8000287c:	17 d7       	ld.ub	r7,r11[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000287e:	30 3e       	mov	lr,3
80002880:	0e 96       	mov	r6,r7
80002882:	fc 07 18 00 	cp.b	r7,lr
80002886:	e0 8b 00 38 	brhi	800028f6 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8000288a:	17 e6       	ld.ub	r6,r11[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000288c:	fc 06 18 00 	cp.b	r6,lr
80002890:	e0 8b 00 33 	brhi	800028f6 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002894:	76 0b       	ld.w	r11,r11[0x0]
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
80002896:	f6 0e 16 01 	lsr	lr,r11,0x1
8000289a:	1c 0a       	add	r10,lr
8000289c:	f4 0b 0d 0a 	divu	r10,r10,r11

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800028a0:	f4 ce 00 04 	sub	lr,r10,4
800028a4:	e0 4e ff fb 	cp.w	lr,65531
800028a8:	e0 8b 00 27 	brhi	800028f6 <usart_init_spi_master+0xb6>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
800028ac:	78 1e       	ld.w	lr,r12[0x4]
800028ae:	e0 1e ff cf 	andl	lr,0xffcf
800028b2:	99 1e       	st.w	r12[0x4],lr
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
800028b4:	99 8a       	st.w	r12[0x20],r10
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800028b6:	f2 08 18 00 	cp.b	r8,r9
800028ba:	c2 60       	breq	80002906 <usart_init_spi_master+0xc6>
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800028bc:	78 19       	ld.w	r9,r12[0x4]
800028be:	20 58       	sub	r8,5
800028c0:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800028c4:	99 18       	st.w	r12[0x4],r8
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
800028c6:	ee 08 16 01 	lsr	r8,r7,0x1
800028ca:	af 66       	lsl	r6,0xe
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
800028cc:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
800028d0:	ed e8 11 06 	or	r6,r6,r8<<0x10
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
800028d4:	e0 69 01 0e 	mov	r9,270
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
800028d8:	78 18       	ld.w	r8,r12[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
800028da:	58 07       	cp.w	r7,0
800028dc:	f9 b7 01 0e 	movne	r7,14
800028e0:	f2 07 17 00 	moveq	r7,r9
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
800028e4:	b3 a8       	sbr	r8,0x12
800028e6:	ed e7 10 07 	or	r7,r6,r7
800028ea:	0e 48       	or	r8,r7
800028ec:	99 18       	st.w	r12[0x4],r8
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800028ee:	35 08       	mov	r8,80
800028f0:	99 08       	st.w	r12[0x0],r8
800028f2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800028f6:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800028fa:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800028fc:	3f f8       	mov	r8,-1
800028fe:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002900:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002902:	d5 03       	csrf	0x10
80002904:	ca 8b       	rjmp	80002854 <usart_init_spi_master+0x14>
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002906:	78 18       	ld.w	r8,r12[0x4]
80002908:	b1 b8       	sbr	r8,0x11
8000290a:	99 18       	st.w	r12[0x4],r8
8000290c:	cd db       	rjmp	800028c6 <usart_init_spi_master+0x86>
8000290e:	d7 03       	nop

80002910 <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002910:	eb cd 40 e0 	pushm	r5-r7,lr
80002914:	18 97       	mov	r7,r12
80002916:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002918:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8000291c:	ed b8 00 10 	bld	r8,0x10
80002920:	c2 e1       	brne	8000297c <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
80002922:	3f f8       	mov	r8,-1
80002924:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002926:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002928:	30 08       	mov	r8,0
8000292a:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
8000292c:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
8000292e:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002930:	ea 68 61 0c 	mov	r8,680204
80002934:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002936:	58 06       	cp.w	r6,0
80002938:	c2 00       	breq	80002978 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
8000293a:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000293c:	30 49       	mov	r9,4
8000293e:	f2 08 18 00 	cp.b	r8,r9
80002942:	e0 88 00 1b 	brls	80002978 <usart_init_rs232+0x68>
80002946:	30 95       	mov	r5,9
80002948:	ea 08 18 00 	cp.b	r8,r5
8000294c:	e0 8b 00 16 	brhi	80002978 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002950:	0d d9       	ld.ub	r9,r6[0x5]
80002952:	30 78       	mov	r8,7
80002954:	f0 09 18 00 	cp.b	r9,r8
80002958:	e0 8b 00 10 	brhi	80002978 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
8000295c:	8c 39       	ld.sh	r9,r6[0x6]
8000295e:	e0 68 01 01 	mov	r8,257
80002962:	f0 09 19 00 	cp.h	r9,r8
80002966:	e0 8b 00 09 	brhi	80002978 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
8000296a:	ed 39 00 08 	ld.ub	r9,r6[8]
8000296e:	30 38       	mov	r8,3
80002970:	f0 09 18 00 	cp.b	r9,r8
80002974:	e0 88 00 0a 	brls	80002988 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002978:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8000297c:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000297e:	3f f8       	mov	r8,-1
80002980:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002982:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002984:	d5 03       	csrf	0x10
80002986:	cd 1b       	rjmp	80002928 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002988:	6c 0b       	ld.w	r11,r6[0x0]
8000298a:	0e 9c       	mov	r12,r7
8000298c:	cf 4e       	rcall	80002774 <usart_set_async_baudrate>
8000298e:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002990:	cf 40       	breq	80002978 <usart_init_rs232+0x68>
80002992:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	c2 a0       	breq	800029ec <usart_init_rs232+0xdc>
8000299a:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000299c:	20 58       	sub	r8,5
8000299e:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800029a2:	8f 18       	st.w	r7[0x4],r8
800029a4:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800029a6:	ed 3a 00 08 	ld.ub	r10,r6[8]
800029aa:	0d d8       	ld.ub	r8,r6[0x5]
800029ac:	a9 78       	lsl	r8,0x9
800029ae:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800029b2:	12 48       	or	r8,r9
800029b4:	8f 18       	st.w	r7[0x4],r8
800029b6:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800029b8:	8c 38       	ld.sh	r8,r6[0x6]
800029ba:	f2 08 19 00 	cp.h	r8,r9
800029be:	e0 88 00 11 	brls	800029e0 <usart_init_rs232+0xd0>
800029c2:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800029c4:	ad b9       	sbr	r9,0xd
800029c6:	8f 19       	st.w	r7[0x4],r9
800029c8:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800029ca:	20 28       	sub	r8,2
800029cc:	8f a8       	st.w	r7[0x28],r8
800029ce:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800029d0:	e0 18 ff f0 	andl	r8,0xfff0
800029d4:	8f 18       	st.w	r7[0x4],r8
800029d6:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800029d8:	35 08       	mov	r8,80
800029da:	8f 08       	st.w	r7[0x0],r8
800029dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800029e0:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800029e2:	5c 78       	castu.h	r8
800029e4:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800029e8:	8f 18       	st.w	r7[0x4],r8
800029ea:	cf 2b       	rjmp	800029ce <usart_init_rs232+0xbe>
800029ec:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800029ee:	b1 b8       	sbr	r8,0x11
800029f0:	8f 18       	st.w	r7[0x4],r8
800029f2:	cd 9b       	rjmp	800029a4 <usart_init_rs232+0x94>

800029f4 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
800029f4:	d4 01       	pushm	lr


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800029f6:	18 9b       	mov	r11,r12
800029f8:	fe 7c 18 00 	mov	r12,-59392
800029fc:	c0 cf       	rcall	80002814 <usart_write_line>
800029fe:	d8 02       	popm	pc

80002a00 <sd_mmc_spi_read_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA read transfer
//! page programming.
//!
void sd_mmc_spi_read_close_PDCA (void)
{
80002a00:	d4 01       	pushm	lr

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002a02:	e0 6b 00 ff 	mov	r11,255
80002a06:	fe 7c 28 00 	mov	r12,-55296
80002a0a:	fe b0 fd 8a 	rcall	8000251e <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80002a0e:	e0 6b 00 ff 	mov	r11,255
80002a12:	fe 7c 28 00 	mov	r12,-55296
80002a16:	fe b0 fd 84 	rcall	8000251e <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002a1a:	e0 6b 00 ff 	mov	r11,255
80002a1e:	fe 7c 28 00 	mov	r12,-55296
80002a22:	fe b0 fd 7e 	rcall	8000251e <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80002a26:	e0 6b 00 ff 	mov	r11,255
80002a2a:	fe 7c 28 00 	mov	r12,-55296
80002a2e:	fe b0 fd 78 	rcall	8000251e <spi_write>

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002a32:	30 1b       	mov	r11,1
80002a34:	fe 7c 28 00 	mov	r12,-55296
80002a38:	fe b0 fd 07 	rcall	80002446 <spi_unselectChip>

}
80002a3c:	d8 02       	popm	pc
80002a3e:	d7 03       	nop

80002a40 <adc_poll>:
   spi_unselectChip( ADC_SPI, ADC_SPI_NPCS );
   for(i=0; i<100; i++) { ;; }
}

// perform conversion, check for changes, and post events
void adc_poll(void) {
80002a40:	eb cd 40 c0 	pushm	r6-r7,lr
80002a44:	20 1d       	sub	sp,4

  //  print_dbg("\r\nsetting up channel 0 with command: ");
  //  print_dbg_ulong(cmd);

  // write to set up channel 0
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80002a46:	30 1b       	mov	r11,1
80002a48:	fe 7c 24 00 	mov	r12,-56320
80002a4c:	fe b0 fc d5 	rcall	800023f6 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80002a50:	e0 6b 83 10 	mov	r11,33552
80002a54:	fe 7c 24 00 	mov	r12,-56320
80002a58:	fe b0 fd 63 	rcall	8000251e <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80002a5c:	30 1b       	mov	r11,1
80002a5e:	fe 7c 24 00 	mov	r12,-56320
80002a62:	fe b0 fc f2 	rcall	80002446 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80002a66:	30 1b       	mov	r11,1
80002a68:	fe 7c 24 00 	mov	r12,-56320
80002a6c:	fe b0 fc c5 	rcall	800023f6 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80002a70:	e0 6b 87 10 	mov	r11,34576
80002a74:	fe 7c 24 00 	mov	r12,-56320
80002a78:	fe b0 fd 53 	rcall	8000251e <spi_write>
  spi_read(ADC_SPI, &val);
80002a7c:	fa c6 ff fe 	sub	r6,sp,-2
80002a80:	fe 7c 24 00 	mov	r12,-56320
80002a84:	0c 9b       	mov	r11,r6
80002a86:	fe b0 fd 5a 	rcall	8000253a <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80002a8a:	30 1b       	mov	r11,1
80002a8c:	fe 7c 24 00 	mov	r12,-56320
80002a90:	fe b0 fc db 	rcall	80002446 <spi_unselectChip>
  // values need lshift because of extremely weird timing...
  (*dst)[0] = (val >> 1) & 0xfff;
80002a94:	9a 98       	ld.uh	r8,sp[0x2]
80002a96:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80002a9a:	e0 67 01 04 	mov	r7,260
80002a9e:	30 1b       	mov	r11,1
  //  print_dbg("\r\n got channel 0 data: ");
  //  print_dbg_ulong(val);

  // get channel 1, setup channel 2
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80002aa0:	ae 08       	st.h	r7[0x0],r8
80002aa2:	fe 7c 24 00 	mov	r12,-56320
80002aa6:	fe b0 fc a8 	rcall	800023f6 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80002aaa:	e0 6b 8b 10 	mov	r11,35600
80002aae:	fe 7c 24 00 	mov	r12,-56320
80002ab2:	fe b0 fd 36 	rcall	8000251e <spi_write>
  spi_read(ADC_SPI, &val);
80002ab6:	0c 9b       	mov	r11,r6
80002ab8:	fe 7c 24 00 	mov	r12,-56320
80002abc:	fe b0 fd 3f 	rcall	8000253a <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80002ac0:	30 1b       	mov	r11,1
80002ac2:	fe 7c 24 00 	mov	r12,-56320
80002ac6:	fe b0 fc c0 	rcall	80002446 <spi_unselectChip>
  (*dst)[1] = (val >> 1) & 0xfff;
80002aca:	9a 98       	ld.uh	r8,sp[0x2]
80002acc:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80002ad0:	30 1b       	mov	r11,1

  // get channel 2, setup channel 3
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80002ad2:	ae 18       	st.h	r7[0x2],r8
80002ad4:	fe 7c 24 00 	mov	r12,-56320
80002ad8:	fe b0 fc 8f 	rcall	800023f6 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80002adc:	e0 6b 8f 10 	mov	r11,36624
80002ae0:	fe 7c 24 00 	mov	r12,-56320
80002ae4:	fe b0 fd 1d 	rcall	8000251e <spi_write>
  spi_read(ADC_SPI, &val);
80002ae8:	0c 9b       	mov	r11,r6
80002aea:	fe 7c 24 00 	mov	r12,-56320
80002aee:	fe b0 fd 26 	rcall	8000253a <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80002af2:	30 1b       	mov	r11,1
80002af4:	fe 7c 24 00 	mov	r12,-56320
80002af8:	fe b0 fc a7 	rcall	80002446 <spi_unselectChip>
  (*dst)[2] = (val >> 1) & 0xfff;
80002afc:	9a 98       	ld.uh	r8,sp[0x2]
80002afe:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80002b02:	30 1b       	mov	r11,1
  
  // get channel 3, dummy write
  cmd = ( AD7927_CMD_BASE ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80002b04:	ae 28       	st.h	r7[0x4],r8
80002b06:	fe 7c 24 00 	mov	r12,-56320
80002b0a:	fe b0 fc 76 	rcall	800023f6 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80002b0e:	e0 6b 83 10 	mov	r11,33552
80002b12:	fe 7c 24 00 	mov	r12,-56320
80002b16:	fe b0 fd 04 	rcall	8000251e <spi_write>
  spi_read(ADC_SPI, &val);
80002b1a:	0c 9b       	mov	r11,r6
80002b1c:	fe 7c 24 00 	mov	r12,-56320
80002b20:	fe b0 fd 0d 	rcall	8000253a <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80002b24:	30 1b       	mov	r11,1
80002b26:	fe 7c 24 00 	mov	r12,-56320
80002b2a:	fe b0 fc 8e 	rcall	80002446 <spi_unselectChip>
  (*dst)[3] = (val >> 1) & 0xfff;
80002b2e:	9a 98       	ld.uh	r8,sp[0x2]
80002b30:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80002b34:	ae 38       	st.h	r7[0x6],r8
80002b36:	e0 66 00 f4 	mov	r6,244
80002b3a:	8e 09       	ld.sh	r9,r7[0x0]
80002b3c:	8c 08       	ld.sh	r8,r6[0x0]
80002b3e:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
80002b42:	c0 90       	breq	80002b54 <adc_poll+0x114>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
80002b44:	e0 68 00 fc 	mov	r8,252
      post_event(&e);
80002b48:	ac 09       	st.h	r6[0x0],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80002b4a:	91 19       	st.w	r8[0x4],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80002b4c:	30 e9       	mov	r9,14
80002b4e:	10 9c       	mov	r12,r8
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80002b50:	91 09       	st.w	r8[0x0],r9
80002b52:	ca 5c       	rcall	80002c9c <post_event>
80002b54:	8e 19       	ld.sh	r9,r7[0x2]
80002b56:	8c 18       	ld.sh	r8,r6[0x2]
80002b58:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
80002b5c:	c0 b0       	breq	80002b72 <adc_poll+0x132>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80002b5e:	e0 68 00 f4 	mov	r8,244
80002b62:	b0 19       	st.h	r8[0x2],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80002b64:	e0 68 00 fc 	mov	r8,252
80002b68:	91 19       	st.w	r8[0x4],r9
80002b6a:	30 f9       	mov	r9,15
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80002b6c:	10 9c       	mov	r12,r8
80002b6e:	91 09       	st.w	r8[0x0],r9
80002b70:	c9 6c       	rcall	80002c9c <post_event>
80002b72:	8e 29       	ld.sh	r9,r7[0x4]
80002b74:	8c 28       	ld.sh	r8,r6[0x4]
      adcOldVal[i] = adcVal[i];
80002b76:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80002b7a:	c0 b0       	breq	80002b90 <adc_poll+0x150>
      e.eventData = (S16)(adcVal[i]);
80002b7c:	e0 68 00 f4 	mov	r8,244
      post_event(&e);
80002b80:	b0 29       	st.h	r8[0x4],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80002b82:	e0 68 00 fc 	mov	r8,252
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80002b86:	91 19       	st.w	r8[0x4],r9
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80002b88:	31 09       	mov	r9,16
80002b8a:	10 9c       	mov	r12,r8
80002b8c:	91 09       	st.w	r8[0x0],r9
80002b8e:	c8 7c       	rcall	80002c9c <post_event>
80002b90:	8e 39       	ld.sh	r9,r7[0x6]
      adcOldVal[i] = adcVal[i];
80002b92:	8c 38       	ld.sh	r8,r6[0x6]
80002b94:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
80002b98:	c0 b0       	breq	80002bae <adc_poll+0x16e>

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80002b9a:	e0 68 00 f4 	mov	r8,244
80002b9e:	b0 39       	st.h	r8[0x6],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80002ba0:	e0 68 00 fc 	mov	r8,252
    }
  }
}
80002ba4:	91 19       	st.w	r8[0x4],r9
80002ba6:	31 19       	mov	r9,17
80002ba8:	10 9c       	mov	r12,r8
80002baa:	91 09       	st.w	r8[0x0],r9
80002bac:	c7 8c       	rcall	80002c9c <post_event>
80002bae:	2f fd       	sub	sp,-4
80002bb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80002bb4 <init_app_timers>:
    //    gpio_tgl_gpio_pin(AVR32_PIN_PA23);
    //    gpio_tgl_gpio_pin(AVR32_PIN_PA24);
}

//====== external
void init_app_timers(void) {
80002bb4:	d4 01       	pushm	lr
  set_timer(&screenTimer, eScreenTimerTag, 15,   &screen_timer_callback, 1);
80002bb6:	30 18       	mov	r8,1
80002bb8:	fe c9 ff 5c 	sub	r9,pc,-164
80002bbc:	30 fa       	mov	r10,15
80002bbe:	30 0b       	mov	r11,0
80002bc0:	e0 6c 01 24 	mov	r12,292
  set_timer(&encTimer,    eEncTimerTag,    5,   &enc_timer_callback,    1);
80002bc4:	e0 a0 0d ce 	rcall	80004760 <set_timer>
80002bc8:	30 18       	mov	r8,1
80002bca:	fe c9 ff d2 	sub	r9,pc,-46
80002bce:	10 9b       	mov	r11,r8
80002bd0:	30 5a       	mov	r10,5
  set_timer(&adcTimer,    eAdcTimerTag,    5,   &adc_timer_callback,    1);
80002bd2:	e0 6c 01 38 	mov	r12,312
80002bd6:	e0 a0 0d c5 	rcall	80004760 <set_timer>
80002bda:	30 18       	mov	r8,1
80002bdc:	fe c9 ff ec 	sub	r9,pc,-20
  // test:
  //    set_timer(&heartbeatTimer, eHeartbeatTimerTag, 100, &heartbeat_callback, 1);
}
80002be0:	30 5a       	mov	r10,5
80002be2:	30 3b       	mov	r11,3
80002be4:	e0 6c 01 10 	mov	r12,272
80002be8:	e0 a0 0d bc 	rcall	80004760 <set_timer>
80002bec:	d8 02       	popm	pc
80002bee:	d7 03       	nop

80002bf0 <adc_timer_callback>:
80002bf0:	d4 01       	pushm	lr
80002bf2:	c2 7f       	rcall	80002a40 <adc_poll>
80002bf4:	d8 02       	popm	pc
80002bf6:	d7 03       	nop

80002bf8 <enc_timer_callback>:
80002bf8:	eb cd 40 f8 	pushm	r3-r7,lr
80002bfc:	30 08       	mov	r8,0
80002bfe:	e0 66 01 0c 	mov	r6,268
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
80002c02:	e0 67 14 7c 	mov	r7,5244
80002c06:	ac 88       	st.b	r6[0x0],r8
80002c08:	e0 65 01 4c 	mov	r5,332
    val = enc[i].val;
80002c0c:	30 08       	mov	r8,0
80002c0e:	30 34       	mov	r4,3
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
      e.eventType = enc[i].event;
      e.eventData = val;
      enc[i].val = 0;
80002c10:	10 93       	mov	r3,r8
80002c12:	f0 08 00 19 	add	r9,r8,r8<<0x1
// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80002c16:	f2 ce ff ff 	sub	lr,r9,-1

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
80002c1a:	ee 0e 00 2b 	add	r11,r7,lr<<0x2
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80002c1e:	ee 0e 04 2a 	ld.sh	r10,r7[lr<<0x2]
80002c22:	96 1b       	ld.sh	r11,r11[0x2]
80002c24:	f6 0c 11 00 	rsub	r12,r11,0
80002c28:	f6 0a 19 00 	cp.h	r10,r11
80002c2c:	e0 89 00 04 	brgt	80002c34 <enc_timer_callback+0x3c>
      e.eventType = enc[i].event;
80002c30:	18 3a       	cp.w	r10,r12
80002c32:	c0 c4       	brge	80002c4a <enc_timer_callback+0x52>
      e.eventData = val;
80002c34:	ee 09 00 29 	add	r9,r7,r9<<0x2
      enc[i].val = 0;
80002c38:	72 28       	ld.w	r8,r9[0x8]
80002c3a:	8b 1a       	st.w	r5[0x4],r10
      post_event(&e);
80002c3c:	8b 08       	st.w	r5[0x0],r8
80002c3e:	ee 0e 0a 23 	st.h	r7[lr<<0x2],r3
80002c42:	e0 6c 01 4c 	mov	r12,332
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
80002c46:	c2 bc       	rcall	80002c9c <post_event>
80002c48:	0d 88       	ld.ub	r8,r6[0x0]
80002c4a:	2f f8       	sub	r8,-1
80002c4c:	5c 58       	castu.b	r8
80002c4e:	ac 88       	st.b	r6[0x0],r8
80002c50:	e8 08 18 00 	cp.b	r8,r4
      e.eventData = val;
      enc[i].val = 0;
      post_event(&e);
    }
  }
}
80002c54:	fe 98 ff df 	brls	80002c12 <enc_timer_callback+0x1a>
80002c58:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80002c5c <screen_timer_callback>:
80002c5c:	d4 01       	pushm	lr
80002c5e:	e0 68 02 60 	mov	r8,608
80002c62:	11 88       	ld.ub	r8,r8[0x0]
80002c64:	58 08       	cp.w	r8,0
80002c66:	c0 70       	breq	80002c74 <screen_timer_callback+0x18>
  print_dbg(" \lcycles:"); print_dbg_ulong(cyclesNow - cycles);
  cycles = cyclesNow;
  */

  if(refresh) {
    e.eventType = kEventRefresh;
80002c68:	e0 68 01 4c 	mov	r8,332
80002c6c:	31 29       	mov	r9,18
    post_event(&e);
80002c6e:	10 9c       	mov	r12,r8
80002c70:	91 09       	st.w	r8[0x0],r9
80002c72:	c1 5c       	rcall	80002c9c <post_event>
80002c74:	d8 02       	popm	pc
80002c76:	d7 03       	nop

80002c78 <init_events>:
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
80002c78:	e0 6a 01 58 	mov	r10,344
80002c7c:	30 08       	mov	r8,0
  getIdx = 0;
80002c7e:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
80002c80:	e0 6a 01 5c 	mov	r10,348
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
  getIdx = 0;
80002c84:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
80002c86:	95 08       	st.w	r10[0x0],r8
80002c88:	e0 68 01 60 	mov	r8,352
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
80002c8c:	f0 ca ff 00 	sub	r10,r8,-256

  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80002c90:	91 09       	st.w	r8[0x0],r9
80002c92:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
  }
}
80002c94:	2f 88       	sub	r8,-8
80002c96:	14 38       	cp.w	r8,r10
80002c98:	cf c1       	brne	80002c90 <init_events+0x18>
80002c9a:	5e fc       	retal	r12

80002c9c <post_event>:
80002c9c:	d4 01       	pushm	lr
80002c9e:	e1 bb 00 00 	mfsr	r11,0x0
80002ca2:	d3 23       	ssrf	0x12
    print_dbg_ulong(e->eventType); print_dbg(".");
  } 
  */

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
80002ca4:	e0 69 01 58 	mov	r9,344
  INCR_EVENT_INDEX( putIdx );
80002ca8:	72 0a       	ld.w	r10,r9[0x0]
80002caa:	f4 c8 ff ff 	sub	r8,r10,-1
80002cae:	93 08       	st.w	r9[0x0],r8
80002cb0:	e0 48 00 20 	cp.w	r8,32
80002cb4:	f9 b8 00 00 	moveq	r8,0
80002cb8:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
80002cbc:	e0 6e 01 5c 	mov	lr,348
80002cc0:	7c 0e       	ld.w	lr,lr[0x0]
    sysEvents[ putIdx ].eventType = e->eventType;
80002cc2:	10 3e       	cp.w	lr,r8
    sysEvents[ putIdx ].eventData = e->eventData;
80002cc4:	c1 00       	breq	80002ce4 <post_event+0x48>
80002cc6:	e0 69 01 60 	mov	r9,352
80002cca:	f2 08 00 3a 	add	r10,r9,r8<<0x3
80002cce:	78 1e       	ld.w	lr,r12[0x4]

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
  if ( putIdx != getIdx  ) {
    sysEvents[ putIdx ].eventType = e->eventType;
80002cd0:	95 1e       	st.w	r10[0x4],lr
80002cd2:	78 0a       	ld.w	r10,r12[0x0]
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
  }
  
  if (fReenableInterrupts) {
80002cd4:	30 1c       	mov	r12,1
80002cd6:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
    Enable_interrupt_level( TIMER_INT_LEVEL );
80002cda:	ed bb 00 12 	bld	r11,0x12
    sysEvents[ putIdx ].eventType = e->eventType;
    sysEvents[ putIdx ].eventData = e->eventData;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80002cde:	c0 20       	breq	80002ce2 <post_event+0x46>
80002ce0:	d5 23       	csrf	0x12
80002ce2:	d8 02       	popm	pc
80002ce4:	93 0a       	st.w	r9[0x0],r10
80002ce6:	30 0c       	mov	r12,0
80002ce8:	cf 9b       	rjmp	80002cda <post_event+0x3e>
80002cea:	d7 03       	nop

80002cec <get_next_event>:
80002cec:	18 99       	mov	r9,r12
80002cee:	e1 bb 00 00 	mfsr	r11,0x0
// Returns non-zero if an event was available
bool get_next_event( event_t *e ) {
  bool status;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );
80002cf2:	d3 23       	ssrf	0x12
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80002cf4:	e0 68 01 58 	mov	r8,344
80002cf8:	e0 6a 01 5c 	mov	r10,348
80002cfc:	70 0c       	ld.w	r12,r8[0x0]
80002cfe:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
80002d00:	18 38       	cp.w	r8,r12
80002d02:	c1 80       	breq	80002d32 <get_next_event+0x46>
80002d04:	2f f8       	sub	r8,-1
80002d06:	95 08       	st.w	r10[0x0],r8
80002d08:	e0 48 00 20 	cp.w	r8,32
80002d0c:	f9 b8 00 00 	moveq	r8,0
    e->eventType = sysEvents[ getIdx ].eventType;
80002d10:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->eventData = sysEvents[ getIdx ].eventData;
80002d14:	e0 6a 01 60 	mov	r10,352
  Disable_interrupt_level( TIMER_INT_LEVEL );
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
80002d18:	f4 08 00 3c 	add	r12,r10,r8<<0x3
80002d1c:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
    e->eventData = sysEvents[ getIdx ].eventData;
80002d20:	78 1c       	ld.w	r12,r12[0x4]
    e->eventType  = 0xff;
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80002d22:	93 08       	st.w	r9[0x0],r8
80002d24:	93 1c       	st.w	r9[0x4],r12
80002d26:	30 1c       	mov	r12,1
    Enable_interrupt_level( TIMER_INT_LEVEL );
80002d28:	ed bb 00 12 	bld	r11,0x12
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
    e->eventData = 0;
80002d2c:	5e 0c       	reteq	r12
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80002d2e:	d5 23       	csrf	0x12
80002d30:	5e fc       	retal	r12
    e->eventData = 0;
80002d32:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80002d34:	e0 68 00 ff 	mov	r8,255
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80002d38:	93 1c       	st.w	r9[0x4],r12
80002d3a:	93 08       	st.w	r9[0x0],r8
80002d3c:	ed bb 00 12 	bld	r11,0x12
80002d40:	5e 0c       	reteq	r12
80002d42:	cf 6b       	rjmp	80002d2e <get_next_event+0x42>

80002d44 <process_enc>:
  enc[3].thresh = 40;

}

// post events based on encoder movements
void process_enc( const U8 idx) {
80002d44:	eb cd 40 f8 	pushm	r3-r7,lr
  //event_t e;  
  // S8 val = 0;
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);
80002d48:	e0 65 14 7c 	mov	r5,5244
80002d4c:	f8 0c 00 14 	add	r4,r12,r12<<0x1
80002d50:	ea 04 00 26 	add	r6,r5,r4<<0x2
80002d54:	0c 97       	mov	r7,r6
80002d56:	0f 3c       	ld.ub	r12,r7++
80002d58:	fe b0 f9 67 	rcall	80002026 <gpio_get_pin_value>
80002d5c:	18 93       	mov	r3,r12
80002d5e:	0f 8c       	ld.ub	r12,r7[0x0]
80002d60:	fe b0 f9 63 	rcall	80002026 <gpio_get_pin_value>
80002d64:	0d a8       	ld.ub	r8,r6[0x2]
80002d66:	e6 0c 00 13 	add	r3,r3,r12<<0x1

  if (pos != enc[idx].pos) {
80002d6a:	5c 53       	castu.b	r3
80002d6c:	e6 08 18 00 	cp.b	r8,r3
    enc[idx].val += enc_map[enc[idx].pos][pos];
80002d70:	c0 e0       	breq	80002d8c <process_enc+0x48>
    enc[idx].pos = pos;
80002d72:	2f f4       	sub	r4,-1
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);

  if (pos != enc[idx].pos) {
    enc[idx].val += enc_map[enc[idx].pos][pos];
80002d74:	ac a3       	st.b	r6[0x2],r3
80002d76:	ea 04 04 29 	ld.sh	r9,r5[r4<<0x2]
80002d7a:	e6 08 00 23 	add	r3,r3,r8<<0x2
80002d7e:	fe c8 e0 de 	sub	r8,pc,-7970
80002d82:	f0 03 06 08 	ld.sb	r8,r8[r3]
80002d86:	12 08       	add	r8,r9
80002d88:	ea 04 0a 28 	st.h	r5[r4<<0x2],r8
80002d8c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80002d90 <init_encoders>:
80002d90:	eb cd 40 e0 	pushm	r5-r7,lr
80002d94:	32 28       	mov	r8,34
80002d96:	e0 67 14 7c 	mov	r7,5244
// initialize encoder positions
void init_encoders(void) {
  U8 i;
  // constant data
  enc[0].pin[0] = ENC0_S0_PIN;
  enc[0].pin[1] = ENC0_S1_PIN;
80002d9a:	ae 88       	st.b	r7[0x0],r8
80002d9c:	32 38       	mov	r8,35
  enc[0].event = kEventEncoder0;
80002d9e:	ae 98       	st.b	r7[0x1],r8
80002da0:	30 a8       	mov	r8,10
  enc[1].pin[0] = ENC1_S0_PIN;
80002da2:	8f 28       	st.w	r7[0x8],r8
80002da4:	32 48       	mov	r8,36
80002da6:	ef 68 00 0c 	st.b	r7[12],r8
  enc[1].pin[1] = ENC1_S1_PIN;
80002daa:	32 58       	mov	r8,37
80002dac:	ef 68 00 0d 	st.b	r7[13],r8
  enc[1].event = kEventEncoder1;
80002db0:	30 b8       	mov	r8,11
  enc[2].pin[0] = ENC2_S0_PIN;
80002db2:	8f 58       	st.w	r7[0x14],r8
80002db4:	32 68       	mov	r8,38
80002db6:	ef 68 00 18 	st.b	r7[24],r8
  enc[2].pin[1] = ENC2_S1_PIN;
80002dba:	32 78       	mov	r8,39
80002dbc:	ef 68 00 19 	st.b	r7[25],r8
  enc[2].event = kEventEncoder2;
80002dc0:	30 c8       	mov	r8,12
  enc[3].pin[0] = ENC3_S0_PIN;
80002dc2:	8f 88       	st.w	r7[0x20],r8
80002dc4:	32 88       	mov	r8,40
80002dc6:	ef 68 00 24 	st.b	r7[36],r8
  enc[3].pin[1] = ENC3_S1_PIN;
80002dca:	32 98       	mov	r8,41
80002dcc:	ef 68 00 25 	st.b	r7[37],r8
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80002dd0:	30 d8       	mov	r8,13
  enc[2].pin[0] = ENC2_S0_PIN;
  enc[2].pin[1] = ENC2_S1_PIN;
  enc[2].event = kEventEncoder2;
  enc[3].pin[0] = ENC3_S0_PIN;
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
80002dd2:	32 2c       	mov	r12,34
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80002dd4:	8f b8       	st.w	r7[0x2c],r8
80002dd6:	fe b0 f9 28 	rcall	80002026 <gpio_get_pin_value>
80002dda:	18 96       	mov	r6,r12
80002ddc:	0f 9c       	ld.ub	r12,r7[0x1]
80002dde:	fe b0 f9 24 	rcall	80002026 <gpio_get_pin_value>
80002de2:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
80002de6:	30 f6       	mov	r6,15
    enc[i].thresh = 15;
80002de8:	ae ac       	st.b	r7[0x2],r12
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80002dea:	ae 36       	st.h	r7[0x6],r6
80002dec:	ef 3c 00 0c 	ld.ub	r12,r7[12]
80002df0:	fe b0 f9 1b 	rcall	80002026 <gpio_get_pin_value>
80002df4:	18 95       	mov	r5,r12
80002df6:	ef 3c 00 0d 	ld.ub	r12,r7[13]
80002dfa:	fe b0 f9 16 	rcall	80002026 <gpio_get_pin_value>
80002dfe:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80002e02:	ef 56 00 12 	st.h	r7[18],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80002e06:	ef 6c 00 0e 	st.b	r7[14],r12
80002e0a:	ef 3c 00 18 	ld.ub	r12,r7[24]
80002e0e:	fe b0 f9 0c 	rcall	80002026 <gpio_get_pin_value>
80002e12:	18 95       	mov	r5,r12
80002e14:	ef 3c 00 19 	ld.ub	r12,r7[25]
80002e18:	fe b0 f9 07 	rcall	80002026 <gpio_get_pin_value>
80002e1c:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80002e20:	ef 56 00 1e 	st.h	r7[30],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80002e24:	ef 6c 00 1a 	st.b	r7[26],r12
80002e28:	ef 3c 00 24 	ld.ub	r12,r7[36]
80002e2c:	fe b0 f8 fd 	rcall	80002026 <gpio_get_pin_value>
80002e30:	18 96       	mov	r6,r12
80002e32:	ef 3c 00 25 	ld.ub	r12,r7[37]
80002e36:	fe b0 f8 f8 	rcall	80002026 <gpio_get_pin_value>
80002e3a:	32 88       	mov	r8,40
80002e3c:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
    enc[i].thresh = 15;
  }

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;
80002e40:	ef 58 00 2a 	st.h	r7[42],r8
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80002e44:	ef 6c 00 26 	st.b	r7[38],r12

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;

}
80002e48:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80002e4c <init_clocks>:
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
}


// initialize clocks
void init_clocks(void) {
80002e4c:	d4 01       	pushm	lr
  /// from 251e...
  // Switch to OSC0 to speed up  booting
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pm_switch_to_osc0( &AVR32_PM, FOSC0, OSC0_STARTUP );
80002e4e:	30 3a       	mov	r10,3
80002e50:	e0 6b 1b 00 	mov	r11,6912
80002e54:	ea 1b 00 b7 	orh	r11,0xb7
80002e58:	fe 7c 0c 00 	mov	r12,-62464
80002e5c:	fe b0 fa 5a 	rcall	80002310 <pm_switch_to_osc0>

  // Set PLL0 (fed from OSC0 = 12 MHz) to 132 MHz
  pm_pll_setup( &AVR32_PM,
80002e60:	31 0e       	mov	lr,16
80002e62:	30 08       	mov	r8,0
80002e64:	1a de       	st.w	--sp,lr
80002e66:	10 9b       	mov	r11,r8
80002e68:	30 19       	mov	r9,1
80002e6a:	30 aa       	mov	r10,10
80002e6c:	fe 7c 0c 00 	mov	r12,-62464
80002e70:	fe b0 fa 22 	rcall	800022b4 <pm_pll_setup>
		0,   // osc.
		16 ); // lockcount.

  // Set PLL operating range and divider (fpll = fvco/2)
  // -> PLL0 output = 66 MHz
  pm_pll_set_option( &AVR32_PM,
80002e74:	30 08       	mov	r8,0
80002e76:	30 19       	mov	r9,1
80002e78:	10 9b       	mov	r11,r8
80002e7a:	12 9a       	mov	r10,r9
80002e7c:	fe 7c 0c 00 	mov	r12,-62464
80002e80:	fe b0 fa 2b 	rcall	800022d6 <pm_pll_set_option>
		     1,  // pll_freq.
		     1,  // pll_div2.
		     0 ); // pll_wbwdisable.

  // start PLL0 and wait for the lock
  pm_pll_enable( &AVR32_PM, 0 );
80002e84:	30 0b       	mov	r11,0
80002e86:	fe 7c 0c 00 	mov	r12,-62464
80002e8a:	fe b0 fa 32 	rcall	800022ee <pm_pll_enable>
  pm_wait_for_pll0_locked( &AVR32_PM );
80002e8e:	fe 7c 0c 00 	mov	r12,-62464
80002e92:	fe b0 fa 35 	rcall	800022fc <pm_wait_for_pll0_locked>

  // By default, all peripheral clocks to run at master clock rate

  // Set one waitstate for the flash.  Necessary for > 33MHz CPU freq.
  flashc_set_wait_state( 1 );
80002e96:	30 1c       	mov	r12,1
80002e98:	fe b0 f8 b6 	rcall	80002004 <flashc_set_wait_state>

  // Switch to PLL0 as the master clock
  pm_switch_to_clock( &AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0) ;
80002e9c:	30 2b       	mov	r11,2
80002e9e:	fe 7c 0c 00 	mov	r12,-62464
80002ea2:	fe b0 fa 32 	rcall	80002306 <pm_switch_to_clock>
80002ea6:	2f fd       	sub	sp,-4
#endif

  // intitialize millisecond delay engine
  delay_init(sysclk_get_cpu_hz());
  */
}
80002ea8:	d8 02       	popm	pc
80002eaa:	d7 03       	nop

80002eac <init_bfin_resources>:
80002eac:	eb cd 40 80 	pushm	r7,lr
80002eb0:	20 4d       	sub	sp,16
80002eb2:	fe c8 e1 fa 	sub	r8,pc,-7686
80002eb6:	f0 ea 00 08 	ld.d	r10,r8[8]
80002eba:	fa eb 00 08 	st.d	sp[8],r10
80002ebe:	f0 e8 00 00 	ld.d	r8,r8[0]
80002ec2:	1a 97       	mov	r7,sp
80002ec4:	fa e9 00 00 	st.d	sp[0],r8
    .spi_mode     = 1,
    .modfdis      = 1
  };

  // assign pins to SPI.
  gpio_enable_module(BFIN_SPI_GPIO_MAP,
80002ec8:	30 5b       	mov	r11,5
80002eca:	fe cc e1 e2 	sub	r12,pc,-7710
		     sizeof(BFIN_SPI_GPIO_MAP) / sizeof(BFIN_SPI_GPIO_MAP[0]));

  // intialize as master
  spi_initMaster(BFIN_SPI, &spiOptions);
80002ece:	fe b0 f9 0c 	rcall	800020e6 <gpio_enable_module>
80002ed2:	1a 9b       	mov	r11,sp
80002ed4:	fe 7c 24 00 	mov	r12,-56320

  // set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(BFIN_SPI, 0, 0, 0);
80002ed8:	fe b0 fa 5d 	rcall	80002392 <spi_initMaster>
80002edc:	30 09       	mov	r9,0
80002ede:	fe 7c 24 00 	mov	r12,-56320
80002ee2:	12 9a       	mov	r10,r9
80002ee4:	12 9b       	mov	r11,r9

  // enable SPI.
  spi_enable(BFIN_SPI);
80002ee6:	fe b0 fa 73 	rcall	800023cc <spi_selectionMode>
80002eea:	fe 7c 24 00 	mov	r12,-56320

  // intialize the chip register
  spi_setupChipReg(BFIN_SPI, &spiOptions, FPBA_HZ);
80002eee:	fe b0 fb 15 	rcall	80002518 <spi_enable>
80002ef2:	1a 9b       	mov	r11,sp
80002ef4:	e0 6a 14 80 	mov	r10,5248
80002ef8:	ea 1a 03 ef 	orh	r10,0x3ef
80002efc:	fe 7c 24 00 	mov	r12,-56320
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
80002f00:	fe b0 fa b6 	rcall	8000246c <spi_setupChipReg>
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
  spiOptions.spck_delay = 40;	// delay between CS and transfer
  spiOptions.trans_delay = 10;	// delay between transfers
  spiOptions.stay_act = 1;
80002f04:	30 18       	mov	r8,1
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
80002f06:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
80002f0a:	ba 88       	st.b	sp[0x0],r8
80002f0c:	e0 68 96 80 	mov	r8,38528
80002f10:	ea 18 00 98 	orh	r8,0x98
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
80002f14:	50 18       	stdsp	sp[0x4],r8
80002f16:	31 08       	mov	r8,16
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
80002f18:	fb 68 00 08 	st.b	sp[8],r8
80002f1c:	30 28       	mov	r8,2
  spiOptions.spck_delay = 40;	// delay between CS and transfer
80002f1e:	fb 68 00 0c 	st.b	sp[12],r8
80002f22:	32 88       	mov	r8,40
  spiOptions.trans_delay = 10;	// delay between transfers
80002f24:	fb 68 00 09 	st.b	sp[9],r8
80002f28:	30 a8       	mov	r8,10
  spiOptions.stay_act = 1;
  spiOptions.modfdis = 0;
80002f2a:	fb 68 00 0a 	st.b	sp[10],r8
80002f2e:	30 08       	mov	r8,0
80002f30:	1a 9b       	mov	r11,sp
  spi_setupChipReg( BFIN_SPI, &spiOptions, FPBA_HZ );
80002f32:	fb 68 00 0d 	st.b	sp[13],r8
80002f36:	e0 6a 14 80 	mov	r10,5248
80002f3a:	ea 1a 03 ef 	orh	r10,0x3ef
80002f3e:	fe 7c 24 00 	mov	r12,-56320
  
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
80002f42:	fe b0 fa 95 	rcall	8000246c <spi_setupChipReg>
80002f46:	30 6c       	mov	r12,6
}
80002f48:	fe b0 f8 65 	rcall	80002012 <gpio_enable_pin_pull_up>
80002f4c:	2f cd       	sub	sp,-16
80002f4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f52:	d7 03       	nop

80002f54 <init_gpio>:
80002f54:	d4 01       	pushm	lr
80002f56:	32 2c       	mov	r12,34
80002f58:	fe b0 f8 5d 	rcall	80002012 <gpio_enable_pin_pull_up>
80002f5c:	32 3c       	mov	r12,35
80002f5e:	fe b0 f8 5a 	rcall	80002012 <gpio_enable_pin_pull_up>
80002f62:	32 4c       	mov	r12,36
80002f64:	fe b0 f8 57 	rcall	80002012 <gpio_enable_pin_pull_up>
80002f68:	32 5c       	mov	r12,37
80002f6a:	fe b0 f8 54 	rcall	80002012 <gpio_enable_pin_pull_up>
80002f6e:	32 6c       	mov	r12,38
void init_gpio(void) {
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80002f70:	fe b0 f8 51 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
80002f74:	32 7c       	mov	r12,39
80002f76:	fe b0 f8 4e 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
80002f7a:	32 8c       	mov	r12,40
80002f7c:	fe b0 f8 4b 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80002f80:	32 9c       	mov	r12,41
80002f82:	fe b0 f8 48 	rcall	80002012 <gpio_enable_pin_pull_up>

  gpio_enable_pin_pull_up(SW0_PIN);
80002f86:	31 9c       	mov	r12,25
80002f88:	fe b0 f8 45 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW1_PIN);
80002f8c:	31 ac       	mov	r12,26
80002f8e:	fe b0 f8 42 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
80002f92:	31 bc       	mov	r12,27
80002f94:	fe b0 f8 3f 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW3_PIN);
80002f98:	31 cc       	mov	r12,28
80002f9a:	fe b0 f8 3c 	rcall	80002012 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW_EDIT_PIN);
80002f9e:	31 8c       	mov	r12,24
80002fa0:	fe b0 f8 39 	rcall	80002012 <gpio_enable_pin_pull_up>
}
80002fa4:	d8 02       	popm	pc
80002fa6:	d7 03       	nop

80002fa8 <init_tc>:
80002fa8:	eb cd 40 80 	pushm	r7,lr
    .cpas  = 0,
    .lovrs = 0,
    .covfs = 0
  };
  // Initialize the timer/counter.
  tc_init_waveform(tc, &waveform_opt);
80002fac:	fe cb e2 e0 	sub	r11,pc,-7456
80002fb0:	18 97       	mov	r7,r12
80002fb2:	fe b0 fa d5 	rcall	8000255c <tc_init_waveform>
  // set timer compare trigger.
  // we want it to overflow and generate an interrupt every 1 ms
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000

  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
80002fb6:	e0 6a 02 03 	mov	r10,515
80002fba:	30 0b       	mov	r11,0
80002fbc:	0e 9c       	mov	r12,r7
80002fbe:	fe b0 fb 30 	rcall	8000261e <tc_write_rc>
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80002fc2:	30 0b       	mov	r11,0
80002fc4:	fe ca e2 fc 	sub	r10,pc,-7428
80002fc8:	0e 9c       	mov	r12,r7
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80002fca:	fe b0 fb 46 	rcall	80002656 <tc_configure_interrupts>
80002fce:	0e 9c       	mov	r12,r7
80002fd0:	30 0b       	mov	r11,0

}
80002fd2:	fe b0 fb 14 	rcall	800025fa <tc_start>
80002fd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fda:	d7 03       	nop

80002fdc <init_oled_usart>:
80002fdc:	d4 01       	pushm	lr
80002fde:	30 4b       	mov	r11,4
80002fe0:	fe cc e3 0c 	sub	r12,pc,-7412
80002fe4:	fe b0 f8 81 	rcall	800020e6 <gpio_enable_module>
80002fe8:	e0 6a 1b 00 	mov	r10,6912
80002fec:	ea 1a 00 b7 	orh	r10,0xb7

  // Assign GPIO to SPI.
  gpio_enable_module(USART_SPI_GPIO_MAP,
		     sizeof(USART_SPI_GPIO_MAP) / sizeof(USART_SPI_GPIO_MAP[0]));
  // Initialize USART in SPI mode from OSC0
  usart_init_spi_master(OLED_USART_SPI, &USART_SPI_OPTIONS, FOSC0);
80002ff0:	fe cb e3 40 	sub	r11,pc,-7360
80002ff4:	fe 7c 1c 00 	mov	r12,-58368
  delay_ms(10);

}
80002ff8:	fe b0 fc 24 	rcall	80002840 <usart_init_spi_master>
80002ffc:	d8 02       	popm	pc
80002ffe:	d7 03       	nop

80003000 <init_dbg_usart>:
80003000:	d4 01       	pushm	lr
80003002:	30 2b       	mov	r11,2
80003004:	fe cc e3 12 	sub	r12,pc,-7406
80003008:	fe b0 f8 6f 	rcall	800020e6 <gpio_enable_module>
  // Set up GPIO for DBG_USART
  gpio_enable_module(DBG_USART_GPIO_MAP,
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(DBG_USART, &DBG_USART_OPTIONS, FPBA_HZ);
8000300c:	e0 6a 14 80 	mov	r10,5248
80003010:	ea 1a 03 ef 	orh	r10,0x3ef
80003014:	fe cb e3 38 	sub	r11,pc,-7368
80003018:	fe 7c 18 00 	mov	r12,-59392
}
8000301c:	fe b0 fc 7a 	rcall	80002910 <usart_init_rs232>
80003020:	d8 02       	popm	pc
80003022:	d7 03       	nop

80003024 <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
80003024:	d4 01       	pushm	lr
  //  U8 i;

  // enable interrupts on GPIO inputs

  // BFIN_HWAIT
  gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_PIN_CHANGE);
80003026:	30 0b       	mov	r11,0
80003028:	30 5c       	mov	r12,5
8000302a:	fe b0 f8 23 	rcall	80002070 <gpio_enable_pin_interrupt>

  // encoders
  gpio_enable_pin_interrupt( ENC0_S0_PIN,	GPIO_PIN_CHANGE);
8000302e:	30 0b       	mov	r11,0
80003030:	32 2c       	mov	r12,34
80003032:	fe b0 f8 1f 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC0_S1_PIN,	GPIO_PIN_CHANGE);
80003036:	30 0b       	mov	r11,0
80003038:	32 3c       	mov	r12,35
8000303a:	fe b0 f8 1b 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S0_PIN,	GPIO_PIN_CHANGE);
8000303e:	30 0b       	mov	r11,0
80003040:	32 4c       	mov	r12,36
80003042:	fe b0 f8 17 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S1_PIN,	GPIO_PIN_CHANGE);
80003046:	30 0b       	mov	r11,0
80003048:	32 5c       	mov	r12,37
8000304a:	fe b0 f8 13 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S0_PIN,	GPIO_PIN_CHANGE);
8000304e:	30 0b       	mov	r11,0
80003050:	32 6c       	mov	r12,38
80003052:	fe b0 f8 0f 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S1_PIN,	GPIO_PIN_CHANGE);
80003056:	30 0b       	mov	r11,0
80003058:	32 7c       	mov	r12,39
8000305a:	fe b0 f8 0b 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S0_PIN,	GPIO_PIN_CHANGE);
8000305e:	30 0b       	mov	r11,0
80003060:	32 8c       	mov	r12,40
80003062:	fe b0 f8 07 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S1_PIN,	GPIO_PIN_CHANGE);
80003066:	30 0b       	mov	r11,0
80003068:	32 9c       	mov	r12,41
8000306a:	fe b0 f8 03 	rcall	80002070 <gpio_enable_pin_interrupt>

  // switches
  gpio_enable_pin_interrupt( SW0_PIN,	        GPIO_PIN_CHANGE);
8000306e:	30 0b       	mov	r11,0
80003070:	31 9c       	mov	r12,25
80003072:	fe b0 f7 ff 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW1_PIN,	        GPIO_PIN_CHANGE);
80003076:	30 0b       	mov	r11,0
80003078:	31 ac       	mov	r12,26
8000307a:	fe b0 f7 fb 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW2_PIN,	        GPIO_PIN_CHANGE);
8000307e:	30 0b       	mov	r11,0
80003080:	31 bc       	mov	r12,27
80003082:	fe b0 f7 f7 	rcall	80002070 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_PIN_CHANGE);
80003086:	30 0b       	mov	r11,0
80003088:	31 cc       	mov	r12,28
8000308a:	fe b0 f7 f3 	rcall	80002070 <gpio_enable_pin_interrupt>
  // TEST:
  //  gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_FALLING_EDGE);
  gpio_enable_pin_interrupt( SW_EDIT_PIN,	GPIO_PIN_CHANGE);
8000308e:	30 0b       	mov	r11,0
80003090:	31 8c       	mov	r12,24
80003092:	fe b0 f7 ef 	rcall	80002070 <gpio_enable_pin_interrupt>
  

  // PA00 - PA07
  INTC_register_interrupt( &irq_port0_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA00 / 8), UI_IRQ_LEVEL );
80003096:	30 2a       	mov	r10,2
80003098:	34 0b       	mov	r11,64
8000309a:	fe cc fd d6 	sub	r12,pc,-554
8000309e:	fe b0 f8 67 	rcall	8000216c <INTC_register_interrupt>

  // PA16 - PA23
  // INTC_register_interrupt( &irq_port0_line2, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA16 / 8), UI_IRQ_LEVEL);

  // PA24 - PA31
  INTC_register_interrupt( &irq_port0_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA24 / 8), UI_IRQ_LEVEL);
800030a2:	30 2a       	mov	r10,2
800030a4:	34 3b       	mov	r11,67
800030a6:	fe cc fe 56 	sub	r12,pc,-426

  // PB00 - PB07
  INTC_register_interrupt( &irq_port1_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB00 / 8), UI_IRQ_LEVEL );
800030aa:	fe b0 f8 61 	rcall	8000216c <INTC_register_interrupt>
800030ae:	30 2a       	mov	r10,2
800030b0:	34 4b       	mov	r11,68
800030b2:	fe cc fe ea 	sub	r12,pc,-278

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_LEVEL);
800030b6:	fe b0 f8 5b 	rcall	8000216c <INTC_register_interrupt>
800030ba:	30 2a       	mov	r10,2
800030bc:	34 5b       	mov	r11,69

  // PB24 - PB31
  //  INTC_register_interrupt( &irq_port1_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB24 / 8), UI_IRQ_LEVEL);

  // register IRQ for PDCA transfer
  INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1);
800030be:	fe cc ff 26 	sub	r12,pc,-218
800030c2:	fe b0 f8 55 	rcall	8000216c <INTC_register_interrupt>
800030c6:	30 1a       	mov	r10,1

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
800030c8:	36 0b       	mov	r11,96
800030ca:	fe cc ff 82 	sub	r12,pc,-126
800030ce:	fe b0 f8 4f 	rcall	8000216c <INTC_register_interrupt>
800030d2:	30 0a       	mov	r10,0
}
800030d4:	e0 6b 01 c0 	mov	r11,448
800030d8:	fe cc ff f4 	sub	r12,pc,-12
800030dc:	fe b0 f8 48 	rcall	8000216c <INTC_register_interrupt>
800030e0:	d8 02       	popm	pc
800030e2:	d7 03       	nop

800030e4 <irq_tc>:
800030e4:	eb cd 40 c0 	pushm	r6-r7,lr
800030e8:	e0 68 02 64 	mov	r8,612
800030ec:	30 1a       	mov	r10,1
800030ee:	f0 e6 00 00 	ld.d	r6,r8[0]
800030f2:	30 0b       	mov	r11,0
800030f4:	ec 0a 00 0a 	add	r10,r6,r10
}

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
800030f8:	ee 0b 00 4b 	adc	r11,r7,r11
800030fc:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
80003100:	e0 66 ff ff 	mov	r6,65535
80003104:	ea 16 7f ff 	orh	r6,0x7fff
80003108:	f0 ea 00 00 	ld.d	r10,r8[0]
8000310c:	30 07       	mov	r7,0
8000310e:	0c 3a       	cp.w	r10,r6
80003110:	ee 0b 13 00 	cpc	r11,r7
80003114:	e0 8b 00 10 	brhi	80003134 <irq_tc+0x50>
    tcTicks = 0;
    tcOverflow = 1;
  } else {
    tcOverflow = 0;
80003118:	30 09       	mov	r9,0
8000311a:	e0 68 02 61 	mov	r8,609
  }
  process_timers();
8000311e:	b0 89       	st.b	r8[0x0],r9
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80003120:	e0 a0 0a 5a 	rcall	800045d4 <process_timers>
80003124:	30 0b       	mov	r11,0
80003126:	fe 7c 38 00 	mov	r12,-51200

}
8000312a:	fe b0 fa 71 	rcall	8000260c <tc_read_sr>
8000312e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
  // overflow control
  if(tcTicks > tcMax) { 
    tcTicks = 0;
80003132:	d6 03       	rete
80003134:	30 0a       	mov	r10,0
80003136:	30 0b       	mov	r11,0
    tcOverflow = 1;
80003138:	f0 eb 00 00 	st.d	r8[0],r10
8000313c:	30 19       	mov	r9,1
8000313e:	e0 68 02 61 	mov	r8,609
80003142:	b0 89       	st.b	r8[0x0],r9
80003144:	ce eb       	rjmp	80003120 <irq_tc+0x3c>
80003146:	d7 03       	nop

80003148 <irq_pdca>:
80003148:	d4 01       	pushm	lr
8000314a:	20 1d       	sub	sp,4
8000314c:	d3 03       	ssrf	0x10
8000314e:	30 0c       	mov	r12,0
  volatile U16 delay;
  // Disable all interrupts.
  Disable_global_interrupt();

  // Disable interrupt channel.
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80003150:	fe b0 f8 97 	rcall	8000227e <pdca_disable_interrupt_transfer_complete>

  //unselects the SD/MMC memory.
  sd_mmc_spi_read_close_PDCA();
80003154:	fe b0 fc 56 	rcall	80002a00 <sd_mmc_spi_read_close_PDCA>

  // wait (FIXME??)
  delay=0; while(delay < 5000) { delay++; }
80003158:	30 08       	mov	r8,0
8000315a:	ba 18       	st.h	sp[0x2],r8
8000315c:	e0 69 13 87 	mov	r9,4999
80003160:	9a 18       	ld.sh	r8,sp[0x2]
80003162:	f2 08 19 00 	cp.h	r8,r9
80003166:	e0 8b 00 0a 	brhi	8000317a <irq_pdca+0x32>
8000316a:	9a 18       	ld.sh	r8,sp[0x2]
8000316c:	2f f8       	sub	r8,-1
8000316e:	ba 18       	st.h	sp[0x2],r8
80003170:	9a 18       	ld.sh	r8,sp[0x2]
80003172:	f2 08 19 00 	cp.h	r8,r9
80003176:	fe 98 ff fa 	brls	8000316a <irq_pdca+0x22>

  // Disable unnecessary channel
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
8000317a:	30 1c       	mov	r12,1
8000317c:	fe b0 f8 74 	rcall	80002264 <pdca_disable>
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80003180:	30 0c       	mov	r12,0
80003182:	fe b0 f8 71 	rcall	80002264 <pdca_disable>

  // Enable all interrupts.
  Enable_global_interrupt();
80003186:	d5 03       	csrf	0x10

  end_of_transfer = true;
80003188:	30 19       	mov	r9,1
8000318a:	e0 68 14 ac 	mov	r8,5292
}
8000318e:	b0 89       	st.b	r8[0x0],r9
80003190:	2f fd       	sub	sp,-4
80003192:	d4 02       	popm	lr
80003194:	d6 03       	rete
80003196:	d7 03       	nop

80003198 <irq_port1_line1>:
80003198:	d4 01       	pushm	lr
8000319a:	32 8c       	mov	r12,40
8000319c:	fe b0 f7 8f 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031a0:	c0 d1       	brne	800031ba <irq_port1_line1+0x22>
800031a2:	32 9c       	mov	r12,41
 if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  // ENC3_1
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
800031a4:	fe b0 f7 8b 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031a8:	c0 70       	breq	800031b6 <irq_port1_line1+0x1e>
    process_enc(3);
800031aa:	30 3c       	mov	r12,3
800031ac:	fe b0 fd cc 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
800031b0:	32 9c       	mov	r12,41
800031b2:	fe b0 f7 90 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
  }

}
800031b6:	d4 02       	popm	lr
800031b8:	d6 03       	rete
// interrupt handler for PB08-PB15
__attribute__((__interrupt__))
static void irq_port1_line1(void) {
  // ENC3_0
 if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
800031ba:	30 3c       	mov	r12,3
800031bc:	fe b0 fd c4 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
800031c0:	32 8c       	mov	r12,40
800031c2:	fe b0 f7 88 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
800031c6:	ce eb       	rjmp	800031a2 <irq_port1_line1+0xa>

800031c8 <irq_port1_line0>:
800031c8:	d4 01       	pushm	lr
800031ca:	32 2c       	mov	r12,34
800031cc:	fe b0 f7 77 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031d0:	c3 91       	brne	80003242 <irq_port1_line0+0x7a>
800031d2:	32 3c       	mov	r12,35
 if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
800031d4:	fe b0 f7 73 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031d8:	c2 e1       	brne	80003234 <irq_port1_line0+0x6c>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
800031da:	32 4c       	mov	r12,36
800031dc:	fe b0 f7 6f 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031e0:	c2 31       	brne	80003226 <irq_port1_line0+0x5e>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
800031e2:	32 5c       	mov	r12,37
800031e4:	fe b0 f7 6b 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031e8:	c1 81       	brne	80003218 <irq_port1_line0+0x50>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
800031ea:	32 6c       	mov	r12,38
800031ec:	fe b0 f7 67 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031f0:	c0 d1       	brne	8000320a <irq_port1_line0+0x42>
    process_enc(2);
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
  }  
  // ENC2_1
  if(gpio_get_pin_interrupt_flag(ENC2_S1_PIN)) {
800031f2:	32 7c       	mov	r12,39
800031f4:	fe b0 f7 63 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800031f8:	c0 70       	breq	80003206 <irq_port1_line0+0x3e>
    process_enc(2);
800031fa:	30 2c       	mov	r12,2
800031fc:	fe b0 fd a4 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S1_PIN);
80003200:	32 7c       	mov	r12,39
80003202:	fe b0 f7 68 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
  }
}
80003206:	d4 02       	popm	lr
80003208:	d6 03       	rete
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
    process_enc(2);
8000320a:	30 2c       	mov	r12,2
8000320c:	fe b0 fd 9c 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
80003210:	32 6c       	mov	r12,38
80003212:	fe b0 f7 60 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
80003216:	ce eb       	rjmp	800031f2 <irq_port1_line0+0x2a>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
80003218:	30 1c       	mov	r12,1
8000321a:	fe b0 fd 95 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
8000321e:	32 5c       	mov	r12,37
80003220:	fe b0 f7 59 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
80003224:	ce 3b       	rjmp	800031ea <irq_port1_line0+0x22>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
80003226:	30 1c       	mov	r12,1
80003228:	fe b0 fd 8e 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
8000322c:	32 4c       	mov	r12,36
8000322e:	fe b0 f7 52 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
80003232:	cd 8b       	rjmp	800031e2 <irq_port1_line0+0x1a>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
80003234:	30 0c       	mov	r12,0
80003236:	fe b0 fd 87 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
8000323a:	32 3c       	mov	r12,35
8000323c:	fe b0 f7 4b 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
80003240:	cc db       	rjmp	800031da <irq_port1_line0+0x12>
// interrupt handler for PB00-PB07
__attribute__((__interrupt__))
static void irq_port1_line0(void) {
  // ENC0_0
 if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
80003242:	30 0c       	mov	r12,0
80003244:	fe b0 fd 80 	rcall	80002d44 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
80003248:	32 2c       	mov	r12,34
8000324a:	fe b0 f7 44 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
8000324e:	cc 2b       	rjmp	800031d2 <irq_port1_line0+0xa>

80003250 <irq_port0_line3>:
80003250:	d4 01       	pushm	lr
80003252:	31 9c       	mov	r12,25
80003254:	fe b0 f7 33 	rcall	800020ba <gpio_get_pin_interrupt_flag>
80003258:	c2 e1       	brne	800032b4 <irq_port0_line3+0x64>
8000325a:	31 ac       	mov	r12,26
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    process_sw(0);
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
8000325c:	fe b0 f7 2f 	rcall	800020ba <gpio_get_pin_interrupt_flag>
80003260:	c2 31       	brne	800032a6 <irq_port0_line3+0x56>
    process_sw(1);
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
80003262:	31 bc       	mov	r12,27
80003264:	fe b0 f7 2b 	rcall	800020ba <gpio_get_pin_interrupt_flag>
80003268:	c1 81       	brne	80003298 <irq_port0_line3+0x48>
    process_sw(2);
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
8000326a:	31 cc       	mov	r12,28
8000326c:	fe b0 f7 27 	rcall	800020ba <gpio_get_pin_interrupt_flag>
80003270:	c0 d1       	brne	8000328a <irq_port0_line3+0x3a>
    process_sw(3);
    gpio_clear_pin_interrupt_flag(SW3_PIN);
  }
  // SW_EDIT
  if(gpio_get_pin_interrupt_flag(SW_EDIT_PIN)) {
80003272:	31 8c       	mov	r12,24
80003274:	fe b0 f7 23 	rcall	800020ba <gpio_get_pin_interrupt_flag>
80003278:	c0 70       	breq	80003286 <irq_port0_line3+0x36>
    process_sw(4);
8000327a:	30 4c       	mov	r12,4
8000327c:	e0 a0 09 8c 	rcall	80004594 <process_sw>
    gpio_clear_pin_interrupt_flag(SW_EDIT_PIN);
80003280:	31 8c       	mov	r12,24
80003282:	fe b0 f7 28 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
  }
}
80003286:	d4 02       	popm	lr
80003288:	d6 03       	rete
    process_sw(2);
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
    process_sw(3);
8000328a:	30 3c       	mov	r12,3
8000328c:	e0 a0 09 84 	rcall	80004594 <process_sw>
    gpio_clear_pin_interrupt_flag(SW3_PIN);
80003290:	31 cc       	mov	r12,28
80003292:	fe b0 f7 20 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
80003296:	ce eb       	rjmp	80003272 <irq_port0_line3+0x22>
    process_sw(1);
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
    process_sw(2);
80003298:	30 2c       	mov	r12,2
8000329a:	e0 a0 09 7d 	rcall	80004594 <process_sw>
    gpio_clear_pin_interrupt_flag(SW2_PIN);
8000329e:	31 bc       	mov	r12,27
800032a0:	fe b0 f7 19 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
800032a4:	ce 3b       	rjmp	8000326a <irq_port0_line3+0x1a>
    process_sw(0);
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    process_sw(1);
800032a6:	30 1c       	mov	r12,1
800032a8:	e0 a0 09 76 	rcall	80004594 <process_sw>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
800032ac:	31 ac       	mov	r12,26
800032ae:	fe b0 f7 12 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
800032b2:	cd 8b       	rjmp	80003262 <irq_port0_line3+0x12>
// interrupt handler for PA23-PA30
__attribute__((__interrupt__))
static void irq_port0_line3(void) {
  //SW_F0
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    process_sw(0);
800032b4:	30 0c       	mov	r12,0
800032b6:	e0 a0 09 6f 	rcall	80004594 <process_sw>
    gpio_clear_pin_interrupt_flag(SW0_PIN);
800032ba:	31 9c       	mov	r12,25
800032bc:	fe b0 f7 0b 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
800032c0:	cc db       	rjmp	8000325a <irq_port0_line3+0xa>
800032c2:	d7 03       	nop

800032c4 <irq_port0_line0>:
800032c4:	d4 01       	pushm	lr
800032c6:	30 5c       	mov	r12,5
800032c8:	fe b0 f6 f9 	rcall	800020ba <gpio_get_pin_interrupt_flag>
800032cc:	c0 a0       	breq	800032e0 <irq_port0_line0+0x1c>
800032ce:	30 5c       	mov	r12,5
// interrupt handler for PA00-PA07
__attribute__((__interrupt__))
static void irq_port0_line0(void) {
  // BFIN_HWAIT
  if(gpio_get_pin_interrupt_flag(BFIN_HWAIT_PIN)) {
    hwait = gpio_get_pin_value(BFIN_HWAIT_PIN);
800032d0:	fe b0 f6 ab 	rcall	80002026 <gpio_get_pin_value>
800032d4:	e0 68 01 54 	mov	r8,340
    gpio_clear_pin_interrupt_flag(BFIN_HWAIT_PIN);
800032d8:	b0 8c       	st.b	r8[0x0],r12
800032da:	30 5c       	mov	r12,5
800032dc:	fe b0 f6 fb 	rcall	800020d2 <gpio_clear_pin_interrupt_flag>
  }
}
800032e0:	d4 02       	popm	lr
800032e2:	d6 03       	rete

800032e4 <scroll_event>:
  return 1;
}


/// TEST: add a string to the scroll output
static void scroll_event(const char* str) {
800032e4:	eb cd 40 fc 	pushm	r2-r7,lr
  u8 x=0;
  // timestamp
  //  itoa_whole((int)tcTicks, eventScroll[scrollIdx], 6);
  // string
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
800032e8:	e0 67 03 c4 	mov	r7,964
800032ec:	18 9b       	mov	r11,r12
800032ee:	e0 66 02 74 	mov	r6,628
800032f2:	0f 8c       	ld.ub	r12,r7[0x0]
800032f4:	f8 0c 10 2a 	mul	r12,r12,42
800032f8:	ec 0c 00 0c 	add	r12,r6,r12
800032fc:	e0 a0 0b 24 	rcall	80004944 <strcpy>
  eventScrollTimes[scrollIdx] = tcTicks;
80003300:	e0 65 03 c8 	mov	r5,968
80003304:	0f 84       	ld.ub	r4,r7[0x0]
80003306:	e0 68 02 64 	mov	r8,612
8000330a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000330e:	ea 04 08 38 	st.d	r5[r4<<0x3],r8
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80003312:	30 08       	mov	r8,0
80003314:	f0 04 18 00 	cp.b	r4,r8
80003318:	e0 85 01 2e 	brlt	80003574 <scroll_event+0x290>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000331c:	08 93       	mov	r3,r4
8000331e:	5c 63       	casts.b	r3
80003320:	ea 03 00 38 	add	r8,r5,r3<<0x3
80003324:	30 0b       	mov	r11,0
80003326:	90 3a       	ld.sh	r10,r8[0x6]
80003328:	30 f9       	mov	r9,15
8000332a:	16 9c       	mov	r12,r11
8000332c:	e0 a0 04 ee 	rcall	80003d08 <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003330:	e6 0a 10 2a 	mul	r10,r3,42
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003334:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003336:	ec 0a 00 0a 	add	r10,r6,r10
8000333a:	30 f9       	mov	r9,15
8000333c:	30 0b       	mov	r11,0
8000333e:	e0 a0 03 3b 	rcall	800039b4 <screen_line>
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
80003342:	5c 54       	castu.b	r4
80003344:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
80003348:	c0 50       	breq	80003352 <scroll_event+0x6e>
8000334a:	e8 0a 15 01 	lsl	r10,r4,0x1
8000334e:	2f fa       	sub	r10,-1
80003350:	5c 5a       	castu.b	r10
80003352:	04 9c       	mov	r12,r2
80003354:	30 0b       	mov	r11,0
80003356:	cc 5d       	rcall	800036e0 <screen_hl_line>
80003358:	30 08       	mov	r8,0
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
8000335a:	0f 84       	ld.ub	r4,r7[0x0]
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
8000335c:	20 14       	sub	r4,1
8000335e:	5c 54       	castu.b	r4
80003360:	f0 04 18 00 	cp.b	r4,r8
    if(n < 0) { n += CHAR_ROWS; }
80003364:	e0 85 01 1d 	brlt	8000359e <scroll_event+0x2ba>
80003368:	08 93       	mov	r3,r4
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000336a:	5c 63       	casts.b	r3
8000336c:	ea 03 00 38 	add	r8,r5,r3<<0x3
80003370:	30 f9       	mov	r9,15
80003372:	90 3a       	ld.sh	r10,r8[0x6]
80003374:	30 8b       	mov	r11,8
80003376:	30 0c       	mov	r12,0
80003378:	e0 a0 04 c8 	rcall	80003d08 <screen_int>
8000337c:	e6 0a 10 2a 	mul	r10,r3,42
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003380:	18 92       	mov	r2,r12
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003382:	ec 0a 00 0a 	add	r10,r6,r10
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003386:	30 f9       	mov	r9,15
80003388:	30 8b       	mov	r11,8
8000338a:	e0 a0 03 15 	rcall	800039b4 <screen_line>
8000338e:	5c 54       	castu.b	r4
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
80003390:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
80003394:	c0 50       	breq	8000339e <scroll_event+0xba>
80003396:	e8 0a 15 01 	lsl	r10,r4,0x1
8000339a:	2f fa       	sub	r10,-1
8000339c:	5c 5a       	castu.b	r10
8000339e:	04 9c       	mov	r12,r2
800033a0:	30 8b       	mov	r11,8
800033a2:	c9 fd       	rcall	800036e0 <screen_hl_line>
800033a4:	30 08       	mov	r8,0
800033a6:	0f 84       	ld.ub	r4,r7[0x0]
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
800033a8:	20 24       	sub	r4,2
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
800033aa:	5c 54       	castu.b	r4
800033ac:	f0 04 18 00 	cp.b	r4,r8
    if(n < 0) { n += CHAR_ROWS; }
800033b0:	e0 85 00 f4 	brlt	80003598 <scroll_event+0x2b4>
800033b4:	08 93       	mov	r3,r4
800033b6:	5c 63       	casts.b	r3
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
800033b8:	ea 03 00 38 	add	r8,r5,r3<<0x3
800033bc:	30 f9       	mov	r9,15
800033be:	90 3a       	ld.sh	r10,r8[0x6]
800033c0:	31 0b       	mov	r11,16
800033c2:	30 0c       	mov	r12,0
800033c4:	e0 a0 04 a2 	rcall	80003d08 <screen_int>
800033c8:	e6 0a 10 2a 	mul	r10,r3,42
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
800033cc:	18 92       	mov	r2,r12
800033ce:	ec 0a 00 0a 	add	r10,r6,r10
800033d2:	30 f9       	mov	r9,15
800033d4:	31 0b       	mov	r11,16
800033d6:	e0 a0 02 ef 	rcall	800039b4 <screen_line>
800033da:	5c 54       	castu.b	r4
800033dc:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
800033e0:	c0 50       	breq	800033ea <scroll_event+0x106>
800033e2:	e8 0a 15 01 	lsl	r10,r4,0x1
800033e6:	2f fa       	sub	r10,-1
800033e8:	5c 5a       	castu.b	r10
800033ea:	04 9c       	mov	r12,r2
800033ec:	31 0b       	mov	r11,16
800033ee:	c7 9d       	rcall	800036e0 <screen_hl_line>
800033f0:	30 08       	mov	r8,0
800033f2:	0f 84       	ld.ub	r4,r7[0x0]
800033f4:	20 34       	sub	r4,3
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
800033f6:	5c 54       	castu.b	r4
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
800033f8:	f0 04 18 00 	cp.b	r4,r8
800033fc:	e0 85 00 cb 	brlt	80003592 <scroll_event+0x2ae>
    if(n < 0) { n += CHAR_ROWS; }
80003400:	08 93       	mov	r3,r4
80003402:	5c 63       	casts.b	r3
80003404:	ea 03 00 38 	add	r8,r5,r3<<0x3
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003408:	30 f9       	mov	r9,15
8000340a:	90 3a       	ld.sh	r10,r8[0x6]
8000340c:	31 8b       	mov	r11,24
8000340e:	30 0c       	mov	r12,0
80003410:	e0 a0 04 7c 	rcall	80003d08 <screen_int>
80003414:	e6 0a 10 2a 	mul	r10,r3,42
80003418:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000341a:	ec 0a 00 0a 	add	r10,r6,r10
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000341e:	30 f9       	mov	r9,15
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003420:	31 8b       	mov	r11,24
80003422:	e0 a0 02 c9 	rcall	800039b4 <screen_line>
80003426:	5c 54       	castu.b	r4
80003428:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
8000342c:	c0 50       	breq	80003436 <scroll_event+0x152>
8000342e:	e8 0a 15 01 	lsl	r10,r4,0x1
80003432:	2f fa       	sub	r10,-1
80003434:	5c 5a       	castu.b	r10
80003436:	04 9c       	mov	r12,r2
80003438:	31 8b       	mov	r11,24
8000343a:	c5 3d       	rcall	800036e0 <screen_hl_line>
8000343c:	30 08       	mov	r8,0
8000343e:	0f 84       	ld.ub	r4,r7[0x0]
80003440:	20 44       	sub	r4,4
80003442:	5c 54       	castu.b	r4
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80003444:	f0 04 18 00 	cp.b	r4,r8
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
80003448:	e0 85 00 a2 	brlt	8000358c <scroll_event+0x2a8>
    if(n < 0) { n += CHAR_ROWS; }
8000344c:	08 93       	mov	r3,r4
8000344e:	5c 63       	casts.b	r3
80003450:	ea 03 00 38 	add	r8,r5,r3<<0x3
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003454:	30 f9       	mov	r9,15
80003456:	90 3a       	ld.sh	r10,r8[0x6]
80003458:	32 0b       	mov	r11,32
8000345a:	30 0c       	mov	r12,0
8000345c:	e0 a0 04 56 	rcall	80003d08 <screen_int>
80003460:	e6 0a 10 2a 	mul	r10,r3,42
80003464:	18 92       	mov	r2,r12
80003466:	ec 0a 00 0a 	add	r10,r6,r10
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000346a:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000346c:	32 0b       	mov	r11,32
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000346e:	e0 a0 02 a3 	rcall	800039b4 <screen_line>
80003472:	5c 54       	castu.b	r4
80003474:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
80003478:	c0 50       	breq	80003482 <scroll_event+0x19e>
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
8000347a:	e8 0a 15 01 	lsl	r10,r4,0x1
8000347e:	2f fa       	sub	r10,-1
80003480:	5c 5a       	castu.b	r10
80003482:	04 9c       	mov	r12,r2
80003484:	32 0b       	mov	r11,32
80003486:	c2 dd       	rcall	800036e0 <screen_hl_line>
80003488:	30 08       	mov	r8,0
8000348a:	0f 84       	ld.ub	r4,r7[0x0]
8000348c:	20 54       	sub	r4,5
8000348e:	5c 54       	castu.b	r4
80003490:	f0 04 18 00 	cp.b	r4,r8
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
80003494:	c7 95       	brlt	80003586 <scroll_event+0x2a2>
80003496:	08 93       	mov	r3,r4
80003498:	5c 63       	casts.b	r3
    if(n < 0) { n += CHAR_ROWS; }
8000349a:	ea 03 00 38 	add	r8,r5,r3<<0x3
8000349e:	30 f9       	mov	r9,15
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
800034a0:	90 3a       	ld.sh	r10,r8[0x6]
800034a2:	32 8b       	mov	r11,40
800034a4:	30 0c       	mov	r12,0
800034a6:	e0 a0 04 31 	rcall	80003d08 <screen_int>
800034aa:	e6 0a 10 2a 	mul	r10,r3,42
800034ae:	18 92       	mov	r2,r12
800034b0:	ec 0a 00 0a 	add	r10,r6,r10
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
800034b4:	30 f9       	mov	r9,15
800034b6:	32 8b       	mov	r11,40
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
800034b8:	e0 a0 02 7e 	rcall	800039b4 <screen_line>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
800034bc:	5c 54       	castu.b	r4
800034be:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
800034c2:	c0 50       	breq	800034cc <scroll_event+0x1e8>
800034c4:	e8 0a 15 01 	lsl	r10,r4,0x1
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
800034c8:	2f fa       	sub	r10,-1
800034ca:	5c 5a       	castu.b	r10
800034cc:	04 9c       	mov	r12,r2
800034ce:	32 8b       	mov	r11,40
800034d0:	c0 8d       	rcall	800036e0 <screen_hl_line>
800034d2:	30 08       	mov	r8,0
800034d4:	0f 84       	ld.ub	r4,r7[0x0]
800034d6:	20 64       	sub	r4,6
800034d8:	5c 54       	castu.b	r4
800034da:	f0 04 18 00 	cp.b	r4,r8
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
800034de:	c5 15       	brlt	80003580 <scroll_event+0x29c>
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
800034e0:	08 93       	mov	r3,r4
800034e2:	5c 63       	casts.b	r3
800034e4:	ea 03 00 38 	add	r8,r5,r3<<0x3
    if(n < 0) { n += CHAR_ROWS; }
800034e8:	30 f9       	mov	r9,15
800034ea:	90 3a       	ld.sh	r10,r8[0x6]
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
800034ec:	33 0b       	mov	r11,48
800034ee:	30 0c       	mov	r12,0
800034f0:	e0 a0 04 0c 	rcall	80003d08 <screen_int>
800034f4:	e6 0a 10 2a 	mul	r10,r3,42
800034f8:	18 92       	mov	r2,r12
800034fa:	ec 0a 00 0a 	add	r10,r6,r10
800034fe:	30 f9       	mov	r9,15
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003500:	33 0b       	mov	r11,48
80003502:	e0 a0 02 59 	rcall	800039b4 <screen_line>
80003506:	5c 54       	castu.b	r4
80003508:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
8000350c:	c0 50       	breq	80003516 <scroll_event+0x232>
8000350e:	e8 0a 15 01 	lsl	r10,r4,0x1
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
80003512:	2f fa       	sub	r10,-1
80003514:	5c 5a       	castu.b	r10
80003516:	04 9c       	mov	r12,r2
80003518:	33 0b       	mov	r11,48
8000351a:	ce 3c       	rcall	800036e0 <screen_hl_line>
8000351c:	30 08       	mov	r8,0
8000351e:	0f 84       	ld.ub	r4,r7[0x0]
80003520:	20 74       	sub	r4,7
80003522:	5c 54       	castu.b	r4
80003524:	f0 04 18 00 	cp.b	r4,r8
80003528:	c2 95       	brlt	8000357a <scroll_event+0x296>
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
8000352a:	08 93       	mov	r3,r4
  //  str_copy(str, eventScroll[scrollIdx], 10);
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
8000352c:	30 f9       	mov	r9,15
8000352e:	5c 63       	casts.b	r3
80003530:	33 8b       	mov	r11,56
    if(n < 0) { n += CHAR_ROWS; }
80003532:	ea 03 00 35 	add	r5,r5,r3<<0x3
80003536:	30 0c       	mov	r12,0
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003538:	8a 3a       	ld.sh	r10,r5[0x6]
8000353a:	e0 a0 03 e7 	rcall	80003d08 <screen_int>
8000353e:	e6 0a 10 2a 	mul	r10,r3,42
80003542:	18 95       	mov	r5,r12
80003544:	ec 0a 00 0a 	add	r10,r6,r10
80003548:	30 f9       	mov	r9,15
8000354a:	33 8b       	mov	r11,56
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000354c:	e0 a0 02 34 	rcall	800039b4 <screen_line>
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003550:	5c 54       	castu.b	r4
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003552:	f5 d4 c0 01 	bfextu	r10,r4,0x0,0x1
80003556:	c0 50       	breq	80003560 <scroll_event+0x27c>
80003558:	e8 0a 15 01 	lsl	r10,r4,0x1
8000355c:	2f fa       	sub	r10,-1
    screen_hl_line(x, FONT_CHARH * i, (n & 1 ? ((n << 1) + 1) : 0));
8000355e:	5c 5a       	castu.b	r10
80003560:	0a 9c       	mov	r12,r5
80003562:	33 8b       	mov	r11,56
80003564:	cb ec       	rcall	800036e0 <screen_hl_line>
80003566:	0f 88       	ld.ub	r8,r7[0x0]
80003568:	2f f8       	sub	r8,-1
8000356a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000356e:	ae 88       	st.b	r7[0x0],r8
80003570:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003574:	2f 84       	sub	r4,-8
    //    screen_line(7 * FONT_CHARW, FONT_CHARH * i, str, 0xf);
  }
  // advance index
  scrollIdx = (scrollIdx + 1) % CHAR_ROWS;
80003576:	5c 54       	castu.b	r4
80003578:	cd 2a       	rjmp	8000331c <scroll_event+0x38>
8000357a:	2f 84       	sub	r4,-8
8000357c:	5c 54       	castu.b	r4
8000357e:	cd 6b       	rjmp	8000352a <scroll_event+0x246>
}
80003580:	2f 84       	sub	r4,-8
80003582:	5c 54       	castu.b	r4
  strcpy(eventScroll[scrollIdx], str);
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80003584:	ca eb       	rjmp	800034e0 <scroll_event+0x1fc>
80003586:	2f 84       	sub	r4,-8
80003588:	5c 54       	castu.b	r4
8000358a:	c8 6b       	rjmp	80003496 <scroll_event+0x1b2>
8000358c:	2f 84       	sub	r4,-8
8000358e:	5c 54       	castu.b	r4
80003590:	c5 eb       	rjmp	8000344c <scroll_event+0x168>
80003592:	2f 84       	sub	r4,-8
80003594:	5c 54       	castu.b	r4
80003596:	c3 5b       	rjmp	80003400 <scroll_event+0x11c>
80003598:	2f 84       	sub	r4,-8
8000359a:	5c 54       	castu.b	r4
8000359c:	c0 cb       	rjmp	800033b4 <scroll_event+0xd0>
8000359e:	2f 84       	sub	r4,-8
800035a0:	5c 54       	castu.b	r4
800035a2:	ce 3a       	rjmp	80003368 <scroll_event+0x84>

800035a4 <main>:
800035a4:	eb cd 40 e0 	pushm	r5-r7,lr
800035a8:	fe b0 fc 52 	rcall	80002e4c <init_clocks>
800035ac:	fe b0 f6 20 	rcall	800021ec <INTC_init_interrupts>
800035b0:	d3 03       	ssrf	0x10
800035b2:	fe b0 fd 27 	rcall	80003000 <init_dbg_usart>
800035b6:	fe b0 fd 13 	rcall	80002fdc <init_oled_usart>
800035ba:	fe b0 fc 79 	rcall	80002eac <init_bfin_resources>
800035be:	fe 7c 38 00 	mov	r12,-51200
800035c2:	fe b0 fc f3 	rcall	80002fa8 <init_tc>
800035c6:	fe b0 fc c7 	rcall	80002f54 <init_gpio>
800035ca:	fe b0 fd 2d 	rcall	80003024 <register_interrupts>
800035ce:	e0 a0 04 fb 	rcall	80003fc4 <init_oled>
800035d2:	fe b0 fb 53 	rcall	80002c78 <init_events>
  
  // intialize the event queue
  init_events();
  
  // intialize encoders
  init_encoders();
800035d6:	fe b0 fb dd 	rcall	80002d90 <init_encoders>
  //  sdramc_init(FMCK_HZ);
  //memory managaer
  // init_mem();

  // Enable all interrupts.
  Enable_global_interrupt();
800035da:	d5 03       	csrf	0x10

  //  delay = 10000; while(delay-- > 0) { ;; } 

  //  screen_line(0, 0, "AAAAAH HAAA", 0);
  screen_test_fill();
800035dc:	c5 2d       	rcall	80003880 <screen_test_fill>
800035de:	fe cc e8 9a 	sub	r12,pc,-5990
  //  screen_refresh();

  print_dbg("\r\nALEPH\r\n ");
800035e2:	fe b0 fa 09 	rcall	800029f4 <print_dbg>
  // send ADC config
  //  init_adc();
  init_app_timers();
800035e6:	fe b0 fa e7 	rcall	80002bb4 <init_app_timers>

  print_dbg("starting event loop.\n\r");
800035ea:	fe cc e8 9a 	sub	r12,pc,-5990
800035ee:	e0 66 02 60 	mov	r6,608
800035f2:	fe b0 fa 01 	rcall	800029f4 <print_dbg>
  //static U64 cycles = 0;
  //static U64 cyclesNow = 0;

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {
800035f6:	fe c7 e8 fe 	sub	r7,pc,-5890
800035fa:	e0 65 02 6c 	mov	r5,620

    switch(e.eventType) {
800035fe:	0a 9c       	mov	r12,r5
80003600:	fe b0 fb 76 	rcall	80002cec <get_next_event>
80003604:	cf b0       	breq	800035fa <main+0x56>
80003606:	6a 08       	ld.w	r8,r5[0x0]
80003608:	59 28       	cp.w	r8,18
      //      gpio_clr_gpio_pin(LED_EDIT_PIN);
      screen_line(0, FONT_CHARH * 4, "edit switch up", 0xf);
      break;

    case kEventRefresh:
      if(refresh == 1) {
8000360a:	fe 9b ff f8 	brhi	800035fa <main+0x56>
8000360e:	ee 08 03 2f 	ld.w	pc,r7[r8<<0x2]
80003612:	0d 89       	ld.ub	r9,r6[0x0]
	screen_refresh();
80003614:	30 18       	mov	r8,1
80003616:	f0 09 18 00 	cp.b	r9,r8
	refresh = 0;
8000361a:	cf 01       	brne	800035fa <main+0x56>
8000361c:	c1 6d       	rcall	80003848 <screen_refresh>
8000361e:	30 09       	mov	r9,0
      screen_line(0, FONT_CHARH * 4, "edit switch down", 0xf);
      break;

    case kEventSwitchUp4:
      //      gpio_clr_gpio_pin(LED_EDIT_PIN);
      screen_line(0, FONT_CHARH * 4, "edit switch up", 0xf);
80003620:	e0 68 02 60 	mov	r8,608
80003624:	b0 89       	st.b	r8[0x0],r9
80003626:	ce ab       	rjmp	800035fa <main+0x56>
80003628:	30 f9       	mov	r9,15
8000362a:	fe ca e8 5a 	sub	r10,pc,-6054
      scroll_event(" sw 3 up");
      break;

    case kEventSwitchDown4:
      //      gpio_set_gpio_pin(LED_EDIT_PIN);
      screen_line(0, FONT_CHARH * 4, "edit switch down", 0xf);
8000362e:	32 0b       	mov	r11,32
80003630:	30 0c       	mov	r12,0
80003632:	cc 1d       	rcall	800039b4 <screen_line>
80003634:	ce 3b       	rjmp	800035fa <main+0x56>
80003636:	30 f9       	mov	r9,15
80003638:	fe ca e8 7c 	sub	r10,pc,-6020
      gpio_clr_gpio_pin(LED_EDIT_PIN);
      //      screen_line(0, FONT_CHARH * 3, "sw 3 down", 0xf);
      scroll_event(" sw 3 down");
      break;
    case kEventSwitchUp3:
      gpio_set_gpio_pin(LED_EDIT_PIN);
8000363c:	32 0b       	mov	r11,32
8000363e:	30 0c       	mov	r12,0
80003640:	cb ad       	rcall	800039b4 <screen_line>
      //      screen_line(0, FONT_CHARH * 3, "sw 3 up", 0xf);
      scroll_event(" sw 3 up");
80003642:	cd cb       	rjmp	800035fa <main+0x56>
80003644:	31 7c       	mov	r12,23
80003646:	fe b0 f4 fb 	rcall	8000203c <gpio_set_gpio_pin>
      break;
    case kEventSwitchUp2:
       screen_line(0, FONT_CHARH * 2, "sw 2 up", 0xf);
      break;
    case kEventSwitchDown3:
      gpio_clr_gpio_pin(LED_EDIT_PIN);
8000364a:	fe cc e8 9a 	sub	r12,pc,-5990
8000364e:	c4 be       	rcall	800032e4 <scroll_event>
      //      screen_line(0, FONT_CHARH * 3, "sw 3 down", 0xf);
      scroll_event(" sw 3 down");
80003650:	cd 5b       	rjmp	800035fa <main+0x56>
80003652:	31 7c       	mov	r12,23
80003654:	fe b0 f5 01 	rcall	80002056 <gpio_clr_gpio_pin>
      break;
    case kEventSwitchDown2:
       screen_line(0, FONT_CHARH * 2, "sw 2 down", 0xf);
      break;
    case kEventSwitchUp2:
       screen_line(0, FONT_CHARH * 2, "sw 2 up", 0xf);
80003658:	fe cc e8 b4 	sub	r12,pc,-5964
8000365c:	c4 4e       	rcall	800032e4 <scroll_event>
8000365e:	cc eb       	rjmp	800035fa <main+0x56>
80003660:	30 f9       	mov	r9,15
80003662:	fe ca e8 c6 	sub	r10,pc,-5946
      break;
    case kEventSwitchUp1:
       screen_line(0, FONT_CHARH, "sw 1 up", 0xf);
      break;
    case kEventSwitchDown2:
       screen_line(0, FONT_CHARH * 2, "sw 2 down", 0xf);
80003666:	31 0b       	mov	r11,16
80003668:	30 0c       	mov	r12,0
8000366a:	ca 5d       	rcall	800039b4 <screen_line>
8000366c:	cc 7b       	rjmp	800035fa <main+0x56>
8000366e:	30 f9       	mov	r9,15
80003670:	fe ca e8 e0 	sub	r10,pc,-5920
      break;
    case kEventSwitchDown1:
      screen_line(0, FONT_CHARH, "sw 1 down", 0xf);
      break;
    case kEventSwitchUp1:
       screen_line(0, FONT_CHARH, "sw 1 up", 0xf);
80003674:	31 0b       	mov	r11,16
80003676:	30 0c       	mov	r12,0
80003678:	c9 ed       	rcall	800039b4 <screen_line>
8000367a:	cc 0b       	rjmp	800035fa <main+0x56>
8000367c:	30 f9       	mov	r9,15
8000367e:	fe ca e8 f6 	sub	r10,pc,-5898
      break;
    case kEventSwitchUp0:
      screen_line(0, 0, "sw 0 up", 0xf);
      break;
    case kEventSwitchDown1:
      screen_line(0, FONT_CHARH, "sw 1 down", 0xf);
80003682:	30 8b       	mov	r11,8
80003684:	30 0c       	mov	r12,0
80003686:	c9 7d       	rcall	800039b4 <screen_line>
80003688:	cb 9b       	rjmp	800035fa <main+0x56>
8000368a:	30 f9       	mov	r9,15
8000368c:	fe ca e9 10 	sub	r10,pc,-5872
    switch(e.eventType) {
    case kEventSwitchDown0:
      screen_line(0, 0, "sw 0 down", 0xf);
      break;
    case kEventSwitchUp0:
      screen_line(0, 0, "sw 0 up", 0xf);
80003690:	30 8b       	mov	r11,8
80003692:	30 0c       	mov	r12,0
80003694:	c9 0d       	rcall	800039b4 <screen_line>
80003696:	cb 2b       	rjmp	800035fa <main+0x56>
80003698:	30 0b       	mov	r11,0
8000369a:	30 f9       	mov	r9,15
8000369c:	fe ca e9 28 	sub	r10,pc,-5848
  
  if( get_next_event(&e) ) {

    switch(e.eventType) {
    case kEventSwitchDown0:
      screen_line(0, 0, "sw 0 down", 0xf);
800036a0:	16 9c       	mov	r12,r11
800036a2:	c8 9d       	rcall	800039b4 <screen_line>
800036a4:	ca bb       	rjmp	800035fa <main+0x56>
800036a6:	30 0b       	mov	r11,0
800036a8:	30 f9       	mov	r9,15
800036aa:	fe ca e9 42 	sub	r10,pc,-5822
800036ae:	16 9c       	mov	r12,r11
800036b0:	c8 2d       	rcall	800039b4 <screen_line>
800036b2:	ca 4b       	rjmp	800035fa <main+0x56>

800036b4 <write_command>:
  usart_putchar(OLED_USART_SPI, c);
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
800036b4:	eb cd 40 80 	pushm	r7,lr
800036b8:	18 97       	mov	r7,r12
  usart_spi_selectChip(OLED_USART_SPI);
800036ba:	fe 7c 1c 00 	mov	r12,-58368
800036be:	fe b0 f8 8a 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800036c2:	33 bc       	mov	r12,59
800036c4:	fe b0 f4 c9 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800036c8:	0e 9b       	mov	r11,r7
800036ca:	fe 7c 1c 00 	mov	r12,-58368
800036ce:	fe b0 f8 95 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800036d2:	fe 7c 1c 00 	mov	r12,-58368
800036d6:	fe b0 f8 82 	rcall	800027da <usart_spi_unselectChip>
}
800036da:	e3 cd 80 80 	ldm	sp++,r7,pc
800036de:	d7 03       	nop

800036e0 <screen_hl_line>:
800036e0:	d4 31       	pushm	r0-r7,lr
800036e2:	20 2d       	sub	sp,8
800036e4:	30 08       	mov	r8,0
800036e6:	e7 dc c0 08 	bfextu	r3,r12,0x0,0x8
800036ea:	f0 03 18 00 	cp.b	r3,r8
800036ee:	c4 f5       	brlt	8000378c <screen_hl_line+0xac>
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800036f0:	f3 da c0 04 	bfextu	r9,r10,0x0,0x4
800036f4:	50 09       	stdsp	sp[0x0],r9
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
800036f6:	e0 69 04 0c 	mov	r9,1036
800036fa:	fd db c0 10 	bfextu	lr,r11,0x0,0x10
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800036fe:	a5 6a       	lsl	r10,0x4
80003700:	30 06       	mov	r6,0
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003702:	5c 5a       	castu.b	r10
80003704:	eb db c0 08 	bfextu	r5,r11,0x0,0x8
80003708:	e0 60 04 24 	mov	r0,1060
8000370c:	72 07       	ld.w	r7,r9[0x0]
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8000370e:	2f 9e       	sub	lr,-7
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003710:	18 92       	mov	r2,r12
80003712:	50 1a       	stdsp	sp[0x4],r10
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
80003714:	60 08       	ld.w	r8,r0[0x0]
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003716:	e0 69 04 28 	mov	r9,1064
8000371a:	0c 9b       	mov	r11,r6

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
8000371c:	e6 06 00 0c 	add	r12,r3,r6
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
80003720:	5c 5c       	castu.b	r12
80003722:	0a 3e       	cp.w	lr,r5

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003724:	c2 85       	brlt	80003774 <screen_hl_line+0x94>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003726:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
  if (x%2) {
8000372a:	a1 9c       	lsr	r12,0x1
8000372c:	18 94       	mov	r4,r12
8000372e:	58 0a       	cp.w	r10,0
80003730:	c3 01       	brne	80003790 <screen_hl_line+0xb0>
80003732:	c6 c1       	brne	8000380a <screen_hl_line+0x12a>

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003734:	0a 91       	mov	r1,r5
80003736:	0a 9a       	mov	r10,r5
80003738:	c0 48       	rjmp	80003740 <screen_hl_line+0x60>
8000373a:	14 91       	mov	r1,r10
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000373c:	14 3e       	cp.w	lr,r10
8000373e:	c1 b5       	brlt	80003774 <screen_hl_line+0x94>

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003740:	2f fa       	sub	r10,-1
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003742:	e2 08 15 06 	lsl	r8,r1,0x6
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
   } else {
    return screen[pos] & 0x0f;
80003746:	5c 5a       	castu.b	r10
80003748:	18 08       	add	r8,r12
8000374a:	f2 08 07 00 	ld.ub	r0,r9[r8]
8000374e:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003752:	f6 00 18 00 	cp.b	r0,r11
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003756:	cf 21       	brne	8000373a <screen_hl_line+0x5a>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003758:	e2 07 15 06 	lsl	r7,r1,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000375c:	40 00       	lddsp	r0,sp[0x0]
8000375e:	08 07       	add	r7,r4
80003760:	f2 07 07 01 	ld.ub	r1,r9[r7]
80003764:	e0 11 ff f0 	andl	r1,0xfff0

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003768:	00 41       	or	r1,r0
8000376a:	f2 07 0b 01 	st.b	r9[r7],r1
8000376e:	14 91       	mov	r1,r10
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003770:	14 3e       	cp.w	lr,r10
80003772:	ce 74       	brge	80003740 <screen_hl_line+0x60>
80003774:	2f f6       	sub	r6,-1
80003776:	e4 06 00 0a 	add	r10,r2,r6
8000377a:	f6 0a 18 00 	cp.b	r10,r11
8000377e:	cc f4       	brge	8000371c <screen_hl_line+0x3c>
80003780:	e0 69 04 24 	mov	r9,1060
      if (screen_get_pixel(i, j) == 0) {
	screen_pixel(i, j, a);
      }
    }
  }
}
80003784:	93 08       	st.w	r9[0x0],r8

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003786:	e0 68 04 0c 	mov	r8,1036
8000378a:	91 07       	st.w	r8[0x0],r7
8000378c:	2f ed       	sub	sp,-8
8000378e:	d8 32       	popm	r0-r7,pc
80003790:	58 0a       	cp.w	r10,0
80003792:	c1 e1       	brne	800037ce <screen_hl_line+0xee>
80003794:	0a 91       	mov	r1,r5
80003796:	0a 9a       	mov	r10,r5
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003798:	c0 48       	rjmp	800037a0 <screen_hl_line+0xc0>
8000379a:	14 91       	mov	r1,r10

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
8000379c:	14 3e       	cp.w	lr,r10
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000379e:	ce b5       	brlt	80003774 <screen_hl_line+0x94>
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
800037a0:	2f fa       	sub	r10,-1
800037a2:	e2 08 15 06 	lsl	r8,r1,0x6
800037a6:	5c 5a       	castu.b	r10
800037a8:	18 08       	add	r8,r12
800037aa:	f2 08 07 00 	ld.ub	r0,r9[r8]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800037ae:	a5 80       	lsr	r0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800037b0:	f6 00 18 00 	cp.b	r0,r11
800037b4:	cf 31       	brne	8000379a <screen_hl_line+0xba>
800037b6:	e2 07 15 06 	lsl	r7,r1,0x6
800037ba:	40 00       	lddsp	r0,sp[0x0]
800037bc:	08 07       	add	r7,r4
800037be:	f2 07 07 01 	ld.ub	r1,r9[r7]
800037c2:	e0 11 ff f0 	andl	r1,0xfff0

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800037c6:	00 41       	or	r1,r0
800037c8:	f2 07 0b 01 	st.b	r9[r7],r1
800037cc:	ce 7b       	rjmp	8000379a <screen_hl_line+0xba>
800037ce:	0a 91       	mov	r1,r5
800037d0:	0a 9a       	mov	r10,r5
800037d2:	c0 58       	rjmp	800037dc <screen_hl_line+0xfc>
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800037d4:	14 91       	mov	r1,r10
800037d6:	1c 3a       	cp.w	r10,lr

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800037d8:	fe 99 ff ce 	brgt	80003774 <screen_hl_line+0x94>
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
800037dc:	2f fa       	sub	r10,-1
800037de:	e2 08 15 06 	lsl	r8,r1,0x6
800037e2:	5c 5a       	castu.b	r10
800037e4:	18 08       	add	r8,r12
800037e6:	f2 08 07 00 	ld.ub	r0,r9[r8]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800037ea:	a5 80       	lsr	r0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800037ec:	f6 00 18 00 	cp.b	r0,r11
800037f0:	cf 21       	brne	800037d4 <screen_hl_line+0xf4>
800037f2:	e2 07 15 06 	lsl	r7,r1,0x6
800037f6:	40 10       	lddsp	r0,sp[0x4]
800037f8:	08 07       	add	r7,r4
800037fa:	f2 07 07 01 	ld.ub	r1,r9[r7]
800037fe:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003802:	00 41       	or	r1,r0
80003804:	f2 07 0b 01 	st.b	r9[r7],r1
80003808:	ce 6b       	rjmp	800037d4 <screen_hl_line+0xf4>
8000380a:	0a 91       	mov	r1,r5
8000380c:	0a 9a       	mov	r10,r5
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000380e:	c0 48       	rjmp	80003816 <screen_hl_line+0x136>
80003810:	14 91       	mov	r1,r10

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003812:	14 3e       	cp.w	lr,r10
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003814:	cb 05       	brlt	80003774 <screen_hl_line+0x94>
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
   } else {
    return screen[pos] & 0x0f;
80003816:	2f fa       	sub	r10,-1
80003818:	e2 08 15 06 	lsl	r8,r1,0x6
8000381c:	5c 5a       	castu.b	r10
8000381e:	18 08       	add	r8,r12
80003820:	f2 08 07 00 	ld.ub	r0,r9[r8]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003824:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003828:	f6 00 18 00 	cp.b	r0,r11
8000382c:	cf 21       	brne	80003810 <screen_hl_line+0x130>
8000382e:	e2 07 15 06 	lsl	r7,r1,0x6
80003832:	40 10       	lddsp	r0,sp[0x4]
80003834:	08 07       	add	r7,r4
80003836:	f2 07 07 01 	ld.ub	r1,r9[r7]
8000383a:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
8000383e:	00 41       	or	r1,r0
80003840:	f2 07 0b 01 	st.b	r9[r7],r1
80003844:	ce 6b       	rjmp	80003810 <screen_hl_line+0x130>
80003846:	d7 03       	nop

80003848 <screen_refresh>:
  print_fix16(buf, v);
  return screen_string_squeeze(x, y, buf, a);
}

// send screen buffer contents to OLED
void screen_refresh(void) {
80003848:	eb cd 40 e0 	pushm	r5-r7,lr
8000384c:	e0 67 04 28 	mov	r7,1064
80003850:	ee c6 f0 00 	sub	r6,r7,-4096

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80003854:	0f 35       	ld.ub	r5,r7++
80003856:	fe 7c 1c 00 	mov	r12,-58368
8000385a:	fe b0 f7 bc 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
8000385e:	33 bc       	mov	r12,59
80003860:	fe b0 f3 ee 	rcall	8000203c <gpio_set_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80003864:	0a 9b       	mov	r11,r5
80003866:	fe 7c 1c 00 	mov	r12,-58368
8000386a:	fe b0 f7 c7 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000386e:	fe 7c 1c 00 	mov	r12,-58368
80003872:	fe b0 f7 b4 	rcall	800027da <usart_spi_unselectChip>
// send screen buffer contents to OLED
void screen_refresh(void) {
  U16 i;
  //  cpu_irq_disable();
  //  Disable_global_interrupt();
  for(i=0; i<GRAM_BYTES; i++) { 
80003876:	0c 37       	cp.w	r7,r6
    write_data(screen[i]);  
    //write_data(i % 0xf);
  }
  //  cpu_irq_enable();
  //  Enable_global_interrupt();
}
80003878:	ce e1       	brne	80003854 <screen_refresh+0xc>
8000387a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000387e:	d7 03       	nop

80003880 <screen_test_fill>:
80003880:	d4 31       	pushm	r0-r7,lr
80003882:	20 3d       	sub	sp,12
80003884:	fe c8 e7 7c 	sub	r8,pc,-6276
80003888:	70 08       	ld.w	r8,r8[0x0]
8000388a:	50 28       	stdsp	sp[0x8],r8
8000388c:	58 08       	cp.w	r8,0
8000388e:	c7 d0       	breq	80003988 <screen_test_fill+0x108>
// fill graphics ram with a test pattern
void screen_test_fill(void) {
  u32 i;
  u32 x=0;
  u32 y=0;
  for(i=0; i<font_nglyphs; i++) {
80003890:	30 02       	mov	r2,0
80003892:	e0 69 04 0c 	mov	r9,1036
80003896:	50 02       	stdsp	sp[0x0],r2
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003898:	72 0a       	ld.w	r10,r9[0x0]
8000389a:	50 12       	stdsp	sp[0x4],r2
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
8000389c:	30 10       	mov	r0,1
8000389e:	e0 6b 04 28 	mov	r11,1064
800038a2:	fe c8 ea 92 	sub	r8,pc,-5486
800038a6:	40 16       	lddsp	r6,sp[0x4]
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800038a8:	40 01       	lddsp	r1,sp[0x0]
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
800038aa:	2e 06       	sub	r6,-32
800038ac:	30 03       	mov	r3,0
800038ae:	5c 56       	castu.b	r6
  xnum = FONT_CHARW - g->first - g->last;
800038b0:	5c 81       	casts.h	r1
800038b2:	22 06       	sub	r6,32
800038b4:	f0 06 00 36 	add	r6,r8,r6<<0x3
800038b8:	0d 85       	ld.ub	r5,r6[0x0]
800038ba:	0d 98       	ld.ub	r8,r6[0x1]
800038bc:	ea 0c 11 00 	rsub	r12,r5,0
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800038c0:	10 1c       	sub	r12,r8
800038c2:	2f ac       	sub	r12,-6
800038c4:	5c 5c       	castu.b	r12
800038c6:	58 0c       	cp.w	r12,0
800038c8:	c3 a0       	breq	8000393c <screen_test_fill+0xbc>
800038ca:	e6 02 00 07 	add	r7,r3,r2
800038ce:	e0 03 09 4e 	lsl	lr,r0,r3
800038d2:	5c 77       	castu.h	r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800038d4:	02 99       	mov	r9,r1
800038d6:	a7 67       	lsl	r7,0x6
  if (x%2) {
800038d8:	30 08       	mov	r8,0
800038da:	c1 68       	rjmp	80003906 <screen_test_fill+0x86>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800038dc:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
  if (x%2) {
800038e0:	e9 da c0 01 	bfextu	r4,r10,0x0,0x1
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800038e4:	a1 9a       	lsr	r10,0x1
800038e6:	0e 0a       	add	r10,r7
800038e8:	58 04       	cp.w	r4,0
800038ea:	c5 51       	brne	80003994 <screen_test_fill+0x114>
800038ec:	f6 0a 07 04 	ld.ub	r4,r11[r10]
800038f0:	e8 14 00 0f 	orl	r4,0xf
800038f4:	f6 0a 0b 04 	st.b	r11[r10],r4
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800038f8:	2f f9       	sub	r9,-1
800038fa:	2f f8       	sub	r8,-1
800038fc:	5c 89       	casts.h	r9
      if( (g->data[x + g->first] & (1 << y))) {
800038fe:	f0 0c 18 00 	cp.b	r12,r8
80003902:	e0 88 00 1d 	brls	8000393c <screen_test_fill+0xbc>
80003906:	ec 08 00 0a 	add	r10,r6,r8
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000390a:	0a 0a       	add	r10,r5
8000390c:	15 aa       	ld.ub	r10,r10[0x2]
  if (x%2) {
8000390e:	1c 6a       	and	r10,lr
80003910:	ce 61       	brne	800038dc <screen_test_fill+0x5c>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003912:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
  if (x%2) {
80003916:	e9 da c0 01 	bfextu	r4,r10,0x0,0x1
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000391a:	a1 9a       	lsr	r10,0x1
8000391c:	0e 0a       	add	r10,r7
8000391e:	58 04       	cp.w	r4,0
80003920:	c4 31       	brne	800039a6 <screen_test_fill+0x126>
80003922:	f6 0a 07 04 	ld.ub	r4,r11[r10]
80003926:	e0 14 ff f0 	andl	r4,0xfff0
8000392a:	f6 0a 0b 04 	st.b	r11[r10],r4
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
8000392e:	2f f9       	sub	r9,-1
80003930:	2f f8       	sub	r8,-1
80003932:	5c 89       	casts.h	r9
80003934:	f0 0c 18 00 	cp.b	r12,r8
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
80003938:	fe 9b ff e7 	brhi	80003906 <screen_test_fill+0x86>
void screen_test_fill(void) {
  u32 i;
  u32 x=0;
  u32 y=0;
  for(i=0; i<font_nglyphs; i++) {
    x = x + screen_char_squeeze(x, y, i + FONT_ASCII_OFFSET, 0xf);
8000393c:	2f f3       	sub	r3,-1
8000393e:	58 83       	cp.w	r3,8
    x++;
80003940:	cc 31       	brne	800038c6 <screen_test_fill+0x46>
80003942:	40 09       	lddsp	r9,sp[0x0]
    if (x > NCOLS) {
80003944:	f8 c8 ff ff 	sub	r8,r12,-1
80003948:	10 09       	add	r9,r8
8000394a:	50 09       	stdsp	sp[0x0],r9
      x -= NCOLS;
8000394c:	e0 49 00 80 	cp.w	r9,128
      y += FONT_CHARH;
80003950:	e0 88 00 06 	brls	8000395c <screen_test_fill+0xdc>
// fill graphics ram with a test pattern
void screen_test_fill(void) {
  u32 i;
  u32 x=0;
  u32 y=0;
  for(i=0; i<font_nglyphs; i++) {
80003954:	f2 c9 00 80 	sub	r9,r9,128
80003958:	2f 82       	sub	r2,-8
8000395a:	50 09       	stdsp	sp[0x0],r9
8000395c:	40 18       	lddsp	r8,sp[0x4]
8000395e:	2f f8       	sub	r8,-1
80003960:	50 18       	stdsp	sp[0x4],r8
80003962:	40 29       	lddsp	r9,sp[0x8]
80003964:	12 38       	cp.w	r8,r9
80003966:	c9 e3       	brcs	800038a2 <screen_test_fill+0x22>
80003968:	e0 68 04 0c 	mov	r8,1036
8000396c:	91 0a       	st.w	r8[0x0],r10
8000396e:	e0 68 04 10 	mov	r8,1040
80003972:	91 06       	st.w	r8[0x0],r6
80003974:	e0 68 04 14 	mov	r8,1044
    if (x > NCOLS) {
      x -= NCOLS;
      y += FONT_CHARH;
    }
  }
  refresh = 1;
80003978:	b0 8c       	st.b	r8[0x0],r12
8000397a:	e0 68 04 09 	mov	r8,1033
}
8000397e:	30 89       	mov	r9,8
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003980:	b0 89       	st.b	r8[0x0],r9
80003982:	e0 68 14 28 	mov	r8,5160
80003986:	b0 8c       	st.b	r8[0x0],r12
80003988:	30 19       	mov	r9,1
8000398a:	e0 68 02 60 	mov	r8,608
8000398e:	b0 89       	st.b	r8[0x0],r9
80003990:	2f dd       	sub	sp,-12
80003992:	d8 32       	popm	r0-r7,pc
80003994:	f6 0a 07 04 	ld.ub	r4,r11[r10]
80003998:	ea 14 ff ff 	orh	r4,0xffff
8000399c:	e8 14 ff f0 	orl	r4,0xfff0
800039a0:	f6 0a 0b 04 	st.b	r11[r10],r4
800039a4:	ca ab       	rjmp	800038f8 <screen_test_fill+0x78>
800039a6:	f6 0a 07 04 	ld.ub	r4,r11[r10]
800039aa:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800039ae:	f6 0a 0b 04 	st.b	r11[r10],r4
800039b2:	ca 3b       	rjmp	800038f8 <screen_test_fill+0x78>

800039b4 <screen_line>:
800039b4:	d4 31       	pushm	r0-r7,lr
800039b6:	20 9d       	sub	sp,36
800039b8:	50 2a       	stdsp	sp[0x8],r10
800039ba:	50 1c       	stdsp	sp[0x4],r12
800039bc:	15 88       	ld.ub	r8,r10[0x0]
800039be:	58 08       	cp.w	r8,0
800039c0:	e0 80 00 f2 	breq	80003ba4 <screen_line+0x1f0>
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800039c4:	e5 d9 c0 04 	bfextu	r2,r9,0x0,0x4
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800039c8:	a5 69       	lsl	r9,0x4
800039ca:	e3 d9 c0 08 	bfextu	r1,r9,0x0,0x8
800039ce:	f6 c9 ff ff 	sub	r9,r11,-1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800039d2:	5c 79       	castu.h	r9
800039d4:	a7 69       	lsl	r9,0x6
800039d6:	50 79       	stdsp	sp[0x1c],r9
800039d8:	f6 c9 ff fe 	sub	r9,r11,-2
800039dc:	5c 79       	castu.h	r9
800039de:	a7 69       	lsl	r9,0x6
800039e0:	f9 db c0 10 	bfextu	r12,r11,0x0,0x10
800039e4:	50 89       	stdsp	sp[0x20],r9
800039e6:	f6 c9 ff fd 	sub	r9,r11,-3
800039ea:	50 3c       	stdsp	sp[0xc],r12
800039ec:	fb 59 00 12 	st.h	sp[18],r9
800039f0:	f6 cc ff fc 	sub	r12,r11,-4
800039f4:	f6 c9 ff fb 	sub	r9,r11,-5
800039f8:	fb 5c 00 14 	st.h	sp[20],r12
800039fc:	fb 59 00 16 	st.h	sp[22],r9
80003a00:	f6 cc ff fa 	sub	r12,r11,-6
80003a04:	f6 c9 ff f9 	sub	r9,r11,-7
80003a08:	e0 6a 04 28 	mov	r10,1064
80003a0c:	fb 5c 00 18 	st.h	sp[24],r12
80003a10:	fb 59 00 1a 	st.h	sp[26],r9
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
80003a14:	22 08       	sub	r8,32
80003a16:	fe cc ec 06 	sub	r12,pc,-5114
80003a1a:	f8 08 00 35 	add	r5,r12,r8<<0x3
  xnum = FONT_CHARW - g->first - g->last;
80003a1e:	0b 84       	ld.ub	r4,r5[0x0]
80003a20:	e8 09 11 00 	rsub	r9,r4,0
80003a24:	0b 98       	ld.ub	r8,r5[0x1]
80003a26:	30 03       	mov	r3,0
80003a28:	f2 08 01 08 	sub	r8,r9,r8
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003a2c:	40 19       	lddsp	r9,sp[0x4]
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
80003a2e:	f0 ce ff fa 	sub	lr,r8,-6
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003a32:	5c 89       	casts.h	r9
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
80003a34:	5c 5e       	castu.b	lr
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003a36:	50 09       	stdsp	sp[0x0],r9
80003a38:	58 0e       	cp.w	lr,0
80003a3a:	c3 e0       	breq	80003ab6 <screen_line+0x102>
80003a3c:	30 18       	mov	r8,1
80003a3e:	e6 0b 00 06 	add	r6,r3,r11
80003a42:	f0 03 09 47 	lsl	r7,r8,r3
80003a46:	5c 76       	castu.h	r6
80003a48:	40 09       	lddsp	r9,sp[0x0]
80003a4a:	a7 66       	lsl	r6,0x6
80003a4c:	30 08       	mov	r8,0
80003a4e:	c1 88       	rjmp	80003a7e <screen_line+0xca>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003a50:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80003a54:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003a58:	a1 9c       	lsr	r12,0x1
80003a5a:	0c 0c       	add	r12,r6
  if (x%2) {
80003a5c:	58 00       	cp.w	r0,0
80003a5e:	e0 81 00 e1 	brne	80003c20 <screen_line+0x26c>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003a62:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80003a66:	e0 10 ff f0 	andl	r0,0xfff0
80003a6a:	04 40       	or	r0,r2
80003a6c:	f4 0c 0b 00 	st.b	r10[r12],r0
80003a70:	2f f9       	sub	r9,-1
80003a72:	2f f8       	sub	r8,-1
80003a74:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003a76:	f0 0e 18 00 	cp.b	lr,r8
80003a7a:	e0 88 00 1e 	brls	80003ab6 <screen_line+0x102>
      if( (g->data[x + g->first] & (1 << y))) {
80003a7e:	ea 08 00 0c 	add	r12,r5,r8
80003a82:	08 0c       	add	r12,r4
80003a84:	19 ac       	ld.ub	r12,r12[0x2]
80003a86:	0e 6c       	and	r12,r7
80003a88:	ce 41       	brne	80003a50 <screen_line+0x9c>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003a8a:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80003a8e:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003a92:	a1 9c       	lsr	r12,0x1
80003a94:	0c 0c       	add	r12,r6
  if (x%2) {
80003a96:	58 00       	cp.w	r0,0
80003a98:	e0 81 00 cc 	brne	80003c30 <screen_line+0x27c>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003a9c:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80003aa0:	e0 10 ff f0 	andl	r0,0xfff0
80003aa4:	f4 0c 0b 00 	st.b	r10[r12],r0
80003aa8:	2f f9       	sub	r9,-1
80003aaa:	2f f8       	sub	r8,-1
80003aac:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003aae:	f0 0e 18 00 	cp.b	lr,r8
80003ab2:	fe 9b ff e6 	brhi	80003a7e <screen_line+0xca>
80003ab6:	2f f3       	sub	r3,-1
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
80003ab8:	58 83       	cp.w	r3,8
80003aba:	cb f1       	brne	80003a38 <screen_line+0x84>
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
80003abc:	40 18       	lddsp	r8,sp[0x4]
80003abe:	1c 08       	add	r8,lr
80003ac0:	5c 88       	casts.h	r8
80003ac2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003ac6:	f9 d9 c0 01 	bfextu	r12,r9,0x0,0x1
80003aca:	a1 99       	lsr	r9,0x1
80003acc:	58 0c       	cp.w	r12,0
80003ace:	e0 81 00 d0 	brne	80003c6e <screen_line+0x2ba>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003ad2:	40 37       	lddsp	r7,sp[0xc]
80003ad4:	a7 67       	lsl	r7,0x6
80003ad6:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003ad8:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003adc:	e0 1c ff f0 	andl	r12,0xfff0
80003ae0:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003ae4:	40 77       	lddsp	r7,sp[0x1c]
80003ae6:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003ae8:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003aec:	e0 1c ff f0 	andl	r12,0xfff0
80003af0:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003af4:	40 87       	lddsp	r7,sp[0x20]
80003af6:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003af8:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003afc:	e0 1c ff f0 	andl	r12,0xfff0
80003b00:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003b04:	fb 17 00 12 	ld.uh	r7,sp[18]
80003b08:	a7 67       	lsl	r7,0x6
80003b0a:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003b0c:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003b10:	e0 1c ff f0 	andl	r12,0xfff0
80003b14:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003b18:	fb 17 00 14 	ld.uh	r7,sp[20]
80003b1c:	a7 67       	lsl	r7,0x6
80003b1e:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003b20:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003b24:	e0 1c ff f0 	andl	r12,0xfff0
80003b28:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003b2c:	fb 17 00 16 	ld.uh	r7,sp[22]
80003b30:	a7 67       	lsl	r7,0x6
80003b32:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003b34:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003b38:	e0 1c ff f0 	andl	r12,0xfff0
80003b3c:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003b40:	fb 17 00 18 	ld.uh	r7,sp[24]
80003b44:	a7 67       	lsl	r7,0x6
80003b46:	12 07       	add	r7,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003b48:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003b4c:	e0 1c ff f0 	andl	r12,0xfff0
80003b50:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003b54:	fb 1c 00 1a 	ld.uh	r12,sp[26]
80003b58:	a7 6c       	lsl	r12,0x6
80003b5a:	f8 09 00 09 	add	r9,r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003b5e:	f4 09 07 0c 	ld.ub	r12,r10[r9]
80003b62:	e0 1c ff f0 	andl	r12,0xfff0
80003b66:	f4 09 0b 0c 	st.b	r10[r9],r12
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
80003b6a:	40 2c       	lddsp	r12,sp[0x8]
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80003b6c:	2f f8       	sub	r8,-1
    str++;
80003b6e:	2f fc       	sub	r12,-1
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80003b70:	5c 88       	casts.h	r8
    str++;
80003b72:	50 2c       	stdsp	sp[0x8],r12
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80003b74:	50 18       	stdsp	sp[0x4],r8
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80003b76:	19 88       	ld.ub	r8,r12[0x0]
80003b78:	58 08       	cp.w	r8,0
80003b7a:	fe 91 ff 4d 	brne	80003a14 <screen_line+0x60>
80003b7e:	e0 6a 04 10 	mov	r10,1040
80003b82:	95 05       	st.w	r10[0x0],r5
80003b84:	e0 6a 04 14 	mov	r10,1044
80003b88:	b4 8e       	st.b	r10[0x0],lr
80003b8a:	e0 6a 04 09 	mov	r10,1033
80003b8e:	30 88       	mov	r8,8
80003b90:	b4 88       	st.b	r10[0x0],r8
80003b92:	e0 6a 14 28 	mov	r10,5160
80003b96:	b4 8e       	st.b	r10[0x0],lr
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  return x;
80003b98:	e0 6a 04 0c 	mov	r10,1036
80003b9c:	95 09       	st.w	r10[0x0],r9
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003b9e:	e0 69 04 08 	mov	r9,1032
80003ba2:	b2 88       	st.b	r9[0x0],r8
80003ba4:	40 15       	lddsp	r5,sp[0x4]
80003ba6:	30 08       	mov	r8,0
80003ba8:	5c 55       	castu.b	r5
80003baa:	f0 05 18 00 	cp.b	r5,r8
80003bae:	c3 15       	brlt	80003c10 <screen_line+0x25c>
80003bb0:	fd db c0 10 	bfextu	lr,r11,0x0,0x10
80003bb4:	40 1a       	lddsp	r10,sp[0x4]
80003bb6:	e0 63 04 0c 	mov	r3,1036
80003bba:	30 06       	mov	r6,0
80003bbc:	14 94       	mov	r4,r10
80003bbe:	2f 9e       	sub	lr,-7
    for(j=y; j<(FONT_CHARH + y); j++) {
80003bc0:	5c 5b       	castu.b	r11
80003bc2:	66 08       	ld.w	r8,r3[0x0]
80003bc4:	e0 6c 04 28 	mov	r12,1064
80003bc8:	0c 92       	mov	r2,r6
80003bca:	ea 06 00 07 	add	r7,r5,r6
80003bce:	5c 57       	castu.b	r7
80003bd0:	1c 3b       	cp.w	r11,lr
80003bd2:	e0 89 00 18 	brgt	80003c02 <screen_line+0x24e>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003bd6:	5c 77       	castu.h	r7
80003bd8:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003bdc:	a1 97       	lsr	r7,0x1
80003bde:	58 08       	cp.w	r8,0
80003be0:	c2 f1       	brne	80003c3e <screen_line+0x28a>
80003be2:	16 9a       	mov	r10,r11
80003be4:	16 99       	mov	r9,r11
80003be6:	f4 08 15 06 	lsl	r8,r10,0x6

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80003bea:	0e 08       	add	r8,r7
80003bec:	f8 08 07 0a 	ld.ub	r10,r12[r8]
80003bf0:	e0 1a ff f0 	andl	r10,0xfff0
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003bf4:	f8 08 0b 0a 	st.b	r12[r8],r10
80003bf8:	2f f9       	sub	r9,-1
80003bfa:	5c 59       	castu.b	r9
80003bfc:	12 9a       	mov	r10,r9
80003bfe:	12 3e       	cp.w	lr,r9

  //  print_dbg("\r\n");
  //  if(hl > 2) { print_dbg("__"); }
  //  print_dbg(str);

  refresh = 1;
80003c00:	cf 34       	brge	80003be6 <screen_line+0x232>
80003c02:	2f f6       	sub	r6,-1

  return NCOLS;
}
80003c04:	e8 06 00 09 	add	r9,r4,r6

  //  print_dbg("\r\n");
  //  if(hl > 2) { print_dbg("__"); }
  //  print_dbg(str);

  refresh = 1;
80003c08:	e4 09 18 00 	cp.b	r9,r2

  return NCOLS;
}
80003c0c:	cd f4       	brge	80003bca <screen_line+0x216>
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003c0e:	87 08       	st.w	r3[0x0],r8
80003c10:	30 19       	mov	r9,1
80003c12:	e0 68 02 60 	mov	r8,608
80003c16:	e0 6c 00 80 	mov	r12,128
80003c1a:	b0 89       	st.b	r8[0x0],r9
80003c1c:	2f 7d       	sub	sp,-36
80003c1e:	d8 32       	popm	r0-r7,pc
80003c20:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80003c24:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80003c28:	02 40       	or	r0,r1
80003c2a:	f4 0c 0b 00 	st.b	r10[r12],r0

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80003c2e:	c2 1b       	rjmp	80003a70 <screen_line+0xbc>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003c30:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80003c34:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003c38:	f4 0c 0b 00 	st.b	r10[r12],r0
80003c3c:	c1 ab       	rjmp	80003a70 <screen_line+0xbc>
80003c3e:	16 9a       	mov	r10,r11
80003c40:	16 99       	mov	r9,r11

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80003c42:	f4 08 15 06 	lsl	r8,r10,0x6
80003c46:	0e 08       	add	r8,r7
80003c48:	f8 08 07 0a 	ld.ub	r10,r12[r8]
80003c4c:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003c50:	f8 08 0b 0a 	st.b	r12[r8],r10
80003c54:	2f f9       	sub	r9,-1
80003c56:	5c 59       	castu.b	r9
80003c58:	12 9a       	mov	r10,r9
80003c5a:	1c 39       	cp.w	r9,lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003c5c:	fe 9a ff f3 	brle	80003c42 <screen_line+0x28e>
80003c60:	2f f6       	sub	r6,-1
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003c62:	e8 06 00 09 	add	r9,r4,r6
80003c66:	e4 09 18 00 	cp.b	r9,r2
80003c6a:	cb 04       	brge	80003bca <screen_line+0x216>
80003c6c:	cd 1b       	rjmp	80003c0e <screen_line+0x25a>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003c6e:	40 3c       	lddsp	r12,sp[0xc]
80003c70:	a7 6c       	lsl	r12,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003c72:	12 0c       	add	r12,r9
80003c74:	f4 0c 07 07 	ld.ub	r7,r10[r12]
80003c78:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003c7c:	f4 0c 0b 07 	st.b	r10[r12],r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003c80:	40 7c       	lddsp	r12,sp[0x1c]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003c82:	12 0c       	add	r12,r9
80003c84:	f4 0c 07 07 	ld.ub	r7,r10[r12]
80003c88:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003c8c:	f4 0c 0b 07 	st.b	r10[r12],r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003c90:	40 8c       	lddsp	r12,sp[0x20]
80003c92:	12 0c       	add	r12,r9
80003c94:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003c98:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003c9c:	f4 0c 0b 07 	st.b	r10[r12],r7
80003ca0:	fb 1c 00 12 	ld.uh	r12,sp[18]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003ca4:	a7 6c       	lsl	r12,0x6
80003ca6:	12 0c       	add	r12,r9
80003ca8:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003cac:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003cb0:	f4 0c 0b 07 	st.b	r10[r12],r7
80003cb4:	fb 1c 00 14 	ld.uh	r12,sp[20]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003cb8:	a7 6c       	lsl	r12,0x6
80003cba:	12 0c       	add	r12,r9
80003cbc:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003cc0:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003cc4:	f4 0c 0b 07 	st.b	r10[r12],r7
80003cc8:	fb 1c 00 16 	ld.uh	r12,sp[22]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003ccc:	a7 6c       	lsl	r12,0x6
80003cce:	12 0c       	add	r12,r9
80003cd0:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003cd4:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003cd8:	f4 0c 0b 07 	st.b	r10[r12],r7
80003cdc:	fb 1c 00 18 	ld.uh	r12,sp[24]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003ce0:	a7 6c       	lsl	r12,0x6
80003ce2:	12 0c       	add	r12,r9
80003ce4:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003ce8:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003cec:	f4 0c 0b 07 	st.b	r10[r12],r7
80003cf0:	fb 1c 00 1a 	ld.uh	r12,sp[26]
80003cf4:	a7 6c       	lsl	r12,0x6
80003cf6:	f8 09 00 09 	add	r9,r12,r9
80003cfa:	f4 09 07 0c 	ld.ub	r12,r10[r9]
80003cfe:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80003d02:	f4 09 0b 0c 	st.b	r10[r9],r12
80003d06:	c3 2b       	rjmp	80003b6a <screen_line+0x1b6>

80003d08 <screen_int>:
80003d08:	d4 31       	pushm	r0-r7,lr
80003d0a:	20 9d       	sub	sp,36
80003d0c:	e0 65 04 18 	mov	r5,1048
80003d10:	50 1c       	stdsp	sp[0x4],r12
80003d12:	16 97       	mov	r7,r11
80003d14:	14 9c       	mov	r12,r10
80003d16:	12 96       	mov	r6,r9
80003d18:	30 5a       	mov	r10,5
80003d1a:	0a 9b       	mov	r11,r5
  //  static char buf[32];
  //  snprintf(buf, 32, "%d", (int)i);
    static char buf[FIX_DIG_TOTAL];
  //snprintf(buf, 32, "%.1f", (float)f);
    //  print_fix16(buf, (u32)i << 16 );
    itoa_whole(i, buf, 5);
80003d1c:	e0 a0 05 c6 	rcall	800048a8 <itoa_whole>
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80003d20:	0b 88       	ld.ub	r8,r5[0x0]
80003d22:	58 08       	cp.w	r8,0
80003d24:	e0 80 00 ef 	breq	80003f02 <screen_int+0x1fa>
80003d28:	0e 99       	mov	r9,r7
80003d2a:	2f f9       	sub	r9,-1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003d2c:	5c 79       	castu.h	r9
80003d2e:	a7 69       	lsl	r9,0x6
80003d30:	0e 9b       	mov	r11,r7
80003d32:	50 79       	stdsp	sp[0x1c],r9
80003d34:	5c 7b       	castu.h	r11
80003d36:	0e 99       	mov	r9,r7
80003d38:	2f e9       	sub	r9,-2
80003d3a:	5c 79       	castu.h	r9
80003d3c:	a7 69       	lsl	r9,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003d3e:	e5 d6 c0 04 	bfextu	r2,r6,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003d42:	50 89       	stdsp	sp[0x20],r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003d44:	a5 66       	lsl	r6,0x4
80003d46:	50 3b       	stdsp	sp[0xc],r11
80003d48:	0e 99       	mov	r9,r7
80003d4a:	0e 9b       	mov	r11,r7
80003d4c:	2f d9       	sub	r9,-3
80003d4e:	2f cb       	sub	r11,-4
80003d50:	fb 59 00 12 	st.h	sp[18],r9
80003d54:	fb 5b 00 14 	st.h	sp[20],r11
80003d58:	2f e9       	sub	r9,-2
80003d5a:	2f eb       	sub	r11,-2
80003d5c:	fb 59 00 16 	st.h	sp[22],r9
80003d60:	50 25       	stdsp	sp[0x8],r5
80003d62:	2f e9       	sub	r9,-2
80003d64:	e3 d6 c0 08 	bfextu	r1,r6,0x0,0x8
80003d68:	e0 6a 04 28 	mov	r10,1064
80003d6c:	fb 5b 00 18 	st.h	sp[24],r11
80003d70:	fb 59 00 1a 	st.h	sp[26],r9
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
80003d74:	22 08       	sub	r8,32
80003d76:	fe cb ef 66 	sub	r11,pc,-4250
80003d7a:	f6 08 00 35 	add	r5,r11,r8<<0x3
  xnum = FONT_CHARW - g->first - g->last;
80003d7e:	0b 84       	ld.ub	r4,r5[0x0]
80003d80:	e8 09 11 00 	rsub	r9,r4,0
80003d84:	0b 98       	ld.ub	r8,r5[0x1]
80003d86:	30 03       	mov	r3,0
80003d88:	f2 08 01 08 	sub	r8,r9,r8
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003d8c:	40 19       	lddsp	r9,sp[0x4]
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
80003d8e:	f0 cc ff fa 	sub	r12,r8,-6
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003d92:	5c 89       	casts.h	r9
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
80003d94:	5c 5c       	castu.b	r12
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003d96:	50 09       	stdsp	sp[0x0],r9
80003d98:	58 0c       	cp.w	r12,0
80003d9a:	c3 e0       	breq	80003e16 <screen_int+0x10e>
80003d9c:	e6 07 00 06 	add	r6,r3,r7
80003da0:	30 1b       	mov	r11,1
80003da2:	5c 76       	castu.h	r6
80003da4:	f6 03 09 4e 	lsl	lr,r11,r3
80003da8:	a7 66       	lsl	r6,0x6
80003daa:	40 09       	lddsp	r9,sp[0x0]
80003dac:	30 08       	mov	r8,0
80003dae:	c1 88       	rjmp	80003dde <screen_int+0xd6>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003db0:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
  if (x%2) {
80003db4:	e1 db c0 01 	bfextu	r0,r11,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003db8:	a1 9b       	lsr	r11,0x1
80003dba:	0c 0b       	add	r11,r6
  if (x%2) {
80003dbc:	58 00       	cp.w	r0,0
80003dbe:	e0 81 00 a6 	brne	80003f0a <screen_int+0x202>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003dc2:	f4 0b 07 00 	ld.ub	r0,r10[r11]
80003dc6:	e0 10 ff f0 	andl	r0,0xfff0
80003dca:	04 40       	or	r0,r2
80003dcc:	f4 0b 0b 00 	st.b	r10[r11],r0
80003dd0:	2f f9       	sub	r9,-1
80003dd2:	2f f8       	sub	r8,-1
80003dd4:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003dd6:	f0 0c 18 00 	cp.b	r12,r8
80003dda:	e0 88 00 1e 	brls	80003e16 <screen_int+0x10e>
      if( (g->data[x + g->first] & (1 << y))) {
80003dde:	ea 08 00 0b 	add	r11,r5,r8
80003de2:	08 0b       	add	r11,r4
80003de4:	17 ab       	ld.ub	r11,r11[0x2]
80003de6:	1c 6b       	and	r11,lr
80003de8:	ce 41       	brne	80003db0 <screen_int+0xa8>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003dea:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
  if (x%2) {
80003dee:	e1 db c0 01 	bfextu	r0,r11,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003df2:	a1 9b       	lsr	r11,0x1
80003df4:	0c 0b       	add	r11,r6
  if (x%2) {
80003df6:	58 00       	cp.w	r0,0
80003df8:	e0 81 00 91 	brne	80003f1a <screen_int+0x212>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003dfc:	f4 0b 07 00 	ld.ub	r0,r10[r11]
80003e00:	e0 10 ff f0 	andl	r0,0xfff0
80003e04:	f4 0b 0b 00 	st.b	r10[r11],r0
80003e08:	2f f9       	sub	r9,-1
80003e0a:	2f f8       	sub	r8,-1
80003e0c:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003e0e:	f0 0c 18 00 	cp.b	r12,r8
80003e12:	fe 9b ff e6 	brhi	80003dde <screen_int+0xd6>
80003e16:	2f f3       	sub	r3,-1
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
80003e18:	58 83       	cp.w	r3,8
80003e1a:	cb f1       	brne	80003d98 <screen_int+0x90>
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
80003e1c:	40 18       	lddsp	r8,sp[0x4]
80003e1e:	18 08       	add	r8,r12
80003e20:	5c 88       	casts.h	r8
80003e22:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003e26:	f7 d9 c0 01 	bfextu	r11,r9,0x0,0x1
80003e2a:	a1 99       	lsr	r9,0x1
80003e2c:	58 0b       	cp.w	r11,0
80003e2e:	c7 d1       	brne	80003f28 <screen_int+0x220>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e30:	40 3e       	lddsp	lr,sp[0xc]
80003e32:	a7 6e       	lsl	lr,0x6
80003e34:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003e36:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003e3a:	e0 1b ff f0 	andl	r11,0xfff0
80003e3e:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e42:	40 7e       	lddsp	lr,sp[0x1c]
80003e44:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003e46:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003e4a:	e0 1b ff f0 	andl	r11,0xfff0
80003e4e:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e52:	40 8e       	lddsp	lr,sp[0x20]
80003e54:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003e56:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003e5a:	e0 1b ff f0 	andl	r11,0xfff0
80003e5e:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e62:	fb 1e 00 12 	ld.uh	lr,sp[18]
80003e66:	a7 6e       	lsl	lr,0x6
80003e68:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003e6a:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003e6e:	e0 1b ff f0 	andl	r11,0xfff0
80003e72:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e76:	fb 1e 00 14 	ld.uh	lr,sp[20]
80003e7a:	a7 6e       	lsl	lr,0x6
80003e7c:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003e7e:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003e82:	e0 1b ff f0 	andl	r11,0xfff0
80003e86:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e8a:	fb 1e 00 16 	ld.uh	lr,sp[22]
80003e8e:	a7 6e       	lsl	lr,0x6
80003e90:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003e92:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003e96:	e0 1b ff f0 	andl	r11,0xfff0
80003e9a:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003e9e:	fb 1e 00 18 	ld.uh	lr,sp[24]
80003ea2:	a7 6e       	lsl	lr,0x6
80003ea4:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003ea6:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80003eaa:	e0 1b ff f0 	andl	r11,0xfff0
80003eae:	f4 0e 0b 0b 	st.b	r10[lr],r11
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003eb2:	fb 1b 00 1a 	ld.uh	r11,sp[26]
80003eb6:	a7 6b       	lsl	r11,0x6
80003eb8:	f6 09 00 09 	add	r9,r11,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003ebc:	f4 09 07 0b 	ld.ub	r11,r10[r9]
80003ec0:	e0 1b ff f0 	andl	r11,0xfff0
80003ec4:	f4 09 0b 0b 	st.b	r10[r9],r11
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
80003ec8:	40 2b       	lddsp	r11,sp[0x8]
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80003eca:	2f f8       	sub	r8,-1
    str++;
80003ecc:	2f fb       	sub	r11,-1
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80003ece:	5c 88       	casts.h	r8
    str++;
80003ed0:	50 2b       	stdsp	sp[0x8],r11
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80003ed2:	50 18       	stdsp	sp[0x4],r8
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80003ed4:	17 88       	ld.ub	r8,r11[0x0]
80003ed6:	58 08       	cp.w	r8,0
80003ed8:	fe 91 ff 4e 	brne	80003d74 <screen_int+0x6c>
80003edc:	e0 6a 04 10 	mov	r10,1040
80003ee0:	95 05       	st.w	r10[0x0],r5
80003ee2:	e0 6a 04 14 	mov	r10,1044
80003ee6:	b4 8c       	st.b	r10[0x0],r12
80003ee8:	e0 6a 04 09 	mov	r10,1033
80003eec:	30 88       	mov	r8,8
80003eee:	b4 88       	st.b	r10[0x0],r8
80003ef0:	e0 6a 14 28 	mov	r10,5160
80003ef4:	b4 8c       	st.b	r10[0x0],r12
  //snprintf(buf, 32, "%.1f", (float)f);
    //  print_fix16(buf, (u32)i << 16 );
    itoa_whole(i, buf, 5);
  //buf = ultoa(int);
  return screen_string_squeeze(x, y, buf, a);
}
80003ef6:	e0 6a 04 0c 	mov	r10,1036
80003efa:	95 09       	st.w	r10[0x0],r9
80003efc:	e0 69 04 08 	mov	r9,1032
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f00:	b2 88       	st.b	r9[0x0],r8
80003f02:	40 1c       	lddsp	r12,sp[0x4]
80003f04:	5c 5c       	castu.b	r12
80003f06:	2f 7d       	sub	sp,-36
80003f08:	d8 32       	popm	r0-r7,pc
80003f0a:	f4 0b 07 00 	ld.ub	r0,r10[r11]
80003f0e:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80003f12:	02 40       	or	r0,r1
80003f14:	f4 0b 0b 00 	st.b	r10[r11],r0
80003f18:	c5 cb       	rjmp	80003dd0 <screen_int+0xc8>
80003f1a:	f4 0b 07 00 	ld.ub	r0,r10[r11]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f1e:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f22:	f4 0b 0b 00 	st.b	r10[r11],r0
80003f26:	c5 5b       	rjmp	80003dd0 <screen_int+0xc8>
80003f28:	40 3b       	lddsp	r11,sp[0xc]
80003f2a:	a7 6b       	lsl	r11,0x6
80003f2c:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f2e:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f32:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80003f36:	f4 0b 0b 0e 	st.b	r10[r11],lr
80003f3a:	40 7b       	lddsp	r11,sp[0x1c]
80003f3c:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f3e:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f42:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80003f46:	f4 0b 0b 0e 	st.b	r10[r11],lr
80003f4a:	40 8b       	lddsp	r11,sp[0x20]
80003f4c:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f4e:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80003f52:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f56:	f4 0b 0b 0e 	st.b	r10[r11],lr
80003f5a:	fb 1b 00 12 	ld.uh	r11,sp[18]
80003f5e:	a7 6b       	lsl	r11,0x6
80003f60:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f62:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80003f66:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f6a:	f4 0b 0b 0e 	st.b	r10[r11],lr
80003f6e:	fb 1b 00 14 	ld.uh	r11,sp[20]
80003f72:	a7 6b       	lsl	r11,0x6
80003f74:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f76:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80003f7a:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f7e:	f4 0b 0b 0e 	st.b	r10[r11],lr
80003f82:	fb 1b 00 16 	ld.uh	r11,sp[22]
80003f86:	a7 6b       	lsl	r11,0x6
80003f88:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f8a:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80003f8e:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003f92:	f4 0b 0b 0e 	st.b	r10[r11],lr
80003f96:	fb 1b 00 18 	ld.uh	r11,sp[24]
80003f9a:	a7 6b       	lsl	r11,0x6
80003f9c:	12 0b       	add	r11,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80003f9e:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80003fa2:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80003fa6:	f4 0b 0b 0e 	st.b	r10[r11],lr
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003faa:	fb 1b 00 1a 	ld.uh	r11,sp[26]
80003fae:	a7 6b       	lsl	r11,0x6
80003fb0:	f6 09 00 09 	add	r9,r11,r9
80003fb4:	f4 09 07 0b 	ld.ub	r11,r10[r9]
80003fb8:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
80003fbc:	f4 09 0b 0b 	st.b	r10[r9],r11
80003fc0:	c8 4b       	rjmp	80003ec8 <screen_int+0x1c0>
80003fc2:	d7 03       	nop

80003fc4 <init_oled>:
80003fc4:	eb cd 40 80 	pushm	r7,lr
80003fc8:	20 2d       	sub	sp,8
80003fca:	d3 03       	ssrf	0x10
80003fcc:	33 cc       	mov	r12,60
80003fce:	fe b0 f0 37 	rcall	8000203c <gpio_set_gpio_pin>
80003fd2:	e0 68 fb c5 	mov	r8,64453
80003fd6:	30 09       	mov	r9,0
80003fd8:	fa e9 00 00 	st.d	sp[0],r8
80003fdc:	fa e8 00 00 	ld.d	r8,sp[0]
  //  cpu_irq_disable();
  Disable_global_interrupt();
  // flip the reset pin
  gpio_set_gpio_pin(OLED_RESET_PIN);
  //  delay_ms(1);
  delay = FCPU_HZ >> 10 ; while(delay > 0) { delay--; }
80003fe0:	58 08       	cp.w	r8,0
80003fe2:	5c 29       	cpc	r9
80003fe4:	c0 f0       	breq	80004002 <init_oled+0x3e>
80003fe6:	3f fa       	mov	r10,-1
80003fe8:	3f fb       	mov	r11,-1
80003fea:	fa e8 00 00 	ld.d	r8,sp[0]
80003fee:	14 08       	add	r8,r10
80003ff0:	f2 0b 00 49 	adc	r9,r9,r11
80003ff4:	fa e9 00 00 	st.d	sp[0],r8
80003ff8:	fa e8 00 00 	ld.d	r8,sp[0]
80003ffc:	58 08       	cp.w	r8,0
80003ffe:	5c 29       	cpc	r9
80004000:	cf 51       	brne	80003fea <init_oled+0x26>
  gpio_clr_gpio_pin(OLED_RESET_PIN);
80004002:	33 cc       	mov	r12,60
80004004:	fe b0 f0 29 	rcall	80002056 <gpio_clr_gpio_pin>
  // delay_ms(1);
  delay=FCPU_HZ >> 10; while(delay > 0) { delay--; }
80004008:	e0 68 fb c5 	mov	r8,64453
8000400c:	30 09       	mov	r9,0
8000400e:	fa e9 00 00 	st.d	sp[0],r8
80004012:	fa e8 00 00 	ld.d	r8,sp[0]
80004016:	58 08       	cp.w	r8,0
80004018:	5c 29       	cpc	r9
8000401a:	c0 f0       	breq	80004038 <init_oled+0x74>
8000401c:	3f fa       	mov	r10,-1
8000401e:	3f fb       	mov	r11,-1
80004020:	fa e8 00 00 	ld.d	r8,sp[0]
80004024:	14 08       	add	r8,r10
80004026:	f2 0b 00 49 	adc	r9,r9,r11
8000402a:	fa e9 00 00 	st.d	sp[0],r8
8000402e:	fa e8 00 00 	ld.d	r8,sp[0]
80004032:	58 08       	cp.w	r8,0
80004034:	5c 29       	cpc	r9
80004036:	cf 51       	brne	80004020 <init_oled+0x5c>
  gpio_set_gpio_pin(OLED_RESET_PIN);
80004038:	33 cc       	mov	r12,60
8000403a:	fe b0 f0 01 	rcall	8000203c <gpio_set_gpio_pin>
  //delay_ms(10);
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
8000403e:	e2 78 ef 14 	mov	r8,257812
80004042:	30 09       	mov	r9,0
80004044:	fa e9 00 00 	st.d	sp[0],r8
80004048:	fa e8 00 00 	ld.d	r8,sp[0]
8000404c:	58 08       	cp.w	r8,0
8000404e:	5c 29       	cpc	r9
80004050:	c0 f0       	breq	8000406e <init_oled+0xaa>
80004052:	3f fa       	mov	r10,-1
80004054:	3f fb       	mov	r11,-1
80004056:	fa e8 00 00 	ld.d	r8,sp[0]
8000405a:	14 08       	add	r8,r10
8000405c:	f2 0b 00 49 	adc	r9,r9,r11
80004060:	fa e9 00 00 	st.d	sp[0],r8
80004064:	fa e8 00 00 	ld.d	r8,sp[0]
80004068:	58 08       	cp.w	r8,0
8000406a:	5c 29       	cpc	r9
8000406c:	cf 51       	brne	80004056 <init_oled+0x92>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000406e:	fe 7c 1c 00 	mov	r12,-58368
80004072:	fe b0 f3 b0 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004076:	33 bc       	mov	r12,59
80004078:	fe b0 ef ef 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000407c:	e0 6b 00 ae 	mov	r11,174
80004080:	fe 7c 1c 00 	mov	r12,-58368
80004084:	fe b0 f3 ba 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004088:	fe 7c 1c 00 	mov	r12,-58368
8000408c:	fe b0 f3 a7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004090:	fe 7c 1c 00 	mov	r12,-58368
80004094:	fe b0 f3 9f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004098:	33 bc       	mov	r12,59
8000409a:	fe b0 ef de 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000409e:	e0 6b 00 b3 	mov	r11,179
800040a2:	fe 7c 1c 00 	mov	r12,-58368
800040a6:	fe b0 f3 a9 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800040aa:	fe 7c 1c 00 	mov	r12,-58368
800040ae:	fe b0 f3 96 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800040b2:	fe 7c 1c 00 	mov	r12,-58368
800040b6:	fe b0 f3 8e 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800040ba:	33 bc       	mov	r12,59
800040bc:	fe b0 ef cd 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800040c0:	e0 6b 00 91 	mov	r11,145
800040c4:	fe 7c 1c 00 	mov	r12,-58368
800040c8:	fe b0 f3 98 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800040cc:	fe 7c 1c 00 	mov	r12,-58368
800040d0:	fe b0 f3 85 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800040d4:	fe 7c 1c 00 	mov	r12,-58368
800040d8:	fe b0 f3 7d 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800040dc:	33 bc       	mov	r12,59
800040de:	fe b0 ef bc 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800040e2:	e0 6b 00 a8 	mov	r11,168
800040e6:	fe 7c 1c 00 	mov	r12,-58368
800040ea:	fe b0 f3 87 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800040ee:	fe 7c 1c 00 	mov	r12,-58368
800040f2:	fe b0 f3 74 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800040f6:	fe 7c 1c 00 	mov	r12,-58368
800040fa:	fe b0 f3 6c 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800040fe:	33 bc       	mov	r12,59
80004100:	fe b0 ef ab 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004104:	33 fb       	mov	r11,63
80004106:	fe 7c 1c 00 	mov	r12,-58368
8000410a:	fe b0 f3 77 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000410e:	fe 7c 1c 00 	mov	r12,-58368
80004112:	fe b0 f3 64 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004116:	fe 7c 1c 00 	mov	r12,-58368
8000411a:	fe b0 f3 5c 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000411e:	33 bc       	mov	r12,59
80004120:	fe b0 ef 9b 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004124:	e0 6b 00 86 	mov	r11,134
80004128:	fe 7c 1c 00 	mov	r12,-58368
8000412c:	fe b0 f3 66 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004130:	fe 7c 1c 00 	mov	r12,-58368
80004134:	fe b0 f3 53 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004138:	fe 7c 1c 00 	mov	r12,-58368
8000413c:	fe b0 f3 4b 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004140:	33 bc       	mov	r12,59
80004142:	fe b0 ef 8a 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004146:	e0 6b 00 81 	mov	r11,129
8000414a:	fe 7c 1c 00 	mov	r12,-58368
8000414e:	fe b0 f3 55 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004152:	fe 7c 1c 00 	mov	r12,-58368
80004156:	fe b0 f3 42 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000415a:	fe 7c 1c 00 	mov	r12,-58368
8000415e:	fe b0 f3 3a 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004162:	33 bc       	mov	r12,59
80004164:	fe b0 ef 79 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004168:	37 fb       	mov	r11,127
8000416a:	fe 7c 1c 00 	mov	r12,-58368
8000416e:	fe b0 f3 45 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004172:	fe 7c 1c 00 	mov	r12,-58368
80004176:	fe b0 f3 32 	rcall	800027da <usart_spi_unselectChip>
  write_command(0xA8);	// multiplex
  write_command(0x3F);
  write_command(0x86);	// full current range
  write_command(0x81);	// contrast to full
  write_command(0x7F);
  write_command(0xB2);	// frame freq
8000417a:	e0 6c 00 b2 	mov	r12,178
8000417e:	fe b0 fa 9b 	rcall	800036b4 <write_command>
  write_command(0x51);
80004182:	35 1c       	mov	r12,81
80004184:	fe b0 fa 98 	rcall	800036b4 <write_command>
  write_command(0xA8);	// multiplex
80004188:	e0 6c 00 a8 	mov	r12,168
8000418c:	fe b0 fa 94 	rcall	800036b4 <write_command>
  write_command(0x3F);
80004190:	33 fc       	mov	r12,63
80004192:	fe b0 fa 91 	rcall	800036b4 <write_command>
  write_command(0xBC);	// precharge
80004196:	e0 6c 00 bc 	mov	r12,188
8000419a:	fe b0 fa 8d 	rcall	800036b4 <write_command>
  write_command(0x10);
8000419e:	31 0c       	mov	r12,16
800041a0:	fe b0 fa 8a 	rcall	800036b4 <write_command>
  write_command(0xBE);	// voltage
800041a4:	e0 6c 00 be 	mov	r12,190
800041a8:	fe b0 fa 86 	rcall	800036b4 <write_command>
  write_command(0x1C);
800041ac:	31 cc       	mov	r12,28
800041ae:	fe b0 fa 83 	rcall	800036b4 <write_command>
  write_command(0xAD);	// dcdc
800041b2:	e0 6c 00 ad 	mov	r12,173
800041b6:	fe b0 fa 7f 	rcall	800036b4 <write_command>
  write_command(0x02);
800041ba:	30 2c       	mov	r12,2
800041bc:	fe b0 fa 7c 	rcall	800036b4 <write_command>
  write_command(0xA0);	// remap
800041c0:	e0 6c 00 a0 	mov	r12,160
800041c4:	fe b0 fa 78 	rcall	800036b4 <write_command>
  write_command(0x50);
800041c8:	35 0c       	mov	r12,80
800041ca:	fe b0 fa 75 	rcall	800036b4 <write_command>
  write_command(0xA1);	// start
800041ce:	e0 6c 00 a1 	mov	r12,161
800041d2:	fe b0 fa 71 	rcall	800036b4 <write_command>
  write_command(0x0);
800041d6:	30 0c       	mov	r12,0
800041d8:	fe b0 fa 6e 	rcall	800036b4 <write_command>
  write_command(0xA2);	// offset
800041dc:	e0 6c 00 a2 	mov	r12,162
800041e0:	fe b0 fa 6a 	rcall	800036b4 <write_command>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800041e4:	fe 7c 1c 00 	mov	r12,-58368
800041e8:	fe b0 f2 f5 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800041ec:	33 bc       	mov	r12,59
800041ee:	fe b0 ef 34 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800041f2:	34 cb       	mov	r11,76
800041f4:	fe 7c 1c 00 	mov	r12,-58368
800041f8:	fe b0 f3 00 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800041fc:	fe 7c 1c 00 	mov	r12,-58368
80004200:	fe b0 f2 ed 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004204:	fe 7c 1c 00 	mov	r12,-58368
80004208:	fe b0 f2 e5 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000420c:	33 bc       	mov	r12,59
8000420e:	fe b0 ef 24 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004212:	e0 6b 00 b1 	mov	r11,177
80004216:	fe 7c 1c 00 	mov	r12,-58368
8000421a:	fe b0 f2 ef 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000421e:	fe 7c 1c 00 	mov	r12,-58368
80004222:	fe b0 f2 dc 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004226:	fe 7c 1c 00 	mov	r12,-58368
8000422a:	fe b0 f2 d4 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000422e:	33 bc       	mov	r12,59
80004230:	fe b0 ef 13 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004234:	35 5b       	mov	r11,85
80004236:	fe 7c 1c 00 	mov	r12,-58368
8000423a:	fe b0 f2 df 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000423e:	fe 7c 1c 00 	mov	r12,-58368
80004242:	fe b0 f2 cc 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004246:	fe 7c 1c 00 	mov	r12,-58368
8000424a:	fe b0 f2 c4 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000424e:	33 bc       	mov	r12,59
80004250:	fe b0 ef 03 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004254:	e0 6b 00 b4 	mov	r11,180
80004258:	fe 7c 1c 00 	mov	r12,-58368
8000425c:	fe b0 f2 ce 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004260:	fe 7c 1c 00 	mov	r12,-58368
80004264:	fe b0 f2 bb 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004268:	fe 7c 1c 00 	mov	r12,-58368
8000426c:	fe b0 f2 b3 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004270:	33 bc       	mov	r12,59
80004272:	fe b0 ee f2 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004276:	30 2b       	mov	r11,2
80004278:	fe 7c 1c 00 	mov	r12,-58368
8000427c:	fe b0 f2 be 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004280:	fe 7c 1c 00 	mov	r12,-58368
80004284:	fe b0 f2 ab 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004288:	fe 7c 1c 00 	mov	r12,-58368
8000428c:	fe b0 f2 a3 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004290:	33 bc       	mov	r12,59
80004292:	fe b0 ee e2 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004296:	e0 6b 00 b0 	mov	r11,176
8000429a:	fe 7c 1c 00 	mov	r12,-58368
8000429e:	fe b0 f2 ad 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800042a2:	fe 7c 1c 00 	mov	r12,-58368
800042a6:	fe b0 f2 9a 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800042aa:	fe 7c 1c 00 	mov	r12,-58368
800042ae:	fe b0 f2 92 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800042b2:	33 bc       	mov	r12,59
800042b4:	fe b0 ee d1 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800042b8:	32 8b       	mov	r11,40
800042ba:	fe 7c 1c 00 	mov	r12,-58368
800042be:	fe b0 f2 9d 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800042c2:	fe 7c 1c 00 	mov	r12,-58368
800042c6:	fe b0 f2 8a 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800042ca:	fe 7c 1c 00 	mov	r12,-58368
800042ce:	fe b0 f2 82 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800042d2:	33 bc       	mov	r12,59
800042d4:	fe b0 ee c1 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800042d8:	e0 6b 00 bf 	mov	r11,191
800042dc:	fe 7c 1c 00 	mov	r12,-58368
800042e0:	fe b0 f2 8c 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800042e4:	fe 7c 1c 00 	mov	r12,-58368
800042e8:	fe b0 f2 79 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800042ec:	fe 7c 1c 00 	mov	r12,-58368
800042f0:	fe b0 f2 71 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800042f4:	33 bc       	mov	r12,59
800042f6:	fe b0 ee b0 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800042fa:	30 fb       	mov	r11,15
800042fc:	fe 7c 1c 00 	mov	r12,-58368
80004300:	fe b0 f2 7c 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004304:	fe 7c 1c 00 	mov	r12,-58368
80004308:	fe b0 f2 69 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000430c:	fe 7c 1c 00 	mov	r12,-58368
80004310:	fe b0 f2 61 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004314:	33 bc       	mov	r12,59
80004316:	fe b0 ee a0 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000431a:	e0 6b 00 a4 	mov	r11,164
8000431e:	fe 7c 1c 00 	mov	r12,-58368
80004322:	fe b0 f2 6b 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004326:	fe 7c 1c 00 	mov	r12,-58368
8000432a:	fe b0 f2 58 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000432e:	fe 7c 1c 00 	mov	r12,-58368
80004332:	fe b0 f2 50 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004336:	33 bc       	mov	r12,59
80004338:	fe b0 ee 8f 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000433c:	e0 6b 00 b8 	mov	r11,184
80004340:	fe 7c 1c 00 	mov	r12,-58368
80004344:	fe b0 f2 5a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004348:	fe 7c 1c 00 	mov	r12,-58368
8000434c:	fe b0 f2 47 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004350:	fe 7c 1c 00 	mov	r12,-58368
80004354:	fe b0 f2 3f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004358:	33 bc       	mov	r12,59
8000435a:	fe b0 ee 7e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000435e:	30 1b       	mov	r11,1
80004360:	fe 7c 1c 00 	mov	r12,-58368
80004364:	fe b0 f2 4a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004368:	fe 7c 1c 00 	mov	r12,-58368
8000436c:	fe b0 f2 37 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004370:	fe 7c 1c 00 	mov	r12,-58368
80004374:	fe b0 f2 2f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004378:	33 bc       	mov	r12,59
8000437a:	fe b0 ee 6e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000437e:	31 1b       	mov	r11,17
80004380:	fe 7c 1c 00 	mov	r12,-58368
80004384:	fe b0 f2 3a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004388:	fe 7c 1c 00 	mov	r12,-58368
8000438c:	fe b0 f2 27 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004390:	fe 7c 1c 00 	mov	r12,-58368
80004394:	fe b0 f2 1f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004398:	33 bc       	mov	r12,59
8000439a:	fe b0 ee 5e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000439e:	32 2b       	mov	r11,34
800043a0:	fe 7c 1c 00 	mov	r12,-58368
800043a4:	fe b0 f2 2a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800043a8:	fe 7c 1c 00 	mov	r12,-58368
800043ac:	fe b0 f2 17 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800043b0:	fe 7c 1c 00 	mov	r12,-58368
800043b4:	fe b0 f2 0f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800043b8:	33 bc       	mov	r12,59
800043ba:	fe b0 ee 4e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800043be:	33 2b       	mov	r11,50
800043c0:	fe 7c 1c 00 	mov	r12,-58368
800043c4:	fe b0 f2 1a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800043c8:	fe 7c 1c 00 	mov	r12,-58368
800043cc:	fe b0 f2 07 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800043d0:	fe 7c 1c 00 	mov	r12,-58368
800043d4:	fe b0 f1 ff 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800043d8:	33 bc       	mov	r12,59
800043da:	fe b0 ee 3e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800043de:	34 3b       	mov	r11,67
800043e0:	fe 7c 1c 00 	mov	r12,-58368
800043e4:	fe b0 f2 0a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800043e8:	fe 7c 1c 00 	mov	r12,-58368
800043ec:	fe b0 f1 f7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800043f0:	fe 7c 1c 00 	mov	r12,-58368
800043f4:	fe b0 f1 ef 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800043f8:	33 bc       	mov	r12,59
800043fa:	fe b0 ee 2e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800043fe:	35 4b       	mov	r11,84
80004400:	fe 7c 1c 00 	mov	r12,-58368
80004404:	fe b0 f1 fa 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004408:	fe 7c 1c 00 	mov	r12,-58368
8000440c:	fe b0 f1 e7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004410:	fe 7c 1c 00 	mov	r12,-58368
80004414:	fe b0 f1 df 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004418:	33 bc       	mov	r12,59
8000441a:	fe b0 ee 1e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000441e:	36 5b       	mov	r11,101
80004420:	fe 7c 1c 00 	mov	r12,-58368
80004424:	fe b0 f1 ea 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004428:	fe 7c 1c 00 	mov	r12,-58368
8000442c:	fe b0 f1 d7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004430:	fe 7c 1c 00 	mov	r12,-58368
80004434:	fe b0 f1 cf 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004438:	33 bc       	mov	r12,59
8000443a:	fe b0 ee 0e 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000443e:	37 6b       	mov	r11,118
80004440:	fe 7c 1c 00 	mov	r12,-58368
80004444:	fe b0 f1 da 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004448:	fe 7c 1c 00 	mov	r12,-58368
8000444c:	fe b0 f1 c7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004450:	fe 7c 1c 00 	mov	r12,-58368
80004454:	fe b0 f1 bf 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004458:	33 bc       	mov	r12,59
8000445a:	fe b0 ed fe 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000445e:	31 5b       	mov	r11,21
80004460:	fe 7c 1c 00 	mov	r12,-58368
80004464:	fe b0 f1 ca 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004468:	fe 7c 1c 00 	mov	r12,-58368
8000446c:	fe b0 f1 b7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004470:	fe 7c 1c 00 	mov	r12,-58368
80004474:	fe b0 f1 af 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004478:	33 bc       	mov	r12,59
8000447a:	fe b0 ed ee 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000447e:	30 0b       	mov	r11,0
80004480:	fe 7c 1c 00 	mov	r12,-58368
80004484:	fe b0 f1 ba 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004488:	fe 7c 1c 00 	mov	r12,-58368
8000448c:	fe b0 f1 a7 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004490:	fe 7c 1c 00 	mov	r12,-58368
80004494:	fe b0 f1 9f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004498:	33 bc       	mov	r12,59
8000449a:	fe b0 ed de 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000449e:	33 fb       	mov	r11,63
800044a0:	fe 7c 1c 00 	mov	r12,-58368
800044a4:	fe b0 f1 aa 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800044a8:	fe 7c 1c 00 	mov	r12,-58368
800044ac:	fe b0 f1 97 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800044b0:	fe 7c 1c 00 	mov	r12,-58368
800044b4:	fe b0 f1 8f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800044b8:	33 bc       	mov	r12,59
800044ba:	fe b0 ed ce 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800044be:	37 5b       	mov	r11,117
800044c0:	fe 7c 1c 00 	mov	r12,-58368
800044c4:	fe b0 f1 9a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800044c8:	fe 7c 1c 00 	mov	r12,-58368
800044cc:	fe b0 f1 87 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800044d0:	fe 7c 1c 00 	mov	r12,-58368
800044d4:	fe b0 f1 7f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800044d8:	33 bc       	mov	r12,59
800044da:	fe b0 ed be 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800044de:	30 0b       	mov	r11,0
800044e0:	fe 7c 1c 00 	mov	r12,-58368
800044e4:	fe b0 f1 8a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800044e8:	fe 7c 1c 00 	mov	r12,-58368
800044ec:	fe b0 f1 77 	rcall	800027da <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800044f0:	fe 7c 1c 00 	mov	r12,-58368
800044f4:	fe b0 f1 6f 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800044f8:	33 bc       	mov	r12,59
800044fa:	fe b0 ed ae 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800044fe:	33 fb       	mov	r11,63
80004500:	fe 7c 1c 00 	mov	r12,-58368
80004504:	fe b0 f1 7a 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004508:	fe 7c 1c 00 	mov	r12,-58368
8000450c:	30 07       	mov	r7,0
8000450e:	fe b0 f1 66 	rcall	800027da <usart_spi_unselectChip>

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80004512:	fe 7c 1c 00 	mov	r12,-58368
80004516:	fe b0 f1 5e 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
8000451a:	33 bc       	mov	r12,59
8000451c:	fe b0 ed 90 	rcall	8000203c <gpio_set_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004520:	30 0b       	mov	r11,0
80004522:	fe 7c 1c 00 	mov	r12,-58368
80004526:	fe b0 f1 69 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000452a:	fe 7c 1c 00 	mov	r12,-58368
8000452e:	2f f7       	sub	r7,-1
80004530:	fe b0 f1 55 	rcall	800027da <usart_spi_unselectChip>
  write_command(0x75);
  write_command(0);
  write_command(63);
		
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
80004534:	e0 47 10 00 	cp.w	r7,4096
80004538:	ce d1       	brne	80004512 <init_oled+0x54e>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000453a:	fe 7c 1c 00 	mov	r12,-58368
8000453e:	fe b0 f1 4a 	rcall	800027d2 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80004542:	33 bc       	mov	r12,59
80004544:	fe b0 ed 89 	rcall	80002056 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80004548:	e0 6b 00 af 	mov	r11,175
8000454c:	fe 7c 1c 00 	mov	r12,-58368
80004550:	fe b0 f1 54 	rcall	800027f8 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80004554:	fe 7c 1c 00 	mov	r12,-58368
80004558:	fe b0 f1 41 	rcall	800027da <usart_spi_unselectChip>
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
  write_command(0xAF);	// on

  //  delay_ms(10) 
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
8000455c:	e2 78 ef 14 	mov	r8,257812
80004560:	30 09       	mov	r9,0
80004562:	fa e9 00 00 	st.d	sp[0],r8
80004566:	fa e8 00 00 	ld.d	r8,sp[0]
8000456a:	58 08       	cp.w	r8,0
8000456c:	5c 29       	cpc	r9
8000456e:	c0 f0       	breq	8000458c <init_oled+0x5c8>
80004570:	3f fa       	mov	r10,-1
80004572:	3f fb       	mov	r11,-1
80004574:	fa e8 00 00 	ld.d	r8,sp[0]
80004578:	14 08       	add	r8,r10
8000457a:	f2 0b 00 49 	adc	r9,r9,r11
8000457e:	fa e9 00 00 	st.d	sp[0],r8
80004582:	fa e8 00 00 	ld.d	r8,sp[0]
80004586:	58 08       	cp.w	r8,0
80004588:	5c 29       	cpc	r9
8000458a:	cf 51       	brne	80004574 <init_oled+0x5b0>
  //  cpu_irq_enable();
  Enable_global_interrupt();
8000458c:	d5 03       	csrf	0x10

}
8000458e:	2f ed       	sub	sp,-8
80004590:	e3 cd 80 80 	ldm	sp++,r7,pc

80004594 <process_sw>:
  { kEventSwitchDown3, kEventSwitchUp3 },
  { kEventSwitchDown4, kEventSwitchUp4 },
};

// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
80004594:	eb cd 40 80 	pushm	r7,lr
  static event_t e;   

  //  if( (tcTicks - swTicks[swIdx]) > 30) { 
  if(1) {
    e.eventType = kSwitchEvents[swIdx][gpio_get_pin_value(kSwitchPins[swIdx])];
80004598:	fe c8 f7 90 	sub	r8,pc,-2160
8000459c:	18 97       	mov	r7,r12
8000459e:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
800045a2:	fe b0 ed 42 	rcall	80002026 <gpio_get_pin_value>
800045a6:	e0 68 14 54 	mov	r8,5204
800045aa:	f8 07 00 1a 	add	r10,r12,r7<<0x1
800045ae:	fe c9 f7 ce 	sub	r9,pc,-2098
800045b2:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
    post_event(&e);
800045b6:	10 9c       	mov	r12,r8
  }
  swTicks[swIdx] = tcTicks;
800045b8:	91 09       	st.w	r8[0x0],r9
800045ba:	fe b0 f3 71 	rcall	80002c9c <post_event>
800045be:	e0 68 02 64 	mov	r8,612
800045c2:	f0 ea 00 00 	ld.d	r10,r8[0]
}
800045c6:	e0 68 14 2c 	mov	r8,5164
800045ca:	f0 07 08 3a 	st.d	r8[r7<<0x3],r10
800045ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800045d2:	d7 03       	nop

800045d4 <process_timers>:
}


// process the list of timers.
// called by client at desired tick interval.
void process_timers( void ) {
800045d4:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800045d8:	e0 67 14 5c 	mov	r7,5212
    if ( t == 0 ) { continue; }
800045dc:	6e 06       	ld.w	r6,r7[0x0]
800045de:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800045e0:	c0 80       	breq	800045f0 <process_timers+0x1c>
800045e2:	6c 28       	ld.w	r8,r6[0x8]
800045e4:	58 08       	cp.w	r8,0
800045e6:	e0 8a 00 05 	brle	800045f0 <process_timers+0x1c>
      // time remaining, decrement tick counter
      t->timeout--;
800045ea:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800045ec:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800045ee:	c5 50       	breq	80004698 <process_timers+0xc4>
    if ( t == 0 ) { continue; }
800045f0:	6e 16       	ld.w	r6,r7[0x4]
800045f2:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800045f4:	c0 80       	breq	80004604 <process_timers+0x30>
800045f6:	6c 28       	ld.w	r8,r6[0x8]
800045f8:	58 08       	cp.w	r8,0
800045fa:	e0 8a 00 05 	brle	80004604 <process_timers+0x30>
      // time remaining, decrement tick counter
      t->timeout--;
800045fe:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004600:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004602:	c5 90       	breq	800046b4 <process_timers+0xe0>
    if ( t == 0 ) { continue; }
80004604:	6e 26       	ld.w	r6,r7[0x8]
80004606:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004608:	c0 80       	breq	80004618 <process_timers+0x44>
8000460a:	6c 28       	ld.w	r8,r6[0x8]
8000460c:	58 08       	cp.w	r8,0
8000460e:	e0 8a 00 05 	brle	80004618 <process_timers+0x44>
      // time remaining, decrement tick counter
      t->timeout--;
80004612:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004614:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004616:	c5 d0       	breq	800046d0 <process_timers+0xfc>
    if ( t == 0 ) { continue; }
80004618:	6e 36       	ld.w	r6,r7[0xc]
8000461a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
8000461c:	c0 80       	breq	8000462c <process_timers+0x58>
8000461e:	6c 28       	ld.w	r8,r6[0x8]
80004620:	58 08       	cp.w	r8,0
80004622:	e0 8a 00 05 	brle	8000462c <process_timers+0x58>
      // time remaining, decrement tick counter
      t->timeout--;
80004626:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004628:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8000462a:	c6 10       	breq	800046ec <process_timers+0x118>
    if ( t == 0 ) { continue; }
8000462c:	6e 46       	ld.w	r6,r7[0x10]
8000462e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004630:	c0 80       	breq	80004640 <process_timers+0x6c>
80004632:	6c 28       	ld.w	r8,r6[0x8]
80004634:	58 08       	cp.w	r8,0
80004636:	e0 8a 00 05 	brle	80004640 <process_timers+0x6c>
      // time remaining, decrement tick counter
      t->timeout--;
8000463a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8000463c:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8000463e:	c6 50       	breq	80004708 <process_timers+0x134>
    if ( t == 0 ) { continue; }
80004640:	6e 56       	ld.w	r6,r7[0x14]
80004642:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004644:	c0 80       	breq	80004654 <process_timers+0x80>
80004646:	6c 28       	ld.w	r8,r6[0x8]
80004648:	58 08       	cp.w	r8,0
8000464a:	e0 8a 00 05 	brle	80004654 <process_timers+0x80>
      // time remaining, decrement tick counter
      t->timeout--;
8000464e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004650:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004652:	c6 90       	breq	80004724 <process_timers+0x150>
    if ( t == 0 ) { continue; }
80004654:	6e 66       	ld.w	r6,r7[0x18]
80004656:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80004658:	c0 80       	breq	80004668 <process_timers+0x94>
8000465a:	6c 28       	ld.w	r8,r6[0x8]
8000465c:	58 08       	cp.w	r8,0
8000465e:	e0 8a 00 05 	brle	80004668 <process_timers+0x94>
      // time remaining, decrement tick counter
      t->timeout--;
80004662:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004664:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80004666:	c6 d0       	breq	80004740 <process_timers+0x16c>
    if ( t == 0 ) { continue; }
80004668:	6e 76       	ld.w	r6,r7[0x1c]
8000466a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
8000466c:	c0 80       	breq	8000467c <process_timers+0xa8>
8000466e:	6c 28       	ld.w	r8,r6[0x8]
80004670:	58 08       	cp.w	r8,0
80004672:	e0 8a 00 05 	brle	8000467c <process_timers+0xa8>
      // time remaining, decrement tick counter
      t->timeout--;
80004676:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80004678:	8d 28       	st.w	r6[0x8],r8
8000467a:	c0 30       	breq	80004680 <process_timers+0xac>
8000467c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
80004680:	6c 48       	ld.w	r8,r6[0x10]
80004682:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004684:	c0 30       	breq	8000468a <process_timers+0xb6>
80004686:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004688:	5d 18       	icall	r8
8000468a:	6c 08       	ld.w	r8,r6[0x0]
8000468c:	58 08       	cp.w	r8,0
	  t->timeout = t->timeoutReload;
8000468e:	c6 70       	breq	8000475c <process_timers+0x188>
80004690:	6c 38       	ld.w	r8,r6[0xc]
80004692:	8d 28       	st.w	r6[0x8],r8
80004694:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004698:	6c 48       	ld.w	r8,r6[0x10]
8000469a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
8000469c:	c0 30       	breq	800046a2 <process_timers+0xce>
8000469e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800046a0:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800046a2:	6c 08       	ld.w	r8,r6[0x0]
800046a4:	58 08       	cp.w	r8,0
800046a6:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800046aa:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800046ae:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800046b2:	c9 fb       	rjmp	800045f0 <process_timers+0x1c>
800046b4:	6c 48       	ld.w	r8,r6[0x10]
800046b6:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800046b8:	c0 30       	breq	800046be <process_timers+0xea>
800046ba:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800046bc:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800046be:	6c 08       	ld.w	r8,r6[0x0]
800046c0:	58 08       	cp.w	r8,0
800046c2:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800046c6:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800046ca:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800046ce:	c9 bb       	rjmp	80004604 <process_timers+0x30>
800046d0:	6c 48       	ld.w	r8,r6[0x10]
800046d2:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800046d4:	c0 30       	breq	800046da <process_timers+0x106>
800046d6:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800046d8:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800046da:	6c 08       	ld.w	r8,r6[0x0]
800046dc:	58 08       	cp.w	r8,0
800046de:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800046e2:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800046e6:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800046ea:	c9 7b       	rjmp	80004618 <process_timers+0x44>
800046ec:	6c 48       	ld.w	r8,r6[0x10]
800046ee:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800046f0:	c0 30       	breq	800046f6 <process_timers+0x122>
800046f2:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800046f4:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800046f6:	6c 08       	ld.w	r8,r6[0x0]
800046f8:	58 08       	cp.w	r8,0
800046fa:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800046fe:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004702:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004706:	c9 3b       	rjmp	8000462c <process_timers+0x58>
80004708:	6c 48       	ld.w	r8,r6[0x10]
8000470a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
8000470c:	c0 30       	breq	80004712 <process_timers+0x13e>
8000470e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004710:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80004712:	6c 08       	ld.w	r8,r6[0x0]
80004714:	58 08       	cp.w	r8,0
80004716:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8000471a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8000471e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80004722:	c8 fb       	rjmp	80004640 <process_timers+0x6c>
80004724:	6c 48       	ld.w	r8,r6[0x10]
80004726:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004728:	c0 30       	breq	8000472e <process_timers+0x15a>
8000472a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8000472c:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000472e:	6c 08       	ld.w	r8,r6[0x0]
80004730:	58 08       	cp.w	r8,0
80004732:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004736:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8000473a:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8000473e:	c8 bb       	rjmp	80004654 <process_timers+0x80>
80004740:	6c 48       	ld.w	r8,r6[0x10]
80004742:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80004744:	c0 30       	breq	8000474a <process_timers+0x176>
80004746:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80004748:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000474a:	6c 08       	ld.w	r8,r6[0x0]
8000474c:	58 08       	cp.w	r8,0
8000474e:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80004752:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80004756:	ed f8 1a 02 	st.wne	r6[0x8],r8
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000475a:	c8 7b       	rjmp	80004668 <process_timers+0x94>
8000475c:	8f 78       	st.w	r7[0x1c],r8
8000475e:	c8 fb       	rjmp	8000467c <process_timers+0xa8>

80004760 <set_timer>:
80004760:	eb cd 40 e0 	pushm	r5-r7,lr
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
80004764:	58 09       	cp.w	r9,0
80004766:	c6 10       	breq	80004828 <set_timer+0xc8>

// find a timer given a tag and optional callback
static swTimer_t* find_timer( timerCallback callback, int tag ) {
  int k;
  swTimer_t* t;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
80004768:	e1 be 00 00 	mfsr	lr,0x0
 * \return True if interrupt level is enabled.
 */
static inline bool cpu_irq_level_is_enabled_flags(irqflags_t flags,
		uint32_t level)
{
	return !(flags & (1 << level));
8000476c:	ee 1e 00 04 	eorh	lr,0x4
80004770:	ed de c2 41 	bfextu	r6,lr,0x12,0x1

  Disable_interrupt_level( TIMER_INT_LEVEL );
80004774:	d3 23       	ssrf	0x12

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004776:	e0 6e 14 5c 	mov	lr,5212
    if ( t == NULL ) {
8000477a:	7c 07       	ld.w	r7,lr[0x0]
8000477c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000477e:	c0 40       	breq	80004786 <set_timer+0x26>
80004780:	6e 15       	ld.w	r5,r7[0x4]
80004782:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004784:	c5 40       	breq	8000482c <set_timer+0xcc>
    if ( t == NULL ) {
80004786:	7c 17       	ld.w	r7,lr[0x4]
80004788:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000478a:	c0 40       	breq	80004792 <set_timer+0x32>
8000478c:	6e 15       	ld.w	r5,r7[0x4]
8000478e:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80004790:	c5 60       	breq	8000483c <set_timer+0xdc>
    if ( t == NULL ) {
80004792:	7c 27       	ld.w	r7,lr[0x8]
80004794:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80004796:	c0 40       	breq	8000479e <set_timer+0x3e>
80004798:	6e 15       	ld.w	r5,r7[0x4]
8000479a:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8000479c:	c5 60       	breq	80004848 <set_timer+0xe8>
    if ( t == NULL ) {
8000479e:	7c 37       	ld.w	r7,lr[0xc]
800047a0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800047a2:	c0 40       	breq	800047aa <set_timer+0x4a>
800047a4:	6e 15       	ld.w	r5,r7[0x4]
800047a6:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800047a8:	c5 40       	breq	80004850 <set_timer+0xf0>
    if ( t == NULL ) {
800047aa:	7c 47       	ld.w	r7,lr[0x10]
800047ac:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800047ae:	c0 40       	breq	800047b6 <set_timer+0x56>
800047b0:	6e 15       	ld.w	r5,r7[0x4]
800047b2:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800047b4:	c5 20       	breq	80004858 <set_timer+0xf8>
    if ( t == NULL ) {
800047b6:	7c 57       	ld.w	r7,lr[0x14]
800047b8:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800047ba:	c0 40       	breq	800047c2 <set_timer+0x62>
800047bc:	6e 15       	ld.w	r5,r7[0x4]
800047be:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800047c0:	c5 00       	breq	80004860 <set_timer+0x100>
    if ( t == NULL ) {
800047c2:	7c 67       	ld.w	r7,lr[0x18]
800047c4:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800047c6:	c0 40       	breq	800047ce <set_timer+0x6e>
800047c8:	6e 15       	ld.w	r5,r7[0x4]
800047ca:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800047cc:	c4 e0       	breq	80004868 <set_timer+0x108>
    if ( t == NULL ) {
800047ce:	7c 77       	ld.w	r7,lr[0x1c]
800047d0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800047d2:	c0 40       	breq	800047da <set_timer+0x7a>
800047d4:	6e 15       	ld.w	r5,r7[0x4]
800047d6:	0a 3b       	cp.w	r11,r5
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
800047d8:	c4 c0       	breq	80004870 <set_timer+0x110>
800047da:	58 06       	cp.w	r6,0
   
  if ( find_timer( callback, tag ) != NULL ) {
    return false;
  }

  t->callback = callback;
800047dc:	c3 41       	brne	80004844 <set_timer+0xe4>
  t->tag = tag;
800047de:	99 49       	st.w	r12[0x10],r9
  t->timeout = ticks;
  t->fperiodic = fPeriodic;
800047e0:	99 1b       	st.w	r12[0x4],r11
  t->timeoutReload = ticks;
800047e2:	99 08       	st.w	r12[0x0],r8
    return false;
  }

  t->callback = callback;
  t->tag = tag;
  t->timeout = ticks;
800047e4:	99 3a       	st.w	r12[0xc],r10
}

// Add timer to pointer array. Finds first empty slot.
static bool add_timer( swTimer_t* newTimer) {
  int k;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
800047e6:	99 2a       	st.w	r12[0x8],r10
800047e8:	e1 ba 00 00 	mfsr	r10,0x0

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
800047ec:	d3 23       	ssrf	0x12
800047ee:	e0 68 14 5c 	mov	r8,5212
800047f2:	7c 09       	ld.w	r9,lr[0x0]
800047f4:	58 09       	cp.w	r9,0
800047f6:	c4 80       	breq	80004886 <set_timer+0x126>
800047f8:	70 19       	ld.w	r9,r8[0x4]
800047fa:	58 09       	cp.w	r9,0
800047fc:	c4 40       	breq	80004884 <set_timer+0x124>
800047fe:	70 29       	ld.w	r9,r8[0x8]
80004800:	58 09       	cp.w	r9,0
80004802:	c4 70       	breq	80004890 <set_timer+0x130>
80004804:	70 39       	ld.w	r9,r8[0xc]
80004806:	58 09       	cp.w	r9,0
80004808:	c4 60       	breq	80004894 <set_timer+0x134>
8000480a:	70 49       	ld.w	r9,r8[0x10]
8000480c:	58 09       	cp.w	r9,0
8000480e:	c4 50       	breq	80004898 <set_timer+0x138>
80004810:	70 59       	ld.w	r9,r8[0x14]
80004812:	58 09       	cp.w	r9,0
80004814:	c4 40       	breq	8000489c <set_timer+0x13c>
80004816:	70 69       	ld.w	r9,r8[0x18]
80004818:	58 09       	cp.w	r9,0
8000481a:	c4 30       	breq	800048a0 <set_timer+0x140>
8000481c:	70 78       	ld.w	r8,r8[0x1c]
      Enable_interrupt_level( TIMER_INT_LEVEL );
      return true;
    }
  }

  if (fReenableInterrupts) {
8000481e:	58 08       	cp.w	r8,0
80004820:	c4 20       	breq	800048a4 <set_timer+0x144>
80004822:	e6 1a 00 04 	andh	r10,0x4,COH
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004826:	c2 b0       	breq	8000487c <set_timer+0x11c>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80004828:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000482c:	6e 47       	ld.w	r7,r7[0x10]
	  // tag and callback both specified and matched
	  if (fReenableInterrupts)
8000482e:	0e 39       	cp.w	r9,r7
80004830:	ca b1       	brne	80004786 <set_timer+0x26>
	    Enable_interrupt_level( TIMER_INT_LEVEL );
80004832:	58 06       	cp.w	r6,0
80004834:	cf a0       	breq	80004828 <set_timer+0xc8>
80004836:	d5 23       	csrf	0x12
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80004838:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000483c:	6e 47       	ld.w	r7,r7[0x10]
8000483e:	0e 39       	cp.w	r9,r7
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004840:	ca 91       	brne	80004792 <set_timer+0x32>
80004842:	cf 8b       	rjmp	80004832 <set_timer+0xd2>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80004844:	d5 23       	csrf	0x12
80004846:	cc cb       	rjmp	800047de <set_timer+0x7e>
80004848:	6e 47       	ld.w	r7,r7[0x10]
8000484a:	0e 39       	cp.w	r9,r7
8000484c:	ca 91       	brne	8000479e <set_timer+0x3e>
8000484e:	cf 2b       	rjmp	80004832 <set_timer+0xd2>
80004850:	6e 47       	ld.w	r7,r7[0x10]
80004852:	0e 39       	cp.w	r9,r7
80004854:	ca b1       	brne	800047aa <set_timer+0x4a>
80004856:	ce eb       	rjmp	80004832 <set_timer+0xd2>
80004858:	6e 47       	ld.w	r7,r7[0x10]
8000485a:	0e 39       	cp.w	r9,r7
8000485c:	ca d1       	brne	800047b6 <set_timer+0x56>
8000485e:	ce ab       	rjmp	80004832 <set_timer+0xd2>
80004860:	6e 47       	ld.w	r7,r7[0x10]
80004862:	0e 39       	cp.w	r9,r7
80004864:	ca f1       	brne	800047c2 <set_timer+0x62>
80004866:	ce 6b       	rjmp	80004832 <set_timer+0xd2>
80004868:	6e 47       	ld.w	r7,r7[0x10]
8000486a:	0e 39       	cp.w	r9,r7
8000486c:	cb 11       	brne	800047ce <set_timer+0x6e>
8000486e:	ce 2b       	rjmp	80004832 <set_timer+0xd2>
80004870:	6e 47       	ld.w	r7,r7[0x10]
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
80004872:	0e 39       	cp.w	r9,r7
80004874:	cd f0       	breq	80004832 <set_timer+0xd2>
80004876:	58 06       	cp.w	r6,0
      return true;
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80004878:	cb 30       	breq	800047de <set_timer+0x7e>
8000487a:	ce 5b       	rjmp	80004844 <set_timer+0xe4>
8000487c:	d5 23       	csrf	0x12
8000487e:	14 9c       	mov	r12,r10

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80004880:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
      timers[k] = newTimer;
80004884:	30 19       	mov	r9,1
      Enable_interrupt_level( TIMER_INT_LEVEL );
80004886:	fc 09 09 2c 	st.w	lr[r9<<0x2],r12
8000488a:	d5 23       	csrf	0x12

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8000488c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004890:	30 29       	mov	r9,2
80004892:	cf ab       	rjmp	80004886 <set_timer+0x126>
80004894:	30 39       	mov	r9,3
80004896:	cf 8b       	rjmp	80004886 <set_timer+0x126>
80004898:	30 49       	mov	r9,4
8000489a:	cf 6b       	rjmp	80004886 <set_timer+0x126>
8000489c:	30 59       	mov	r9,5
8000489e:	cf 4b       	rjmp	80004886 <set_timer+0x126>
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
800048a0:	30 69       	mov	r9,6
800048a2:	cf 2b       	rjmp	80004886 <set_timer+0x126>
800048a4:	30 79       	mov	r9,7
800048a6:	cf 0b       	rjmp	80004886 <set_timer+0x126>

800048a8 <itoa_whole>:
  
}

// format whole part
void itoa_whole(int val, char* buf, int len)
{
800048a8:	d4 21       	pushm	r4-r7,lr
  char * p;       // pointer
  unsigned int a; // digit (remainder)
  unsigned int u; // unsigned value 
  char neg = bsign(val);

  p = buf + len - 1; // right justify; start at end
800048aa:	f4 c8 00 01 	sub	r8,r10,1
#include "fix.h"

static inline char bsign (const int x) {
  return ( (x & 0x80000000) > 0 ) ;
800048ae:	f8 04 16 1f 	lsr	r4,r12,0x1f
  char * p;       // pointer
  unsigned int a; // digit (remainder)
  unsigned int u; // unsigned value 
  char neg = bsign(val);

  p = buf + len - 1; // right justify; start at end
800048b2:	f6 08 00 08 	add	r8,r11,r8

  if ( neg ) {
    len--;
    val = binv(val) + 1; // FIXME: this will wrap at 0xffffffff
800048b6:	58 04       	cp.w	r4,0
800048b8:	fb bc 01 00 	rsubne	r12,0
  }


  u = (unsigned int)val;

  while(p >= buf) {
800048bc:	10 3b       	cp.w	r11,r8
800048be:	e0 8b 00 1f 	brhi	800048fc <itoa_whole+0x54>
    if (u > 0) {
      a = u % radix;
      u /= radix;
      *p = '0' + a;
    } else {
      *p = ' '; 
800048c2:	32 05       	mov	r5,32

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % radix;
800048c4:	e0 6e cc cd 	mov	lr,52429
800048c8:	ea 1e cc cc 	orh	lr,0xcccc
800048cc:	c0 d8       	rjmp	800048e6 <itoa_whole+0x3e>
800048ce:	12 9a       	mov	r10,r9
800048d0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800048d4:	f8 09 01 19 	sub	r9,r12,r9<<0x1
      u /= radix;
      *p = '0' + a;
800048d8:	2d 09       	sub	r9,-48
800048da:	b0 89       	st.b	r8[0x0],r9
  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % radix;
      u /= radix;
800048dc:	14 9c       	mov	r12,r10
      *p = '0' + a;
    } else {
      *p = ' '; 
    }
    p--;
800048de:	20 18       	sub	r8,1
  }


  u = (unsigned int)val;

  while(p >= buf) {
800048e0:	10 3b       	cp.w	r11,r8
800048e2:	e0 8b 00 0d 	brhi	800048fc <itoa_whole+0x54>
    if (u > 0) {
      a = u % radix;
800048e6:	f8 0e 06 46 	mulu.d	r6,r12,lr
800048ea:	0e 99       	mov	r9,r7
800048ec:	a3 99       	lsr	r9,0x3


  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
800048ee:	58 0c       	cp.w	r12,0
800048f0:	ce f1       	brne	800048ce <itoa_whole+0x26>
      a = u % radix;
      u /= radix;
      *p = '0' + a;
    } else {
      *p = ' '; 
800048f2:	b0 85       	st.b	r8[0x0],r5
    }
    p--;
800048f4:	20 18       	sub	r8,1
  }


  u = (unsigned int)val;

  while(p >= buf) {
800048f6:	10 3b       	cp.w	r11,r8
800048f8:	fe 98 ff f7 	brls	800048e6 <itoa_whole+0x3e>
      *p = ' '; 
    }
    p--;

  }
  if(neg) { *buf = '-'; }
800048fc:	58 04       	cp.w	r4,0
800048fe:	f9 b8 01 2d 	movne	r8,45
80004902:	f7 f8 1e 00 	st.bne	r11[0x0],r8
80004906:	d8 22       	popm	r4-r7,pc

80004908 <_stext>:
80004908:	e0 7d 00 00 	mov	sp,65536
8000490c:	fe c0 ff 0c 	sub	r0,pc,-244
80004910:	e3 b0 00 01 	mtsr	0x4,r0
80004914:	d5 53       	csrf	0x15
80004916:	30 80       	mov	r0,8
80004918:	30 81       	mov	r1,8
8000491a:	02 30       	cp.w	r0,r1
8000491c:	c0 72       	brcc	8000492a <idata_load_loop_end>
8000491e:	fe c2 f8 0e 	sub	r2,pc,-2034

80004922 <idata_load_loop>:
80004922:	a5 05       	ld.d	r4,r2++
80004924:	a1 24       	st.d	r0++,r4
80004926:	02 30       	cp.w	r0,r1
80004928:	cf d3       	brcs	80004922 <idata_load_loop>

8000492a <idata_load_loop_end>:
8000492a:	30 80       	mov	r0,8
8000492c:	e0 61 14 b0 	mov	r1,5296
80004930:	02 30       	cp.w	r0,r1
80004932:	c0 62       	brcc	8000493e <udata_clear_loop_end>
80004934:	30 02       	mov	r2,0
80004936:	30 03       	mov	r3,0

80004938 <udata_clear_loop>:
80004938:	a1 22       	st.d	r0++,r2
8000493a:	02 30       	cp.w	r0,r1
8000493c:	cf e3       	brcs	80004938 <udata_clear_loop>

8000493e <udata_clear_loop_end>:
8000493e:	fe cf 13 9a 	sub	pc,pc,5018
80004942:	d7 03       	nop

80004944 <strcpy>:
80004944:	30 08       	mov	r8,0
80004946:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000494a:	f8 08 0b 09 	st.b	r12[r8],r9
8000494e:	2f f8       	sub	r8,-1
80004950:	58 09       	cp.w	r9,0
80004952:	cf a1       	brne	80004946 <strcpy+0x2>
80004954:	5e fc       	retal	r12

Disassembly of section .exception:

80004a00 <_evba>:
80004a00:	c0 08       	rjmp	80004a00 <_evba>
	...

80004a04 <_handle_TLB_Multiple_Hit>:
80004a04:	c0 08       	rjmp	80004a04 <_handle_TLB_Multiple_Hit>
	...

80004a08 <_handle_Bus_Error_Data_Fetch>:
80004a08:	c0 08       	rjmp	80004a08 <_handle_Bus_Error_Data_Fetch>
	...

80004a0c <_handle_Bus_Error_Instruction_Fetch>:
80004a0c:	c0 08       	rjmp	80004a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80004a10 <_handle_NMI>:
80004a10:	c0 08       	rjmp	80004a10 <_handle_NMI>
	...

80004a14 <_handle_Instruction_Address>:
80004a14:	c0 08       	rjmp	80004a14 <_handle_Instruction_Address>
	...

80004a18 <_handle_ITLB_Protection>:
80004a18:	c0 08       	rjmp	80004a18 <_handle_ITLB_Protection>
	...

80004a1c <_handle_Breakpoint>:
80004a1c:	c0 08       	rjmp	80004a1c <_handle_Breakpoint>
	...

80004a20 <_handle_Illegal_Opcode>:
80004a20:	c0 08       	rjmp	80004a20 <_handle_Illegal_Opcode>
	...

80004a24 <_handle_Unimplemented_Instruction>:
80004a24:	c0 08       	rjmp	80004a24 <_handle_Unimplemented_Instruction>
	...

80004a28 <_handle_Privilege_Violation>:
80004a28:	c0 08       	rjmp	80004a28 <_handle_Privilege_Violation>
	...

80004a2c <_handle_Floating_Point>:
80004a2c:	c0 08       	rjmp	80004a2c <_handle_Floating_Point>
	...

80004a30 <_handle_Coprocessor_Absent>:
80004a30:	c0 08       	rjmp	80004a30 <_handle_Coprocessor_Absent>
	...

80004a34 <_handle_Data_Address_Read>:
80004a34:	c0 08       	rjmp	80004a34 <_handle_Data_Address_Read>
	...

80004a38 <_handle_Data_Address_Write>:
80004a38:	c0 08       	rjmp	80004a38 <_handle_Data_Address_Write>
	...

80004a3c <_handle_DTLB_Protection_Read>:
80004a3c:	c0 08       	rjmp	80004a3c <_handle_DTLB_Protection_Read>
	...

80004a40 <_handle_DTLB_Protection_Write>:
80004a40:	c0 08       	rjmp	80004a40 <_handle_DTLB_Protection_Write>
	...

80004a44 <_handle_DTLB_Modified>:
80004a44:	c0 08       	rjmp	80004a44 <_handle_DTLB_Modified>
	...

80004a50 <_handle_ITLB_Miss>:
80004a50:	c0 08       	rjmp	80004a50 <_handle_ITLB_Miss>
	...

80004a60 <_handle_DTLB_Miss_Read>:
80004a60:	c0 08       	rjmp	80004a60 <_handle_DTLB_Miss_Read>
	...

80004a70 <_handle_DTLB_Miss_Write>:
80004a70:	c0 08       	rjmp	80004a70 <_handle_DTLB_Miss_Write>
	...

80004b00 <_handle_Supervisor_Call>:
80004b00:	c0 08       	rjmp	80004b00 <_handle_Supervisor_Call>
80004b02:	d7 03       	nop

80004b04 <_int0>:
80004b04:	30 0c       	mov	r12,0
80004b06:	fe b0 eb 95 	rcall	80002230 <_get_interrupt_handler>
80004b0a:	58 0c       	cp.w	r12,0
80004b0c:	f8 0f 17 10 	movne	pc,r12
80004b10:	d6 03       	rete

80004b12 <_int1>:
80004b12:	30 1c       	mov	r12,1
80004b14:	fe b0 eb 8e 	rcall	80002230 <_get_interrupt_handler>
80004b18:	58 0c       	cp.w	r12,0
80004b1a:	f8 0f 17 10 	movne	pc,r12
80004b1e:	d6 03       	rete

80004b20 <_int2>:
80004b20:	30 2c       	mov	r12,2
80004b22:	fe b0 eb 87 	rcall	80002230 <_get_interrupt_handler>
80004b26:	58 0c       	cp.w	r12,0
80004b28:	f8 0f 17 10 	movne	pc,r12
80004b2c:	d6 03       	rete

80004b2e <_int3>:
80004b2e:	30 3c       	mov	r12,3
80004b30:	fe b0 eb 80 	rcall	80002230 <_get_interrupt_handler>
80004b34:	58 0c       	cp.w	r12,0
80004b36:	f8 0f 17 10 	movne	pc,r12
80004b3a:	d6 03       	rete
80004b3c:	d7 03       	nop
80004b3e:	d7 03       	nop
80004b40:	d7 03       	nop
80004b42:	d7 03       	nop
80004b44:	d7 03       	nop
80004b46:	d7 03       	nop
80004b48:	d7 03       	nop
80004b4a:	d7 03       	nop
80004b4c:	d7 03       	nop
80004b4e:	d7 03       	nop
80004b50:	d7 03       	nop
80004b52:	d7 03       	nop
80004b54:	d7 03       	nop
80004b56:	d7 03       	nop
80004b58:	d7 03       	nop
80004b5a:	d7 03       	nop
80004b5c:	d7 03       	nop
80004b5e:	d7 03       	nop
80004b60:	d7 03       	nop
80004b62:	d7 03       	nop
80004b64:	d7 03       	nop
80004b66:	d7 03       	nop
80004b68:	d7 03       	nop
80004b6a:	d7 03       	nop
80004b6c:	d7 03       	nop
80004b6e:	d7 03       	nop
80004b70:	d7 03       	nop
80004b72:	d7 03       	nop
80004b74:	d7 03       	nop
80004b76:	d7 03       	nop
80004b78:	d7 03       	nop
80004b7a:	d7 03       	nop
80004b7c:	d7 03       	nop
80004b7e:	d7 03       	nop
80004b80:	d7 03       	nop
80004b82:	d7 03       	nop
80004b84:	d7 03       	nop
80004b86:	d7 03       	nop
80004b88:	d7 03       	nop
80004b8a:	d7 03       	nop
80004b8c:	d7 03       	nop
80004b8e:	d7 03       	nop
80004b90:	d7 03       	nop
80004b92:	d7 03       	nop
80004b94:	d7 03       	nop
80004b96:	d7 03       	nop
80004b98:	d7 03       	nop
80004b9a:	d7 03       	nop
80004b9c:	d7 03       	nop
80004b9e:	d7 03       	nop
80004ba0:	d7 03       	nop
80004ba2:	d7 03       	nop
80004ba4:	d7 03       	nop
80004ba6:	d7 03       	nop
80004ba8:	d7 03       	nop
80004baa:	d7 03       	nop
80004bac:	d7 03       	nop
80004bae:	d7 03       	nop
80004bb0:	d7 03       	nop
80004bb2:	d7 03       	nop
80004bb4:	d7 03       	nop
80004bb6:	d7 03       	nop
80004bb8:	d7 03       	nop
80004bba:	d7 03       	nop
80004bbc:	d7 03       	nop
80004bbe:	d7 03       	nop
80004bc0:	d7 03       	nop
80004bc2:	d7 03       	nop
80004bc4:	d7 03       	nop
80004bc6:	d7 03       	nop
80004bc8:	d7 03       	nop
80004bca:	d7 03       	nop
80004bcc:	d7 03       	nop
80004bce:	d7 03       	nop
80004bd0:	d7 03       	nop
80004bd2:	d7 03       	nop
80004bd4:	d7 03       	nop
80004bd6:	d7 03       	nop
80004bd8:	d7 03       	nop
80004bda:	d7 03       	nop
80004bdc:	d7 03       	nop
80004bde:	d7 03       	nop
80004be0:	d7 03       	nop
80004be2:	d7 03       	nop
80004be4:	d7 03       	nop
80004be6:	d7 03       	nop
80004be8:	d7 03       	nop
80004bea:	d7 03       	nop
80004bec:	d7 03       	nop
80004bee:	d7 03       	nop
80004bf0:	d7 03       	nop
80004bf2:	d7 03       	nop
80004bf4:	d7 03       	nop
80004bf6:	d7 03       	nop
80004bf8:	d7 03       	nop
80004bfa:	d7 03       	nop
80004bfc:	d7 03       	nop
80004bfe:	d7 03       	nop
