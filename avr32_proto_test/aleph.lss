
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000685c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008a00  80008a00  00008e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000abc  80008c00  80008c00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  800096bc  800096bc  00009abc  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000001  00000008  800096c0  00009c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000007  00000009  800096c1  00009c09  2**0
                  ALLOC
  9 .bss          00001c60  00000010  00000010  00000000  2**2
                  ALLOC
 10 .heap         0000d390  00001c70  00001c70  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  00009c09  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00001170  00000000  00000000  00009c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00003236  00000000  00000000  0000ada9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001deba  00000000  00000000  0000dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000040c8  00000000  00000000  0002be99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001c69c  00000000  00000000  0002ff61  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003370  00000000  00000000  0004c600  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000059df  00000000  00000000  0004f970  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000a97f  00000000  00000000  0005534f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0198290f  00000000  00000000  0005fcce  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00007150  00000000  00000000  019e25dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf 99 58 	sub	pc,pc,-26280

Disassembly of section .text:

80002004 <sdramc_init>:
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
80002004:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002008:	ee 78 42 3f 	mov	r8,999999
8000200c:	f8 08 00 09 	add	r9,r12,r8
80002010:	e0 68 de 83 	mov	r8,56963
80002014:	ea 18 43 1b 	orh	r8,0x431b
80002018:	f2 08 06 48 	mulu.d	r8,r9,r8
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
8000201c:	18 96       	mov	r6,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000201e:	f2 07 16 12 	lsr	r7,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002022:	32 7b       	mov	r11,39
80002024:	fe cc 94 24 	sub	r12,pc,-27612
80002028:	c3 7d       	rcall	80002296 <gpio_enable_module>
  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();

  // Enable SDRAM mode for CS1.
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
8000202a:	fe 68 10 00 	mov	r8,-126976
8000202e:	f0 f9 01 24 	ld.w	r9,r8[292]
80002032:	a1 b9       	sbr	r9,0x1
80002034:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80002038:	f0 f8 01 24 	ld.w	r8,r8[292]
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000203c:	e0 68 4d d3 	mov	r8,19923
80002040:	ea 18 10 62 	orh	r8,0x1062
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002044:	ee 05 15 03 	lsl	r5,r7,0x3
80002048:	ea 07 00 03 	add	r3,r5,r7
8000204c:	ee 03 00 23 	add	r3,r7,r3<<0x2
80002050:	e6 c3 fc 19 	sub	r3,r3,-999
80002054:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002058:	ee 09 15 04 	lsl	r9,r7,0x4
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000205c:	e6 0b 15 12 	lsl	r11,r3,0x12
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002060:	0e 19       	sub	r9,r7
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002062:	f2 03 15 02 	lsl	r3,r9,0x2
80002066:	e6 c3 fc 19 	sub	r3,r3,-999
8000206a:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000206e:	f2 c9 fc 19 	sub	r9,r9,-999
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002072:	e6 0e 15 06 	lsl	lr,r3,0x6
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002076:	f2 08 06 42 	mulu.d	r2,r9,r8
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000207a:	ee 0c 15 05 	lsl	r12,r7,0x5
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000207e:	e6 09 16 06 	lsr	r9,r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002082:	0e 0c       	add	r12,r7
80002084:	0e 15       	sub	r5,r7
80002086:	ee 0c 00 13 	add	r3,r7,r12<<0x1
8000208a:	a1 75       	lsl	r5,0x1
8000208c:	e6 c3 fc 19 	sub	r3,r3,-999
80002090:	ea c5 fc 19 	sub	r5,r5,-999
80002094:	e6 08 06 42 	mulu.d	r2,r3,r8
80002098:	ea 08 06 44 	mulu.d	r4,r5,r8
8000209c:	e6 08 16 06 	lsr	r8,r3,0x6
800020a0:	a3 65       	lsl	r5,0x2
800020a2:	bd 68       	lsl	r8,0x1c
800020a4:	e2 15 0f 00 	andl	r5,0xf00,COH
800020a8:	e8 18 00 d9 	orl	r8,0xd9
800020ac:	0a 48       	or	r8,r5
800020ae:	e2 1e f0 00 	andl	lr,0xf000,COH
800020b2:	f1 ee 10 0e 	or	lr,r8,lr
800020b6:	f2 08 15 10 	lsl	r8,r9,0x10
800020ba:	e6 18 00 0f 	andh	r8,0xf,COH
800020be:	10 4e       	or	lr,r8
800020c0:	f2 08 15 14 	lsl	r8,r9,0x14
800020c4:	e6 18 00 f0 	andh	r8,0xf0,COH
800020c8:	fd e8 10 08 	or	r8,lr,r8
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020cc:	fe 6a 20 00 	mov	r10,-122880
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
800020d0:	e6 1b 0f 00 	andh	r11,0xf00,COH
800020d4:	f1 eb 10 0b 	or	r11,r8,r11
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020d8:	95 2b       	st.w	r10[0x8],r11
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800020da:	74 28       	ld.w	r8,r10[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800020dc:	30 18       	mov	r8,1
800020de:	95 08       	st.w	r10[0x0],r8
  AVR32_SDRAMC.mr;
800020e0:	74 08       	ld.w	r8,r10[0x0]
  sdram[0];
800020e2:	fc 18 d0 00 	movh	r8,0xd000
800020e6:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
800020e8:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800020ec:	ee 0a 10 64 	mul	r10,r7,100
800020f0:	f0 0a 00 0a 	add	r10,r8,r10

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800020f4:	14 38       	cp.w	r8,r10
800020f6:	e0 88 00 06 	brls	80002102 <sdramc_init+0xfe>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800020fa:	e1 b8 00 42 	mfsr	r8,0x108
800020fe:	10 3a       	cp.w	r10,r8
80002100:	cf d3       	brcs	800020fa <sdramc_init+0xf6>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002102:	e1 b8 00 42 	mfsr	r8,0x108
80002106:	10 3a       	cp.w	r10,r8
80002108:	fe 9b ff fd 	brhi	80002102 <sdramc_init+0xfe>

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
8000210c:	fe 68 20 00 	mov	r8,-122880
80002110:	30 2a       	mov	r10,2
80002112:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002114:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002116:	fc 18 d0 00 	movh	r8,0xd000
8000211a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000211c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002120:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002124:	12 38       	cp.w	r8,r9
80002126:	e0 88 00 06 	brls	80002132 <sdramc_init+0x12e>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
8000212a:	e1 b8 00 42 	mfsr	r8,0x108
8000212e:	10 39       	cp.w	r9,r8
80002130:	cf d3       	brcs	8000212a <sdramc_init+0x126>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002132:	e1 b8 00 42 	mfsr	r8,0x108
80002136:	10 39       	cp.w	r9,r8
80002138:	fe 9b ff fd 	brhi	80002132 <sdramc_init+0x12e>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
8000213c:	fe 68 20 00 	mov	r8,-122880
80002140:	30 4a       	mov	r10,4
80002142:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002144:	70 08       	ld.w	r8,r8[0x0]
80002146:	f8 09 15 01 	lsl	r9,r12,0x1
8000214a:	e0 68 4d d3 	mov	r8,19923
8000214e:	ea 18 10 62 	orh	r8,0x1062
80002152:	f2 c9 fc 19 	sub	r9,r9,-999
80002156:	30 0a       	mov	r10,0
80002158:	f2 08 06 48 	mulu.d	r8,r9,r8
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
8000215c:	fc 1b d0 00 	movh	r11,0xd000
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
80002160:	f2 0c 16 06 	lsr	r12,r9,0x6
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002164:	96 08       	ld.sh	r8,r11[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002166:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000216a:	f0 0c 00 09 	add	r9,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000216e:	12 38       	cp.w	r8,r9
80002170:	e0 88 00 06 	brls	8000217c <sdramc_init+0x178>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002174:	e1 b8 00 42 	mfsr	r8,0x108
80002178:	10 39       	cp.w	r9,r8
8000217a:	cf d3       	brcs	80002174 <sdramc_init+0x170>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
8000217c:	e1 b8 00 42 	mfsr	r8,0x108
80002180:	10 39       	cp.w	r9,r8
80002182:	fe 9b ff fd 	brhi	8000217c <sdramc_init+0x178>
80002186:	2f fa       	sub	r10,-1
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80002188:	58 2a       	cp.w	r10,2
8000218a:	ce d1       	brne	80002164 <sdramc_init+0x160>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
8000218c:	fe 68 20 00 	mov	r8,-122880
80002190:	30 39       	mov	r9,3
80002192:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
80002194:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002196:	fc 18 d0 00 	movh	r8,0xd000
8000219a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000219c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800021a0:	e0 69 4d d3 	mov	r9,19923
800021a4:	ea 19 10 62 	orh	r9,0x1062
800021a8:	ee 0b 15 01 	lsl	r11,r7,0x1
800021ac:	f6 cb fc 19 	sub	r11,r11,-999
800021b0:	f6 09 06 4a 	mulu.d	r10,r11,r9
800021b4:	f6 09 16 06 	lsr	r9,r11,0x6
800021b8:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800021bc:	12 38       	cp.w	r8,r9
800021be:	e0 88 00 06 	brls	800021ca <sdramc_init+0x1c6>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800021c2:	e1 b8 00 42 	mfsr	r8,0x108
800021c6:	10 39       	cp.w	r9,r8
800021c8:	cf d3       	brcs	800021c2 <sdramc_init+0x1be>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
800021ca:	e1 b8 00 42 	mfsr	r8,0x108
800021ce:	10 39       	cp.w	r9,r8
800021d0:	fe 9b ff fd 	brhi	800021ca <sdramc_init+0x1c6>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800021d4:	30 09       	mov	r9,0
800021d6:	fe 68 20 00 	mov	r8,-122880
800021da:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
800021dc:	70 09       	ld.w	r9,r8[0x0]
  sdram[0];
800021de:	fc 19 d0 00 	movh	r9,0xd000
800021e2:	92 09       	ld.sh	r9,r9[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800021e4:	e0 69 1e 84 	mov	r9,7812
800021e8:	e0 6b de 83 	mov	r11,56963
800021ec:	ea 1b 43 1b 	orh	r11,0x431b
800021f0:	ec 0b 06 4a 	mulu.d	r10,r6,r11
800021f4:	b3 8b       	lsr	r11,0x12
800021f6:	b3 3b       	mul	r11,r9
800021f8:	e0 69 4d d3 	mov	r9,19923
800021fc:	ea 19 10 62 	orh	r9,0x1062
80002200:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002204:	f6 09 16 06 	lsr	r9,r11,0x6
80002208:	91 19       	st.w	r8[0x4],r9
  AVR32_SDRAMC.tr;
8000220a:	70 18       	ld.w	r8,r8[0x4]
}
8000220c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80002210 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002210:	fe 68 14 00 	mov	r8,-125952
80002214:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002216:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000221a:	91 09       	st.w	r8[0x0],r9
}
8000221c:	5e fc       	retal	r12

8000221e <gpio_enable_pin_pull_up>:


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->puers = 1 << (pin & 0x1F);
8000221e:	30 18       	mov	r8,1
80002220:	f0 0c 09 48 	lsl	r8,r8,r12
#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002224:	a5 9c       	lsr	r12,0x5
80002226:	a9 6c       	lsl	r12,0x8
80002228:	e0 2c f0 00 	sub	r12,61440
  gpio_port->puers = 1 << (pin & 0x1F);
8000222c:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002230:	5e fc       	retal	r12

80002232 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002232:	f8 08 16 05 	lsr	r8,r12,0x5
80002236:	a9 68       	lsl	r8,0x8
80002238:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000223c:	71 88       	ld.w	r8,r8[0x60]
8000223e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002242:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002246:	5e fc       	retal	r12

80002248 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002248:	30 18       	mov	r8,1
8000224a:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000224e:	a5 9c       	lsr	r12,0x5
80002250:	a9 6c       	lsl	r12,0x8
80002252:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002256:	f9 48 00 54 	st.w	r12[84],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000225a:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000225e:	99 18       	st.w	r12[0x4],r8
}
80002260:	5e fc       	retal	r12

80002262 <gpio_clr_gpio_pin>:
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002262:	30 18       	mov	r8,1
80002264:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002268:	a5 9c       	lsr	r12,0x5
8000226a:	a9 6c       	lsl	r12,0x8
8000226c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002270:	f9 48 00 58 	st.w	r12[88],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80002274:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002278:	99 18       	st.w	r12[0x4],r8
}
8000227a:	5e fc       	retal	r12

8000227c <gpio_tgl_gpio_pin>:
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000227c:	30 18       	mov	r8,1
8000227e:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002282:	a5 9c       	lsr	r12,0x5
80002284:	a9 6c       	lsl	r12,0x8
80002286:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000228a:	f9 48 00 5c 	st.w	r12[92],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000228e:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002292:	99 18       	st.w	r12[0x4],r8
}
80002294:	5e fc       	retal	r12

80002296 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002296:	eb cd 40 f8 	pushm	r3-r7,lr
8000229a:	18 98       	mov	r8,r12
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000229c:	58 0b       	cp.w	r11,0
8000229e:	c3 c0       	breq	80002316 <gpio_enable_module+0x80>
800022a0:	30 0e       	mov	lr,0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800022a2:	30 16       	mov	r6,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022a4:	1c 9c       	mov	r12,lr
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800022a6:	30 15       	mov	r5,1
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800022a8:	30 24       	mov	r4,2
800022aa:	30 33       	mov	r3,3
800022ac:	c0 d8       	rjmp	800022c6 <gpio_enable_module+0x30>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800022ae:	ea 07 09 4a 	lsl	r10,r5,r7
800022b2:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800022b4:	93 aa       	st.w	r9[0x28],r10
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800022b6:	93 2a       	st.w	r9[0x8],r10
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022b8:	2f fe       	sub	lr,-1
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800022ba:	30 09       	mov	r9,0
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800022bc:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022be:	1c 3b       	cp.w	r11,lr
800022c0:	e0 88 00 1a 	brls	800022f4 <gpio_enable_module+0x5e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
800022c4:	2f e8       	sub	r8,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800022c6:	11 87       	ld.ub	r7,r8[0x0]
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800022c8:	11 9a       	ld.ub	r10,r8[0x1]
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022ca:	ee 09 16 05 	lsr	r9,r7,0x5
800022ce:	a9 69       	lsl	r9,0x8
800022d0:	e0 29 f0 00 	sub	r9,61440

  // Enable the correct function.
  switch (function)
800022d4:	ec 0a 18 00 	cp.b	r10,r6
800022d8:	c1 00       	breq	800022f8 <gpio_enable_module+0x62>
800022da:	ce a3       	brcs	800022ae <gpio_enable_module+0x18>
800022dc:	e8 0a 18 00 	cp.b	r10,r4
800022e0:	c1 60       	breq	8000230c <gpio_enable_module+0x76>
800022e2:	e6 0a 18 00 	cp.b	r10,r3
800022e6:	c0 e0       	breq	80002302 <gpio_enable_module+0x6c>
800022e8:	30 19       	mov	r9,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022ea:	2f fe       	sub	lr,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800022ec:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022ee:	1c 3b       	cp.w	r11,lr
800022f0:	fe 9b ff ea 	brhi	800022c4 <gpio_enable_module+0x2e>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
800022f4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800022f8:	ea 07 09 4a 	lsl	r10,r5,r7
800022fc:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800022fe:	93 aa       	st.w	r9[0x28],r10
80002300:	cd bb       	rjmp	800022b6 <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002302:	ea 07 09 4a 	lsl	r10,r5,r7
80002306:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002308:	93 9a       	st.w	r9[0x24],r10
8000230a:	cd 6b       	rjmp	800022b6 <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000230c:	ea 07 09 4a 	lsl	r10,r5,r7
80002310:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002312:	93 9a       	st.w	r9[0x24],r10
80002314:	cd 1b       	rjmp	800022b6 <gpio_enable_module+0x20>
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
80002316:	16 9c       	mov	r12,r11
80002318:	ce eb       	rjmp	800022f4 <gpio_enable_module+0x5e>

8000231a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000231a:	c0 08       	rjmp	8000231a <_unhandled_interrupt>

8000231c <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000231c:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002320:	fe c8 96 d0 	sub	r8,pc,-26928
80002324:	a5 9b       	lsr	r11,0x5
80002326:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000232a:	70 18       	ld.w	r8,r8[0x4]
8000232c:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002330:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
80002332:	c1 20       	breq	80002356 <INTC_register_interrupt+0x3a>
80002334:	58 1a       	cp.w	r10,1
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
80002336:	c1 b0       	breq	8000236c <INTC_register_interrupt+0x50>
80002338:	58 2a       	cp.w	r10,2
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000233a:	c2 50       	breq	80002384 <INTC_register_interrupt+0x68>
8000233c:	fe c9 98 0e 	sub	r9,pc,-26610
80002340:	fe c8 99 40 	sub	r8,pc,-26304
80002344:	f2 08 01 08 	sub	r8,r9,r8
80002348:	fe 79 08 00 	mov	r9,-63488
8000234c:	ea 18 c0 00 	orh	r8,0xc000
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002350:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002354:	5e fc       	retal	r12
80002356:	fe 78 08 00 	mov	r8,-63488
8000235a:	fe c9 99 5a 	sub	r9,pc,-26278
8000235e:	fe ca 98 5a 	sub	r10,pc,-26534
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002362:	f4 09 01 09 	sub	r9,r10,r9
80002366:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
8000236a:	5e fc       	retal	r12
8000236c:	fe c9 98 5a 	sub	r9,pc,-26534
80002370:	fe c8 99 70 	sub	r8,pc,-26256
80002374:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002378:	fe 79 08 00 	mov	r9,-63488
8000237c:	bf a8       	sbr	r8,0x1e
8000237e:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002382:	5e fc       	retal	r12
80002384:	fe c9 98 64 	sub	r9,pc,-26524
80002388:	fe c8 99 88 	sub	r8,pc,-26232
8000238c:	f2 08 01 08 	sub	r8,r9,r8
80002390:	fe 79 08 00 	mov	r9,-63488
80002394:	bf b8       	sbr	r8,0x1f
80002396:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
8000239a:	5e fc       	retal	r12

8000239c <INTC_init_interrupts>:
8000239c:	eb cd 40 c0 	pushm	r6-r7,lr
800023a0:	fe c8 99 a0 	sub	r8,pc,-26208
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800023a4:	e3 b8 00 01 	mtsr	0x4,r8
800023a8:	fe c6 98 a4 	sub	r6,pc,-26460
800023ac:	fe ce 97 5c 	sub	lr,pc,-26788

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800023b0:	10 16       	sub	r6,r8
800023b2:	30 0c       	mov	r12,0
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
800023b4:	fe cb 00 9a 	sub	r11,pc,154

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800023b8:	fe 77 08 00 	mov	r7,-63488
800023bc:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800023be:	58 0a       	cp.w	r10,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800023c0:	c0 70       	breq	800023ce <INTC_init_interrupts+0x32>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800023c2:	7c 19       	ld.w	r9,lr[0x4]
800023c4:	30 08       	mov	r8,0

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800023c6:	12 ab       	st.w	r9++,r11
800023c8:	2f f8       	sub	r8,-1
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800023ca:	14 38       	cp.w	r8,r10
800023cc:	cf d3       	brcs	800023c6 <INTC_init_interrupts+0x2a>
800023ce:	ee 0c 09 26 	st.w	r7[r12<<0x2],r6
800023d2:	2f 8e       	sub	lr,-8
800023d4:	2f fc       	sub	r12,-1
800023d6:	59 4c       	cp.w	r12,20
800023d8:	cf 21       	brne	800023bc <INTC_init_interrupts+0x20>
800023da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023de:	d7 03       	nop

800023e0 <_get_interrupt_handler>:
800023e0:	e0 68 00 83 	mov	r8,131
800023e4:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800023e8:	fe 78 08 00 	mov	r8,-63488
800023ec:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800023f0:	f2 ca ff c0 	sub	r10,r9,-64
800023f4:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800023f8:	58 0c       	cp.w	r12,0
800023fa:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
800023fc:	fe c8 97 ac 	sub	r8,pc,-26708
80002400:	f8 0c 12 00 	clz	r12,r12
80002404:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002408:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000240c:	72 18       	ld.w	r8,r9[0x4]
8000240e:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002412:	5e fc       	retal	r12

80002414 <pdca_init_channel>:
  return pdca_channel;
}


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
80002414:	d4 01       	pushm	lr


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002416:	f8 09 15 06 	lsl	r9,r12,0x6
8000241a:	e0 39 00 00 	sub	r9,65536

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000241e:	58 ec       	cp.w	r12,14
80002420:	f9 b8 0b ff 	movhi	r8,-1
80002424:	f0 0e 17 b0 	movhi	lr,r8
80002428:	f2 08 17 80 	movls	r8,r9
8000242c:	f2 0e 17 80 	movls	lr,r9
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002430:	e1 ba 00 00 	mfsr	r10,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
80002434:	ed ba 00 10 	bld	r10,0x10
80002438:	c3 21       	brne	8000249c <pdca_init_channel+0x88>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
8000243a:	30 2a       	mov	r10,2
8000243c:	9d 9a       	st.w	lr[0x24],r10
  pdca_channel->isr;
8000243e:	7c ba       	ld.w	r10,lr[0x2c]
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002440:	58 fc       	cp.w	r12,15
80002442:	f9 b9 02 ff 	movhs	r9,-1
void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002446:	e1 ba 00 00 	mfsr	r10,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
8000244a:	ed ba 00 10 	bld	r10,0x10
8000244e:	c2 11       	brne	80002490 <pdca_init_channel+0x7c>
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80002450:	30 1a       	mov	r10,1
80002452:	93 9a       	st.w	r9[0x24],r10
  pdca_channel->isr;
80002454:	72 b9       	ld.w	r9,r9[0x2c]
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002456:	e1 b9 00 00 	mfsr	r9,0x0
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
8000245a:	ee 19 00 01 	eorh	r9,0x1
8000245e:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1

  if (global_interrupt_enabled) cpu_irq_disable();
80002462:	c1 51       	brne	8000248c <pdca_init_channel+0x78>
  pdca_channel->mar = (unsigned long)opt->addr;
80002464:	76 0a       	ld.w	r10,r11[0x0]
80002466:	91 0a       	st.w	r8[0x0],r10
  pdca_channel->tcr = opt->size;
80002468:	76 1a       	ld.w	r10,r11[0x4]
8000246a:	91 2a       	st.w	r8[0x8],r10
  pdca_channel->psr = opt->pid;
8000246c:	76 4a       	ld.w	r10,r11[0x10]
8000246e:	91 1a       	st.w	r8[0x4],r10
  pdca_channel->marr = (unsigned long)opt->r_addr;
80002470:	76 2a       	ld.w	r10,r11[0x8]
80002472:	91 3a       	st.w	r8[0xc],r10
  pdca_channel->tcrr = opt->r_size;
80002474:	76 3a       	ld.w	r10,r11[0xc]
80002476:	91 4a       	st.w	r8[0x10],r10
  pdca_channel->mr =
80002478:	76 5a       	ld.w	r10,r11[0x14]
8000247a:	91 6a       	st.w	r8[0x18],r10
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
8000247c:	e0 6a 01 00 	mov	r10,256
80002480:	91 5a       	st.w	r8[0x14],r10
  pdca_channel->isr;
80002482:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80002484:	58 09       	cp.w	r9,0
80002486:	c0 20       	breq	8000248a <pdca_init_channel+0x76>
80002488:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
}
8000248a:	d8 0a       	popm	pc,r12=0
  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
8000248c:	d3 03       	ssrf	0x10
8000248e:	ce bb       	rjmp	80002464 <pdca_init_channel+0x50>
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002490:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80002492:	30 1a       	mov	r10,1
80002494:	93 9a       	st.w	r9[0x24],r10
  pdca_channel->isr;
80002496:	72 b9       	ld.w	r9,r9[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80002498:	d5 03       	csrf	0x10
8000249a:	cd eb       	rjmp	80002456 <pdca_init_channel+0x42>
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
8000249c:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
8000249e:	30 2a       	mov	r10,2
800024a0:	9d 9a       	st.w	lr[0x24],r10
  pdca_channel->isr;
800024a2:	7c ba       	ld.w	r10,lr[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800024a4:	d5 03       	csrf	0x10
800024a6:	cc db       	rjmp	80002440 <pdca_init_channel+0x2c>

800024a8 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800024a8:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
800024ac:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800024ae:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
800024b0:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
800024b2:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
800024b6:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
800024ba:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800024be:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800024c2:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
800024c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800024ca <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800024ca:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800024ce:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800024d0:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800024d4:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800024d8:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800024dc:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
800024e0:	5e fc       	retal	r12

800024e2 <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800024e2:	2f 8b       	sub	r11,-8
800024e4:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800024e8:	a1 a8       	sbr	r8,0x0
800024ea:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800024ee:	5e fc       	retal	r12

800024f0 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800024f0:	79 58       	ld.w	r8,r12[0x54]
800024f2:	ed b8 00 00 	bld	r8,0x0
800024f6:	cf d1       	brne	800024f0 <pm_wait_for_pll0_locked>
}
800024f8:	5e fc       	retal	r12

800024fa <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800024fa:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800024fc:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002500:	99 08       	st.w	r12[0x0],r8
}
80002502:	5e fc       	retal	r12

80002504 <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002504:	ec 5b bb 9f 	cp.w	r11,899999
80002508:	e0 8b 00 18 	brhi	80002538 <pm_switch_to_osc0+0x34>
8000250c:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000250e:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002510:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002514:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002516:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002518:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000251c:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
8000251e:	78 08       	ld.w	r8,r12[0x0]
80002520:	a3 a8       	sbr	r8,0x2
80002522:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002524:	79 58       	ld.w	r8,r12[0x54]
80002526:	ed b8 00 07 	bld	r8,0x7
8000252a:	cf d1       	brne	80002524 <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
8000252c:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000252e:	30 19       	mov	r9,1
80002530:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002534:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
80002536:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002538:	e0 68 c6 bf 	mov	r8,50879
8000253c:	ea 18 00 2d 	orh	r8,0x2d
80002540:	10 3b       	cp.w	r11,r8
80002542:	e0 88 00 0c 	brls	8000255a <pm_switch_to_osc0+0x56>
80002546:	e0 68 12 00 	mov	r8,4608
8000254a:	ea 18 00 7a 	orh	r8,0x7a
8000254e:	10 3b       	cp.w	r11,r8
80002550:	f9 bb 03 06 	movlo	r11,6
80002554:	f9 bb 02 07 	movhs	r11,7
80002558:	cd bb       	rjmp	8000250e <pm_switch_to_osc0+0xa>
8000255a:	30 5b       	mov	r11,5
8000255c:	cd 9b       	rjmp	8000250e <pm_switch_to_osc0+0xa>

8000255e <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
8000255e:	f8 c9 00 01 	sub	r9,r12,1
80002562:	f8 08 16 01 	lsr	r8,r12,0x1
80002566:	f2 08 00 08 	add	r8,r9,r8
8000256a:	f0 0b 00 0b 	add	r11,r8,r11
8000256e:	f6 0c 0d 0a 	divu	r10,r11,r12
80002572:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
80002574:	f4 c8 00 01 	sub	r8,r10,1
80002578:	e0 48 00 fe 	cp.w	r8,254
8000257c:	e0 8b 00 04 	brhi	80002584 <getBaudDiv+0x26>
    return -1;
  }

  return baudDiv;
80002580:	5c 8c       	casts.h	r12
}
80002582:	5e fc       	retal	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);

  if (baudDiv <= 0 || baudDiv > 255) {
80002584:	5e fe       	retal	-1

80002586 <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002586:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002588:	30 1a       	mov	r10,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000258a:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8000258c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002590:	f4 09 18 00 	cp.b	r9,r10
80002594:	e0 88 00 04 	brls	8000259c <spi_initMaster+0x16>
80002598:	30 2c       	mov	r12,2
8000259a:	d8 02       	popm	pc
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000259c:	e0 6a 00 80 	mov	r10,128
800025a0:	99 0a       	st.w	r12[0x0],r10

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800025a2:	30 0b       	mov	r11,0

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800025a4:	70 1a       	ld.w	r10,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
800025a6:	30 1e       	mov	lr,1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
800025a8:	16 9c       	mov	r12,r11
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
800025aa:	f5 de d0 01 	bfins	r10,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800025ae:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800025b2:	30 f9       	mov	r9,15

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800025b4:	f5 db d0 e1 	bfins	r10,r11,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800025b8:	f5 d9 d2 04 	bfins	r10,r9,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
800025bc:	91 1a       	st.w	r8[0x4],r10

  return SPI_OK;
}
800025be:	d8 02       	popm	pc

800025c0 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800025c0:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800025c2:	30 18       	mov	r8,1
800025c4:	f0 0b 18 00 	cp.b	r11,r8
800025c8:	5f be       	srhi	lr
800025ca:	f0 0a 18 00 	cp.b	r10,r8
800025ce:	5f b8       	srhi	r8
800025d0:	1c 48       	or	r8,lr
800025d2:	c0 a1       	brne	800025e6 <spi_selectionMode+0x26>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
800025d4:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
800025d6:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800025da:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
800025de:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
800025e2:	99 18       	st.w	r12[0x4],r8
800025e4:	d8 0a       	popm	pc,r12=0
                               unsigned char pcs_decode,
                               unsigned char delay)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800025e6:	30 2c       	mov	r12,2
800025e8:	d8 02       	popm	pc

800025ea <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800025ea:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800025ec:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800025ee:	ea 19 00 0f 	orh	r9,0xf
800025f2:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800025f4:	78 1c       	ld.w	r12,r12[0x4]
800025f6:	e2 1c 00 04 	andl	r12,0x4,COH
800025fa:	c0 80       	breq	8000260a <spi_selectChip+0x20>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800025fc:	30 e9       	mov	r9,14
800025fe:	f2 0b 18 00 	cp.b	r11,r9
80002602:	e0 88 00 12 	brls	80002626 <spi_selectChip+0x3c>
  } else {
    if (chip > 3) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002606:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
80002608:	5e fc       	retal	r12
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
  } else {
    if (chip > 3) {
8000260a:	30 39       	mov	r9,3
8000260c:	f2 0b 18 00 	cp.b	r11,r9
80002610:	fe 9b ff fb 	brhi	80002606 <spi_selectChip+0x1c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002614:	70 19       	ld.w	r9,r8[0x4]
80002616:	2f 0b       	sub	r11,-16
80002618:	30 1a       	mov	r10,1
8000261a:	f4 0b 09 4b 	lsl	r11,r10,r11
8000261e:	5c db       	com	r11
80002620:	12 6b       	and	r11,r9
80002622:	91 1b       	st.w	r8[0x4],r11
80002624:	5e fc       	retal	r12
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80002626:	70 19       	ld.w	r9,r8[0x4]
80002628:	b1 6b       	lsl	r11,0x10
8000262a:	30 0c       	mov	r12,0
8000262c:	ea 1b ff f0 	orh	r11,0xfff0
80002630:	e8 1b ff ff 	orl	r11,0xffff
80002634:	12 6b       	and	r11,r9
80002636:	91 1b       	st.w	r8[0x4],r11
80002638:	5e fc       	retal	r12

8000263a <spi_unselectChip>:
  return SPI_OK;
}


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
8000263a:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000263c:	c0 58       	rjmp	80002646 <spi_unselectChip+0xc>
8000263e:	2f f9       	sub	r9,-1
    if (!timeout--) {
80002640:	e0 49 3a 99 	cp.w	r9,15001
80002644:	c0 d0       	breq	8000265e <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002646:	78 48       	ld.w	r8,r12[0x10]
80002648:	ed b8 00 09 	bld	r8,0x9
8000264c:	cf 91       	brne	8000263e <spi_unselectChip+0x4>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000264e:	78 18       	ld.w	r8,r12[0x4]
80002650:	ea 18 00 0f 	orh	r8,0xf
80002654:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002656:	fc 18 01 00 	movh	r8,0x100
8000265a:	99 08       	st.w	r12[0x0],r8
8000265c:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000265e:	5e ff       	retal	1

80002660 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002660:	eb cd 40 fe 	pushm	r1-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002664:	30 34       	mov	r4,3


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002666:	16 97       	mov	r7,r11
80002668:	18 96       	mov	r6,r12
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000266a:	f7 35 00 0c 	ld.ub	r5,r11[12]
8000266e:	e8 05 18 00 	cp.b	r5,r4
80002672:	e0 8b 00 09 	brhi	80002684 <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
80002676:	f7 32 00 0b 	ld.ub	r2,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000267a:	30 13       	mov	r3,1
8000267c:	e6 02 18 00 	cp.b	r2,r3
80002680:	e0 88 00 05 	brls	8000268a <spi_setupChipReg+0x2a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
      break;
80002684:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
80002686:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
8000268a:	f7 31 00 08 	ld.ub	r1,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000268e:	30 78       	mov	r8,7
80002690:	f0 01 18 00 	cp.b	r1,r8
80002694:	fe 98 ff f8 	brls	80002684 <spi_setupChipReg+0x24>
80002698:	31 08       	mov	r8,16
8000269a:	f0 01 18 00 	cp.b	r1,r8
8000269e:	fe 9b ff f3 	brhi	80002684 <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800026a2:	14 9b       	mov	r11,r10
800026a4:	6e 1c       	ld.w	r12,r7[0x4]
800026a6:	c5 cf       	rcall	8000255e <getBaudDiv>
800026a8:	ce e5       	brlt	80002684 <spi_setupChipReg+0x24>

  if (baudDiv < 0) {
800026aa:	0a 9a       	mov	r10,r5
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800026ac:	ec 1a 00 01 	eorl	r10,0x1
800026b0:	30 08       	mov	r8,0
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800026b2:	a1 95       	lsr	r5,0x1
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800026b4:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
800026b8:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800026bc:	ef 3a 00 09 	ld.ub	r10,r7[9]
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800026c0:	20 81       	sub	r1,8
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800026c2:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800026c6:	0f 89       	ld.ub	r9,r7[0x0]
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
800026c8:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800026cc:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
800026d0:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800026d4:	ef 3a 00 0a 	ld.ub	r10,r7[10]
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800026d8:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800026dc:	e6 09 18 00 	cp.b	r9,r3

  switch(options->reg) {
800026e0:	c0 f0       	breq	800026fe <spi_setupChipReg+0x9e>
800026e2:	c0 b3       	brcs	800026f8 <spi_setupChipReg+0x98>
800026e4:	30 2a       	mov	r10,2
800026e6:	f4 09 18 00 	cp.b	r9,r10
800026ea:	c0 d0       	breq	80002704 <spi_setupChipReg+0xa4>
800026ec:	e8 09 18 00 	cp.b	r9,r4
800026f0:	cc a1       	brne	80002684 <spi_setupChipReg+0x24>
800026f2:	8d f8       	st.w	r6[0x3c],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800026f4:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800026f8:	8d c8       	st.w	r6[0x30],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
800026fa:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800026fe:	8d d8       	st.w	r6[0x34],r8
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80002700:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002704:	8d e8       	st.w	r6[0x38],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002706:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000270a:	d7 03       	nop

8000270c <spi_enable>:
8000270c:	30 18       	mov	r8,1
8000270e:	99 08       	st.w	r12[0x0],r8


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
80002710:	5e fc       	retal	r12

80002712 <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002712:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002714:	c0 58       	rjmp	8000271e <spi_write+0xc>
80002716:	2f f9       	sub	r9,-1
    if (!timeout--) {
80002718:	e0 49 3a 99 	cp.w	r9,15001
8000271c:	c0 80       	breq	8000272c <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000271e:	78 48       	ld.w	r8,r12[0x10]
80002720:	ed b8 00 01 	bld	r8,0x1
80002724:	cf 91       	brne	80002716 <spi_write+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002726:	5c 7b       	castu.h	r11
80002728:	99 3b       	st.w	r12[0xc],r11
8000272a:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
8000272c:	5e ff       	retal	1

8000272e <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
8000272e:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80002730:	c0 58       	rjmp	8000273a <spi_read+0xc>
80002732:	2f f9       	sub	r9,-1
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002734:	e0 49 3a 99 	cp.w	r9,15001
80002738:	c0 b0       	breq	8000274e <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000273a:	78 48       	ld.w	r8,r12[0x10]
8000273c:	e2 18 02 01 	andl	r8,0x201,COH
80002740:	e0 48 02 01 	cp.w	r8,513
80002744:	cf 71       	brne	80002732 <spi_read+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002746:	78 28       	ld.w	r8,r12[0x8]
80002748:	30 0c       	mov	r12,0
8000274a:	b6 08       	st.h	r11[0x0],r8

  return SPI_OK;
}
8000274c:	5e fc       	retal	r12
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000274e:	5e ff       	retal	1

80002750 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80002750:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002752:	76 09       	ld.w	r9,r11[0x0]
80002754:	58 29       	cp.w	r9,2
80002756:	e0 8b 00 4b 	brhi	800027ec <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
8000275a:	76 18       	ld.w	r8,r11[0x4]
8000275c:	10 9e       	mov	lr,r8
8000275e:	e6 1e c0 00 	andh	lr,0xc000,COH
80002762:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002766:	af ba       	sbr	r10,0xf
80002768:	1c 4a       	or	r10,lr
8000276a:	10 9e       	mov	lr,r8
8000276c:	e6 1e 30 00 	andh	lr,0x3000,COH
80002770:	1c 4a       	or	r10,lr
80002772:	10 9e       	mov	lr,r8
80002774:	e6 1e 0c 00 	andh	lr,0xc00,COH
80002778:	1c 4a       	or	r10,lr
8000277a:	10 9e       	mov	lr,r8
8000277c:	e6 1e 03 00 	andh	lr,0x300,COH
80002780:	1c 4a       	or	r10,lr
80002782:	10 9e       	mov	lr,r8
80002784:	e6 1e 00 c0 	andh	lr,0xc0,COH
80002788:	1c 4a       	or	r10,lr
8000278a:	10 9e       	mov	lr,r8
8000278c:	e6 1e 00 30 	andh	lr,0x30,COH
80002790:	1c 4a       	or	r10,lr
80002792:	10 9e       	mov	lr,r8
80002794:	e6 1e 00 0c 	andh	lr,0xc,COH
80002798:	1c 4a       	or	r10,lr
8000279a:	10 9e       	mov	lr,r8
8000279c:	e6 1e 00 03 	andh	lr,0x3,COH
800027a0:	1c 4a       	or	r10,lr
800027a2:	10 9e       	mov	lr,r8
800027a4:	e2 1e 60 00 	andl	lr,0x6000,COH
800027a8:	1c 4a       	or	r10,lr
800027aa:	10 9e       	mov	lr,r8
800027ac:	e2 1e 10 00 	andl	lr,0x1000,COH
800027b0:	1c 4a       	or	r10,lr
800027b2:	10 9e       	mov	lr,r8
800027b4:	e2 1e 0c 00 	andl	lr,0xc00,COH
800027b8:	1c 4a       	or	r10,lr
800027ba:	10 9e       	mov	lr,r8
800027bc:	e2 1e 03 00 	andl	lr,0x300,COH
800027c0:	1c 4a       	or	r10,lr
800027c2:	10 9e       	mov	lr,r8
800027c4:	e2 1e 00 80 	andl	lr,0x80,COH
800027c8:	10 9b       	mov	r11,r8
800027ca:	1c 4a       	or	r10,lr
800027cc:	e2 1b 00 08 	andl	r11,0x8,COH
800027d0:	10 9e       	mov	lr,r8
800027d2:	a5 69       	lsl	r9,0x4
800027d4:	e2 1e 00 40 	andl	lr,0x40,COH
800027d8:	2f f9       	sub	r9,-1
800027da:	1c 4a       	or	r10,lr
800027dc:	e2 18 00 30 	andl	r8,0x30,COH
800027e0:	f5 e8 10 08 	or	r8,r10,r8
800027e4:	16 48       	or	r8,r11
800027e6:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800027ea:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800027ec:	dc 0a       	popm	pc,r12=-1

800027ee <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027ee:	58 2b       	cp.w	r11,2
800027f0:	e0 8b 00 07 	brhi	800027fe <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800027f4:	a7 6b       	lsl	r11,0x6
800027f6:	16 0c       	add	r12,r11
800027f8:	30 58       	mov	r8,5
800027fa:	99 08       	st.w	r12[0x0],r8
800027fc:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027fe:	5e fe       	retal	-1

80002800 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002800:	58 2b       	cp.w	r11,2
80002802:	e0 8b 00 07 	brhi	80002810 <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80002806:	a7 6b       	lsl	r11,0x6
80002808:	2e 0b       	sub	r11,-32
8000280a:	16 0c       	add	r12,r11
8000280c:	78 0c       	ld.w	r12,r12[0x0]
}
8000280e:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002810:	5e fe       	retal	-1

80002812 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002812:	58 2b       	cp.w	r11,2
80002814:	e0 8b 00 1a 	brhi	80002848 <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80002818:	f6 08 15 04 	lsl	r8,r11,0x4
8000281c:	2f f8       	sub	r8,-1
8000281e:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002822:	ed b8 00 0f 	bld	r8,0xf
80002826:	c0 e1       	brne	80002842 <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002828:	a7 6b       	lsl	r11,0x6
8000282a:	f8 0b 00 0b 	add	r11,r12,r11
8000282e:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80002832:	2e 4b       	sub	r11,-28
80002834:	76 08       	ld.w	r8,r11[0x0]
80002836:	e0 18 00 00 	andl	r8,0x0
8000283a:	f9 e8 10 08 	or	r8,r12,r8
8000283e:	97 08       	st.w	r11[0x0],r8

  return value;
}
80002840:	5e fc       	retal	r12
80002842:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80002846:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002848:	5e fe       	retal	-1

8000284a <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
8000284a:	d4 31       	pushm	r0-r7,lr
8000284c:	20 3d       	sub	sp,12
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000284e:	e1 b8 00 00 	mfsr	r8,0x0
80002852:	50 08       	stdsp	sp[0x0],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002854:	58 2b       	cp.w	r11,2
80002856:	e0 8b 00 74 	brhi	8000293e <tc_configure_interrupts+0xf4>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000285a:	74 0e       	ld.w	lr,r10[0x0]
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000285c:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002860:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
80002864:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80002868:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000286c:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
80002870:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
80002874:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002878:	e6 02 15 06 	lsl	r2,r3,0x6
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
8000287c:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002880:	e5 e8 10 72 	or	r2,r2,r8<<0x7
80002884:	12 42       	or	r2,r9
80002886:	e5 e4 10 52 	or	r2,r2,r4<<0x5
8000288a:	e5 e5 10 42 	or	r2,r2,r5<<0x4
8000288e:	e5 e6 10 32 	or	r2,r2,r6<<0x3
80002892:	e5 e7 10 22 	or	r2,r2,r7<<0x2
80002896:	e5 ee 10 12 	or	r2,r2,lr<<0x1
8000289a:	50 22       	stdsp	sp[0x8],r2
8000289c:	f6 02 15 06 	lsl	r2,r11,0x6
800028a0:	40 21       	lddsp	r1,sp[0x8]
800028a2:	f8 02 00 00 	add	r0,r12,r2
800028a6:	2d c0       	sub	r0,-36
800028a8:	81 01       	st.w	r0[0x0],r1
800028aa:	40 01       	lddsp	r1,sp[0x0]
800028ac:	ee 11 00 01 	eorh	r1,0x1
800028b0:	e3 d1 c2 01 	bfextu	r1,r1,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800028b4:	c4 71       	brne	80002942 <tc_configure_interrupts+0xf8>
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800028b6:	ec 19 00 01 	eorl	r9,0x1
800028ba:	e0 6a 00 80 	mov	r10,128
800028be:	58 08       	cp.w	r8,0
800028c0:	f4 08 17 00 	moveq	r8,r10
800028c4:	f9 b8 01 00 	movne	r8,0
800028c8:	12 48       	or	r8,r9
800028ca:	f8 02 00 02 	add	r2,r12,r2
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800028ce:	58 03       	cp.w	r3,0
800028d0:	f9 b3 00 40 	moveq	r3,64
800028d4:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800028d8:	58 04       	cp.w	r4,0
800028da:	f9 b4 00 20 	moveq	r4,32
800028de:	f9 b4 01 00 	movne	r4,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800028e2:	f1 e3 10 03 	or	r3,r8,r3
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800028e6:	58 05       	cp.w	r5,0
800028e8:	f9 b5 00 10 	moveq	r5,16
800028ec:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800028f0:	58 06       	cp.w	r6,0
800028f2:	f9 b6 00 08 	moveq	r6,8
800028f6:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800028fa:	58 07       	cp.w	r7,0
800028fc:	f9 b7 00 04 	moveq	r7,4
80002900:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002904:	58 0e       	cp.w	lr,0
80002906:	f9 be 00 02 	moveq	lr,2
8000290a:	f9 be 01 00 	movne	lr,0
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000290e:	a7 6b       	lsl	r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002910:	2d 82       	sub	r2,-40
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002912:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002914:	e7 e4 10 04 	or	r4,r3,r4
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002918:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000291a:	e9 e5 10 05 	or	r5,r4,r5
8000291e:	eb e6 10 06 	or	r6,r5,r6
80002922:	ed e7 10 07 	or	r7,r6,r7
80002926:	ef ee 10 0e 	or	lr,r7,lr
8000292a:	85 0e       	st.w	r2[0x0],lr
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000292c:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000292e:	58 01       	cp.w	r1,0
80002930:	c0 41       	brne	80002938 <tc_configure_interrupts+0xee>
80002932:	02 9c       	mov	r12,r1

  return 0;
}
80002934:	2f dd       	sub	sp,-12
80002936:	d8 32       	popm	r0-r7,pc
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
  if (global_interrupt_enabled) Enable_global_interrupt();
80002938:	d5 03       	csrf	0x10
8000293a:	2f dd       	sub	sp,-12
8000293c:	d8 3a       	popm	r0-r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000293e:	2f dd       	sub	sp,-12
80002940:	dc 3a       	popm	r0-r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002942:	d3 03       	ssrf	0x10
80002944:	74 0e       	ld.w	lr,r10[0x0]
80002946:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
8000294a:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
8000294e:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
80002952:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
80002956:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
8000295a:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
8000295e:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
80002962:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
80002966:	ca 8b       	rjmp	800028b6 <tc_configure_interrupts+0x6c>

80002968 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002968:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000296a:	f6 08 15 04 	lsl	r8,r11,0x4
8000296e:	14 38       	cp.w	r8,r10
80002970:	e0 8b 00 26 	brhi	800029bc <usart_set_async_baudrate+0x54>
80002974:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002976:	f0 09 16 01 	lsr	r9,r8,0x1
8000297a:	f2 0a 00 39 	add	r9,r9,r10<<0x3
8000297e:	f2 08 0d 08 	divu	r8,r9,r8
80002982:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002984:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002986:	f0 cb 00 01 	sub	r11,r8,1
8000298a:	e0 4b ff fe 	cp.w	r11,65534
8000298e:	e0 8b 00 1b 	brhi	800029c4 <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002992:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002994:	e8 6b 00 00 	mov	r11,524288
80002998:	e4 1a ff f7 	andh	r10,0xfff7
8000299c:	e0 1a fe cf 	andl	r10,0xfecf
800029a0:	59 0e       	cp.w	lr,16
800029a2:	f6 0e 17 10 	movne	lr,r11
800029a6:	f9 be 00 00 	moveq	lr,0
800029aa:	fd ea 10 0a 	or	r10,lr,r10
800029ae:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800029b0:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
800029b4:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800029b8:	99 88       	st.w	r12[0x20],r8
800029ba:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800029bc:	f6 08 15 03 	lsl	r8,r11,0x3
800029c0:	30 8e       	mov	lr,8
800029c2:	cd ab       	rjmp	80002976 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800029c4:	da 0a       	popm	pc,r12=1

800029c6 <usart_spi_selectChip>:


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
800029c6:	e4 68 00 00 	mov	r8,262144
800029ca:	99 08       	st.w	r12[0x0],r8

  return USART_SUCCESS;
}
800029cc:	5e fd       	retal	0

800029ce <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
800029ce:	30 09       	mov	r9,0
800029d0:	c0 58       	rjmp	800029da <usart_spi_unselectChip+0xc>
800029d2:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800029d4:	e0 49 27 10 	cp.w	r9,10000
800029d8:	c0 90       	breq	800029ea <usart_spi_unselectChip+0x1c>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
800029da:	78 58       	ld.w	r8,r12[0x14]
  } while (!usart_tx_empty(usart));
800029dc:	ed b8 00 09 	bld	r8,0x9
800029e0:	cf 91       	brne	800029d2 <usart_spi_unselectChip+0x4>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
800029e2:	e8 68 00 00 	mov	r8,524288
800029e6:	99 08       	st.w	r12[0x0],r8
800029e8:	5e fd       	retal	0
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800029ea:	5e fe       	retal	-1

800029ec <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800029ec:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800029ee:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800029f0:	ed b8 00 01 	bld	r8,0x1
800029f4:	c0 51       	brne	800029fe <usart_putchar+0x12>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800029f6:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800029fa:	99 7b       	st.w	r12[0x1c],r11
800029fc:	5e fd       	retal	0
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800029fe:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002a00:	e0 49 27 10 	cp.w	r9,10000
80002a04:	cf 51       	brne	800029ee <usart_putchar+0x2>
80002a06:	5e fe       	retal	-1

80002a08 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002a08:	17 8a       	ld.ub	r10,r11[0x0]
80002a0a:	58 0a       	cp.w	r10,0
80002a0c:	5e 0c       	reteq	r12
80002a0e:	30 09       	mov	r9,0
80002a10:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002a12:	ed b8 00 01 	bld	r8,0x1
80002a16:	c0 91       	brne	80002a28 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002a18:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002a1c:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002a1e:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002a20:	17 8a       	ld.ub	r10,r11[0x0]
80002a22:	58 0a       	cp.w	r10,0
80002a24:	cf 51       	brne	80002a0e <usart_write_line+0x6>
80002a26:	5e fc       	retal	r12
80002a28:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002a2a:	e0 49 27 10 	cp.w	r9,10000
80002a2e:	cf 11       	brne	80002a10 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002a30:	2f fb       	sub	r11,-1
80002a32:	cf 7b       	rjmp	80002a20 <usart_write_line+0x18>

80002a34 <usart_init_spi_master>:
  return USART_SUCCESS;
}


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
80002a34:	eb cd 40 c0 	pushm	r6-r7,lr
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002a38:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002a3c:	ed b8 00 10 	bld	r8,0x10
80002a40:	c5 71       	brne	80002aee <usart_init_spi_master+0xba>
  usart->idr = 0xFFFFFFFF;
80002a42:	3f f8       	mov	r8,-1
80002a44:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002a46:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002a48:	30 08       	mov	r8,0
80002a4a:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002a4c:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002a4e:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002a50:	ea 68 61 0c 	mov	r8,680204
80002a54:	99 08       	st.w	r12[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a56:	58 0b       	cp.w	r11,0
80002a58:	c4 90       	breq	80002aea <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
80002a5a:	17 c8       	ld.ub	r8,r11[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a5c:	30 49       	mov	r9,4
80002a5e:	f2 08 18 00 	cp.b	r8,r9
80002a62:	e0 88 00 44 	brls	80002aea <usart_init_spi_master+0xb6>
80002a66:	30 99       	mov	r9,9
80002a68:	f2 08 18 00 	cp.b	r8,r9
80002a6c:	e0 8b 00 3f 	brhi	80002aea <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
80002a70:	17 d7       	ld.ub	r7,r11[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a72:	30 3e       	mov	lr,3
80002a74:	0e 96       	mov	r6,r7
80002a76:	fc 07 18 00 	cp.b	r7,lr
80002a7a:	e0 8b 00 38 	brhi	80002aea <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
80002a7e:	17 e6       	ld.ub	r6,r11[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a80:	fc 06 18 00 	cp.b	r6,lr
80002a84:	e0 8b 00 33 	brhi	80002aea <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002a88:	76 0b       	ld.w	r11,r11[0x0]
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
80002a8a:	f6 0e 16 01 	lsr	lr,r11,0x1
80002a8e:	1c 0a       	add	r10,lr
80002a90:	f4 0b 0d 0a 	divu	r10,r10,r11

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a94:	f4 ce 00 04 	sub	lr,r10,4
80002a98:	e0 4e ff fb 	cp.w	lr,65531
80002a9c:	e0 8b 00 27 	brhi	80002aea <usart_init_spi_master+0xb6>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
80002aa0:	78 1e       	ld.w	lr,r12[0x4]
80002aa2:	e0 1e ff cf 	andl	lr,0xffcf
80002aa6:	99 1e       	st.w	r12[0x4],lr
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
80002aa8:	99 8a       	st.w	r12[0x20],r10
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002aaa:	f2 08 18 00 	cp.b	r8,r9
80002aae:	c2 60       	breq	80002afa <usart_init_spi_master+0xc6>
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002ab0:	78 19       	ld.w	r9,r12[0x4]
80002ab2:	20 58       	sub	r8,5
80002ab4:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002ab8:	99 18       	st.w	r12[0x4],r8
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002aba:	ee 08 16 01 	lsr	r8,r7,0x1
80002abe:	af 66       	lsl	r6,0xe
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002ac0:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002ac4:	ed e8 11 06 	or	r6,r6,r8<<0x10
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002ac8:	e0 69 01 0e 	mov	r9,270
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002acc:	78 18       	ld.w	r8,r12[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002ace:	58 07       	cp.w	r7,0
80002ad0:	f9 b7 01 0e 	movne	r7,14
80002ad4:	f2 07 17 00 	moveq	r7,r9
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002ad8:	b3 a8       	sbr	r8,0x12
80002ada:	ed e7 10 07 	or	r7,r6,r7
80002ade:	0e 48       	or	r8,r7
80002ae0:	99 18       	st.w	r12[0x4],r8
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002ae2:	35 08       	mov	r8,80
80002ae4:	99 08       	st.w	r12[0x0],r8
80002ae6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002aea:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002aee:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002af0:	3f f8       	mov	r8,-1
80002af2:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002af4:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002af6:	d5 03       	csrf	0x10
80002af8:	ca 8b       	rjmp	80002a48 <usart_init_spi_master+0x14>
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002afa:	78 18       	ld.w	r8,r12[0x4]
80002afc:	b1 b8       	sbr	r8,0x11
80002afe:	99 18       	st.w	r12[0x4],r8
80002b00:	cd db       	rjmp	80002aba <usart_init_spi_master+0x86>
80002b02:	d7 03       	nop

80002b04 <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002b04:	eb cd 40 e0 	pushm	r5-r7,lr
80002b08:	18 97       	mov	r7,r12
80002b0a:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002b0c:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002b10:	ed b8 00 10 	bld	r8,0x10
80002b14:	c2 e1       	brne	80002b70 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
80002b16:	3f f8       	mov	r8,-1
80002b18:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002b1a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002b1c:	30 08       	mov	r8,0
80002b1e:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
80002b20:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
80002b22:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002b24:	ea 68 61 0c 	mov	r8,680204
80002b28:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b2a:	58 06       	cp.w	r6,0
80002b2c:	c2 00       	breq	80002b6c <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
80002b2e:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b30:	30 49       	mov	r9,4
80002b32:	f2 08 18 00 	cp.b	r8,r9
80002b36:	e0 88 00 1b 	brls	80002b6c <usart_init_rs232+0x68>
80002b3a:	30 95       	mov	r5,9
80002b3c:	ea 08 18 00 	cp.b	r8,r5
80002b40:	e0 8b 00 16 	brhi	80002b6c <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002b44:	0d d9       	ld.ub	r9,r6[0x5]
80002b46:	30 78       	mov	r8,7
80002b48:	f0 09 18 00 	cp.b	r9,r8
80002b4c:	e0 8b 00 10 	brhi	80002b6c <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
80002b50:	8c 39       	ld.sh	r9,r6[0x6]
80002b52:	e0 68 01 01 	mov	r8,257
80002b56:	f0 09 19 00 	cp.h	r9,r8
80002b5a:	e0 8b 00 09 	brhi	80002b6c <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
80002b5e:	ed 39 00 08 	ld.ub	r9,r6[8]
80002b62:	30 38       	mov	r8,3
80002b64:	f0 09 18 00 	cp.b	r9,r8
80002b68:	e0 88 00 0a 	brls	80002b7c <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002b6c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002b70:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002b72:	3f f8       	mov	r8,-1
80002b74:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002b76:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002b78:	d5 03       	csrf	0x10
80002b7a:	cd 1b       	rjmp	80002b1c <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002b7c:	6c 0b       	ld.w	r11,r6[0x0]
80002b7e:	0e 9c       	mov	r12,r7
80002b80:	cf 4e       	rcall	80002968 <usart_set_async_baudrate>
80002b82:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b84:	cf 40       	breq	80002b6c <usart_init_rs232+0x68>
80002b86:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002b88:	ea 08 18 00 	cp.b	r8,r5
80002b8c:	c2 a0       	breq	80002be0 <usart_init_rs232+0xdc>
80002b8e:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002b90:	20 58       	sub	r8,5
80002b92:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002b96:	8f 18       	st.w	r7[0x4],r8
80002b98:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002b9a:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002b9e:	0d d8       	ld.ub	r8,r6[0x5]
80002ba0:	a9 78       	lsl	r8,0x9
80002ba2:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002ba6:	12 48       	or	r8,r9
80002ba8:	8f 18       	st.w	r7[0x4],r8
80002baa:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002bac:	8c 38       	ld.sh	r8,r6[0x6]
80002bae:	f2 08 19 00 	cp.h	r8,r9
80002bb2:	e0 88 00 11 	brls	80002bd4 <usart_init_rs232+0xd0>
80002bb6:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002bb8:	ad b9       	sbr	r9,0xd
80002bba:	8f 19       	st.w	r7[0x4],r9
80002bbc:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002bbe:	20 28       	sub	r8,2
80002bc0:	8f a8       	st.w	r7[0x28],r8
80002bc2:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002bc4:	e0 18 ff f0 	andl	r8,0xfff0
80002bc8:	8f 18       	st.w	r7[0x4],r8
80002bca:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002bcc:	35 08       	mov	r8,80
80002bce:	8f 08       	st.w	r7[0x0],r8
80002bd0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002bd4:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002bd6:	5c 78       	castu.h	r8
80002bd8:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002bdc:	8f 18       	st.w	r7[0x4],r8
80002bde:	cf 2b       	rjmp	80002bc2 <usart_init_rs232+0xbe>
80002be0:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002be2:	b1 b8       	sbr	r8,0x11
80002be4:	8f 18       	st.w	r7[0x4],r8
80002be6:	cd 9b       	rjmp	80002b98 <usart_init_rs232+0x94>

80002be8 <fat_cache_clusterlist_reset>:
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002be8:	3f f9       	mov	r9,-1
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002bea:	e0 68 13 24 	mov	r8,4900
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80002bee:	f1 69 00 15 	st.b	r8[21],r9
80002bf2:	b0 a9       	st.b	r8[0x2],r9
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002bf4:	b0 99       	st.b	r8[0x1],r9
80002bf6:	f1 69 00 16 	st.b	r8[22],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002bfa:	30 09       	mov	r9,0
80002bfc:	f1 69 00 14 	st.b	r8[20],r9
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80002c00:	e0 6a 15 a2 	mov	r10,5538
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002c04:	b4 89       	st.b	r10[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
   }
}
80002c06:	30 19       	mov	r9,1
80002c08:	b0 89       	st.b	r8[0x0],r9
80002c0a:	5e fc       	retal	r12

80002c0c <fat_cache_clusterlist_update_finish>:
80002c0c:	d4 21       	pushm	r4-r7,lr
80002c0e:	e0 68 15 50 	mov	r8,5456
//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80002c12:	e0 6e 15 f8 	mov	lr,5624

//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80002c16:	11 8a       	ld.ub	r10,r8[0x0]
80002c18:	11 95       	ld.ub	r5,r8[0x1]
80002c1a:	e0 69 13 24 	mov	r9,4900
80002c1e:	e0 6b 15 a2 	mov	r11,5538
80002c22:	17 8b       	ld.ub	r11,r11[0x0]
80002c24:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80002c28:	a3 6b       	lsl	r11,0x2
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80002c2a:	f2 0b 00 08 	add	r8,r9,r11
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80002c2e:	f0 cc ff f8 	sub	r12,r8,-8

//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80002c32:	7c 16       	ld.w	r6,lr[0x4]
80002c34:	b0 aa       	st.b	r8[0x2],r10
80002c36:	7c 07       	ld.w	r7,lr[0x0]
80002c38:	78 0e       	ld.w	lr,r12[0x0]
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80002c3a:	fc 05 0d 04 	divu	r4,lr,r5
80002c3e:	f5 d5 c0 08 	bfextu	r10,r5,0x0,0x8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80002c42:	14 1e       	sub	lr,r10
80002c44:	14 17       	sub	r7,r10
80002c46:	99 0e       	st.w	r12[0x0],lr

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002c48:	91 37       	st.w	r8[0xc],r7
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80002c4a:	f4 06 00 0c 	add	r12,r10,r6
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002c4e:	91 4c       	st.w	r8[0x10],r12
80002c50:	13 8a       	ld.ub	r10,r9[0x0]
80002c52:	11 9c       	ld.ub	r12,r8[0x1]
80002c54:	11 88       	ld.ub	r8,r8[0x0]
80002c56:	f0 0a 18 00 	cp.b	r10,r8
80002c5a:	c0 c0       	breq	80002c72 <fat_cache_clusterlist_update_finish+0x66>
80002c5c:	e0 6e 13 24 	mov	lr,4900
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80002c60:	f3 3a 00 14 	ld.ub	r10,r9[20]
80002c64:	f0 0a 18 00 	cp.b	r10,r8
   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002c68:	c0 d0       	breq	80002c82 <fat_cache_clusterlist_update_finish+0x76>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002c6a:	16 09       	add	r9,r11
80002c6c:	30 08       	mov	r8,0
80002c6e:	b2 98       	st.b	r9[0x1],r8
80002c70:	d8 22       	popm	r4-r7,pc
80002c72:	13 9a       	ld.ub	r10,r9[0x1]
80002c74:	f8 0a 18 00 	cp.b	r10,r12
   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002c78:	f7 ba 03 ff 	sublo	r10,-1
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002c7c:	f3 fa 3e 01 	st.bcs	r9[0x1],r10
80002c80:	ce eb       	rjmp	80002c5c <fat_cache_clusterlist_update_finish+0x50>
80002c82:	fd 38 00 15 	ld.ub	r8,lr[21]
80002c86:	f0 0c 18 00 	cp.b	r12,r8
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80002c8a:	f7 b8 0b ff 	subhi	r8,-1
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
}
80002c8e:	fd f8 be 15 	st.bhi	lr[0x15],r8
80002c92:	16 09       	add	r9,r11
80002c94:	30 08       	mov	r8,0
80002c96:	b2 98       	st.b	r9[0x1],r8
80002c98:	d8 22       	popm	r4-r7,pc
80002c9a:	d7 03       	nop

80002c9c <fat_entry_check>:
80002c9c:	e0 68 15 9c 	mov	r8,5532
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002ca0:	90 99       	ld.uh	r9,r8[0x2]
80002ca2:	e0 68 13 50 	mov	r8,4944
80002ca6:	a5 79       	lsl	r9,0x5
80002ca8:	f3 d9 c0 09 	bfextu	r9,r9,0x0,0x9
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();

   u8_first_byte = u8_ptr_entry[0];
   if ( FS_ENTRY_END == u8_first_byte )
80002cac:	10 09       	add	r9,r8
80002cae:	13 88       	ld.ub	r8,r9[0x0]
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80002cb0:	58 08       	cp.w	r8,0
80002cb2:	c1 a0       	breq	80002ce6 <fat_entry_check+0x4a>
80002cb4:	e0 6a 15 a0 	mov	r10,5536
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80002cb8:	30 bb       	mov	r11,11
80002cba:	b4 8b       	st.b	r10[0x0],r11
80002cbc:	3e 5a       	mov	r10,-27
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80002cbe:	f4 08 18 00 	cp.b	r8,r10
80002cc2:	c1 10       	breq	80002ce4 <fat_entry_check+0x48>
80002cc4:	32 ea       	mov	r10,46
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check attribut
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80002cc6:	f4 08 18 00 	cp.b	r8,r10
80002cca:	c0 d0       	breq	80002ce4 <fat_entry_check+0x48>
80002ccc:	f3 38 00 0b 	ld.ub	r8,r9[11]
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80002cd0:	ed b8 00 03 	bld	r8,0x3
80002cd4:	c0 80       	breq	80002ce4 <fat_entry_check+0x48>
   {
      return (FS_DIR == b_type);
80002cd6:	ed b8 00 04 	bld	r8,0x4
80002cda:	5e 1c       	retne	r12
80002cdc:	ec 1c 00 01 	eorl	r12,0x1
   u8_ptr_entry = fat_get_ptr_entry();

   u8_first_byte = u8_ptr_entry[0];
   if ( FS_ENTRY_END == u8_first_byte )
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80002ce0:	5c 5c       	castu.b	r12
80002ce2:	5e fc       	retal	r12
80002ce4:	5e fd       	retal	0
80002ce6:	10 9c       	mov	r12,r8
      return false;
80002ce8:	30 a9       	mov	r9,10
80002cea:	e0 68 15 a0 	mov	r8,5536
80002cee:	b0 89       	st.b	r8[0x0],r9
80002cf0:	5e fc       	retal	r12
80002cf2:	d7 03       	nop

80002cf4 <fat_get_entry_info>:
80002cf4:	eb cd 40 c0 	pushm	r6-r7,lr
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002cf8:	e0 69 15 9c 	mov	r9,5532
80002cfc:	92 9b       	ld.uh	r11,r9[0x2]
80002cfe:	e0 69 13 50 	mov	r9,4944
80002d02:	a5 7b       	lsl	r11,0x5
80002d04:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
   ptr_entry += (26-20);
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];

   // Get the size of file
   ptr_entry += (28-26);
80002d08:	12 0b       	add	r11,r9
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
80002d0a:	f6 c9 ff e4 	sub	r9,r11,-28
   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80002d0e:	13 be       	ld.ub	lr,r9[0x3]
80002d10:	e0 6c 13 10 	mov	r12,4880
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];

   // Get the size of file
   ptr_entry += (28-26);
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80002d14:	f6 c7 ff ec 	sub	r7,r11,-20
   fs_g_nav_entry.u8_attr = ptr_entry[0];

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80002d18:	f8 c8 ff f8 	sub	r8,r12,-8
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80002d1c:	b0 8e       	st.b	r8[0x0],lr
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80002d1e:	0f 9e       	ld.ub	lr,r7[0x1]
   ptr_entry += (26-20);
80002d20:	f8 ca ff fc 	sub	r10,r12,-4
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80002d24:	b4 8e       	st.b	r10[0x0],lr
80002d26:	f6 ce ff e6 	sub	lr,r11,-26

   ptr_entry = fat_get_ptr_entry();

   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
80002d2a:	1d 96       	ld.ub	r6,lr[0x1]
80002d2c:	b4 a6       	st.b	r10[0x2],r6

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80002d2e:	f7 3b 00 0b 	ld.ub	r11,r11[11]
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
   ptr_entry += (26-20);
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80002d32:	b8 ab       	st.b	r12[0x2],r11
80002d34:	0f 8b       	ld.ub	r11,r7[0x0]
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];

   // Get the size of file
   ptr_entry += (28-26);
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80002d36:	b4 9b       	st.b	r10[0x1],r11
80002d38:	1d 8b       	ld.ub	r11,lr[0x0]
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80002d3a:	b4 bb       	st.b	r10[0x3],r11
80002d3c:	13 8a       	ld.ub	r10,r9[0x0]
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
80002d3e:	b0 ba       	st.b	r8[0x3],r10
80002d40:	13 9a       	ld.ub	r10,r9[0x1]
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
}
80002d42:	b0 aa       	st.b	r8[0x2],r10
80002d44:	13 a9       	ld.ub	r9,r9[0x2]
80002d46:	b0 99       	st.b	r8[0x1],r9
80002d48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80002d4c <fat_entry_is_dir>:
80002d4c:	e0 68 15 a0 	mov	r8,5536
80002d50:	30 d9       	mov	r9,13
80002d52:	b0 89       	st.b	r8[0x0],r9
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80002d54:	e0 68 13 10 	mov	r8,4880
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
80002d58:	11 ac       	ld.ub	r12,r8[0x2]
80002d5a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002d5e:	5e fc       	retal	r12

80002d60 <fat_clear_entry_info_and_ptr>:
80002d60:	3f f9       	mov	r9,-1
80002d62:	e0 68 15 50 	mov	r8,5456
//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80002d66:	e0 6a 15 9c 	mov	r10,5532

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
80002d6a:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
   if( !fs_g_nav.b_mode_nav_single )
80002d6e:	b4 19       	st.h	r10[0x2],r9
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80002d70:	f1 39 00 2d 	ld.ub	r9,r8[45]
80002d74:	58 09       	cp.w	r9,0
   }
   fs_g_nav_entry.u8_attr     = 0;
80002d76:	f1 f9 0e 2c 	st.beq	r8[0x2c],r9
   fs_g_nav_entry.u32_cluster = 0;
   fs_g_nav_entry.u32_size    = 0;
   Fat_file_close();
80002d7a:	e0 68 13 10 	mov	r8,4880
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
   }
   fs_g_nav_entry.u8_attr     = 0;
   fs_g_nav_entry.u32_cluster = 0;
   fs_g_nav_entry.u32_size    = 0;
80002d7e:	30 09       	mov	r9,0
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
   if( !fs_g_nav.b_mode_nav_single )
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
   }
   fs_g_nav_entry.u8_attr     = 0;
80002d80:	b0 89       	st.b	r8[0x0],r9
   fs_g_nav_entry.u32_cluster = 0;
   fs_g_nav_entry.u32_size    = 0;
   Fat_file_close();
}
80002d82:	91 19       	st.w	r8[0x4],r9
80002d84:	91 29       	st.w	r8[0x8],r9
80002d86:	b0 a9       	st.b	r8[0x2],r9
80002d88:	5e fc       	retal	r12
80002d8a:	d7 03       	nop

80002d8c <fat_write_entry_file>:
80002d8c:	e0 6a 13 50 	mov	r10,4944
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002d90:	e0 69 13 10 	mov	r9,4880
80002d94:	e0 68 15 9c 	mov	r8,5532
80002d98:	90 98       	ld.uh	r8,r8[0x2]
80002d9a:	a5 78       	lsl	r8,0x5
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the attribut
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
80002d9c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002da0:	14 08       	add	r8,r10

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80002da2:	13 aa       	ld.ub	r10,r9[0x2]
80002da4:	f1 6a 00 0b 	st.b	r8[11],r10
   //! Write the attribut
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80002da8:	f2 ca ff fc 	sub	r10,r9,-4
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80002dac:	15 9c       	ld.ub	r12,r10[0x1]
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
80002dae:	f0 cb ff ec 	sub	r11,r8,-20
   ptr_entry += (26-20);
80002db2:	b6 8c       	st.b	r11[0x0],r12
80002db4:	15 8c       	ld.ub	r12,r10[0x0]
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
80002db6:	b6 9c       	st.b	r11[0x1],r12
80002db8:	f0 cb ff e6 	sub	r11,r8,-26

   //! Write the size of file
   ptr_entry += (28-26);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80002dbc:	15 ac       	ld.ub	r12,r10[0x2]
   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
   ptr_entry += (26-20);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80002dbe:	b6 9c       	st.b	r11[0x1],r12
   //! Write the size of file
   ptr_entry += (28-26);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
80002dc0:	15 ba       	ld.ub	r10,r10[0x3]
   ptr_entry += (26-20);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);

   //! Write the size of file
   ptr_entry += (28-26);
80002dc2:	2f 89       	sub	r9,-8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
80002dc4:	b6 8a       	st.b	r11[0x0],r10

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80002dc6:	13 8a       	ld.ub	r10,r9[0x0]
80002dc8:	2e 48       	sub	r8,-28
80002dca:	b0 ba       	st.b	r8[0x3],r10
80002dcc:	e0 6a 15 d8 	mov	r10,5592
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);

   //! Write the size of file
   ptr_entry += (28-26);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80002dd0:	30 1b       	mov	r11,1
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80002dd2:	f5 6b 00 08 	st.b	r10[8],r11
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
80002dd6:	13 ba       	ld.ub	r10,r9[0x3]
80002dd8:	b0 8a       	st.b	r8[0x0],r10
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
}
80002dda:	13 aa       	ld.ub	r10,r9[0x2]
80002ddc:	b0 9a       	st.b	r8[0x1],r10
80002dde:	13 99       	ld.ub	r9,r9[0x1]
80002de0:	b0 a9       	st.b	r8[0x2],r9
80002de2:	5e fc       	retal	r12

80002de4 <fat_entry_shortname>:
80002de4:	d4 31       	pushm	r0-r7,lr
80002de6:	20 1d       	sub	sp,4
80002de8:	e0 68 15 a0 	mov	r8,5536
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80002dec:	31 69       	mov	r9,22
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002dee:	b0 89       	st.b	r8[0x0],r9
80002df0:	e0 68 15 9c 	mov	r8,5532
80002df4:	90 9e       	ld.uh	lr,r8[0x2]
80002df6:	e0 68 13 50 	mov	r8,4944
80002dfa:	a5 7e       	lsl	lr,0x5
80002dfc:	fd de c0 09 	bfextu	lr,lr,0x0,0x9
80002e00:	10 0e       	add	lr,r8
80002e02:	58 0a       	cp.w	r10,0
80002e04:	c5 b1       	brne	80002eba <fat_entry_shortname+0xd6>
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002e06:	30 18       	mov	r8,1
80002e08:	14 99       	mov	r9,r10
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002e0a:	50 08       	stdsp	sp[0x0],r8
80002e0c:	30 b6       	mov	r6,11
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80002e0e:	19 8b       	ld.ub	r11,r12[0x0]
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80002e10:	30 85       	mov	r5,8
80002e12:	32 04       	mov	r4,32
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002e14:	32 a7       	mov	r7,42
80002e16:	32 f0       	mov	r0,47
80002e18:	35 c1       	mov	r1,92
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80002e1a:	ec 0a 18 00 	cp.b	r10,r6
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002e1e:	c2 40       	breq	80002e66 <fat_entry_shortname+0x82>
80002e20:	fc 0a 07 08 	ld.ub	r8,lr[r10]
80002e24:	ea 0a 18 00 	cp.b	r10,r5
80002e28:	c3 70       	breq	80002e96 <fat_entry_shortname+0xb2>
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80002e2a:	e8 08 18 00 	cp.b	r8,r4
80002e2e:	c1 80       	breq	80002e5e <fat_entry_shortname+0x7a>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80002e30:	ee 0b 18 00 	cp.b	r11,r7
80002e34:	c1 20       	breq	80002e58 <fat_entry_shortname+0x74>
80002e36:	58 08       	cp.w	r8,0
80002e38:	c1 91       	brne	80002e6a <fat_entry_shortname+0x86>
80002e3a:	e0 0b 18 00 	cp.b	r11,r0
80002e3e:	5f 12       	srne	r2
80002e40:	e2 0b 18 00 	cp.b	r11,r1
80002e44:	5f 13       	srne	r3
80002e46:	06 62       	and	r2,r3

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80002e48:	f0 02 18 00 	cp.b	r2,r8
      }

      // For each characters
      if (0 == u8_entry_char)
      {
         if( g_b_string_length )
80002e4c:	c0 f1       	brne	80002e6a <fat_entry_shortname+0x86>
80002e4e:	e0 68 15 a1 	mov	r8,5537
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
   }
}
80002e52:	11 83       	ld.ub	r3,r8[0x0]
80002e54:	58 03       	cp.w	r3,0
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80002e56:	c7 51       	brne	80002f40 <fat_entry_shortname+0x15c>
80002e58:	30 1c       	mov	r12,1
80002e5a:	2f fd       	sub	sp,-4
80002e5c:	d8 32       	popm	r0-r7,pc
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002e5e:	ea 0a 18 00 	cp.b	r10,r5
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
80002e62:	e0 88 00 1d 	brls	80002e9c <fat_entry_shortname+0xb8>
80002e66:	30 08       	mov	r8,0
80002e68:	ce 4b       	rjmp	80002e30 <fat_entry_shortname+0x4c>
80002e6a:	f0 0b 18 00 	cp.b	r11,r8
80002e6e:	c2 10       	breq	80002eb0 <fat_entry_shortname+0xcc>
80002e70:	f0 c3 ff e0 	sub	r3,r8,-32
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
80002e74:	06 3b       	cp.w	r11,r3
80002e76:	c6 91       	brne	80002f48 <fat_entry_shortname+0x164>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80002e78:	e0 63 15 a1 	mov	r3,5537
80002e7c:	07 83       	ld.ub	r3,r3[0x0]
80002e7e:	58 08       	cp.w	r8,0
80002e80:	ce a0       	breq	80002e54 <fat_entry_shortname+0x70>
      }
      u8_pos_name++;
80002e82:	58 03       	cp.w	r3,0
      u8_pos_entry++;
80002e84:	f7 bc 00 ff 	subeq	r12,-1
80002e88:	f9 fb 08 00 	ld.ubeq	r11,r12[0x0]
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002e8c:	2f f9       	sub	r9,-1
80002e8e:	2f fa       	sub	r10,-1
80002e90:	5c 59       	castu.b	r9
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002e92:	5c 5a       	castu.b	r10
80002e94:	cc 3b       	rjmp	80002e1a <fat_entry_shortname+0x36>
80002e96:	40 03       	lddsp	r3,sp[0x0]
80002e98:	58 03       	cp.w	r3,0
80002e9a:	cc 80       	breq	80002e2a <fat_entry_shortname+0x46>
80002e9c:	fd 38 00 08 	ld.ub	r8,lr[8]
80002ea0:	e8 08 18 00 	cp.b	r8,r4
80002ea4:	ce 10       	breq	80002e66 <fat_entry_shortname+0x82>
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
80002ea6:	30 03       	mov	r3,0
80002ea8:	30 7a       	mov	r10,7
80002eaa:	32 e8       	mov	r8,46
80002eac:	50 03       	stdsp	sp[0x0],r3
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
80002eae:	cc 1b       	rjmp	80002e30 <fat_entry_shortname+0x4c>

      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            if(u8_pos_name >= (u8_size_max-1))
80002eb0:	e0 68 15 a1 	mov	r8,5537
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
80002eb4:	11 83       	ld.ub	r3,r8[0x0]
80002eb6:	16 98       	mov	r8,r11
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002eb8:	ce 3b       	rjmp	80002e7e <fat_entry_shortname+0x9a>
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002eba:	30 08       	mov	r8,0
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002ebc:	20 1b       	sub	r11,1
         if( !g_b_string_length )
         {
            if(u8_pos_name >= (u8_size_max-1))
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80002ebe:	30 12       	mov	r2,1
80002ec0:	10 99       	mov	r9,r8
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80002ec2:	e0 67 15 a1 	mov	r7,5537
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002ec6:	30 b6       	mov	r6,11
80002ec8:	30 85       	mov	r5,8
80002eca:	32 04       	mov	r4,32
80002ecc:	31 91       	mov	r1,25
80002ece:	c1 a8       	rjmp	80002f02 <fat_entry_shortname+0x11e>
80002ed0:	fc 08 07 0a 	ld.ub	r10,lr[r8]
         }
      }

      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80002ed4:	ea 08 18 00 	cp.b	r8,r5
         {
            if(u8_pos_name >= (u8_size_max-1))
80002ed8:	c1 a0       	breq	80002f0c <fat_entry_shortname+0x128>
80002eda:	e8 0a 18 00 	cp.b	r10,r4

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80002ede:	c2 20       	breq	80002f22 <fat_entry_shortname+0x13e>
80002ee0:	0f 83       	ld.ub	r3,r7[0x0]
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
80002ee2:	58 03       	cp.w	r3,0
80002ee4:	c0 61       	brne	80002ef0 <fat_entry_shortname+0x10c>
      }
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80002ee6:	16 39       	cp.w	r9,r11
      u8_pos_entry++;
80002ee8:	c2 35       	brlt	80002f2e <fat_entry_shortname+0x14a>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80002eea:	06 9a       	mov	r10,r3
80002eec:	b8 8a       	st.b	r12[0x0],r10
80002eee:	0f 83       	ld.ub	r3,r7[0x0]
      }
      u8_pos_name++;
80002ef0:	58 0a       	cp.w	r10,0
      u8_pos_entry++;
80002ef2:	cb 10       	breq	80002e54 <fat_entry_shortname+0x70>
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002ef4:	2f f9       	sub	r9,-1
80002ef6:	2f f8       	sub	r8,-1
80002ef8:	58 03       	cp.w	r3,0
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002efa:	f7 bc 00 ff 	subeq	r12,-1
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002efe:	5c 59       	castu.b	r9
80002f00:	5c 58       	castu.b	r8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002f02:	ec 08 18 00 	cp.b	r8,r6
80002f06:	ce 51       	brne	80002ed0 <fat_entry_shortname+0xec>
80002f08:	30 0a       	mov	r10,0
80002f0a:	ce bb       	rjmp	80002ee0 <fat_entry_shortname+0xfc>
80002f0c:	58 02       	cp.w	r2,0
80002f0e:	ce 60       	breq	80002eda <fat_entry_shortname+0xf6>
80002f10:	fd 3a 00 08 	ld.ub	r10,lr[8]
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80002f14:	e8 0a 18 00 	cp.b	r10,r4
80002f18:	cf 80       	breq	80002f08 <fat_entry_shortname+0x124>
80002f1a:	30 78       	mov	r8,7
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002f1c:	32 ea       	mov	r10,46
80002f1e:	30 02       	mov	r2,0
         if( !g_b_string_length )
         {
            if(u8_pos_name >= (u8_size_max-1))
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80002f20:	ce 0b       	rjmp	80002ee0 <fat_entry_shortname+0xfc>
80002f22:	ea 08 18 00 	cp.b	r8,r5
80002f26:	fe 98 ff f5 	brls	80002f10 <fat_entry_shortname+0x12c>
80002f2a:	30 0a       	mov	r10,0
               u8_entry_char += ('a'-'A');                           // display short name in down case
80002f2c:	cd ab       	rjmp	80002ee0 <fat_entry_shortname+0xfc>
80002f2e:	f4 c3 00 41 	sub	r3,r10,65
      // For each characters
      if (0 == u8_entry_char)
      {
         if( g_b_string_length )
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80002f32:	e2 03 18 00 	cp.b	r3,r1
80002f36:	fe 9b ff db 	brhi	80002eec <fat_entry_shortname+0x108>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
   }
80002f3a:	2e 0a       	sub	r10,-32
80002f3c:	5c 5a       	castu.b	r10
80002f3e:	cd 7b       	rjmp	80002eec <fat_entry_shortname+0x108>
80002f40:	2f f9       	sub	r9,-1
80002f42:	b8 09       	st.h	r12[0x0],r9
80002f44:	2f fd       	sub	sp,-4
80002f46:	da 3a       	popm	r0-r7,pc,r12=1
80002f48:	30 0c       	mov	r12,0
80002f4a:	c8 8b       	rjmp	80002e5a <fat_entry_shortname+0x76>

80002f4c <fat_entry_longname>:
80002f4c:	d4 31       	pushm	r0-r7,lr
80002f4e:	20 3d       	sub	sp,12
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002f50:	e0 6e 13 50 	mov	lr,4944
80002f54:	e0 68 15 9c 	mov	r8,5532
80002f58:	90 98       	ld.uh	r8,r8[0x2]
80002f5a:	a5 78       	lsl	r8,0x5
80002f5c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002f60:	1c 08       	add	r8,lr
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80002f62:	3e 5e       	mov	lr,-27
80002f64:	11 87       	ld.ub	r7,r8[0x0]
80002f66:	fc 07 18 00 	cp.b	r7,lr
80002f6a:	5f 05       	sreq	r5
80002f6c:	30 0e       	mov	lr,0
80002f6e:	fc 07 18 00 	cp.b	r7,lr
80002f72:	5f 06       	sreq	r6
80002f74:	eb e6 10 06 	or	r6,r5,r6
80002f78:	fc 06 18 00 	cp.b	r6,lr
80002f7c:	c0 71       	brne	80002f8a <fat_entry_longname+0x3e>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80002f7e:	f1 36 00 0b 	ld.ub	r6,r8[11]
80002f82:	30 fe       	mov	lr,15
80002f84:	fc 06 18 00 	cp.b	r6,lr
80002f88:	c0 80       	breq	80002f98 <fat_entry_longname+0x4c>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80002f8a:	30 b9       	mov	r9,11
80002f8c:	e0 68 15 a0 	mov	r8,5536
80002f90:	30 0c       	mov	r12,0
80002f92:	b0 89       	st.b	r8[0x0],r9
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
   }
}
80002f94:	2f dd       	sub	sp,-12
80002f96:	d8 32       	popm	r0-r7,pc
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
      return false;
   }

   if( g_b_string_length )
80002f98:	e0 6e 15 a1 	mov	lr,5537
80002f9c:	1d 82       	ld.ub	r2,lr[0x0]
80002f9e:	58 02       	cp.w	r2,0
80002fa0:	c5 21       	brne	80003044 <fat_entry_longname+0xf8>
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
         return false;                          // Other entry long name
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
80002fa2:	2f f8       	sub	r8,-1
80002fa4:	fa c7 ff f6 	sub	r7,sp,-10
80002fa8:	fa c6 ff f5 	sub	r6,sp,-11
80002fac:	58 0a       	cp.w	r10,0
80002fae:	c5 41       	brne	80003056 <fat_entry_longname+0x10a>
80002fb0:	58 09       	cp.w	r9,0
80002fb2:	c7 c1       	brne	800030aa <fat_entry_longname+0x15e>
80002fb4:	19 8b       	ld.ub	r11,r12[0x0]
80002fb6:	14 99       	mov	r9,r10
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80002fb8:	32 a4       	mov	r4,42
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80002fba:	30 43       	mov	r3,4
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80002fbc:	30 a1       	mov	r1,10
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80002fbe:	50 1a       	stdsp	sp[0x4],r10
80002fc0:	c1 38       	rjmp	80002fe6 <fat_entry_longname+0x9a>
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80002fc2:	e2 09 18 00 	cp.b	r9,r1
80002fc6:	e0 80 00 e1 	breq	80003188 <fat_entry_longname+0x23c>
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80002fca:	30 c0       	mov	r0,12
80002fcc:	e0 09 18 00 	cp.b	r9,r0
80002fd0:	e0 80 00 b5 	breq	8000313a <fat_entry_longname+0x1ee>
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
80002fd4:	1d 82       	ld.ub	r2,lr[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80002fd6:	2f f9       	sub	r9,-1
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80002fd8:	58 02       	cp.w	r2,0
80002fda:	f7 bc 00 ff 	subeq	r12,-1
80002fde:	f9 fb 08 00 	ld.ubeq	r11,r12[0x0]
      }
      u8_pos_name++;
      ptr_entry+=2;
80002fe2:	2f e8       	sub	r8,-2

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80002fe4:	5c 59       	castu.b	r9
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80002fe6:	11 8a       	ld.ub	r10,r8[0x0]
80002fe8:	ac 8a       	st.b	r6[0x0],r10
      MSB(u16_unicode_entry) = ptr_entry[1];
80002fea:	11 9a       	ld.ub	r10,r8[0x1]
80002fec:	ae 8a       	st.b	r7[0x0],r10
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80002fee:	e8 0b 19 00 	cp.h	r11,r4
80002ff2:	e0 80 00 d9 	breq	800031a4 <fat_entry_longname+0x258>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80002ff6:	9a 5a       	ld.sh	r10,sp[0xa]
80002ff8:	58 0a       	cp.w	r10,0
80002ffa:	c0 e1       	brne	80003016 <fat_entry_longname+0xca>
80002ffc:	32 f5       	mov	r5,47
80002ffe:	ea 0b 19 00 	cp.h	r11,r5
80003002:	5f 10       	srne	r0
80003004:	35 c5       	mov	r5,92
80003006:	ea 0b 19 00 	cp.h	r11,r5
8000300a:	5f 15       	srne	r5
8000300c:	0a 60       	and	r0,r5
8000300e:	14 95       	mov	r5,r10
80003010:	f4 00 18 00 	cp.b	r0,r10
80003014:	c6 a0       	breq	800030e8 <fat_entry_longname+0x19c>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80003016:	e5 da c0 10 	bfextu	r2,r10,0x0,0x10
8000301a:	eb db c0 10 	bfextu	r5,r11,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000301e:	e4 c0 ff e0 	sub	r0,r2,-32
80003022:	00 35       	cp.w	r5,r0
80003024:	c0 80       	breq	80003034 <fat_entry_longname+0xe8>
80003026:	22 02       	sub	r2,32
80003028:	04 35       	cp.w	r5,r2
8000302a:	c0 50       	breq	80003034 <fat_entry_longname+0xe8>
8000302c:	f4 0b 19 00 	cp.h	r11,r10
80003030:	e0 81 00 d4 	brne	800031d8 <fat_entry_longname+0x28c>
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80003034:	58 0a       	cp.w	r10,0
80003036:	e0 80 00 db 	breq	800031ec <fat_entry_longname+0x2a0>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000303a:	e6 09 18 00 	cp.b	r9,r3
8000303e:	cc 21       	brne	80002fc2 <fat_entry_longname+0x76>
         ptr_entry += 3;                        // Go to second character
80003040:	2f d8       	sub	r8,-3
80003042:	cc 9b       	rjmp	80002fd4 <fat_entry_longname+0x88>
      return false;
   }

   if( g_b_string_length )
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
80003044:	e2 17 00 40 	andl	r7,0x40,COH
80003048:	ca d1       	brne	80002fa2 <fat_entry_longname+0x56>
      if( 12 == u8_pos_name )
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000304a:	31 09       	mov	r9,16
8000304c:	e0 68 15 a0 	mov	r8,5536
80003050:	0e 9c       	mov	r12,r7
            return false;                       // Other long name entry is present
80003052:	b0 89       	st.b	r8[0x0],r9
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
80003054:	ca 0b       	rjmp	80002f94 <fat_entry_longname+0x48>
80003056:	58 09       	cp.w	r9,0
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80003058:	c4 e0       	breq	800030f4 <fat_entry_longname+0x1a8>
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
8000305a:	20 1b       	sub	r11,1
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000305c:	30 09       	mov	r9,0
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
8000305e:	30 44       	mov	r4,4
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80003060:	30 a3       	mov	r3,10
80003062:	30 c1       	mov	r1,12
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80003064:	c1 b8       	rjmp	8000309a <fat_entry_longname+0x14e>
80003066:	16 39       	cp.w	r9,r11
80003068:	e0 84 00 be 	brge	800031e4 <fat_entry_longname+0x298>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
8000306c:	9a 55       	ld.sh	r5,sp[0xa]
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
8000306e:	b8 85       	st.b	r12[0x0],r5
80003070:	58 05       	cp.w	r5,0
80003072:	e0 80 00 bd 	breq	800031ec <fat_entry_longname+0x2a0>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003076:	e8 09 18 00 	cp.b	r9,r4
8000307a:	e0 80 00 8f 	breq	80003198 <fat_entry_longname+0x24c>
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
8000307e:	e6 09 18 00 	cp.b	r9,r3
80003082:	e0 80 00 89 	breq	80003194 <fat_entry_longname+0x248>
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80003086:	e2 09 18 00 	cp.b	r9,r1
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
8000308a:	c5 90       	breq	8000313c <fat_entry_longname+0x1f0>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
8000308c:	1d 82       	ld.ub	r2,lr[0x0]
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
8000308e:	2f f9       	sub	r9,-1
80003090:	58 02       	cp.w	r2,0
80003092:	f7 bc 00 ff 	subeq	r12,-1
      }
      u8_pos_name++;
80003096:	2f e8       	sub	r8,-2
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003098:	5c 59       	castu.b	r9
8000309a:	11 85       	ld.ub	r5,r8[0x0]
      MSB(u16_unicode_entry) = ptr_entry[1];
8000309c:	ac 85       	st.b	r6[0x0],r5
8000309e:	11 95       	ld.ub	r5,r8[0x1]
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800030a0:	ae 85       	st.b	r7[0x0],r5
800030a2:	58 02       	cp.w	r2,0
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
800030a4:	ce 10       	breq	80003066 <fat_entry_longname+0x11a>
800030a6:	9a 55       	ld.sh	r5,sp[0xa]
800030a8:	ce 4b       	rjmp	80003070 <fat_entry_longname+0x124>
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
800030aa:	19 8b       	ld.ub	r11,r12[0x0]
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800030ac:	14 99       	mov	r9,r10
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800030ae:	32 a4       	mov	r4,42
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
800030b0:	30 43       	mov	r3,4
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
800030b2:	30 a1       	mov	r1,10
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800030b4:	50 0a       	stdsp	sp[0x0],r10
800030b6:	11 85       	ld.ub	r5,r8[0x0]
      MSB(u16_unicode_entry) = ptr_entry[1];
800030b8:	ac 85       	st.b	r6[0x0],r5
800030ba:	11 95       	ld.ub	r5,r8[0x1]
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800030bc:	ae 85       	st.b	r7[0x0],r5
800030be:	e8 0b 19 00 	cp.h	r11,r4
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800030c2:	c7 10       	breq	800031a4 <fat_entry_longname+0x258>
800030c4:	9a 55       	ld.sh	r5,sp[0xa]
800030c6:	58 05       	cp.w	r5,0
800030c8:	c4 71       	brne	80003156 <fat_entry_longname+0x20a>
800030ca:	32 fa       	mov	r10,47
800030cc:	f4 0b 19 00 	cp.h	r11,r10
800030d0:	5f 10       	srne	r0
800030d2:	35 ca       	mov	r10,92
800030d4:	50 10       	stdsp	sp[0x4],r0
800030d6:	f4 0b 19 00 	cp.h	r11,r10
800030da:	5f 10       	srne	r0
800030dc:	40 1a       	lddsp	r10,sp[0x4]
800030de:	00 6a       	and	r10,r0
800030e0:	0a 90       	mov	r0,r5
800030e2:	ea 0a 18 00 	cp.b	r10,r5
         }
      }

      if( 0 == u16_unicode_entry)
      {
         if( g_b_string_length )
800030e6:	c3 81       	brne	80003156 <fat_entry_longname+0x20a>
800030e8:	58 02       	cp.w	r2,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
800030ea:	c5 d0       	breq	800031a4 <fat_entry_longname+0x258>
800030ec:	2f f9       	sub	r9,-1
800030ee:	b8 09       	st.h	r12[0x0],r9
800030f0:	30 1c       	mov	r12,1
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800030f2:	c5 1b       	rjmp	80002f94 <fat_entry_longname+0x48>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800030f4:	20 1b       	sub	r11,1
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
800030f6:	30 44       	mov	r4,4
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
800030f8:	30 a3       	mov	r3,10
800030fa:	30 c1       	mov	r1,12
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800030fc:	c1 48       	rjmp	80003124 <fat_entry_longname+0x1d8>
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800030fe:	9a 55       	ld.sh	r5,sp[0xa]
80003100:	58 05       	cp.w	r5,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003102:	c7 50       	breq	800031ec <fat_entry_longname+0x2a0>
80003104:	e8 09 18 00 	cp.b	r9,r4
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80003108:	c4 40       	breq	80003190 <fat_entry_longname+0x244>
8000310a:	e6 09 18 00 	cp.b	r9,r3
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
8000310e:	c3 f0       	breq	8000318c <fat_entry_longname+0x240>
80003110:	e2 09 18 00 	cp.b	r9,r1
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
80003114:	c1 40       	breq	8000313c <fat_entry_longname+0x1f0>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80003116:	1d 82       	ld.ub	r2,lr[0x0]
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80003118:	2f f9       	sub	r9,-1
8000311a:	58 02       	cp.w	r2,0
8000311c:	f7 bc 00 ff 	subeq	r12,-1
      }
      u8_pos_name++;
80003120:	2f e8       	sub	r8,-2
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003122:	5c 59       	castu.b	r9
80003124:	11 85       	ld.ub	r5,r8[0x0]
      MSB(u16_unicode_entry) = ptr_entry[1];
80003126:	ac 85       	st.b	r6[0x0],r5
80003128:	11 95       	ld.ub	r5,r8[0x1]
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
8000312a:	ae 85       	st.b	r7[0x0],r5
8000312c:	58 02       	cp.w	r2,0
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000312e:	ce 81       	brne	800030fe <fat_entry_longname+0x1b2>
80003130:	16 39       	cp.w	r9,r11
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
80003132:	c5 94       	brge	800031e4 <fat_entry_longname+0x298>
80003134:	9a 55       	ld.sh	r5,sp[0xa]
80003136:	b8 85       	st.b	r12[0x0],r5
80003138:	ce 4b       	rjmp	80003100 <fat_entry_longname+0x1b4>
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000313a:	40 1a       	lddsp	r10,sp[0x4]
8000313c:	f1 37 ff e2 	ld.ub	r7,r8[-30]
80003140:	e2 17 00 40 	andl	r7,0x40,COH
            return false;                       // Other long name entry is present
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
80003144:	c8 30       	breq	8000304a <fat_entry_longname+0xfe>
80003146:	58 0a       	cp.w	r10,0
80003148:	c3 00       	breq	800031a8 <fat_entry_longname+0x25c>
8000314a:	1d 88       	ld.ub	r8,lr[0x0]
8000314c:	58 08       	cp.w	r8,0
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000314e:	c4 11       	brne	800031d0 <fat_entry_longname+0x284>
80003150:	b8 98       	st.b	r12[0x1],r8
               }
               return true;
80003152:	30 1c       	mov	r12,1
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003154:	c2 0b       	rjmp	80002f94 <fat_entry_longname+0x48>
80003156:	ea 0b 19 00 	cp.h	r11,r5
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
8000315a:	c3 f1       	brne	800031d8 <fat_entry_longname+0x28c>
8000315c:	58 05       	cp.w	r5,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000315e:	c4 70       	breq	800031ec <fat_entry_longname+0x2a0>
80003160:	e6 09 18 00 	cp.b	r9,r3
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80003164:	c1 e0       	breq	800031a0 <fat_entry_longname+0x254>
80003166:	e2 09 18 00 	cp.b	r9,r1
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
8000316a:	c1 90       	breq	8000319c <fat_entry_longname+0x250>
8000316c:	30 c5       	mov	r5,12
8000316e:	ea 09 18 00 	cp.b	r9,r5
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
80003172:	c2 d0       	breq	800031cc <fat_entry_longname+0x280>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80003174:	1d 82       	ld.ub	r2,lr[0x0]
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80003176:	2f f9       	sub	r9,-1
80003178:	58 02       	cp.w	r2,0
8000317a:	f7 bc 00 ff 	subeq	r12,-1
8000317e:	f9 fb 08 00 	ld.ubeq	r11,r12[0x0]
      }
      u8_pos_name++;
80003182:	2f e8       	sub	r8,-2
80003184:	5c 59       	castu.b	r9
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
         ptr_entry += 2;                        // Go to third character
80003186:	c9 8b       	rjmp	800030b6 <fat_entry_longname+0x16a>
80003188:	2f e8       	sub	r8,-2
8000318a:	c2 5b       	rjmp	80002fd4 <fat_entry_longname+0x88>
8000318c:	2f e8       	sub	r8,-2
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character
8000318e:	cc 4b       	rjmp	80003116 <fat_entry_longname+0x1ca>
80003190:	2f d8       	sub	r8,-3

      if( 10 == u8_pos_name )
         ptr_entry += 2;                        // Go to third character
80003192:	cc 2b       	rjmp	80003116 <fat_entry_longname+0x1ca>
80003194:	2f e8       	sub	r8,-2
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character
80003196:	c7 bb       	rjmp	8000308c <fat_entry_longname+0x140>
80003198:	2f d8       	sub	r8,-3

      if( 10 == u8_pos_name )
         ptr_entry += 2;                        // Go to third character
8000319a:	c7 9b       	rjmp	8000308c <fat_entry_longname+0x140>
8000319c:	2f e8       	sub	r8,-2
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character
8000319e:	ce bb       	rjmp	80003174 <fat_entry_longname+0x228>
800031a0:	2f d8       	sub	r8,-3
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
   }
800031a2:	ce 9b       	rjmp	80003174 <fat_entry_longname+0x228>
800031a4:	30 1c       	mov	r12,1
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
               return true;
800031a6:	cf 7a       	rjmp	80002f94 <fat_entry_longname+0x48>
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
800031a8:	19 98       	ld.ub	r8,r12[0x1]
800031aa:	35 cb       	mov	r11,92
800031ac:	f4 08 19 00 	cp.h	r8,r10
800031b0:	5f 09       	sreq	r9
800031b2:	f6 08 19 00 	cp.h	r8,r11
800031b6:	5f 0b       	sreq	r11
800031b8:	f7 e9 10 09 	or	r9,r11,r9
800031bc:	f4 09 18 00 	cp.b	r9,r10
800031c0:	cf 21       	brne	800031a4 <fat_entry_longname+0x258>
800031c2:	32 f9       	mov	r9,47
800031c4:	f2 08 19 00 	cp.h	r8,r9
800031c8:	5f 0c       	sreq	r12
800031ca:	ce 5a       	rjmp	80002f94 <fat_entry_longname+0x48>
800031cc:	40 0a       	lddsp	r10,sp[0x0]
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800031ce:	cb 7b       	rjmp	8000313c <fat_entry_longname+0x1f0>
800031d0:	30 e8       	mov	r8,14
800031d2:	b8 08       	st.h	r12[0x0],r8
               return true;
800031d4:	30 1c       	mov	r12,1
         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
800031d6:	cd fa       	rjmp	80002f94 <fat_entry_longname+0x48>
800031d8:	31 69       	mov	r9,22
800031da:	e0 68 15 a0 	mov	r8,5536
           return false;
800031de:	30 0c       	mov	r12,0
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800031e0:	b0 89       	st.b	r8[0x0],r9
800031e2:	cd 9a       	rjmp	80002f94 <fat_entry_longname+0x48>
800031e4:	30 08       	mov	r8,0
               }
               return true;                     // the buffer is full
800031e6:	b8 88       	st.b	r12[0x0],r8
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800031e8:	30 1c       	mov	r12,1
800031ea:	cd 5a       	rjmp	80002f94 <fat_entry_longname+0x48>
800031ec:	1d 82       	ld.ub	r2,lr[0x0]
800031ee:	c7 db       	rjmp	800030e8 <fat_entry_longname+0x19c>

800031f0 <fat_check_eof_name>:
800031f0:	30 08       	mov	r8,0
800031f2:	35 ca       	mov	r10,92
800031f4:	f0 0c 19 00 	cp.h	r12,r8
800031f8:	5f 09       	sreq	r9
800031fa:	f4 0c 19 00 	cp.h	r12,r10
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
800031fe:	5f 0a       	sreq	r10
80003200:	f5 e9 10 09 	or	r9,r10,r9
80003204:	f0 09 18 00 	cp.b	r9,r8
80003208:	c0 61       	brne	80003214 <fat_check_eof_name+0x24>
8000320a:	32 f8       	mov	r8,47
8000320c:	f0 0c 19 00 	cp.h	r12,r8
80003210:	5f 0c       	sreq	r12
}
80003212:	5e fc       	retal	r12
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80003214:	5e ff       	retal	1
80003216:	d7 03       	nop

80003218 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80003218:	e0 68 15 9c 	mov	r8,5532
8000321c:	e0 6c 13 50 	mov	r12,4944
80003220:	90 98       	ld.uh	r8,r8[0x2]
80003222:	a5 78       	lsl	r8,0x5
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
80003224:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003228:	10 0c       	add	r12,r8
8000322a:	5e fc       	retal	r12

8000322c <fat_cache_reset>:
8000322c:	3f f9       	mov	r9,-1
8000322e:	e0 68 15 d8 	mov	r8,5592
//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
80003232:	b0 89       	st.b	r8[0x0],r9
80003234:	30 09       	mov	r9,0
80003236:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000323a:	3f f9       	mov	r9,-1
}
8000323c:	91 39       	st.w	r8[0xc],r9
8000323e:	5e fc       	retal	r12

80003240 <fat_cache_mark_sector_as_dirty>:
80003240:	30 19       	mov	r9,1
80003242:	e0 68 15 d8 	mov	r8,5592

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80003246:	f1 69 00 08 	st.b	r8[8],r9
}
8000324a:	5e fc       	retal	r12

8000324c <fat_invert_nav>:
8000324c:	d4 21       	pushm	r4-r7,lr
8000324e:	20 dd       	sub	sp,52
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80003250:	58 0c       	cp.w	r12,0
80003252:	c5 e0       	breq	8000330e <fat_invert_nav+0xc2>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003254:	e0 68 15 50 	mov	r8,5456
80003258:	f0 ea 00 00 	ld.d	r10,r8[0]
8000325c:	fa eb 00 00 	st.d	sp[0],r10
80003260:	f0 ea 00 08 	ld.d	r10,r8[8]
80003264:	fa eb 00 08 	st.d	sp[8],r10
80003268:	f0 ea 00 10 	ld.d	r10,r8[16]
8000326c:	fa eb 00 10 	st.d	sp[16],r10
80003270:	f0 ea 00 18 	ld.d	r10,r8[24]
80003274:	fa eb 00 18 	st.d	sp[24],r10
80003278:	f0 ea 00 20 	ld.d	r10,r8[32]
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
8000327c:	f8 c6 00 01 	sub	r6,r12,1

   if( u8_idnav == 0 )
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003280:	fa eb 00 20 	st.d	sp[32],r10
80003284:	10 9c       	mov	r12,r8
80003286:	f0 ea 00 28 	ld.d	r10,r8[40]
8000328a:	fa eb 00 28 	st.d	sp[40],r10
8000328e:	70 c8       	ld.w	r8,r8[0x30]
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003290:	50 c8       	stdsp	sp[0x30],r8

   if( u8_idnav == 0 )
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003292:	e0 68 15 a4 	mov	r8,5540
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003296:	1a 97       	mov	r7,sp
80003298:	5c 56       	castu.b	r6
8000329a:	33 4a       	mov	r10,52
8000329c:	ec 0a 02 45 	mul	r5,r6,r10
800032a0:	10 05       	add	r5,r8
800032a2:	0a 9b       	mov	r11,r5
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
800032a4:	e0 a0 2a 33 	rcall	8000870a <memcpy>
800032a8:	0a 9c       	mov	r12,r5
800032aa:	33 4a       	mov	r10,52
800032ac:	1a 9b       	mov	r11,sp

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
800032ae:	e0 a0 2a 2e 	rcall	8000870a <memcpy>
800032b2:	e0 68 13 10 	mov	r8,4880
800032b6:	f0 e4 00 00 	ld.d	r4,r8[0]
800032ba:	10 9c       	mov	r12,r8
800032bc:	fa e5 00 00 	st.d	sp[0],r4
800032c0:	f0 e8 00 08 	ld.d	r8,r8[8]
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
800032c4:	fa e9 00 08 	st.d	sp[8],r8
800032c8:	e0 68 15 88 	mov	r8,5512
800032cc:	31 0a       	mov	r10,16
800032ce:	ec 05 15 04 	lsl	r5,r6,0x4
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
800032d2:	10 05       	add	r5,r8
800032d4:	0a 9b       	mov	r11,r5
800032d6:	e0 a0 2a 1a 	rcall	8000870a <memcpy>
800032da:	31 0a       	mov	r10,16

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
800032dc:	1a 9b       	mov	r11,sp
800032de:	0a 9c       	mov	r12,r5
800032e0:	e0 a0 2a 15 	rcall	8000870a <memcpy>
800032e4:	30 4a       	mov	r10,4
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
800032e6:	e0 6b 15 9c 	mov	r11,5532
800032ea:	1a 9c       	mov	r12,sp
800032ec:	e0 a0 2a 0f 	rcall	8000870a <memcpy>
800032f0:	e0 68 15 98 	mov	r8,5528
800032f4:	30 4a       	mov	r10,4
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
800032f6:	f0 06 00 26 	add	r6,r8,r6<<0x2
800032fa:	e0 6c 15 9c 	mov	r12,5532
800032fe:	0c 9b       	mov	r11,r6
}
80003300:	e0 a0 2a 05 	rcall	8000870a <memcpy>
80003304:	1a 9b       	mov	r11,sp
80003306:	0c 9c       	mov	r12,r6
80003308:	30 4a       	mov	r10,4
8000330a:	e0 a0 2a 00 	rcall	8000870a <memcpy>
8000330e:	2f 3d       	sub	sp,-52
80003310:	d8 22       	popm	r4-r7,pc
80003312:	d7 03       	nop

80003314 <fat_cache_flush>:
80003314:	eb cd 40 e0 	pushm	r5-r7,lr
80003318:	e0 65 15 d8 	mov	r5,5592
8000331c:	30 18       	mov	r8,1
8000331e:	eb 37 00 08 	ld.ub	r7,r5[8]
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80003322:	f0 07 18 00 	cp.b	r7,r8
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
      {
         fs_g_status = FS_ERR_HW;
         return false;
80003326:	c0 30       	breq	8000332c <fat_cache_flush+0x18>
80003328:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000332c:	30 08       	mov	r8,0
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000332e:	0b 8c       	ld.ub	r12,r5[0x0]
80003330:	eb 68 00 08 	st.b	r5[8],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003334:	e0 a0 1e ca 	rcall	800070c8 <mem_wr_protect>
80003338:	18 96       	mov	r6,r12
      {
         fs_g_status = FS_LUN_WP;
8000333a:	c0 80       	breq	8000334a <fat_cache_flush+0x36>
8000333c:	31 49       	mov	r9,20
8000333e:	e0 68 15 a0 	mov	r8,5536
         return false;
80003342:	30 0c       	mov	r12,0
80003344:	b0 89       	st.b	r8[0x0],r9
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003346:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000334a:	0b 8c       	ld.ub	r12,r5[0x0]
8000334c:	e0 6a 13 50 	mov	r10,4944
80003350:	6a 1b       	ld.w	r11,r5[0x4]
      {
         fs_g_status = FS_ERR_HW;
80003352:	e0 a0 1e cb 	rcall	800070e8 <ram_2_memory>
80003356:	ce 90       	breq	80003328 <fat_cache_flush+0x14>
         return false;
80003358:	e0 68 15 a0 	mov	r8,5536
8000335c:	0c 9c       	mov	r12,r6
8000335e:	b0 87       	st.b	r8[0x0],r7
80003360:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003364 <fat_cache_clear>:
80003364:	d4 01       	pushm	lr
80003366:	e0 6a 02 00 	mov	r10,512
8000336a:	30 0b       	mov	r11,0
8000336c:	e0 6c 13 50 	mov	r12,4944
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
80003370:	e0 a0 2a 71 	rcall	80008852 <memset>
}
80003374:	d8 02       	popm	pc
80003376:	d7 03       	nop

80003378 <fat_check_device>:
80003378:	d4 31       	pushm	r0-r7,lr
8000337a:	e0 68 13 22 	mov	r8,4898
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
8000337e:	11 89       	ld.ub	r9,r8[0x0]
80003380:	30 08       	mov	r8,0
80003382:	f0 09 18 00 	cp.b	r9,r8
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003386:	c4 01       	brne	80003406 <fat_check_device+0x8e>
80003388:	e0 65 15 50 	mov	r5,5456
8000338c:	3f f6       	mov	r6,-1
8000338e:	0b 89       	ld.ub	r9,r5[0x0]
80003390:	ec 09 18 00 	cp.b	r9,r6
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003394:	c3 a0       	breq	80003408 <fat_check_device+0x90>
80003396:	30 03       	mov	r3,0
      Fat_file_close();                            // By default the file is not open
80003398:	e0 60 15 9c 	mov	r0,5532
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
8000339c:	06 97       	mov	r7,r3
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
8000339e:	e0 61 13 10 	mov	r1,4880
800033a2:	e0 62 15 a4 	mov	r2,5540
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800033a6:	e0 64 15 d8 	mov	r4,5592

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
800033aa:	12 9c       	mov	r12,r9
800033ac:	e0 a0 1e 84 	rcall	800070b4 <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
800033b0:	e0 68 13 24 	mov	r8,4900
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800033b4:	30 1a       	mov	r10,1
800033b6:	e0 6b 15 a0 	mov	r11,5536
800033ba:	58 0c       	cp.w	r12,0
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800033bc:	c2 50       	breq	80003406 <fat_check_device+0x8e>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800033be:	a0 87       	st.b	r0[0x0],r7
800033c0:	a2 87       	st.b	r1[0x0],r7
800033c2:	0b 89       	ld.ub	r9,r5[0x0]
800033c4:	05 8e       	ld.ub	lr,r2[0x0]
   fs_g_sectorcache.u8_dirty              = false;
800033c6:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800033ca:	c2 a0       	breq	8000341e <fat_check_device+0xa6>
800033cc:	09 8e       	ld.ub	lr,r4[0x0]
800033ce:	f2 0e 18 00 	cp.b	lr,r9
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800033d2:	e9 f6 0e 00 	st.beq	r4[0x0],r6
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800033d6:	e9 f7 0e 08 	st.beq	r4[0x8],r7
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
800033da:	f9 be 00 ff 	moveq	lr,-1
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800033de:	e9 fe 0a 03 	st.weq	r4[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800033e2:	e0 6e 15 a2 	mov	lr,5538
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800033e6:	bc 87       	st.b	lr[0x0],r7
800033e8:	f1 66 00 15 	st.b	r8[21],r6
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
800033ec:	b6 8a       	st.b	r11[0x0],r10
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800033ee:	b0 8a       	st.b	r8[0x0],r10
800033f0:	b0 a6       	st.b	r8[0x2],r6
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800033f2:	b0 96       	st.b	r8[0x1],r6
800033f4:	f1 67 00 14 	st.b	r8[20],r7
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
800033f8:	f1 66 00 16 	st.b	r8[22],r6
800033fc:	58 3c       	cp.w	r12,3
      return false;                                // No device selected
800033fe:	c0 b0       	breq	80003414 <fat_check_device+0x9c>
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003400:	58 2c       	cp.w	r12,2
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003402:	c1 50       	breq	8000342c <fat_check_device+0xb4>
80003404:	d8 3a       	popm	r0-r7,pc,r12=0
80003406:	da 3a       	popm	r0-r7,pc,r12=1
80003408:	30 19       	mov	r9,1
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
8000340a:	e0 68 15 a0 	mov	r8,5536
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
8000340e:	30 0c       	mov	r12,0
80003410:	b0 89       	st.b	r8[0x0],r9
80003412:	d8 32       	popm	r0-r7,pc
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003414:	2f f3       	sub	r3,-1
80003416:	e0 43 00 64 	cp.w	r3,100
8000341a:	cc 81       	brne	800033aa <fat_check_device+0x32>
8000341c:	cf 4b       	rjmp	80003404 <fat_check_device+0x8c>
8000341e:	e0 6e 15 98 	mov	lr,5528
80003422:	bc 87       	st.b	lr[0x0],r7
80003424:	e0 6e 15 88 	mov	lr,5512
80003428:	bc 87       	st.b	lr[0x0],r7
8000342a:	cd 1b       	rjmp	800033cc <fat_check_device+0x54>
8000342c:	31 88       	mov	r8,24
8000342e:	30 0c       	mov	r12,0
80003430:	b6 88       	st.b	r11[0x0],r8
80003432:	d8 32       	popm	r0-r7,pc

80003434 <fat_cache_read_sector>:
80003434:	eb cd 40 fc 	pushm	r2-r7,lr
80003438:	e0 66 15 50 	mov	r6,5456
8000343c:	18 94       	mov	r4,r12
8000343e:	e0 67 15 d8 	mov	r7,5592
80003442:	0d 8c       	ld.ub	r12,r6[0x0]
80003444:	0f 88       	ld.ub	r8,r7[0x0]
80003446:	f8 08 18 00 	cp.b	r8,r12
8000344a:	c1 90       	breq	8000347c <fat_cache_read_sector+0x48>
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
8000344c:	ef 35 00 08 	ld.ub	r5,r7[8]
80003450:	e0 62 15 d8 	mov	r2,5592
80003454:	30 18       	mov	r8,1

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003456:	f0 05 18 00 	cp.b	r5,r8
   fs_g_sectorcache.u8_dirty              = false;
8000345a:	c1 90       	breq	8000348c <fat_cache_read_sector+0x58>
8000345c:	3f f8       	mov	r8,-1
8000345e:	ae 88       	st.b	r7[0x0],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003460:	30 08       	mov	r8,0
80003462:	ef 68 00 08 	st.b	r7[8],r8

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003466:	3f f8       	mov	r8,-1
80003468:	8f 38       	st.w	r7[0xc],r8
   if( b_load )
8000346a:	e0 68 13 0c 	mov	r8,4876
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
8000346e:	70 0b       	ld.w	r11,r8[0x0]
80003470:	8f 1b       	st.w	r7[0x4],r11
80003472:	58 04       	cp.w	r4,0
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80003474:	c1 b1       	brne	800034aa <fat_cache_read_sector+0x76>
80003476:	ae 8c       	st.b	r7[0x0],r12
80003478:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8000347c:	e0 68 13 0c 	mov	r8,4876
80003480:	6e 19       	ld.w	r9,r7[0x4]
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003482:	70 08       	ld.w	r8,r8[0x0]
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003484:	10 39       	cp.w	r9,r8
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003486:	ce 31       	brne	8000344c <fat_cache_read_sector+0x18>
80003488:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000348c:	30 08       	mov	r8,0
8000348e:	05 8c       	ld.ub	r12,r2[0x0]
80003490:	e5 68 00 08 	st.b	r2[8],r8
      {
         fs_g_status = FS_LUN_WP;
80003494:	e0 a0 1e 1a 	rcall	800070c8 <mem_wr_protect>
80003498:	18 93       	mov	r3,r12
8000349a:	c0 f0       	breq	800034b8 <fat_cache_read_sector+0x84>
8000349c:	31 49       	mov	r9,20
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000349e:	e0 68 15 a0 	mov	r8,5536
800034a2:	30 0c       	mov	r12,0
800034a4:	b0 89       	st.b	r8[0x0],r9
800034a6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800034aa:	e0 6a 13 50 	mov	r10,4944
800034ae:	e0 a0 1e 13 	rcall	800070d4 <memory_2_ram>
800034b2:	c1 01       	brne	800034d2 <fat_cache_read_sector+0x9e>
800034b4:	0d 8c       	ld.ub	r12,r6[0x0]
      {
         fs_g_status = FS_ERR_HW;
800034b6:	ce 0b       	rjmp	80003476 <fat_cache_read_sector+0x42>
800034b8:	05 8c       	ld.ub	r12,r2[0x0]
800034ba:	e0 6a 13 50 	mov	r10,4944
800034be:	64 1b       	ld.w	r11,r2[0x4]
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
800034c0:	e0 a0 1e 14 	rcall	800070e8 <ram_2_memory>
800034c4:	c0 e0       	breq	800034e0 <fat_cache_read_sector+0xac>
800034c6:	e0 68 15 a0 	mov	r8,5536
         return false;
800034ca:	06 9c       	mov	r12,r3
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800034cc:	b0 85       	st.b	r8[0x0],r5
800034ce:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800034d2:	30 19       	mov	r9,1
800034d4:	e0 68 15 a0 	mov	r8,5536
800034d8:	30 0c       	mov	r12,0
800034da:	b0 89       	st.b	r8[0x0],r9
800034dc:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800034e0:	0d 8c       	ld.ub	r12,r6[0x0]
800034e2:	cb db       	rjmp	8000345c <fat_cache_read_sector+0x28>

800034e4 <T.79>:
800034e4:	eb cd 40 f8 	pushm	r3-r7,lr
800034e8:	e0 66 15 50 	mov	r6,5456
800034ec:	e0 67 15 d8 	mov	r7,5592
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800034f0:	0d 8c       	ld.ub	r12,r6[0x0]
800034f2:	0f 88       	ld.ub	r8,r7[0x0]
800034f4:	f8 08 18 00 	cp.b	r8,r12
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800034f8:	c2 00       	breq	80003538 <T.79+0x54>
800034fa:	ef 35 00 08 	ld.ub	r5,r7[8]
800034fe:	e0 63 15 d8 	mov	r3,5592
80003502:	30 18       	mov	r8,1

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003504:	f0 05 18 00 	cp.b	r5,r8
   fs_g_sectorcache.u8_dirty              = false;
80003508:	c2 70       	breq	80003556 <T.79+0x72>
8000350a:	3f f8       	mov	r8,-1
8000350c:	ae 88       	st.b	r7[0x0],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000350e:	30 08       	mov	r8,0
80003510:	ef 68 00 08 	st.b	r7[8],r8
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003514:	3f f8       	mov	r8,-1

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003516:	8f 38       	st.w	r7[0xc],r8
80003518:	e0 68 13 0c 	mov	r8,4876
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000351c:	e0 6a 13 50 	mov	r10,4944
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003520:	70 0b       	ld.w	r11,r8[0x0]
80003522:	8f 1b       	st.w	r7[0x4],r11
80003524:	e0 a0 1d d8 	rcall	800070d4 <memory_2_ram>
   return true;
}
80003528:	c1 01       	brne	80003548 <T.79+0x64>
8000352a:	0d 89       	ld.ub	r9,r6[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000352c:	e0 68 15 d8 	mov	r8,5592
80003530:	30 1c       	mov	r12,1
80003532:	b0 89       	st.b	r8[0x0],r9
80003534:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003538:	e0 68 13 0c 	mov	r8,4876
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
8000353c:	6e 19       	ld.w	r9,r7[0x4]
8000353e:	70 08       	ld.w	r8,r8[0x0]
80003540:	10 39       	cp.w	r9,r8
80003542:	cd c1       	brne	800034fa <T.79+0x16>
80003544:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003548:	30 19       	mov	r9,1
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000354a:	e0 68 15 a0 	mov	r8,5536
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000354e:	30 0c       	mov	r12,0
80003550:	b0 89       	st.b	r8[0x0],r9
80003552:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
      {
         fs_g_status = FS_LUN_WP;
80003556:	30 08       	mov	r8,0
80003558:	07 8c       	ld.ub	r12,r3[0x0]
8000355a:	e7 68 00 08 	st.b	r3[8],r8
8000355e:	e0 a0 1d b5 	rcall	800070c8 <mem_wr_protect>
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003562:	18 94       	mov	r4,r12
80003564:	c0 80       	breq	80003574 <T.79+0x90>
80003566:	31 49       	mov	r9,20
80003568:	e0 68 15 a0 	mov	r8,5536
8000356c:	30 0c       	mov	r12,0
      {
         fs_g_status = FS_ERR_HW;
8000356e:	b0 89       	st.b	r8[0x0],r9
80003570:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003574:	07 8c       	ld.ub	r12,r3[0x0]
80003576:	e0 6a 13 50 	mov	r10,4944
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000357a:	66 1b       	ld.w	r11,r3[0x4]
8000357c:	e0 a0 1d b6 	rcall	800070e8 <ram_2_memory>
80003580:	c0 70       	breq	8000358e <T.79+0xaa>
80003582:	e0 68 15 a0 	mov	r8,5536
80003586:	08 9c       	mov	r12,r4
80003588:	b0 85       	st.b	r8[0x0],r5
8000358a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000358e:	0d 8c       	ld.ub	r12,r6[0x0]
80003590:	cb db       	rjmp	8000350a <T.79+0x26>
80003592:	d7 03       	nop

80003594 <fat_check_noopen>:
80003594:	d4 31       	pushm	r0-r7,lr
80003596:	e0 68 13 22 	mov	r8,4898
8000359a:	11 89       	ld.ub	r9,r8[0x0]
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
8000359c:	30 08       	mov	r8,0
8000359e:	f0 09 18 00 	cp.b	r9,r8
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
800035a2:	c4 01       	brne	80003622 <fat_check_noopen+0x8e>
800035a4:	e0 64 15 50 	mov	r4,5456
800035a8:	3f f6       	mov	r6,-1
800035aa:	09 89       	ld.ub	r9,r4[0x0]
800035ac:	ec 09 18 00 	cp.b	r9,r6
   {
      fs_g_status = FS_ERR_HW;
800035b0:	c4 c0       	breq	80003648 <fat_check_noopen+0xb4>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800035b2:	30 02       	mov	r2,0
      Fat_file_close();                            // By default the file is not open
800035b4:	e0 65 15 9c 	mov	r5,5532
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800035b8:	04 97       	mov	r7,r2
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
800035ba:	e0 60 13 10 	mov	r0,4880
800035be:	e0 61 15 a4 	mov	r1,5540
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800035c2:	e0 63 15 d8 	mov	r3,5592

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
800035c6:	12 9c       	mov	r12,r9
800035c8:	e0 a0 1d 76 	rcall	800070b4 <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
800035cc:	e0 68 13 24 	mov	r8,4900
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800035d0:	30 1a       	mov	r10,1
800035d2:	e0 6b 15 a0 	mov	r11,5536
800035d6:	58 0c       	cp.w	r12,0
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800035d8:	c2 70       	breq	80003626 <fat_check_noopen+0x92>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800035da:	aa 87       	st.b	r5[0x0],r7
800035dc:	a0 87       	st.b	r0[0x0],r7
800035de:	09 89       	ld.ub	r9,r4[0x0]
800035e0:	03 8e       	ld.ub	lr,r1[0x0]
   fs_g_sectorcache.u8_dirty              = false;
800035e2:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800035e6:	c3 c0       	breq	8000365e <fat_check_noopen+0xca>
800035e8:	07 8e       	ld.ub	lr,r3[0x0]
800035ea:	f2 0e 18 00 	cp.b	lr,r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800035ee:	e7 f6 0e 00 	st.beq	r3[0x0],r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
800035f2:	e7 f7 0e 08 	st.beq	r3[0x8],r7
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800035f6:	f9 be 00 ff 	moveq	lr,-1
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800035fa:	e7 fe 0a 03 	st.weq	r3[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800035fe:	f1 66 00 15 	st.b	r8[21],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003602:	b6 8a       	st.b	r11[0x0],r10
80003604:	e0 6e 15 a2 	mov	lr,5538
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003608:	bc 87       	st.b	lr[0x0],r7
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
8000360a:	b0 8a       	st.b	r8[0x0],r10
8000360c:	b0 a6       	st.b	r8[0x2],r6
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
      return true;
   if( Fat_file_is_open() )
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
      return false;
8000360e:	b0 96       	st.b	r8[0x1],r6
80003610:	f1 67 00 14 	st.b	r8[20],r7
//!
bool  fat_check_noopen( void )
{
   if( !fat_check_device() )
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003614:	f1 66 00 16 	st.b	r8[22],r6
80003618:	58 3c       	cp.w	r12,3
8000361a:	c1 d0       	breq	80003654 <fat_check_noopen+0xc0>
      return true;
   if( Fat_file_is_open() )
8000361c:	58 2c       	cp.w	r12,2
8000361e:	c2 70       	breq	8000366c <fat_check_noopen+0xd8>
80003620:	da 3a       	popm	r0-r7,pc,r12=1
80003622:	e0 65 15 9c 	mov	r5,5532
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003626:	0b 89       	ld.ub	r9,r5[0x0]
80003628:	30 08       	mov	r8,0
8000362a:	f0 09 18 00 	cp.b	r9,r8
      return false;
8000362e:	cf 90       	breq	80003620 <fat_check_noopen+0x8c>
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003630:	e0 69 13 10 	mov	r9,4880
80003634:	13 89       	ld.ub	r9,r9[0x0]
80003636:	f0 09 18 00 	cp.b	r9,r8
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
8000363a:	cf 30       	breq	80003620 <fat_check_noopen+0x8c>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
8000363c:	30 59       	mov	r9,5
8000363e:	e0 68 15 a0 	mov	r8,5536
80003642:	30 0c       	mov	r12,0
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003644:	b0 89       	st.b	r8[0x0],r9
80003646:	d8 32       	popm	r0-r7,pc
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003648:	30 19       	mov	r9,1
8000364a:	e0 68 15 a0 	mov	r8,5536
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
8000364e:	30 1c       	mov	r12,1
80003650:	b0 89       	st.b	r8[0x0],r9
80003652:	d8 32       	popm	r0-r7,pc
80003654:	2f f2       	sub	r2,-1
80003656:	e0 42 00 64 	cp.w	r2,100
8000365a:	cb 61       	brne	800035c6 <fat_check_noopen+0x32>
8000365c:	ce 2b       	rjmp	80003620 <fat_check_noopen+0x8c>
8000365e:	e0 6e 15 98 	mov	lr,5528
80003662:	bc 87       	st.b	lr[0x0],r7
80003664:	e0 6e 15 88 	mov	lr,5512
80003668:	bc 87       	st.b	lr[0x0],r7
8000366a:	cb fb       	rjmp	800035e8 <fat_check_noopen+0x54>
8000366c:	31 88       	mov	r8,24
8000366e:	30 1c       	mov	r12,1
80003670:	b6 88       	st.b	r11[0x0],r8
80003672:	d8 32       	popm	r0-r7,pc

80003674 <fat_cluster_val>:
80003674:	d4 31       	pushm	r0-r7,lr
80003676:	20 5d       	sub	sp,20
80003678:	e0 64 15 9c 	mov	r4,5532
8000367c:	18 95       	mov	r5,r12
8000367e:	09 8a       	ld.ub	r10,r4[0x0]
80003680:	30 38       	mov	r8,3
80003682:	f0 0a 18 00 	cp.b	r10,r8
80003686:	e0 80 00 99 	breq	800037b8 <fat_cluster_val+0x144>

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
   }
   else if ( Is_fat16 )
8000368a:	30 28       	mov	r8,2
8000368c:	f0 0a 18 00 	cp.b	r10,r8
80003690:	e0 80 00 a7 	breq	800037de <fat_cluster_val+0x16a>
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
   }
   else if ( Is_fat12 )
80003694:	30 18       	mov	r8,1
80003696:	f0 0a 18 00 	cp.b	r10,r8
8000369a:	e0 80 00 ab 	breq	800037f0 <fat_cluster_val+0x17c>
8000369e:	30 0b       	mov	r11,0
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
800036a0:	58 05       	cp.w	r5,0
800036a2:	c1 40       	breq	800036ca <fat_cluster_val+0x56>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
800036a4:	e0 68 15 84 	mov	r8,5508
800036a8:	70 09       	ld.w	r9,r8[0x0]
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
800036aa:	12 3b       	cp.w	r11,r9
800036ac:	f1 fb 3a 00 	st.wcs	r8[0x0],r11
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
800036b0:	e0 69 13 4c 	mov	r9,4940
800036b4:	72 08       	ld.w	r8,r9[0x0]
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
800036b6:	10 3b       	cp.w	r11,r8
800036b8:	f3 fb ba 00 	st.whi	r9[0x0],r11
800036bc:	f6 08 17 b0 	movhi	r8,r11
      }
      if ( Is_fat12 )
800036c0:	30 1c       	mov	r12,1
800036c2:	f8 0a 18 00 	cp.b	r10,r12
800036c6:	e0 80 00 e4 	breq	8000388e <fat_cluster_val+0x21a>
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
800036ca:	e0 66 15 50 	mov	r6,5456
800036ce:	e0 63 13 0c 	mov	r3,4876
800036d2:	6c 48       	ld.w	r8,r6[0x10]
800036d4:	10 0b       	add	r11,r8
800036d6:	87 0b       	st.w	r3[0x0],r11
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800036d8:	e0 67 15 d8 	mov	r7,5592
800036dc:	0d 8c       	ld.ub	r12,r6[0x0]
800036de:	0f 88       	ld.ub	r8,r7[0x0]
800036e0:	f8 08 18 00 	cp.b	r8,r12
800036e4:	c0 51       	brne	800036ee <fat_cluster_val+0x7a>
800036e6:	6e 18       	ld.w	r8,r7[0x4]
800036e8:	10 3b       	cp.w	r11,r8
800036ea:	e0 80 00 e1 	breq	800038ac <fat_cluster_val+0x238>
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800036ee:	ef 32 00 08 	ld.ub	r2,r7[8]
800036f2:	e0 68 15 d8 	mov	r8,5592
800036f6:	30 19       	mov	r9,1
800036f8:	f2 02 18 00 	cp.b	r2,r9
800036fc:	e0 80 00 b8 	breq	8000386c <fat_cluster_val+0x1f8>
80003700:	e0 61 13 50 	mov	r1,4944

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003704:	3f f8       	mov	r8,-1
80003706:	ae 88       	st.b	r7[0x0],r8
   fs_g_sectorcache.u8_dirty              = false;
80003708:	30 08       	mov	r8,0
8000370a:	ef 68 00 08 	st.b	r7[8],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000370e:	3f f8       	mov	r8,-1

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003710:	8f 1b       	st.w	r7[0x4],r11
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003712:	8f 38       	st.w	r7[0xc],r8
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003714:	e0 6a 13 50 	mov	r10,4944
80003718:	e0 a0 1c de 	rcall	800070d4 <memory_2_ram>
8000371c:	c5 a1       	brne	800037d0 <fat_cluster_val+0x15c>
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
8000371e:	0d 89       	ld.ub	r9,r6[0x0]
80003720:	e0 68 15 d8 	mov	r8,5592
80003724:	09 8a       	ld.ub	r10,r4[0x0]
80003726:	b0 89       	st.b	r8[0x0],r9
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
   if( !fat_cache_read_sector( true ))
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80003728:	e0 68 13 20 	mov	r8,4896
8000372c:	90 0c       	ld.sh	r12,r8[0x0]
8000372e:	e5 dc c0 10 	bfextu	r2,r12,0x0,0x10
80003732:	e2 02 00 02 	add	r2,r1,r2
   u8_data1 = u8_ptr_cluster[0];
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
   u8_data4 = u8_ptr_cluster[3];
80003736:	e4 ce ff fd 	sub	lr,r2,-3
   if( !fat_cache_read_sector( true ))
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
8000373a:	04 96       	mov	r6,r2
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
8000373c:	e4 c9 ff fe 	sub	r9,r2,-2
   if( !fat_cache_read_sector( true ))
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
80003740:	0d 30       	ld.ub	r0,r6++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
   u8_data4 = u8_ptr_cluster[3];
80003742:	50 2e       	stdsp	sp[0x8],lr
   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
80003744:	13 8e       	ld.ub	lr,r9[0x0]

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80003746:	0d 8b       	ld.ub	r11,r6[0x0]
   u8_data3 = u8_ptr_cluster[2];
80003748:	50 4e       	stdsp	sp[0x10],lr
   u8_data4 = u8_ptr_cluster[3];
8000374a:	40 2e       	lddsp	lr,sp[0x8]
8000374c:	1d 8e       	ld.ub	lr,lr[0x0]
8000374e:	50 3e       	stdsp	sp[0xc],lr

   if ( Is_fat12 )
80003750:	30 1e       	mov	lr,1
80003752:	fc 0a 18 00 	cp.b	r10,lr
80003756:	c7 80       	breq	80003846 <fat_cluster_val+0x1d2>
           return false;
         u8_data2 = fs_g_sector[0];
      }
   }

   if (false == b_mode)
80003758:	58 05       	cp.w	r5,0
8000375a:	c1 91       	brne	8000378c <fat_cluster_val+0x118>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
8000375c:	e0 68 15 f0 	mov	r8,5616
80003760:	f0 ce ff f9 	sub	lr,r8,-7
80003764:	bc 80       	st.b	lr[0x0],r0
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80003766:	f0 cc ff fa 	sub	r12,r8,-6
8000376a:	b8 8b       	st.b	r12[0x0],r11
   }

   if (false == b_mode)
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
8000376c:	f0 c9 ff fc 	sub	r9,r8,-4
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32

      if ( Is_fat32 )
80003770:	30 3b       	mov	r11,3
80003772:	f6 0a 18 00 	cp.b	r10,r11
80003776:	e0 80 00 d5 	breq	80003920 <fat_cluster_val+0x2ac>
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
         LSB3( fs_g_cluster.u32_val ) = 0;
8000377a:	b2 85       	st.b	r9[0x0],r5
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
8000377c:	b2 95       	st.b	r9[0x1],r5
         LSB3( fs_g_cluster.u32_val ) = 0;

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
8000377e:	30 19       	mov	r9,1
80003780:	f2 0a 18 00 	cp.b	r10,r9
80003784:	c4 60       	breq	80003810 <fat_cluster_val+0x19c>
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80003786:	30 1c       	mov	r12,1
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
80003788:	2f bd       	sub	sp,-20
8000378a:	d8 32       	popm	r0-r7,pc
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
8000378c:	30 1c       	mov	r12,1
8000378e:	f8 0a 18 00 	cp.b	r10,r12
80003792:	e0 80 00 90 	breq	800038b2 <fat_cluster_val+0x23e>
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80003796:	e0 68 15 f0 	mov	r8,5616
8000379a:	30 3c       	mov	r12,3
8000379c:	2f c8       	sub	r8,-4
         u8_data2 = LSB1( fs_g_cluster.u32_val );
8000379e:	11 b5       	ld.ub	r5,r8[0x3]
         if ( Is_fat32 )
800037a0:	11 ab       	ld.ub	r11,r8[0x2]
800037a2:	f8 0a 18 00 	cp.b	r10,r12
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
800037a6:	c4 60       	breq	80003832 <fat_cluster_val+0x1be>
      u8_ptr_cluster[1] = u8_data2;
800037a8:	a4 85       	st.b	r2[0x0],r5

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800037aa:	ac 8b       	st.b	r6[0x0],r11
800037ac:	30 18       	mov	r8,1
800037ae:	30 1c       	mov	r12,1
800037b0:	ef 68 00 08 	st.b	r7[8],r8
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
800037b4:	2f bd       	sub	sp,-20
   if ( Is_fat32 )
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800037b6:	d8 32       	popm	r0-r7,pc

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
800037b8:	e0 68 15 f0 	mov	r8,5616
800037bc:	11 b9       	ld.ub	r9,r8[0x3]
800037be:	70 0b       	ld.w	r11,r8[0x0]
800037c0:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
   if ( Is_fat32 )
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800037c4:	e0 68 13 20 	mov	r8,4896

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
800037c8:	a3 69       	lsl	r9,0x2
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
800037ca:	a7 9b       	lsr	r11,0x7
800037cc:	b0 09       	st.h	r8[0x0],r9
800037ce:	c6 9b       	rjmp	800036a0 <fat_cluster_val+0x2c>
800037d0:	30 19       	mov	r9,1
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
800037d2:	e0 68 15 a0 	mov	r8,5536
   }
   else if ( Is_fat16 )
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
800037d6:	30 0c       	mov	r12,0
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
800037d8:	b0 89       	st.b	r8[0x0],r9
800037da:	2f bd       	sub	sp,-20
800037dc:	d8 32       	popm	r0-r7,pc
800037de:	e0 68 15 f0 	mov	r8,5616
   }
   else if ( Is_fat16 )
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
800037e2:	11 bb       	ld.ub	r11,r8[0x3]
   }
   else if ( Is_fat12 )
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
800037e4:	a1 7b       	lsl	r11,0x1
800037e6:	e0 69 13 20 	mov	r9,4896
800037ea:	b2 0b       	st.h	r9[0x0],r11
800037ec:	11 ab       	ld.ub	r11,r8[0x2]
800037ee:	c5 9b       	rjmp	800036a0 <fat_cluster_val+0x2c>
800037f0:	e0 68 13 20 	mov	r8,4896
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800037f4:	e0 69 15 f0 	mov	r9,5616
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800037f8:	72 09       	ld.w	r9,r9[0x0]
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800037fa:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800037fe:	12 0b       	add	r11,r9
         LSB3( fs_g_cluster.u32_val ) = 0;

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80003800:	b0 0b       	st.h	r8[0x0],r11
80003802:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80003806:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
8000380a:	a1 9b       	lsr	r11,0x1
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
8000380c:	b0 89       	st.b	r8[0x0],r9
8000380e:	c4 9b       	rjmp	800036a0 <fat_cluster_val+0x2c>
80003810:	11 b8       	ld.ub	r8,r8[0x3]
         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80003812:	ed b8 00 00 	bld	r8,0x0
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80003816:	e0 81 00 8d 	brne	80003930 <fat_cluster_val+0x2bc>
         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
8000381a:	19 88       	ld.ub	r8,r12[0x0]
8000381c:	f0 09 16 04 	lsr	r9,r8,0x4
80003820:	b8 89       	st.b	r12[0x0],r9
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
         u8_data2 = LSB1( fs_g_cluster.u32_val );
         if ( Is_fat32 )
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80003822:	a5 68       	lsl	r8,0x4
80003824:	1d 89       	ld.ub	r9,lr[0x0]
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80003826:	30 1c       	mov	r12,1
80003828:	a5 89       	lsr	r9,0x4
8000382a:	f2 08 00 08 	add	r8,r9,r8
8000382e:	bc 88       	st.b	lr[0x0],r8
80003830:	cc 2b       	rjmp	800037b4 <fat_cluster_val+0x140>
80003832:	11 9a       	ld.ub	r10,r8[0x1]
80003834:	b2 8a       	st.b	r9[0x0],r10
   u8_data3 = u8_ptr_cluster[2];
   u8_data4 = u8_ptr_cluster[3];

   if ( Is_fat12 )
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003836:	40 39       	lddsp	r9,sp[0xc]
80003838:	e0 19 ff f0 	andl	r9,0xfff0
8000383c:	11 88       	ld.ub	r8,r8[0x0]
8000383e:	12 08       	add	r8,r9
      {  // Go to next sector
         fs_gu32_addrsector++;
80003840:	40 29       	lddsp	r9,sp[0x8]
80003842:	b2 88       	st.b	r9[0x0],r8
         if( !fat_cache_read_sector( true ))
80003844:	cb 2b       	rjmp	800037a8 <fat_cluster_val+0x134>
80003846:	e0 6e 01 ff 	mov	lr,511
8000384a:	fc 0c 19 00 	cp.h	r12,lr
8000384e:	c8 51       	brne	80003758 <fat_cluster_val+0xe4>
80003850:	66 0a       	ld.w	r10,r3[0x0]
80003852:	2f fa       	sub	r10,-1
           return false;
         u8_data2 = fs_g_sector[0];
80003854:	50 19       	stdsp	sp[0x4],r9
80003856:	50 08       	stdsp	sp[0x0],r8
80003858:	87 0a       	st.w	r3[0x0],r10
8000385a:	c4 5e       	rcall	800034e4 <T.79>
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000385c:	40 19       	lddsp	r9,sp[0x4]
8000385e:	40 08       	lddsp	r8,sp[0x0]
80003860:	c7 f0       	breq	8000395e <fat_cluster_val+0x2ea>
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003862:	e0 6a 13 50 	mov	r10,4944
80003866:	15 8b       	ld.ub	r11,r10[0x0]
80003868:	09 8a       	ld.ub	r10,r4[0x0]
8000386a:	c7 7b       	rjmp	80003758 <fat_cluster_val+0xe4>
8000386c:	30 09       	mov	r9,0
8000386e:	f1 69 00 08 	st.b	r8[8],r9
      {
         fs_g_status = FS_LUN_WP;
80003872:	11 8c       	ld.ub	r12,r8[0x0]
80003874:	50 08       	stdsp	sp[0x0],r8
80003876:	e0 a0 1c 29 	rcall	800070c8 <mem_wr_protect>
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
8000387a:	40 08       	lddsp	r8,sp[0x0]
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
      }
      if ( Is_fat12 )
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
8000387c:	18 90       	mov	r0,r12
8000387e:	c4 40       	breq	80003906 <fat_cluster_val+0x292>
80003880:	31 49       	mov	r9,20
80003882:	e0 68 15 a0 	mov	r8,5536
80003886:	30 0c       	mov	r12,0
80003888:	b0 89       	st.b	r8[0x0],r9
8000388a:	2f bd       	sub	sp,-20
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
8000388c:	d8 32       	popm	r0-r7,pc
8000388e:	e0 6c 13 20 	mov	r12,4896
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80003892:	98 0e       	ld.sh	lr,r12[0x0]
80003894:	e0 6c 01 ff 	mov	r12,511
80003898:	f8 0e 19 00 	cp.h	lr,r12
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000389c:	fe 91 ff 17 	brne	800036ca <fat_cluster_val+0x56>
800038a0:	f6 cc ff ff 	sub	r12,r11,-1
800038a4:	10 3c       	cp.w	r12,r8
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
800038a6:	f3 fc ba 00 	st.whi	r9[0x0],r12
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
800038aa:	c1 0b       	rjmp	800036ca <fat_cluster_val+0x56>
800038ac:	e0 61 13 50 	mov	r1,4944
800038b0:	c3 cb       	rjmp	80003728 <fat_cluster_val+0xb4>
800038b2:	e0 69 15 f0 	mov	r9,5616
800038b6:	13 ba       	ld.ub	r10,r9[0x3]
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800038b8:	ed ba 00 00 	bld	r10,0x0
800038bc:	c4 00       	breq	8000393c <fat_cluster_val+0x2c8>
800038be:	2f c9       	sub	r9,-4
800038c0:	e2 1b 00 f0 	andl	r11,0xf0,COH
800038c4:	13 aa       	ld.ub	r10,r9[0x2]
         {
            fs_g_sector[0] = u8_data2;
            fat_cache_mark_sector_as_dirty();
            // Go to previous sector
            fs_gu32_addrsector--;
800038c6:	13 b5       	ld.ub	r5,r9[0x3]
800038c8:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
         {
            fs_g_sector[0] = u8_data2;
800038cc:	14 0b       	add	r11,r10
            fat_cache_mark_sector_as_dirty();
            // Go to previous sector
            fs_gu32_addrsector--;
800038ce:	5c 5b       	castu.b	r11

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800038d0:	90 09       	ld.sh	r9,r8[0x0]
800038d2:	e0 68 01 ff 	mov	r8,511
         {
            fs_g_sector[0] = u8_data2;
            fat_cache_mark_sector_as_dirty();
            // Go to previous sector
            fs_gu32_addrsector--;
            if( !fat_cache_read_sector( true ))
800038d6:	f0 09 19 00 	cp.h	r9,r8
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
800038da:	fe 91 ff 67 	brne	800037a8 <fat_cluster_val+0x134>
800038de:	66 08       	ld.w	r8,r3[0x0]
800038e0:	20 18       	sub	r8,1

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800038e2:	30 16       	mov	r6,1
800038e4:	a2 8b       	st.b	r1[0x0],r11
800038e6:	87 08       	st.w	r3[0x0],r8
            if( !fat_cache_read_sector( true ))
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
            fat_cache_mark_sector_as_dirty();
            return true;
800038e8:	ef 66 00 08 	st.b	r7[8],r6
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800038ec:	fe b0 fd fc 	rcall	800034e4 <T.79>
800038f0:	c3 70       	breq	8000395e <fat_cluster_val+0x2ea>
800038f2:	e0 68 13 50 	mov	r8,4944
800038f6:	30 1c       	mov	r12,1
      {
         fs_g_status = FS_ERR_HW;
800038f8:	f1 65 01 ff 	st.b	r8[511],r5
800038fc:	e0 68 15 d8 	mov	r8,5592
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32

      if ( Is_fat32 )
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80003900:	f1 66 00 08 	st.b	r8[8],r6
80003904:	c5 8b       	rjmp	800037b4 <fat_cluster_val+0x140>
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80003906:	e0 61 13 50 	mov	r1,4944
8000390a:	11 8c       	ld.ub	r12,r8[0x0]
8000390c:	70 1b       	ld.w	r11,r8[0x4]
8000390e:	02 9a       	mov	r10,r1
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80003910:	e0 a0 1b ec 	rcall	800070e8 <ram_2_memory>
80003914:	c2 20       	breq	80003958 <fat_cluster_val+0x2e4>
80003916:	e0 68 15 a0 	mov	r8,5536
8000391a:	00 9c       	mov	r12,r0
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
8000391c:	b0 82       	st.b	r8[0x0],r2
8000391e:	c4 bb       	rjmp	800037b4 <fat_cluster_val+0x140>
80003920:	40 4b       	lddsp	r11,sp[0x10]
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80003922:	30 1c       	mov	r12,1
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80003924:	b2 9b       	st.b	r9[0x1],r11
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80003926:	40 3a       	lddsp	r10,sp[0xc]
80003928:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
8000392c:	b2 88       	st.b	r9[0x0],r8
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
8000392e:	c4 3b       	rjmp	800037b4 <fat_cluster_val+0x140>
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80003930:	19 88       	ld.ub	r8,r12[0x0]
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80003932:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80003936:	b8 88       	st.b	r12[0x0],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003938:	30 1c       	mov	r12,1
8000393a:	c2 7b       	rjmp	80003788 <fat_cluster_val+0x114>
8000393c:	2f c9       	sub	r9,-4

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
8000393e:	eb d0 c0 04 	bfextu	r5,r0,0x0,0x4
80003942:	13 aa       	ld.ub	r10,r9[0x2]
80003944:	13 b9       	ld.ub	r9,r9[0x3]
80003946:	a5 6a       	lsl	r10,0x4
80003948:	f2 0b 16 04 	lsr	r11,r9,0x4
8000394c:	a5 69       	lsl	r9,0x4
8000394e:	14 0b       	add	r11,r10
80003950:	12 05       	add	r5,r9
80003952:	5c 5b       	castu.b	r11
80003954:	5c 55       	castu.b	r5
80003956:	cb db       	rjmp	800038d0 <fat_cluster_val+0x25c>
80003958:	66 0b       	ld.w	r11,r3[0x0]
8000395a:	0d 8c       	ld.ub	r12,r6[0x0]
8000395c:	cd 4a       	rjmp	80003704 <fat_cluster_val+0x90>
8000395e:	30 0c       	mov	r12,0
80003960:	c2 ab       	rjmp	800037b4 <fat_cluster_val+0x140>
80003962:	d7 03       	nop

80003964 <fat_check_mount_select>:
80003964:	d4 31       	pushm	r0-r7,lr
80003966:	e0 68 13 22 	mov	r8,4898
8000396a:	11 89       	ld.ub	r9,r8[0x0]
8000396c:	30 08       	mov	r8,0
8000396e:	f0 09 18 00 	cp.b	r9,r8
80003972:	c4 01       	brne	800039f2 <fat_check_mount_select+0x8e>
80003974:	e0 64 15 50 	mov	r4,5456
80003978:	3f f6       	mov	r6,-1
8000397a:	09 89       	ld.ub	r9,r4[0x0]

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
8000397c:	ec 09 18 00 	cp.b	r9,r6
   {
      fs_g_status = FS_ERR_HW;
80003980:	c4 e0       	breq	80003a1c <fat_check_mount_select+0xb8>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003982:	30 02       	mov	r2,0
      Fat_file_close();                            // By default the file is not open
80003984:	e0 65 15 9c 	mov	r5,5532
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003988:	04 97       	mov	r7,r2
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
8000398a:	e0 60 13 10 	mov	r0,4880
8000398e:	e0 61 15 a4 	mov	r1,5540
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003992:	e0 63 15 d8 	mov	r3,5592

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003996:	12 9c       	mov	r12,r9
80003998:	e0 a0 1b 8e 	rcall	800070b4 <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
8000399c:	e0 68 13 24 	mov	r8,4900
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800039a0:	30 1a       	mov	r10,1
800039a2:	e0 6b 15 a0 	mov	r11,5536
800039a6:	58 0c       	cp.w	r12,0
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800039a8:	c2 70       	breq	800039f6 <fat_check_mount_select+0x92>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800039aa:	aa 87       	st.b	r5[0x0],r7
800039ac:	a0 87       	st.b	r0[0x0],r7
800039ae:	09 89       	ld.ub	r9,r4[0x0]
800039b0:	03 8e       	ld.ub	lr,r1[0x0]
   fs_g_sectorcache.u8_dirty              = false;
800039b2:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800039b6:	c3 e0       	breq	80003a32 <fat_check_mount_select+0xce>
800039b8:	07 8e       	ld.ub	lr,r3[0x0]
800039ba:	f2 0e 18 00 	cp.b	lr,r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800039be:	e7 f6 0e 00 	st.beq	r3[0x0],r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
800039c2:	e7 f7 0e 08 	st.beq	r3[0x8],r7
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800039c6:	f9 be 00 ff 	moveq	lr,-1
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800039ca:	e7 fe 0a 03 	st.weq	r3[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800039ce:	f1 66 00 15 	st.b	r8[21],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800039d2:	b6 8a       	st.b	r11[0x0],r10
800039d4:	e0 6e 15 a2 	mov	lr,5538
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
800039d8:	bc 87       	st.b	lr[0x0],r7
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800039da:	b0 8a       	st.b	r8[0x0],r10
800039dc:	b0 a6       	st.b	r8[0x2],r6
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
800039de:	b0 96       	st.b	r8[0x1],r6
800039e0:	f1 67 00 14 	st.b	r8[20],r7
//!
bool  fat_check_mount( void )
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800039e4:	f1 66 00 16 	st.b	r8[22],r6
800039e8:	58 3c       	cp.w	r12,3
800039ea:	c1 f0       	breq	80003a28 <fat_check_mount_select+0xc4>
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
800039ec:	58 2c       	cp.w	r12,2
800039ee:	c2 f0       	breq	80003a4c <fat_check_mount_select+0xe8>
800039f0:	d8 3a       	popm	r0-r7,pc,r12=0
800039f2:	e0 65 15 9c 	mov	r5,5532
800039f6:	0b 89       	ld.ub	r9,r5[0x0]
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
   {
      if( !fat_mount() )
800039f8:	30 08       	mov	r8,0
800039fa:	f0 09 18 00 	cp.b	r9,r8
      {
         fs_g_status = FS_ERR_NO_MOUNT;
800039fe:	c0 70       	breq	80003a0c <fat_check_mount_select+0xa8>
80003a00:	8a 19       	ld.sh	r9,r5[0x2]
80003a02:	3f f8       	mov	r8,-1
80003a04:	f0 09 19 00 	cp.h	r9,r8
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003a08:	c1 c0       	breq	80003a40 <fat_check_mount_select+0xdc>
80003a0a:	da 3a       	popm	r0-r7,pc,r12=1
80003a0c:	e0 a0 06 bc 	rcall	80004784 <fat_mount>
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003a10:	cf 81       	brne	80003a00 <fat_check_mount_select+0x9c>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003a12:	30 e9       	mov	r9,14
80003a14:	e0 68 15 a0 	mov	r8,5536
80003a18:	b0 89       	st.b	r8[0x0],r9
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003a1a:	d8 32       	popm	r0-r7,pc
80003a1c:	30 19       	mov	r9,1
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003a1e:	e0 68 15 a0 	mov	r8,5536
80003a22:	30 0c       	mov	r12,0
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003a24:	b0 89       	st.b	r8[0x0],r9
80003a26:	d8 32       	popm	r0-r7,pc
80003a28:	2f f2       	sub	r2,-1
80003a2a:	e0 42 00 64 	cp.w	r2,100
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003a2e:	cb 41       	brne	80003996 <fat_check_mount_select+0x32>
80003a30:	ce 0b       	rjmp	800039f0 <fat_check_mount_select+0x8c>
80003a32:	e0 6e 15 98 	mov	lr,5528
80003a36:	bc 87       	st.b	lr[0x0],r7
80003a38:	e0 6e 15 88 	mov	lr,5512
80003a3c:	bc 87       	st.b	lr[0x0],r7
80003a3e:	cb db       	rjmp	800039b8 <fat_check_mount_select+0x54>
80003a40:	30 f9       	mov	r9,15
80003a42:	e0 68 15 a0 	mov	r8,5536
80003a46:	30 0c       	mov	r12,0
80003a48:	b0 89       	st.b	r8[0x0],r9
80003a4a:	d8 32       	popm	r0-r7,pc
80003a4c:	31 88       	mov	r8,24
80003a4e:	30 0c       	mov	r12,0
80003a50:	b6 88       	st.b	r11[0x0],r8
80003a52:	d8 32       	popm	r0-r7,pc

80003a54 <fat_check_mount_noopen>:
80003a54:	d4 31       	pushm	r0-r7,lr
80003a56:	e0 64 13 22 	mov	r4,4898
80003a5a:	30 08       	mov	r8,0
80003a5c:	09 89       	ld.ub	r9,r4[0x0]
80003a5e:	f0 09 18 00 	cp.b	r9,r8
80003a62:	c4 11       	brne	80003ae4 <fat_check_mount_noopen+0x90>
80003a64:	e0 65 15 50 	mov	r5,5456
80003a68:	3f f6       	mov	r6,-1
80003a6a:	0b 89       	ld.ub	r9,r5[0x0]

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003a6c:	ec 09 18 00 	cp.b	r9,r6
   {
      fs_g_status = FS_ERR_HW;
80003a70:	e0 80 00 8b 	breq	80003b86 <fat_check_mount_noopen+0x132>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003a74:	30 01       	mov	r1,0
      Fat_file_close();                            // By default the file is not open
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a76:	e0 63 15 9c 	mov	r3,5532
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003a7a:	02 97       	mov	r7,r1
80003a7c:	e0 60 15 a4 	mov	r0,5540
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003a80:	e0 62 15 d8 	mov	r2,5592
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003a84:	12 9c       	mov	r12,r9

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003a86:	e0 a0 1b 17 	rcall	800070b4 <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003a8a:	e0 68 13 24 	mov	r8,4900
80003a8e:	30 1a       	mov	r10,1
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a90:	e0 6b 15 a0 	mov	r11,5536
80003a94:	58 0c       	cp.w	r12,0
80003a96:	c2 90       	breq	80003ae8 <fat_check_mount_noopen+0x94>
80003a98:	e0 6e 13 10 	mov	lr,4880

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003a9c:	a6 87       	st.b	r3[0x0],r7
80003a9e:	bc 87       	st.b	lr[0x0],r7
80003aa0:	0b 89       	ld.ub	r9,r5[0x0]
80003aa2:	01 8e       	ld.ub	lr,r0[0x0]
   fs_g_sectorcache.u8_dirty              = false;
80003aa4:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003aa8:	c7 b0       	breq	80003b9e <fat_check_mount_noopen+0x14a>
80003aaa:	05 8e       	ld.ub	lr,r2[0x0]
80003aac:	f2 0e 18 00 	cp.b	lr,r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003ab0:	e5 f6 0e 00 	st.beq	r2[0x0],r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003ab4:	e5 f7 0e 08 	st.beq	r2[0x8],r7
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003ab8:	f9 be 00 ff 	moveq	lr,-1
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003abc:	e5 fe 0a 03 	st.weq	r2[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003ac0:	f1 66 00 15 	st.b	r8[21],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003ac4:	b6 8a       	st.b	r11[0x0],r10
80003ac6:	e0 6e 15 a2 	mov	lr,5538
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003aca:	bc 87       	st.b	lr[0x0],r7
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003acc:	b0 8a       	st.b	r8[0x0],r10
80003ace:	b0 a6       	st.b	r8[0x2],r6
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
      return true;
   if( Fat_file_is_open() )
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003ad0:	b0 96       	st.b	r8[0x1],r6
80003ad2:	f1 67 00 14 	st.b	r8[20],r7
//!
bool  fat_check_mount( void )
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003ad6:	f1 66 00 16 	st.b	r8[22],r6
80003ada:	58 3c       	cp.w	r12,3
80003adc:	c5 b0       	breq	80003b92 <fat_check_mount_noopen+0x13e>
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80003ade:	58 2c       	cp.w	r12,2
80003ae0:	c7 70       	breq	80003bce <fat_check_mount_noopen+0x17a>
80003ae2:	d8 3a       	popm	r0-r7,pc,r12=0
80003ae4:	e0 63 15 9c 	mov	r3,5532
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003ae8:	07 89       	ld.ub	r9,r3[0x0]
80003aea:	30 08       	mov	r8,0
80003aec:	f0 09 18 00 	cp.b	r9,r8
80003af0:	c4 30       	breq	80003b76 <fat_check_mount_noopen+0x122>
80003af2:	09 89       	ld.ub	r9,r4[0x0]
   {
      fs_g_status = FS_ERR_HW;
80003af4:	30 08       	mov	r8,0
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003af6:	f0 09 18 00 	cp.b	r9,r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003afa:	c5 91       	brne	80003bac <fat_check_mount_noopen+0x158>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003afc:	e0 65 15 50 	mov	r5,5456
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003b00:	3f f6       	mov	r6,-1
80003b02:	0b 89       	ld.ub	r9,r5[0x0]
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003b04:	ec 09 18 00 	cp.b	r9,r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003b08:	c7 70       	breq	80003bf6 <fat_check_mount_noopen+0x1a2>

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003b0a:	30 02       	mov	r2,0
80003b0c:	e0 60 13 10 	mov	r0,4880
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003b10:	04 97       	mov	r7,r2
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003b12:	e0 61 15 a4 	mov	r1,5540
80003b16:	e0 64 15 d8 	mov	r4,5592
80003b1a:	12 9c       	mov	r12,r9
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003b1c:	e0 a0 1a cc 	rcall	800070b4 <mem_test_unit_ready>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003b20:	e0 68 13 24 	mov	r8,4900
80003b24:	30 1a       	mov	r10,1
   fs_g_sectorcache.u8_dirty              = false;
80003b26:	e0 6b 15 a0 	mov	r11,5536
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003b2a:	58 0c       	cp.w	r12,0
80003b2c:	c4 00       	breq	80003bac <fat_check_mount_noopen+0x158>
80003b2e:	a6 87       	st.b	r3[0x0],r7
80003b30:	a0 87       	st.b	r0[0x0],r7
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003b32:	0b 89       	ld.ub	r9,r5[0x0]
80003b34:	03 8e       	ld.ub	lr,r1[0x0]
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003b36:	f2 0e 18 00 	cp.b	lr,r9
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003b3a:	c5 30       	breq	80003be0 <fat_check_mount_noopen+0x18c>
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003b3c:	09 8e       	ld.ub	lr,r4[0x0]
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003b3e:	f2 0e 18 00 	cp.b	lr,r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003b42:	e9 f6 0e 00 	st.beq	r4[0x0],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003b46:	e9 f7 0e 08 	st.beq	r4[0x8],r7
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003b4a:	f9 be 00 ff 	moveq	lr,-1
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003b4e:	e9 fe 0a 03 	st.weq	r4[0xc],lr
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
      return true;
   if( Fat_file_is_open() )
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003b52:	f1 66 00 15 	st.b	r8[21],r6
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
   {
      if( !fat_mount() )
80003b56:	b6 8a       	st.b	r11[0x0],r10
80003b58:	e0 6e 15 a2 	mov	lr,5538
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80003b5c:	bc 87       	st.b	lr[0x0],r7
80003b5e:	b0 8a       	st.b	r8[0x0],r10
80003b60:	b0 a6       	st.b	r8[0x2],r6
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003b62:	b0 96       	st.b	r8[0x1],r6
80003b64:	f1 67 00 14 	st.b	r8[20],r7
80003b68:	f1 66 00 16 	st.b	r8[22],r6
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003b6c:	58 3c       	cp.w	r12,3
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003b6e:	c3 40       	breq	80003bd6 <fat_check_mount_noopen+0x182>
80003b70:	58 2c       	cp.w	r12,2
80003b72:	c3 e0       	breq	80003bee <fat_check_mount_noopen+0x19a>
80003b74:	da 3a       	popm	r0-r7,pc,r12=1
80003b76:	e0 a0 06 07 	rcall	80004784 <fat_mount>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003b7a:	cb c1       	brne	80003af2 <fat_check_mount_noopen+0x9e>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003b7c:	30 e9       	mov	r9,14
80003b7e:	e0 68 15 a0 	mov	r8,5536
//!
bool  fat_check_noopen( void )
{
   if( !fat_check_device() )
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003b82:	b0 89       	st.b	r8[0x0],r9
80003b84:	d8 32       	popm	r0-r7,pc
80003b86:	30 19       	mov	r9,1
80003b88:	e0 68 15 a0 	mov	r8,5536
      return true;
   if( Fat_file_is_open() )
80003b8c:	30 0c       	mov	r12,0
80003b8e:	b0 89       	st.b	r8[0x0],r9
80003b90:	d8 32       	popm	r0-r7,pc
80003b92:	2f f1       	sub	r1,-1
80003b94:	e0 41 00 64 	cp.w	r1,100
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003b98:	fe 91 ff 76 	brne	80003a84 <fat_check_mount_noopen+0x30>
80003b9c:	ca 3b       	rjmp	80003ae2 <fat_check_mount_noopen+0x8e>
80003b9e:	e0 6e 15 98 	mov	lr,5528
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003ba2:	bc 87       	st.b	lr[0x0],r7
80003ba4:	e0 6e 15 88 	mov	lr,5512
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003ba8:	bc 87       	st.b	lr[0x0],r7
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003baa:	c8 0b       	rjmp	80003aaa <fat_check_mount_noopen+0x56>
80003bac:	07 89       	ld.ub	r9,r3[0x0]
80003bae:	30 08       	mov	r8,0
80003bb0:	f0 09 18 00 	cp.b	r9,r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003bb4:	ce 00       	breq	80003b74 <fat_check_mount_noopen+0x120>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003bb6:	e0 69 13 10 	mov	r9,4880
80003bba:	13 89       	ld.ub	r9,r9[0x0]
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003bbc:	f0 09 18 00 	cp.b	r9,r8
80003bc0:	cd a0       	breq	80003b74 <fat_check_mount_noopen+0x120>
80003bc2:	30 59       	mov	r9,5
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003bc4:	e0 68 15 a0 	mov	r8,5536
80003bc8:	30 0c       	mov	r12,0
80003bca:	b0 89       	st.b	r8[0x0],r9
80003bcc:	d8 32       	popm	r0-r7,pc
80003bce:	31 88       	mov	r8,24
80003bd0:	30 0c       	mov	r12,0
80003bd2:	b6 88       	st.b	r11[0x0],r8
80003bd4:	d8 32       	popm	r0-r7,pc
80003bd6:	2f f2       	sub	r2,-1
80003bd8:	e0 42 00 64 	cp.w	r2,100
80003bdc:	c9 f1       	brne	80003b1a <fat_check_mount_noopen+0xc6>
80003bde:	cc bb       	rjmp	80003b74 <fat_check_mount_noopen+0x120>
80003be0:	e0 6e 15 98 	mov	lr,5528
80003be4:	bc 87       	st.b	lr[0x0],r7
80003be6:	e0 6e 15 88 	mov	lr,5512
80003bea:	bc 87       	st.b	lr[0x0],r7
80003bec:	ca 8b       	rjmp	80003b3c <fat_check_mount_noopen+0xe8>
80003bee:	31 88       	mov	r8,24
80003bf0:	30 1c       	mov	r12,1
80003bf2:	b6 88       	st.b	r11[0x0],r8
80003bf4:	d8 32       	popm	r0-r7,pc
80003bf6:	30 19       	mov	r9,1
80003bf8:	e0 68 15 a0 	mov	r8,5536
80003bfc:	30 1c       	mov	r12,1
80003bfe:	b0 89       	st.b	r8[0x0],r9
80003c00:	d8 32       	popm	r0-r7,pc
80003c02:	d7 03       	nop

80003c04 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003c04:	d4 31       	pushm	r0-r7,lr
80003c06:	20 9d       	sub	sp,36
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80003c08:	30 88       	mov	r8,8
80003c0a:	e0 6e 15 a0 	mov	lr,5536
80003c0e:	bc 88       	st.b	lr[0x0],r8

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80003c10:	30 38       	mov	r8,3
80003c12:	f0 0c 18 00 	cp.b	r12,r8
80003c16:	5f 0a       	sreq	r10
80003c18:	50 3a       	stdsp	sp[0xc],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80003c1a:	e0 63 15 9c 	mov	r3,5532
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003c1e:	18 94       	mov	r4,r12
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80003c20:	07 89       	ld.ub	r9,r3[0x0]
80003c22:	f0 09 18 00 	cp.b	r9,r8
80003c26:	5f 08       	sreq	r8
80003c28:	f5 e8 00 08 	and	r8,r10,r8
80003c2c:	e0 81 01 9f 	brne	80003f6a <fat_cluster_list+0x366>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80003c30:	e0 66 15 f8 	mov	r6,5624
80003c34:	6c 08       	ld.w	r8,r6[0x0]
80003c36:	58 08       	cp.w	r8,0
80003c38:	c7 b0       	breq	80003d2e <fat_cluster_list+0x12a>
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80003c3a:	e0 67 15 f0 	mov	r7,5616
80003c3e:	8f 08       	st.w	r7[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80003c40:	30 39       	mov	r9,3
80003c42:	f2 04 18 00 	cp.b	r4,r9
80003c46:	e0 81 02 00 	brne	80004046 <fat_cluster_list+0x442>
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c4a:	e0 6c 13 24 	mov	r12,4900
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003c4e:	3f f8       	mov	r8,-1
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c50:	50 4c       	stdsp	sp[0x10],r12
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003c52:	f9 68 00 15 	st.b	r12[21],r8
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003c56:	b8 a8       	st.b	r12[0x2],r8
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003c58:	b8 98       	st.b	r12[0x1],r8
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003c5a:	f9 68 00 16 	st.b	r12[22],r8
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003c5e:	30 08       	mov	r8,0
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c60:	f9 68 00 14 	st.b	r12[20],r8
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003c64:	e0 6b 15 a2 	mov	r11,5538
80003c68:	b6 88       	st.b	r11[0x0],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c6a:	30 18       	mov	r8,1
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003c6c:	50 6b       	stdsp	sp[0x18],r11
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c6e:	b8 88       	st.b	r12[0x0],r8
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80003c70:	e0 a0 03 7e 	rcall	8000436c <fat_clear_info_fat_mod>
80003c74:	e0 65 15 50 	mov	r5,5456
80003c78:	0b 9a       	ld.ub	r10,r5[0x1]
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80003c7a:	3f f8       	mov	r8,-1
80003c7c:	6c 19       	ld.w	r9,r6[0x4]
80003c7e:	ac 88       	st.b	r6[0x0],r8
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003c80:	30 32       	mov	r2,3
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80003c82:	e0 68 15 f8 	mov	r8,5624
80003c86:	2f 98       	sub	r8,-7
80003c88:	50 28       	stdsp	sp[0x8],r8
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80003c8a:	14 39       	cp.w	r9,r10
80003c8c:	c2 02       	brcc	80003ccc <fat_cluster_list+0xc8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003c8e:	6a 5c       	ld.w	r12,r5[0x14]
80003c90:	6a 4b       	ld.w	r11,r5[0x10]
80003c92:	f8 0b 00 0b 	add	r11,r12,r11
80003c96:	6e 08       	ld.w	r8,r7[0x0]
80003c98:	f6 09 00 09 	add	r9,r11,r9
80003c9c:	f0 cb 00 02 	sub	r11,r8,2
80003ca0:	f4 0b 03 49 	mac	r9,r10,r11
80003ca4:	8d 09       	st.w	r6[0x0],r9
80003ca6:	e0 61 15 f8 	mov	r1,5624
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80003caa:	30 29       	mov	r9,2
80003cac:	f2 04 18 00 	cp.b	r4,r9
80003cb0:	e0 80 01 f5 	breq	8000409a <fat_cluster_list+0x496>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80003cb4:	40 2c       	lddsp	r12,sp[0x8]
80003cb6:	e0 6b 15 f8 	mov	r11,5624
80003cba:	19 89       	ld.ub	r9,r12[0x0]
80003cbc:	f4 09 01 0e 	sub	lr,r10,r9
80003cc0:	97 1e       	st.w	r11[0x4],lr

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003cc2:	30 19       	mov	r9,1
80003cc4:	f2 04 18 00 	cp.b	r4,r9
80003cc8:	e0 80 00 a7 	breq	80003e16 <fat_cluster_list+0x212>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80003ccc:	30 0c       	mov	r12,0
80003cce:	fe b0 fc d3 	rcall	80003674 <fat_cluster_val>
80003cd2:	c7 20       	breq	80003db6 <fat_cluster_list+0x1b2>
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80003cd4:	6e 18       	ld.w	r8,r7[0x4]
80003cd6:	58 08       	cp.w	r8,0
80003cd8:	c6 f0       	breq	80003db6 <fat_cluster_list+0x1b2>
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80003cda:	07 89       	ld.ub	r9,r3[0x0]
80003cdc:	e4 09 18 00 	cp.b	r9,r2
80003ce0:	e0 80 00 91 	breq	80003e02 <fat_cluster_list+0x1fe>
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80003ce4:	30 2a       	mov	r10,2
80003ce6:	f4 09 18 00 	cp.b	r9,r10
80003cea:	e0 80 01 39 	breq	80003f5c <fat_cluster_list+0x358>
    if (fs_g_cluster.u32_val >= 0xFFF8)
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80003cee:	30 1a       	mov	r10,1
80003cf0:	f4 09 18 00 	cp.b	r9,r10
80003cf4:	c5 c0       	breq	80003dac <fat_cluster_list+0x1a8>
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
   }  // End of main loop
80003cf6:	30 01       	mov	r1,0
      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
      if (FS_CLUS_BAD == u8_cluster_status)
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80003cf8:	e0 69 15 f8 	mov	r9,5624
80003cfc:	13 8a       	ld.ub	r10,r9[0x0]
80003cfe:	3f f9       	mov	r9,-1
80003d00:	f2 0a 18 00 	cp.b	r10,r9
80003d04:	c5 e0       	breq	80003dc0 <fat_cluster_list+0x1bc>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80003d06:	30 19       	mov	r9,1
80003d08:	f2 04 18 00 	cp.b	r4,r9
80003d0c:	e0 80 00 c5 	breq	80003e96 <fat_cluster_list+0x292>
               fat_cache_clusterlist_update_finish();
               return true;                              // End of segment
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80003d10:	40 3c       	lddsp	r12,sp[0xc]
80003d12:	58 0c       	cp.w	r12,0
80003d14:	e0 81 00 ca 	brne	80003ea8 <fat_cluster_list+0x2a4>
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80003d18:	58 01       	cp.w	r1,0
80003d1a:	e0 81 01 e6 	brne	800040e6 <fat_cluster_list+0x4e2>
            fat_cache_clusterlist_update_finish();
            return true; // End of segment
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80003d1e:	6c 18       	ld.w	r8,r6[0x4]
80003d20:	0b 99       	ld.ub	r9,r5[0x1]
80003d22:	10 09       	add	r9,r8
80003d24:	6e 18       	ld.w	r8,r7[0x4]
80003d26:	8d 19       	st.w	r6[0x4],r9
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80003d28:	8f 08       	st.w	r7[0x0],r8
80003d2a:	0b 9a       	ld.ub	r10,r5[0x1]
   }  // End of main loop
80003d2c:	ca fb       	rjmp	80003c8a <fat_cluster_list+0x86>
   }

   if ( 0 == fs_g_seg.u32_addr )
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80003d2e:	40 39       	lddsp	r9,sp[0xc]
80003d30:	58 09       	cp.w	r9,0
80003d32:	c4 21       	brne	80003db6 <fat_cluster_list+0x1b2>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80003d34:	07 88       	ld.ub	r8,r3[0x0]
80003d36:	30 19       	mov	r9,1
80003d38:	f0 ca 00 01 	sub	r10,r8,1
80003d3c:	f2 0a 18 00 	cp.b	r10,r9
80003d40:	e0 88 01 87 	brls	8000404e <fat_cluster_list+0x44a>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
            return false;        // Position outside the root area
         }
      }
      if ( Is_fat32 )
80003d44:	30 39       	mov	r9,3
80003d46:	f2 08 18 00 	cp.b	r8,r9
80003d4a:	e0 80 01 21 	breq	80003f8c <fat_cluster_list+0x388>
80003d4e:	e0 67 15 f0 	mov	r7,5616
80003d52:	e0 65 15 50 	mov	r5,5456
80003d56:	6e 08       	ld.w	r8,r7[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003d58:	e0 62 13 24 	mov	r2,4900
80003d5c:	50 42       	stdsp	sp[0x10],r2
      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
      if (FS_CLUS_BAD == u8_cluster_status)
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80003d5e:	6c 1c       	ld.w	r12,r6[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003d60:	40 4e       	lddsp	lr,sp[0x10]
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80003d62:	0b 82       	ld.ub	r2,r5[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003d64:	1d 89       	ld.ub	r9,lr[0x0]
80003d66:	f2 0b 18 00 	cp.b	r11,r9
80003d6a:	e0 80 01 28 	breq	80003fba <fat_cluster_list+0x3b6>
80003d6e:	40 4e       	lddsp	lr,sp[0x10]
80003d70:	e0 61 13 24 	mov	r1,4900
80003d74:	fd 3a 00 14 	ld.ub	r10,lr[20]
80003d78:	f6 0a 18 00 	cp.b	r10,r11
80003d7c:	e0 80 01 0f 	breq	80003f9a <fat_cluster_list+0x396>
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80003d80:	40 42       	lddsp	r2,sp[0x10]
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80003d82:	f7 e9 20 09 	eor	r9,r11,r9
80003d86:	5c 59       	castu.b	r9
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80003d88:	f2 09 00 2a 	add	r10,r9,r9<<0x2
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80003d8c:	f4 ce ff ff 	sub	lr,r10,-1
80003d90:	e4 0e 09 28 	st.w	r2[lr<<0x2],r8
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80003d94:	e4 0a 00 28 	add	r8,r2,r10<<0x2
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80003d98:	91 2c       	st.w	r8[0x8],r12
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80003d9a:	b0 8b       	st.b	r8[0x0],r11
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
80003d9c:	e0 6e 15 a2 	mov	lr,5538
80003da0:	bc 89       	st.b	lr[0x0],r9
80003da2:	50 6e       	stdsp	sp[0x18],lr
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
80003da4:	3f f9       	mov	r9,-1
80003da6:	b0 a9       	st.b	r8[0x2],r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80003da8:	0b 9a       	ld.ub	r10,r5[0x1]
80003daa:	c6 8b       	rjmp	80003c7a <fat_cluster_list+0x76>
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80003dac:	e0 48 0f f7 	cp.w	r8,4087
80003db0:	e0 8b 00 06 	brhi	80003dbc <fat_cluster_list+0x1b8>
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFF7)
80003db4:	ca 11       	brne	80003cf6 <fat_cluster_list+0xf2>
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
   }  // End of main loop
80003db6:	30 0c       	mov	r12,0
}
80003db8:	2f 7d       	sub	sp,-36
80003dba:	d8 32       	popm	r0-r7,pc
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
   }  // End of main loop
80003dbc:	30 21       	mov	r1,2
80003dbe:	c9 db       	rjmp	80003cf8 <fat_cluster_list+0xf4>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80003dc0:	58 01       	cp.w	r1,0
80003dc2:	e0 81 01 b0 	brne	80004122 <fat_cluster_list+0x51e>
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
            fs_g_status = FS_ERR_OUT_LIST;
            return false;
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80003dc6:	6c 1a       	ld.w	r10,r6[0x4]
80003dc8:	0b 99       	ld.ub	r9,r5[0x1]
80003dca:	f4 09 01 09 	sub	r9,r10,r9
80003dce:	8d 19       	st.w	r6[0x4],r9
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80003dd0:	40 3c       	lddsp	r12,sp[0xc]
80003dd2:	58 0c       	cp.w	r12,0
80003dd4:	ca a0       	breq	80003d28 <fat_cluster_list+0x124>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80003dd6:	58 09       	cp.w	r9,0
80003dd8:	ca 81       	brne	80003d28 <fat_cluster_list+0x124>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80003dda:	e0 6b 15 f8 	mov	r11,5624
80003dde:	97 08       	st.w	r11[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80003de0:	e0 68 ff ff 	mov	r8,65535
80003de4:	ea 18 0f ff 	orh	r8,0xfff
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80003de8:	30 1c       	mov	r12,1
         {
            if( fs_g_seg.u32_size_or_pos == 0)
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80003dea:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80003dec:	fe b0 fc 44 	rcall	80003674 <fat_cluster_val>
80003df0:	ce 30       	breq	80003db6 <fat_cluster_list+0x1b2>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Resotre the next cluster
80003df2:	e0 69 15 f0 	mov	r9,5616
80003df6:	e0 6a 15 f8 	mov	r10,5624
80003dfa:	74 08       	ld.w	r8,r10[0x0]
80003dfc:	93 18       	st.w	r9[0x4],r8
80003dfe:	74 19       	ld.w	r9,r10[0x4]
80003e00:	c9 4b       	rjmp	80003d28 <fat_cluster_list+0x124>

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80003e02:	e0 6b ff f7 	mov	r11,65527
80003e06:	ea 1b 0f ff 	orh	r11,0xfff
80003e0a:	16 38       	cp.w	r8,r11
80003e0c:	fe 9b ff d8 	brhi	80003dbc <fat_cluster_list+0x1b8>
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
80003e10:	fe 91 ff 73 	brne	80003cf6 <fat_cluster_list+0xf2>
80003e14:	cd 1b       	rjmp	80003db6 <fat_cluster_list+0x1b2>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003e16:	07 8a       	ld.ub	r10,r3[0x0]
80003e18:	f2 0a 18 00 	cp.b	r10,r9
80003e1c:	fe 90 ff 58 	breq	80003ccc <fat_cluster_list+0xc8>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80003e20:	50 08       	stdsp	sp[0x0],r8
80003e22:	30 0c       	mov	r12,0
80003e24:	fe b0 fc 28 	rcall	80003674 <fat_cluster_val>
80003e28:	40 08       	lddsp	r8,sp[0x0]
80003e2a:	cc 60       	breq	80003db6 <fat_cluster_list+0x1b2>
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003e2c:	08 90       	mov	r0,r4
   if ( Is_fat32 )
   {
      fs_g_u16_pos_fat += 4;
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003e2e:	e0 61 13 20 	mov	r1,4896
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003e32:	e0 69 02 00 	mov	r9,512
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003e36:	0a 94       	mov	r4,r5
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80003e38:	6e 0b       	ld.w	r11,r7[0x0]
80003e3a:	f6 ca ff ff 	sub	r10,r11,-1
80003e3e:	8f 0a       	st.w	r7[0x0],r10
80003e40:	6e 1c       	ld.w	r12,r7[0x4]
80003e42:	18 3a       	cp.w	r10,r12
80003e44:	e0 81 01 16 	brne	80004070 <fat_cluster_list+0x46c>
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003e48:	07 8c       	ld.ub	r12,r3[0x0]
80003e4a:	e4 0c 18 00 	cp.b	r12,r2
80003e4e:	c4 30       	breq	80003ed4 <fat_cluster_list+0x2d0>
   {
      fs_g_u16_pos_fat += 4;
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003e50:	82 0b       	ld.sh	r11,r1[0x0]
80003e52:	e0 6a 13 20 	mov	r10,4896
80003e56:	2f eb       	sub	r11,-2
80003e58:	50 5a       	stdsp	sp[0x14],r10
80003e5a:	5c 8b       	casts.h	r11
80003e5c:	a2 0b       	st.h	r1[0x0],r11
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003e5e:	f2 0b 19 00 	cp.h	r11,r9
80003e62:	c4 30       	breq	80003ee8 <fat_cluster_list+0x2e4>
80003e64:	5c 7b       	castu.h	r11
80003e66:	e0 65 13 50 	mov	r5,4944
80003e6a:	f6 ca ff ff 	sub	r10,r11,-1
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
80003e6e:	ea 0a 07 0e 	ld.ub	lr,r5[r10]
      if( !fat_cache_read_sector( true ))
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003e72:	ee ca ff fc 	sub	r10,r7,-4
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
80003e76:	b4 ae       	st.b	r10[0x2],lr
      if( !fat_cache_read_sector( true ))
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003e78:	ea 0b 07 0e 	ld.ub	lr,r5[r11]
80003e7c:	b4 be       	st.b	r10[0x3],lr
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32

   if ( Is_fat32 )
80003e7e:	e4 0c 18 00 	cp.b	r12,r2
80003e82:	cd b1       	brne	80003e38 <fat_cluster_list+0x234>
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003e84:	e0 6c 13 50 	mov	r12,4944
80003e88:	f8 0b 00 0b 	add	r11,r12,r11
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80003e8c:	17 bc       	ld.ub	r12,r11[0x3]
80003e8e:	b4 8c       	st.b	r10[0x0],r12
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32

   if ( Is_fat32 )
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003e90:	17 ab       	ld.ub	r11,r11[0x2]
80003e92:	b4 9b       	st.b	r10[0x1],r11
80003e94:	cd 2b       	rjmp	80003e38 <fat_cluster_list+0x234>
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80003e96:	6e 09       	ld.w	r9,r7[0x0]
80003e98:	2f f9       	sub	r9,-1
80003e9a:	10 39       	cp.w	r9,r8
80003e9c:	fe 90 ff 3e 	breq	80003d18 <fat_cluster_list+0x114>
            if (FS_CLUST_ACT_CLR == opt_action)
            {
               return fat_update_fat2();
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80003ea0:	fe b0 f6 b6 	rcall	80002c0c <fat_cache_clusterlist_update_finish>
80003ea4:	30 1c       	mov	r12,1
            return true; // End of segment
80003ea6:	c8 9b       	rjmp	80003db8 <fat_cluster_list+0x1b4>
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80003ea8:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80003eaa:	30 08       	mov	r8,0
80003eac:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80003eae:	6c 19       	ld.w	r9,r6[0x4]
80003eb0:	0b 98       	ld.ub	r8,r5[0x1]
80003eb2:	10 39       	cp.w	r9,r8
80003eb4:	c0 82       	brcc	80003ec4 <fat_cluster_list+0x2c0>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80003eb6:	e0 68 ff ff 	mov	r8,65535
80003eba:	ea 18 0f ff 	orh	r8,0xfff
80003ebe:	e0 6b 15 f0 	mov	r11,5616
80003ec2:	97 18       	st.w	r11[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80003ec4:	30 1c       	mov	r12,1
80003ec6:	fe b0 fb d7 	rcall	80003674 <fat_cluster_val>
80003eca:	fe 90 ff 76 	breq	80003db6 <fat_cluster_list+0x1b2>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Resotre the next cluster
80003ece:	6c 08       	ld.w	r8,r6[0x0]
80003ed0:	8f 18       	st.w	r7[0x4],r8
80003ed2:	c2 3b       	rjmp	80003d18 <fat_cluster_list+0x114>
bool  fat_cluster_readnext( void )
{
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
   {
      fs_g_u16_pos_fat += 4;
80003ed4:	82 0b       	ld.sh	r11,r1[0x0]
80003ed6:	e0 6e 13 20 	mov	lr,4896
80003eda:	2f cb       	sub	r11,-4
80003edc:	50 5e       	stdsp	sp[0x14],lr
80003ede:	5c 8b       	casts.h	r11
80003ee0:	a2 0b       	st.h	r1[0x0],r11
      // Is_fat16
      fs_g_u16_pos_fat += 2;
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003ee2:	f2 0b 19 00 	cp.h	r11,r9
80003ee6:	cb f1       	brne	80003e64 <fat_cluster_list+0x260>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
      fs_gu32_addrsector++;
80003ee8:	e0 6a 13 0c 	mov	r10,4876

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003eec:	30 0c       	mov	r12,0
      fs_gu32_addrsector++;
80003eee:	74 0b       	ld.w	r11,r10[0x0]

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003ef0:	40 5e       	lddsp	lr,sp[0x14]
      fs_gu32_addrsector++;
80003ef2:	2f fb       	sub	r11,-1

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003ef4:	bc 0c       	st.h	lr[0x0],r12
      fs_gu32_addrsector++;
80003ef6:	95 0b       	st.w	r10[0x0],r11
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80003ef8:	e0 6e 15 d8 	mov	lr,5592
80003efc:	09 8c       	ld.ub	r12,r4[0x0]
80003efe:	1d 8a       	ld.ub	r10,lr[0x0]
80003f00:	f8 0a 18 00 	cp.b	r10,r12
80003f04:	c3 b0       	breq	80003f7a <fat_cluster_list+0x376>
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80003f06:	e0 6a 15 d8 	mov	r10,5592
80003f0a:	f5 3a 00 08 	ld.ub	r10,r10[8]
80003f0e:	50 7a       	stdsp	sp[0x1c],r10
80003f10:	14 9e       	mov	lr,r10
80003f12:	30 1a       	mov	r10,1
80003f14:	f4 0e 18 00 	cp.b	lr,r10
80003f18:	e0 80 00 cb 	breq	800040ae <fat_cluster_list+0x4aa>
80003f1c:	e0 65 13 50 	mov	r5,4944

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003f20:	3f fa       	mov	r10,-1

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003f22:	e0 6e 15 d8 	mov	lr,5592

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003f26:	bc 8a       	st.b	lr[0x0],r10
   fs_g_sectorcache.u8_dirty              = false;
80003f28:	30 0a       	mov	r10,0
80003f2a:	fd 6a 00 08 	st.b	lr[8],r10
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003f2e:	3f fa       	mov	r10,-1
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003f30:	50 19       	stdsp	sp[0x4],r9
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003f32:	9d 3a       	st.w	lr[0xc],r10
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003f34:	50 08       	stdsp	sp[0x0],r8

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003f36:	9d 1b       	st.w	lr[0x4],r11
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003f38:	e0 6a 13 50 	mov	r10,4944
80003f3c:	e0 a0 18 cc 	rcall	800070d4 <memory_2_ram>
80003f40:	40 19       	lddsp	r9,sp[0x4]
80003f42:	40 08       	lddsp	r8,sp[0x0]
80003f44:	e0 81 00 a4 	brne	8000408c <fat_cluster_list+0x488>
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003f48:	40 5a       	lddsp	r10,sp[0x14]
80003f4a:	94 8b       	ld.uh	r11,r10[0x0]
80003f4c:	09 8a       	ld.ub	r10,r4[0x0]
80003f4e:	e0 6e 15 d8 	mov	lr,5592
80003f52:	07 8c       	ld.ub	r12,r3[0x0]
80003f54:	bc 8a       	st.b	lr[0x0],r10
80003f56:	f6 ca ff ff 	sub	r10,r11,-1
80003f5a:	c8 ab       	rjmp	80003e6e <fat_cluster_list+0x26a>
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80003f5c:	e0 48 ff f7 	cp.w	r8,65527
80003f60:	fe 9b ff 2e 	brhi	80003dbc <fat_cluster_list+0x1b8>
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
80003f64:	fe 91 fe c9 	brne	80003cf6 <fat_cluster_list+0xf2>
80003f68:	c2 7b       	rjmp	80003db6 <fat_cluster_list+0x1b2>
   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80003f6a:	50 1b       	stdsp	sp[0x4],r11
80003f6c:	3f fc       	mov	r12,-1
80003f6e:	e0 a0 02 bb 	rcall	800044e4 <fat_write_fat32_FSInfo>
80003f72:	40 1b       	lddsp	r11,sp[0x4]
80003f74:	fe 91 fe 5e 	brne	80003c30 <fat_cluster_list+0x2c>
80003f78:	c1 fb       	rjmp	80003db6 <fat_cluster_list+0x1b2>
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80003f7a:	7c 1a       	ld.w	r10,lr[0x4]
80003f7c:	14 3b       	cp.w	r11,r10
80003f7e:	cc 41       	brne	80003f06 <fat_cluster_list+0x302>
80003f80:	30 1a       	mov	r10,1
80003f82:	30 0b       	mov	r11,0
80003f84:	e0 65 13 50 	mov	r5,4944
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003f88:	07 8c       	ld.ub	r12,r3[0x0]
80003f8a:	c7 2b       	rjmp	80003e6e <fat_cluster_list+0x26a>
         }
      }
      if ( Is_fat32 )
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80003f8c:	e0 67 15 f0 	mov	r7,5616
80003f90:	e0 65 15 50 	mov	r5,5456
80003f94:	6a 68       	ld.w	r8,r5[0x18]
80003f96:	8f 08       	st.w	r7[0x0],r8
80003f98:	ce 0a       	rjmp	80003d58 <fat_cluster_list+0x154>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003f9a:	e3 3a 00 16 	ld.ub	r10,r1[22]
80003f9e:	e4 0a 18 00 	cp.b	r10,r2
80003fa2:	fe 91 fe ef 	brne	80003d80 <fat_cluster_list+0x17c>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80003fa6:	62 6a       	ld.w	r10,r1[0x18]
80003fa8:	10 3a       	cp.w	r10,r8
80003faa:	fe 91 fe eb 	brne	80003d80 <fat_cluster_list+0x17c>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80003fae:	62 7a       	ld.w	r10,r1[0x1c]
80003fb0:	14 3c       	cp.w	r12,r10
80003fb2:	fe 93 fe e7 	brlo	80003d80 <fat_cluster_list+0x17c>
80003fb6:	30 12       	mov	r2,1
80003fb8:	c0 f8       	rjmp	80003fd6 <fat_cluster_list+0x3d2>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003fba:	1d aa       	ld.ub	r10,lr[0x2]
80003fbc:	e4 0a 18 00 	cp.b	r10,r2
80003fc0:	fe 91 fe d7 	brne	80003d6e <fat_cluster_list+0x16a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80003fc4:	7c 1a       	ld.w	r10,lr[0x4]
80003fc6:	10 3a       	cp.w	r10,r8
80003fc8:	fe 91 fe d3 	brne	80003d6e <fat_cluster_list+0x16a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80003fcc:	7c 2a       	ld.w	r10,lr[0x8]
80003fce:	14 3c       	cp.w	r12,r10
80003fd0:	fe 93 fe cf 	brlo	80003d6e <fat_cluster_list+0x16a>
80003fd4:	30 02       	mov	r2,0
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80003fd6:	e4 00 15 02 	lsl	r0,r2,0x2
80003fda:	40 48       	lddsp	r8,sp[0x10]
80003fdc:	04 00       	add	r0,r2
80003fde:	f8 0a 01 0a 	sub	r10,r12,r10
80003fe2:	a3 60       	lsl	r0,0x2
80003fe4:	e0 61 13 24 	mov	r1,4900
80003fe8:	00 08       	add	r8,r0
80003fea:	70 4e       	ld.w	lr,r8[0x10]
80003fec:	14 3e       	cp.w	lr,r10
80003fee:	e0 88 00 c8 	brls	8000417e <fat_cluster_list+0x57a>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80003ff2:	14 1e       	sub	lr,r10
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80003ff4:	8d 1e       	st.w	r6[0x4],lr
80003ff6:	70 3c       	ld.w	r12,r8[0xc]
80003ff8:	18 0a       	add	r10,r12
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
                  fs_g_u8_current_cache = u8_i;
80003ffa:	8d 0a       	st.w	r6[0x0],r10
80003ffc:	e0 6a 15 a2 	mov	r10,5538

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004000:	b4 82       	st.b	r10[0x0],r2
80004002:	11 9a       	ld.ub	r10,r8[0x1]
80004004:	f2 0b 18 00 	cp.b	r11,r9
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004008:	c0 81       	brne	80004018 <fat_cluster_list+0x414>
8000400a:	03 98       	ld.ub	r8,r1[0x1]
8000400c:	f4 08 18 00 	cp.b	r8,r10
80004010:	f7 b8 03 ff 	sublo	r8,-1

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004014:	e3 f8 3e 01 	st.bcs	r1[0x1],r8
80004018:	40 4c       	lddsp	r12,sp[0x10]
8000401a:	e0 68 13 24 	mov	r8,4900
8000401e:	f9 39 00 14 	ld.ub	r9,r12[20]
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80004022:	f6 09 18 00 	cp.b	r9,r11
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004026:	c0 91       	brne	80004038 <fat_cluster_list+0x434>
80004028:	f1 39 00 15 	ld.ub	r9,r8[21]
8000402c:	f2 0a 18 00 	cp.b	r10,r9
80004030:	f7 b9 0b ff 	subhi	r9,-1
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80004034:	f1 f9 be 15 	st.bhi	r8[0x15],r9
80004038:	40 4b       	lddsp	r11,sp[0x10]
8000403a:	30 08       	mov	r8,0
8000403c:	f6 00 00 00 	add	r0,r11,r0
80004040:	30 1c       	mov	r12,1
80004042:	a0 98       	st.b	r0[0x1],r8
80004044:	cb aa       	rjmp	80003db8 <fat_cluster_list+0x1b4>

      if ( Is_fat12 || Is_fat16 )
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004046:	e0 65 15 50 	mov	r5,5456
8000404a:	fe 9f fe 87 	bral	80003d58 <fat_cluster_list+0x154>
8000404e:	e0 69 15 50 	mov	r9,5456
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80004052:	6c 18       	ld.w	r8,r6[0x4]
80004054:	f3 1a 00 1a 	ld.uh	r10,r9[26]
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004058:	14 38       	cp.w	r8,r10
8000405a:	c3 f2       	brcc	800040d8 <fat_cluster_list+0x4d4>
8000405c:	10 1a       	sub	r10,r8
8000405e:	30 1c       	mov	r12,1
80004060:	8d 1a       	st.w	r6[0x4],r10
80004062:	f3 1a 00 18 	ld.uh	r10,r9[24]
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004066:	72 49       	ld.w	r9,r9[0x10]
80004068:	12 08       	add	r8,r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
8000406a:	14 08       	add	r8,r10
8000406c:	8d 08       	st.w	r6[0x0],r8
8000406e:	ca 5a       	rjmp	80003db8 <fat_cluster_list+0x1b4>
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004070:	e0 6a 15 f0 	mov	r10,5616
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004074:	08 95       	mov	r5,r4
80004076:	6c 19       	ld.w	r9,r6[0x4]
80004078:	f6 08 01 08 	sub	r8,r11,r8
                  break;
8000407c:	95 0b       	st.w	r10[0x0],r11
8000407e:	00 94       	mov	r4,r0
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
80004080:	0b 9a       	ld.ub	r10,r5[0x1]
80004082:	b5 38       	mul	r8,r10
80004084:	12 08       	add	r8,r9
80004086:	8d 18       	st.w	r6[0x4],r8
80004088:	fe 9f fe 22 	bral	80003ccc <fat_cluster_list+0xc8>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
8000408c:	e0 6c 15 a0 	mov	r12,5536
80004090:	30 18       	mov	r8,1
80004092:	b8 88       	st.b	r12[0x0],r8
            fat_cache_clusterlist_update_finish();
80004094:	30 0c       	mov	r12,0
80004096:	fe 9f fe 91 	bral	80003db8 <fat_cluster_list+0x1b4>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
8000409a:	62 18       	ld.w	r8,r1[0x4]
            return true;
8000409c:	f4 08 01 08 	sub	r8,r10,r8
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800040a0:	83 18       	st.w	r1[0x4],r8
800040a2:	fe b0 f5 b5 	rcall	80002c0c <fat_cache_clusterlist_update_finish>
800040a6:	30 1c       	mov	r12,1
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800040a8:	83 1c       	st.w	r1[0x4],r12
800040aa:	fe 9f fe 87 	bral	80003db8 <fat_cluster_list+0x1b4>
800040ae:	e0 6e 15 d8 	mov	lr,5592
800040b2:	30 0a       	mov	r10,0
800040b4:	fd 6a 00 08 	st.b	lr[8],r10
800040b8:	1d 8c       	ld.ub	r12,lr[0x0]
      {
         fs_g_status = FS_LUN_WP;
800040ba:	50 19       	stdsp	sp[0x4],r9
800040bc:	50 08       	stdsp	sp[0x0],r8
800040be:	e0 a0 18 05 	rcall	800070c8 <mem_wr_protect>
800040c2:	50 8c       	stdsp	sp[0x20],r12
800040c4:	40 19       	lddsp	r9,sp[0x4]
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
            return true;
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
800040c6:	40 08       	lddsp	r8,sp[0x0]
800040c8:	c1 60       	breq	800040f4 <fat_cluster_list+0x4f0>
800040ca:	e0 6c 15 a0 	mov	r12,5536
            return false;        // Position outside the root area
800040ce:	31 48       	mov	r8,20
800040d0:	b8 88       	st.b	r12[0x0],r8

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
800040d2:	30 0c       	mov	r12,0
800040d4:	fe 9f fe 72 	bral	80003db8 <fat_cluster_list+0x1b4>
800040d8:	31 a8       	mov	r8,26
            {
               return fat_update_fat2();
800040da:	e0 62 15 a0 	mov	r2,5536
800040de:	40 3c       	lddsp	r12,sp[0xc]
800040e0:	a4 88       	st.b	r2[0x0],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800040e2:	fe 9f fe 6b 	bral	80003db8 <fat_cluster_list+0x1b4>
800040e6:	40 3a       	lddsp	r10,sp[0xc]
800040e8:	58 0a       	cp.w	r10,0
800040ea:	fe 90 fe db 	breq	80003ea0 <fat_cluster_list+0x29c>
800040ee:	c4 9d       	rcall	80004380 <fat_update_fat2>
800040f0:	fe 9f fe 64 	bral	80003db8 <fat_cluster_list+0x1b4>
800040f4:	e0 6a 15 d8 	mov	r10,5592
800040f8:	e0 6e 15 d8 	mov	lr,5592
      {
         fs_g_status = FS_ERR_HW;
800040fc:	74 1b       	ld.w	r11,r10[0x4]
800040fe:	1d 8c       	ld.ub	r12,lr[0x0]
80004100:	e0 65 13 50 	mov	r5,4944
80004104:	50 19       	stdsp	sp[0x4],r9
80004106:	50 08       	stdsp	sp[0x0],r8
         if (FS_CLUS_END == u8_cluster_status)
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004108:	0a 9a       	mov	r10,r5
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000410a:	e0 a0 17 ef 	rcall	800070e8 <ram_2_memory>
      if (0xFF == MSB0(fs_g_seg.u32_addr))
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
8000410e:	40 19       	lddsp	r9,sp[0x4]

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004110:	40 08       	lddsp	r8,sp[0x0]
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004112:	c3 10       	breq	80004174 <fat_cluster_list+0x570>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004114:	40 7a       	lddsp	r10,sp[0x1c]
         if (FS_CLUS_END == u8_cluster_status)
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004116:	e0 6b 15 a0 	mov	r11,5536
8000411a:	40 8c       	lddsp	r12,sp[0x20]
8000411c:	b6 8a       	st.b	r11[0x0],r10
8000411e:	fe 9f fe 4d 	bral	80003db8 <fat_cluster_list+0x1b4>
80004122:	40 69       	lddsp	r9,sp[0x18]
80004124:	6e 08       	ld.w	r8,r7[0x0]
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004126:	13 8a       	ld.ub	r10,r9[0x0]
80004128:	6c 17       	ld.w	r7,r6[0x4]
8000412a:	0b 99       	ld.ub	r9,r5[0x1]
8000412c:	8d 19       	st.w	r6[0x4],r9
8000412e:	6a 4b       	ld.w	r11,r5[0x10]
80004130:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80004134:	40 42       	lddsp	r2,sp[0x10]
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
            if (FS_CLUST_ACT_CLR != opt_action)
80004136:	e4 0a 00 2a 	add	r10,r2,r10<<0x2
8000413a:	74 2c       	ld.w	r12,r10[0x8]
8000413c:	0e 1c       	sub	r12,r7
               fat_cache_clusterlist_update_finish();
8000413e:	95 2c       	st.w	r10[0x8],r12
80004140:	6a 5a       	ld.w	r10,r5[0x14]
80004142:	16 0a       	add	r10,r11
80004144:	f0 cb 00 02 	sub	r11,r8,2

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
            fs_g_status = FS_ERR_OUT_LIST;
80004148:	b7 39       	mul	r9,r11
8000414a:	f4 09 00 09 	add	r9,r10,r9
8000414e:	8d 09       	st.w	r6[0x0],r9
80004150:	30 39       	mov	r9,3
            return false;
80004152:	f2 04 18 00 	cp.b	r4,r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80004156:	c0 60       	breq	80004162 <fat_cluster_list+0x55e>
80004158:	fe b0 f5 5a 	rcall	80002c0c <fat_cache_clusterlist_update_finish>
8000415c:	e0 68 15 f0 	mov	r8,5616
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004160:	70 08       	ld.w	r8,r8[0x0]
80004162:	8d 08       	st.w	r6[0x0],r8
80004164:	e0 6e 15 a0 	mov	lr,5536
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004168:	31 a8       	mov	r8,26
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
8000416a:	8d 17       	st.w	r6[0x4],r7
8000416c:	bc 88       	st.b	lr[0x0],r8
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
8000416e:	30 0c       	mov	r12,0
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004170:	fe 9f fe 24 	bral	80003db8 <fat_cluster_list+0x1b4>
80004174:	e0 6c 13 0c 	mov	r12,4876
80004178:	78 0b       	ld.w	r11,r12[0x0]
8000417a:	09 8c       	ld.ub	r12,r4[0x0]
8000417c:	cd 2a       	rjmp	80003f20 <fat_cluster_list+0x31c>
                  fat_cache_clusterlist_update_select();
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the resultat in this cache
                  fs_g_u8_current_cache = u8_i;
8000417e:	f0 cb ff f8 	sub	r11,r8,-8
80004182:	76 09       	ld.w	r9,r11[0x0]
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
80004184:	fc 09 00 09 	add	r9,lr,r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004188:	0b 9a       	ld.ub	r10,r5[0x1]
8000418a:	f2 c1 00 01 	sub	r1,r9,1
8000418e:	97 0c       	st.w	r11[0x0],r12
80004190:	e2 0a 0d 00 	divu	r0,r1,r10
80004194:	f4 00 02 49 	mul	r9,r10,r0
80004198:	f8 09 01 09 	sub	r9,r12,r9
8000419c:	8d 19       	st.w	r6[0x4],r9
8000419e:	e0 69 15 a2 	mov	r9,5538
800041a2:	b2 82       	st.b	r9[0x0],r2
800041a4:	50 69       	stdsp	sp[0x18],r9
800041a6:	3f f9       	mov	r9,-1
800041a8:	b0 a9       	st.b	r8[0x2],r9
800041aa:	70 39       	ld.w	r9,r8[0xc]
800041ac:	6a 48       	ld.w	r8,r5[0x10]
800041ae:	fc 09 00 09 	add	r9,lr,r9
800041b2:	20 19       	sub	r9,1
800041b4:	10 19       	sub	r9,r8
800041b6:	6a 58       	ld.w	r8,r5[0x14]
800041b8:	10 19       	sub	r9,r8
800041ba:	f2 0a 0d 08 	divu	r8,r9,r10
800041be:	2f e8       	sub	r8,-2
800041c0:	8f 08       	st.w	r7[0x0],r8
800041c2:	fe 9f fd 5c 	bral	80003c7a <fat_cluster_list+0x76>
800041c6:	d7 03       	nop

800041c8 <fat_read_dir>:
800041c8:	eb cd 40 fe 	pushm	r1-r7,lr
800041cc:	e0 68 15 9c 	mov	r8,5532
800041d0:	e0 67 15 d8 	mov	r7,5592
800041d4:	90 95       	ld.uh	r5,r8[0x2]
800041d6:	e0 66 15 50 	mov	r6,5456
800041da:	a5 85       	lsr	r5,0x4
800041dc:	0f 89       	ld.ub	r9,r7[0x0]
800041de:	0d 88       	ld.ub	r8,r6[0x0]
800041e0:	f0 09 18 00 	cp.b	r9,r8
800041e4:	c0 d0       	breq	800041fe <fat_read_dir+0x36>
800041e6:	6c 88       	ld.w	r8,r6[0x20]
800041e8:	e0 64 15 f8 	mov	r4,5624
800041ec:	30 0b       	mov	r11,0
800041ee:	89 08       	st.w	r4[0x0],r8
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
800041f0:	89 15       	st.w	r4[0x4],r5
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
         return true;
      }
   }
   return false;
}
800041f2:	30 2c       	mov	r12,2
800041f4:	fe b0 fd 08 	rcall	80003c04 <fat_cluster_list>

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
800041f8:	c0 91       	brne	8000420a <fat_read_dir+0x42>
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800041fa:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800041fe:	6e 38       	ld.w	r8,r7[0xc]
80004200:	6c 89       	ld.w	r9,r6[0x20]
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004202:	12 38       	cp.w	r8,r9
80004204:	c3 70       	breq	80004272 <fat_read_dir+0xaa>
80004206:	12 98       	mov	r8,r9
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004208:	cf 0b       	rjmp	800041e8 <fat_read_dir+0x20>
8000420a:	68 0b       	ld.w	r11,r4[0x0]
8000420c:	e0 64 13 0c 	mov	r4,4876
80004210:	89 0b       	st.w	r4[0x0],r11
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80004212:	0d 8c       	ld.ub	r12,r6[0x0]
80004214:	0f 88       	ld.ub	r8,r7[0x0]
80004216:	f8 08 18 00 	cp.b	r8,r12
8000421a:	c1 f0       	breq	80004258 <fat_read_dir+0x90>
8000421c:	ef 33 00 08 	ld.ub	r3,r7[8]

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80004220:	e0 61 15 d8 	mov	r1,5592
   fs_g_sectorcache.u8_dirty              = false;
80004224:	30 18       	mov	r8,1
80004226:	f0 03 18 00 	cp.b	r3,r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000422a:	c2 90       	breq	8000427c <fat_read_dir+0xb4>

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000422c:	3f f8       	mov	r8,-1
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000422e:	ae 88       	st.b	r7[0x0],r8
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80004230:	30 08       	mov	r8,0
80004232:	ef 68 00 08 	st.b	r7[8],r8
80004236:	3f f8       	mov	r8,-1
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004238:	8f 1b       	st.w	r7[0x4],r11
8000423a:	8f 38       	st.w	r7[0xc],r8
8000423c:	e0 6a 13 50 	mov	r10,4944
      fs_gu32_addrsector = fs_g_seg.u32_addr;
      if( fat_cache_read_sector( true ) )
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004240:	e0 a0 17 4a 	rcall	800070d4 <memory_2_ram>
80004244:	c1 01       	brne	80004264 <fat_read_dir+0x9c>
         return true;
80004246:	0d 89       	ld.ub	r9,r6[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004248:	e0 68 15 d8 	mov	r8,5592
8000424c:	b0 89       	st.b	r8[0x0],r9
8000424e:	6c 88       	ld.w	r8,r6[0x20]
80004250:	8f 45       	st.w	r7[0x10],r5
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
80004252:	8f 38       	st.w	r7[0xc],r8
80004254:	30 1c       	mov	r12,1
80004256:	cd 2b       	rjmp	800041fa <fat_read_dir+0x32>
80004258:	e0 68 15 d8 	mov	r8,5592
8000425c:	70 18       	ld.w	r8,r8[0x4]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000425e:	10 3b       	cp.w	r11,r8
80004260:	cd e1       	brne	8000421c <fat_read_dir+0x54>
80004262:	cf 6b       	rjmp	8000424e <fat_read_dir+0x86>
80004264:	30 19       	mov	r9,1
80004266:	e0 68 15 a0 	mov	r8,5536
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000426a:	30 0c       	mov	r12,0
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000426c:	b0 89       	st.b	r8[0x0],r9
8000426e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80004272:	6e 49       	ld.w	r9,r7[0x10]
80004274:	0a 39       	cp.w	r9,r5
80004276:	cb 91       	brne	800041e8 <fat_read_dir+0x20>
      {
         fs_g_status = FS_LUN_WP;
80004278:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000427c:	30 08       	mov	r8,0
8000427e:	03 8c       	ld.ub	r12,r1[0x0]
80004280:	e3 68 00 08 	st.b	r1[8],r8
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80004284:	e0 a0 17 22 	rcall	800070c8 <mem_wr_protect>
80004288:	18 92       	mov	r2,r12
8000428a:	c0 80       	breq	8000429a <fat_read_dir+0xd2>
8000428c:	31 49       	mov	r9,20
8000428e:	e0 68 15 a0 	mov	r8,5536
      {
         fs_g_status = FS_ERR_HW;
80004292:	30 0c       	mov	r12,0
80004294:	b0 89       	st.b	r8[0x0],r9
80004296:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000429a:	03 8c       	ld.ub	r12,r1[0x0]
8000429c:	e0 6a 13 50 	mov	r10,4944
800042a0:	62 1b       	ld.w	r11,r1[0x4]
800042a2:	e0 a0 17 23 	rcall	800070e8 <ram_2_memory>
800042a6:	c0 70       	breq	800042b4 <fat_read_dir+0xec>
800042a8:	e0 68 15 a0 	mov	r8,5536
800042ac:	04 9c       	mov	r12,r2
800042ae:	b0 83       	st.b	r8[0x0],r3
800042b0:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800042b4:	68 0b       	ld.w	r11,r4[0x0]
800042b6:	0d 8c       	ld.ub	r12,r6[0x0]
800042b8:	cb ab       	rjmp	8000422c <fat_read_dir+0x64>
800042ba:	d7 03       	nop

800042bc <fat_read_file>:
800042bc:	d4 21       	pushm	r4-r7,lr
800042be:	e0 66 13 10 	mov	r6,4880
800042c2:	18 97       	mov	r7,r12
800042c4:	6c 38       	ld.w	r8,r6[0xc]
800042c6:	30 29       	mov	r9,2
800042c8:	f0 05 16 09 	lsr	r5,r8,0x9
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
800042cc:	f2 0c 18 00 	cp.b	r12,r9
         return true;      // The internal cache contains the sector ascked
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
800042d0:	c1 80       	breq	80004300 <fat_read_file+0x44>
800042d2:	30 39       	mov	r9,3
800042d4:	f2 0c 18 00 	cp.b	r12,r9
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
800042d8:	c1 00       	breq	800042f8 <fat_read_file+0x3c>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800042da:	6c 19       	ld.w	r9,r6[0x4]
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
800042dc:	e0 68 15 f8 	mov	r8,5624
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800042e0:	30 1b       	mov	r11,1
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
800042e2:	91 15       	st.w	r8[0x4],r5
800042e4:	91 09       	st.w	r8[0x0],r9
800042e6:	0e 9c       	mov	r12,r7
800042e8:	fe b0 fc 8e 	rcall	80003c04 <fat_cluster_list>
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
800042ec:	c0 91       	brne	800042fe <fat_read_file+0x42>
800042ee:	30 38       	mov	r8,3
800042f0:	f0 07 18 00 	cp.b	r7,r8
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
800042f4:	c2 90       	breq	80004346 <fat_read_file+0x8a>
800042f6:	d8 2a       	popm	r4-r7,pc,r12=0
800042f8:	6c 19       	ld.w	r9,r6[0x4]
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
800042fa:	58 09       	cp.w	r9,0
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800042fc:	c2 01       	brne	8000433c <fat_read_file+0x80>
800042fe:	da 2a       	popm	r4-r7,pc,r12=1
80004300:	e0 67 15 d8 	mov	r7,5592
80004304:	e0 68 15 50 	mov	r8,5456
80004308:	0f 89       	ld.ub	r9,r7[0x0]
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
8000430a:	11 88       	ld.ub	r8,r8[0x0]
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000430c:	f0 09 18 00 	cp.b	r9,r8
80004310:	c2 30       	breq	80004356 <fat_read_file+0x9a>
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004312:	6c 18       	ld.w	r8,r6[0x4]
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80004314:	e0 64 15 f8 	mov	r4,5624
80004318:	30 1b       	mov	r11,1
8000431a:	89 08       	st.w	r4[0x0],r8
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
8000431c:	89 15       	st.w	r4[0x4],r5
8000431e:	16 9c       	mov	r12,r11
80004320:	fe b0 fc 72 	rcall	80003c04 <fat_cluster_list>
         if( fat_cache_read_sector( true ) )
80004324:	ce 90       	breq	800042f6 <fat_read_file+0x3a>
80004326:	68 09       	ld.w	r9,r4[0x0]
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80004328:	e0 68 13 0c 	mov	r8,4876
8000432c:	91 09       	st.w	r8[0x0],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
8000432e:	fe b0 f8 db 	rcall	800034e4 <T.79>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80004332:	ce 20       	breq	800042f6 <fat_read_file+0x3a>
80004334:	6c 18       	ld.w	r8,r6[0x4]
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004336:	8f 45       	st.w	r7[0x10],r5
80004338:	8f 38       	st.w	r7[0xc],r8
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
8000433a:	da 2a       	popm	r4-r7,pc,r12=1
8000433c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004340:	cc e0       	breq	800042dc <fat_read_file+0x20>
80004342:	2f f5       	sub	r5,-1
80004344:	cc cb       	rjmp	800042dc <fat_read_file+0x20>
80004346:	e0 68 15 a0 	mov	r8,5536
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
8000434a:	11 89       	ld.ub	r9,r8[0x0]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000434c:	31 a8       	mov	r8,26
8000434e:	f0 09 18 00 	cp.b	r9,r8
80004352:	5f 0c       	sreq	r12
80004354:	d8 22       	popm	r4-r7,pc
80004356:	6e 38       	ld.w	r8,r7[0xc]
80004358:	6c 19       	ld.w	r9,r6[0x4]
8000435a:	12 38       	cp.w	r8,r9
8000435c:	c0 30       	breq	80004362 <fat_read_file+0xa6>
8000435e:	12 98       	mov	r8,r9
80004360:	cd ab       	rjmp	80004314 <fat_read_file+0x58>
80004362:	6e 49       	ld.w	r9,r7[0x10]
80004364:	0a 39       	cp.w	r9,r5
80004366:	cd 71       	brne	80004314 <fat_read_file+0x58>
80004368:	cc bb       	rjmp	800042fe <fat_read_file+0x42>
8000436a:	d7 03       	nop

8000436c <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000436c:	3f f9       	mov	r9,-1
8000436e:	e0 68 15 84 	mov	r8,5508
   fs_g_u32_last_mod_fat = 0;
80004372:	91 09       	st.w	r8[0x0],r9
80004374:	30 09       	mov	r9,0
80004376:	e0 68 13 4c 	mov	r8,4940
}
8000437a:	91 09       	st.w	r8[0x0],r9
8000437c:	5e fc       	retal	r12
8000437e:	d7 03       	nop

80004380 <fat_update_fat2>:
80004380:	eb cd 40 fe 	pushm	r1-r7,lr
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004384:	e0 65 15 84 	mov	r5,5508
80004388:	e0 62 13 4c 	mov	r2,4940
8000438c:	6a 08       	ld.w	r8,r5[0x0]
8000438e:	64 09       	ld.w	r9,r2[0x0]
80004390:	12 38       	cp.w	r8,r9
80004392:	e0 8b 00 26 	brhi	800043de <fat_update_fat2+0x5e>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004396:	e0 63 13 0c 	mov	r3,4876
     // Read FAT1
      if( !fat_cache_read_sector( true ))
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000439a:	e0 64 15 50 	mov	r4,5456
8000439e:	06 91       	mov	r1,r3
800043a0:	08 97       	mov	r7,r4
800043a2:	0a 96       	mov	r6,r5
800043a4:	c1 48       	rjmp	800043cc <fat_update_fat2+0x4c>
800043a6:	6e 19       	ld.w	r9,r7[0x4]
800043a8:	6e 48       	ld.w	r8,r7[0x10]
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
800043aa:	f2 08 00 08 	add	r8,r9,r8
800043ae:	6a 09       	ld.w	r9,r5[0x0]
800043b0:	12 08       	add	r8,r9
800043b2:	30 0c       	mov	r12,0
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
800043b4:	83 08       	st.w	r1[0x0],r8
800043b6:	fe b0 f8 3f 	rcall	80003434 <fat_cache_read_sector>
     fs_g_u32_first_mod_fat++;
800043ba:	c1 00       	breq	800043da <fat_update_fat2+0x5a>
800043bc:	fe b0 f7 42 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800043c0:	6c 08       	ld.w	r8,r6[0x0]
800043c2:	2f f8       	sub	r8,-1
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800043c4:	8d 08       	st.w	r6[0x0],r8
800043c6:	64 09       	ld.w	r9,r2[0x0]
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800043c8:	10 39       	cp.w	r9,r8
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800043ca:	c0 a3       	brcs	800043de <fat_update_fat2+0x5e>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800043cc:	68 49       	ld.w	r9,r4[0x10]
800043ce:	12 08       	add	r8,r9
800043d0:	30 1c       	mov	r12,1
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800043d2:	87 08       	st.w	r3[0x0],r8
800043d4:	fe b0 f8 30 	rcall	80003434 <fat_cache_read_sector>
800043d8:	ce 71       	brne	800043a6 <fat_update_fat2+0x26>
800043da:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800043de:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
800043e2:	d7 03       	nop

800043e4 <fat_delete_file>:
800043e4:	eb cd 40 fe 	pushm	r1-r7,lr
800043e8:	30 05       	mov	r5,0
800043ea:	18 93       	mov	r3,r12
800043ec:	30 f7       	mov	r7,15
800043ee:	3e 54       	mov	r4,-27
800043f0:	e0 66 15 9c 	mov	r6,5532
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
800043f4:	c0 58       	rjmp	800043fe <fat_delete_file+0x1a>
800043f6:	8c 18       	ld.sh	r8,r6[0x2]
800043f8:	30 15       	mov	r5,1
800043fa:	20 18       	sub	r8,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800043fc:	ac 18       	st.h	r6[0x2],r8
800043fe:	ce 5e       	rcall	800041c8 <fat_read_dir>
80004400:	c2 00       	breq	80004440 <fat_delete_file+0x5c>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
80004402:	fe b0 f7 0b 	rcall	80003218 <fat_get_ptr_entry>
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80004406:	f8 c2 ff f5 	sub	r2,r12,-11
      if( !fat_read_dir() )
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];
8000440a:	19 81       	ld.ub	r1,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000440c:	05 88       	ld.ub	r8,r2[0x0]
8000440e:	ee 08 18 00 	cp.b	r8,r7
80004412:	c0 30       	breq	80004418 <fat_delete_file+0x34>
80004414:	58 05       	cp.w	r5,0
80004416:	c0 b1       	brne	8000442c <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80004418:	b8 84       	st.b	r12[0x0],r4
      fat_cache_mark_sector_as_dirty();
8000441a:	fe b0 f7 13 	rcall	80003240 <fat_cache_mark_sector_as_dirty>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
8000441e:	05 88       	ld.ub	r8,r2[0x0]
80004420:	ee 08 18 00 	cp.b	r8,r7
80004424:	ce 91       	brne	800043f6 <fat_delete_file+0x12>
80004426:	e2 11 00 40 	andl	r1,0x40,COH
8000442a:	ce 60       	breq	800043f6 <fat_delete_file+0x12>

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
   }  // end of while(1)

   if( b_cluster_list )
8000442c:	58 03       	cp.w	r3,0
8000442e:	c0 31       	brne	80004434 <fat_delete_file+0x50>
80004430:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
80004434:	30 09       	mov	r9,0
80004436:	e0 68 13 10 	mov	r8,4880
8000443a:	30 3c       	mov	r12,3
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
8000443c:	91 39       	st.w	r8[0xc],r9
8000443e:	c3 ff       	rcall	800042bc <fat_read_file>
         return false;
   }

   return true;
}
80004440:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

80004444 <fat_garbage_collector_entry>:
80004444:	eb cd 40 fc 	pushm	r2-r7,lr
80004448:	20 8d       	sub	sp,32
8000444a:	30 06       	mov	r6,0
8000444c:	e0 65 15 9c 	mov	r5,5532
80004450:	0c 97       	mov	r7,r6
80004452:	0a 92       	mov	r2,r5
80004454:	3e 53       	mov	r3,-27
80004456:	1a 94       	mov	r4,sp
80004458:	c2 08       	rjmp	80004498 <fat_garbage_collector_entry+0x54>
8000445a:	fe b0 f6 df 	rcall	80003218 <fat_get_ptr_entry>
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();

      if ( FS_ENTRY_END == *ptr_entry )
8000445e:	19 88       	ld.ub	r8,r12[0x0]
80004460:	58 08       	cp.w	r8,0
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80004462:	c2 80       	breq	800044b2 <fat_garbage_collector_entry+0x6e>
80004464:	e6 08 18 00 	cp.b	r8,r3
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004468:	c1 60       	breq	80004494 <fat_garbage_collector_entry+0x50>
8000446a:	18 9b       	mov	r11,r12
8000446c:	32 0a       	mov	r10,32
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
8000446e:	1a 9c       	mov	r12,sp
80004470:	ec 07 19 00 	cp.h	r7,r6
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004474:	c0 e0       	breq	80004490 <fat_garbage_collector_entry+0x4c>
80004476:	e0 a0 21 4a 	rcall	8000870a <memcpy>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000447a:	a4 16       	st.h	r2[0x2],r6
8000447c:	ca 6e       	rcall	800041c8 <fat_read_dir>
8000447e:	c1 70       	breq	800044ac <fat_garbage_collector_entry+0x68>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80004480:	fe b0 f6 cc 	rcall	80003218 <fat_get_ptr_entry>
80004484:	32 0a       	mov	r10,32
80004486:	1a 9b       	mov	r11,sp
80004488:	e0 a0 21 41 	rcall	8000870a <memcpy>
            fat_cache_mark_sector_as_dirty();
8000448c:	fe b0 f6 da 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
         }
         u16_pos_new++;
80004490:	2f f6       	sub	r6,-1
80004492:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
80004494:	2f f7       	sub	r7,-1
80004496:	5c 87       	casts.h	r7

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004498:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000449a:	c9 7e       	rcall	800041c8 <fat_read_dir>
8000449c:	cd f1       	brne	8000445a <fat_garbage_collector_entry+0x16>
8000449e:	e0 68 15 a0 	mov	r8,5536
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800044a2:	11 89       	ld.ub	r9,r8[0x0]
800044a4:	31 a8       	mov	r8,26
800044a6:	f0 09 18 00 	cp.b	r9,r8
800044aa:	c0 40       	breq	800044b2 <fat_garbage_collector_entry+0x6e>
            fat_cache_mark_sector_as_dirty();
         }
         u16_pos_new++;
      }
      u16_pos_old++;
   }  // end of while(1)
800044ac:	2f 8d       	sub	sp,-32
800044ae:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      if ( FS_ENTRY_END == *ptr_entry )
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800044b2:	aa 16       	st.h	r5[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800044b4:	ee 06 19 00 	cp.h	r6,r7
800044b8:	c1 01       	brne	800044d8 <fat_garbage_collector_entry+0x94>
800044ba:	c1 28       	rjmp	800044de <fat_garbage_collector_entry+0x9a>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800044bc:	fe b0 f6 ae 	rcall	80003218 <fat_get_ptr_entry>
800044c0:	32 0a       	mov	r10,32
800044c2:	30 0b       	mov	r11,0
800044c4:	e0 a0 21 c7 	rcall	80008852 <memset>
            fat_cache_mark_sector_as_dirty();
800044c8:	fe b0 f6 bc 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800044cc:	8a 18       	ld.sh	r8,r5[0x2]
800044ce:	2f f8       	sub	r8,-1
800044d0:	aa 18       	st.h	r5[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800044d2:	ee 08 19 00 	cp.h	r8,r7
800044d6:	c0 40       	breq	800044de <fat_garbage_collector_entry+0x9a>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800044d8:	c7 8e       	rcall	800041c8 <fat_read_dir>
800044da:	cf 11       	brne	800044bc <fat_garbage_collector_entry+0x78>
800044dc:	ce 8b       	rjmp	800044ac <fat_garbage_collector_entry+0x68>
800044de:	2f 8d       	sub	sp,-32
            fat_cache_mark_sector_as_dirty();
         }
         u16_pos_new++;
      }
      u16_pos_old++;
   }  // end of while(1)
800044e0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1

800044e4 <fat_write_fat32_FSInfo>:
800044e4:	eb cd 40 80 	pushm	r7,lr
800044e8:	20 1d       	sub	sp,4
800044ea:	e0 68 15 50 	mov	r8,5456
800044ee:	70 4a       	ld.w	r10,r8[0x10]
800044f0:	90 c9       	ld.uh	r9,r8[0x8]
800044f2:	e0 68 13 0c 	mov	r8,4876
800044f6:	12 1a       	sub	r10,r9
800044f8:	50 0c       	stdsp	sp[0x0],r12
800044fa:	91 0a       	st.w	r8[0x0],r10
800044fc:	30 0c       	mov	r12,0
800044fe:	fe b0 f7 9b 	rcall	80003434 <fat_cache_read_sector>
80004502:	c2 e0       	breq	8000455e <fat_write_fat32_FSInfo+0x7a>
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;

   if( !fat_cache_read_sector( false ))
      return false;
   fat_cache_mark_sector_as_dirty();
   fat_cache_clear();
80004504:	fe b0 f6 9e 	rcall	80003240 <fat_cache_mark_sector_as_dirty>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80004508:	fe b0 f7 2e 	rcall	80003364 <fat_cache_clear>
8000450c:	30 4a       	mov	r10,4
8000450e:	e0 67 13 50 	mov	r7,4944
80004512:	fe cb b8 22 	sub	r11,pc,-18398
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
80004516:	0e 9c       	mov	r12,r7
80004518:	e0 a0 20 f9 	rcall	8000870a <memcpy>
8000451c:	30 4a       	mov	r10,4
8000451e:	fe cb b8 2a 	sub	r11,pc,-18390
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80004522:	ee cc fe 1c 	sub	r12,r7,-484
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
80004526:	e0 a0 20 f2 	rcall	8000870a <memcpy>
8000452a:	1b 89       	ld.ub	r9,sp[0x0]
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
8000452c:	ef 69 01 eb 	st.b	r7[491],r9
80004530:	1b b9       	ld.ub	r9,sp[0x3]
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80004532:	ef 69 01 e8 	st.b	r7[488],r9
80004536:	1b a9       	ld.ub	r9,sp[0x2]
80004538:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
8000453c:	1b 98       	ld.ub	r8,sp[0x1]
8000453e:	30 4a       	mov	r10,4
80004540:	ef 68 01 ea 	st.b	r7[490],r8
80004544:	e0 6b 00 ff 	mov	r11,255
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80004548:	ee cc fe 14 	sub	r12,r7,-492
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
8000454c:	e0 a0 21 83 	rcall	80008852 <memset>
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80004550:	35 58       	mov	r8,85
80004552:	30 1c       	mov	r12,1
   return true;
}
80004554:	ef 68 01 fe 	st.b	r7[510],r8
80004558:	3a a8       	mov	r8,-86
8000455a:	ef 68 01 ff 	st.b	r7[511],r8
8000455e:	2f fd       	sub	sp,-4
80004560:	e3 cd 80 80 	ldm	sp++,r7,pc

80004564 <fat_create_short_entry_name>:
80004564:	d4 31       	pushm	r0-r7,lr
80004566:	20 9d       	sub	sp,36
80004568:	50 3b       	stdsp	sp[0xc],r11
8000456a:	50 19       	stdsp	sp[0x4],r9
8000456c:	18 97       	mov	r7,r12
8000456e:	58 09       	cp.w	r9,0
80004570:	e0 80 00 fb 	breq	80004766 <fat_create_short_entry_name+0x202>
80004574:	30 09       	mov	r9,0
80004576:	50 29       	stdsp	sp[0x8],r9
80004578:	30 98       	mov	r8,9
8000457a:	f0 0a 18 00 	cp.b	r10,r8
8000457e:	e0 8b 00 e6 	brhi	8000474a <fat_create_short_entry_name+0x1e6>
80004582:	30 58       	mov	r8,5
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80004584:	30 69       	mov	r9,6
80004586:	50 88       	stdsp	sp[0x20],r8
80004588:	50 49       	stdsp	sp[0x10],r9
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000458a:	e0 68 cc cd 	mov	r8,52429
8000458e:	ea 18 cc cc 	orh	r8,0xcccc
80004592:	f4 08 06 44 	mulu.d	r4,r10,r8
80004596:	ea 09 16 03 	lsr	r9,r5,0x3
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000459a:	e0 65 85 1f 	mov	r5,34079
8000459e:	ea 15 51 eb 	orh	r5,0x51eb
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
800045a2:	f2 09 00 29 	add	r9,r9,r9<<0x2
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800045a6:	f4 05 06 44 	mulu.d	r4,r10,r5
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
800045aa:	f4 09 01 19 	sub	r9,r10,r9<<0x1
800045ae:	2d 09       	sub	r9,-48
800045b0:	5c 59       	castu.b	r9
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800045b2:	30 02       	mov	r2,0
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
800045b4:	50 59       	stdsp	sp[0x14],r9
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800045b6:	30 16       	mov	r6,1
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800045b8:	ea 09 16 05 	lsr	r9,r5,0x5
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800045bc:	04 94       	mov	r4,r2
800045be:	f2 cb ff d0 	sub	r11,r9,-48
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800045c2:	0c 93       	mov	r3,r6
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800045c4:	5c 5b       	castu.b	r11
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800045c6:	f2 09 10 64 	mul	r9,r9,100
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800045ca:	50 7b       	stdsp	sp[0x1c],r11
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800045cc:	f4 09 01 09 	sub	r9,r10,r9
         character = sz_name[0];
      }

      if( 1 == u8_step )
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800045d0:	32 e0       	mov	r0,46
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800045d2:	5c 59       	castu.b	r9
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
800045d4:	30 81       	mov	r1,8
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800045d6:	f2 08 06 48 	mulu.d	r8,r9,r8
800045da:	f2 08 16 03 	lsr	r8,r9,0x3
800045de:	2d 08       	sub	r8,-48
800045e0:	5c 58       	castu.b	r8
800045e2:	50 68       	stdsp	sp[0x18],r8
      ptr_entry = fat_get_ptr_entry();
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
   else if( nb < 100 )  nb_digit = 2;
800045e4:	0f 85       	ld.ub	r5,r7[0x0]
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800045e6:	e6 06 18 00 	cp.b	r6,r3
800045ea:	c2 b0       	breq	80004640 <fat_create_short_entry_name+0xdc>
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
800045ec:	e2 06 18 00 	cp.b	r6,r1
800045f0:	c3 d0       	breq	8000466a <fat_create_short_entry_name+0x106>
         if( 0 == character )
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
800045f2:	30 78       	mov	r8,7
800045f4:	f0 06 18 00 	cp.b	r6,r8
800045f8:	c6 f0       	breq	800046d6 <fat_create_short_entry_name+0x172>
         } else {
            sz_name += (Is_unicode? 2 : 1 );
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
800045fa:	30 68       	mov	r8,6
800045fc:	f0 06 18 00 	cp.b	r6,r8
80004600:	c7 f0       	breq	800046fe <fat_create_short_entry_name+0x19a>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80004602:	30 98       	mov	r8,9
80004604:	f0 06 18 00 	cp.b	r6,r8
80004608:	e0 80 00 87 	breq	80004716 <fat_create_short_entry_name+0x1b2>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
8000460c:	30 58       	mov	r8,5
8000460e:	f0 06 18 00 	cp.b	r6,r8
80004612:	e0 81 00 8f 	brne	80004730 <fat_create_short_entry_name+0x1cc>
80004616:	40 55       	lddsp	r5,sp[0x14]
80004618:	30 66       	mov	r6,6
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
      }

      if( mode )
8000461a:	40 18       	lddsp	r8,sp[0x4]
8000461c:	58 08       	cp.w	r8,0
8000461e:	c6 c0       	breq	800046f6 <fat_create_short_entry_name+0x192>
      {
         // Record the short name in buffer
         *short_name = character;
80004620:	40 39       	lddsp	r9,sp[0xc]
80004622:	12 c5       	st.b	r9++,r5
80004624:	50 39       	stdsp	sp[0xc],r9
         ptr_entry++;
      }
      u8_i++;

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80004626:	e4 08 15 07 	lsl	r8,r2,0x7
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
         ptr_entry++;
      }
      u8_i++;
8000462a:	2f f4       	sub	r4,-1

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
8000462c:	a1 92       	lsr	r2,0x1
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
         ptr_entry++;
      }
      u8_i++;
8000462e:	5c 54       	castu.b	r4

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80004630:	f0 02 00 02 	add	r2,r8,r2
      crc += character;                                  // add next char
80004634:	0a 02       	add	r2,r5
80004636:	0f 85       	ld.ub	r5,r7[0x0]
80004638:	5c 52       	castu.b	r2
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
8000463a:	e6 06 18 00 	cp.b	r6,r3
8000463e:	cd 71       	brne	800045ec <fat_create_short_entry_name+0x88>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80004640:	40 48       	lddsp	r8,sp[0x10]
80004642:	10 34       	cp.w	r4,r8
80004644:	5f 09       	sreq	r9
80004646:	e0 05 18 00 	cp.b	r5,r0
8000464a:	5f 08       	sreq	r8
8000464c:	f3 e8 10 08 	or	r8,r9,r8
80004650:	30 09       	mov	r9,0
80004652:	f2 08 18 00 	cp.b	r8,r9
80004656:	c0 30       	breq	8000465c <fat_create_short_entry_name+0xf8>
80004658:	30 26       	mov	r6,2
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
8000465a:	cc 6b       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
         character = sz_name[0];
      }

      if( 1 == u8_step )
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
8000465c:	0a 9c       	mov	r12,r5
8000465e:	fe b0 f5 c9 	rcall	800031f0 <fat_check_eof_name>
80004662:	c0 c0       	breq	8000467a <fat_create_short_entry_name+0x116>
80004664:	0f 85       	ld.ub	r5,r7[0x0]
80004666:	30 26       	mov	r6,2
80004668:	cb fb       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
            continue;
         }
      }
      if( 8 == u8_step )
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000466a:	30 b9       	mov	r9,11
8000466c:	f2 04 18 00 	cp.b	r4,r9
80004670:	c4 10       	breq	800046f2 <fat_create_short_entry_name+0x18e>
80004672:	0a 9c       	mov	r12,r5
80004674:	fe b0 f5 be 	rcall	800031f0 <fat_check_eof_name>
80004678:	c3 c1       	brne	800046f0 <fat_create_short_entry_name+0x18c>
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000467a:	ea c8 00 21 	sub	r8,r5,33
8000467e:	35 d9       	mov	r9,93
80004680:	f2 08 18 00 	cp.b	r8,r9
80004684:	e0 8b 00 33 	brhi	800046ea <fat_create_short_entry_name+0x186>
      return 0;
   if( ('a'<=character) && (character<='z') )
80004688:	ea c8 00 61 	sub	r8,r5,97
8000468c:	31 99       	mov	r9,25
8000468e:	f2 08 18 00 	cp.b	r8,r9
80004692:	e0 88 00 48 	brls	80004722 <fat_create_short_entry_name+0x1be>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80004696:	32 b8       	mov	r8,43
80004698:	f0 05 18 00 	cp.b	r5,r8
8000469c:	c2 70       	breq	800046ea <fat_create_short_entry_name+0x186>
8000469e:	32 c8       	mov	r8,44
800046a0:	f0 05 18 00 	cp.b	r5,r8
800046a4:	c2 30       	breq	800046ea <fat_create_short_entry_name+0x186>
800046a6:	e0 05 18 00 	cp.b	r5,r0
800046aa:	c2 00       	breq	800046ea <fat_create_short_entry_name+0x186>
800046ac:	33 b8       	mov	r8,59
800046ae:	f0 05 18 00 	cp.b	r5,r8
800046b2:	c1 c0       	breq	800046ea <fat_create_short_entry_name+0x186>
800046b4:	33 d8       	mov	r8,61
800046b6:	f0 05 18 00 	cp.b	r5,r8
800046ba:	c1 80       	breq	800046ea <fat_create_short_entry_name+0x186>
800046bc:	35 b8       	mov	r8,91
800046be:	f0 05 18 00 	cp.b	r5,r8
800046c2:	c1 40       	breq	800046ea <fat_create_short_entry_name+0x186>
800046c4:	35 d8       	mov	r8,93
800046c6:	f0 05 18 00 	cp.b	r5,r8
800046ca:	c1 00       	breq	800046ea <fat_create_short_entry_name+0x186>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
800046cc:	2f f7       	sub	r7,-1
         if( 0 == character )
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
800046ce:	30 78       	mov	r8,7
800046d0:	f0 06 18 00 	cp.b	r6,r8
800046d4:	c9 31       	brne	800045fa <fat_create_short_entry_name+0x96>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
800046d6:	e0 05 18 00 	cp.b	r5,r0
800046da:	c0 50       	breq	800046e4 <fat_create_short_entry_name+0x180>
800046dc:	0a 9c       	mov	r12,r5
800046de:	fe b0 f5 89 	rcall	800031f0 <fat_check_eof_name>
800046e2:	c0 40       	breq	800046ea <fat_create_short_entry_name+0x186>
800046e4:	0f 85       	ld.ub	r5,r7[0x0]
800046e6:	30 86       	mov	r6,8
800046e8:	c7 fb       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
800046ea:	2f f7       	sub	r7,-1
800046ec:	0f 85       	ld.ub	r5,r7[0x0]
800046ee:	c7 cb       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
            continue;
         }
      }
      if( 8 == u8_step )
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
800046f0:	0f 85       	ld.ub	r5,r7[0x0]
800046f2:	30 96       	mov	r6,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
800046f4:	c7 9b       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
         // Record the short name in buffer
         *short_name = character;
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
800046f6:	40 28       	lddsp	r8,sp[0x8]
800046f8:	10 c5       	st.b	r8++,r5
800046fa:	50 28       	stdsp	sp[0x8],r8
800046fc:	c9 5b       	rjmp	80004626 <fat_create_short_entry_name+0xc2>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
800046fe:	e2 04 18 00 	cp.b	r4,r1
80004702:	c1 e0       	breq	8000473e <fat_create_short_entry_name+0x1da>
80004704:	32 05       	mov	r5,32
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80004706:	30 28       	mov	r8,2
80004708:	f0 06 18 00 	cp.b	r6,r8
8000470c:	fb f6 00 08 	ld.weq	r6,sp[0x20]
80004710:	f9 b5 00 7e 	moveq	r5,126
80004714:	c8 3b       	rjmp	8000461a <fat_create_short_entry_name+0xb6>
         }
         character = ' ';
      }
      if( 9 == u8_step )
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80004716:	30 b9       	mov	r9,11
80004718:	f2 04 18 00 	cp.b	r4,r9
8000471c:	c1 40       	breq	80004744 <fat_create_short_entry_name+0x1e0>
8000471e:	32 05       	mov	r5,32
80004720:	c7 db       	rjmp	8000461a <fat_create_short_entry_name+0xb6>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80004722:	22 05       	sub	r5,32
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
80004724:	2f f7       	sub	r7,-1

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80004726:	5c 55       	castu.b	r5
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
         if( 0 == character )
80004728:	fe 91 ff 65 	brne	800045f2 <fat_create_short_entry_name+0x8e>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000472c:	0f 85       	ld.ub	r5,r7[0x0]
8000472e:	c5 cb       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80004730:	30 48       	mov	r8,4
80004732:	f0 06 18 00 	cp.b	r6,r8
80004736:	c2 01       	brne	80004776 <fat_create_short_entry_name+0x212>
80004738:	40 65       	lddsp	r5,sp[0x18]
8000473a:	30 56       	mov	r6,5
8000473c:	c6 fb       	rjmp	8000461a <fat_create_short_entry_name+0xb6>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
8000473e:	0f 85       	ld.ub	r5,r7[0x0]
80004740:	30 76       	mov	r6,7
80004742:	c5 2b       	rjmp	800045e6 <fat_create_short_entry_name+0x82>
      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
      crc += character;                                  // add next char
   } // End of loop while
   return crc;
}
80004744:	04 9c       	mov	r12,r2
80004746:	2f 7d       	sub	sp,-36
80004748:	d8 32       	popm	r0-r7,pc
      ptr_entry = fat_get_ptr_entry();
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
   else if( nb < 100 )  nb_digit = 2;
8000474a:	36 38       	mov	r8,99
8000474c:	f4 08 18 00 	cp.b	r8,r10
80004750:	f9 b9 02 05 	movhs	r9,5
80004754:	f9 b9 03 04 	movlo	r9,4
80004758:	f9 b8 02 04 	movhs	r8,4
8000475c:	f9 b8 03 03 	movlo	r8,3
80004760:	50 49       	stdsp	sp[0x10],r9
80004762:	50 88       	stdsp	sp[0x20],r8
80004764:	c1 3b       	rjmp	8000458a <fat_create_short_entry_name+0x26>
   uint8_t nb_digit;

   if( !mode )
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80004766:	50 0a       	stdsp	sp[0x0],r10
80004768:	fe b0 f5 6c 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000476c:	fe b0 f5 56 	rcall	80003218 <fat_get_ptr_entry>
80004770:	40 0a       	lddsp	r10,sp[0x0]
80004772:	50 2c       	stdsp	sp[0x8],r12
80004774:	c0 2b       	rjmp	80004578 <fat_create_short_entry_name+0x14>
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80004776:	30 38       	mov	r8,3
80004778:	f0 06 18 00 	cp.b	r6,r8
8000477c:	cc 51       	brne	80004706 <fat_create_short_entry_name+0x1a2>
8000477e:	40 75       	lddsp	r5,sp[0x1c]
80004780:	30 46       	mov	r6,4
80004782:	c4 cb       	rjmp	8000461a <fat_create_short_entry_name+0xb6>

80004784 <fat_mount>:
80004784:	d4 31       	pushm	r0-r7,lr
80004786:	20 5d       	sub	sp,20
80004788:	e0 6e 15 50 	mov	lr,5456
8000478c:	30 06       	mov	r6,0
8000478e:	9d 86       	st.w	lr[0x20],r6
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
   // No selected file
   fat_clear_entry_info_and_ptr();
80004790:	fe b0 f2 e8 	rcall	80002d60 <fat_clear_entry_info_and_ptr>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80004794:	e0 6b 15 9c 	mov	r11,5532
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80004798:	e0 62 13 0c 	mov	r2,4876
   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
   // No selected file
   fat_clear_entry_info_and_ptr();

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000479c:	b6 86       	st.b	r11[0x0],r6
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
8000479e:	85 06       	st.w	r2[0x0],r6

   // Check if the drive is availabled
   if( !fat_check_device() )
800047a0:	fe b0 f5 ec 	rcall	80003378 <fat_check_device>
800047a4:	e0 80 01 9d 	breq	80004ade <fat_mount+0x35a>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
800047a8:	e0 67 13 50 	mov	r7,4944
800047ac:	35 51       	mov	r1,85
800047ae:	0e 98       	mov	r8,r7
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800047b0:	38 05       	mov	r5,-128
800047b2:	30 43       	mov	r3,4
800047b4:	30 14       	mov	r4,1
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
800047b6:	50 18       	stdsp	sp[0x4],r8
800047b8:	30 1c       	mov	r12,1
800047ba:	fe b0 f6 3d 	rcall	80003434 <fat_cache_read_sector>
800047be:	40 18       	lddsp	r8,sp[0x4]
800047c0:	e0 80 01 8f 	breq	80004ade <fat_mount+0x35a>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
800047c4:	e0 6c 13 50 	mov	r12,4944
800047c8:	ef 39 01 fe 	ld.ub	r9,r7[510]
800047cc:	e2 09 18 00 	cp.b	r9,r1
800047d0:	c0 80       	breq	800047e0 <fat_mount+0x5c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
800047d2:	f1 39 01 ff 	ld.ub	r9,r8[511]
800047d6:	3a aa       	mov	r10,-86
800047d8:	f4 09 18 00 	cp.b	r9,r10
800047dc:	e0 81 01 c7 	brne	80004b6a <fat_mount+0x3e6>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
800047e0:	64 0b       	ld.w	r11,r2[0x0]
800047e2:	58 0b       	cp.w	r11,0
800047e4:	e0 81 00 b9 	brne	80004956 <fat_mount+0x1d2>
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800047e8:	ef 3a 01 be 	ld.ub	r10,r7[446]
800047ec:	ea 0a 18 00 	cp.b	r10,r5
800047f0:	5f 0e       	sreq	lr
800047f2:	f6 0a 18 00 	cp.b	r10,r11
800047f6:	5f 0a       	sreq	r10
800047f8:	1c 4a       	or	r10,lr
800047fa:	f6 0a 18 00 	cp.b	r10,r11
800047fe:	c2 20       	breq	80004842 <fat_mount+0xbe>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80004800:	ef 3a 01 c2 	ld.ub	r10,r7[450]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004804:	e6 0a 18 00 	cp.b	r10,r3
80004808:	5f 00       	sreq	r0
8000480a:	e8 0a 18 00 	cp.b	r10,r4
8000480e:	5f 0e       	sreq	lr
80004810:	1c 40       	or	r0,lr
80004812:	f6 00 18 00 	cp.b	r0,r11
80004816:	e0 81 01 90 	brne	80004b36 <fat_mount+0x3b2>
8000481a:	30 69       	mov	r9,6
8000481c:	f2 0a 18 00 	cp.b	r10,r9
80004820:	e0 80 01 8b 	breq	80004b36 <fat_mount+0x3b2>
80004824:	30 e9       	mov	r9,14
80004826:	f2 0a 18 00 	cp.b	r10,r9
8000482a:	e0 80 01 86 	breq	80004b36 <fat_mount+0x3b2>
8000482e:	30 b9       	mov	r9,11
80004830:	f2 0a 18 00 	cp.b	r10,r9
80004834:	e0 80 01 81 	breq	80004b36 <fat_mount+0x3b2>
80004838:	30 c9       	mov	r9,12
8000483a:	f2 0a 18 00 	cp.b	r10,r9
8000483e:	e0 80 01 7c 	breq	80004b36 <fat_mount+0x3b2>
80004842:	ef 39 01 ce 	ld.ub	r9,r7[462]
80004846:	ea 09 18 00 	cp.b	r9,r5
8000484a:	5f 0a       	sreq	r10
8000484c:	ec 09 18 00 	cp.b	r9,r6
80004850:	5f 09       	sreq	r9
80004852:	14 49       	or	r9,r10
80004854:	ec 09 18 00 	cp.b	r9,r6
80004858:	c2 30       	breq	8000489e <fat_mount+0x11a>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
8000485a:	ef 39 01 d2 	ld.ub	r9,r7[466]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000485e:	e6 09 18 00 	cp.b	r9,r3
80004862:	5f 0e       	sreq	lr
80004864:	e8 09 18 00 	cp.b	r9,r4
80004868:	5f 0a       	sreq	r10
8000486a:	fd ea 10 0a 	or	r10,lr,r10
8000486e:	ec 0a 18 00 	cp.b	r10,r6
80004872:	e0 81 01 38 	brne	80004ae2 <fat_mount+0x35e>
80004876:	30 6a       	mov	r10,6
80004878:	f4 09 18 00 	cp.b	r9,r10
8000487c:	e0 80 01 33 	breq	80004ae2 <fat_mount+0x35e>
80004880:	30 ea       	mov	r10,14
80004882:	f4 09 18 00 	cp.b	r9,r10
80004886:	e0 80 01 2e 	breq	80004ae2 <fat_mount+0x35e>
8000488a:	30 ba       	mov	r10,11
8000488c:	f4 09 18 00 	cp.b	r9,r10
80004890:	e0 80 01 29 	breq	80004ae2 <fat_mount+0x35e>
80004894:	30 ca       	mov	r10,12
80004896:	f4 09 18 00 	cp.b	r9,r10
8000489a:	e0 80 01 24 	breq	80004ae2 <fat_mount+0x35e>
8000489e:	ef 39 01 de 	ld.ub	r9,r7[478]
800048a2:	ea 09 18 00 	cp.b	r9,r5
800048a6:	5f 0a       	sreq	r10
800048a8:	ec 09 18 00 	cp.b	r9,r6
800048ac:	5f 09       	sreq	r9
800048ae:	14 49       	or	r9,r10
800048b0:	ec 09 18 00 	cp.b	r9,r6
800048b4:	c2 30       	breq	800048fa <fat_mount+0x176>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
800048b6:	ef 39 01 e2 	ld.ub	r9,r7[482]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800048ba:	e6 09 18 00 	cp.b	r9,r3
800048be:	5f 0e       	sreq	lr
800048c0:	e8 09 18 00 	cp.b	r9,r4
800048c4:	5f 0a       	sreq	r10
800048c6:	fd ea 10 0a 	or	r10,lr,r10
800048ca:	ec 0a 18 00 	cp.b	r10,r6
800048ce:	e0 81 01 2b 	brne	80004b24 <fat_mount+0x3a0>
800048d2:	30 6a       	mov	r10,6
800048d4:	f4 09 18 00 	cp.b	r9,r10
800048d8:	e0 80 01 26 	breq	80004b24 <fat_mount+0x3a0>
800048dc:	30 ea       	mov	r10,14
800048de:	f4 09 18 00 	cp.b	r9,r10
800048e2:	e0 80 01 21 	breq	80004b24 <fat_mount+0x3a0>
800048e6:	30 ba       	mov	r10,11
800048e8:	f4 09 18 00 	cp.b	r9,r10
800048ec:	e0 80 01 1c 	breq	80004b24 <fat_mount+0x3a0>
800048f0:	30 ca       	mov	r10,12
800048f2:	f4 09 18 00 	cp.b	r9,r10
800048f6:	e0 80 01 17 	breq	80004b24 <fat_mount+0x3a0>
800048fa:	ef 39 01 ee 	ld.ub	r9,r7[494]
800048fe:	ea 09 18 00 	cp.b	r9,r5
80004902:	5f 0a       	sreq	r10
80004904:	ec 09 18 00 	cp.b	r9,r6
80004908:	5f 09       	sreq	r9
8000490a:	14 49       	or	r9,r10
8000490c:	ec 09 18 00 	cp.b	r9,r6
80004910:	c2 30       	breq	80004956 <fat_mount+0x1d2>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80004912:	ef 39 01 f2 	ld.ub	r9,r7[498]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004916:	e6 09 18 00 	cp.b	r9,r3
8000491a:	5f 0e       	sreq	lr
8000491c:	e8 09 18 00 	cp.b	r9,r4
80004920:	5f 0a       	sreq	r10
80004922:	fd ea 10 0a 	or	r10,lr,r10
80004926:	ec 0a 18 00 	cp.b	r10,r6
8000492a:	e0 81 01 0f 	brne	80004b48 <fat_mount+0x3c4>
8000492e:	30 6a       	mov	r10,6
80004930:	f4 09 18 00 	cp.b	r9,r10
80004934:	e0 80 01 0a 	breq	80004b48 <fat_mount+0x3c4>
80004938:	30 ea       	mov	r10,14
8000493a:	f4 09 18 00 	cp.b	r9,r10
8000493e:	e0 80 01 05 	breq	80004b48 <fat_mount+0x3c4>
80004942:	30 ba       	mov	r10,11
80004944:	f4 09 18 00 	cp.b	r9,r10
80004948:	e0 80 01 00 	breq	80004b48 <fat_mount+0x3c4>
8000494c:	30 ca       	mov	r10,12
8000494e:	f4 09 18 00 	cp.b	r9,r10
80004952:	e0 80 00 fb 	breq	80004b48 <fat_mount+0x3c4>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80004956:	e0 6a 13 50 	mov	r10,4944
8000495a:	19 89       	ld.ub	r9,r12[0x0]
8000495c:	3e b8       	mov	r8,-21
8000495e:	f0 09 18 00 	cp.b	r9,r8
80004962:	c0 80       	breq	80004972 <fat_mount+0x1ee>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80004964:	30 39       	mov	r9,3
80004966:	e0 68 15 a0 	mov	r8,5536
8000496a:	30 0c       	mov	r12,0
8000496c:	b0 89       	st.b	r8[0x0],r9
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
   }
   }

   return true;
}
8000496e:	2f bd       	sub	sp,-20
80004970:	d8 32       	popm	r0-r7,pc
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80004972:	15 a9       	ld.ub	r9,r10[0x2]
80004974:	39 08       	mov	r8,-112
80004976:	f0 09 18 00 	cp.b	r9,r8
8000497a:	cf 51       	brne	80004964 <fat_mount+0x1e0>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
8000497c:	f5 38 00 15 	ld.ub	r8,r10[21]
80004980:	e2 18 00 f0 	andl	r8,0xf0,COH
80004984:	e0 48 00 f0 	cp.w	r8,240
80004988:	ce e1       	brne	80004964 <fat_mount+0x1e0>
   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
8000498a:	30 08       	mov	r8,0
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
8000498c:	30 49       	mov	r9,4
   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
8000498e:	50 38       	stdsp	sp[0xc],r8
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80004990:	e0 68 15 a0 	mov	r8,5536

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80004994:	f5 3e 00 0c 	ld.ub	lr,r10[12]
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80004998:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
8000499a:	a1 9e       	lsr	lr,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
8000499c:	f5 38 00 0d 	ld.ub	r8,r10[13]
800049a0:	e0 69 15 50 	mov	r9,5456
800049a4:	bd 38       	mul	r8,lr
800049a6:	5c 58       	castu.b	r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
800049a8:	b2 98       	st.b	r9[0x1],r8
800049aa:	fa c6 ff f1 	sub	r6,sp,-15
800049ae:	f5 39 00 16 	ld.ub	r9,r10[22]
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
800049b2:	ac 89       	st.b	r6[0x0],r9
800049b4:	fa c7 ff f2 	sub	r7,sp,-14
800049b8:	f5 39 00 17 	ld.ub	r9,r10[23]
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
800049bc:	ae 89       	st.b	r7[0x0],r9
800049be:	fa c5 ff f4 	sub	r5,sp,-12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
800049c2:	40 39       	lddsp	r9,sp[0xc]
800049c4:	58 09       	cp.w	r9,0
800049c6:	e0 80 00 d8 	breq	80004b76 <fat_mount+0x3f2>
800049ca:	fa c4 ff f3 	sub	r4,sp,-13
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
800049ce:	bd 39       	mul	r9,lr
800049d0:	e0 60 15 50 	mov	r0,5456

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
800049d4:	81 19       	st.w	r0[0x4],r9
800049d6:	e0 63 13 50 	mov	r3,4944
800049da:	f9 3a 00 13 	ld.ub	r10,r12[19]
800049de:	58 0a       	cp.w	r10,0
800049e0:	e0 81 00 bd 	brne	80004b5a <fat_mount+0x3d6>
800049e4:	e7 32 00 14 	ld.ub	r2,r3[20]
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
800049e8:	58 02       	cp.w	r2,0
800049ea:	e0 81 00 ba 	brne	80004b5e <fat_mount+0x3da>
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
800049ee:	e7 3a 00 20 	ld.ub	r10,r3[32]
800049f2:	ac 8a       	st.b	r6[0x0],r10
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
800049f4:	e7 3a 00 21 	ld.ub	r10,r3[33]
800049f8:	ae 8a       	st.b	r7[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
800049fa:	e7 3a 00 22 	ld.ub	r10,r3[34]
800049fe:	a8 8a       	st.b	r4[0x0],r10
      LSB3( u32_tmp ) = 0;
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80004a00:	e7 3a 00 23 	ld.ub	r10,r3[35]
80004a04:	aa 8a       	st.b	r5[0x0],r10
80004a06:	a1 79       	lsl	r9,0x1
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
      LSB2( u32_tmp ) = 0;
      LSB3( u32_tmp ) = 0;
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80004a08:	e0 6a 15 50 	mov	r10,5456

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80004a0c:	f5 59 00 18 	st.h	r10[24],r9
80004a10:	40 35       	lddsp	r5,sp[0xc]
80004a12:	f9 3a 00 11 	ld.ub	r10,r12[17]
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80004a16:	fa c7 ff ec 	sub	r7,sp,-20

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80004a1a:	0e fa       	st.b	--r7,r10
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80004a1c:	f9 36 00 12 	ld.ub	r6,r12[18]
   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80004a20:	fa ca ff ee 	sub	r10,sp,-18
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80004a24:	fc 04 15 04 	lsl	r4,lr,0x4
80004a28:	b4 86       	st.b	r10[0x0],r6
80004a2a:	fb 16 00 12 	ld.uh	r6,sp[18]
80004a2e:	e8 06 00 06 	add	r6,r4,r6
80004a32:	a5 76       	lsl	r6,0x5
80004a34:	20 16       	sub	r6,1
80004a36:	e0 64 15 50 	mov	r4,5456
80004a3a:	fc 03 15 09 	lsl	r3,lr,0x9
80004a3e:	ec 03 0c 02 	divs	r2,r6,r3

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80004a42:	fc 02 02 46 	mul	r6,lr,r2

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80004a46:	e9 56 00 1a 	st.h	r4[26],r6
80004a4a:	f9 34 00 0e 	ld.ub	r4,r12[14]
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80004a4e:	ae 84       	st.b	r7[0x0],r4
80004a50:	e0 60 15 50 	mov	r0,5456
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80004a54:	5c 76       	castu.h	r6
80004a56:	0c 09       	add	r9,r6
80004a58:	81 59       	st.w	r0[0x14],r9
80004a5a:	f9 37 00 0f 	ld.ub	r7,r12[15]
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80004a5e:	b4 87       	st.b	r10[0x0],r7

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80004a60:	fb 0a 00 12 	ld.sh	r10,sp[18]
80004a64:	f9 36 00 30 	ld.ub	r6,r12[48]
80004a68:	fc 0a 02 47 	mul	r7,lr,r10
80004a6c:	5c 7a       	castu.h	r10
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80004a6e:	5c 77       	castu.h	r7
80004a70:	0c 1a       	sub	r10,r6

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80004a72:	0e 0b       	add	r11,r7

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80004a74:	bd 3a       	mul	r10,lr

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80004a76:	81 4b       	st.w	r0[0x10],r11
80004a78:	a0 4a       	st.h	r0[0x8],r10
80004a7a:	58 08       	cp.w	r8,0
80004a7c:	c3 10       	breq	80004ade <fat_mount+0x35a>

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80004a7e:	ab 3e       	mul	lr,r5
80004a80:	30 1a       	mov	r10,1
80004a82:	fc 07 01 07 	sub	r7,lr,r7
80004a86:	ee 09 01 09 	sub	r9,r7,r9
80004a8a:	f4 08 18 00 	cp.b	r8,r10
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80004a8e:	c0 60       	breq	80004a9a <fat_mount+0x316>
80004a90:	a1 99       	lsr	r9,0x1
80004a92:	a1 98       	lsr	r8,0x1
80004a94:	f4 08 18 00 	cp.b	r8,r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80004a98:	cf c1       	brne	80004a90 <fat_mount+0x30c>
80004a9a:	f2 c8 ff fe 	sub	r8,r9,-2
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80004a9e:	e0 6e 15 50 	mov	lr,5456
80004aa2:	9d 38       	st.w	lr[0xc],r8
80004aa4:	e0 49 0f f4 	cp.w	r9,4084
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80004aa8:	e0 88 00 77 	brls	80004b96 <fat_mount+0x412>
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80004aac:	e0 49 ff f4 	cp.w	r9,65524
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80004ab0:	e0 88 00 79 	brls	80004ba2 <fat_mount+0x41e>
80004ab4:	f9 39 00 2f 	ld.ub	r9,r12[47]
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80004ab8:	e0 68 15 50 	mov	r8,5456
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80004abc:	2e 88       	sub	r8,-24
80004abe:	b0 89       	st.b	r8[0x0],r9
80004ac0:	30 39       	mov	r9,3
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80004ac2:	e0 67 15 9c 	mov	r7,5532
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80004ac6:	ae 89       	st.b	r7[0x0],r9
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80004ac8:	f9 39 00 2c 	ld.ub	r9,r12[44]
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80004acc:	b0 b9       	st.b	r8[0x3],r9
80004ace:	f9 39 00 2d 	ld.ub	r9,r12[45]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004ad2:	b0 a9       	st.b	r8[0x2],r9
80004ad4:	f9 39 00 2e 	ld.ub	r9,r12[46]
80004ad8:	30 1c       	mov	r12,1
80004ada:	b0 99       	st.b	r8[0x1],r9
80004adc:	c4 9b       	rjmp	8000496e <fat_mount+0x1ea>
80004ade:	2f bd       	sub	sp,-20
            }
         }
         if( u8_tmp != 4 )
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80004ae0:	d8 3a       	popm	r0-r7,pc,r12=0
80004ae2:	e0 69 01 d9 	mov	r9,473
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80004ae6:	e0 6a 01 d8 	mov	r10,472
80004aea:	e0 6b 01 d7 	mov	r11,471
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80004aee:	e0 6c 01 d6 	mov	r12,470
80004af2:	ee 0c 07 0c 	ld.ub	r12,r7[r12]
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80004af6:	a4 bc       	st.b	r2[0x3],r12
80004af8:	ee 0b 07 0b 	ld.ub	r11,r7[r11]
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80004afc:	a4 ab       	st.b	r2[0x2],r11
80004afe:	e0 6b 15 50 	mov	r11,5456
80004b02:	ee 0a 07 0a 	ld.ub	r10,r7[r10]
80004b06:	a4 9a       	st.b	r2[0x1],r10
80004b08:	ee 09 07 09 	ld.ub	r9,r7[r9]
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80004b0c:	a4 89       	st.b	r2[0x0],r9
80004b0e:	17 8c       	ld.ub	r12,r11[0x0]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004b10:	50 18       	stdsp	sp[0x4],r8
80004b12:	e0 a0 12 d7 	rcall	800070c0 <mem_sector_size>
80004b16:	64 09       	ld.w	r9,r2[0x0]
80004b18:	40 18       	lddsp	r8,sp[0x4]
80004b1a:	f8 09 02 49 	mul	r9,r12,r9
80004b1e:	85 09       	st.w	r2[0x0],r9
80004b20:	fe 9f fe 4b 	bral	800047b6 <fat_mount+0x32>
80004b24:	e0 69 01 e9 	mov	r9,489
80004b28:	e0 6a 01 e8 	mov	r10,488
80004b2c:	e0 6b 01 e7 	mov	r11,487
80004b30:	e0 6c 01 e6 	mov	r12,486
80004b34:	cd fb       	rjmp	80004af2 <fat_mount+0x36e>
80004b36:	e0 69 01 c9 	mov	r9,457
80004b3a:	e0 6a 01 c8 	mov	r10,456
80004b3e:	e0 6b 01 c7 	mov	r11,455
80004b42:	e0 6c 01 c6 	mov	r12,454
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80004b46:	cd 6b       	rjmp	80004af2 <fat_mount+0x36e>
80004b48:	e0 69 01 f9 	mov	r9,505
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80004b4c:	e0 6a 01 f8 	mov	r10,504
      LSB2( u32_tmp ) = 0;
80004b50:	e0 6b 01 f7 	mov	r11,503
      LSB3( u32_tmp ) = 0;
80004b54:	e0 6c 01 f6 	mov	r12,502

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80004b58:	cc db       	rjmp	80004af2 <fat_mount+0x36e>
80004b5a:	e7 32 00 14 	ld.ub	r2,r3[20]
         return false;
80004b5e:	ac 8a       	st.b	r6[0x0],r10
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80004b60:	ae 82       	st.b	r7[0x0],r2
80004b62:	30 0a       	mov	r10,0
80004b64:	a8 8a       	st.b	r4[0x0],r10
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80004b66:	aa 8a       	st.b	r5[0x0],r10
80004b68:	c4 fb       	rjmp	80004a06 <fat_mount+0x282>
80004b6a:	30 29       	mov	r9,2
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80004b6c:	e0 68 15 a0 	mov	r8,5536
80004b70:	30 0c       	mov	r12,0
80004b72:	b0 89       	st.b	r8[0x0],r9
80004b74:	cf da       	rjmp	8000496e <fat_mount+0x1ea>
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80004b76:	f5 39 00 24 	ld.ub	r9,r10[36]
80004b7a:	ac 89       	st.b	r6[0x0],r9
80004b7c:	f5 39 00 25 	ld.ub	r9,r10[37]
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80004b80:	ae 89       	st.b	r7[0x0],r9
80004b82:	f5 39 00 26 	ld.ub	r9,r10[38]
80004b86:	fa c4 ff f3 	sub	r4,sp,-13
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80004b8a:	a8 89       	st.b	r4[0x0],r9
80004b8c:	f5 39 00 27 	ld.ub	r9,r10[39]
80004b90:	aa 89       	st.b	r5[0x0],r9
80004b92:	40 39       	lddsp	r9,sp[0xc]
80004b94:	c1 db       	rjmp	800049ce <fat_mount+0x24a>
80004b96:	30 18       	mov	r8,1
80004b98:	e0 6b 15 9c 	mov	r11,5532
80004b9c:	30 1c       	mov	r12,1
80004b9e:	b6 88       	st.b	r11[0x0],r8
80004ba0:	ce 7a       	rjmp	8000496e <fat_mount+0x1ea>
80004ba2:	30 28       	mov	r8,2
80004ba4:	e0 6a 15 9c 	mov	r10,5532
80004ba8:	30 1c       	mov	r12,1
80004baa:	b4 88       	st.b	r10[0x0],r8
80004bac:	ce 1a       	rjmp	8000496e <fat_mount+0x1ea>
80004bae:	d7 03       	nop

80004bb0 <fat_find_short_entry_name>:
80004bb0:	d4 31       	pushm	r0-r7,lr
80004bb2:	20 3d       	sub	sp,12
80004bb4:	30 07       	mov	r7,0
80004bb6:	18 92       	mov	r2,r12
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80004bb8:	1a 96       	mov	r6,sp
80004bba:	e0 65 15 9c 	mov	r5,5532
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80004bbe:	e0 63 15 a0 	mov	r3,5536
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004bc2:	0e 94       	mov	r4,r7
80004bc4:	3e 51       	mov	r1,-27
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80004bc6:	30 b0       	mov	r0,11
80004bc8:	c1 48       	rjmp	80004bf0 <fat_find_short_entry_name+0x40>
80004bca:	e2 08 18 00 	cp.b	r8,r1
80004bce:	c2 70       	breq	80004c1c <fat_find_short_entry_name+0x6c>
80004bd0:	f9 38 00 0b 	ld.ub	r8,r12[11]
80004bd4:	30 f9       	mov	r9,15
80004bd6:	f2 08 18 00 	cp.b	r8,r9
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80004bda:	c2 10       	breq	80004c1c <fat_find_short_entry_name+0x6c>
80004bdc:	a6 80       	st.b	r3[0x0],r0
80004bde:	30 ba       	mov	r10,11
80004be0:	1a 9b       	mov	r11,sp
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80004be2:	e0 a0 1d 81 	rcall	800086e4 <memcmp>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80004be6:	c1 c1       	brne	80004c1e <fat_find_short_entry_name+0x6e>
80004be8:	3f f8       	mov	r8,-1
80004bea:	f0 07 18 00 	cp.b	r7,r8
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80004bee:	c2 30       	breq	80004c34 <fat_find_short_entry_name+0x84>
   while(1)
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80004bf0:	2f f7       	sub	r7,-1
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80004bf2:	30 19       	mov	r9,1
80004bf4:	5c 57       	castu.b	r7
80004bf6:	1a 9b       	mov	r11,sp
80004bf8:	0e 9a       	mov	r10,r7
80004bfa:	04 9c       	mov	r12,r2
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80004bfc:	fe b0 fc b4 	rcall	80004564 <fat_create_short_entry_name>
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80004c00:	aa 14       	st.h	r5[0x2],r4
80004c02:	fe b0 fa e3 	rcall	800041c8 <fat_read_dir>
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80004c06:	c1 20       	breq	80004c2a <fat_find_short_entry_name+0x7a>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80004c08:	fe b0 f3 08 	rcall	80003218 <fat_get_ptr_entry>
80004c0c:	19 88       	ld.ub	r8,r12[0x0]
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80004c0e:	58 08       	cp.w	r8,0
80004c10:	cd d1       	brne	80004bca <fat_find_short_entry_name+0x1a>
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
   }
}
80004c12:	30 a8       	mov	r8,10
80004c14:	a6 88       	st.b	r3[0x0],r8
80004c16:	0e 9c       	mov	r12,r7
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004c18:	2f dd       	sub	sp,-12
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80004c1a:	d8 32       	popm	r0-r7,pc
80004c1c:	a6 80       	st.b	r3[0x0],r0
80004c1e:	8a 18       	ld.sh	r8,r5[0x2]
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80004c20:	2f f8       	sub	r8,-1
80004c22:	aa 18       	st.h	r5[0x2],r8
80004c24:	fe b0 fa d2 	rcall	800041c8 <fat_read_dir>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80004c28:	cf 01       	brne	80004c08 <fat_find_short_entry_name+0x58>
80004c2a:	07 89       	ld.ub	r9,r3[0x0]
80004c2c:	31 a8       	mov	r8,26
80004c2e:	f0 09 18 00 	cp.b	r9,r8
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
80004c32:	cf 20       	breq	80004c16 <fat_find_short_entry_name+0x66>
80004c34:	30 07       	mov	r7,0
80004c36:	cf 0b       	rjmp	80004c16 <fat_find_short_entry_name+0x66>

80004c38 <fat_initialize_dir>:
80004c38:	eb cd 40 f8 	pushm	r3-r7,lr
80004c3c:	30 07       	mov	r7,0
80004c3e:	e0 66 15 f8 	mov	r6,5624
80004c42:	0e 9b       	mov	r11,r7
80004c44:	8d 17       	st.w	r6[0x4],r7
80004c46:	30 2c       	mov	r12,2
80004c48:	fe b0 f7 de 	rcall	80003c04 <fat_cluster_list>
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80004c4c:	c2 10       	breq	80004c8e <fat_initialize_dir+0x56>
80004c4e:	6c 09       	ld.w	r9,r6[0x0]
80004c50:	e0 65 15 50 	mov	r5,5456
80004c54:	20 19       	sub	r9,1
80004c56:	e0 66 13 0c 	mov	r6,4876
   for(  u8_loop = 0
80004c5a:	0b 98       	ld.ub	r8,r5[0x1]
80004c5c:	10 09       	add	r9,r8
80004c5e:	8d 09       	st.w	r6[0x0],r9

      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
80004c60:	58 08       	cp.w	r8,0
80004c62:	c0 d1       	brne	80004c7c <fat_initialize_dir+0x44>
      fs_gu32_addrsector--;         // go to previous sector
80004c64:	c1 78       	rjmp	80004c92 <fat_initialize_dir+0x5a>
80004c66:	fe b0 f2 ed 	rcall	80003240 <fat_cache_mark_sector_as_dirty>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80004c6a:	6c 08       	ld.w	r8,r6[0x0]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80004c6c:	20 18       	sub	r8,1
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80004c6e:	8d 08       	st.w	r6[0x0],r8
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80004c70:	2f f7       	sub	r7,-1
80004c72:	0b 98       	ld.ub	r8,r5[0x1]
80004c74:	5c 57       	castu.b	r7
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
80004c76:	ee 08 18 00 	cp.b	r8,r7
80004c7a:	c0 c0       	breq	80004c92 <fat_initialize_dir+0x5a>
80004c7c:	30 0c       	mov	r12,0
         return false;

      if(0 == u8_loop)
80004c7e:	fe b0 f3 db 	rcall	80003434 <fat_cache_read_sector>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
80004c82:	c0 60       	breq	80004c8e <fat_initialize_dir+0x56>
80004c84:	58 07       	cp.w	r7,0
80004c86:	cf 01       	brne	80004c66 <fat_initialize_dir+0x2e>
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );

   return true;
80004c88:	fe b0 f3 6e 	rcall	80003364 <fat_cache_clear>
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
      return false;
   fat_cache_mark_sector_as_dirty();
80004c8c:	ce db       	rjmp	80004c66 <fat_initialize_dir+0x2e>
80004c8e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
80004c92:	fe b0 f2 d7 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
80004c96:	e0 69 13 50 	mov	r9,4944
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004c9a:	32 e8       	mov	r8,46
80004c9c:	12 97       	mov	r7,r9
80004c9e:	0e c8       	st.b	r7++,r8
80004ca0:	12 96       	mov	r6,r9
80004ca2:	5c 37       	neg	r7
80004ca4:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
80004ca8:	e0 80 00 94 	breq	80004dd0 <fat_initialize_dir+0x198>
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80004cac:	30 18       	mov	r8,1
80004cae:	32 0c       	mov	r12,32
80004cb0:	f2 08 0b 0c 	st.b	r9[r8],r12
80004cb4:	2f f8       	sub	r8,-1
80004cb6:	5c 58       	castu.b	r8
80004cb8:	f0 0a 11 0b 	rsub	r10,r8,11
80004cbc:	f0 cb 00 01 	sub	r11,r8,1
80004cc0:	5c 5a       	castu.b	r10
80004cc2:	ee 0b 18 00 	cp.b	r11,r7
80004cc6:	cf 53       	brcs	80004cb0 <fat_initialize_dir+0x78>
80004cc8:	ee 03 11 0a 	rsub	r3,r7,10
80004ccc:	5c 53       	castu.b	r3
80004cce:	e6 0e 16 02 	lsr	lr,r3,0x2
80004cd2:	fc 04 15 02 	lsl	r4,lr,0x2
80004cd6:	c1 20       	breq	80004cfa <fat_initialize_dir+0xc2>
80004cd8:	2f f7       	sub	r7,-1
      fs_g_sector[u8_i]=' ';
80004cda:	30 0b       	mov	r11,0
80004cdc:	f2 07 00 07 	add	r7,r9,r7
80004ce0:	4b fc       	lddpc	r12,80004ddc <fat_initialize_dir+0x1a4>
80004ce2:	0e ac       	st.w	r7++,r12
80004ce4:	2f fb       	sub	r11,-1
80004ce6:	fc 0b 18 00 	cp.b	r11,lr
80004cea:	cf c3       	brcs	80004ce2 <fat_initialize_dir+0xaa>
80004cec:	08 08       	add	r8,r4
80004cee:	08 1a       	sub	r10,r4
80004cf0:	5c 58       	castu.b	r8
80004cf2:	5c 5a       	castu.b	r10
80004cf4:	e8 03 18 00 	cp.b	r3,r4
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80004cf8:	c0 a0       	breq	80004d0c <fat_initialize_dir+0xd4>
80004cfa:	32 0b       	mov	r11,32
80004cfc:	f2 08 0b 0b 	st.b	r9[r8],r11
80004d00:	20 1a       	sub	r10,1
80004d02:	2f f8       	sub	r8,-1
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80004d04:	5c 5a       	castu.b	r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004d06:	5c 58       	castu.b	r8
80004d08:	58 0a       	cp.w	r10,0
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80004d0a:	cf 91       	brne	80004cfc <fat_initialize_dir+0xc4>
80004d0c:	32 e8       	mov	r8,46

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
80004d0e:	f3 68 00 21 	st.b	r9[33],r8
80004d12:	f3 68 00 20 	st.b	r9[32],r8
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80004d16:	31 08       	mov	r8,16
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
80004d18:	f3 68 00 0b 	st.b	r9[11],r8
80004d1c:	e0 68 13 10 	mov	r8,4880
   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80004d20:	2f c8       	sub	r8,-4
80004d22:	11 8a       	ld.ub	r10,r8[0x0]
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
80004d24:	f3 6a 00 15 	st.b	r9[21],r10
80004d28:	11 ba       	ld.ub	r10,r8[0x3]
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80004d2a:	f3 6a 00 1a 	st.b	r9[26],r10
80004d2e:	11 aa       	ld.ub	r10,r8[0x2]
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004d30:	f3 6a 00 1b 	st.b	r9[27],r10
80004d34:	11 98       	ld.ub	r8,r8[0x1]
80004d36:	f3 68 00 14 	st.b	r9[20],r8
80004d3a:	ec 07 11 de 	rsub	r7,r6,-34
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
80004d3e:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80004d42:	c4 a0       	breq	80004dd6 <fat_initialize_dir+0x19e>
80004d44:	30 28       	mov	r8,2
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80004d46:	32 0c       	mov	r12,32
80004d48:	f2 08 00 0a 	add	r10,r9,r8
80004d4c:	f5 6c 00 20 	st.b	r10[32],r12
80004d50:	2f f8       	sub	r8,-1
80004d52:	5c 58       	castu.b	r8
80004d54:	f0 0a 11 0b 	rsub	r10,r8,11
80004d58:	f0 cb 00 02 	sub	r11,r8,2
80004d5c:	5c 5a       	castu.b	r10
80004d5e:	ee 0b 18 00 	cp.b	r11,r7
80004d62:	cf 33       	brcs	80004d48 <fat_initialize_dir+0x110>
80004d64:	ee 04 11 09 	rsub	r4,r7,9
80004d68:	5c 54       	castu.b	r4
80004d6a:	e8 0e 16 02 	lsr	lr,r4,0x2
80004d6e:	fc 06 15 02 	lsl	r6,lr,0x2
80004d72:	c1 20       	breq	80004d96 <fat_initialize_dir+0x15e>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
80004d74:	2d e7       	sub	r7,-34
80004d76:	30 0b       	mov	r11,0
80004d78:	f2 07 00 07 	add	r7,r9,r7
80004d7c:	49 8c       	lddpc	r12,80004ddc <fat_initialize_dir+0x1a4>
80004d7e:	0e ac       	st.w	r7++,r12
80004d80:	2f fb       	sub	r11,-1
80004d82:	fc 0b 18 00 	cp.b	r11,lr
80004d86:	cf c3       	brcs	80004d7e <fat_initialize_dir+0x146>
80004d88:	0c 08       	add	r8,r6
80004d8a:	0c 1a       	sub	r10,r6
80004d8c:	5c 58       	castu.b	r8
80004d8e:	5c 5a       	castu.b	r10
80004d90:	ec 04 18 00 	cp.b	r4,r6
80004d94:	c0 b0       	breq	80004daa <fat_initialize_dir+0x172>
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80004d96:	32 0c       	mov	r12,32
80004d98:	f2 08 00 0b 	add	r11,r9,r8
80004d9c:	f7 6c 00 20 	st.b	r11[32],r12
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
80004da0:	2f f8       	sub	r8,-1
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80004da2:	20 1a       	sub	r10,1
80004da4:	5c 58       	castu.b	r8
80004da6:	5c 5a       	castu.b	r10
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
80004da8:	cf 81       	brne	80004d98 <fat_initialize_dir+0x160>
80004daa:	2e 05       	sub	r5,-32
80004dac:	0b 88       	ld.ub	r8,r5[0x0]
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
80004dae:	f3 68 00 35 	st.b	r9[53],r8
80004db2:	31 08       	mov	r8,16
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80004db4:	f3 68 00 2b 	st.b	r9[43],r8
80004db8:	0b b8       	ld.ub	r8,r5[0x3]
80004dba:	f3 68 00 3a 	st.b	r9[58],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
80004dbe:	0b a8       	ld.ub	r8,r5[0x2]
80004dc0:	30 1c       	mov	r12,1
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );

   return true;
80004dc2:	f3 68 00 3b 	st.b	r9[59],r8
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004dc6:	0b 98       	ld.ub	r8,r5[0x1]
80004dc8:	f3 68 00 34 	st.b	r9[52],r8
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004dcc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004dd0:	30 aa       	mov	r10,10
80004dd2:	30 18       	mov	r8,1
80004dd4:	c7 ab       	rjmp	80004cc8 <fat_initialize_dir+0x90>
80004dd6:	30 9a       	mov	r10,9
80004dd8:	30 28       	mov	r8,2
80004dda:	cc 5b       	rjmp	80004d64 <fat_initialize_dir+0x12c>
80004ddc:	20 20       	sub	r0,2
80004dde:	20 20       	sub	r0,2

80004de0 <fat_allocfreespace>:
80004de0:	d4 31       	pushm	r0-r7,lr
80004de2:	20 2d       	sub	sp,8
80004de4:	e0 6b 15 9c 	mov	r11,5532
80004de8:	30 38       	mov	r8,3
80004dea:	17 89       	ld.ub	r9,r11[0x0]
80004dec:	f0 09 18 00 	cp.b	r9,r8
80004df0:	c7 60       	breq	80004edc <fat_allocfreespace+0xfc>
80004df2:	e0 63 15 f8 	mov	r3,5624
80004df6:	3f f8       	mov	r8,-1
80004df8:	07 89       	ld.ub	r9,r3[0x0]
80004dfa:	f0 09 18 00 	cp.b	r9,r8
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
80004dfe:	c7 f0       	breq	80004efc <fat_allocfreespace+0x11c>
80004e00:	66 0a       	ld.w	r10,r3[0x0]
80004e02:	e0 67 15 f0 	mov	r7,5616
80004e06:	2f fa       	sub	r10,-1
80004e08:	e0 65 15 50 	mov	r5,5456
80004e0c:	e0 6b 15 84 	mov	r11,5508
80004e10:	e0 68 13 4c 	mov	r8,4940
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
   fs_g_u32_last_mod_fat = 0;
80004e14:	8f 0a       	st.w	r7[0x0],r10
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
80004e16:	30 12       	mov	r2,1
   fs_g_u32_last_mod_fat = 0;
80004e18:	6a 39       	ld.w	r9,r5[0xc]
80004e1a:	50 1b       	stdsp	sp[0x4],r11
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80004e1c:	50 08       	stdsp	sp[0x0],r8
80004e1e:	3f f8       	mov	r8,-1
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004e20:	30 04       	mov	r4,0
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80004e22:	97 08       	st.w	r11[0x0],r8
80004e24:	40 0b       	lddsp	r11,sp[0x0]
80004e26:	97 04       	st.w	r11[0x0],r4
80004e28:	12 3a       	cp.w	r10,r9
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004e2a:	c6 22       	brcc	80004eee <fat_allocfreespace+0x10e>
80004e2c:	e0 66 15 f0 	mov	r6,5616
         return false;

      if ( 0 == fs_g_cluster.u32_val )
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80004e30:	e0 61 ff ff 	mov	r1,65535
         if( true == first_cluster_free_is_found )
80004e34:	ea 11 0f ff 	orh	r1,0xfff
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80004e38:	e0 60 15 f8 	mov	r0,5624
80004e3c:	c3 48       	rjmp	80004ea4 <fat_allocfreespace+0xc4>
80004e3e:	6c 08       	ld.w	r8,r6[0x0]
80004e40:	8d 18       	st.w	r6[0x4],r8
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80004e42:	58 04       	cp.w	r4,0
80004e44:	c4 21       	brne	80004ec8 <fat_allocfreespace+0xe8>
80004e46:	e0 6a 15 f8 	mov	r10,5624
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80004e4a:	3f fb       	mov	r11,-1
80004e4c:	15 89       	ld.ub	r9,r10[0x0]
80004e4e:	f6 09 18 00 	cp.b	r9,r11
80004e52:	c1 30       	breq	80004e78 <fat_allocfreespace+0x98>
80004e54:	66 08       	ld.w	r8,r3[0x0]
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004e56:	58 08       	cp.w	r8,0
80004e58:	c4 01       	brne	80004ed8 <fat_allocfreespace+0xf8>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004e5a:	e0 6a 15 9c 	mov	r10,5532
80004e5e:	30 39       	mov	r9,3
80004e60:	15 88       	ld.ub	r8,r10[0x0]
80004e62:	f2 08 18 00 	cp.b	r8,r9
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80004e66:	e0 81 00 92 	brne	80004f8a <fat_allocfreespace+0x1aa>
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004e6a:	6a 68       	ld.w	r8,r5[0x18]
80004e6c:	8d 08       	st.w	r6[0x0],r8
80004e6e:	30 1c       	mov	r12,1
80004e70:	fe b0 f4 02 	rcall	80003674 <fat_cluster_val>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004e74:	c3 80       	breq	80004ee4 <fat_allocfreespace+0x104>
80004e76:	6e 18       	ld.w	r8,r7[0x4]
80004e78:	87 08       	st.w	r3[0x0],r8
80004e7a:	8f 08       	st.w	r7[0x0],r8
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
            break;                        // Stop loop
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004e7c:	8f 11       	st.w	r7[0x4],r1
80004e7e:	30 1c       	mov	r12,1
80004e80:	fe b0 f3 fa 	rcall	80003674 <fat_cluster_val>
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
80004e84:	c3 00       	breq	80004ee4 <fat_allocfreespace+0x104>
80004e86:	66 19       	ld.w	r9,r3[0x4]

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
80004e88:	0b 98       	ld.ub	r8,r5[0x1]
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80004e8a:	10 39       	cp.w	r9,r8
80004e8c:	e0 88 00 45 	brls	80004f16 <fat_allocfreespace+0x136>
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80004e90:	10 19       	sub	r9,r8
80004e92:	30 14       	mov	r4,1
80004e94:	81 19       	st.w	r0[0x4],r9
80004e96:	6c 08       	ld.w	r8,r6[0x0]
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004e98:	2f f8       	sub	r8,-1
80004e9a:	8f 08       	st.w	r7[0x0],r8
80004e9c:	6a 39       	ld.w	r9,r5[0xc]
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80004e9e:	10 39       	cp.w	r9,r8
80004ea0:	e0 88 00 25 	brls	80004eea <fat_allocfreespace+0x10a>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
80004ea4:	30 0c       	mov	r12,0
80004ea6:	fe b0 f3 e7 	rcall	80003674 <fat_cluster_val>
            {
               fs_g_cluster.u32_pos += 500;
80004eaa:	c1 d0       	breq	80004ee4 <fat_allocfreespace+0x104>
80004eac:	6e 18       	ld.w	r8,r7[0x4]
80004eae:	58 08       	cp.w	r8,0
80004eb0:	cc 70       	breq	80004e3e <fat_allocfreespace+0x5e>
80004eb2:	58 04       	cp.w	r4,0
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
         if( true == first_cluster_free_is_found )
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80004eb4:	c3 51       	brne	80004f1e <fat_allocfreespace+0x13e>
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004eb6:	58 02       	cp.w	r2,0
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
         if( true == first_cluster_free_is_found )
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80004eb8:	c0 31       	brne	80004ebe <fat_allocfreespace+0xde>
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004eba:	6c 08       	ld.w	r8,r6[0x0]
80004ebc:	ce eb       	rjmp	80004e98 <fat_allocfreespace+0xb8>
80004ebe:	6c 08       	ld.w	r8,r6[0x0]
80004ec0:	f0 c8 fe 0c 	sub	r8,r8,-500
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004ec4:	8d 08       	st.w	r6[0x0],r8
80004ec6:	ce 9b       	rjmp	80004e98 <fat_allocfreespace+0xb8>
   bool b_quick_find = true;

   if( Is_fat32 )
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004ec8:	20 18       	sub	r8,1
80004eca:	30 1c       	mov	r12,1
80004ecc:	8d 08       	st.w	r6[0x0],r8
80004ece:	fe b0 f3 d3 	rcall	80003674 <fat_cluster_val>
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
      return false;
   }

   return fat_update_fat2();
}
80004ed2:	c0 90       	breq	80004ee4 <fat_allocfreespace+0x104>
80004ed4:	6c 18       	ld.w	r8,r6[0x4]
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
80004ed6:	cd 2b       	rjmp	80004e7a <fat_allocfreespace+0x9a>
80004ed8:	8d 08       	st.w	r6[0x0],r8
   {
      if( b_quick_find )
80004eda:	cc ab       	rjmp	80004e6e <fat_allocfreespace+0x8e>
80004edc:	3f fc       	mov	r12,-1
80004ede:	fe b0 fb 03 	rcall	800044e4 <fat_write_fat32_FSInfo>

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80004ee2:	c8 81       	brne	80004df2 <fat_allocfreespace+0x12>
80004ee4:	30 0c       	mov	r12,0
80004ee6:	2f ed       	sub	sp,-8
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
80004ee8:	d8 32       	popm	r0-r7,pc
80004eea:	58 04       	cp.w	r4,0
80004eec:	c1 91       	brne	80004f1e <fat_allocfreespace+0x13e>
80004eee:	58 02       	cp.w	r2,0
80004ef0:	c4 40       	breq	80004f78 <fat_allocfreespace+0x198>
80004ef2:	30 02       	mov	r2,0
80004ef4:	30 2a       	mov	r10,2
80004ef6:	40 1b       	lddsp	r11,sp[0x4]
80004ef8:	8f 0a       	st.w	r7[0x0],r10
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80004efa:	c9 2b       	rjmp	80004e1e <fat_allocfreespace+0x3e>
80004efc:	e0 65 15 50 	mov	r5,5456
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004f00:	e0 6a 15 84 	mov	r10,5508
80004f04:	e0 68 13 4c 	mov	r8,4940
80004f08:	30 12       	mov	r2,1
80004f0a:	6a 39       	ld.w	r9,r5[0xc]
80004f0c:	e0 67 15 f0 	mov	r7,5616
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004f10:	50 1a       	stdsp	sp[0x4],r10
80004f12:	50 08       	stdsp	sp[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004f14:	cf 0b       	rjmp	80004ef4 <fat_allocfreespace+0x114>
80004f16:	30 09       	mov	r9,0
80004f18:	e0 68 15 f8 	mov	r8,5624
80004f1c:	91 19       	st.w	r8[0x4],r9
80004f1e:	40 1b       	lddsp	r11,sp[0x4]
80004f20:	40 0a       	lddsp	r10,sp[0x0]
80004f22:	76 08       	ld.w	r8,r11[0x0]
80004f24:	74 09       	ld.w	r9,r10[0x0]
80004f26:	12 38       	cp.w	r8,r9
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004f28:	e0 8b 00 2f 	brhi	80004f86 <fat_allocfreespace+0x1a6>
80004f2c:	e0 64 13 0c 	mov	r4,4876
80004f30:	e0 67 15 50 	mov	r7,5456
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80004f34:	08 93       	mov	r3,r4
     fs_g_u32_first_mod_fat++;
80004f36:	e0 66 15 84 	mov	r6,5508
80004f3a:	14 91       	mov	r1,r10
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004f3c:	16 92       	mov	r2,r11
80004f3e:	c1 58       	rjmp	80004f68 <fat_allocfreespace+0x188>
80004f40:	6e 19       	ld.w	r9,r7[0x4]
80004f42:	6e 48       	ld.w	r8,r7[0x10]
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004f44:	f2 08 00 08 	add	r8,r9,r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004f48:	64 09       	ld.w	r9,r2[0x0]
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004f4a:	12 08       	add	r8,r9
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004f4c:	30 0c       	mov	r12,0
80004f4e:	87 08       	st.w	r3[0x0],r8
80004f50:	fe b0 f2 72 	rcall	80003434 <fat_cache_read_sector>
      {
         // Retry in normal mode to scann all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
80004f54:	cc 80       	breq	80004ee4 <fat_allocfreespace+0x104>
80004f56:	fe b0 f1 75 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
80004f5a:	6c 08       	ld.w	r8,r6[0x0]
      return false;
   }

   return fat_update_fat2();
}
80004f5c:	2f f8       	sub	r8,-1
80004f5e:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004f60:	62 09       	ld.w	r9,r1[0x0]
80004f62:	12 38       	cp.w	r8,r9
               if( 0 == fs_g_seg.u32_addr )
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80004f64:	e0 8b 00 11 	brhi	80004f86 <fat_allocfreespace+0x1a6>
80004f68:	6a 49       	ld.w	r9,r5[0x10]
80004f6a:	12 08       	add	r8,r9
                     return false;
80004f6c:	30 1c       	mov	r12,1
80004f6e:	89 08       	st.w	r4[0x0],r8
80004f70:	fe b0 f2 62 	rcall	80003434 <fat_cache_read_sector>
80004f74:	ce 61       	brne	80004f40 <fat_allocfreespace+0x160>
80004f76:	cb 7b       	rjmp	80004ee4 <fat_allocfreespace+0x104>
80004f78:	31 b9       	mov	r9,27
80004f7a:	e0 68 15 a0 	mov	r8,5536
80004f7e:	04 9c       	mov	r12,r2
80004f80:	b0 89       	st.b	r8[0x0],r9
80004f82:	2f ed       	sub	sp,-8
80004f84:	d8 32       	popm	r0-r7,pc
80004f86:	30 1c       	mov	r12,1
80004f88:	ca fb       	rjmp	80004ee6 <fat_allocfreespace+0x106>
80004f8a:	31 b9       	mov	r9,27
80004f8c:	e0 68 15 a0 	mov	r8,5536
80004f90:	08 9c       	mov	r12,r4
80004f92:	b0 89       	st.b	r8[0x0],r9
80004f94:	ca 9b       	rjmp	80004ee6 <fat_allocfreespace+0x106>
80004f96:	d7 03       	nop

80004f98 <fat_alloc_entry_free>:
80004f98:	d4 31       	pushm	r0-r7,lr
80004f9a:	20 2d       	sub	sp,8
80004f9c:	e0 63 15 9c 	mov	r3,5532
//! @verbatim
//! OUT: Initialise the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
80004fa0:	30 08       	mov	r8,0
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004fa2:	50 1c       	stdsp	sp[0x4],r12
80004fa4:	a6 18       	st.h	r3[0x2],r8
80004fa6:	50 0c       	stdsp	sp[0x0],r12
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004fa8:	30 04       	mov	r4,0
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80004faa:	e0 60 15 a0 	mov	r0,5536
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80004fae:	e0 62 15 f8 	mov	r2,5624
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004fb2:	30 11       	mov	r1,1
80004fb4:	e0 65 15 50 	mov	r5,5456
80004fb8:	e0 67 13 0c 	mov	r7,4876
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004fbc:	fe b0 f9 06 	rcall	800041c8 <fat_read_dir>
80004fc0:	18 96       	mov	r6,r12
80004fc2:	c1 61       	brne	80004fee <fat_alloc_entry_free+0x56>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80004fc4:	01 88       	ld.ub	r8,r0[0x0]
         if( !fat_allocfreespace())
80004fc6:	31 a9       	mov	r9,26
80004fc8:	f2 08 18 00 	cp.b	r8,r9
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80004fcc:	c3 41       	brne	80005034 <fat_alloc_entry_free+0x9c>
80004fce:	85 11       	st.w	r2[0x4],r1
               return false;
            if( !fat_garbage_collector_entry())
80004fd0:	c0 8f       	rcall	80004de0 <fat_allocfreespace>
80004fd2:	c2 b1       	brne	80005028 <fat_alloc_entry_free+0x90>
80004fd4:	58 04       	cp.w	r4,0
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004fd6:	c2 f1       	brne	80005034 <fat_alloc_entry_free+0x9c>
80004fd8:	fe b0 fa 36 	rcall	80004444 <fat_garbage_collector_entry>
80004fdc:	c2 c0       	breq	80005034 <fat_alloc_entry_free+0x9c>
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004fde:	40 18       	lddsp	r8,sp[0x4]
80004fe0:	a6 14       	st.h	r3[0x2],r4
80004fe2:	50 08       	stdsp	sp[0x0],r8
80004fe4:	02 94       	mov	r4,r1

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80004fe6:	fe b0 f8 f1 	rcall	800041c8 <fat_read_dir>
      if ( FS_ENTRY_END == *ptr_entry )
80004fea:	18 96       	mov	r6,r12
80004fec:	ce c0       	breq	80004fc4 <fat_alloc_entry_free+0x2c>
80004fee:	fe b0 f1 15 	rcall	80003218 <fat_get_ptr_entry>
80004ff2:	30 08       	mov	r8,0
      {  // The entry is free
         u8_nb_entry--;
80004ff4:	19 89       	ld.ub	r9,r12[0x0]
80004ff6:	f0 09 18 00 	cp.b	r9,r8
80004ffa:	c0 61       	brne	80005006 <fat_alloc_entry_free+0x6e>
         if( 0 == u8_nb_entry )
80004ffc:	40 08       	lddsp	r8,sp[0x0]
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80004ffe:	20 18       	sub	r8,1
80005000:	5c 58       	castu.b	r8
80005002:	50 08       	stdsp	sp[0x0],r8
80005004:	c3 70       	breq	80005072 <fat_alloc_entry_free+0xda>
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005006:	86 1c       	ld.sh	r12,r3[0x2]
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
80005008:	2f fc       	sub	r12,-1
8000500a:	5c 8c       	casts.h	r12
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
            return false;
         }
         if( !fat_garbage_collector_entry())
8000500c:	a6 1c       	st.h	r3[0x2],r12
8000500e:	cd 71       	brne	80004fbc <fat_alloc_entry_free+0x24>
80005010:	58 04       	cp.w	r4,0
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005012:	c3 21       	brne	80005076 <fat_alloc_entry_free+0xde>
80005014:	fe b0 fa 18 	rcall	80004444 <fat_garbage_collector_entry>
80005018:	c0 e0       	breq	80005034 <fat_alloc_entry_free+0x9c>
8000501a:	e0 68 15 9c 	mov	r8,5532
bool  fat_clear_cluster( void )
{
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
8000501e:	40 19       	lddsp	r9,sp[0x4]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
80005020:	b0 14       	st.h	r8[0x2],r4
80005022:	50 09       	stdsp	sp[0x0],r9
80005024:	30 14       	mov	r4,1
80005026:	cc bb       	rjmp	80004fbc <fat_alloc_entry_free+0x24>
80005028:	85 16       	st.w	r2[0x4],r6
            return false;
         }
         if( !fat_garbage_collector_entry())
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000502a:	0c 9b       	mov	r11,r6
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
8000502c:	30 2c       	mov	r12,2
8000502e:	fe b0 f5 eb 	rcall	80003c04 <fat_cluster_list>
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80005032:	c0 41       	brne	8000503a <fat_alloc_entry_free+0xa2>
80005034:	30 0c       	mov	r12,0
80005036:	2f ed       	sub	sp,-8
80005038:	d8 32       	popm	r0-r7,pc
   for(  u8_loop = 0
8000503a:	0b 98       	ld.ub	r8,r5[0x1]
8000503c:	64 09       	ld.w	r9,r2[0x0]
8000503e:	20 19       	sub	r9,1

      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
80005040:	10 09       	add	r9,r8
80005042:	8f 09       	st.w	r7[0x0],r9
      fs_gu32_addrsector--;         // go to previous sector
80005044:	58 08       	cp.w	r8,0
80005046:	c0 d1       	brne	80005060 <fat_alloc_entry_free+0xc8>
80005048:	cb ab       	rjmp	80004fbc <fat_alloc_entry_free+0x24>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
8000504a:	fe b0 f0 fb 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
8000504e:	6e 08       	ld.w	r8,r7[0x0]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80005050:	20 18       	sub	r8,1
80005052:	8f 08       	st.w	r7[0x0],r8
80005054:	2f f6       	sub	r6,-1
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
80005056:	0b 98       	ld.ub	r8,r5[0x1]
80005058:	5c 56       	castu.b	r6
8000505a:	ec 08 18 00 	cp.b	r8,r6
         return false;

      if(0 == u8_loop)
8000505e:	ca f0       	breq	80004fbc <fat_alloc_entry_free+0x24>
80005060:	30 0c       	mov	r12,0
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
80005062:	fe b0 f1 e9 	rcall	80003434 <fat_cache_read_sector>
80005066:	ce 70       	breq	80005034 <fat_alloc_entry_free+0x9c>
      // Check entry
      ptr_entry = fat_get_ptr_entry();
      if ( FS_ENTRY_END == *ptr_entry )
      {  // The entry is free
         u8_nb_entry--;
         if( 0 == u8_nb_entry )
80005068:	58 06       	cp.w	r6,0
8000506a:	cf 01       	brne	8000504a <fat_alloc_entry_free+0xb2>
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000506c:	fe b0 f1 7c 	rcall	80003364 <fat_cache_clear>
80005070:	ce db       	rjmp	8000504a <fat_alloc_entry_free+0xb2>
            return false;
80005072:	30 1c       	mov	r12,1
80005074:	ce 1b       	rjmp	80005036 <fat_alloc_entry_free+0x9e>
80005076:	31 b9       	mov	r9,27
80005078:	e0 68 15 a0 	mov	r8,5536
8000507c:	b0 89       	st.b	r8[0x0],r9
8000507e:	cd cb       	rjmp	80005036 <fat_alloc_entry_free+0x9e>

80005080 <fat_create_entry_file_name>:
80005080:	d4 31       	pushm	r0-r7,lr
80005082:	20 7d       	sub	sp,28
80005084:	30 2a       	mov	r10,2
80005086:	50 2c       	stdsp	sp[0x8],r12
80005088:	50 1a       	stdsp	sp[0x4],r10
8000508a:	18 96       	mov	r6,r12
8000508c:	30 d5       	mov	r5,13
8000508e:	33 a4       	mov	r4,58
80005090:	32 a3       	mov	r3,42
80005092:	33 f2       	mov	r2,63
80005094:	32 21       	mov	r1,34
80005096:	33 c0       	mov	r0,60
80005098:	0d 87       	ld.ub	r7,r6[0x0]
8000509a:	0e 9c       	mov	r12,r7
8000509c:	fe b0 f0 aa 	rcall	800031f0 <fat_check_eof_name>
800050a0:	c2 c1       	brne	800050f8 <fat_create_entry_file_name+0x78>
800050a2:	e8 07 19 00 	cp.h	r7,r4
800050a6:	c2 20       	breq	800050ea <fat_create_entry_file_name+0x6a>
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800050a8:	e6 07 19 00 	cp.h	r7,r3
800050ac:	c1 f0       	breq	800050ea <fat_create_entry_file_name+0x6a>
800050ae:	e4 07 19 00 	cp.h	r7,r2
800050b2:	c1 c0       	breq	800050ea <fat_create_entry_file_name+0x6a>
800050b4:	e2 07 19 00 	cp.h	r7,r1
800050b8:	c1 90       	breq	800050ea <fat_create_entry_file_name+0x6a>
800050ba:	e0 07 19 00 	cp.h	r7,r0
800050be:	c1 60       	breq	800050ea <fat_create_entry_file_name+0x6a>
800050c0:	33 e8       	mov	r8,62
800050c2:	f0 07 19 00 	cp.h	r7,r8
800050c6:	c1 20       	breq	800050ea <fat_create_entry_file_name+0x6a>
800050c8:	37 ca       	mov	r10,124
800050ca:	f4 07 19 00 	cp.h	r7,r10
800050ce:	c0 e0       	breq	800050ea <fat_create_entry_file_name+0x6a>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800050d0:	58 05       	cp.w	r5,0
800050d2:	c0 50       	breq	800050dc <fat_create_entry_file_name+0x5c>
800050d4:	20 15       	sub	r5,1
      {
         u8_nb_entry++;
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
800050d6:	2f f6       	sub	r6,-1
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800050d8:	5c 55       	castu.b	r5
800050da:	cd fb       	rjmp	80005098 <fat_create_entry_file_name+0x18>
      {
         u8_nb_entry++;
800050dc:	40 18       	lddsp	r8,sp[0x4]
800050de:	30 c5       	mov	r5,12
800050e0:	2f f8       	sub	r8,-1
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
800050e2:	2f f6       	sub	r6,-1
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800050e4:	5c 58       	castu.b	r8
800050e6:	50 18       	stdsp	sp[0x4],r8
800050e8:	cd 8b       	rjmp	80005098 <fat_create_entry_file_name+0x18>

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800050ea:	31 c9       	mov	r9,28
800050ec:	e0 68 15 a0 	mov	r8,5536
800050f0:	30 0c       	mov	r12,0
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
}
800050f2:	b0 89       	st.b	r8[0x0],r9
800050f4:	2f 9d       	sub	sp,-28
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
   }
   if( 0x14 < u8_nb_entry )
800050f6:	d8 32       	popm	r0-r7,pc
800050f8:	31 48       	mov	r8,20
800050fa:	40 19       	lddsp	r9,sp[0x4]
800050fc:	f0 09 18 00 	cp.b	r9,r8
80005100:	e0 88 00 09 	brls	80005112 <fat_create_entry_file_name+0x92>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80005104:	32 b9       	mov	r9,43
80005106:	e0 68 15 a0 	mov	r8,5536
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
}
8000510a:	30 0c       	mov	r12,0
8000510c:	b0 89       	st.b	r8[0x0],r9
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
   if( 0 == u8_nb_entry )
8000510e:	2f 9d       	sub	sp,-28
80005110:	d8 32       	popm	r0-r7,pc
      return false;

   // Search a unik short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80005112:	58 09       	cp.w	r9,0
80005114:	c0 f0       	breq	80005132 <fat_create_entry_file_name+0xb2>
80005116:	40 2c       	lddsp	r12,sp[0x8]
80005118:	fe b0 fd 4c 	rcall	80004bb0 <fat_find_short_entry_name>
   if( 0 == u8_nb )
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000511c:	18 97       	mov	r7,r12
8000511e:	c0 71       	brne	8000512c <fat_create_entry_file_name+0xac>
80005120:	32 a9       	mov	r9,42
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
}
80005122:	e0 68 15 a0 	mov	r8,5536
      fs_g_status = FS_ERR_FILE_EXIST;
      return false;  // All short name exist
   }

   // Alloc a space for entrys
   if( !fat_alloc_entry_free( u8_nb_entry ))
80005126:	b0 89       	st.b	r8[0x0],r9
80005128:	2f 9d       	sub	sp,-28
8000512a:	d8 32       	popm	r0-r7,pc
8000512c:	40 1c       	lddsp	r12,sp[0x4]
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
8000512e:	c3 5f       	rcall	80004f98 <fat_alloc_entry_free>
80005130:	c0 31       	brne	80005136 <fat_create_entry_file_name+0xb6>
   if( !fat_alloc_entry_free( u8_nb_entry ))
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005132:	30 0c       	mov	r12,0
80005134:	ce 0b       	rjmp	800050f4 <fat_create_entry_file_name+0x74>
80005136:	30 09       	mov	r9,0
80005138:	0e 9a       	mov	r10,r7
8000513a:	40 2c       	lddsp	r12,sp[0x8]
8000513c:	12 9b       	mov	r11,r9
8000513e:	fe b0 fa 13 	rcall	80004564 <fat_create_short_entry_name>
   u8_nb_entry--;
80005142:	50 5c       	stdsp	sp[0x14],r12
80005144:	40 15       	lddsp	r5,sp[0x4]

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005146:	20 15       	sub	r5,1
80005148:	5c 55       	castu.b	r5
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
8000514a:	c7 e0       	breq	80005246 <fat_create_entry_file_name+0x1c6>
8000514c:	e0 6a 15 9c 	mov	r10,5532
80005150:	ea c8 ff c0 	sub	r8,r5,-64
80005154:	30 16       	mov	r6,1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80005156:	5c 58       	castu.b	r8
80005158:	50 1a       	stdsp	sp[0x4],r10

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000515a:	50 48       	stdsp	sp[0x10],r8
8000515c:	30 b7       	mov	r7,11
8000515e:	14 99       	mov	r9,r10
      if( !fat_read_dir())
80005160:	92 18       	ld.sh	r8,r9[0x2]
80005162:	20 18       	sub	r8,1
80005164:	b2 18       	st.h	r9[0x2],r8
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
80005166:	fe b0 f8 31 	rcall	800041c8 <fat_read_dir>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
8000516a:	ce 40       	breq	80005132 <fat_create_entry_file_name+0xb2>
8000516c:	fe b0 f0 6a 	rcall	80003240 <fat_cache_mark_sector_as_dirty>
80005170:	40 48       	lddsp	r8,sp[0x10]
80005172:	ea 06 18 00 	cp.b	r6,r5
{
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
80005176:	f0 06 17 00 	moveq	r6,r8
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
8000517a:	fe b0 f0 4f 	rcall	80003218 <fat_get_ptr_entry>
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file
8000517e:	18 c6       	st.b	r12++,r6
80005180:	50 06       	stdsp	sp[0x0],r6
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
80005182:	30 02       	mov	r2,0
80005184:	40 20       	lddsp	r0,sp[0x8]
80005186:	30 18       	mov	r8,1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005188:	31 a4       	mov	r4,26
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
8000518a:	30 ce       	mov	lr,12
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000518c:	04 9b       	mov	r11,r2
8000518e:	31 f3       	mov	r3,31
80005190:	31 b1       	mov	r1,27
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
80005192:	ee 08 18 00 	cp.b	r8,r7
80005196:	c3 90       	breq	80005208 <fat_create_entry_file_name+0x188>
80005198:	e8 08 18 00 	cp.b	r8,r4
8000519c:	5f 0a       	sreq	r10
8000519e:	fc 08 18 00 	cp.b	r8,lr
800051a2:	5f 09       	sreq	r9
800051a4:	f5 e9 10 09 	or	r9,r10,r9
800051a8:	f6 09 18 00 	cp.b	r9,r11
800051ac:	c2 41       	brne	800051f4 <fat_create_entry_file_name+0x174>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
800051ae:	e2 08 18 00 	cp.b	r8,r1
800051b2:	c3 b0       	breq	80005228 <fat_create_entry_file_name+0x1a8>
800051b4:	30 d9       	mov	r9,13
         *ptr_entry = u8_crc;             // CRC field
         continue;
      }

      // fields with a character
      if( !b_end_of_name )
800051b6:	f2 08 18 00 	cp.b	r8,r9
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
800051ba:	c3 d0       	breq	80005234 <fat_create_entry_file_name+0x1b4>
         }
         if(('\\' == u16_tmp )
800051bc:	58 02       	cp.w	r2,0
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
800051be:	c3 81       	brne	8000522e <fat_create_entry_file_name+0x1ae>
800051c0:	01 89       	ld.ub	r9,r0[0x0]
         }
         if(('\\' == u16_tmp )
800051c2:	32 fa       	mov	r10,47
800051c4:	fb 59 00 1a 	st.h	sp[26],r9
800051c8:	f4 09 19 00 	cp.h	r9,r10
800051cc:	5f 06       	sreq	r6
800051ce:	35 ca       	mov	r10,92
800051d0:	f4 09 19 00 	cp.h	r9,r10
800051d4:	5f 0a       	sreq	r10
800051d6:	ed ea 10 0a 	or	r10,r6,r10
800051da:	f6 0a 18 00 	cp.b	r10,r11
         }
         if( 0 == u16_tmp )
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800051de:	c3 01       	brne	8000523e <fat_create_entry_file_name+0x1be>
800051e0:	58 09       	cp.w	r9,0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
         u8_id++;
800051e2:	5f 02       	sreq	r2
         }
         if( 0 == u16_tmp )
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800051e4:	fa c9 ff e6 	sub	r9,sp,-26
800051e8:	2f f8       	sub	r8,-1
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
800051ea:	13 9a       	ld.ub	r10,r9[0x1]
800051ec:	2f f0       	sub	r0,-1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800051ee:	18 ca       	st.b	r12++,r10
800051f0:	13 89       	ld.ub	r9,r9[0x0]
800051f2:	b8 89       	st.b	r12[0x0],r9
800051f4:	2f f8       	sub	r8,-1
800051f6:	5c 58       	castu.b	r8
800051f8:	e6 08 18 00 	cp.b	r8,r3
   {
      // fields with no character
      if( 11 == u8_id)
800051fc:	e0 8b 00 0b 	brhi	80005212 <fat_create_entry_file_name+0x192>
80005200:	2f fc       	sub	r12,-1
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
80005202:	ee 08 18 00 	cp.b	r8,r7
80005206:	cc 91       	brne	80005198 <fat_create_entry_file_name+0x118>
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005208:	30 f6       	mov	r6,15
8000520a:	30 c8       	mov	r8,12
8000520c:	b8 86       	st.b	r12[0x0],r6
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000520e:	2f fc       	sub	r12,-1
80005210:	cf 9b       	rjmp	80005202 <fat_create_entry_file_name+0x182>
80005212:	40 06       	lddsp	r6,sp[0x0]
80005214:	2f f6       	sub	r6,-1
80005216:	5c 56       	castu.b	r6
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80005218:	ec 05 18 00 	cp.b	r5,r6
8000521c:	c1 83       	brcs	8000524c <fat_create_entry_file_name+0x1cc>
8000521e:	40 2a       	lddsp	r10,sp[0x8]
80005220:	40 19       	lddsp	r9,sp[0x4]
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
80005222:	2f 3a       	sub	r10,-13
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005224:	50 2a       	stdsp	sp[0x8],r10
80005226:	c9 db       	rjmp	80005160 <fat_create_entry_file_name+0xe0>
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80005228:	31 c8       	mov	r8,28
8000522a:	2f fc       	sub	r12,-1
8000522c:	ce bb       	rjmp	80005202 <fat_create_entry_file_name+0x182>
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
      {
         *ptr_entry = u8_crc;             // CRC field
8000522e:	3f f9       	mov	r9,-1
80005230:	b8 89       	st.b	r12[0x0],r9
80005232:	ce 1b       	rjmp	800051f4 <fat_create_entry_file_name+0x174>
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005234:	40 5a       	lddsp	r10,sp[0x14]
80005236:	30 e8       	mov	r8,14
            u16_tmp = sz_name[0];
         }
         if(('\\' == u16_tmp )
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80005238:	b8 8a       	st.b	r12[0x0],r10
8000523a:	2f fc       	sub	r12,-1
8000523c:	ce 3b       	rjmp	80005202 <fat_create_entry_file_name+0x182>
8000523e:	fb 52 00 1a 	st.h	sp[26],r2
80005242:	30 12       	mov	r2,1
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005244:	cd 0b       	rjmp	800051e4 <fat_create_entry_file_name+0x164>
80005246:	e0 66 15 9c 	mov	r6,5532
8000524a:	50 16       	stdsp	sp[0x4],r6
8000524c:	40 19       	lddsp	r9,sp[0x4]
8000524e:	30 1c       	mov	r12,1
  return true;
80005250:	92 18       	ld.sh	r8,r9[0x2]
80005252:	f0 05 00 05 	add	r5,r8,r5
80005256:	b2 15       	st.h	r9[0x2],r5
80005258:	c4 eb       	rjmp	800050f4 <fat_create_entry_file_name+0x74>
8000525a:	d7 03       	nop

8000525c <nav_drive_get>:
//!
//! @return    0 to nav_drive_nb()-1
//! @return    0xFF in case of no drive selected
//!
uint8_t    nav_drive_get( void )
{
8000525c:	e0 68 15 50 	mov	r8,5456
      return 0xFF;
   return ((fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return (fs_g_nav.u8_lun);
#endif
}
80005260:	11 8c       	ld.ub	r12,r8[0x0]
80005262:	5e fc       	retal	r12

80005264 <nav_file_lgt>:
80005264:	e0 68 13 10 	mov	r8,4880
//! @return    Size of selected file (unit byte)
//!
uint32_t   nav_file_lgt( void )
{
   return fs_g_nav_entry.u32_size;
}
80005268:	70 2c       	ld.w	r12,r8[0x8]
8000526a:	5e fc       	retal	r12

8000526c <nav_file_isdir>:
8000526c:	d4 01       	pushm	lr
8000526e:	fe b0 ed 6f 	rcall	80002d4c <fat_entry_is_dir>
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
   return fat_entry_is_dir();
}
80005272:	d8 02       	popm	pc

80005274 <nav_file_name>:
80005274:	d4 31       	pushm	r0-r7,lr
80005276:	20 1d       	sub	sp,4
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80005278:	18 94       	mov	r4,r12
8000527a:	16 96       	mov	r6,r11
8000527c:	14 97       	mov	r7,r10
8000527e:	12 92       	mov	r2,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80005280:	fe b0 f3 72 	rcall	80003964 <fat_check_mount_select>
80005284:	c2 70       	breq	800052d2 <nav_file_name+0x5e>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
80005286:	58 07       	cp.w	r7,0
80005288:	c2 81       	brne	800052d8 <nav_file_name+0x64>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000528a:	e0 65 15 9c 	mov	r5,5532
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000528e:	8a 13       	ld.sh	r3,r5[0x2]
80005290:	58 03       	cp.w	r3,0
80005292:	c3 61       	brne	800052fe <nav_file_name+0x8a>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005294:	30 11       	mov	r1,1
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80005296:	30 09       	mov	r9,0
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005298:	31 00       	mov	r0,16

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
8000529a:	50 09       	stdsp	sp[0x0],r9
8000529c:	fe b0 f7 96 	rcall	800041c8 <fat_read_dir>
         break; // error

      if ( b_readshortname )
800052a0:	c1 90       	breq	800052d2 <nav_file_name+0x5e>
800052a2:	58 01       	cp.w	r1,0
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
800052a4:	c3 71       	brne	80005312 <nav_file_name+0x9e>
800052a6:	04 99       	mov	r9,r2
800052a8:	0e 9a       	mov	r10,r7
800052aa:	0c 9b       	mov	r11,r6
800052ac:	08 9c       	mov	r12,r4
800052ae:	fe b0 ee 4f 	rcall	80002f4c <fat_entry_longname>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800052b2:	c3 61       	brne	8000531e <nav_file_name+0xaa>
800052b4:	e0 69 15 a0 	mov	r9,5536
800052b8:	13 88       	ld.ub	r8,r9[0x0]
800052ba:	e0 08 18 00 	cp.b	r8,r0
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
800052be:	c1 20       	breq	800052e2 <nav_file_name+0x6e>
800052c0:	aa 13       	st.h	r5[0x2],r3
800052c2:	30 b9       	mov	r9,11
800052c4:	f2 08 18 00 	cp.b	r8,r9

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
800052c8:	c0 51       	brne	800052d2 <nav_file_name+0x5e>
800052ca:	30 11       	mov	r1,1
800052cc:	fe b0 f7 7e 	rcall	800041c8 <fat_read_dir>
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
}
800052d0:	ce 91       	brne	800052a2 <nav_file_name+0x2e>
800052d2:	30 0c       	mov	r12,0

   if ( !fat_check_mount_select())
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
800052d4:	2f fd       	sub	sp,-4
800052d6:	d8 32       	popm	r0-r7,pc
      {
         if( g_b_string_length )
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800052d8:	58 06       	cp.w	r6,0
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
}
800052da:	cd 81       	brne	8000528a <nav_file_name+0x16>
800052dc:	30 1c       	mov	r12,1
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
800052de:	2f fd       	sub	sp,-4
800052e0:	d8 32       	popm	r0-r7,pc
800052e2:	e0 69 15 a1 	mov	r9,5537
800052e6:	13 88       	ld.ub	r8,r9[0x0]
800052e8:	30 09       	mov	r9,0
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800052ea:	f2 08 18 00 	cp.b	r8,r9
800052ee:	c0 d1       	brne	80005308 <nav_file_name+0x94>
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800052f0:	20 d6       	sub	r6,13
800052f2:	2f 34       	sub	r4,-13
800052f4:	5c 56       	castu.b	r6
800052f6:	8a 18       	ld.sh	r8,r5[0x2]
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800052f8:	20 18       	sub	r8,1
800052fa:	aa 18       	st.h	r5[0x2],r8
800052fc:	cd 0b       	rjmp	8000529c <nav_file_name+0x28>
800052fe:	e6 c8 00 01 	sub	r8,r3,1
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80005302:	30 01       	mov	r1,0
80005304:	aa 18       	st.h	r5[0x2],r8
80005306:	cc 8b       	rjmp	80005296 <nav_file_name+0x22>
80005308:	40 08       	lddsp	r8,sp[0x0]
8000530a:	2f 38       	sub	r8,-13
         break; // error

      if ( b_readshortname )
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
8000530c:	5c 88       	casts.h	r8
8000530e:	50 08       	stdsp	sp[0x0],r8
80005310:	cf 3b       	rjmp	800052f6 <nav_file_name+0x82>
80005312:	0e 9a       	mov	r10,r7
80005314:	0c 9b       	mov	r11,r6
80005316:	08 9c       	mov	r12,r4
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
      {
         if( g_b_string_length )
80005318:	fe b0 ed 66 	rcall	80002de4 <fat_entry_shortname>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000531c:	cd cb       	rjmp	800052d4 <nav_file_name+0x60>
8000531e:	e0 68 15 a1 	mov	r8,5537
80005322:	11 88       	ld.ub	r8,r8[0x0]
80005324:	e2 08 18 00 	cp.b	r8,r1
80005328:	e9 f8 12 00 	ld.shne	r8,r4[0x0]
8000532c:	fb f9 10 00 	ld.wne	r9,sp[0x0]
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80005330:	f1 d9 e1 08 	addne	r8,r8,r9
80005334:	e9 f8 1c 00 	st.hne	r4[0x0],r8
80005338:	aa 13       	st.h	r5[0x2],r3
8000533a:	30 1c       	mov	r12,1
8000533c:	cd 1b       	rjmp	800052de <nav_file_name+0x6a>
8000533e:	d7 03       	nop

80005340 <nav_filelist_set>:
80005340:	d4 31       	pushm	r0-r7,lr
80005342:	20 4d       	sub	sp,16
80005344:	50 0c       	stdsp	sp[0x0],r12
80005346:	16 95       	mov	r5,r11
80005348:	fe b0 f3 86 	rcall	80003a54 <fat_check_mount_noopen>
8000534c:	e0 80 00 97 	breq	8000547a <nav_filelist_set+0x13a>
80005350:	e0 64 15 50 	mov	r4,5456
   if ( !fat_check_mount_noopen())
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80005354:	e0 67 15 9c 	mov	r7,5532

   if ( !fat_check_mount_noopen())
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80005358:	e9 08 00 24 	ld.sh	r8,r4[36]
8000535c:	8e 19       	ld.sh	r9,r7[0x2]
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000535e:	30 06       	mov	r6,0
   b_save_entry_type       = fs_g_nav.b_mode_nav;
80005360:	50 19       	stdsp	sp[0x4],r9
80005362:	50 28       	stdsp	sp[0x8],r8
80005364:	e9 39 00 2c 	ld.ub	r9,r4[44]
80005368:	40 18       	lddsp	r8,sp[0x4]
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000536a:	50 39       	stdsp	sp[0xc],r9
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000536c:	5c 88       	casts.h	r8
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000536e:	3f e0       	mov	r0,-2
80005370:	0c 93       	mov	r3,r6
80005372:	e0 61 15 a0 	mov	r1,5536
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80005376:	31 a2       	mov	r2,26
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80005378:	c2 78       	rjmp	800053c6 <nav_filelist_set+0x86>
8000537a:	58 06       	cp.w	r6,0
8000537c:	c2 71       	brne	800053ca <nav_filelist_set+0x8a>
8000537e:	3f f9       	mov	r9,-1
80005380:	f2 08 19 00 	cp.h	r8,r9
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005384:	e0 80 00 8b 	breq	8000549a <nav_filelist_set+0x15a>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005388:	58 08       	cp.w	r8,0
8000538a:	c6 61       	brne	80005456 <nav_filelist_set+0x116>
8000538c:	e9 38 00 2c 	ld.ub	r8,r4[44]
80005390:	e6 08 18 00 	cp.b	r8,r3
80005394:	e0 80 00 83 	breq	8000549a <nav_filelist_set+0x15a>
80005398:	e0 69 15 50 	mov	r9,5456
8000539c:	f3 38 00 2d 	ld.ub	r8,r9[45]
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
         }
      }

      if( !fat_read_dir())
800053a0:	e6 08 18 00 	cp.b	r8,r3
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800053a4:	c7 b1       	brne	8000549a <nav_filelist_set+0x15a>
800053a6:	30 16       	mov	r6,1
800053a8:	fe b0 f7 10 	rcall	800041c8 <fat_read_dir>
800053ac:	c1 71       	brne	800053da <nav_filelist_set+0x9a>
      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
800053ae:	e0 6a 15 a0 	mov	r10,5536
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
800053b2:	03 88       	ld.ub	r8,r1[0x0]
800053b4:	e4 08 18 00 	cp.b	r8,r2
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
   b_save_entry_type       = fs_g_nav.b_mode_nav;
800053b8:	c5 61       	brne	80005464 <nav_filelist_set+0x124>

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800053ba:	58 06       	cp.w	r6,0
800053bc:	c2 90       	breq	8000540e <nav_filelist_set+0xce>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800053be:	e9 63 00 2c 	st.b	r4[44],r3
800053c2:	30 06       	mov	r6,0
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
            break;
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
800053c4:	8e 18       	ld.sh	r8,r7[0x2]
800053c6:	58 05       	cp.w	r5,0
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
         }
      }

      if( !fat_read_dir())
800053c8:	cd 90       	breq	8000537a <nav_filelist_set+0x3a>
800053ca:	e0 08 19 00 	cp.h	r8,r0
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
800053ce:	c4 70       	breq	8000545c <nav_filelist_set+0x11c>
800053d0:	2f f8       	sub	r8,-1
800053d2:	ae 18       	st.h	r7[0x2],r8
800053d4:	fe b0 f6 fa 	rcall	800041c8 <fat_read_dir>
800053d8:	ce b0       	breq	800053ae <nav_filelist_set+0x6e>
800053da:	e9 38 00 2c 	ld.ub	r8,r4[44]
         {
           // HERE, the file entry match with the type seached

           if( b_find_last_entry )
800053de:	e6 08 18 00 	cp.b	r8,r3
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
800053e2:	5f 1c       	srne	r12
800053e4:	fe b0 ec 5c 	rcall	80002c9c <fat_entry_check>
              fs_g_nav.u16_pos_sel_file++;
           else
              fs_g_nav.u16_pos_sel_file--;
800053e8:	c2 80       	breq	80005438 <nav_filelist_set+0xf8>
800053ea:	58 06       	cp.w	r6,0
800053ec:	ce c1       	brne	800053c4 <nav_filelist_set+0x84>
800053ee:	58 05       	cp.w	r5,0
800053f0:	c4 71       	brne	8000547e <nav_filelist_set+0x13e>

           if (0 == u16_nb)
800053f2:	e0 69 15 50 	mov	r9,5456
800053f6:	f3 08 00 24 	ld.sh	r8,r9[36]
           {
              // It is the end of move then update file information
              fat_get_entry_info();
              return true;         // NB FILE FIND
           }
           u16_nb--;
800053fa:	20 18       	sub	r8,1
800053fc:	f3 58 00 24 	st.h	r9[36],r8
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
            continue;
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
80005400:	40 08       	lddsp	r8,sp[0x0]
80005402:	58 08       	cp.w	r8,0
80005404:	c4 70       	breq	80005492 <nav_filelist_set+0x152>
80005406:	20 18       	sub	r8,1
80005408:	5c 88       	casts.h	r8
8000540a:	50 08       	stdsp	sp[0x0],r8
8000540c:	cd cb       	rjmp	800053c4 <nav_filelist_set+0x84>
8000540e:	e9 38 00 2c 	ld.ub	r8,r4[44]
80005412:	30 19       	mov	r9,1
80005414:	f2 08 18 00 	cp.b	r8,r9
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
            break;                        // end of search
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80005418:	c4 60       	breq	800054a4 <nav_filelist_set+0x164>
            fs_g_nav.b_mode_nav = FS_FILE;
8000541a:	e0 69 15 50 	mov	r9,5456
8000541e:	f3 38 00 2d 	ld.ub	r8,r9[45]
80005422:	e6 08 18 00 	cp.b	r8,r3
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005426:	c3 f1       	brne	800054a4 <nav_filelist_set+0x164>
80005428:	3f f8       	mov	r8,-1
8000542a:	e0 69 15 50 	mov	r9,5456
8000542e:	ae 18       	st.h	r7[0x2],r8
80005430:	30 18       	mov	r8,1
80005432:	f3 68 00 2c 	st.b	r9[44],r8
80005436:	cc 7b       	rjmp	800053c4 <nav_filelist_set+0x84>
80005438:	30 aa       	mov	r10,10
8000543a:	03 88       	ld.ub	r8,r1[0x0]
8000543c:	e4 08 18 00 	cp.b	r8,r2
80005440:	5f 09       	sreq	r9
               break;
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80005442:	f4 08 18 00 	cp.b	r8,r10
80005446:	5f 08       	sreq	r8
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
80005448:	e0 6a 15 a0 	mov	r10,5536
8000544c:	10 49       	or	r9,r8
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
8000544e:	e6 09 18 00 	cp.b	r9,r3
80005452:	cb 90       	breq	800053c4 <nav_filelist_set+0x84>
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80005454:	cb 3b       	rjmp	800053ba <nav_filelist_set+0x7a>
80005456:	20 18       	sub	r8,1
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
80005458:	ae 18       	st.h	r7[0x2],r8
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000545a:	ca 7b       	rjmp	800053a8 <nav_filelist_set+0x68>
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000545c:	30 89       	mov	r9,8
8000545e:	e0 68 15 a0 	mov	r8,5536
80005462:	b0 89       	st.b	r8[0x0],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
   return false;
}
80005464:	40 19       	lddsp	r9,sp[0x4]
80005466:	40 28       	lddsp	r8,sp[0x8]
           if( b_find_last_entry )
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
80005468:	ae 19       	st.h	r7[0x2],r9
8000546a:	e9 58 00 24 	st.h	r4[36],r8
8000546e:	40 39       	lddsp	r9,sp[0xc]
80005470:	30 0c       	mov	r12,0
80005472:	58 09       	cp.w	r9,0
           else
              fs_g_nav.u16_pos_sel_file--;

           if (0 == u16_nb)
80005474:	5f 18       	srne	r8
80005476:	e9 68 00 2c 	st.b	r4[44],r8
           {
              // It is the end of move then update file information
              fat_get_entry_info();
8000547a:	2f cd       	sub	sp,-16
8000547c:	d8 32       	popm	r0-r7,pc
8000547e:	e0 69 15 50 	mov	r9,5456
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80005482:	f3 08 00 24 	ld.sh	r8,r9[36]
80005486:	2f f8       	sub	r8,-1
               break;
80005488:	f3 58 00 24 	st.h	r9[36],r8
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
8000548c:	40 08       	lddsp	r8,sp[0x0]
            break;                        // end of search
8000548e:	58 08       	cp.w	r8,0
80005490:	cb b1       	brne	80005406 <nav_filelist_set+0xc6>
80005492:	fe b0 ec 31 	rcall	80002cf4 <fat_get_entry_info>
80005496:	2f cd       	sub	sp,-16
80005498:	da 3a       	popm	r0-r7,pc,r12=1
8000549a:	30 99       	mov	r9,9
8000549c:	e0 68 15 a0 	mov	r8,5536
800054a0:	b0 89       	st.b	r8[0x0],r9
800054a2:	ce 1b       	rjmp	80005464 <nav_filelist_set+0x124>
800054a4:	30 98       	mov	r8,9
800054a6:	b4 88       	st.b	r10[0x0],r8
800054a8:	cd eb       	rjmp	80005464 <nav_filelist_set+0x124>
800054aa:	d7 03       	nop

800054ac <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
800054ac:	eb cd 40 c0 	pushm	r6-r7,lr
800054b0:	18 96       	mov	r6,r12
800054b2:	16 97       	mov	r7,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
800054b4:	30 1b       	mov	r11,1
800054b6:	30 0c       	mov	r12,0
800054b8:	c4 4f       	rcall	80005340 <nav_filelist_set>
800054ba:	c0 80       	breq	800054ca <nav_filelist_findname+0x1e>
800054bc:	30 0a       	mov	r10,0
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
800054be:	0e 99       	mov	r9,r7
800054c0:	14 9b       	mov	r11,r10
800054c2:	0c 9c       	mov	r12,r6
800054c4:	cd 8e       	rcall	80005274 <nav_file_name>
800054c6:	cf 70       	breq	800054b4 <nav_filelist_findname+0x8>
800054c8:	30 1c       	mov	r12,1
800054ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         return true;
   }
}
800054ce:	d7 03       	nop

800054d0 <nav_filelist_reset>:
800054d0:	d4 01       	pushm	lr
800054d2:	fe b0 f2 c1 	rcall	80003a54 <fat_check_mount_noopen>
800054d6:	c0 40       	breq	800054de <nav_filelist_reset+0xe>
800054d8:	fe b0 ec 44 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800054dc:	30 1c       	mov	r12,1
   return true;
}
800054de:	d8 02       	popm	pc

800054e0 <nav_dir_gotoparent>:
800054e0:	eb cd 40 e0 	pushm	r5-r7,lr
800054e4:	fe b0 f2 b8 	rcall	80003a54 <fat_check_mount_noopen>
//!
bool  nav_dir_gotoparent( void )
{
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800054e8:	c1 30       	breq	8000550e <nav_dir_gotoparent+0x2e>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800054ea:	e0 65 15 50 	mov	r5,5456
800054ee:	6a 8c       	ld.w	r12,r5[0x20]
800054f0:	58 0c       	cp.w	r12,0
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800054f2:	c0 71       	brne	80005500 <nav_dir_gotoparent+0x20>
800054f4:	31 99       	mov	r9,25
800054f6:	e0 68 15 a0 	mov	r8,5536
      return false;
800054fa:	b0 89       	st.b	r8[0x0],r9
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800054fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005500:	30 19       	mov	r9,1
   if ( !fat_read_dir())
80005502:	e0 68 15 9c 	mov	r8,5532
80005506:	b0 19       	st.h	r8[0x2],r9
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
   return false;
80005508:	fe b0 f6 60 	rcall	800041c8 <fat_read_dir>

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
   if ( !fat_read_dir())
      return false;
   fat_get_entry_info();
8000550c:	c0 31       	brne	80005512 <nav_dir_gotoparent+0x32>
8000550e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80005512:	fe b0 eb f1 	rcall	80002cf4 <fat_get_entry_info>
80005516:	e0 67 13 10 	mov	r7,4880

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000551a:	6e 18       	ld.w	r8,r7[0x4]
8000551c:	6a 86       	ld.w	r6,r5[0x20]
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
8000551e:	8b 88       	st.w	r5[0x20],r8
80005520:	cd 8f       	rcall	800054d0 <nav_filelist_reset>
80005522:	cf 60       	breq	8000550e <nav_dir_gotoparent+0x2e>
80005524:	eb 39 00 2d 	ld.ub	r9,r5[45]
80005528:	30 08       	mov	r8,0
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000552a:	f0 09 18 00 	cp.b	r9,r8
8000552e:	c0 a1       	brne	80005542 <nav_dir_gotoparent+0x62>
80005530:	30 1b       	mov	r11,1
80005532:	30 0c       	mov	r12,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80005534:	c0 6f       	rcall	80005340 <nav_filelist_set>
80005536:	c0 c0       	breq	8000554e <nav_dir_gotoparent+0x6e>
80005538:	6e 18       	ld.w	r8,r7[0x4]
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
   return false;
8000553a:	0c 38       	cp.w	r8,r6
8000553c:	cf a1       	brne	80005530 <nav_dir_gotoparent+0x50>
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
8000553e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80005542:	eb 39 00 2c 	ld.ub	r9,r5[44]
80005546:	f0 09 18 00 	cp.b	r9,r8
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000554a:	cf 30       	breq	80005530 <nav_dir_gotoparent+0x50>
8000554c:	cf 9b       	rjmp	8000553e <nav_dir_gotoparent+0x5e>
8000554e:	30 89       	mov	r9,8
   return false;
80005550:	e0 68 15 a0 	mov	r8,5536
80005554:	b0 89       	st.b	r8[0x0],r9
80005556:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000555a:	d7 03       	nop

8000555c <nav_dir_name>:
8000555c:	d4 31       	pushm	r0-r7,lr
8000555e:	20 4d       	sub	sp,16
80005560:	18 91       	mov	r1,r12
80005562:	16 90       	mov	r0,r11
80005564:	fe b0 f2 78 	rcall	80003a54 <fat_check_mount_noopen>
80005568:	c0 f0       	breq	80005586 <nav_dir_name+0x2a>
8000556a:	e0 67 15 50 	mov	r7,5456
8000556e:	6e 86       	ld.w	r6,r7[0x20]
80005570:	58 06       	cp.w	r6,0
80005572:	c3 51       	brne	800055dc <nav_dir_name+0x80>
80005574:	e0 68 15 a1 	mov	r8,5537
      fs_g_nav_entry.u32_size             = save_u32_size              ;
   }
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
80005578:	11 88       	ld.ub	r8,r8[0x0]
8000557a:	ec 08 18 00 	cp.b	r8,r6
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
8000557e:	c0 60       	breq	8000558a <nav_dir_name+0x2e>
80005580:	30 38       	mov	r8,3
      }
      status = true;

   }
   return status;
}
80005582:	30 1c       	mov	r12,1
80005584:	a2 08       	st.h	r1[0x0],r8
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
80005586:	2f cd       	sub	sp,-16
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
80005588:	d8 32       	popm	r0-r7,pc
8000558a:	10 9a       	mov	r10,r8
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
8000558c:	2f f1       	sub	r1,-1
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
8000558e:	30 18       	mov	r8,1
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
80005590:	30 2c       	mov	r12,2
80005592:	3f f6       	mov	r6,-1
80005594:	10 9b       	mov	r11,r8
80005596:	f0 c9 00 01 	sub	r9,r8,1
8000559a:	f4 09 18 00 	cp.b	r9,r10
8000559e:	c1 80       	breq	800055ce <nav_dir_name+0x72>
800055a0:	f6 09 18 00 	cp.b	r9,r11
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
800055a4:	c0 a0       	breq	800055b8 <nav_dir_name+0x5c>
800055a6:	30 09       	mov	r9,0
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
800055a8:	e3 69 ff ff 	st.b	r1[-1],r9
800055ac:	f8 08 18 00 	cp.b	r8,r12
800055b0:	e0 88 00 07 	brls	800055be <nav_dir_name+0x62>
800055b4:	2f cd       	sub	sp,-16
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
800055b6:	da 3a       	popm	r0-r7,pc,r12=1
800055b8:	33 a9       	mov	r9,58
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
800055ba:	e3 69 ff ff 	st.b	r1[-1],r9
800055be:	2f f8       	sub	r8,-1
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
800055c0:	2f f1       	sub	r1,-1
800055c2:	5c 58       	castu.b	r8
800055c4:	f0 c9 00 01 	sub	r9,r8,1
800055c8:	f4 09 18 00 	cp.b	r9,r10
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
800055cc:	ce a1       	brne	800055a0 <nav_dir_name+0x44>
800055ce:	0f 89       	ld.ub	r9,r7[0x0]
800055d0:	ec 09 18 00 	cp.b	r9,r6
      return 'X';
#if (FS_MULTI_PARTITION  ==  true)
   return ('A' + (fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return ('A' + fs_g_nav.u8_lun);
800055d4:	c2 a0       	breq	80005628 <nav_dir_name+0xcc>
800055d6:	2b f9       	sub	r9,-65
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800055d8:	5c 59       	castu.b	r9
800055da:	cf 0b       	rjmp	800055ba <nav_dir_name+0x5e>
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
800055dc:	ef 3a 00 2d 	ld.ub	r10,r7[45]
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800055e0:	ef 38 00 2c 	ld.ub	r8,r7[44]
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
800055e4:	30 09       	mov	r9,0
800055e6:	f2 08 18 00 	cp.b	r8,r9
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800055ea:	5f 18       	srne	r8
800055ec:	f2 0a 18 00 	cp.b	r10,r9
   if (0 != fs_g_nav.u32_cluster_sel_dir)
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
800055f0:	5f 19       	srne	r9
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
800055f2:	30 1a       	mov	r10,1
800055f4:	e0 65 13 10 	mov	r5,4880
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
800055f8:	ef 6a 00 2c 	st.b	r7[44],r10
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
800055fc:	ef 6a 00 2d 	st.b	r7[45],r10
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
80005600:	6a 1a       	ld.w	r10,r5[0x4]
80005602:	50 3a       	stdsp	sp[0xc],r10
      return false;

   if (0 != fs_g_nav.u32_cluster_sel_dir)
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
80005604:	6a 2a       	ld.w	r10,r5[0x8]
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
80005606:	50 09       	stdsp	sp[0x0],r9
      return false;

   if (0 != fs_g_nav.u32_cluster_sel_dir)
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
80005608:	50 18       	stdsp	sp[0x4],r8
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
8000560a:	e0 64 15 9c 	mov	r4,5532
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
8000560e:	0b a2       	ld.ub	r2,r5[0x2]
80005610:	88 13       	ld.sh	r3,r4[0x2]
80005612:	50 2a       	stdsp	sp[0x8],r10
80005614:	c6 6f       	rcall	800054e0 <nav_dir_gotoparent>
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
80005616:	40 09       	lddsp	r9,sp[0x0]
80005618:	40 18       	lddsp	r8,sp[0x4]
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
8000561a:	c0 91       	brne	8000562c <nav_dir_name+0xd0>
8000561c:	ef 68 00 2c 	st.b	r7[44],r8
      }
      status = true;

   }
   return status;
}
80005620:	ef 69 00 2d 	st.b	r7[45],r9
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
80005624:	2f cd       	sub	sp,-16
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
         return false;
      }
      fs_g_nav.b_mode_nav_single = b_mode_nav_single_save ;
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
80005626:	d8 32       	popm	r0-r7,pc
80005628:	35 89       	mov	r9,88
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
8000562a:	cb fb       	rjmp	800055a8 <nav_dir_name+0x4c>
8000562c:	ef 68 00 2c 	st.b	r7[44],r8
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
         return false;
      }
      fs_g_nav.b_mode_nav_single = b_mode_nav_single_save ;
80005630:	ef 08 00 1c 	ld.sh	r8,r7[28]
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
80005634:	ef 69 00 2d 	st.b	r7[45],r9
80005638:	a8 18       	st.h	r4[0x2],r8
8000563a:	30 1a       	mov	r10,1
8000563c:	00 9b       	mov	r11,r0
8000563e:	02 9c       	mov	r12,r1
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
      fs_g_nav_entry.u32_size             = save_u32_size              ;
80005640:	30 09       	mov	r9,0
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
80005642:	c1 9e       	rcall	80005274 <nav_file_name>
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
80005644:	40 28       	lddsp	r8,sp[0x8]
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
80005646:	40 3a       	lddsp	r10,sp[0xc]
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
      fs_g_nav_entry.u32_size             = save_u32_size              ;
80005648:	a8 13       	st.h	r4[0x2],r3
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
8000564a:	8f 86       	st.w	r7[0x20],r6
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
8000564c:	8b 28       	st.w	r5[0x8],r8
8000564e:	aa a2       	st.b	r5[0x2],r2
80005650:	8b 1a       	st.w	r5[0x4],r10
80005652:	c9 ab       	rjmp	80005586 <nav_dir_name+0x2a>

80005654 <nav_partition_mount>:
80005654:	d4 01       	pushm	lr
80005656:	fe b0 ef 9f 	rcall	80003594 <fat_check_noopen>
8000565a:	c0 a0       	breq	8000566e <nav_partition_mount+0x1a>
8000565c:	e0 68 15 9c 	mov	r8,5532
80005660:	11 89       	ld.ub	r9,r8[0x0]
80005662:	30 08       	mov	r8,0
80005664:	f0 09 18 00 	cp.b	r9,r8
80005668:	c0 41       	brne	80005670 <nav_partition_mount+0x1c>
8000566a:	fe b0 f8 8d 	rcall	80004784 <fat_mount>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000566e:	d8 02       	popm	pc
80005670:	30 09       	mov	r9,0
80005672:	e0 68 15 50 	mov	r8,5456
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80005676:	91 89       	st.w	r8[0x20],r9
80005678:	fe b0 eb 74 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
8000567c:	da 0a       	popm	pc,r12=1
8000567e:	d7 03       	nop

80005680 <nav_drive_set>:
80005680:	eb cd 40 80 	pushm	r7,lr
80005684:	18 97       	mov	r7,r12
80005686:	fe b0 ef 87 	rcall	80003594 <fat_check_noopen>
8000568a:	c0 31       	brne	80005690 <nav_drive_set+0x10>
8000568c:	e3 cd 80 80 	ldm	sp++,r7,pc
bool  nav_drive_set( uint8_t u8_number )
{
   if ( !fat_check_noopen() )
      return false;

   if (u8_number >= get_nb_lun() )
80005690:	e0 a0 0d 10 	rcall	800070b0 <get_nb_lun>
80005694:	ee 0c 18 00 	cp.b	r12,r7
80005698:	e0 88 00 10 	brls	800056b8 <nav_drive_set+0x38>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
8000569c:	e0 68 15 50 	mov	r8,5456
800056a0:	11 89       	ld.ub	r9,r8[0x0]
800056a2:	ee 09 18 00 	cp.b	r9,r7
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
800056a6:	c1 00       	breq	800056c6 <nav_drive_set+0x46>
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
800056a8:	b0 87       	st.b	r8[0x0],r7
800056aa:	30 09       	mov	r9,0
800056ac:	e0 68 15 9c 	mov	r8,5532
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
800056b0:	30 1c       	mov	r12,1
800056b2:	b0 89       	st.b	r8[0x0],r9
   if ( !fat_check_noopen() )
      return false;

   if (u8_number >= get_nb_lun() )
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
800056b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800056b8:	30 69       	mov	r9,6
800056ba:	e0 68 15 a0 	mov	r8,5536
      return false;
800056be:	30 0c       	mov	r12,0
   }

   if ( fs_g_nav.u8_lun == u8_number)
800056c0:	b0 89       	st.b	r8[0x0],r9
800056c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800056c6:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800056ca:	d7 03       	nop

800056cc <nav_drive_nb>:
800056cc:	d4 01       	pushm	lr
800056ce:	e0 a0 0c f1 	rcall	800070b0 <get_nb_lun>
800056d2:	d8 02       	popm	pc

800056d4 <nav_dir_root>:
800056d4:	d4 01       	pushm	lr
800056d6:	fe b0 ef 5f 	rcall	80003594 <fat_check_noopen>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
   if ( !fat_check_noopen() )
800056da:	c0 a0       	breq	800056ee <nav_dir_root+0x1a>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800056dc:	e0 68 15 9c 	mov	r8,5532
800056e0:	11 89       	ld.ub	r9,r8[0x0]
800056e2:	30 08       	mov	r8,0
800056e4:	f0 09 18 00 	cp.b	r9,r8
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
      return true;
   }

   return fat_mount();
800056e8:	c0 41       	brne	800056f0 <nav_dir_root+0x1c>
800056ea:	fe b0 f8 4d 	rcall	80004784 <fat_mount>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
800056ee:	d8 02       	popm	pc
800056f0:	30 09       	mov	r9,0
800056f2:	e0 68 15 50 	mov	r8,5456
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
800056f6:	91 89       	st.w	r8[0x20],r9
800056f8:	fe b0 eb 34 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
800056fc:	da 0a       	popm	pc,r12=1
800056fe:	d7 03       	nop

80005700 <nav_reset>:
80005700:	eb cd 40 fc 	pushm	r2-r7,lr
80005704:	e0 68 15 a1 	mov	r8,5537
80005708:	30 07       	mov	r7,0
8000570a:	b0 87       	st.b	r8[0x0],r7
8000570c:	e0 68 13 22 	mov	r8,4898
   g_b_unicode = true;
#endif
   g_b_string_length = false;
   g_b_no_check_disk = false;

   fat_cache_reset();
80005710:	b0 87       	st.b	r8[0x0],r7
   fat_cache_clusterlist_reset();
80005712:	fe b0 ed 8d 	rcall	8000322c <fat_cache_reset>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80005716:	fe b0 ea 69 	rcall	80002be8 <fat_cache_clusterlist_reset>
8000571a:	e0 66 16 18 	mov	r6,5656
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
8000571e:	0d 8c       	ld.ub	r12,r6[0x0]
80005720:	58 0c       	cp.w	r12,0
      fat_invert_nav( u8_idnav );               // Select new navigator
80005722:	c0 70       	breq	80005730 <nav_reset+0x30>
80005724:	fe b0 ed 94 	rcall	8000324c <fat_invert_nav>
      fs_g_u8_nav_selected = u8_idnav;
80005728:	30 0c       	mov	r12,0
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000572a:	fe b0 ed 91 	rcall	8000324c <fat_invert_nav>
8000572e:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80005730:	30 07       	mov	r7,0
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80005732:	e0 65 15 50 	mov	r5,5456
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80005736:	e0 62 15 9c 	mov	r2,5532
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000573a:	3f f3       	mov	r3,-1
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000573c:	e0 64 13 10 	mov	r4,4880
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80005740:	0d 8c       	ld.ub	r12,r6[0x0]
80005742:	eb 67 00 2d 	st.b	r5[45],r7
      fat_invert_nav( u8_idnav );               // Select new navigator
80005746:	a4 87       	st.b	r2[0x0],r7
80005748:	aa 83       	st.b	r5[0x0],r3
#endif
      Fat_file_close();                            // By default no file is opened
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
8000574a:	a8 87       	st.b	r4[0x0],r7
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000574c:	fe b0 ed 80 	rcall	8000324c <fat_invert_nav>
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80005750:	30 1c       	mov	r12,1
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80005752:	fe b0 ed 7d 	rcall	8000324c <fat_invert_nav>
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80005756:	ac 87       	st.b	r6[0x0],r7
80005758:	a4 87       	st.b	r2[0x0],r7
8000575a:	aa 83       	st.b	r5[0x0],r3
8000575c:	a8 87       	st.b	r4[0x0],r7
8000575e:	eb 67 00 2d 	st.b	r5[45],r7
80005762:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80005766:	d7 03       	nop

80005768 <nav_file_create>:
80005768:	eb cd 40 c0 	pushm	r6-r7,lr
8000576c:	18 97       	mov	r7,r12
8000576e:	fe b0 f1 73 	rcall	80003a54 <fat_check_mount_noopen>
80005772:	c0 31       	brne	80005778 <nav_file_create+0x10>
80005774:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005778:	fe b0 ea f4 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
8000577c:	30 1b       	mov	r11,1
8000577e:	30 0c       	mov	r12,0
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80005780:	fe b0 fd e0 	rcall	80005340 <nav_filelist_set>
80005784:	18 96       	mov	r6,r12
80005786:	c0 f0       	breq	800057a4 <nav_file_create+0x3c>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80005788:	30 09       	mov	r9,0
8000578a:	0e 9c       	mov	r12,r7
8000578c:	12 9a       	mov	r10,r9
8000578e:	12 9b       	mov	r11,r9
80005790:	fe b0 fd 72 	rcall	80005274 <nav_file_name>
80005794:	cf 40       	breq	8000577c <nav_file_create+0x14>
   // Check if the name already exists
   if (!nav_filelist_reset())
      return false;
   if (nav_filelist_findname(sz_name , false))
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005796:	32 a9       	mov	r9,42
80005798:	e0 68 15 a0 	mov	r8,5536
8000579c:	30 0c       	mov	r12,0
      return false;  // File exist -> it is not possible to create this name
8000579e:	b0 89       	st.b	r8[0x0],r9
800057a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   }
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
800057a4:	0e 9c       	mov	r12,r7
800057a6:	fe b0 fc 6d 	rcall	80005080 <fat_create_entry_file_name>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
800057aa:	ce 50       	breq	80005774 <nav_file_create+0xc>
   fs_g_nav_entry.u32_size    = 0;     // The size is null
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
   fs_g_nav.b_mode_nav = FS_FILE;
800057ac:	e0 68 13 10 	mov	r8,4880
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
800057b0:	30 19       	mov	r9,1
   fs_g_nav_entry.u32_size    = 0;     // The size is null
800057b2:	b0 a6       	st.b	r8[0x2],r6
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
800057b4:	91 16       	st.w	r8[0x4],r6
   fs_g_nav.b_mode_nav = FS_FILE;
800057b6:	91 26       	st.w	r8[0x8],r6
800057b8:	e0 68 15 50 	mov	r8,5456
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
   fs_g_nav_entry.u32_size    = 0;     // The size is null
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
800057bc:	f1 69 00 2c 	st.b	r8[44],r9
800057c0:	f1 09 00 24 	ld.sh	r9,r8[36]
   fs_g_nav.b_mode_nav = FS_FILE;
   return fat_cache_flush();
800057c4:	2f f9       	sub	r9,-1
800057c6:	f1 59 00 24 	st.h	r8[36],r9
800057ca:	fe b0 ed a5 	rcall	80003314 <fat_cache_flush>
800057ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800057d2:	d7 03       	nop

800057d4 <nav_filelist_first>:
800057d4:	eb cd 40 c0 	pushm	r6-r7,lr
800057d8:	18 97       	mov	r7,r12
800057da:	fe b0 f1 3d 	rcall	80003a54 <fat_check_mount_noopen>
800057de:	c0 31       	brne	800057e4 <nav_filelist_first+0x10>
800057e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800057e4:	fe b0 ea be 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
800057e8:	e0 66 15 50 	mov	r6,5456
800057ec:	30 1b       	mov	r11,1
800057ee:	30 0c       	mov	r12,0
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800057f0:	fe b0 fd a8 	rcall	80005340 <nav_filelist_set>
   {
      if( b_type == fs_g_nav.b_mode_nav )
800057f4:	c0 70       	breq	80005802 <nav_filelist_first+0x2e>
800057f6:	ed 38 00 2c 	ld.ub	r8,r6[44]
800057fa:	10 37       	cp.w	r7,r8
800057fc:	cf 81       	brne	800057ec <nav_filelist_first+0x18>
800057fe:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
80005802:	30 99       	mov	r9,9
80005804:	e0 68 15 a0 	mov	r8,5536
   return false;
}
80005808:	b0 89       	st.b	r8[0x0],r9
8000580a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000580e:	d7 03       	nop

80005810 <nav_filelist_nb>:
80005810:	eb cd 40 fc 	pushm	r2-r7,lr
80005814:	e0 66 15 50 	mov	r6,5456
80005818:	18 92       	mov	r2,r12
8000581a:	ed 03 00 24 	ld.sh	r3,r6[36]
8000581e:	fe b0 f1 1b 	rcall	80003a54 <fat_check_mount_noopen>
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
80005822:	c0 51       	brne	8000582c <nav_filelist_nb+0x1c>
   // Return the value asked
   if( FS_FILE == b_type )
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80005824:	18 94       	mov	r4,r12
80005826:	08 9c       	mov	r12,r4
80005828:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000582c:	30 04       	mov	r4,0
8000582e:	fe b0 ea 99 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
80005832:	30 15       	mov	r5,1
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80005834:	08 97       	mov	r7,r4
80005836:	30 1b       	mov	r11,1
80005838:	30 0c       	mov	r12,0
8000583a:	fe b0 fd 83 	rcall	80005340 <nav_filelist_set>
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
8000583e:	c0 e0       	breq	8000585a <nav_filelist_nb+0x4a>
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80005840:	0e 99       	mov	r9,r7
80005842:	ed 38 00 2c 	ld.ub	r8,r6[44]
80005846:	2f f9       	sub	r9,-1
80005848:	ea 08 18 00 	cp.b	r8,r5
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
8000584c:	c0 40       	breq	80005854 <nav_filelist_nb+0x44>
8000584e:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
         u16_save_number_file++;    // It is a file
80005852:	cf 2b       	rjmp	80005836 <nav_filelist_nb+0x26>
80005854:	2f f4       	sub	r4,-1
80005856:	5c 84       	casts.h	r4
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
80005858:	ce fb       	rjmp	80005836 <nav_filelist_nb+0x26>
8000585a:	fe b0 f0 fd 	rcall	80003a54 <fat_check_mount_noopen>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000585e:	c0 30       	breq	80005864 <nav_filelist_nb+0x54>
80005860:	fe b0 ea 80 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
   if ( u16_save_position != FS_NO_SEL )
80005864:	3f f8       	mov	r8,-1
80005866:	f0 03 19 00 	cp.h	r3,r8
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
8000586a:	c0 60       	breq	80005876 <nav_filelist_nb+0x66>
8000586c:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
80005870:	30 1b       	mov	r11,1
80005872:	fe b0 fd 67 	rcall	80005340 <nav_filelist_set>
   }
   // Return the value asked
   if( FS_FILE == b_type )
80005876:	58 02       	cp.w	r2,0
80005878:	cd 71       	brne	80005826 <nav_filelist_nb+0x16>
8000587a:	0e 94       	mov	r4,r7
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
8000587c:	5c 84       	casts.h	r4
8000587e:	08 9c       	mov	r12,r4
80005880:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80005884 <nav_filelist_last>:
80005884:	eb cd 40 fc 	pushm	r2-r7,lr
80005888:	e0 66 15 50 	mov	r6,5456
8000588c:	18 93       	mov	r3,r12
8000588e:	ed 02 00 24 	ld.sh	r2,r6[36]
80005892:	fe b0 f0 e1 	rcall	80003a54 <fat_check_mount_noopen>

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
   if( 0 == u16_nb )
   {
      fs_g_status = FS_ERR_NO_FIND;
80005896:	c0 81       	brne	800058a6 <nav_filelist_last+0x22>
80005898:	30 99       	mov	r9,9
8000589a:	e0 68 15 a0 	mov	r8,5536
      return false;  // NO FILE FOUND
8000589e:	30 0c       	mov	r12,0
800058a0:	b0 89       	st.b	r8[0x0],r9
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800058a2:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800058a6:	30 04       	mov	r4,0
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800058a8:	fe b0 ea 5c 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800058ac:	30 15       	mov	r5,1
800058ae:	08 97       	mov	r7,r4
800058b0:	30 1b       	mov	r11,1
800058b2:	30 0c       	mov	r12,0
800058b4:	fe b0 fd 46 	rcall	80005340 <nav_filelist_set>
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800058b8:	c0 e0       	breq	800058d4 <nav_filelist_last+0x50>
800058ba:	0e 99       	mov	r9,r7
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
800058bc:	ed 38 00 2c 	ld.ub	r8,r6[44]
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800058c0:	2f f9       	sub	r9,-1
800058c2:	ea 08 18 00 	cp.b	r8,r5
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
800058c6:	c0 40       	breq	800058ce <nav_filelist_last+0x4a>
800058c8:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
         u16_save_number_file++;    // It is a file
800058cc:	cf 2b       	rjmp	800058b0 <nav_filelist_last+0x2c>
800058ce:	2f f4       	sub	r4,-1
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
800058d0:	5c 84       	casts.h	r4
800058d2:	ce fb       	rjmp	800058b0 <nav_filelist_last+0x2c>
800058d4:	fe b0 f0 c0 	rcall	80003a54 <fat_check_mount_noopen>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800058d8:	c0 30       	breq	800058de <nav_filelist_last+0x5a>
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
   if ( u16_save_position != FS_NO_SEL )
800058da:	fe b0 ea 43 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
800058de:	3f f8       	mov	r8,-1
800058e0:	f0 02 19 00 	cp.h	r2,r8
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
800058e4:	c0 60       	breq	800058f0 <nav_filelist_last+0x6c>
800058e6:	f9 d2 c0 10 	bfextu	r12,r2,0x0,0x10
800058ea:	30 1b       	mov	r11,1
   }
   // Return the value asked
   if( FS_FILE == b_type )
800058ec:	fe b0 fd 2a 	rcall	80005340 <nav_filelist_set>
800058f0:	58 03       	cp.w	r3,0
800058f2:	c0 31       	brne	800058f8 <nav_filelist_last+0x74>
{
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
   if( 0 == u16_nb )
800058f4:	0e 94       	mov	r4,r7
800058f6:	5c 84       	casts.h	r4
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
800058f8:	58 04       	cp.w	r4,0
800058fa:	cc f0       	breq	80005898 <nav_filelist_last+0x14>
800058fc:	fe b0 f0 ac 	rcall	80003a54 <fat_check_mount_noopen>
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
}
80005900:	c0 31       	brne	80005906 <nav_filelist_last+0x82>
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80005902:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80005906:	fe b0 ea 2d 	rcall	80002d60 <fat_clear_entry_info_and_ptr>
8000590a:	30 1b       	mov	r11,1
8000590c:	30 0c       	mov	r12,0
8000590e:	fe b0 fd 19 	rcall	80005340 <nav_filelist_set>
   {
      if( b_type == fs_g_nav.b_mode_nav )
80005912:	c1 30       	breq	80005938 <nav_filelist_last+0xb4>
80005914:	ed 38 00 2c 	ld.ub	r8,r6[44]
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
80005918:	10 33       	cp.w	r3,r8
8000591a:	cf 81       	brne	8000590a <nav_filelist_last+0x86>
8000591c:	30 18       	mov	r8,1
8000591e:	f0 04 19 00 	cp.h	r4,r8
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
80005922:	c0 90       	breq	80005934 <nav_filelist_last+0xb0>
80005924:	08 9c       	mov	r12,r4
80005926:	30 1b       	mov	r11,1
80005928:	20 2c       	sub	r12,2
8000592a:	5c 7c       	castu.h	r12
}
8000592c:	fe b0 fd 0a 	rcall	80005340 <nav_filelist_set>
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
80005930:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
80005934:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005938:	30 99       	mov	r9,9
8000593a:	e0 68 15 a0 	mov	r8,5536
8000593e:	b0 89       	st.b	r8[0x0],r9
80005940:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80005944 <nav_dir_make>:
80005944:	eb cd 40 c0 	pushm	r6-r7,lr
80005948:	18 97       	mov	r7,r12
8000594a:	fe b0 f0 85 	rcall	80003a54 <fat_check_mount_noopen>
8000594e:	c0 31       	brne	80005954 <nav_dir_make+0x10>
80005950:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
{
   if ( !fat_check_mount_noopen())
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80005954:	0e 9c       	mov	r12,r7
80005956:	c0 9f       	rcall	80005768 <nav_file_create>
80005958:	cf c0       	breq	80005950 <nav_dir_make+0xc>
8000595a:	3f f8       	mov	r8,-1
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000595c:	e0 67 15 f8 	mov	r7,5624
80005960:	ae 88       	st.b	r7[0x0],r8
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80005962:	30 18       	mov	r8,1
80005964:	8f 18       	st.w	r7[0x4],r8
   if ( !fat_allocfreespace())
80005966:	fe b0 fa 3d 	rcall	80004de0 <fat_allocfreespace>
8000596a:	18 96       	mov	r6,r12
8000596c:	c1 80       	breq	8000599c <nav_dir_make+0x58>
      fat_cache_flush();
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
8000596e:	6e 09       	ld.w	r9,r7[0x0]
80005970:	e0 68 13 10 	mov	r8,4880
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
80005974:	91 19       	st.w	r8[0x4],r9
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80005976:	31 09       	mov	r9,16
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
80005978:	30 07       	mov	r7,0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
8000597a:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
8000597c:	91 27       	st.w	r8[0x8],r7
8000597e:	fe b0 f9 5d 	rcall	80004c38 <fat_initialize_dir>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
80005982:	ce 70       	breq	80005950 <nav_dir_make+0xc>
80005984:	fe b0 f4 22 	rcall	800041c8 <fat_read_dir>
      return false;
   fat_write_entry_file();
80005988:	ce 40       	breq	80005950 <nav_dir_make+0xc>
8000598a:	fe b0 ea 01 	rcall	80002d8c <fat_write_entry_file>
   if( !fat_cache_flush())
8000598e:	fe b0 ec c3 	rcall	80003314 <fat_cache_flush>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
80005992:	cd f0       	breq	80005950 <nav_dir_make+0xc>
80005994:	0e 9c       	mov	r12,r7
80005996:	c7 7f       	rcall	80005884 <nav_filelist_last>
80005998:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
   if ( !fat_allocfreespace())
   {
      fat_delete_file( false );
8000599c:	fe b0 f5 24 	rcall	800043e4 <fat_delete_file>
      fat_cache_flush();
800059a0:	fe b0 ec ba 	rcall	80003314 <fat_cache_flush>
800059a4:	0c 9c       	mov	r12,r6
      return false;
800059a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800059aa:	d7 03       	nop

800059ac <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
800059ac:	d4 01       	pushm	lr


void print_char(volatile avr32_usart_t *usart, int c)
{
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
800059ae:	18 9b       	mov	r11,r12
800059b0:	fe 7c 18 00 	mov	r12,-59392
800059b4:	fe b0 e8 1c 	rcall	800029ec <usart_putchar>

void print_dbg_char(int c)
{
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
}
800059b8:	d8 02       	popm	pc
800059ba:	d7 03       	nop

800059bc <print_dbg_ulong>:
800059bc:	eb cd 40 c0 	pushm	r6-r7,lr


void print_dbg_ulong(unsigned long n)
{
800059c0:	20 3d       	sub	sp,12
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
800059c2:	30 08       	mov	r8,0
800059c4:	30 a9       	mov	r9,10
800059c6:	fb 68 00 0a 	st.b	sp[10],r8
800059ca:	1a 9b       	mov	r11,sp
  do
  {
    tmp[--i] = '0' + n % 10;
800059cc:	e0 6e cc cd 	mov	lr,52429
800059d0:	ea 1e cc cc 	orh	lr,0xcccc
800059d4:	f8 0e 06 46 	mulu.d	r6,r12,lr
800059d8:	20 19       	sub	r9,1
800059da:	0e 98       	mov	r8,r7
800059dc:	a3 98       	lsr	r8,0x3
800059de:	f0 08 00 2a 	add	r10,r8,r8<<0x2
800059e2:	f8 0a 01 1c 	sub	r12,r12,r10<<0x1
800059e6:	2d 0c       	sub	r12,-48
800059e8:	f6 09 0b 0c 	st.b	r11[r9],r12
    n /= 10;
800059ec:	10 9c       	mov	r12,r8
  } while (n);
800059ee:	58 08       	cp.w	r8,0
800059f0:	cf 21       	brne	800059d4 <print_dbg_ulong+0x18>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800059f2:	12 0b       	add	r11,r9
800059f4:	fe 7c 18 00 	mov	r12,-59392
800059f8:	fe b0 e8 08 	rcall	80002a08 <usart_write_line>

void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
}
800059fc:	2f dd       	sub	sp,-12
800059fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005a02:	d7 03       	nop

80005a04 <print_dbg>:
80005a04:	d4 01       	pushm	lr
80005a06:	18 9b       	mov	r11,r12


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80005a08:	fe 7c 18 00 	mov	r12,-59392
80005a0c:	fe b0 e7 fe 	rcall	80002a08 <usart_write_line>

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
80005a10:	d8 02       	popm	pc
80005a12:	d7 03       	nop

80005a14 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80005a14:	eb cd 40 c0 	pushm	r6-r7,lr
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
80005a18:	e0 69 18 32 	mov	r9,6194
80005a1c:	e0 68 18 34 	mov	r8,6196
80005a20:	13 8b       	ld.ub	r11,r9[0x0]
80005a22:	11 dc       	ld.ub	r12,r8[0x5]
80005a24:	30 39       	mov	r9,3
80005a26:	f2 0b 18 00 	cp.b	r11,r9
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80005a2a:	c4 60       	breq	80005ab6 <sd_mmc_spi_get_capacity+0xa2>
80005a2c:	11 fe       	ld.ub	lr,r8[0x7]
80005a2e:	f1 37 00 08 	ld.ub	r7,r8[8]
80005a32:	a7 87       	lsr	r7,0x6
80005a34:	ee 0e 00 27 	add	r7,r7,lr<<0x2
80005a38:	11 ee       	ld.ub	lr,r8[0x6]
80005a3a:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
    capacity = (uint64_t)c_size << 19;
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80005a3e:	ab 6e       	lsl	lr,0xa
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80005a40:	f1 39 00 0a 	ld.ub	r9,r8[10]
80005a44:	1c 07       	add	r7,lr
80005a46:	f2 06 16 07 	lsr	r6,r9,0x7
80005a4a:	2f f7       	sub	r7,-1
80005a4c:	f1 3e 00 09 	ld.ub	lr,r8[9]
80005a50:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80005a54:	ec 0e 00 1e 	add	lr,r6,lr<<0x1
80005a58:	2f ee       	sub	lr,-2
80005a5a:	ee 0e 09 4e 	lsl	lr,r7,lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80005a5e:	20 1e       	sub	lr,1
80005a60:	e0 6a 18 2c 	mov	r10,6188
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80005a64:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80005a68:	95 0e       	st.w	r10[0x0],lr
80005a6a:	74 0e       	ld.w	lr,r10[0x0]
80005a6c:	2f fe       	sub	lr,-1
80005a6e:	fc 0c 09 4e 	lsl	lr,lr,r12
80005a72:	1c 96       	mov	r6,lr
80005a74:	30 0e       	mov	lr,0
80005a76:	1c 97       	mov	r7,lr
    capacity_mult = 0;
80005a78:	e0 6e 18 20 	mov	lr,6176
80005a7c:	fc e7 00 00 	st.d	lr[0],r6
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
80005a80:	e0 67 18 28 	mov	r7,6184
80005a84:	30 0e       	mov	lr,0
80005a86:	ae 0e       	st.h	r7[0x0],lr
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80005a88:	30 97       	mov	r7,9
80005a8a:	ee 0c 18 00 	cp.b	r12,r7
80005a8e:	e0 88 00 07 	brls	80005a9c <sd_mmc_spi_get_capacity+0x88>
    }
  }
  if (card_type == MMC_CARD)
80005a92:	74 0e       	ld.w	lr,r10[0x0]
80005a94:	20 9c       	sub	r12,9
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80005a96:	fc 0c 09 4c 	lsl	r12,lr,r12
80005a9a:	95 0c       	st.w	r10[0x0],r12
80005a9c:	58 0b       	cp.w	r11,0
80005a9e:	c3 51       	brne	80005b08 <sd_mmc_spi_get_capacity+0xf4>
80005aa0:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80005aa4:	f1 38 00 0b 	ld.ub	r8,r8[11]
80005aa8:	f3 d9 c0 45 	bfextu	r9,r9,0x2,0x5
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80005aac:	a5 98       	lsr	r8,0x5
80005aae:	f1 ea 10 38 	or	r8,r8,r10<<0x3
80005ab2:	2f f8       	sub	r8,-1
80005ab4:	c3 28       	rjmp	80005b18 <sd_mmc_spi_get_capacity+0x104>
80005ab6:	f1 3e 00 08 	ld.ub	lr,r8[8]
80005aba:	f1 39 00 09 	ld.ub	r9,r8[9]
80005abe:	f3 ee 10 89 	or	r9,r9,lr<<0x8
    ++c_size;
80005ac2:	11 fe       	ld.ub	lr,r8[0x7]
    capacity = (uint64_t)c_size << 19;
80005ac4:	fd de c0 06 	bfextu	lr,lr,0x0,0x6
80005ac8:	f3 ee 11 0e 	or	lr,r9,lr<<0x10
80005acc:	2f fe       	sub	lr,-1
80005ace:	fc 09 16 0d 	lsr	r9,lr,0xd
80005ad2:	fc 0a 15 13 	lsl	r10,lr,0x13
    capacity_mult = (c_size >> 13) & 0x01FF;
80005ad6:	e0 6c 18 20 	mov	r12,6176
80005ada:	12 9b       	mov	r11,r9
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80005adc:	f8 eb 00 00 	st.d	r12[0],r10
80005ae0:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80005ae4:	e0 69 18 28 	mov	r9,6184
80005ae8:	b2 0a       	st.h	r9[0x0],r10
80005aea:	f8 ea 00 00 	ld.d	r10,r12[0]
80005aee:	92 0c       	ld.sh	r12,r9[0x0]
80005af0:	f4 09 16 09 	lsr	r9,r10,0x9
80005af4:	b7 7c       	lsl	r12,0x17
80005af6:	f3 eb 11 79 	or	r9,r9,r11<<0x17
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
80005afa:	20 19       	sub	r9,1
80005afc:	18 09       	add	r9,r12
80005afe:	e0 6a 18 2c 	mov	r10,6188
80005b02:	95 09       	st.w	r10[0x0],r9
80005b04:	f1 39 00 0a 	ld.ub	r9,r8[10]
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80005b08:	f1 38 00 0b 	ld.ub	r8,r8[11]
80005b0c:	a7 98       	lsr	r8,0x7
80005b0e:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
}
80005b12:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005b16:	30 18       	mov	r8,1
80005b18:	2f f9       	sub	r9,-1
80005b1a:	b1 39       	mul	r9,r8
80005b1c:	e0 68 18 2a 	mov	r8,6186
80005b20:	b0 09       	st.h	r8[0x0],r9
80005b22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005b26:	d7 03       	nop

80005b28 <sd_mmc_spi_write_close>:
80005b28:	5e fc       	retal	r12
80005b2a:	d7 03       	nop

80005b2c <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80005b2c:	d4 21       	pushm	r4-r7,lr
80005b2e:	20 1d       	sub	sp,4
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80005b30:	30 1b       	mov	r11,1
80005b32:	fe 7c 28 00 	mov	r12,-55296
80005b36:	fa c6 ff fe 	sub	r6,sp,-2
80005b3a:	fe b0 e5 58 	rcall	800025ea <spi_selectChip>
80005b3e:	e0 65 18 44 	mov	r5,6212
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005b42:	30 07       	mov	r7,0
80005b44:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80005b46:	c0 98       	rjmp	80005b58 <sd_mmc_spi_wait_not_busy+0x2c>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005b48:	1b b8       	ld.ub	r8,sp[0x3]
80005b4a:	aa 88       	st.b	r5[0x0],r8
80005b4c:	e8 08 18 00 	cp.b	r8,r4
  {
    retry++;
    if (retry == 200000)
80005b50:	c1 40       	breq	80005b78 <sd_mmc_spi_wait_not_busy+0x4c>
80005b52:	e2 57 0d 40 	cp.w	r7,200000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005b56:	c1 80       	breq	80005b86 <sd_mmc_spi_wait_not_busy+0x5a>
80005b58:	e0 6b 00 ff 	mov	r11,255
80005b5c:	fe 7c 28 00 	mov	r12,-55296
80005b60:	fe b0 e5 d9 	rcall	80002712 <spi_write>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005b64:	0c 9b       	mov	r11,r6
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005b66:	2f f7       	sub	r7,-1
80005b68:	fe 7c 28 00 	mov	r12,-55296
80005b6c:	fe b0 e5 e1 	rcall	8000272e <spi_read>
80005b70:	58 1c       	cp.w	r12,1
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005b72:	ce b1       	brne	80005b48 <sd_mmc_spi_wait_not_busy+0x1c>
80005b74:	3f f8       	mov	r8,-1
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80005b76:	aa 88       	st.b	r5[0x0],r8
80005b78:	30 1b       	mov	r11,1
80005b7a:	fe 7c 28 00 	mov	r12,-55296
80005b7e:	fe b0 e5 5e 	rcall	8000263a <spi_unselectChip>
80005b82:	2f fd       	sub	sp,-4
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80005b84:	da 2a       	popm	r4-r7,pc,r12=1
80005b86:	30 1b       	mov	r11,1
80005b88:	fe 7c 28 00 	mov	r12,-55296
80005b8c:	fe b0 e5 57 	rcall	8000263a <spi_unselectChip>
80005b90:	2f fd       	sub	sp,-4
80005b92:	d8 2a       	popm	r4-r7,pc,r12=0

80005b94 <sd_mmc_spi_write_open>:
80005b94:	d4 01       	pushm	lr
80005b96:	e0 68 00 fc 	mov	r8,252
80005b9a:	a9 7c       	lsl	r12,0x9
80005b9c:	91 0c       	st.w	r8[0x0],r12
80005b9e:	cc 7f       	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80005ba0:	d8 02       	popm	pc
80005ba2:	d7 03       	nop

80005ba4 <sd_mmc_spi_read_close>:
80005ba4:	d4 01       	pushm	lr
80005ba6:	cc 3f       	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
}
80005ba8:	d8 02       	popm	pc
80005baa:	d7 03       	nop

80005bac <sd_mmc_spi_read_open>:
bool sd_mmc_spi_read_close (void)
{
  if (false == sd_mmc_spi_wait_not_busy())
    return false;
  return true;
}
80005bac:	d4 01       	pushm	lr
80005bae:	e0 68 00 fc 	mov	r8,252
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80005bb2:	a9 7c       	lsl	r12,0x9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80005bb4:	91 0c       	st.w	r8[0x0],r12
80005bb6:	cb bf       	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
}
80005bb8:	d8 02       	popm	pc
80005bba:	d7 03       	nop

80005bbc <sd_mmc_spi_command>:
80005bbc:	eb cd 40 e0 	pushm	r5-r7,lr
80005bc0:	20 1d       	sub	sp,4
80005bc2:	16 97       	mov	r7,r11
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80005bc4:	18 96       	mov	r6,r12
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80005bc6:	e0 6b 00 ff 	mov	r11,255
80005bca:	fe 7c 28 00 	mov	r12,-55296
80005bce:	fe b0 e5 a2 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80005bd2:	fe 7c 28 00 	mov	r12,-55296
80005bd6:	0c 9b       	mov	r11,r6
80005bd8:	a7 ab       	sbr	r11,0x6
80005bda:	5c 5b       	castu.b	r11
80005bdc:	fe b0 e5 9b 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80005be0:	ee 0b 16 18 	lsr	r11,r7,0x18
80005be4:	fe 7c 28 00 	mov	r12,-55296
80005be8:	fe b0 e5 95 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI, arg>>16);
80005bec:	ee 0b 16 10 	lsr	r11,r7,0x10
80005bf0:	fe 7c 28 00 	mov	r12,-55296
80005bf4:	fe b0 e5 8f 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI, arg>>8 );
80005bf8:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80005bfc:	fe 7c 28 00 	mov	r12,-55296
80005c00:	fe b0 e5 89 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI, arg    );
80005c04:	0e 9b       	mov	r11,r7
80005c06:	fe 7c 28 00 	mov	r12,-55296
80005c0a:	5c 7b       	castu.h	r11
80005c0c:	fe b0 e5 83 	rcall	80002712 <spi_write>
  switch(command)
80005c10:	30 08       	mov	r8,0
80005c12:	f0 06 18 00 	cp.b	r6,r8
80005c16:	e0 80 00 ec 	breq	80005dee <sd_mmc_spi_command+0x232>
80005c1a:	30 88       	mov	r8,8
80005c1c:	f0 06 18 00 	cp.b	r6,r8
80005c20:	e0 80 00 ee 	breq	80005dfc <sd_mmc_spi_command+0x240>
         break;
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
         break;
      default:
         spi_write(SD_MMC_SPI, 0xff);
80005c24:	e0 6b 00 ff 	mov	r11,255
80005c28:	fe 7c 28 00 	mov	r12,-55296
80005c2c:	fe b0 e5 73 	rcall	80002712 <spi_write>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005c30:	e0 6b 00 ff 	mov	r11,255

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80005c34:	e0 67 18 44 	mov	r7,6212
80005c38:	3f f5       	mov	r5,-1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005c3a:	fe 7c 28 00 	mov	r12,-55296

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80005c3e:	ae 85       	st.b	r7[0x0],r5
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005c40:	fe b0 e5 69 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005c44:	fa c6 ff fe 	sub	r6,sp,-2
80005c48:	fe 7c 28 00 	mov	r12,-55296
80005c4c:	0c 9b       	mov	r11,r6
80005c4e:	fe b0 e5 70 	rcall	8000272e <spi_read>
80005c52:	58 1c       	cp.w	r12,1
80005c54:	e0 80 00 db 	breq	80005e0a <sd_mmc_spi_command+0x24e>
     return 0xFF;
   return data_read;
80005c58:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005c5a:	ae 8c       	st.b	r7[0x0],r12
80005c5c:	ea 0c 18 00 	cp.b	r12,r5
80005c60:	e0 81 00 c4 	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005c64:	e0 6b 00 ff 	mov	r11,255
80005c68:	fe 7c 28 00 	mov	r12,-55296
80005c6c:	fe b0 e5 53 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005c70:	0c 9b       	mov	r11,r6
80005c72:	fe 7c 28 00 	mov	r12,-55296
80005c76:	fe b0 e5 5c 	rcall	8000272e <spi_read>
80005c7a:	58 1c       	cp.w	r12,1
80005c7c:	e0 80 00 c9 	breq	80005e0e <sd_mmc_spi_command+0x252>
     return 0xFF;
   return data_read;
80005c80:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005c82:	ae 8c       	st.b	r7[0x0],r12
80005c84:	3f f8       	mov	r8,-1
80005c86:	f0 0c 18 00 	cp.b	r12,r8
80005c8a:	e0 81 00 af 	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005c8e:	e0 6b 00 ff 	mov	r11,255
80005c92:	fe 7c 28 00 	mov	r12,-55296
80005c96:	fe b0 e5 3e 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005c9a:	0c 9b       	mov	r11,r6
80005c9c:	fe 7c 28 00 	mov	r12,-55296
80005ca0:	fe b0 e5 47 	rcall	8000272e <spi_read>
80005ca4:	58 1c       	cp.w	r12,1
80005ca6:	e0 80 00 b7 	breq	80005e14 <sd_mmc_spi_command+0x258>
     return 0xFF;
   return data_read;
80005caa:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005cac:	ae 8c       	st.b	r7[0x0],r12
80005cae:	3f f8       	mov	r8,-1
80005cb0:	f0 0c 18 00 	cp.b	r12,r8
80005cb4:	e0 81 00 9a 	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005cb8:	e0 6b 00 ff 	mov	r11,255
80005cbc:	fe 7c 28 00 	mov	r12,-55296
80005cc0:	fe b0 e5 29 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005cc4:	0c 9b       	mov	r11,r6
80005cc6:	fe 7c 28 00 	mov	r12,-55296
80005cca:	fe b0 e5 32 	rcall	8000272e <spi_read>
80005cce:	58 1c       	cp.w	r12,1
80005cd0:	e0 80 00 a5 	breq	80005e1a <sd_mmc_spi_command+0x25e>
     return 0xFF;
   return data_read;
80005cd4:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005cd6:	ae 8c       	st.b	r7[0x0],r12
80005cd8:	3f f8       	mov	r8,-1
80005cda:	f0 0c 18 00 	cp.b	r12,r8
80005cde:	e0 81 00 85 	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005ce2:	e0 6b 00 ff 	mov	r11,255
80005ce6:	fe 7c 28 00 	mov	r12,-55296
80005cea:	fe b0 e5 14 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005cee:	0c 9b       	mov	r11,r6
80005cf0:	fe 7c 28 00 	mov	r12,-55296
80005cf4:	fe b0 e5 1d 	rcall	8000272e <spi_read>
80005cf8:	58 1c       	cp.w	r12,1
80005cfa:	e0 80 00 93 	breq	80005e20 <sd_mmc_spi_command+0x264>
     return 0xFF;
   return data_read;
80005cfe:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d00:	ae 8c       	st.b	r7[0x0],r12
80005d02:	3f f8       	mov	r8,-1
80005d04:	f0 0c 18 00 	cp.b	r12,r8
80005d08:	c7 01       	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d0a:	e0 6b 00 ff 	mov	r11,255
80005d0e:	fe 7c 28 00 	mov	r12,-55296
80005d12:	fe b0 e5 00 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005d16:	0c 9b       	mov	r11,r6
80005d18:	fe 7c 28 00 	mov	r12,-55296
80005d1c:	fe b0 e5 09 	rcall	8000272e <spi_read>
80005d20:	58 1c       	cp.w	r12,1
80005d22:	e0 80 00 82 	breq	80005e26 <sd_mmc_spi_command+0x26a>
     return 0xFF;
   return data_read;
80005d26:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d28:	ae 8c       	st.b	r7[0x0],r12
80005d2a:	3f f8       	mov	r8,-1
80005d2c:	f0 0c 18 00 	cp.b	r12,r8
80005d30:	c5 c1       	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d32:	e0 6b 00 ff 	mov	r11,255
80005d36:	fe 7c 28 00 	mov	r12,-55296
80005d3a:	fe b0 e4 ec 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005d3e:	0c 9b       	mov	r11,r6
80005d40:	fe 7c 28 00 	mov	r12,-55296
80005d44:	fe b0 e4 f5 	rcall	8000272e <spi_read>
80005d48:	58 1c       	cp.w	r12,1
80005d4a:	c7 10       	breq	80005e2c <sd_mmc_spi_command+0x270>
     return 0xFF;
   return data_read;
80005d4c:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d4e:	ae 8c       	st.b	r7[0x0],r12
80005d50:	3f f8       	mov	r8,-1
80005d52:	f0 0c 18 00 	cp.b	r12,r8
80005d56:	c4 91       	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d58:	e0 6b 00 ff 	mov	r11,255
80005d5c:	fe 7c 28 00 	mov	r12,-55296
80005d60:	fe b0 e4 d9 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005d64:	0c 9b       	mov	r11,r6
80005d66:	fe 7c 28 00 	mov	r12,-55296
80005d6a:	fe b0 e4 e2 	rcall	8000272e <spi_read>
80005d6e:	58 1c       	cp.w	r12,1
80005d70:	c6 10       	breq	80005e32 <sd_mmc_spi_command+0x276>
     return 0xFF;
   return data_read;
80005d72:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d74:	ae 8c       	st.b	r7[0x0],r12
80005d76:	3f f8       	mov	r8,-1
80005d78:	f0 0c 18 00 	cp.b	r12,r8
80005d7c:	c3 61       	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d7e:	e0 6b 00 ff 	mov	r11,255
80005d82:	fe 7c 28 00 	mov	r12,-55296
80005d86:	fe b0 e4 c6 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005d8a:	0c 9b       	mov	r11,r6
80005d8c:	fe 7c 28 00 	mov	r12,-55296
80005d90:	fe b0 e4 cf 	rcall	8000272e <spi_read>
80005d94:	58 1c       	cp.w	r12,1
80005d96:	c5 10       	breq	80005e38 <sd_mmc_spi_command+0x27c>
     return 0xFF;
   return data_read;
80005d98:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d9a:	ae 8c       	st.b	r7[0x0],r12
80005d9c:	3f f8       	mov	r8,-1
80005d9e:	f0 0c 18 00 	cp.b	r12,r8
80005da2:	c2 31       	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005da4:	e0 6b 00 ff 	mov	r11,255
80005da8:	fe 7c 28 00 	mov	r12,-55296
80005dac:	fe b0 e4 b3 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005db0:	0c 9b       	mov	r11,r6
80005db2:	fe 7c 28 00 	mov	r12,-55296
80005db6:	fe b0 e4 bc 	rcall	8000272e <spi_read>
80005dba:	58 1c       	cp.w	r12,1
80005dbc:	c4 10       	breq	80005e3e <sd_mmc_spi_command+0x282>
     return 0xFF;
   return data_read;
80005dbe:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005dc0:	ae 8c       	st.b	r7[0x0],r12
80005dc2:	3f f8       	mov	r8,-1
80005dc4:	f0 0c 18 00 	cp.b	r12,r8
80005dc8:	c1 01       	brne	80005de8 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005dca:	e0 6b 00 ff 	mov	r11,255
80005dce:	fe 7c 28 00 	mov	r12,-55296
80005dd2:	fe b0 e4 a0 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005dd6:	0c 9b       	mov	r11,r6
80005dd8:	fe 7c 28 00 	mov	r12,-55296
80005ddc:	fe b0 e4 a9 	rcall	8000272e <spi_read>
80005de0:	58 1c       	cp.w	r12,1
80005de2:	c3 10       	breq	80005e44 <sd_mmc_spi_command+0x288>
     return 0xFF;
   return data_read;
80005de4:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005de6:	ae 8c       	st.b	r7[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80005de8:	2f fd       	sub	sp,-4
80005dea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  spi_write(SD_MMC_SPI, arg>>8 );
  spi_write(SD_MMC_SPI, arg    );
  switch(command)
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80005dee:	e0 6b 00 95 	mov	r11,149
80005df2:	fe 7c 28 00 	mov	r12,-55296
80005df6:	fe b0 e4 8e 	rcall	80002712 <spi_write>
         break;
80005dfa:	c1 bb       	rjmp	80005c30 <sd_mmc_spi_command+0x74>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
80005dfc:	e0 6b 00 87 	mov	r11,135
80005e00:	fe 7c 28 00 	mov	r12,-55296
80005e04:	fe b0 e4 87 	rcall	80002712 <spi_write>
         break;
80005e08:	c1 4b       	rjmp	80005c30 <sd_mmc_spi_command+0x74>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e0a:	ae 85       	st.b	r7[0x0],r5
80005e0c:	c2 cb       	rjmp	80005c64 <sd_mmc_spi_command+0xa8>
80005e0e:	3f f8       	mov	r8,-1
80005e10:	ae 88       	st.b	r7[0x0],r8
80005e12:	c3 eb       	rjmp	80005c8e <sd_mmc_spi_command+0xd2>
80005e14:	3f f8       	mov	r8,-1
80005e16:	ae 88       	st.b	r7[0x0],r8
80005e18:	c5 0b       	rjmp	80005cb8 <sd_mmc_spi_command+0xfc>
80005e1a:	3f f8       	mov	r8,-1
80005e1c:	ae 88       	st.b	r7[0x0],r8
80005e1e:	c6 2b       	rjmp	80005ce2 <sd_mmc_spi_command+0x126>
80005e20:	3f f8       	mov	r8,-1
80005e22:	ae 88       	st.b	r7[0x0],r8
80005e24:	c7 3b       	rjmp	80005d0a <sd_mmc_spi_command+0x14e>
80005e26:	3f f8       	mov	r8,-1
80005e28:	ae 88       	st.b	r7[0x0],r8
80005e2a:	c8 4b       	rjmp	80005d32 <sd_mmc_spi_command+0x176>
80005e2c:	3f f8       	mov	r8,-1
80005e2e:	ae 88       	st.b	r7[0x0],r8
80005e30:	c9 4b       	rjmp	80005d58 <sd_mmc_spi_command+0x19c>
80005e32:	3f f8       	mov	r8,-1
80005e34:	ae 88       	st.b	r7[0x0],r8
80005e36:	ca 4b       	rjmp	80005d7e <sd_mmc_spi_command+0x1c2>
80005e38:	3f f8       	mov	r8,-1
80005e3a:	ae 88       	st.b	r7[0x0],r8
80005e3c:	cb 4b       	rjmp	80005da4 <sd_mmc_spi_command+0x1e8>
80005e3e:	3f f8       	mov	r8,-1
80005e40:	ae 88       	st.b	r7[0x0],r8
80005e42:	cc 4b       	rjmp	80005dca <sd_mmc_spi_command+0x20e>
80005e44:	3f f8       	mov	r8,-1
80005e46:	e0 6c 00 ff 	mov	r12,255
80005e4a:	ae 88       	st.b	r7[0x0],r8
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80005e4c:	2f fd       	sub	sp,-4
80005e4e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005e52:	d7 03       	nop

80005e54 <sd_mmc_spi_read_sector_to_ram>:
80005e54:	eb cd 40 fc 	pushm	r2-r7,lr
80005e58:	20 1d       	sub	sp,4
80005e5a:	18 97       	mov	r7,r12
80005e5c:	c6 8e       	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80005e5e:	c0 41       	brne	80005e66 <sd_mmc_spi_read_sector_to_ram+0x12>
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80005e60:	2f fd       	sub	sp,-4

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  return true;   // Read done.
}
80005e62:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80005e66:	30 1b       	mov	r11,1
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80005e68:	fe 7c 28 00 	mov	r12,-55296
80005e6c:	fe b0 e3 bf 	rcall	800025ea <spi_selectChip>
80005e70:	e0 68 18 32 	mov	r8,6194

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80005e74:	11 89       	ld.ub	r9,r8[0x0]
80005e76:	30 38       	mov	r8,3
80005e78:	f0 09 18 00 	cp.b	r9,r8
80005e7c:	c7 00       	breq	80005f5c <sd_mmc_spi_read_sector_to_ram+0x108>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80005e7e:	e0 62 00 fc 	mov	r2,252
80005e82:	31 1c       	mov	r12,17
80005e84:	64 0b       	ld.w	r11,r2[0x0]
80005e86:	e0 65 18 44 	mov	r5,6212
80005e8a:	c9 9e       	rcall	80005bbc <sd_mmc_spi_command>
  }

  // check for valid response
  if (r1 != 0x00)
80005e8c:	aa 8c       	st.b	r5[0x0],r12
80005e8e:	58 0c       	cp.w	r12,0
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
       return false;
80005e90:	c5 e1       	brne	80005f4c <sd_mmc_spi_read_sector_to_ram+0xf8>
80005e92:	18 96       	mov	r6,r12
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e94:	1a 94       	mov	r4,sp
80005e96:	3f f3       	mov	r3,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80005e98:	c0 a8       	rjmp	80005eac <sd_mmc_spi_read_sector_to_ram+0x58>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e9a:	1b 98       	ld.ub	r8,sp[0x1]
80005e9c:	aa 88       	st.b	r5[0x0],r8
80005e9e:	e6 08 18 00 	cp.b	r8,r3

  // check for valid response
  if (r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
80005ea2:	c1 41       	brne	80005eca <sd_mmc_spi_read_sector_to_ram+0x76>
  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
80005ea4:	2f f6       	sub	r6,-1
80005ea6:	e0 46 75 30 	cp.w	r6,30000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005eaa:	c5 10       	breq	80005f4c <sd_mmc_spi_read_sector_to_ram+0xf8>
80005eac:	e0 6b 00 ff 	mov	r11,255
80005eb0:	fe 7c 28 00 	mov	r12,-55296
80005eb4:	fe b0 e4 2f 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005eb8:	1a 9b       	mov	r11,sp
80005eba:	fe 7c 28 00 	mov	r12,-55296
80005ebe:	fe b0 e4 38 	rcall	8000272e <spi_read>
80005ec2:	58 1c       	cp.w	r12,1
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005ec4:	ce b1       	brne	80005e9a <sd_mmc_spi_read_sector_to_ram+0x46>
80005ec6:	aa 83       	st.b	r5[0x0],r3
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80005ec8:	ce eb       	rjmp	80005ea4 <sd_mmc_spi_read_sector_to_ram+0x50>
80005eca:	3f e9       	mov	r9,-2
80005ecc:	f2 08 18 00 	cp.b	r8,r9
80005ed0:	c3 81       	brne	80005f40 <sd_mmc_spi_read_sector_to_ram+0xec>
80005ed2:	fa c5 ff fe 	sub	r5,sp,-2
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
80005ed6:	ee c6 fe 00 	sub	r6,r7,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
80005eda:	e0 6b 00 ff 	mov	r11,255
80005ede:	fe 7c 28 00 	mov	r12,-55296
80005ee2:	fe b0 e4 18 	rcall	80002712 <spi_write>
    spi_read(SD_MMC_SPI,&data_read);
80005ee6:	0a 9b       	mov	r11,r5
80005ee8:	fe 7c 28 00 	mov	r12,-55296
80005eec:	fe b0 e4 21 	rcall	8000272e <spi_read>
    *_ram++=data_read;
80005ef0:	9a 18       	ld.sh	r8,sp[0x2]
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80005ef2:	0e c8       	st.b	r7++,r8
80005ef4:	0c 37       	cp.w	r7,r6
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80005ef6:	cf 21       	brne	80005eda <sd_mmc_spi_read_sector_to_ram+0x86>
80005ef8:	64 08       	ld.w	r8,r2[0x0]
80005efa:	f0 c8 fe 00 	sub	r8,r8,-512

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80005efe:	e0 6b 00 ff 	mov	r11,255
80005f02:	85 08       	st.w	r2[0x0],r8
80005f04:	fe 7c 28 00 	mov	r12,-55296
80005f08:	fe b0 e4 05 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80005f0c:	e0 6b 00 ff 	mov	r11,255
80005f10:	fe 7c 28 00 	mov	r12,-55296
80005f14:	fe b0 e3 ff 	rcall	80002712 <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80005f18:	e0 6b 00 ff 	mov	r11,255
80005f1c:	fe 7c 28 00 	mov	r12,-55296
80005f20:	fe b0 e3 f9 	rcall	80002712 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80005f24:	e0 6b 00 ff 	mov	r11,255
80005f28:	fe 7c 28 00 	mov	r12,-55296
80005f2c:	fe b0 e3 f3 	rcall	80002712 <spi_write>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80005f30:	30 1b       	mov	r11,1
80005f32:	fe 7c 28 00 	mov	r12,-55296
80005f36:	fe b0 e3 82 	rcall	8000263a <spi_unselectChip>
80005f3a:	2f fd       	sub	sp,-4
80005f3c:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
  {
    spi_write(SD_MMC_SPI,0xFF);
80005f40:	e0 6b 00 ff 	mov	r11,255
80005f44:	fe 7c 28 00 	mov	r12,-55296
80005f48:	fe b0 e3 e5 	rcall	80002712 <spi_write>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80005f4c:	30 1b       	mov	r11,1
80005f4e:	fe 7c 28 00 	mov	r12,-55296
80005f52:	fe b0 e3 74 	rcall	8000263a <spi_unselectChip>
80005f56:	2f fd       	sub	sp,-4
80005f58:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80005f5c:	e0 62 00 fc 	mov	r2,252
80005f60:	31 1c       	mov	r12,17
80005f62:	64 0b       	ld.w	r11,r2[0x0]
80005f64:	e0 65 18 44 	mov	r5,6212
80005f68:	a9 9b       	lsr	r11,0x9
80005f6a:	c2 9e       	rcall	80005bbc <sd_mmc_spi_command>
80005f6c:	aa 8c       	st.b	r5[0x0],r12
80005f6e:	c9 0b       	rjmp	80005e8e <sd_mmc_spi_read_sector_to_ram+0x3a>

80005f70 <sd_mmc_spi_check_hc>:
80005f70:	eb cd 40 e0 	pushm	r5-r7,lr
80005f74:	20 1d       	sub	sp,4
80005f76:	fe b0 fd db 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80005f7a:	c0 61       	brne	80005f86 <sd_mmc_spi_check_hc+0x16>
80005f7c:	3f f7       	mov	r7,-1
80005f7e:	0e 9c       	mov	r12,r7
80005f80:	2f fd       	sub	sp,-4
80005f82:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005f86:	30 1b       	mov	r11,1
80005f88:	fe 7c 28 00 	mov	r12,-55296
80005f8c:	fe b0 e3 2f 	rcall	800025ea <spi_selectChip>
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80005f90:	30 0b       	mov	r11,0
80005f92:	33 ac       	mov	r12,58
80005f94:	e0 66 18 44 	mov	r6,6212
80005f98:	c1 2e       	rcall	80005bbc <sd_mmc_spi_command>
80005f9a:	ac 8c       	st.b	r6[0x0],r12
  // check for valid response
  if(r1 != 0) {
80005f9c:	c5 41       	brne	80006044 <sd_mmc_spi_check_hc+0xd4>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005f9e:	e0 6b 00 ff 	mov	r11,255
80005fa2:	fe 7c 28 00 	mov	r12,-55296
80005fa6:	fe b0 e3 b6 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005faa:	fa c5 ff fe 	sub	r5,sp,-2
80005fae:	fe 7c 28 00 	mov	r12,-55296
80005fb2:	0a 9b       	mov	r11,r5
80005fb4:	fe b0 e3 bd 	rcall	8000272e <spi_read>
80005fb8:	58 1c       	cp.w	r12,1
80005fba:	c3 a0       	breq	8000602e <sd_mmc_spi_check_hc+0xbe>
80005fbc:	1b b7       	ld.ub	r7,sp[0x3]
80005fbe:	ef d7 c0 c1 	bfextu	r7,r7,0x6,0x1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005fc2:	e0 6b 00 ff 	mov	r11,255
80005fc6:	fe 7c 28 00 	mov	r12,-55296
80005fca:	fe b0 e3 a4 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005fce:	0a 9b       	mov	r11,r5
80005fd0:	fe 7c 28 00 	mov	r12,-55296
80005fd4:	fe b0 e3 ad 	rcall	8000272e <spi_read>
80005fd8:	58 1c       	cp.w	r12,1
80005fda:	c3 20       	breq	8000603e <sd_mmc_spi_check_hc+0xce>
     return 0xFF;
   return data_read;
80005fdc:	1b b8       	ld.ub	r8,sp[0x3]
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005fde:	e0 6b 00 ff 	mov	r11,255
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80005fe2:	ac 88       	st.b	r6[0x0],r8
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005fe4:	fe 7c 28 00 	mov	r12,-55296
80005fe8:	fe b0 e3 95 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005fec:	0a 9b       	mov	r11,r5
80005fee:	fe 7c 28 00 	mov	r12,-55296
80005ff2:	fe b0 e3 9e 	rcall	8000272e <spi_read>
80005ff6:	58 1c       	cp.w	r12,1
80005ff8:	c2 00       	breq	80006038 <sd_mmc_spi_check_hc+0xc8>
     return 0xFF;
   return data_read;
80005ffa:	1b b8       	ld.ub	r8,sp[0x3]
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005ffc:	e0 6b 00 ff 	mov	r11,255
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006000:	ac 88       	st.b	r6[0x0],r8
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006002:	fe 7c 28 00 	mov	r12,-55296
80006006:	fe b0 e3 86 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000600a:	0a 9b       	mov	r11,r5
8000600c:	fe 7c 28 00 	mov	r12,-55296
80006010:	fe b0 e3 8f 	rcall	8000272e <spi_read>
80006014:	58 1c       	cp.w	r12,1
80006016:	c0 e0       	breq	80006032 <sd_mmc_spi_check_hc+0xc2>
     return 0xFF;
   return data_read;
80006018:	1b b8       	ld.ub	r8,sp[0x3]
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000601a:	ac 88       	st.b	r6[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000601c:	30 1b       	mov	r11,1
8000601e:	fe 7c 28 00 	mov	r12,-55296
80006022:	fe b0 e3 0c 	rcall	8000263a <spi_unselectChip>
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
80006026:	0e 9c       	mov	r12,r7
80006028:	2f fd       	sub	sp,-4
8000602a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000602e:	18 97       	mov	r7,r12
80006030:	cc 9b       	rjmp	80005fc2 <sd_mmc_spi_check_hc+0x52>
80006032:	e0 68 00 ff 	mov	r8,255
80006036:	cf 2b       	rjmp	8000601a <sd_mmc_spi_check_hc+0xaa>
80006038:	e0 68 00 ff 	mov	r8,255
8000603c:	ce 0b       	rjmp	80005ffc <sd_mmc_spi_check_hc+0x8c>
8000603e:	e0 68 00 ff 	mov	r8,255
80006042:	cc eb       	rjmp	80005fde <sd_mmc_spi_check_hc+0x6e>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006044:	30 1b       	mov	r11,1
80006046:	fe 7c 28 00 	mov	r12,-55296
8000604a:	fe b0 e2 f8 	rcall	8000263a <spi_unselectChip>
8000604e:	c9 7b       	rjmp	80005f7c <sd_mmc_spi_check_hc+0xc>

80006050 <sd_mmc_spi_write_sector_from_ram>:
80006050:	d4 21       	pushm	r4-r7,lr
80006052:	20 1d       	sub	sp,4
80006054:	18 97       	mov	r7,r12
80006056:	fe b0 fd 6b 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
8000605a:	c0 31       	brne	80006060 <sd_mmc_spi_write_sector_from_ram+0x10>
8000605c:	2f fd       	sub	sp,-4
8000605e:	d8 22       	popm	r4-r7,pc
80006060:	30 1b       	mov	r11,1
80006062:	fe 7c 28 00 	mov	r12,-55296
80006066:	fe b0 e2 c2 	rcall	800025ea <spi_selectChip>
8000606a:	e0 68 18 32 	mov	r8,6194
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000606e:	11 89       	ld.ub	r9,r8[0x0]
80006070:	30 38       	mov	r8,3
80006072:	f0 09 18 00 	cp.b	r9,r8
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80006076:	c5 40       	breq	8000611e <sd_mmc_spi_write_sector_from_ram+0xce>
80006078:	e0 64 00 fc 	mov	r4,252
8000607c:	31 8c       	mov	r12,24
8000607e:	68 0b       	ld.w	r11,r4[0x0]
80006080:	e0 65 18 44 	mov	r5,6212
  }

  // check for valid response
  if(r1 != 0x00)
80006084:	fe b0 fd 9c 	rcall	80005bbc <sd_mmc_spi_command>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80006088:	aa 8c       	st.b	r5[0x0],r12
8000608a:	58 0c       	cp.w	r12,0
8000608c:	c4 21       	brne	80006110 <sd_mmc_spi_write_sector_from_ram+0xc0>
8000608e:	e0 6b 00 ff 	mov	r11,255
80006092:	fe 7c 28 00 	mov	r12,-55296

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80006096:	fe b0 e3 3e 	rcall	80002712 <spi_write>
8000609a:	e0 6b 00 fe 	mov	r11,254
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
8000609e:	fe 7c 28 00 	mov	r12,-55296
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800060a2:	ee c6 fe 00 	sub	r6,r7,-512
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800060a6:	fe b0 e3 36 	rcall	80002712 <spi_write>
800060aa:	0f 3b       	ld.ub	r11,r7++
800060ac:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800060b0:	fe b0 e3 31 	rcall	80002712 <spi_write>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800060b4:	0c 37       	cp.w	r7,r6
800060b6:	cf a1       	brne	800060aa <sd_mmc_spi_write_sector_from_ram+0x5a>
800060b8:	e0 6b 00 ff 	mov	r11,255
800060bc:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);
800060c0:	fe b0 e3 29 	rcall	80002712 <spi_write>
800060c4:	e0 6b 00 ff 	mov	r11,255
800060c8:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800060cc:	fe b0 e3 23 	rcall	80002712 <spi_write>
800060d0:	e0 6b 00 ff 	mov	r11,255
800060d4:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800060d8:	fe b0 e3 1d 	rcall	80002712 <spi_write>
800060dc:	fa cb ff fe 	sub	r11,sp,-2
800060e0:	fe 7c 28 00 	mov	r12,-55296
800060e4:	fe b0 e3 25 	rcall	8000272e <spi_read>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
800060e8:	58 1c       	cp.w	r12,1
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800060ea:	c5 80       	breq	8000619a <sd_mmc_spi_write_sector_from_ram+0x14a>
800060ec:	1b b8       	ld.ub	r8,sp[0x3]
800060ee:	aa 88       	st.b	r5[0x0],r8
800060f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800060f4:	58 58       	cp.w	r8,5
800060f6:	c1 f0       	breq	80006134 <sd_mmc_spi_write_sector_from_ram+0xe4>
800060f8:	e0 6b 00 ff 	mov	r11,255
800060fc:	fe 7c 28 00 	mov	r12,-55296
    spi_write(SD_MMC_SPI,0xFF);
80006100:	fe b0 e3 09 	rcall	80002712 <spi_write>
80006104:	e0 6b 00 ff 	mov	r11,255
80006108:	fe 7c 28 00 	mov	r12,-55296
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000610c:	fe b0 e3 03 	rcall	80002712 <spi_write>
80006110:	30 1b       	mov	r11,1
80006112:	fe 7c 28 00 	mov	r12,-55296
80006116:	fe b0 e2 92 	rcall	8000263a <spi_unselectChip>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
8000611a:	2f fd       	sub	sp,-4
8000611c:	d8 2a       	popm	r4-r7,pc,r12=0
8000611e:	e0 64 00 fc 	mov	r4,252
80006122:	31 8c       	mov	r12,24
80006124:	68 0b       	ld.w	r11,r4[0x0]
80006126:	e0 65 18 44 	mov	r5,6212
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000612a:	a9 9b       	lsr	r11,0x9
8000612c:	fe b0 fd 48 	rcall	80005bbc <sd_mmc_spi_command>
80006130:	aa 8c       	st.b	r5[0x0],r12
80006132:	ca cb       	rjmp	8000608a <sd_mmc_spi_write_sector_from_ram+0x3a>
80006134:	e0 6b 00 ff 	mov	r11,255
  spi_write(SD_MMC_SPI,0xFF);
80006138:	fe 7c 28 00 	mov	r12,-55296
8000613c:	fe b0 e2 eb 	rcall	80002712 <spi_write>
80006140:	e0 6b 00 ff 	mov	r11,255

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006144:	fe 7c 28 00 	mov	r12,-55296
80006148:	fe b0 e2 e5 	rcall	80002712 <spi_write>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000614c:	30 1b       	mov	r11,1
8000614e:	fe 7c 28 00 	mov	r12,-55296
80006152:	fe b0 e2 74 	rcall	8000263a <spi_unselectChip>

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80006156:	68 08       	ld.w	r8,r4[0x0]
80006158:	f0 c8 fe 00 	sub	r8,r8,-512
8000615c:	89 08       	st.w	r4[0x0],r8
8000615e:	fe b0 fc e7 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80006162:	c1 f1       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
80006164:	fe b0 fc e4 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80006168:	c1 c1       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
8000616a:	fe b0 fc e1 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
8000616e:	c1 91       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
80006170:	fe b0 fc de 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80006174:	c1 61       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
80006176:	fe b0 fc db 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
8000617a:	c1 31       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
8000617c:	fe b0 fc d8 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80006180:	c1 01       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
80006182:	fe b0 fc d5 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
80006186:	c0 d1       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
80006188:	fe b0 fc d2 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
8000618c:	c0 a1       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
8000618e:	fe b0 fc cf 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006192:	c0 71       	brne	800061a0 <sd_mmc_spi_write_sector_from_ram+0x150>
80006194:	fe b0 fc cc 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80006198:	c6 2b       	rjmp	8000605c <sd_mmc_spi_write_sector_from_ram+0xc>
8000619a:	3f f8       	mov	r8,-1
8000619c:	aa 88       	st.b	r5[0x0],r8
8000619e:	ca db       	rjmp	800060f8 <sd_mmc_spi_write_sector_from_ram+0xa8>
800061a0:	30 1c       	mov	r12,1
800061a2:	c5 db       	rjmp	8000605c <sd_mmc_spi_write_sector_from_ram+0xc>

800061a4 <sd_mmc_spi_get_if>:
800061a4:	eb cd 40 e0 	pushm	r5-r7,lr
800061a8:	20 1d       	sub	sp,4
800061aa:	fe b0 fc c1 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
800061ae:	c0 51       	brne	800061b8 <sd_mmc_spi_get_if+0x14>
800061b0:	3f fc       	mov	r12,-1
800061b2:	2f fd       	sub	sp,-4
800061b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800061b8:	30 1b       	mov	r11,1
800061ba:	fe 7c 28 00 	mov	r12,-55296
800061be:	fe b0 e2 16 	rcall	800025ea <spi_selectChip>
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
800061c2:	e0 6b 01 aa 	mov	r11,426
800061c6:	e0 67 18 44 	mov	r7,6212
800061ca:	30 8c       	mov	r12,8
800061cc:	fe b0 fc f8 	rcall	80005bbc <sd_mmc_spi_command>
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
800061d0:	ae 8c       	st.b	r7[0x0],r12
800061d2:	ed bc 00 02 	bld	r12,0x2
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800061d6:	c5 00       	breq	80006276 <sd_mmc_spi_get_if+0xd2>
800061d8:	e0 6b 00 ff 	mov	r11,255
800061dc:	fe 7c 28 00 	mov	r12,-55296
800061e0:	fe b0 e2 99 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800061e4:	fa c6 ff fe 	sub	r6,sp,-2
800061e8:	fe 7c 28 00 	mov	r12,-55296
800061ec:	0c 9b       	mov	r11,r6
800061ee:	fe b0 e2 a0 	rcall	8000272e <spi_read>
800061f2:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
800061f4:	c4 90       	breq	80006286 <sd_mmc_spi_get_if+0xe2>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800061f6:	1b b8       	ld.ub	r8,sp[0x3]
800061f8:	e0 6b 00 ff 	mov	r11,255
800061fc:	ae 88       	st.b	r7[0x0],r8
800061fe:	fe 7c 28 00 	mov	r12,-55296
80006202:	fe b0 e2 88 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006206:	0c 9b       	mov	r11,r6
80006208:	fe 7c 28 00 	mov	r12,-55296
8000620c:	fe b0 e2 91 	rcall	8000272e <spi_read>
80006210:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
80006212:	c4 00       	breq	80006292 <sd_mmc_spi_get_if+0xee>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006214:	1b b8       	ld.ub	r8,sp[0x3]
80006216:	e0 6b 00 ff 	mov	r11,255
8000621a:	ae 88       	st.b	r7[0x0],r8
8000621c:	fe 7c 28 00 	mov	r12,-55296
80006220:	fe b0 e2 79 	rcall	80002712 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006224:	0c 9b       	mov	r11,r6
80006226:	fe 7c 28 00 	mov	r12,-55296
8000622a:	e0 65 18 44 	mov	r5,6212
8000622e:	fe b0 e2 80 	rcall	8000272e <spi_read>
     return 0xFF;
   return data_read;
80006232:	58 1c       	cp.w	r12,1
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006234:	c2 c0       	breq	8000628c <sd_mmc_spi_get_if+0xe8>
  if((r1 & 0x01) == 0) {
80006236:	1b b8       	ld.ub	r8,sp[0x3]
80006238:	aa 88       	st.b	r5[0x0],r8
8000623a:	ed b8 00 00 	bld	r8,0x0
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000623e:	c3 61       	brne	800062aa <sd_mmc_spi_get_if+0x106>
80006240:	e0 6b 00 ff 	mov	r11,255
80006244:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006248:	fe b0 e2 65 	rcall	80002712 <spi_write>
8000624c:	0c 9b       	mov	r11,r6
8000624e:	fe 7c 28 00 	mov	r12,-55296
80006252:	fe b0 e2 6e 	rcall	8000272e <spi_read>
     return 0xFF;
   return data_read;
80006256:	58 1c       	cp.w	r12,1
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006258:	c2 00       	breq	80006298 <sd_mmc_spi_get_if+0xf4>
  if(r1 != 0xaa) {
8000625a:	1b b8       	ld.ub	r8,sp[0x3]
8000625c:	ae 88       	st.b	r7[0x0],r8
8000625e:	3a a9       	mov	r9,-86
80006260:	f2 08 18 00 	cp.b	r8,r9
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006264:	c1 c1       	brne	8000629c <sd_mmc_spi_get_if+0xf8>
80006266:	30 1b       	mov	r11,1
80006268:	fe 7c 28 00 	mov	r12,-55296
8000626c:	fe b0 e1 e7 	rcall	8000263a <spi_unselectChip>
80006270:	2f fd       	sub	sp,-4

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006272:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80006276:	30 1b       	mov	r11,1
80006278:	fe 7c 28 00 	mov	r12,-55296
8000627c:	fe b0 e1 df 	rcall	8000263a <spi_unselectChip>
80006280:	2f fd       	sub	sp,-4
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006282:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006286:	e0 68 00 ff 	mov	r8,255
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000628a:	cb 7b       	rjmp	800061f8 <sd_mmc_spi_get_if+0x54>
8000628c:	3f f8       	mov	r8,-1
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000628e:	aa 88       	st.b	r5[0x0],r8
80006290:	cd 8b       	rjmp	80006240 <sd_mmc_spi_get_if+0x9c>
80006292:	e0 68 00 ff 	mov	r8,255
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006296:	cc 0b       	rjmp	80006216 <sd_mmc_spi_get_if+0x72>
  if(r1 != 0xaa) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006298:	3f f8       	mov	r8,-1
8000629a:	ae 88       	st.b	r7[0x0],r8
8000629c:	30 1b       	mov	r11,1
8000629e:	fe 7c 28 00 	mov	r12,-55296
800062a2:	fe b0 e1 cc 	rcall	8000263a <spi_unselectChip>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800062a6:	3f fc       	mov	r12,-1
800062a8:	c8 5b       	rjmp	800061b2 <sd_mmc_spi_get_if+0xe>
800062aa:	30 1b       	mov	r11,1
800062ac:	fe 7c 28 00 	mov	r12,-55296
800062b0:	fe b0 e1 c5 	rcall	8000263a <spi_unselectChip>
800062b4:	c7 eb       	rjmp	800061b0 <sd_mmc_spi_get_if+0xc>
800062b6:	d7 03       	nop

800062b8 <sd_mmc_spi_internal_init>:
800062b8:	d4 31       	pushm	r0-r7,lr
800062ba:	20 1d       	sub	sp,4
800062bc:	e6 68 1a 80 	mov	r8,400000
800062c0:	e0 69 01 10 	mov	r9,272
800062c4:	e0 67 01 00 	mov	r7,256
800062c8:	72 0a       	ld.w	r10,r9[0x0]
800062ca:	8f 18       	st.w	r7[0x4],r8
800062cc:	0e 9b       	mov	r11,r7
800062ce:	fe 7c 28 00 	mov	r12,-55296
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800062d2:	fe b0 e1 c7 	rcall	80002660 <spi_setupChipReg>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800062d6:	30 1b       	mov	r11,1
800062d8:	fe 7c 28 00 	mov	r12,-55296
800062dc:	fe b0 e1 87 	rcall	800025ea <spi_selectChip>
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
800062e0:	e0 6b 00 ff 	mov	r11,255
800062e4:	fe 7c 28 00 	mov	r12,-55296
800062e8:	fe b0 e2 15 	rcall	80002712 <spi_write>
800062ec:	e0 6b 00 ff 	mov	r11,255
800062f0:	fe 7c 28 00 	mov	r12,-55296
800062f4:	fe b0 e2 0f 	rcall	80002712 <spi_write>
800062f8:	e0 6b 00 ff 	mov	r11,255
800062fc:	fe 7c 28 00 	mov	r12,-55296
80006300:	fe b0 e2 09 	rcall	80002712 <spi_write>
80006304:	e0 6b 00 ff 	mov	r11,255
80006308:	fe 7c 28 00 	mov	r12,-55296
8000630c:	fe b0 e2 03 	rcall	80002712 <spi_write>
80006310:	e0 6b 00 ff 	mov	r11,255
80006314:	fe 7c 28 00 	mov	r12,-55296
80006318:	fe b0 e1 fd 	rcall	80002712 <spi_write>
8000631c:	e0 6b 00 ff 	mov	r11,255
80006320:	fe 7c 28 00 	mov	r12,-55296
80006324:	fe b0 e1 f7 	rcall	80002712 <spi_write>
80006328:	e0 6b 00 ff 	mov	r11,255
8000632c:	fe 7c 28 00 	mov	r12,-55296
80006330:	fe b0 e1 f1 	rcall	80002712 <spi_write>
80006334:	e0 6b 00 ff 	mov	r11,255
80006338:	fe 7c 28 00 	mov	r12,-55296
8000633c:	fe b0 e1 eb 	rcall	80002712 <spi_write>
80006340:	e0 6b 00 ff 	mov	r11,255
80006344:	fe 7c 28 00 	mov	r12,-55296
80006348:	fe b0 e1 e5 	rcall	80002712 <spi_write>
8000634c:	e0 6b 00 ff 	mov	r11,255
80006350:	fe 7c 28 00 	mov	r12,-55296
80006354:	fe b0 e1 df 	rcall	80002712 <spi_write>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006358:	30 1b       	mov	r11,1
8000635a:	fe 7c 28 00 	mov	r12,-55296
8000635e:	fe b0 e1 6e 	rcall	8000263a <spi_unselectChip>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80006362:	30 08       	mov	r8,0
80006364:	e0 69 01 14 	mov	r9,276
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006368:	30 1b       	mov	r11,1
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000636a:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
8000636c:	e0 61 18 32 	mov	r1,6194
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006370:	fe 7c 28 00 	mov	r12,-55296
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
  card_type = MMC_CARD;
80006374:	a2 88       	st.b	r1[0x0],r8
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006376:	fe b0 e1 3a 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
8000637a:	30 0b       	mov	r11,0
8000637c:	16 9c       	mov	r12,r11
8000637e:	fe b0 fc 1f 	rcall	80005bbc <sd_mmc_spi_command>
80006382:	e0 66 18 44 	mov	r6,6212
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006386:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006388:	ac 8c       	st.b	r6[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000638a:	fe 7c 28 00 	mov	r12,-55296
8000638e:	fe b0 e1 56 	rcall	8000263a <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006392:	e0 6b 00 ff 	mov	r11,255
80006396:	fe 7c 28 00 	mov	r12,-55296
8000639a:	30 05       	mov	r5,0
8000639c:	fe b0 e1 bb 	rcall	80002712 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800063a0:	0c 90       	mov	r0,r6
800063a2:	30 12       	mov	r2,1
800063a4:	c1 78       	rjmp	800063d2 <sd_mmc_spi_internal_init+0x11a>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800063a6:	fe b0 e1 22 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800063aa:	30 0b       	mov	r11,0
800063ac:	16 9c       	mov	r12,r11
800063ae:	fe b0 fc 07 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800063b2:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800063b4:	a0 8c       	st.b	r0[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800063b6:	fe 7c 28 00 	mov	r12,-55296
800063ba:	fe b0 e1 40 	rcall	8000263a <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800063be:	e0 6b 00 ff 	mov	r11,255
800063c2:	fe 7c 28 00 	mov	r12,-55296
800063c6:	fe b0 e1 a6 	rcall	80002712 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
800063ca:	e0 45 00 64 	cp.w	r5,100
800063ce:	e0 80 00 b4 	breq	80006536 <sd_mmc_spi_internal_init+0x27e>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800063d2:	30 1b       	mov	r11,1
800063d4:	fe 7c 28 00 	mov	r12,-55296
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800063d8:	16 05       	add	r5,r11
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800063da:	0d 84       	ld.ub	r4,r6[0x0]
800063dc:	e0 63 18 44 	mov	r3,6212
800063e0:	e4 04 18 00 	cp.b	r4,r2
800063e4:	ce 11       	brne	800063a6 <sd_mmc_spi_internal_init+0xee>

  if_cond = sd_mmc_spi_get_if();
800063e6:	cd fe       	rcall	800061a4 <sd_mmc_spi_get_if>
800063e8:	5b fc       	cp.w	r12,-1
  if(if_cond == -1) {
800063ea:	e0 80 00 a6 	breq	80006536 <sd_mmc_spi_internal_init+0x27e>
800063ee:	58 1c       	cp.w	r12,1
      return false; // card is bad
  } else if (if_cond == 1) {
800063f0:	e0 80 00 a6 	breq	8000653c <sd_mmc_spi_internal_init+0x284>
800063f4:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800063f6:	fe 7c 28 00 	mov	r12,-55296
800063fa:	fe b0 e0 f8 	rcall	800025ea <spi_selectChip>
800063fe:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006400:	33 7c       	mov	r12,55
80006402:	fe b0 fb dd 	rcall	80005bbc <sd_mmc_spi_command>
80006406:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006408:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000640a:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000640e:	fe b0 e1 16 	rcall	8000263a <spi_unselectChip>
80006412:	e0 6b 00 ff 	mov	r11,255
      card_type = SD_CARD_2;
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80006416:	fe 7c 28 00 	mov	r12,-55296
8000641a:	fe b0 e1 7c 	rcall	80002712 <spi_write>
8000641e:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006420:	fe 7c 28 00 	mov	r12,-55296
80006424:	fe b0 e0 e3 	rcall	800025ea <spi_selectChip>
80006428:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
8000642a:	32 9c       	mov	r12,41
8000642c:	fe b0 fb c8 	rcall	80005bbc <sd_mmc_spi_command>
80006430:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006432:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006434:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006438:	fe b0 e1 01 	rcall	8000263a <spi_unselectChip>
8000643c:	e0 6b 00 ff 	mov	r11,255
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80006440:	fe 7c 28 00 	mov	r12,-55296
80006444:	fe b0 e1 67 	rcall	80002712 <spi_write>
80006448:	07 88       	ld.ub	r8,r3[0x0]

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
8000644a:	e2 18 00 fe 	andl	r8,0xfe,COH
8000644e:	e0 80 00 d3 	breq	800065f4 <sd_mmc_spi_internal_init+0x33c>
80006452:	30 08       	mov	r8,0
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80006454:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006456:	a2 88       	st.b	r1[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80006458:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000645c:	fe b0 e0 c7 	rcall	800025ea <spi_selectChip>
80006460:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006462:	16 9c       	mov	r12,r11
80006464:	fe b0 fb ac 	rcall	80005bbc <sd_mmc_spi_command>
80006468:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000646a:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000646c:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006470:	fe b0 e0 e5 	rcall	8000263a <spi_unselectChip>
80006474:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006478:	fe 7c 28 00 	mov	r12,-55296
8000647c:	30 05       	mov	r5,0
8000647e:	fe b0 e1 4a 	rcall	80002712 <spi_write>
80006482:	30 14       	mov	r4,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80006484:	c1 68       	rjmp	800064b0 <sd_mmc_spi_internal_init+0x1f8>
80006486:	fe b0 e0 b2 	rcall	800025ea <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000648a:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
8000648c:	16 9c       	mov	r12,r11
8000648e:	fe b0 fb 97 	rcall	80005bbc <sd_mmc_spi_command>
80006492:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006494:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006496:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000649a:	fe b0 e0 d0 	rcall	8000263a <spi_unselectChip>
8000649e:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800064a2:	fe 7c 28 00 	mov	r12,-55296
800064a6:	fe b0 e1 36 	rcall	80002712 <spi_write>
800064aa:	e0 45 00 64 	cp.w	r5,100
        // do retry counter
        retry++;
        if(retry > 100)
800064ae:	c4 40       	breq	80006536 <sd_mmc_spi_internal_init+0x27e>
800064b0:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800064b2:	fe 7c 28 00 	mov	r12,-55296
800064b6:	16 05       	add	r5,r11
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800064b8:	0d 88       	ld.ub	r8,r6[0x0]
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
800064ba:	e8 08 18 00 	cp.b	r8,r4
800064be:	ce 41       	brne	80006486 <sd_mmc_spi_internal_init+0x1ce>
800064c0:	03 88       	ld.ub	r8,r1[0x0]
800064c2:	c4 08       	rjmp	80006542 <sd_mmc_spi_internal_init+0x28a>
800064c4:	03 89       	ld.ub	r9,r1[0x0]
     if(retry == 50000)    // measured approx. 500 on several cards
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
800064c6:	30 28       	mov	r8,2
800064c8:	f0 09 18 00 	cp.b	r9,r8
800064cc:	e0 80 01 77 	breq	800067ba <sd_mmc_spi_internal_init+0x502>
800064d0:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800064d2:	fe 7c 28 00 	mov	r12,-55296
800064d6:	fe b0 e0 8a 	rcall	800025ea <spi_selectChip>
800064da:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800064dc:	33 bc       	mov	r12,59
800064de:	fe b0 fb 6f 	rcall	80005bbc <sd_mmc_spi_command>
800064e2:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800064e4:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800064e6:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800064ea:	fe b0 e0 a8 	rcall	8000263a <spi_unselectChip>
800064ee:	e0 6b 00 ff 	mov	r11,255
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800064f2:	fe 7c 28 00 	mov	r12,-55296
800064f6:	fe b0 e1 0e 	rcall	80002712 <spi_write>
800064fa:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800064fc:	fe 7c 28 00 	mov	r12,-55296
80006500:	fe b0 e0 75 	rcall	800025ea <spi_selectChip>
80006504:	e0 6b 02 00 	mov	r11,512
  r1 = sd_mmc_spi_command(command, arg);
80006508:	31 0c       	mov	r12,16
8000650a:	fe b0 fb 59 	rcall	80005bbc <sd_mmc_spi_command>
8000650e:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006510:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006512:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006516:	fe b0 e0 92 	rcall	8000263a <spi_unselectChip>
8000651a:	e0 6b 00 ff 	mov	r11,255
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000651e:	fe 7c 28 00 	mov	r12,-55296
80006522:	e0 64 18 44 	mov	r4,6212
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006526:	fe b0 e0 f6 	rcall	80002712 <spi_write>
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000652a:	0d 85       	ld.ub	r5,r6[0x0]
  if (r1 != 0x00)
8000652c:	58 05       	cp.w	r5,0
8000652e:	c0 41       	brne	80006536 <sd_mmc_spi_internal_init+0x27e>
80006530:	fe b0 fa fe 	rcall	80005b2c <sd_mmc_spi_wait_not_busy>
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80006534:	c6 31       	brne	800065fa <sd_mmc_spi_internal_init+0x342>
80006536:	30 0c       	mov	r12,0
  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
  return true;
80006538:	2f fd       	sub	sp,-4
}
8000653a:	d8 32       	popm	r0-r7,pc
8000653c:	30 28       	mov	r8,2

  if_cond = sd_mmc_spi_get_if();
  if(if_cond == -1) {
      return false; // card is bad
  } else if (if_cond == 1) {
      card_type = SD_CARD_2;
8000653e:	a2 88       	st.b	r1[0x0],r8
80006540:	30 28       	mov	r8,2
80006542:	30 05       	mov	r5,0
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80006544:	30 14       	mov	r4,1

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80006546:	30 23       	mov	r3,2
80006548:	c1 d8       	rjmp	80006582 <sd_mmc_spi_internal_init+0x2ca>
8000654a:	fe b0 e0 50 	rcall	800025ea <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000654e:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006550:	30 1c       	mov	r12,1
80006552:	fe b0 fb 35 	rcall	80005bbc <sd_mmc_spi_command>
80006556:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006558:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000655a:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000655e:	fe b0 e0 6e 	rcall	8000263a <spi_unselectChip>
80006562:	e0 6b 00 ff 	mov	r11,255
      break;
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006566:	fe 7c 28 00 	mov	r12,-55296
8000656a:	fe b0 e0 d4 	rcall	80002712 <spi_write>
8000656e:	e0 45 c3 4f 	cp.w	r5,49999
      break;
    }
     // do retry counter
     retry++;
     if(retry == 50000)    // measured approx. 500 on several cards
80006572:	ce 20       	breq	80006536 <sd_mmc_spi_internal_init+0x27e>
80006574:	2f f5       	sub	r5,-1
80006576:	0d 89       	ld.ub	r9,r6[0x0]
        return false;
  } while (r1);
80006578:	30 08       	mov	r8,0
8000657a:	f0 09 18 00 	cp.b	r9,r8
8000657e:	ca 30       	breq	800064c4 <sd_mmc_spi_internal_init+0x20c>
80006580:	03 88       	ld.ub	r8,r1[0x0]
80006582:	e8 08 18 00 	cp.b	r8,r4

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80006586:	c2 00       	breq	800065c6 <sd_mmc_spi_internal_init+0x30e>
80006588:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000658a:	fe 7c 28 00 	mov	r12,-55296
8000658e:	cd e3       	brcs	8000654a <sd_mmc_spi_internal_init+0x292>

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80006590:	e6 08 18 00 	cp.b	r8,r3
80006594:	ce d1       	brne	8000656e <sd_mmc_spi_internal_init+0x2b6>
80006596:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006598:	fe 7c 28 00 	mov	r12,-55296
8000659c:	fe b0 e0 27 	rcall	800025ea <spi_selectChip>
800065a0:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800065a2:	33 7c       	mov	r12,55
800065a4:	fe b0 fb 0c 	rcall	80005bbc <sd_mmc_spi_command>
800065a8:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065aa:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800065ac:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065b0:	fe b0 e0 45 	rcall	8000263a <spi_unselectChip>
800065b4:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800065b6:	fe 7c 28 00 	mov	r12,-55296
800065ba:	fe b0 e0 18 	rcall	800025ea <spi_selectChip>
800065be:	fc 1b 40 00 	movh	r11,0x4000
  r1 = sd_mmc_spi_command(command, arg);
800065c2:	32 9c       	mov	r12,41
800065c4:	cc 7b       	rjmp	80006552 <sd_mmc_spi_internal_init+0x29a>
800065c6:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800065c8:	fe 7c 28 00 	mov	r12,-55296
800065cc:	fe b0 e0 0f 	rcall	800025ea <spi_selectChip>
800065d0:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800065d2:	33 7c       	mov	r12,55
800065d4:	fe b0 fa f4 	rcall	80005bbc <sd_mmc_spi_command>
800065d8:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065da:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800065dc:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065e0:	fe b0 e0 2d 	rcall	8000263a <spi_unselectChip>
800065e4:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800065e6:	fe 7c 28 00 	mov	r12,-55296
800065ea:	fe b0 e0 00 	rcall	800025ea <spi_selectChip>
800065ee:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800065f0:	32 9c       	mov	r12,41
800065f2:	cb 0b       	rjmp	80006552 <sd_mmc_spi_internal_init+0x29a>
800065f4:	a2 84       	st.b	r1[0x0],r4

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
800065f6:	30 18       	mov	r8,1
800065f8:	ca 5b       	rjmp	80006542 <sd_mmc_spi_internal_init+0x28a>
800065fa:	30 1b       	mov	r11,1
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800065fc:	fe 7c 28 00 	mov	r12,-55296
80006600:	fe b0 df f5 	rcall	800025ea <spi_selectChip>
80006604:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80006606:	30 9c       	mov	r12,9
80006608:	fe b0 fa da 	rcall	80005bbc <sd_mmc_spi_command>
8000660c:	a8 8c       	st.b	r4[0x0],r12
8000660e:	e0 81 01 f1 	brne	800069f0 <sd_mmc_spi_internal_init+0x738>
  // check for valid response
  if(r1 != 0x00)
80006612:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006616:	fe 7c 28 00 	mov	r12,-55296
8000661a:	fe b0 e0 7c 	rcall	80002712 <spi_write>
8000661e:	1a 95       	mov	r5,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006620:	fe 7c 28 00 	mov	r12,-55296
80006624:	1a 9b       	mov	r11,sp
80006626:	fe b0 e0 84 	rcall	8000272e <spi_read>
8000662a:	58 1c       	cp.w	r12,1
8000662c:	e0 80 01 ed 	breq	80006a06 <sd_mmc_spi_internal_init+0x74e>
80006630:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006632:	a8 88       	st.b	r4[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006634:	3f e9       	mov	r9,-2
80006636:	f2 08 18 00 	cp.b	r8,r9
8000663a:	e0 80 00 d1 	breq	800067dc <sd_mmc_spi_internal_init+0x524>
8000663e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006642:	fe 7c 28 00 	mov	r12,-55296
80006646:	fe b0 e0 66 	rcall	80002712 <spi_write>
8000664a:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000664c:	fe 7c 28 00 	mov	r12,-55296
80006650:	fe b0 e0 6f 	rcall	8000272e <spi_read>
80006654:	58 1c       	cp.w	r12,1
80006656:	e0 80 00 c0 	breq	800067d6 <sd_mmc_spi_internal_init+0x51e>
8000665a:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000665c:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000665e:	3f e9       	mov	r9,-2
80006660:	f2 08 18 00 	cp.b	r8,r9
80006664:	e0 80 00 bc 	breq	800067dc <sd_mmc_spi_internal_init+0x524>
80006668:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000666c:	fe 7c 28 00 	mov	r12,-55296
80006670:	fe b0 e0 51 	rcall	80002712 <spi_write>
80006674:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006676:	fe 7c 28 00 	mov	r12,-55296
8000667a:	fe b0 e0 5a 	rcall	8000272e <spi_read>
8000667e:	58 1c       	cp.w	r12,1
80006680:	e0 80 01 cb 	breq	80006a16 <sd_mmc_spi_internal_init+0x75e>
80006684:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006686:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006688:	3f e9       	mov	r9,-2
8000668a:	f2 08 18 00 	cp.b	r8,r9
8000668e:	e0 80 00 a7 	breq	800067dc <sd_mmc_spi_internal_init+0x524>
80006692:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006696:	fe 7c 28 00 	mov	r12,-55296
8000669a:	fe b0 e0 3c 	rcall	80002712 <spi_write>
8000669e:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800066a0:	fe 7c 28 00 	mov	r12,-55296
800066a4:	fe b0 e0 45 	rcall	8000272e <spi_read>
800066a8:	58 1c       	cp.w	r12,1
800066aa:	e0 80 01 b2 	breq	80006a0e <sd_mmc_spi_internal_init+0x756>
800066ae:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800066b0:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800066b2:	3f e9       	mov	r9,-2
800066b4:	f2 08 18 00 	cp.b	r8,r9
800066b8:	e0 80 00 92 	breq	800067dc <sd_mmc_spi_internal_init+0x524>
800066bc:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800066c0:	fe 7c 28 00 	mov	r12,-55296
800066c4:	fe b0 e0 27 	rcall	80002712 <spi_write>
800066c8:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800066ca:	fe 7c 28 00 	mov	r12,-55296
800066ce:	fe b0 e0 30 	rcall	8000272e <spi_read>
800066d2:	58 1c       	cp.w	r12,1
800066d4:	e0 80 01 a9 	breq	80006a26 <sd_mmc_spi_internal_init+0x76e>
800066d8:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800066da:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800066dc:	3f e9       	mov	r9,-2
800066de:	f2 08 18 00 	cp.b	r8,r9
800066e2:	c7 d0       	breq	800067dc <sd_mmc_spi_internal_init+0x524>
800066e4:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800066e8:	fe 7c 28 00 	mov	r12,-55296
800066ec:	fe b0 e0 13 	rcall	80002712 <spi_write>
800066f0:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800066f2:	fe 7c 28 00 	mov	r12,-55296
800066f6:	fe b0 e0 1c 	rcall	8000272e <spi_read>
800066fa:	58 1c       	cp.w	r12,1
800066fc:	e0 80 01 91 	breq	80006a1e <sd_mmc_spi_internal_init+0x766>
80006700:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006702:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006704:	3f e9       	mov	r9,-2
80006706:	f2 08 18 00 	cp.b	r8,r9
8000670a:	c6 90       	breq	800067dc <sd_mmc_spi_internal_init+0x524>
8000670c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006710:	fe 7c 28 00 	mov	r12,-55296
80006714:	fe b0 df ff 	rcall	80002712 <spi_write>
80006718:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000671a:	fe 7c 28 00 	mov	r12,-55296
8000671e:	fe b0 e0 08 	rcall	8000272e <spi_read>
80006722:	58 1c       	cp.w	r12,1
80006724:	e0 80 01 85 	breq	80006a2e <sd_mmc_spi_internal_init+0x776>
80006728:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000672a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000672c:	3f e9       	mov	r9,-2
8000672e:	f2 08 18 00 	cp.b	r8,r9
80006732:	c5 50       	breq	800067dc <sd_mmc_spi_internal_init+0x524>
80006734:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006738:	fe 7c 28 00 	mov	r12,-55296
8000673c:	fe b0 df eb 	rcall	80002712 <spi_write>
80006740:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006742:	fe 7c 28 00 	mov	r12,-55296
80006746:	fe b0 df f4 	rcall	8000272e <spi_read>
8000674a:	58 1c       	cp.w	r12,1
8000674c:	e0 80 01 75 	breq	80006a36 <sd_mmc_spi_internal_init+0x77e>
80006750:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006752:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006754:	3f e9       	mov	r9,-2
80006756:	f2 08 18 00 	cp.b	r8,r9
8000675a:	c4 10       	breq	800067dc <sd_mmc_spi_internal_init+0x524>
8000675c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006760:	fe 7c 28 00 	mov	r12,-55296
80006764:	fe b0 df d7 	rcall	80002712 <spi_write>
80006768:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000676a:	fe 7c 28 00 	mov	r12,-55296
8000676e:	fe b0 df e0 	rcall	8000272e <spi_read>
80006772:	58 1c       	cp.w	r12,1
80006774:	e0 80 01 68 	breq	80006a44 <sd_mmc_spi_internal_init+0x78c>
80006778:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000677a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000677c:	3f e9       	mov	r9,-2
8000677e:	f2 08 18 00 	cp.b	r8,r9
80006782:	c2 d0       	breq	800067dc <sd_mmc_spi_internal_init+0x524>
80006784:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006788:	fe 7c 28 00 	mov	r12,-55296
8000678c:	fe b0 df c3 	rcall	80002712 <spi_write>
80006790:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006792:	fe 7c 28 00 	mov	r12,-55296
80006796:	fe b0 df cc 	rcall	8000272e <spi_read>
8000679a:	58 1c       	cp.w	r12,1
8000679c:	e0 80 01 51 	breq	80006a3e <sd_mmc_spi_internal_init+0x786>
800067a0:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800067a2:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800067a4:	3f e9       	mov	r9,-2
800067a6:	f2 08 18 00 	cp.b	r8,r9
800067aa:	c1 90       	breq	800067dc <sd_mmc_spi_internal_init+0x524>
800067ac:	30 1b       	mov	r11,1
  {
    if (retry > 8)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800067ae:	fe 7c 28 00 	mov	r12,-55296
800067b2:	fe b0 df 44 	rcall	8000263a <spi_unselectChip>
800067b6:	30 0c       	mov	r12,0
800067b8:	cc 0a       	rjmp	80006538 <sd_mmc_spi_internal_init+0x280>
800067ba:	fe b0 fb db 	rcall	80005f70 <sd_mmc_spi_check_hc>
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
    if_cond = sd_mmc_spi_check_hc();
800067be:	5b fc       	cp.w	r12,-1
    if (if_cond == -1) {
800067c0:	fe 90 fe bb 	breq	80006536 <sd_mmc_spi_internal_init+0x27e>
800067c4:	58 1c       	cp.w	r12,1
      return false;
    } else if (if_cond == 1){
800067c6:	fe 91 fe 85 	brne	800064d0 <sd_mmc_spi_internal_init+0x218>
800067ca:	30 39       	mov	r9,3
          card_type = SD_CARD_2_SDHC;
800067cc:	e0 68 18 32 	mov	r8,6194
800067d0:	b0 89       	st.b	r8[0x0],r9
800067d2:	fe 9f fe 7f 	bral	800064d0 <sd_mmc_spi_internal_init+0x218>
800067d6:	3f f8       	mov	r8,-1
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800067d8:	ac 88       	st.b	r6[0x0],r8
800067da:	c4 7b       	rjmp	80006668 <sd_mmc_spi_internal_init+0x3b0>
800067dc:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800067e0:	fe 7c 28 00 	mov	r12,-55296
800067e4:	fe b0 df 97 	rcall	80002712 <spi_write>
800067e8:	fa c5 ff fe 	sub	r5,sp,-2
   spi_read(SD_MMC_SPI,&data_read);
800067ec:	fe 7c 28 00 	mov	r12,-55296
800067f0:	0a 9b       	mov	r11,r5
800067f2:	fe b0 df 9e 	rcall	8000272e <spi_read>
800067f6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800067f8:	e0 66 18 34 	mov	r6,6196
800067fc:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006800:	ac 88       	st.b	r6[0x0],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006802:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006806:	fe b0 df 86 	rcall	80002712 <spi_write>
8000680a:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000680c:	fe 7c 28 00 	mov	r12,-55296
80006810:	fe b0 df 8f 	rcall	8000272e <spi_read>
80006814:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006816:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000681a:	ac 98       	st.b	r6[0x1],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000681c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006820:	fe b0 df 79 	rcall	80002712 <spi_write>
80006824:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006826:	fe 7c 28 00 	mov	r12,-55296
8000682a:	fe b0 df 82 	rcall	8000272e <spi_read>
8000682e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006830:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006834:	ac a8       	st.b	r6[0x2],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006836:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000683a:	fe b0 df 6c 	rcall	80002712 <spi_write>
8000683e:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006840:	fe 7c 28 00 	mov	r12,-55296
80006844:	fe b0 df 75 	rcall	8000272e <spi_read>
80006848:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000684a:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000684e:	ac b8       	st.b	r6[0x3],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006850:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006854:	fe b0 df 5f 	rcall	80002712 <spi_write>
80006858:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000685a:	fe 7c 28 00 	mov	r12,-55296
8000685e:	fe b0 df 68 	rcall	8000272e <spi_read>
80006862:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006864:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006868:	ac c8       	st.b	r6[0x4],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000686a:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000686e:	fe b0 df 52 	rcall	80002712 <spi_write>
80006872:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006874:	fe 7c 28 00 	mov	r12,-55296
80006878:	fe b0 df 5b 	rcall	8000272e <spi_read>
8000687c:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000687e:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006882:	ac d8       	st.b	r6[0x5],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006884:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006888:	fe b0 df 45 	rcall	80002712 <spi_write>
8000688c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000688e:	fe 7c 28 00 	mov	r12,-55296
80006892:	fe b0 df 4e 	rcall	8000272e <spi_read>
80006896:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006898:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000689c:	ac e8       	st.b	r6[0x6],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000689e:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068a2:	fe b0 df 38 	rcall	80002712 <spi_write>
800068a6:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800068a8:	fe 7c 28 00 	mov	r12,-55296
800068ac:	fe b0 df 41 	rcall	8000272e <spi_read>
800068b0:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800068b2:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068b6:	ac f8       	st.b	r6[0x7],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800068b8:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068bc:	fe b0 df 2b 	rcall	80002712 <spi_write>
800068c0:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800068c2:	fe 7c 28 00 	mov	r12,-55296
800068c6:	fe b0 df 34 	rcall	8000272e <spi_read>
800068ca:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800068cc:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068d0:	ed 68 00 08 	st.b	r6[8],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800068d4:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068d8:	fe b0 df 1d 	rcall	80002712 <spi_write>
800068dc:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800068de:	fe 7c 28 00 	mov	r12,-55296
800068e2:	fe b0 df 26 	rcall	8000272e <spi_read>
800068e6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800068e8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068ec:	ed 68 00 09 	st.b	r6[9],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800068f0:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068f4:	fe b0 df 0f 	rcall	80002712 <spi_write>
800068f8:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800068fa:	fe 7c 28 00 	mov	r12,-55296
800068fe:	fe b0 df 18 	rcall	8000272e <spi_read>
80006902:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006904:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006908:	ed 68 00 0a 	st.b	r6[10],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000690c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006910:	fe b0 df 01 	rcall	80002712 <spi_write>
80006914:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006916:	fe 7c 28 00 	mov	r12,-55296
8000691a:	fe b0 df 0a 	rcall	8000272e <spi_read>
8000691e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006920:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006924:	ed 68 00 0b 	st.b	r6[11],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006928:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000692c:	fe b0 de f3 	rcall	80002712 <spi_write>
80006930:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006932:	fe 7c 28 00 	mov	r12,-55296
80006936:	fe b0 de fc 	rcall	8000272e <spi_read>
8000693a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000693c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006940:	ed 68 00 0c 	st.b	r6[12],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006944:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006948:	fe b0 de e5 	rcall	80002712 <spi_write>
8000694c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000694e:	fe 7c 28 00 	mov	r12,-55296
80006952:	fe b0 de ee 	rcall	8000272e <spi_read>
80006956:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006958:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000695c:	ed 68 00 0d 	st.b	r6[13],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006960:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006964:	fe b0 de d7 	rcall	80002712 <spi_write>
80006968:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000696a:	fe 7c 28 00 	mov	r12,-55296
8000696e:	fe b0 de e0 	rcall	8000272e <spi_read>
80006972:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006974:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006978:	ed 68 00 0e 	st.b	r6[14],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000697c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006980:	fe b0 de c9 	rcall	80002712 <spi_write>
80006984:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006986:	fe 7c 28 00 	mov	r12,-55296
8000698a:	fe b0 de d2 	rcall	8000272e <spi_read>
8000698e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006990:	e0 6b 00 ff 	mov	r11,255
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80006994:	ed 68 00 0f 	st.b	r6[15],r8
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006998:	fe 7c 28 00 	mov	r12,-55296
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
8000699c:	fe b0 de bb 	rcall	80002712 <spi_write>
800069a0:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);
800069a4:	fe 7c 28 00 	mov	r12,-55296
800069a8:	fe b0 de b5 	rcall	80002712 <spi_write>
800069ac:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800069b0:	fe 7c 28 00 	mov	r12,-55296
800069b4:	fe b0 de af 	rcall	80002712 <spi_write>
800069b8:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800069ba:	fe 7c 28 00 	mov	r12,-55296
800069be:	fe b0 de 3e 	rcall	8000263a <spi_unselectChip>
800069c2:	fe b0 f8 29 	rcall	80005a14 <sd_mmc_spi_get_capacity>
  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
800069c6:	e0 69 01 10 	mov	r9,272
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
800069ca:	30 18       	mov	r8,1

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800069cc:	72 0a       	ld.w	r10,r9[0x0]
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
800069ce:	e0 69 01 14 	mov	r9,276

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
800069d2:	b2 88       	st.b	r9[0x0],r8
800069d4:	e0 68 1b 00 	mov	r8,6912
800069d8:	ea 18 00 b7 	orh	r8,0xb7
800069dc:	e0 6b 01 00 	mov	r11,256
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800069e0:	8f 18       	st.w	r7[0x4],r8
800069e2:	fe 7c 28 00 	mov	r12,-55296
800069e6:	fe b0 de 3d 	rcall	80002660 <spi_setupChipReg>
  return true;
800069ea:	30 1c       	mov	r12,1
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800069ec:	fe 9f fd a6 	bral	80006538 <sd_mmc_spi_internal_init+0x280>
800069f0:	30 1b       	mov	r11,1
800069f2:	fe 7c 28 00 	mov	r12,-55296
    sd_mmc_spi_init_done = false;
800069f6:	fe b0 de 22 	rcall	8000263a <spi_unselectChip>
800069fa:	e0 68 01 14 	mov	r8,276
800069fe:	30 0c       	mov	r12,0
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006a00:	b0 85       	st.b	r8[0x0],r5
80006a02:	fe 9f fd 9b 	bral	80006538 <sd_mmc_spi_internal_init+0x280>
80006a06:	3f f8       	mov	r8,-1
80006a08:	a8 88       	st.b	r4[0x0],r8
80006a0a:	fe 9f fe 1a 	bral	8000663e <sd_mmc_spi_internal_init+0x386>
80006a0e:	3f f8       	mov	r8,-1
80006a10:	ac 88       	st.b	r6[0x0],r8
80006a12:	fe 9f fe 55 	bral	800066bc <sd_mmc_spi_internal_init+0x404>
80006a16:	3f f8       	mov	r8,-1
80006a18:	ac 88       	st.b	r6[0x0],r8
80006a1a:	fe 9f fe 3c 	bral	80006692 <sd_mmc_spi_internal_init+0x3da>
80006a1e:	3f f8       	mov	r8,-1
80006a20:	ac 88       	st.b	r6[0x0],r8
80006a22:	fe 9f fe 75 	bral	8000670c <sd_mmc_spi_internal_init+0x454>
80006a26:	3f f8       	mov	r8,-1
80006a28:	ac 88       	st.b	r6[0x0],r8
80006a2a:	fe 9f fe 5d 	bral	800066e4 <sd_mmc_spi_internal_init+0x42c>
80006a2e:	3f f8       	mov	r8,-1
80006a30:	ac 88       	st.b	r6[0x0],r8
80006a32:	fe 9f fe 81 	bral	80006734 <sd_mmc_spi_internal_init+0x47c>
80006a36:	3f f8       	mov	r8,-1
80006a38:	ac 88       	st.b	r6[0x0],r8
80006a3a:	fe 9f fe 91 	bral	8000675c <sd_mmc_spi_internal_init+0x4a4>
80006a3e:	3f f8       	mov	r8,-1
80006a40:	ac 88       	st.b	r6[0x0],r8
80006a42:	cb 5a       	rjmp	800067ac <sd_mmc_spi_internal_init+0x4f4>
80006a44:	3f f8       	mov	r8,-1
80006a46:	ac 88       	st.b	r6[0x0],r8
80006a48:	fe 9f fe 9e 	bral	80006784 <sd_mmc_spi_internal_init+0x4cc>

80006a4c <sd_mmc_spi_init>:
80006a4c:	eb cd 40 10 	pushm	r4,lr
80006a50:	e0 68 01 00 	mov	r8,256
80006a54:	fa c4 ff f8 	sub	r4,sp,-8
80006a58:	e8 ea 00 08 	ld.d	r10,r4[8]
80006a5c:	f0 eb 00 08 	st.d	r8[8],r10
80006a60:	e0 69 01 10 	mov	r9,272
80006a64:	93 0c       	st.w	r9[0x0],r12
80006a66:	e8 ea 00 00 	ld.d	r10,r4[0]
80006a6a:	f0 eb 00 00 	st.d	r8[0],r10
80006a6e:	fe b0 fc 25 	rcall	800062b8 <sd_mmc_spi_internal_init>
80006a72:	e3 cd 80 10 	ldm	sp++,r4,pc
80006a76:	d7 03       	nop

80006a78 <sd_mmc_spi_check_presence>:
80006a78:	eb cd 40 e0 	pushm	r5-r7,lr
80006a7c:	e0 67 01 14 	mov	r7,276
80006a80:	30 06       	mov	r6,0
80006a82:	0f 88       	ld.ub	r8,r7[0x0]
80006a84:	ec 08 18 00 	cp.b	r8,r6
bool sd_mmc_spi_check_presence(void)
{
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80006a88:	e0 81 01 2c 	brne	80006ce0 <sd_mmc_spi_check_presence+0x268>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006a8c:	30 1b       	mov	r11,1
80006a8e:	fe 7c 28 00 	mov	r12,-55296
80006a92:	fe b0 dd ac 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006a96:	30 0b       	mov	r11,0
80006a98:	16 9c       	mov	r12,r11
80006a9a:	fe b0 f8 91 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006a9e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006aa0:	e0 67 18 44 	mov	r7,6212
80006aa4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006aa6:	fe 7c 28 00 	mov	r12,-55296
80006aaa:	fe b0 dd c8 	rcall	8000263a <spi_unselectChip>
  return r1;
80006aae:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006ab0:	ae 88       	st.b	r7[0x0],r8
80006ab2:	30 16       	mov	r6,1
80006ab4:	ec 08 18 00 	cp.b	r8,r6
80006ab8:	e0 80 01 29 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006abc:	e0 6b 00 ff 	mov	r11,255
80006ac0:	fe 7c 28 00 	mov	r12,-55296
80006ac4:	fe b0 de 27 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ac8:	30 1b       	mov	r11,1
80006aca:	fe 7c 28 00 	mov	r12,-55296
80006ace:	fe b0 dd 8e 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006ad2:	30 0b       	mov	r11,0
80006ad4:	16 9c       	mov	r12,r11
80006ad6:	fe b0 f8 73 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ada:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006adc:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ade:	fe 7c 28 00 	mov	r12,-55296
80006ae2:	fe b0 dd ac 	rcall	8000263a <spi_unselectChip>
  return r1;
80006ae6:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006ae8:	ae 88       	st.b	r7[0x0],r8
80006aea:	ec 08 18 00 	cp.b	r8,r6
80006aee:	e0 80 01 0e 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006af2:	e0 6b 00 ff 	mov	r11,255
80006af6:	fe 7c 28 00 	mov	r12,-55296
80006afa:	fe b0 de 0c 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006afe:	30 1b       	mov	r11,1
80006b00:	fe 7c 28 00 	mov	r12,-55296
80006b04:	fe b0 dd 73 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006b08:	30 0b       	mov	r11,0
80006b0a:	16 9c       	mov	r12,r11
80006b0c:	fe b0 f8 58 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006b10:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006b12:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006b14:	fe 7c 28 00 	mov	r12,-55296
80006b18:	fe b0 dd 91 	rcall	8000263a <spi_unselectChip>
  return r1;
80006b1c:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006b1e:	ae 88       	st.b	r7[0x0],r8
80006b20:	ec 08 18 00 	cp.b	r8,r6
80006b24:	e0 80 00 f3 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006b28:	e0 6b 00 ff 	mov	r11,255
80006b2c:	fe 7c 28 00 	mov	r12,-55296
80006b30:	fe b0 dd f1 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006b34:	30 1b       	mov	r11,1
80006b36:	fe 7c 28 00 	mov	r12,-55296
80006b3a:	fe b0 dd 58 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006b3e:	30 0b       	mov	r11,0
80006b40:	16 9c       	mov	r12,r11
80006b42:	fe b0 f8 3d 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006b46:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006b48:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006b4a:	fe 7c 28 00 	mov	r12,-55296
80006b4e:	fe b0 dd 76 	rcall	8000263a <spi_unselectChip>
  return r1;
80006b52:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006b54:	ae 88       	st.b	r7[0x0],r8
80006b56:	ec 08 18 00 	cp.b	r8,r6
80006b5a:	e0 80 00 d8 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006b5e:	e0 6b 00 ff 	mov	r11,255
80006b62:	fe 7c 28 00 	mov	r12,-55296
80006b66:	fe b0 dd d6 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006b6a:	30 1b       	mov	r11,1
80006b6c:	fe 7c 28 00 	mov	r12,-55296
80006b70:	fe b0 dd 3d 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006b74:	30 0b       	mov	r11,0
80006b76:	16 9c       	mov	r12,r11
80006b78:	fe b0 f8 22 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006b7c:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006b7e:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006b80:	fe 7c 28 00 	mov	r12,-55296
80006b84:	fe b0 dd 5b 	rcall	8000263a <spi_unselectChip>
  return r1;
80006b88:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006b8a:	ae 88       	st.b	r7[0x0],r8
80006b8c:	ec 08 18 00 	cp.b	r8,r6
80006b90:	e0 80 00 bd 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006b94:	e0 6b 00 ff 	mov	r11,255
80006b98:	fe 7c 28 00 	mov	r12,-55296
80006b9c:	fe b0 dd bb 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ba0:	30 1b       	mov	r11,1
80006ba2:	fe 7c 28 00 	mov	r12,-55296
80006ba6:	fe b0 dd 22 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006baa:	30 0b       	mov	r11,0
80006bac:	16 9c       	mov	r12,r11
80006bae:	fe b0 f8 07 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006bb2:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006bb4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006bb6:	fe 7c 28 00 	mov	r12,-55296
80006bba:	fe b0 dd 40 	rcall	8000263a <spi_unselectChip>
  return r1;
80006bbe:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006bc0:	ae 88       	st.b	r7[0x0],r8
80006bc2:	ec 08 18 00 	cp.b	r8,r6
80006bc6:	e0 80 00 a2 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006bca:	e0 6b 00 ff 	mov	r11,255
80006bce:	fe 7c 28 00 	mov	r12,-55296
80006bd2:	fe b0 dd a0 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006bd6:	30 1b       	mov	r11,1
80006bd8:	fe 7c 28 00 	mov	r12,-55296
80006bdc:	fe b0 dd 07 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006be0:	30 0b       	mov	r11,0
80006be2:	16 9c       	mov	r12,r11
80006be4:	fe b0 f7 ec 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006be8:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006bea:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006bec:	fe 7c 28 00 	mov	r12,-55296
80006bf0:	fe b0 dd 25 	rcall	8000263a <spi_unselectChip>
  return r1;
80006bf4:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006bf6:	ae 88       	st.b	r7[0x0],r8
80006bf8:	ec 08 18 00 	cp.b	r8,r6
80006bfc:	e0 80 00 87 	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c00:	e0 6b 00 ff 	mov	r11,255
80006c04:	fe 7c 28 00 	mov	r12,-55296
80006c08:	fe b0 dd 85 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006c0c:	30 1b       	mov	r11,1
80006c0e:	fe 7c 28 00 	mov	r12,-55296
80006c12:	fe b0 dc ec 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006c16:	30 0b       	mov	r11,0
80006c18:	16 9c       	mov	r12,r11
80006c1a:	fe b0 f7 d1 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c1e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006c20:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c22:	fe 7c 28 00 	mov	r12,-55296
80006c26:	fe b0 dd 0a 	rcall	8000263a <spi_unselectChip>
  return r1;
80006c2a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006c2c:	ae 88       	st.b	r7[0x0],r8
80006c2e:	ec 08 18 00 	cp.b	r8,r6
80006c32:	c6 c0       	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c34:	e0 6b 00 ff 	mov	r11,255
80006c38:	fe 7c 28 00 	mov	r12,-55296
80006c3c:	fe b0 dd 6b 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006c40:	30 1b       	mov	r11,1
80006c42:	fe 7c 28 00 	mov	r12,-55296
80006c46:	fe b0 dc d2 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006c4a:	30 0b       	mov	r11,0
80006c4c:	16 9c       	mov	r12,r11
80006c4e:	fe b0 f7 b7 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c52:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006c54:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c56:	fe 7c 28 00 	mov	r12,-55296
80006c5a:	fe b0 dc f0 	rcall	8000263a <spi_unselectChip>
  return r1;
80006c5e:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006c60:	ae 88       	st.b	r7[0x0],r8
80006c62:	ec 08 18 00 	cp.b	r8,r6
80006c66:	c5 20       	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c68:	e0 6b 00 ff 	mov	r11,255
80006c6c:	fe 7c 28 00 	mov	r12,-55296
80006c70:	fe b0 dd 51 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006c74:	30 1b       	mov	r11,1
80006c76:	fe 7c 28 00 	mov	r12,-55296
80006c7a:	fe b0 dc b8 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006c7e:	30 0b       	mov	r11,0
80006c80:	16 9c       	mov	r12,r11
80006c82:	fe b0 f7 9d 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c86:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006c88:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c8a:	fe 7c 28 00 	mov	r12,-55296
80006c8e:	fe b0 dc d6 	rcall	8000263a <spi_unselectChip>
  return r1;
80006c92:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006c94:	ae 88       	st.b	r7[0x0],r8
80006c96:	ec 08 18 00 	cp.b	r8,r6
80006c9a:	c3 80       	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c9c:	e0 6b 00 ff 	mov	r11,255
80006ca0:	fe 7c 28 00 	mov	r12,-55296
80006ca4:	fe b0 dd 37 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ca8:	30 1b       	mov	r11,1
80006caa:	fe 7c 28 00 	mov	r12,-55296
80006cae:	fe b0 dc 9e 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006cb2:	30 0b       	mov	r11,0
80006cb4:	16 9c       	mov	r12,r11
80006cb6:	fe b0 f7 83 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cba:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006cbc:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cbe:	fe 7c 28 00 	mov	r12,-55296
80006cc2:	fe b0 dc bc 	rcall	8000263a <spi_unselectChip>
  return r1;
80006cc6:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006cc8:	ae 88       	st.b	r7[0x0],r8
80006cca:	ec 08 18 00 	cp.b	r8,r6
80006cce:	c1 e0       	breq	80006d0a <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006cd0:	e0 6b 00 ff 	mov	r11,255
80006cd4:	fe 7c 28 00 	mov	r12,-55296
80006cd8:	fe b0 dd 1d 	rcall	80002712 <spi_write>
80006cdc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ce0:	30 1b       	mov	r11,1
80006ce2:	fe 7c 28 00 	mov	r12,-55296
80006ce6:	fe b0 dc 82 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006cea:	30 0b       	mov	r11,0
80006cec:	33 bc       	mov	r12,59
80006cee:	fe b0 f7 67 	rcall	80005bbc <sd_mmc_spi_command>
80006cf2:	e0 65 18 44 	mov	r5,6212
80006cf6:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cf8:	aa 8c       	st.b	r5[0x0],r12
80006cfa:	fe 7c 28 00 	mov	r12,-55296
80006cfe:	fe b0 dc 9e 	rcall	8000263a <spi_unselectChip>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80006d02:	0b 88       	ld.ub	r8,r5[0x0]
80006d04:	aa 88       	st.b	r5[0x0],r8
80006d06:	58 08       	cp.w	r8,0
      return true;
    sd_mmc_spi_init_done = false;
    return false;
80006d08:	c0 31       	brne	80006d0e <sd_mmc_spi_check_presence+0x296>
80006d0a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
      return true;
    sd_mmc_spi_init_done = false;
80006d0e:	ae 86       	st.b	r7[0x0],r6
80006d10:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80006d14 <sd_mmc_spi_mem_check>:
80006d14:	eb cd 40 e0 	pushm	r5-r7,lr
80006d18:	e0 65 01 14 	mov	r5,276
80006d1c:	30 07       	mov	r7,0
80006d1e:	0b 88       	ld.ub	r8,r5[0x0]
80006d20:	ee 08 18 00 	cp.b	r8,r7
80006d24:	e0 81 01 2c 	brne	80006f7c <sd_mmc_spi_mem_check+0x268>
80006d28:	30 1b       	mov	r11,1
80006d2a:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006d2e:	fe b0 dc 5e 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006d32:	30 0b       	mov	r11,0
80006d34:	16 9c       	mov	r12,r11
80006d36:	fe b0 f7 43 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d3a:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006d3c:	e0 67 18 44 	mov	r7,6212
80006d40:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d42:	fe 7c 28 00 	mov	r12,-55296
80006d46:	fe b0 dc 7a 	rcall	8000263a <spi_unselectChip>
  return r1;
80006d4a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006d4c:	ae 88       	st.b	r7[0x0],r8
80006d4e:	30 16       	mov	r6,1
80006d50:	ec 08 18 00 	cp.b	r8,r6
80006d54:	e0 80 01 29 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006d58:	e0 6b 00 ff 	mov	r11,255
80006d5c:	fe 7c 28 00 	mov	r12,-55296
80006d60:	fe b0 dc d9 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006d64:	30 1b       	mov	r11,1
80006d66:	fe 7c 28 00 	mov	r12,-55296
80006d6a:	fe b0 dc 40 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006d6e:	30 0b       	mov	r11,0
80006d70:	16 9c       	mov	r12,r11
80006d72:	fe b0 f7 25 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d76:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006d78:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d7a:	fe 7c 28 00 	mov	r12,-55296
80006d7e:	fe b0 dc 5e 	rcall	8000263a <spi_unselectChip>
  return r1;
80006d82:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006d84:	ae 88       	st.b	r7[0x0],r8
80006d86:	ec 08 18 00 	cp.b	r8,r6
80006d8a:	e0 80 01 0e 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006d8e:	e0 6b 00 ff 	mov	r11,255
80006d92:	fe 7c 28 00 	mov	r12,-55296
80006d96:	fe b0 dc be 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006d9a:	30 1b       	mov	r11,1
80006d9c:	fe 7c 28 00 	mov	r12,-55296
80006da0:	fe b0 dc 25 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006da4:	30 0b       	mov	r11,0
80006da6:	16 9c       	mov	r12,r11
80006da8:	fe b0 f7 0a 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006dac:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006dae:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006db0:	fe 7c 28 00 	mov	r12,-55296
80006db4:	fe b0 dc 43 	rcall	8000263a <spi_unselectChip>
  return r1;
80006db8:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006dba:	ae 88       	st.b	r7[0x0],r8
80006dbc:	ec 08 18 00 	cp.b	r8,r6
80006dc0:	e0 80 00 f3 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006dc4:	e0 6b 00 ff 	mov	r11,255
80006dc8:	fe 7c 28 00 	mov	r12,-55296
80006dcc:	fe b0 dc a3 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006dd0:	30 1b       	mov	r11,1
80006dd2:	fe 7c 28 00 	mov	r12,-55296
80006dd6:	fe b0 dc 0a 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006dda:	30 0b       	mov	r11,0
80006ddc:	16 9c       	mov	r12,r11
80006dde:	fe b0 f6 ef 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006de2:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006de4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006de6:	fe 7c 28 00 	mov	r12,-55296
80006dea:	fe b0 dc 28 	rcall	8000263a <spi_unselectChip>
  return r1;
80006dee:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006df0:	ae 88       	st.b	r7[0x0],r8
80006df2:	ec 08 18 00 	cp.b	r8,r6
80006df6:	e0 80 00 d8 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006dfa:	e0 6b 00 ff 	mov	r11,255
80006dfe:	fe 7c 28 00 	mov	r12,-55296
80006e02:	fe b0 dc 88 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006e06:	30 1b       	mov	r11,1
80006e08:	fe 7c 28 00 	mov	r12,-55296
80006e0c:	fe b0 db ef 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006e10:	30 0b       	mov	r11,0
80006e12:	16 9c       	mov	r12,r11
80006e14:	fe b0 f6 d4 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e18:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006e1a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e1c:	fe 7c 28 00 	mov	r12,-55296
80006e20:	fe b0 dc 0d 	rcall	8000263a <spi_unselectChip>
  return r1;
80006e24:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006e26:	ae 88       	st.b	r7[0x0],r8
80006e28:	ec 08 18 00 	cp.b	r8,r6
80006e2c:	e0 80 00 bd 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006e30:	e0 6b 00 ff 	mov	r11,255
80006e34:	fe 7c 28 00 	mov	r12,-55296
80006e38:	fe b0 dc 6d 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006e3c:	30 1b       	mov	r11,1
80006e3e:	fe 7c 28 00 	mov	r12,-55296
80006e42:	fe b0 db d4 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006e46:	30 0b       	mov	r11,0
80006e48:	16 9c       	mov	r12,r11
80006e4a:	fe b0 f6 b9 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e4e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006e50:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e52:	fe 7c 28 00 	mov	r12,-55296
80006e56:	fe b0 db f2 	rcall	8000263a <spi_unselectChip>
  return r1;
80006e5a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006e5c:	ae 88       	st.b	r7[0x0],r8
80006e5e:	ec 08 18 00 	cp.b	r8,r6
80006e62:	e0 80 00 a2 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006e66:	e0 6b 00 ff 	mov	r11,255
80006e6a:	fe 7c 28 00 	mov	r12,-55296
80006e6e:	fe b0 dc 52 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006e72:	30 1b       	mov	r11,1
80006e74:	fe 7c 28 00 	mov	r12,-55296
80006e78:	fe b0 db b9 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006e7c:	30 0b       	mov	r11,0
80006e7e:	16 9c       	mov	r12,r11
80006e80:	fe b0 f6 9e 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e84:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006e86:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e88:	fe 7c 28 00 	mov	r12,-55296
80006e8c:	fe b0 db d7 	rcall	8000263a <spi_unselectChip>
  return r1;
80006e90:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006e92:	ae 88       	st.b	r7[0x0],r8
80006e94:	ec 08 18 00 	cp.b	r8,r6
80006e98:	e0 80 00 87 	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006e9c:	e0 6b 00 ff 	mov	r11,255
80006ea0:	fe 7c 28 00 	mov	r12,-55296
80006ea4:	fe b0 dc 37 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ea8:	30 1b       	mov	r11,1
80006eaa:	fe 7c 28 00 	mov	r12,-55296
80006eae:	fe b0 db 9e 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006eb2:	30 0b       	mov	r11,0
80006eb4:	16 9c       	mov	r12,r11
80006eb6:	fe b0 f6 83 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006eba:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006ebc:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ebe:	fe 7c 28 00 	mov	r12,-55296
80006ec2:	fe b0 db bc 	rcall	8000263a <spi_unselectChip>
  return r1;
80006ec6:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006ec8:	ae 88       	st.b	r7[0x0],r8
80006eca:	ec 08 18 00 	cp.b	r8,r6
80006ece:	c6 c0       	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006ed0:	e0 6b 00 ff 	mov	r11,255
80006ed4:	fe 7c 28 00 	mov	r12,-55296
80006ed8:	fe b0 dc 1d 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006edc:	30 1b       	mov	r11,1
80006ede:	fe 7c 28 00 	mov	r12,-55296
80006ee2:	fe b0 db 84 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006ee6:	30 0b       	mov	r11,0
80006ee8:	16 9c       	mov	r12,r11
80006eea:	fe b0 f6 69 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006eee:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006ef0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ef2:	fe 7c 28 00 	mov	r12,-55296
80006ef6:	fe b0 db a2 	rcall	8000263a <spi_unselectChip>
  return r1;
80006efa:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006efc:	ae 88       	st.b	r7[0x0],r8
80006efe:	ec 08 18 00 	cp.b	r8,r6
80006f02:	c5 20       	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006f04:	e0 6b 00 ff 	mov	r11,255
80006f08:	fe 7c 28 00 	mov	r12,-55296
80006f0c:	fe b0 dc 03 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006f10:	30 1b       	mov	r11,1
80006f12:	fe 7c 28 00 	mov	r12,-55296
80006f16:	fe b0 db 6a 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006f1a:	30 0b       	mov	r11,0
80006f1c:	16 9c       	mov	r12,r11
80006f1e:	fe b0 f6 4f 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f22:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006f24:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f26:	fe 7c 28 00 	mov	r12,-55296
80006f2a:	fe b0 db 88 	rcall	8000263a <spi_unselectChip>
  return r1;
80006f2e:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006f30:	ae 88       	st.b	r7[0x0],r8
80006f32:	ec 08 18 00 	cp.b	r8,r6
80006f36:	c3 80       	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006f38:	e0 6b 00 ff 	mov	r11,255
80006f3c:	fe 7c 28 00 	mov	r12,-55296
80006f40:	fe b0 db e9 	rcall	80002712 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006f44:	30 1b       	mov	r11,1
80006f46:	fe 7c 28 00 	mov	r12,-55296
80006f4a:	fe b0 db 50 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006f4e:	30 0b       	mov	r11,0
80006f50:	16 9c       	mov	r12,r11
80006f52:	fe b0 f6 35 	rcall	80005bbc <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f56:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006f58:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f5a:	fe 7c 28 00 	mov	r12,-55296
80006f5e:	fe b0 db 6e 	rcall	8000263a <spi_unselectChip>
  return r1;
80006f62:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006f64:	ae 88       	st.b	r7[0x0],r8
80006f66:	ec 08 18 00 	cp.b	r8,r6
80006f6a:	c1 e0       	breq	80006fa6 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006f6c:	e0 6b 00 ff 	mov	r11,255
80006f70:	fe 7c 28 00 	mov	r12,-55296
80006f74:	fe b0 db cf 	rcall	80002712 <spi_write>
80006f78:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006f7c:	30 1b       	mov	r11,1
80006f7e:	fe 7c 28 00 	mov	r12,-55296
80006f82:	fe b0 db 34 	rcall	800025ea <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006f86:	30 0b       	mov	r11,0
80006f88:	33 bc       	mov	r12,59
80006f8a:	fe b0 f6 19 	rcall	80005bbc <sd_mmc_spi_command>
80006f8e:	e0 66 18 44 	mov	r6,6212
80006f92:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f94:	ac 8c       	st.b	r6[0x0],r12
80006f96:	fe 7c 28 00 	mov	r12,-55296
80006f9a:	fe b0 db 50 	rcall	8000263a <spi_unselectChip>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80006f9e:	0d 88       	ld.ub	r8,r6[0x0]
80006fa0:	ac 88       	st.b	r6[0x0],r8
80006fa2:	58 08       	cp.w	r8,0
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
  if (sd_mmc_spi_check_presence())
  {
    if (sd_mmc_spi_init_done == false)
80006fa4:	c0 c1       	brne	80006fbc <sd_mmc_spi_mem_check+0x2a8>
80006fa6:	0b 89       	ld.ub	r9,r5[0x0]
80006fa8:	30 08       	mov	r8,0
80006faa:	f0 09 18 00 	cp.b	r9,r8
80006fae:	c0 30       	breq	80006fb4 <sd_mmc_spi_mem_check+0x2a0>
80006fb0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80006fb4:	fe b0 f9 82 	rcall	800062b8 <sd_mmc_spi_internal_init>
    }
    else
      return true;
  }
  return false;
}
80006fb8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
      return true;
    sd_mmc_spi_init_done = false;
80006fbc:	aa 87       	st.b	r5[0x0],r7
80006fbe:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006fc2:	d7 03       	nop

80006fc4 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80006fc4:	5e fd       	retal	0
80006fc6:	d7 03       	nop

80006fc8 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80006fc8:	eb cd 40 c0 	pushm	r6-r7,lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80006fcc:	30 86       	mov	r6,8
80006fce:	30 17       	mov	r7,1
80006fd0:	0d 88       	ld.ub	r8,r6[0x0]
80006fd2:	ee 08 18 00 	cp.b	r8,r7
80006fd6:	c1 a0       	breq	8000700a <sd_mmc_spi_test_unit_ready+0x42>
80006fd8:	c0 a3       	brcs	80006fec <sd_mmc_spi_test_unit_ready+0x24>
80006fda:	30 29       	mov	r9,2
80006fdc:	f2 08 18 00 	cp.b	r8,r9
80006fe0:	c1 00       	breq	80007000 <sd_mmc_spi_test_unit_ready+0x38>
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80006fe2:	30 08       	mov	r8,0
80006fe4:	30 3c       	mov	r12,3
80006fe6:	ac 88       	st.b	r6[0x0],r8
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80006fe8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
{
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80006fec:	30 09       	mov	r9,0
80006fee:	e0 68 01 14 	mov	r8,276
      if (sd_mmc_spi_mem_check())
80006ff2:	b0 89       	st.b	r8[0x0],r9
80006ff4:	c9 0e       	rcall	80006d14 <sd_mmc_spi_mem_check>
80006ff6:	c0 70       	breq	80007004 <sd_mmc_spi_test_unit_ready+0x3c>
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80006ff8:	ac 87       	st.b	r6[0x0],r7
80006ffa:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80006ffc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80007000:	30 08       	mov	r8,0
80007002:	ac 88       	st.b	r6[0x0],r8
80007004:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80007006:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
8000700a:	c8 5e       	rcall	80006d14 <sd_mmc_spi_mem_check>
8000700c:	c0 91       	brne	8000701e <sd_mmc_spi_test_unit_ready+0x56>
8000700e:	30 28       	mov	r8,2
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80007010:	ac 88       	st.b	r6[0x0],r8
80007012:	e0 68 01 14 	mov	r8,276
        sd_mmc_spi_init_done = false;
80007016:	b0 8c       	st.b	r8[0x0],r12
80007018:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
8000701a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
8000701e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80007022:	d7 03       	nop

80007024 <sd_mmc_spi_ram_2_mem>:
80007024:	d4 21       	pushm	r4-r7,lr
80007026:	18 97       	mov	r7,r12
80007028:	16 94       	mov	r4,r11
8000702a:	fe b0 fd 27 	rcall	80006a78 <sd_mmc_spi_check_presence>
8000702e:	e0 65 01 14 	mov	r5,276
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();

   if (!sd_mmc_spi_init_done)
80007032:	30 08       	mov	r8,0
80007034:	0b 86       	ld.ub	r6,r5[0x0]
80007036:	f0 06 18 00 	cp.b	r6,r8
      sd_mmc_spi_mem_init();
   }

   if (sd_mmc_spi_init_done)
   {
     sd_mmc_spi_write_open(addr);
8000703a:	c0 c0       	breq	80007052 <sd_mmc_spi_ram_2_mem+0x2e>
8000703c:	0e 9c       	mov	r12,r7
8000703e:	fe b0 f5 ab 	rcall	80005b94 <sd_mmc_spi_write_open>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80007042:	08 9c       	mov	r12,r4
80007044:	fe b0 f8 06 	rcall	80006050 <sd_mmc_spi_write_sector_from_ram>
     {
       sd_mmc_spi_write_close();
80007048:	c0 d1       	brne	80007062 <sd_mmc_spi_ram_2_mem+0x3e>
8000704a:	fe b0 f5 6f 	rcall	80005b28 <sd_mmc_spi_write_close>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
8000704e:	30 2c       	mov	r12,2
//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80007050:	d8 22       	popm	r4-r7,pc
80007052:	fe b0 f9 33 	rcall	800062b8 <sd_mmc_spi_internal_init>
   if (!sd_mmc_spi_init_done)
   {
      sd_mmc_spi_mem_init();
   }

   if (sd_mmc_spi_init_done)
80007056:	0b 88       	ld.ub	r8,r5[0x0]
80007058:	ec 08 18 00 	cp.b	r8,r6
   {
     sd_mmc_spi_write_open(addr);
     if (!sd_mmc_spi_write_sector_from_ram(ram))
     {
       sd_mmc_spi_write_close();
8000705c:	cf 01       	brne	8000703c <sd_mmc_spi_ram_2_mem+0x18>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
8000705e:	30 2c       	mov	r12,2
     }
     sd_mmc_spi_write_close();
80007060:	d8 22       	popm	r4-r7,pc
80007062:	fe b0 f5 63 	rcall	80005b28 <sd_mmc_spi_write_close>
80007066:	d8 2a       	popm	r4-r7,pc,r12=0

80007068 <sd_mmc_spi_mem_2_ram>:
80007068:	d4 21       	pushm	r4-r7,lr
8000706a:	18 97       	mov	r7,r12
8000706c:	16 94       	mov	r4,r11
8000706e:	fe b0 fd 05 	rcall	80006a78 <sd_mmc_spi_check_presence>
80007072:	e0 65 01 14 	mov	r5,276
80007076:	30 08       	mov	r8,0
80007078:	0b 86       	ld.ub	r6,r5[0x0]
8000707a:	f0 06 18 00 	cp.b	r6,r8
8000707e:	c0 60       	breq	8000708a <sd_mmc_spi_mem_2_ram+0x22>
   }

   if (!sd_mmc_spi_init_done)
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80007080:	0e 9c       	mov	r12,r7
80007082:	fe b0 f5 95 	rcall	80005bac <sd_mmc_spi_read_open>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80007086:	c0 a1       	brne	8000709a <sd_mmc_spi_mem_2_ram+0x32>
//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80007088:	da 2a       	popm	r4-r7,pc,r12=1
8000708a:	fe b0 f9 17 	rcall	800062b8 <sd_mmc_spi_internal_init>
   if (!sd_mmc_spi_init_done)
   {
      sd_mmc_spi_mem_init();
   }

   if (!sd_mmc_spi_init_done)
8000708e:	0b 88       	ld.ub	r8,r5[0x0]
80007090:	ec 08 18 00 	cp.b	r8,r6
80007094:	cf 61       	brne	80007080 <sd_mmc_spi_mem_2_ram+0x18>
80007096:	30 2c       	mov	r12,2
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80007098:	d8 22       	popm	r4-r7,pc
8000709a:	08 9c       	mov	r12,r4
8000709c:	fe b0 f6 dc 	rcall	80005e54 <sd_mmc_spi_read_sector_to_ram>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
800070a0:	cf 40       	breq	80007088 <sd_mmc_spi_mem_2_ram+0x20>
800070a2:	fe b0 f5 81 	rcall	80005ba4 <sd_mmc_spi_read_close>
800070a6:	ec 1c 00 01 	eorl	r12,0x1
800070aa:	5c 5c       	castu.b	r12
800070ac:	d8 22       	popm	r4-r7,pc
800070ae:	d7 03       	nop

800070b0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
800070b0:	5e ff       	retal	1
800070b2:	d7 03       	nop

800070b4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
800070b4:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800070b6:	58 0c       	cp.w	r12,0
800070b8:	c0 20       	breq	800070bc <mem_test_unit_ready+0x8>
800070ba:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
800070bc:	c8 6f       	rcall	80006fc8 <sd_mmc_spi_test_unit_ready>
800070be:	d8 02       	popm	pc

800070c0 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return status;
}
800070c0:	58 0c       	cp.w	r12,0
800070c2:	5f 0c       	sreq	r12
800070c4:	5e fc       	retal	r12
800070c6:	d7 03       	nop

800070c8 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
800070c8:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
800070ca:	58 0c       	cp.w	r12,0
800070cc:	c0 20       	breq	800070d0 <mem_wr_protect+0x8>
800070ce:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
800070d0:	c7 af       	rcall	80006fc4 <sd_mmc_spi_wr_protect>
800070d2:	d8 02       	popm	pc

800070d4 <memory_2_ram>:
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
800070d4:	d4 01       	pushm	lr
800070d6:	16 98       	mov	r8,r11
800070d8:	58 0c       	cp.w	r12,0
800070da:	c0 20       	breq	800070de <memory_2_ram+0xa>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
800070dc:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
800070de:	14 9b       	mov	r11,r10
800070e0:	10 9c       	mov	r12,r8
800070e2:	cc 3f       	rcall	80007068 <sd_mmc_spi_mem_2_ram>
800070e4:	d8 02       	popm	pc
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
800070e6:	d7 03       	nop

800070e8 <ram_2_memory>:
800070e8:	d4 01       	pushm	lr
800070ea:	16 98       	mov	r8,r11
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
800070ec:	58 0c       	cp.w	r12,0
800070ee:	c0 20       	breq	800070f2 <ram_2_memory+0xa>
800070f0:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
800070f2:	14 9b       	mov	r11,r10
800070f4:	10 9c       	mov	r12,r8
800070f6:	c9 7f       	rcall	80007024 <sd_mmc_spi_ram_2_mem>
800070f8:	d8 02       	popm	pc
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
800070fa:	d7 03       	nop

800070fc <init_adc>:
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
  (*dst)[3] = (val >> 1) & 0xfff;
}

// setup ad7923
void init_adc(void) {
800070fc:	d4 01       	pushm	lr
  int i;
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800070fe:	30 1b       	mov	r11,1
80007100:	fe 7c 24 00 	mov	r12,-56320
80007104:	fe b0 da 73 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
80007108:	e0 6b ff ff 	mov	r11,65535
8000710c:	fe 7c 24 00 	mov	r12,-56320
80007110:	fe b0 db 01 	rcall	80002712 <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80007114:	30 1b       	mov	r11,1
80007116:	fe 7c 24 00 	mov	r12,-56320
8000711a:	fe b0 da 90 	rcall	8000263a <spi_unselectChip>
  // wait for powerup time (5us in datasheet)
   for(i=0; i<100; i++) { ;; }
   //  delay_ms(1);

  /// ok... do it twice
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
8000711e:	30 1b       	mov	r11,1
80007120:	fe 7c 24 00 	mov	r12,-56320
80007124:	fe b0 da 63 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
80007128:	e0 6b ff ff 	mov	r11,65535
8000712c:	fe 7c 24 00 	mov	r12,-56320
80007130:	fe b0 da f1 	rcall	80002712 <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80007134:	30 1b       	mov	r11,1
80007136:	fe 7c 24 00 	mov	r12,-56320
8000713a:	fe b0 da 80 	rcall	8000263a <spi_unselectChip>
   for(i=0; i<100; i++) { ;; }
  //  delay_ms(1);
   
   // write base configuration
   cmd = AD7927_CMD_BASE << 4;
   spi_selectChip( ADC_SPI, ADC_SPI_NPCS );
8000713e:	30 1b       	mov	r11,1
80007140:	fe 7c 24 00 	mov	r12,-56320
80007144:	fe b0 da 53 	rcall	800025ea <spi_selectChip>
   spi_write( ADC_SPI, cmd );
80007148:	e0 6b 83 10 	mov	r11,33552
8000714c:	fe 7c 24 00 	mov	r12,-56320
80007150:	fe b0 da e1 	rcall	80002712 <spi_write>
   spi_unselectChip( ADC_SPI, ADC_SPI_NPCS );
80007154:	30 1b       	mov	r11,1
80007156:	fe 7c 24 00 	mov	r12,-56320
8000715a:	fe b0 da 70 	rcall	8000263a <spi_unselectChip>
   for(i=0; i<100; i++) { ;; }
}
8000715e:	d8 02       	popm	pc

80007160 <adc_poll>:
80007160:	eb cd 40 c0 	pushm	r6-r7,lr
80007164:	20 1d       	sub	sp,4
80007166:	30 1b       	mov	r11,1
80007168:	fe 7c 24 00 	mov	r12,-56320

  //  print_dbg("\r\nsetting up channel 0 with command: ");
  //  print_dbg_ulong(cmd);

  // write to set up channel 0
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
8000716c:	fe b0 da 3f 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80007170:	e0 6b 83 10 	mov	r11,33552
80007174:	fe 7c 24 00 	mov	r12,-56320
80007178:	fe b0 da cd 	rcall	80002712 <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
8000717c:	30 1b       	mov	r11,1
8000717e:	fe 7c 24 00 	mov	r12,-56320
80007182:	fe b0 da 5c 	rcall	8000263a <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80007186:	30 1b       	mov	r11,1
80007188:	fe 7c 24 00 	mov	r12,-56320
8000718c:	fe b0 da 2f 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80007190:	e0 6b 87 10 	mov	r11,34576
80007194:	fe 7c 24 00 	mov	r12,-56320
80007198:	fe b0 da bd 	rcall	80002712 <spi_write>
  spi_read(ADC_SPI, &val);
8000719c:	fa c6 ff fe 	sub	r6,sp,-2
800071a0:	fe 7c 24 00 	mov	r12,-56320
800071a4:	0c 9b       	mov	r11,r6
800071a6:	fe b0 da c4 	rcall	8000272e <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800071aa:	30 1b       	mov	r11,1
800071ac:	fe 7c 24 00 	mov	r12,-56320
800071b0:	fe b0 da 45 	rcall	8000263a <spi_unselectChip>
  // values need lshift because of extremely weird timing...
  (*dst)[0] = (val >> 1) & 0xfff;
800071b4:	9a 98       	ld.uh	r8,sp[0x2]
800071b6:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
800071ba:	e0 67 01 28 	mov	r7,296
800071be:	30 1b       	mov	r11,1
  //  print_dbg("\r\n got channel 0 data: ");
  //  print_dbg_ulong(val);

  // get channel 1, setup channel 2
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800071c0:	ae 08       	st.h	r7[0x0],r8
800071c2:	fe 7c 24 00 	mov	r12,-56320
800071c6:	fe b0 da 12 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, cmd);
800071ca:	e0 6b 8b 10 	mov	r11,35600
800071ce:	fe 7c 24 00 	mov	r12,-56320
800071d2:	fe b0 da a0 	rcall	80002712 <spi_write>
  spi_read(ADC_SPI, &val);
800071d6:	0c 9b       	mov	r11,r6
800071d8:	fe 7c 24 00 	mov	r12,-56320
800071dc:	fe b0 da a9 	rcall	8000272e <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800071e0:	30 1b       	mov	r11,1
800071e2:	fe 7c 24 00 	mov	r12,-56320
800071e6:	fe b0 da 2a 	rcall	8000263a <spi_unselectChip>
  (*dst)[1] = (val >> 1) & 0xfff;
800071ea:	9a 98       	ld.uh	r8,sp[0x2]
800071ec:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
800071f0:	30 1b       	mov	r11,1

  // get channel 2, setup channel 3
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800071f2:	ae 18       	st.h	r7[0x2],r8
800071f4:	fe 7c 24 00 	mov	r12,-56320
800071f8:	fe b0 d9 f9 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, cmd);
800071fc:	e0 6b 8f 10 	mov	r11,36624
80007200:	fe 7c 24 00 	mov	r12,-56320
80007204:	fe b0 da 87 	rcall	80002712 <spi_write>
  spi_read(ADC_SPI, &val);
80007208:	0c 9b       	mov	r11,r6
8000720a:	fe 7c 24 00 	mov	r12,-56320
8000720e:	fe b0 da 90 	rcall	8000272e <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80007212:	30 1b       	mov	r11,1
80007214:	fe 7c 24 00 	mov	r12,-56320
80007218:	fe b0 da 11 	rcall	8000263a <spi_unselectChip>
  (*dst)[2] = (val >> 1) & 0xfff;
8000721c:	9a 98       	ld.uh	r8,sp[0x2]
8000721e:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
80007222:	30 1b       	mov	r11,1
  
  // get channel 3, dummy write
  cmd = ( AD7927_CMD_BASE ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80007224:	ae 28       	st.h	r7[0x4],r8
80007226:	fe 7c 24 00 	mov	r12,-56320
8000722a:	fe b0 d9 e0 	rcall	800025ea <spi_selectChip>
  spi_write(ADC_SPI, cmd);
8000722e:	e0 6b 83 10 	mov	r11,33552
80007232:	fe 7c 24 00 	mov	r12,-56320
80007236:	fe b0 da 6e 	rcall	80002712 <spi_write>
  spi_read(ADC_SPI, &val);
8000723a:	0c 9b       	mov	r11,r6
8000723c:	fe 7c 24 00 	mov	r12,-56320
80007240:	fe b0 da 77 	rcall	8000272e <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80007244:	30 1b       	mov	r11,1
80007246:	fe 7c 24 00 	mov	r12,-56320
8000724a:	fe b0 d9 f8 	rcall	8000263a <spi_unselectChip>
  (*dst)[3] = (val >> 1) & 0xfff;
8000724e:	9a 98       	ld.uh	r8,sp[0x2]
80007250:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80007254:	ae 38       	st.h	r7[0x6],r8
80007256:	e0 66 01 18 	mov	r6,280
8000725a:	8e 09       	ld.sh	r9,r7[0x0]
8000725c:	8c 08       	ld.sh	r8,r6[0x0]
8000725e:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
80007262:	c0 90       	breq	80007274 <adc_poll+0x114>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
80007264:	e0 68 01 20 	mov	r8,288
      post_event(&e);
80007268:	ac 09       	st.h	r6[0x0],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
8000726a:	91 19       	st.w	r8[0x4],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
8000726c:	30 c9       	mov	r9,12
8000726e:	10 9c       	mov	r12,r8
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80007270:	91 09       	st.w	r8[0x0],r9
80007272:	cc 3c       	rcall	800073f8 <post_event>
80007274:	8e 19       	ld.sh	r9,r7[0x2]
80007276:	8c 18       	ld.sh	r8,r6[0x2]
80007278:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
8000727c:	c0 b0       	breq	80007292 <adc_poll+0x132>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
8000727e:	e0 68 01 18 	mov	r8,280
80007282:	b0 19       	st.h	r8[0x2],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80007284:	e0 68 01 20 	mov	r8,288
80007288:	91 19       	st.w	r8[0x4],r9
8000728a:	30 d9       	mov	r9,13
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
8000728c:	10 9c       	mov	r12,r8
8000728e:	91 09       	st.w	r8[0x0],r9
80007290:	cb 4c       	rcall	800073f8 <post_event>
80007292:	8e 29       	ld.sh	r9,r7[0x4]
80007294:	8c 28       	ld.sh	r8,r6[0x4]
      adcOldVal[i] = adcVal[i];
80007296:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
8000729a:	c0 b0       	breq	800072b0 <adc_poll+0x150>
      e.eventData = (S16)(adcVal[i]);
8000729c:	e0 68 01 18 	mov	r8,280
      post_event(&e);
800072a0:	b0 29       	st.h	r8[0x4],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
800072a2:	e0 68 01 20 	mov	r8,288
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
800072a6:	91 19       	st.w	r8[0x4],r9
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
800072a8:	30 e9       	mov	r9,14
800072aa:	10 9c       	mov	r12,r8
800072ac:	91 09       	st.w	r8[0x0],r9
800072ae:	ca 5c       	rcall	800073f8 <post_event>
800072b0:	8e 39       	ld.sh	r9,r7[0x6]
      adcOldVal[i] = adcVal[i];
800072b2:	8c 38       	ld.sh	r8,r6[0x6]
800072b4:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
800072b8:	c0 b0       	breq	800072ce <adc_poll+0x16e>

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
800072ba:	e0 68 01 18 	mov	r8,280
800072be:	b0 39       	st.h	r8[0x6],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
800072c0:	e0 68 01 20 	mov	r8,288
    }
  }
}
800072c4:	91 19       	st.w	r8[0x4],r9
800072c6:	30 f9       	mov	r9,15
800072c8:	10 9c       	mov	r12,r8
800072ca:	91 09       	st.w	r8[0x0],r9
800072cc:	c9 6c       	rcall	800073f8 <post_event>
800072ce:	2f fd       	sub	sp,-4
800072d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800072d4 <init_app_timers>:
    // gpio_set_gpio_pin(AVR32_PIN_PB27);
    //}
}

//====== external
void init_app_timers(void) {
800072d4:	d4 01       	pushm	lr
  set_timer(&screenTimer, eScreenTimerTag, 15,   &screen_timer_callback, 1);
800072d6:	30 18       	mov	r8,1
800072d8:	fe c9 ff 20 	sub	r9,pc,-224
800072dc:	30 fa       	mov	r10,15
800072de:	30 0b       	mov	r11,0
800072e0:	e0 6c 01 48 	mov	r12,328
  set_timer(&encTimer,    eEncTimerTag,    5,   &enc_timer_callback,    1);
800072e4:	e0 a0 09 3e 	rcall	80008560 <set_timer>
800072e8:	30 18       	mov	r8,1
800072ea:	fe c9 ff 96 	sub	r9,pc,-106
800072ee:	10 9b       	mov	r11,r8
800072f0:	30 5a       	mov	r10,5
  set_timer(&adcTimer,    eAdcTimerTag,    5,   &adc_timer_callback,    1);
800072f2:	e0 6c 01 70 	mov	r12,368
800072f6:	e0 a0 09 35 	rcall	80008560 <set_timer>
800072fa:	30 18       	mov	r8,1
800072fc:	fe c9 ff b0 	sub	r9,pc,-80
  // test:
  set_timer(&heartbeatTimer, eHeartbeatTimerTag, 500, &heartbeat_callback, 1);
80007300:	30 5a       	mov	r10,5
80007302:	30 3b       	mov	r11,3
80007304:	e0 6c 01 34 	mov	r12,308
80007308:	e0 a0 09 2c 	rcall	80008560 <set_timer>
8000730c:	30 18       	mov	r8,1
8000730e:	fe c9 ff ea 	sub	r9,pc,-22
}
80007312:	e0 6a 01 f4 	mov	r10,500
80007316:	30 4b       	mov	r11,4
80007318:	e0 6c 01 5c 	mov	r12,348
8000731c:	e0 a0 09 22 	rcall	80008560 <set_timer>
80007320:	d8 02       	popm	pc
80007322:	d7 03       	nop

80007324 <heartbeat_callback>:
80007324:	d4 01       	pushm	lr
80007326:	32 0c       	mov	r12,32
80007328:	fe b0 d7 aa 	rcall	8000227c <gpio_tgl_gpio_pin>
8000732c:	31 7c       	mov	r12,23
8000732e:	fe b0 d7 a7 	rcall	8000227c <gpio_tgl_gpio_pin>
80007332:	31 8c       	mov	r12,24
80007334:	fe b0 d7 a4 	rcall	8000227c <gpio_tgl_gpio_pin>
  //  if(ledstatus != 0) {
  //  ledstatus = 0;
    gpio_tgl_gpio_pin(AVR32_PIN_PB00);
    gpio_tgl_gpio_pin(AVR32_PIN_PA23);
    gpio_tgl_gpio_pin(AVR32_PIN_PA24);
    gpio_tgl_gpio_pin(AVR32_PIN_PA05);
80007338:	30 5c       	mov	r12,5
8000733a:	fe b0 d7 a1 	rcall	8000227c <gpio_tgl_gpio_pin>
    gpio_tgl_gpio_pin(AVR32_PIN_PB02);
8000733e:	32 2c       	mov	r12,34
80007340:	fe b0 d7 9e 	rcall	8000227c <gpio_tgl_gpio_pin>
    gpio_tgl_gpio_pin(AVR32_PIN_PB27);
80007344:	33 bc       	mov	r12,59
80007346:	fe b0 d7 9b 	rcall	8000227c <gpio_tgl_gpio_pin>
    // gpio_set_gpio_pin(AVR32_PIN_PA24);
    // gpio_set_gpio_pin(AVR32_PIN_PA05);
    // gpio_set_gpio_pin(AVR32_PIN_PB02);
    // gpio_set_gpio_pin(AVR32_PIN_PB27);
    //}
}
8000734a:	d8 02       	popm	pc

8000734c <adc_timer_callback>:
8000734c:	d4 01       	pushm	lr
8000734e:	c0 9f       	rcall	80007160 <adc_poll>
*/

// adc polling callback
static void adc_timer_callback(int tag) {
  // print_dbg("\r\n polling adc from timer callback...");
  adc_poll();
80007350:	d8 02       	popm	pc
}
80007352:	d7 03       	nop

80007354 <enc_timer_callback>:
80007354:	eb cd 40 f8 	pushm	r3-r7,lr
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
80007358:	30 08       	mov	r8,0
8000735a:	e0 66 01 30 	mov	r6,304
8000735e:	e0 67 18 48 	mov	r7,6216
80007362:	ac 88       	st.b	r6[0x0],r8
80007364:	e0 65 01 84 	mov	r5,388
    val = enc[i].val;
80007368:	30 08       	mov	r8,0
8000736a:	30 34       	mov	r4,3
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
      e.eventType = enc[i].event;
      e.eventData = val;
      enc[i].val = 0;
8000736c:	10 93       	mov	r3,r8
8000736e:	f0 08 00 19 	add	r9,r8,r8<<0x1
// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80007372:	f2 ce ff ff 	sub	lr,r9,-1

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
80007376:	ee 0e 00 2b 	add	r11,r7,lr<<0x2
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
8000737a:	ee 0e 04 2a 	ld.sh	r10,r7[lr<<0x2]
8000737e:	96 1b       	ld.sh	r11,r11[0x2]
80007380:	f6 0c 11 00 	rsub	r12,r11,0
80007384:	f6 0a 19 00 	cp.h	r10,r11
80007388:	e0 89 00 04 	brgt	80007390 <enc_timer_callback+0x3c>
      e.eventType = enc[i].event;
8000738c:	18 3a       	cp.w	r10,r12
8000738e:	c0 c4       	brge	800073a6 <enc_timer_callback+0x52>
      e.eventData = val;
80007390:	ee 09 00 29 	add	r9,r7,r9<<0x2
      enc[i].val = 0;
80007394:	72 28       	ld.w	r8,r9[0x8]
80007396:	8b 1a       	st.w	r5[0x4],r10
      post_event(&e);
80007398:	8b 08       	st.w	r5[0x0],r8
8000739a:	ee 0e 0a 23 	st.h	r7[lr<<0x2],r3
8000739e:	e0 6c 01 84 	mov	r12,388
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
800073a2:	c2 bc       	rcall	800073f8 <post_event>
800073a4:	0d 88       	ld.ub	r8,r6[0x0]
800073a6:	2f f8       	sub	r8,-1
800073a8:	5c 58       	castu.b	r8
800073aa:	ac 88       	st.b	r6[0x0],r8
800073ac:	e8 08 18 00 	cp.b	r8,r4
      e.eventData = val;
      enc[i].val = 0;
      post_event(&e);
    }
  }
}
800073b0:	fe 98 ff df 	brls	8000736e <enc_timer_callback+0x1a>
800073b4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

800073b8 <screen_timer_callback>:
800073b8:	d4 01       	pushm	lr
800073ba:	e0 68 02 b4 	mov	r8,692
800073be:	11 88       	ld.ub	r8,r8[0x0]
800073c0:	58 08       	cp.w	r8,0
800073c2:	c0 70       	breq	800073d0 <screen_timer_callback+0x18>
  print_dbg(" \lcycles:"); print_dbg_ulong(cyclesNow - cycles);
  cycles = cyclesNow;
  */

  if(refresh) {
    e.eventType = kEventRefresh;
800073c4:	e0 68 01 84 	mov	r8,388
800073c8:	31 09       	mov	r9,16
    post_event(&e);
800073ca:	10 9c       	mov	r12,r8
800073cc:	91 09       	st.w	r8[0x0],r9
800073ce:	c1 5c       	rcall	800073f8 <post_event>
800073d0:	d8 02       	popm	pc
800073d2:	d7 03       	nop

800073d4 <init_events>:
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
800073d4:	e0 6a 01 8c 	mov	r10,396
800073d8:	30 08       	mov	r8,0
  getIdx = 0;
800073da:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
800073dc:	e0 6a 01 90 	mov	r10,400
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
  getIdx = 0;
800073e0:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
800073e2:	95 08       	st.w	r10[0x0],r8
800073e4:	e0 68 01 94 	mov	r8,404
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
800073e8:	f0 ca ff 00 	sub	r10,r8,-256

  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
800073ec:	91 09       	st.w	r8[0x0],r9
800073ee:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
  }
}
800073f0:	2f 88       	sub	r8,-8
800073f2:	14 38       	cp.w	r8,r10
800073f4:	cf c1       	brne	800073ec <init_events+0x18>
800073f6:	5e fc       	retal	r12

800073f8 <post_event>:
800073f8:	d4 01       	pushm	lr
800073fa:	e1 bb 00 00 	mfsr	r11,0x0
800073fe:	d3 23       	ssrf	0x12
    print_dbg_ulong(e->eventType); print_dbg(".");
  } 
  */

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
80007400:	e0 69 01 8c 	mov	r9,396
  INCR_EVENT_INDEX( putIdx );
80007404:	72 0a       	ld.w	r10,r9[0x0]
80007406:	f4 c8 ff ff 	sub	r8,r10,-1
8000740a:	93 08       	st.w	r9[0x0],r8
8000740c:	e0 48 00 20 	cp.w	r8,32
80007410:	f9 b8 00 00 	moveq	r8,0
80007414:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
80007418:	e0 6e 01 90 	mov	lr,400
8000741c:	7c 0e       	ld.w	lr,lr[0x0]
    sysEvents[ putIdx ].eventType = e->eventType;
8000741e:	10 3e       	cp.w	lr,r8
    sysEvents[ putIdx ].eventData = e->eventData;
80007420:	c1 00       	breq	80007440 <post_event+0x48>
80007422:	e0 69 01 94 	mov	r9,404
80007426:	f2 08 00 3a 	add	r10,r9,r8<<0x3
8000742a:	78 1e       	ld.w	lr,r12[0x4]

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
  if ( putIdx != getIdx  ) {
    sysEvents[ putIdx ].eventType = e->eventType;
8000742c:	95 1e       	st.w	r10[0x4],lr
8000742e:	78 0a       	ld.w	r10,r12[0x0]
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
  }
  
  if (fReenableInterrupts) {
80007430:	30 1c       	mov	r12,1
80007432:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
    Enable_interrupt_level( TIMER_INT_LEVEL );
80007436:	ed bb 00 12 	bld	r11,0x12
    sysEvents[ putIdx ].eventType = e->eventType;
    sysEvents[ putIdx ].eventData = e->eventData;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
8000743a:	c0 20       	breq	8000743e <post_event+0x46>
8000743c:	d5 23       	csrf	0x12
8000743e:	d8 02       	popm	pc
80007440:	93 0a       	st.w	r9[0x0],r10
80007442:	30 0c       	mov	r12,0
80007444:	cf 9b       	rjmp	80007436 <post_event+0x3e>
80007446:	d7 03       	nop

80007448 <get_next_event>:
80007448:	18 99       	mov	r9,r12
8000744a:	e1 bb 00 00 	mfsr	r11,0x0
// Returns non-zero if an event was available
bool get_next_event( event_t *e ) {
  bool status;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );
8000744e:	d3 23       	ssrf	0x12
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80007450:	e0 68 01 8c 	mov	r8,396
80007454:	e0 6a 01 90 	mov	r10,400
80007458:	70 0c       	ld.w	r12,r8[0x0]
8000745a:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
8000745c:	18 38       	cp.w	r8,r12
8000745e:	c1 80       	breq	8000748e <get_next_event+0x46>
80007460:	2f f8       	sub	r8,-1
80007462:	95 08       	st.w	r10[0x0],r8
80007464:	e0 48 00 20 	cp.w	r8,32
80007468:	f9 b8 00 00 	moveq	r8,0
    e->eventType = sysEvents[ getIdx ].eventType;
8000746c:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->eventData = sysEvents[ getIdx ].eventData;
80007470:	e0 6a 01 94 	mov	r10,404
  Disable_interrupt_level( TIMER_INT_LEVEL );
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
80007474:	f4 08 00 3c 	add	r12,r10,r8<<0x3
80007478:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
    e->eventData = sysEvents[ getIdx ].eventData;
8000747c:	78 1c       	ld.w	r12,r12[0x4]
    e->eventType  = 0xff;
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
8000747e:	93 08       	st.w	r9[0x0],r8
80007480:	93 1c       	st.w	r9[0x4],r12
80007482:	30 1c       	mov	r12,1
    Enable_interrupt_level( TIMER_INT_LEVEL );
80007484:	ed bb 00 12 	bld	r11,0x12
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
    e->eventData = 0;
80007488:	5e 0c       	reteq	r12
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
8000748a:	d5 23       	csrf	0x12
8000748c:	5e fc       	retal	r12
    e->eventData = 0;
8000748e:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80007490:	e0 68 00 ff 	mov	r8,255
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80007494:	93 1c       	st.w	r9[0x4],r12
80007496:	93 08       	st.w	r9[0x0],r8
80007498:	ed bb 00 12 	bld	r11,0x12
8000749c:	5e 0c       	reteq	r12
8000749e:	cf 6b       	rjmp	8000748a <get_next_event+0x42>

800074a0 <init_encoders>:

//------------------------------
//----- external functions

// initialize encoder positions
void init_encoders(void) {
800074a0:	eb cd 40 e0 	pushm	r5-r7,lr
  U8 i;
  // constant data
  enc[0].pin[0] = ENC0_S0_PIN;
800074a4:	32 28       	mov	r8,34
800074a6:	e0 67 18 48 	mov	r7,6216
  enc[0].pin[1] = ENC0_S1_PIN;
800074aa:	ae 88       	st.b	r7[0x0],r8
800074ac:	32 38       	mov	r8,35
  enc[0].event = kEventEncoder0;
800074ae:	ae 98       	st.b	r7[0x1],r8
800074b0:	30 88       	mov	r8,8
  enc[1].pin[0] = ENC1_S0_PIN;
800074b2:	8f 28       	st.w	r7[0x8],r8
800074b4:	32 48       	mov	r8,36
800074b6:	ef 68 00 0c 	st.b	r7[12],r8
  enc[1].pin[1] = ENC1_S1_PIN;
800074ba:	32 58       	mov	r8,37
800074bc:	ef 68 00 0d 	st.b	r7[13],r8
  enc[1].event = kEventEncoder1;
800074c0:	30 98       	mov	r8,9
  enc[2].pin[0] = ENC2_S0_PIN;
800074c2:	8f 58       	st.w	r7[0x14],r8
800074c4:	32 68       	mov	r8,38
800074c6:	ef 68 00 18 	st.b	r7[24],r8
  enc[2].pin[1] = ENC2_S1_PIN;
800074ca:	32 78       	mov	r8,39
800074cc:	ef 68 00 19 	st.b	r7[25],r8
  enc[2].event = kEventEncoder2;
800074d0:	30 a8       	mov	r8,10
  enc[3].pin[0] = ENC3_S0_PIN;
800074d2:	8f 88       	st.w	r7[0x20],r8
800074d4:	32 88       	mov	r8,40
800074d6:	ef 68 00 24 	st.b	r7[36],r8
  enc[3].pin[1] = ENC3_S1_PIN;
800074da:	32 98       	mov	r8,41
800074dc:	ef 68 00 25 	st.b	r7[37],r8
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800074e0:	30 b8       	mov	r8,11
  enc[2].pin[0] = ENC2_S0_PIN;
  enc[2].pin[1] = ENC2_S1_PIN;
  enc[2].event = kEventEncoder2;
  enc[3].pin[0] = ENC3_S0_PIN;
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
800074e2:	32 2c       	mov	r12,34
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800074e4:	8f b8       	st.w	r7[0x2c],r8
800074e6:	fe b0 d6 a6 	rcall	80002232 <gpio_get_pin_value>
800074ea:	18 96       	mov	r6,r12
800074ec:	0f 9c       	ld.ub	r12,r7[0x1]
800074ee:	fe b0 d6 a2 	rcall	80002232 <gpio_get_pin_value>
800074f2:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
800074f6:	30 f6       	mov	r6,15
    enc[i].thresh = 15;
800074f8:	ae ac       	st.b	r7[0x2],r12
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800074fa:	ae 36       	st.h	r7[0x6],r6
800074fc:	ef 3c 00 0c 	ld.ub	r12,r7[12]
80007500:	fe b0 d6 99 	rcall	80002232 <gpio_get_pin_value>
80007504:	18 95       	mov	r5,r12
80007506:	ef 3c 00 0d 	ld.ub	r12,r7[13]
8000750a:	fe b0 d6 94 	rcall	80002232 <gpio_get_pin_value>
8000750e:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80007512:	ef 56 00 12 	st.h	r7[18],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80007516:	ef 6c 00 0e 	st.b	r7[14],r12
8000751a:	ef 3c 00 18 	ld.ub	r12,r7[24]
8000751e:	fe b0 d6 8a 	rcall	80002232 <gpio_get_pin_value>
80007522:	18 95       	mov	r5,r12
80007524:	ef 3c 00 19 	ld.ub	r12,r7[25]
80007528:	fe b0 d6 85 	rcall	80002232 <gpio_get_pin_value>
8000752c:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80007530:	ef 56 00 1e 	st.h	r7[30],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80007534:	ef 6c 00 1a 	st.b	r7[26],r12
80007538:	ef 3c 00 24 	ld.ub	r12,r7[36]
8000753c:	fe b0 d6 7b 	rcall	80002232 <gpio_get_pin_value>
80007540:	18 96       	mov	r6,r12
80007542:	ef 3c 00 25 	ld.ub	r12,r7[37]
80007546:	fe b0 d6 76 	rcall	80002232 <gpio_get_pin_value>
8000754a:	32 88       	mov	r8,40
8000754c:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
    enc[i].thresh = 15;
  }

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;
80007550:	ef 58 00 2a 	st.h	r7[42],r8
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80007554:	ef 6c 00 26 	st.b	r7[38],r12

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;

}
80007558:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000755c <files_check_dsp>:
    
  }
}

// look for dsp dir, create if it doesn't exist
void files_check_dsp(void) {
8000755c:	d4 01       	pushm	lr
  nav_dir_root();
8000755e:	fe b0 f0 bb 	rcall	800056d4 <nav_dir_root>
  if (nav_filelist_findname("dsp", 0)) {
80007562:	30 0b       	mov	r11,0
80007564:	fe cc e8 6c 	sub	r12,pc,-6036
80007568:	fe b0 ef a2 	rcall	800054ac <nav_filelist_findname>
    print_dbg("\r\n found dsp dir? now at: ");
    print_dbg( name_buf);
    print_dbg( CRLF);
    //// print contents...
  } else {
    print_dbg("\r\n attempting to create dsp dir");
8000756c:	c0 a1       	brne	80007580 <files_check_dsp+0x24>
8000756e:	fe cc e7 c2 	sub	r12,pc,-6206
    nav_dir_make("dsp"); 
80007572:	fe b0 f2 49 	rcall	80005a04 <print_dbg>
80007576:	fe cc e8 7e 	sub	r12,pc,-6018
// look for dsp dir, create if it doesn't exist
void files_check_dsp(void) {
  nav_dir_root();
  if (nav_filelist_findname("dsp", 0)) {
    // ...
    nav_file_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
8000757a:	fe b0 f1 e5 	rcall	80005944 <nav_dir_make>
8000757e:	d8 02       	popm	pc
80007580:	30 19       	mov	r9,1
80007582:	31 eb       	mov	r11,30
80007584:	12 9a       	mov	r10,r9
    print_dbg("\r\n found dsp dir? now at: ");
80007586:	e0 6c 02 94 	mov	r12,660
8000758a:	fe b0 ee 75 	rcall	80005274 <nav_file_name>
    print_dbg( name_buf);
8000758e:	fe cc e8 02 	sub	r12,pc,-6142
    print_dbg( CRLF);
80007592:	fe b0 f2 39 	rcall	80005a04 <print_dbg>
80007596:	e0 6c 02 94 	mov	r12,660
8000759a:	fe b0 f2 35 	rcall	80005a04 <print_dbg>
8000759e:	fe cc e7 f6 	sub	r12,pc,-6154
800075a2:	fe b0 f2 31 	rcall	80005a04 <print_dbg>
800075a6:	d8 02       	popm	pc

800075a8 <files_check_scenes>:
800075a8:	d4 01       	pushm	lr
800075aa:	fe b0 f0 95 	rcall	800056d4 <nav_dir_root>
800075ae:	30 0b       	mov	r11,0
800075b0:	fe cc e7 e4 	sub	r12,pc,-6172
800075b4:	fe b0 ef 7c 	rcall	800054ac <nav_filelist_findname>
800075b8:	c0 a1       	brne	800075cc <files_check_scenes+0x24>
800075ba:	fe cc e7 c6 	sub	r12,pc,-6202
800075be:	fe b0 f2 23 	rcall	80005a04 <print_dbg>
800075c2:	fe cc e7 f6 	sub	r12,pc,-6154
// look for scenes dir, create if it doesn't exist
void files_check_scenes(void) {
  nav_dir_root();
  if (nav_filelist_findname("scenes", 0)) {
    // ...
    nav_file_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
800075c6:	fe b0 f1 bf 	rcall	80005944 <nav_dir_make>
800075ca:	d8 02       	popm	pc
800075cc:	30 19       	mov	r9,1
800075ce:	31 eb       	mov	r11,30
800075d0:	12 9a       	mov	r10,r9
    print_dbg("\r\n found scenes dir? now at: ");
800075d2:	e0 6c 02 94 	mov	r12,660
800075d6:	fe b0 ee 4f 	rcall	80005274 <nav_file_name>
    print_dbg( name_buf);
800075da:	fe cc e8 06 	sub	r12,pc,-6138
    print_dbg( CRLF);
800075de:	fe b0 f2 13 	rcall	80005a04 <print_dbg>
800075e2:	e0 6c 02 94 	mov	r12,660
800075e6:	fe b0 f2 0f 	rcall	80005a04 <print_dbg>
800075ea:	fe cc e8 42 	sub	r12,pc,-6078
800075ee:	fe b0 f2 0b 	rcall	80005a04 <print_dbg>
800075f2:	d8 02       	popm	pc

800075f4 <files_list>:
800075f4:	eb cd 40 e0 	pushm	r5-r7,lr
800075f8:	31 eb       	mov	r11,30
800075fa:	e0 6c 02 94 	mov	r12,660
800075fe:	fe b0 ef af 	rcall	8000555c <nav_dir_name>
80007602:	fe cc e7 ea 	sub	r12,pc,-6166
80007606:	fe b0 f1 ff 	rcall	80005a04 <print_dbg>
8000760a:	fe b0 ee 29 	rcall	8000525c <nav_drive_get>
8000760e:	2b fc       	sub	r12,-65
  // Get the volume name
  nav_dir_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH);
  // Display general informations (drive letter and current path)
  print_dbg( "\r\nVolume is ");
  print_dbg_char( 'A' + nav_drive_get());
  print_dbg( ":\r\nDir name is ");
80007610:	fe b0 f1 ce 	rcall	800059ac <print_dbg_char>
80007614:	fe cc e7 ec 	sub	r12,pc,-6164
  print_dbg( name_buf);
80007618:	fe b0 f1 f6 	rcall	80005a04 <print_dbg>
  print_dbg( CRLF);
8000761c:	e0 6c 02 94 	mov	r12,660
80007620:	fe b0 f1 f2 	rcall	80005a04 <print_dbg>
  // Try to sort items by folders
  if (!nav_filelist_first(FS_DIR)) {
80007624:	fe cc e8 7c 	sub	r12,pc,-6020
80007628:	fe b0 f1 ee 	rcall	80005a04 <print_dbg>
    // Sort items by files
    nav_filelist_first(FS_FILE);
  }
  // Display items informations
  print_dbg( "\tSize (Bytes)\tName\r\n");
8000762c:	30 0c       	mov	r12,0
8000762e:	fe b0 f0 d3 	rcall	800057d4 <nav_filelist_first>
  // reset filelist before to start the listing
  nav_filelist_reset();
80007632:	c4 70       	breq	800076c0 <files_list+0xcc>
  // While an item can be found
  while (nav_filelist_set(0, FS_FIND_NEXT)) {
    // Get and display current item informations
    print_dbg( (nav_file_isdir()) ? "Dir\t" : "   \t");
80007634:	fe cc e7 fc 	sub	r12,pc,-6148
  // Display items informations
  print_dbg( "\tSize (Bytes)\tName\r\n");
  // reset filelist before to start the listing
  nav_filelist_reset();
  // While an item can be found
  while (nav_filelist_set(0, FS_FIND_NEXT)) {
80007638:	fe b0 f1 e6 	rcall	80005a04 <print_dbg>
    // Get and display current item informations
    print_dbg( (nav_file_isdir()) ? "Dir\t" : "   \t");
8000763c:	fe b0 ef 4a 	rcall	800054d0 <nav_filelist_reset>
80007640:	fe c6 e7 e8 	sub	r6,pc,-6168
80007644:	fe c7 e7 f4 	sub	r7,pc,-6156
80007648:	c2 08       	rjmp	80007688 <files_list+0x94>
    print_dbg_ulong(nav_file_lgt());
8000764a:	fe b0 ee 11 	rcall	8000526c <nav_file_isdir>
8000764e:	ec 0c 17 10 	movne	r12,r6
    print_dbg( "\t\t");
80007652:	ee 0c 17 00 	moveq	r12,r7
80007656:	fe b0 f1 d7 	rcall	80005a04 <print_dbg>
    nav_file_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
8000765a:	fe b0 ee 05 	rcall	80005264 <nav_file_lgt>
8000765e:	fe b0 f1 af 	rcall	800059bc <print_dbg_ulong>
80007662:	fe cc e8 02 	sub	r12,pc,-6142
    print_dbg( name_buf);
80007666:	fe b0 f1 cf 	rcall	80005a04 <print_dbg>
    print_dbg( CRLF);
8000766a:	30 19       	mov	r9,1
8000766c:	31 eb       	mov	r11,30
8000766e:	12 9a       	mov	r10,r9
  // Display items informations
  print_dbg( "\tSize (Bytes)\tName\r\n");
  // reset filelist before to start the listing
  nav_filelist_reset();
  // While an item can be found
  while (nav_filelist_set(0, FS_FIND_NEXT)) {
80007670:	e0 6c 02 94 	mov	r12,660
80007674:	fe b0 ee 00 	rcall	80005274 <nav_file_name>
80007678:	e0 6c 02 94 	mov	r12,660
    print_dbg( name_buf);
    print_dbg( CRLF);

  }
  // Display the files number
  print_dbg_ulong( nav_filelist_nb(FS_FILE));
8000767c:	fe b0 f1 c4 	rcall	80005a04 <print_dbg>
80007680:	fe cc e8 d8 	sub	r12,pc,-5928
80007684:	fe b0 f1 c0 	rcall	80005a04 <print_dbg>
  print_dbg( "  Files\r\n");
80007688:	30 1b       	mov	r11,1
8000768a:	30 0c       	mov	r12,0
8000768c:	fe b0 ee 5a 	rcall	80005340 <nav_filelist_set>
  // Display the folders number
  print_dbg_ulong( nav_filelist_nb(FS_DIR));
80007690:	18 95       	mov	r5,r12
80007692:	cd c1       	brne	8000764a <files_list+0x56>
80007694:	30 1c       	mov	r12,1
80007696:	fe b0 f0 bd 	rcall	80005810 <nav_filelist_nb>
  print_dbg( "  Dir\r\n");
8000769a:	5c 7c       	castu.h	r12
8000769c:	fe b0 f1 90 	rcall	800059bc <print_dbg_ulong>
}
800076a0:	fe cc e8 3c 	sub	r12,pc,-6084
  print_dbg( name_buf);
  print_dbg( CRLF);
  // Try to sort items by folders
  if (!nav_filelist_first(FS_DIR)) {
    // Sort items by files
    nav_filelist_first(FS_FILE);
800076a4:	fe b0 f1 b0 	rcall	80005a04 <print_dbg>
800076a8:	0a 9c       	mov	r12,r5
800076aa:	fe b0 f0 b3 	rcall	80005810 <nav_filelist_nb>
800076ae:	5c 7c       	castu.h	r12
800076b0:	fe b0 f1 86 	rcall	800059bc <print_dbg_ulong>
800076b4:	fe cc e8 44 	sub	r12,pc,-6076
800076b8:	fe b0 f1 a6 	rcall	80005a04 <print_dbg>
800076bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800076c0:	30 1c       	mov	r12,1
800076c2:	fe b0 f0 89 	rcall	800057d4 <nav_filelist_first>
800076c6:	cb 7b       	rjmp	80007634 <files_list+0x40>

800076c8 <init_files>:
800076c8:	d4 01       	pushm	lr
800076ca:	fe b0 f0 1b 	rcall	80005700 <nav_reset>
800076ce:	fe b0 ef ff 	rcall	800056cc <nav_drive_nb>
800076d2:	20 1c       	sub	r12,1
800076d4:	5c 5c       	castu.b	r12
800076d6:	fe b0 ef d5 	rcall	80005680 <nav_drive_set>
800076da:	fe b0 ef bd 	rcall	80005654 <nav_partition_mount>
800076de:	e0 6c fa 00 	mov	r12,64000
800076e2:	cf 7d       	rcall	80007ad0 <alloc_mem>
800076e4:	c1 30       	breq	8000770a <init_files+0x42>
800076e6:	e0 68 18 7c 	mov	r8,6268
800076ea:	91 0c       	st.w	r8[0x0],r12
800076ec:	e0 6c 07 80 	mov	r12,1920
800076f0:	cf 0d       	rcall	80007ad0 <alloc_mem>
800076f2:	c0 70       	breq	80007700 <init_files+0x38>
800076f4:	e0 68 18 78 	mov	r8,6264
800076f8:	91 0c       	st.w	r8[0x0],r12
800076fa:	c5 7f       	rcall	800075a8 <files_check_scenes>
800076fc:	c3 0f       	rcall	8000755c <files_check_dsp>
800076fe:	d8 02       	popm	pc
80007700:	fe cc e8 64 	sub	r12,pc,-6044
  // allocate SDRAM for dsp list
  tmp = (heap_t)alloc_mem(MAX_NUM_DSP * MAX_FILE_PATH_LENGTH);
  if(tmp != ALLOC_FAIL) {
    dsp_name_buf = (char*)tmp;
  } else {
    print_dbg("\r\n allocation error in files init");
80007704:	fe b0 f1 80 	rcall	80005a04 <print_dbg>
80007708:	cf 9b       	rjmp	800076fa <init_files+0x32>
8000770a:	fe cc e8 92 	sub	r12,pc,-5998
  // allocate SDRAM for blackfin boot image
  tmp = alloc_mem(MAX_BFIN_LDR_BYTES);
  if(tmp != ALLOC_FAIL) {
    load_buf = tmp;
  } else {
    print_dbg("\r\nallocation error in files init");
8000770e:	fe b0 f1 7b 	rcall	80005a04 <print_dbg>
80007712:	ce db       	rjmp	800076ec <init_files+0x24>

80007714 <init_clocks>:
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
}


// initialize clocks
void init_clocks(void) {
80007714:	d4 01       	pushm	lr
  /// from 251e...
  // Switch to OSC0 to speed up  booting
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pm_switch_to_osc0( &AVR32_PM, FOSC0, OSC0_STARTUP );
80007716:	30 3a       	mov	r10,3
80007718:	e0 6b 1b 00 	mov	r11,6912
8000771c:	ea 1b 00 b7 	orh	r11,0xb7
80007720:	fe 7c 0c 00 	mov	r12,-62464
80007724:	fe b0 d6 f0 	rcall	80002504 <pm_switch_to_osc0>

  // Set PLL0 (fed from OSC0 = 12 MHz) to 132 MHz
  pm_pll_setup( &AVR32_PM,
80007728:	31 0e       	mov	lr,16
8000772a:	30 08       	mov	r8,0
8000772c:	1a de       	st.w	--sp,lr
8000772e:	10 9b       	mov	r11,r8
80007730:	30 19       	mov	r9,1
80007732:	30 aa       	mov	r10,10
80007734:	fe 7c 0c 00 	mov	r12,-62464
80007738:	fe b0 d6 b8 	rcall	800024a8 <pm_pll_setup>
		0,   // osc.
		16 ); // lockcount.

  // Set PLL operating range and divider (fpll = fvco/2)
  // -> PLL0 output = 66 MHz
  pm_pll_set_option( &AVR32_PM,
8000773c:	30 08       	mov	r8,0
8000773e:	30 19       	mov	r9,1
80007740:	10 9b       	mov	r11,r8
80007742:	12 9a       	mov	r10,r9
80007744:	fe 7c 0c 00 	mov	r12,-62464
80007748:	fe b0 d6 c1 	rcall	800024ca <pm_pll_set_option>
		     1,  // pll_freq.
		     1,  // pll_div2.
		     0 ); // pll_wbwdisable.

  // start PLL0 and wait for the lock
  pm_pll_enable( &AVR32_PM, 0 );
8000774c:	30 0b       	mov	r11,0
8000774e:	fe 7c 0c 00 	mov	r12,-62464
80007752:	fe b0 d6 c8 	rcall	800024e2 <pm_pll_enable>
  pm_wait_for_pll0_locked( &AVR32_PM );
80007756:	fe 7c 0c 00 	mov	r12,-62464
8000775a:	fe b0 d6 cb 	rcall	800024f0 <pm_wait_for_pll0_locked>

  // By default, all peripheral clocks to run at master clock rate

  // Set one waitstate for the flash.  Necessary for > 33MHz CPU freq.
  flashc_set_wait_state( 1 );
8000775e:	30 1c       	mov	r12,1
80007760:	fe b0 d5 58 	rcall	80002210 <flashc_set_wait_state>

  // Switch to PLL0 as the master clock
  pm_switch_to_clock( &AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0) ;
80007764:	30 2b       	mov	r11,2
80007766:	fe 7c 0c 00 	mov	r12,-62464
8000776a:	fe b0 d6 c8 	rcall	800024fa <pm_switch_to_clock>
8000776e:	2f fd       	sub	sp,-4
#endif

  // intitialize millisecond delay engine
  delay_init(sysclk_get_cpu_hz());
  */
}
80007770:	d8 02       	popm	pc
80007772:	d7 03       	nop

80007774 <init_bfin_resources>:
80007774:	eb cd 40 80 	pushm	r7,lr
80007778:	20 4d       	sub	sp,16
8000777a:	fe c8 e4 9e 	sub	r8,pc,-7010
8000777e:	f0 ea 00 08 	ld.d	r10,r8[8]
80007782:	fa eb 00 08 	st.d	sp[8],r10
80007786:	f0 e8 00 00 	ld.d	r8,r8[0]
8000778a:	1a 97       	mov	r7,sp
8000778c:	fa e9 00 00 	st.d	sp[0],r8
    .spi_mode     = 1,
    .modfdis      = 1
  };

  // assign pins to SPI.
  gpio_enable_module(BFIN_SPI_GPIO_MAP,
80007790:	30 5b       	mov	r11,5
80007792:	fe cc e4 6e 	sub	r12,pc,-7058
		     sizeof(BFIN_SPI_GPIO_MAP) / sizeof(BFIN_SPI_GPIO_MAP[0]));

  // intialize as master
  spi_initMaster(BFIN_SPI, &spiOptions);
80007796:	fe b0 d5 80 	rcall	80002296 <gpio_enable_module>
8000779a:	1a 9b       	mov	r11,sp
8000779c:	fe 7c 24 00 	mov	r12,-56320

  // set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(BFIN_SPI, 0, 0, 0);
800077a0:	fe b0 d6 f3 	rcall	80002586 <spi_initMaster>
800077a4:	30 09       	mov	r9,0
800077a6:	fe 7c 24 00 	mov	r12,-56320
800077aa:	12 9a       	mov	r10,r9
800077ac:	12 9b       	mov	r11,r9

  // enable SPI.
  spi_enable(BFIN_SPI);
800077ae:	fe b0 d7 09 	rcall	800025c0 <spi_selectionMode>
800077b2:	fe 7c 24 00 	mov	r12,-56320

  // intialize the chip register
  spi_setupChipReg(BFIN_SPI, &spiOptions, FPBA_HZ);
800077b6:	fe b0 d7 ab 	rcall	8000270c <spi_enable>
800077ba:	1a 9b       	mov	r11,sp
800077bc:	e0 6a 14 80 	mov	r10,5248
800077c0:	ea 1a 03 ef 	orh	r10,0x3ef
800077c4:	fe 7c 24 00 	mov	r12,-56320
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
800077c8:	fe b0 d7 4c 	rcall	80002660 <spi_setupChipReg>
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
  spiOptions.spck_delay = 40;	// delay between CS and transfer
  spiOptions.trans_delay = 10;	// delay between transfers
  spiOptions.stay_act = 1;
800077cc:	30 18       	mov	r8,1
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
800077ce:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
800077d2:	ba 88       	st.b	sp[0x0],r8
800077d4:	e0 68 96 80 	mov	r8,38528
800077d8:	ea 18 00 98 	orh	r8,0x98
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
800077dc:	50 18       	stdsp	sp[0x4],r8
800077de:	31 08       	mov	r8,16
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
800077e0:	fb 68 00 08 	st.b	sp[8],r8
800077e4:	30 28       	mov	r8,2
  spiOptions.spck_delay = 40;	// delay between CS and transfer
800077e6:	fb 68 00 0c 	st.b	sp[12],r8
800077ea:	32 88       	mov	r8,40
  spiOptions.trans_delay = 10;	// delay between transfers
800077ec:	fb 68 00 09 	st.b	sp[9],r8
800077f0:	30 a8       	mov	r8,10
  spiOptions.stay_act = 1;
  spiOptions.modfdis = 0;
800077f2:	fb 68 00 0a 	st.b	sp[10],r8
800077f6:	30 08       	mov	r8,0
800077f8:	1a 9b       	mov	r11,sp
  spi_setupChipReg( BFIN_SPI, &spiOptions, FPBA_HZ );
800077fa:	fb 68 00 0d 	st.b	sp[13],r8
800077fe:	e0 6a 14 80 	mov	r10,5248
80007802:	ea 1a 03 ef 	orh	r10,0x3ef
80007806:	fe 7c 24 00 	mov	r12,-56320
  
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
8000780a:	fe b0 d7 2b 	rcall	80002660 <spi_setupChipReg>
8000780e:	30 6c       	mov	r12,6
}
80007810:	fe b0 d5 07 	rcall	8000221e <gpio_enable_pin_pull_up>
80007814:	2f cd       	sub	sp,-16
80007816:	e3 cd 80 80 	ldm	sp++,r7,pc
8000781a:	d7 03       	nop

8000781c <init_gpio>:
8000781c:	d4 01       	pushm	lr
8000781e:	32 2c       	mov	r12,34
80007820:	fe b0 d4 ff 	rcall	8000221e <gpio_enable_pin_pull_up>
80007824:	32 3c       	mov	r12,35
80007826:	fe b0 d4 fc 	rcall	8000221e <gpio_enable_pin_pull_up>
8000782a:	32 4c       	mov	r12,36
8000782c:	fe b0 d4 f9 	rcall	8000221e <gpio_enable_pin_pull_up>
80007830:	32 5c       	mov	r12,37
80007832:	fe b0 d4 f6 	rcall	8000221e <gpio_enable_pin_pull_up>
80007836:	32 6c       	mov	r12,38
void init_gpio(void) {
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80007838:	fe b0 d4 f3 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
8000783c:	32 7c       	mov	r12,39
8000783e:	fe b0 d4 f0 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
80007842:	32 8c       	mov	r12,40
80007844:	fe b0 d4 ed 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80007848:	32 9c       	mov	r12,41
8000784a:	fe b0 d4 ea 	rcall	8000221e <gpio_enable_pin_pull_up>

  gpio_enable_pin_pull_up(SW0_PIN);
8000784e:	31 9c       	mov	r12,25
80007850:	fe b0 d4 e7 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW1_PIN);
80007854:	31 ac       	mov	r12,26
80007856:	fe b0 d4 e4 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
8000785a:	31 bc       	mov	r12,27
8000785c:	fe b0 d4 e1 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW3_PIN);
80007860:	31 cc       	mov	r12,28
80007862:	fe b0 d4 de 	rcall	8000221e <gpio_enable_pin_pull_up>
}
80007866:	d8 02       	popm	pc

80007868 <init_local_pdca>:
80007868:	eb cd 40 b0 	pushm	r4-r5,r7,lr
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
}

// init PDCA (Peripheral DMA Controller A) resources for the SPI transfer and start a dummy transfer
void init_local_pdca(void)
{
8000786c:	20 cd       	sub	sp,48
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
8000786e:	fe ca e5 76 	sub	r10,pc,-6794
80007872:	f4 e4 00 10 	ld.d	r4,r10[16]
80007876:	fa c7 ff e8 	sub	r7,sp,-24
8000787a:	fe c9 e5 4a 	sub	r9,pc,-6838
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
8000787e:	ee e5 00 10 	st.d	r7[16],r4
80007882:	f2 e4 00 10 	ld.d	r4,r9[16]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80007886:	fa e5 00 10 	st.d	sp[16],r4
8000788a:	f4 e4 00 00 	ld.d	r4,r10[0]
8000788e:	ee e5 00 00 	st.d	r7[0],r4
80007892:	f4 e4 00 08 	ld.d	r4,r10[8]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80007896:	ee e5 00 08 	st.d	r7[8],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
8000789a:	f2 e4 00 00 	ld.d	r4,r9[0]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
8000789e:	1a 9b       	mov	r11,sp

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800078a0:	fa e5 00 00 	st.d	sp[0],r4
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800078a4:	30 1c       	mov	r12,1
800078a6:	f2 e4 00 08 	ld.d	r4,r9[8]

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800078aa:	fa e5 00 08 	st.d	sp[8],r4

  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
800078ae:	fe b0 d5 b3 	rcall	80002414 <pdca_init_channel>
800078b2:	0e 9b       	mov	r11,r7
800078b4:	30 0c       	mov	r12,0
}
800078b6:	fe b0 d5 af 	rcall	80002414 <pdca_init_channel>
800078ba:	2f 4d       	sub	sp,-48
800078bc:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc

800078c0 <init_sd_mmc_resources>:
800078c0:	eb cd 40 80 	pushm	r7,lr
800078c4:	20 4d       	sub	sp,16
800078c6:	fe c8 e6 02 	sub	r8,pc,-6654
    .bits = SD_MMC_SPI_BITS, // Defined in conf_sd_mmc_spi.h.
    .spck_delay = 0, 
    .trans_delay = 0, 
    .stay_act = 1, 
    .spi_mode = 0,
    .modfdis = 1 };
800078ca:	f0 ea 00 08 	ld.d	r10,r8[8]
800078ce:	fa eb 00 08 	st.d	sp[8],r10
800078d2:	f0 e8 00 00 	ld.d	r8,r8[0]
800078d6:	1a 97       	mov	r7,sp
800078d8:	fa e9 00 00 	st.d	sp[0],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP, sizeof(SD_MMC_SPI_GPIO_MAP)
800078dc:	30 4b       	mov	r11,4
800078de:	fe cc e5 92 	sub	r12,pc,-6766
		     / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
800078e2:	fe b0 d4 da 	rcall	80002296 <gpio_enable_module>
800078e6:	1a 9b       	mov	r11,sp
800078e8:	fe 7c 28 00 	mov	r12,-55296

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
800078ec:	fe b0 d6 4d 	rcall	80002586 <spi_initMaster>
800078f0:	30 09       	mov	r9,0
800078f2:	fe 7c 28 00 	mov	r12,-55296
800078f6:	12 9a       	mov	r10,r9
800078f8:	12 9b       	mov	r11,r9

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
800078fa:	fe b0 d6 63 	rcall	800025c0 <spi_selectionMode>
800078fe:	fe 7c 28 00 	mov	r12,-55296

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
80007902:	fe b0 d7 05 	rcall	8000270c <spi_enable>
80007906:	ee e8 00 08 	ld.d	r8,r7[8]
8000790a:	20 4d       	sub	sp,16
8000790c:	fa e9 00 08 	st.d	sp[8],r8
80007910:	ee e8 00 00 	ld.d	r8,r7[0]
80007914:	e0 6c 14 80 	mov	r12,5248
80007918:	ea 1c 03 ef 	orh	r12,0x3ef
8000791c:	fa e9 00 00 	st.d	sp[0],r8
80007920:	fe b0 f8 96 	rcall	80006a4c <sd_mmc_spi_init>
}
80007924:	2f cd       	sub	sp,-16
80007926:	2f cd       	sub	sp,-16
80007928:	e3 cd 80 80 	ldm	sp++,r7,pc

8000792c <init_tc>:
8000792c:	eb cd 40 80 	pushm	r7,lr
80007930:	fe cb e6 40 	sub	r11,pc,-6592
80007934:	18 97       	mov	r7,r12
80007936:	fe b0 d7 0d 	rcall	80002750 <tc_init_waveform>
8000793a:	e0 6a 02 03 	mov	r10,515
8000793e:	30 0b       	mov	r11,0
80007940:	0e 9c       	mov	r12,r7
80007942:	fe b0 d7 68 	rcall	80002812 <tc_write_rc>
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000

  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80007946:	30 0b       	mov	r11,0
80007948:	fe ca e6 5c 	sub	r10,pc,-6564
8000794c:	0e 9c       	mov	r12,r7
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
8000794e:	fe b0 d7 7e 	rcall	8000284a <tc_configure_interrupts>
80007952:	0e 9c       	mov	r12,r7
80007954:	30 0b       	mov	r11,0

}
80007956:	fe b0 d7 4c 	rcall	800027ee <tc_start>
8000795a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000795e:	d7 03       	nop

80007960 <init_oled_usart>:
80007960:	d4 01       	pushm	lr
80007962:	30 4b       	mov	r11,4
80007964:	fe cc e6 54 	sub	r12,pc,-6572
80007968:	fe b0 d4 97 	rcall	80002296 <gpio_enable_module>
8000796c:	e0 6a 1b 00 	mov	r10,6912
80007970:	ea 1a 00 b7 	orh	r10,0xb7

  // Assign GPIO to SPI.
  gpio_enable_module(USART_SPI_GPIO_MAP,
		     sizeof(USART_SPI_GPIO_MAP) / sizeof(USART_SPI_GPIO_MAP[0]));
  // Initialize USART in SPI mode from OSC0
  usart_init_spi_master(OLED_USART_SPI, &USART_SPI_OPTIONS, FOSC0);
80007974:	fe cb e6 a0 	sub	r11,pc,-6496
80007978:	fe 7c 1c 00 	mov	r12,-58368
  delay_ms(10);

}
8000797c:	fe b0 d8 5c 	rcall	80002a34 <usart_init_spi_master>
80007980:	d8 02       	popm	pc
80007982:	d7 03       	nop

80007984 <init_dbg_usart>:
80007984:	d4 01       	pushm	lr
80007986:	30 2b       	mov	r11,2
80007988:	fe cc e6 40 	sub	r12,pc,-6592
8000798c:	fe b0 d4 85 	rcall	80002296 <gpio_enable_module>
  // Set up GPIO for DBG_USART
  gpio_enable_module(DBG_USART_GPIO_MAP,
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(DBG_USART, &DBG_USART_OPTIONS, FPBA_HZ);
80007990:	e0 6a 14 80 	mov	r10,5248
80007994:	ea 1a 03 ef 	orh	r10,0x3ef
80007998:	fe cb e6 80 	sub	r11,pc,-6528
8000799c:	fe 7c 18 00 	mov	r12,-59392
}
800079a0:	fe b0 d8 b2 	rcall	80002b04 <usart_init_rs232>
800079a4:	d8 02       	popm	pc
800079a6:	d7 03       	nop

800079a8 <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
800079a8:	d4 01       	pushm	lr
  // register IRQ for PDCA transfer
  INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1); 
  */

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
800079aa:	30 0a       	mov	r10,0
800079ac:	e0 6b 01 c0 	mov	r11,448
800079b0:	fe cc ff f4 	sub	r12,pc,-12
800079b4:	fe b0 d4 b4 	rcall	8000231c <INTC_register_interrupt>
}
800079b8:	d8 02       	popm	pc
800079ba:	d7 03       	nop

800079bc <irq_tc>:
800079bc:	eb cd 40 c0 	pushm	r6-r7,lr

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  //event_t e;
  tcTicks++;
800079c0:	e0 68 02 b8 	mov	r8,696
800079c4:	30 1a       	mov	r10,1
800079c6:	f0 e6 00 00 	ld.d	r6,r8[0]
800079ca:	30 0b       	mov	r11,0
800079cc:	ec 0a 00 0a 	add	r10,r6,r10
800079d0:	ee 0b 00 4b 	adc	r11,r7,r11
800079d4:	f0 eb 00 00 	st.d	r8[0],r10


  process_timers();
800079d8:	e0 a0 04 fe 	rcall	800083d4 <process_timers>
    gpio_tgl_gpio_pin(AVR32_PIN_PA24);
  }
  */
  
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
800079dc:	30 0b       	mov	r11,0
800079de:	fe 7c 38 00 	mov	r12,-51200
800079e2:	fe b0 d7 0f 	rcall	80002800 <tc_read_sr>

}
800079e6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800079ea:	d6 03       	rete

800079ec <main>:
  } // if event
}


////main function
int main (void) {
800079ec:	eb cd 40 80 	pushm	r7,lr
  volatile avr32_tc_t *tc = APP_TC;
  
  // switch to osc0 for main clock
  //  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP); 
  // initialize clocks:
  init_clocks();
800079f0:	c9 2e       	rcall	80007714 <init_clocks>
800079f2:	fe b0 d4 d5 	rcall	8000239c <INTC_init_interrupts>
  
  // initialize Interrupt Controllvoider
  INTC_init_interrupts();
800079f6:	d3 03       	ssrf	0x10

  // disable interrupts
  Disable_global_interrupt();
800079f8:	cc 6f       	rcall	80007984 <init_dbg_usart>

  // initialize RS232 debug uart
  init_dbg_usart();
800079fa:	cb 3f       	rcall	80007960 <init_oled_usart>
800079fc:	c6 2f       	rcall	800078c0 <init_sd_mmc_resources>

  // initialize oled uart in SPI mode
  init_oled_usart();
800079fe:	c3 5f       	rcall	80007868 <init_local_pdca>
80007a00:	cb ae       	rcall	80007774 <init_bfin_resources>

  // initialize SD/MMC driver resources: GPIO, SPI and SD/MMC.
  init_sd_mmc_resources();
80007a02:	fe 7c 38 00 	mov	r12,-51200

  // initialize PDCA controller
  init_local_pdca();
80007a06:	c9 3f       	rcall	8000792c <init_tc>
80007a08:	c0 af       	rcall	8000781c <init_gpio>

  // initialize blackfin resources
  init_bfin_resources();
80007a0a:	cc ff       	rcall	800079a8 <register_interrupts>
80007a0c:	e0 a0 02 4a 	rcall	80007ea0 <init_oled>

  // initialize application timer
  init_tc(tc);
80007a10:	fe b0 fc e2 	rcall	800073d4 <init_events>
80007a14:	fe b0 fd 46 	rcall	800074a0 <init_encoders>

  // initialize other GPIO
  init_gpio();
80007a18:	e0 6c 14 80 	mov	r12,5248

  // register interrupts
  register_interrupts();
80007a1c:	ea 1c 03 ef 	orh	r12,0x3ef

  // initialize the OLED screen
  init_oled();
80007a20:	fe b0 d2 f2 	rcall	80002004 <sdramc_init>
  
  // intialize the event queue
  init_events();
80007a24:	c4 2c       	rcall	80007aa8 <init_mem>
  
  // intialize encoders
  init_encoders();
80007a26:	d5 03       	csrf	0x10
80007a28:	fe cc e6 d4 	sub	r12,pc,-6444

  // initialize sdram
  sdramc_init(FMCK_HZ);
80007a2c:	fe b0 ef ec 	rcall	80005a04 <print_dbg>
80007a30:	30 0b       	mov	r11,0
80007a32:	30 29       	mov	r9,2
80007a34:	fe ca e6 d4 	sub	r10,pc,-6444
  //memory managaer
  init_mem();
80007a38:	16 9c       	mov	r12,r11

  // Enable all interrupts.
  Enable_global_interrupt();
80007a3a:	c7 7c       	rcall	80007b28 <screen_line>

  print_dbg("\r\nALEPH\r\n ");
80007a3c:	30 18       	mov	r8,1
80007a3e:	e0 67 02 b4 	mov	r7,692

#ifndef SKIPSD
  // Wait for a card to be inserted
  //  print_dbg("\r\nwaiting for SD card... ");

  screen_line(0, 0, "waiting for SD card...", 2); refresh=1;
80007a42:	ae 88       	st.b	r7[0x0],r8
80007a44:	fe b0 f9 68 	rcall	80006d14 <sd_mmc_spi_mem_check>
80007a48:	cf e0       	breq	80007a44 <main+0x58>
80007a4a:	30 0b       	mov	r11,0
80007a4c:	30 29       	mov	r9,2
80007a4e:	fe ca e6 d6 	sub	r10,pc,-6442
80007a52:	16 9c       	mov	r12,r11
  while (!sd_mmc_spi_mem_check()) {
80007a54:	c6 ac       	rcall	80007b28 <screen_line>
80007a56:	30 18       	mov	r8,1
80007a58:	ae 88       	st.b	r7[0x0],r8
    waitForCard++;
  }
  screen_line(0, 0, "card detected.", 2); refresh=1;
80007a5a:	c3 7e       	rcall	800076c8 <init_files>
80007a5c:	fe b0 fd cc 	rcall	800075f4 <files_list>
80007a60:	fe b0 fb 4e 	rcall	800070fc <init_adc>
80007a64:	fe b0 fc 38 	rcall	800072d4 <init_app_timers>
80007a68:	fe cc e6 e0 	sub	r12,pc,-6432

  // set up file navigation using available drives
  init_files();
80007a6c:	fe b0 ef cc 	rcall	80005a04 <print_dbg>

  // list files to USART
  files_list();
80007a70:	e0 67 02 c0 	mov	r7,704

#endif 

  // send ADC config
  init_adc();
80007a74:	e0 6c 02 c0 	mov	r12,704
  init_app_timers();
80007a78:	fe b0 fc e8 	rcall	80007448 <get_next_event>

  print_dbg("starting event loop.\n\r");
80007a7c:	cf c0       	breq	80007a74 <main+0x88>
80007a7e:	fe cc e6 de 	sub	r12,pc,-6434
  //static U64 cycles = 0;
  //static U64 cyclesNow = 0;

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {
80007a82:	6e 08       	ld.w	r8,r7[0x0]
80007a84:	58 08       	cp.w	r8,0
80007a86:	c0 71       	brne	80007a94 <main+0xa8>
80007a88:	fe b0 ef be 	rcall	80005a04 <print_dbg>

    switch(e.eventType) {
80007a8c:	32 0c       	mov	r12,32
80007a8e:	fe b0 d3 dd 	rcall	80002248 <gpio_set_gpio_pin>
        
    case kEventSwitchDown0:
      //      if (check_init()) { return; }
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
80007a92:	cf 1b       	rjmp	80007a74 <main+0x88>
80007a94:	58 18       	cp.w	r8,1
      gpio_set_gpio_pin(AVR32_PIN_PB00);
80007a96:	ce f1       	brne	80007a74 <main+0x88>
80007a98:	fe cc e6 e8 	sub	r12,pc,-6424
80007a9c:	fe b0 ef b4 	rcall	80005a04 <print_dbg>

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {

    switch(e.eventType) {
80007aa0:	32 0c       	mov	r12,32
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
      gpio_set_gpio_pin(AVR32_PIN_PB00);
      break;
    case kEventSwitchUp0:
      print_dbg("\r\n switch up");
80007aa2:	fe b0 d3 e0 	rcall	80002262 <gpio_clr_gpio_pin>
80007aa6:	ce 7b       	rjmp	80007a74 <main+0x88>

80007aa8 <init_mem>:
static void sdram_test(void);

// setup heap
void init_mem(void) {

  heapSize = SDRAM_SIZE;
80007aa8:	fc 19 02 00 	movh	r9,0x200
80007aac:	e0 68 02 d0 	mov	r8,720
  pHeapStart = SDRAM;
80007ab0:	91 09       	st.w	r8[0x0],r9
80007ab2:	fc 19 d0 00 	movh	r9,0xd000
80007ab6:	e0 68 02 c8 	mov	r8,712
  pHeapEnd = pHeapStart + heapSize;
80007aba:	91 09       	st.w	r8[0x0],r9
80007abc:	fc 19 d2 00 	movh	r9,0xd200
  heapOffset = 0;
80007ac0:	e0 68 02 d4 	mov	r8,724
80007ac4:	91 09       	st.w	r8[0x0],r9

}
80007ac6:	30 09       	mov	r9,0
80007ac8:	e0 68 02 cc 	mov	r8,716
80007acc:	91 09       	st.w	r8[0x0],r9
80007ace:	5e fc       	retal	r12

80007ad0 <alloc_mem>:
80007ad0:	e0 68 02 cc 	mov	r8,716
80007ad4:	70 09       	ld.w	r9,r8[0x0]
80007ad6:	f8 09 00 09 	add	r9,r12,r9

// allocate and return pointer
heap_t alloc_mem(u32 bytes) {
  u32 tmp = heapOffset + bytes;
  u8 mtmp = tmp % 4;
80007ada:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
  heap_t ret;
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
80007ade:	f7 b9 01 fc 	subne	r9,-4
80007ae2:	f3 da e1 19 	subne	r9,r9,r10
  }
  if (tmp < heapSize) {
80007ae6:	e0 6a 02 d0 	mov	r10,720
80007aea:	74 0a       	ld.w	r10,r10[0x0]
    ret = pHeapStart;
    heapOffset = tmp;
80007aec:	14 39       	cp.w	r9,r10
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
  }
  if (tmp < heapSize) {
    ret = pHeapStart;
80007aee:	c0 62       	brcc	80007afa <alloc_mem+0x2a>
80007af0:	91 09       	st.w	r8[0x0],r9
    heapOffset = tmp;
  } else {
    ret = (heap_t)ALLOC_FAIL;
  }
  return ret;
}
80007af2:	e0 68 02 c8 	mov	r8,712
  heap_t ret;
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
  }
  if (tmp < heapSize) {
80007af6:	70 0c       	ld.w	r12,r8[0x0]
80007af8:	5e fc       	retal	r12
80007afa:	5e fd       	retal	0

80007afc <write_command>:
  usart_putchar(OLED_USART_SPI, c);
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
80007afc:	eb cd 40 80 	pushm	r7,lr
80007b00:	18 97       	mov	r7,r12
  usart_spi_selectChip(OLED_USART_SPI);
80007b02:	fe 7c 1c 00 	mov	r12,-58368
80007b06:	fe b0 d7 60 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007b0a:	33 bc       	mov	r12,59
80007b0c:	fe b0 d3 ab 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007b10:	0e 9b       	mov	r11,r7
80007b12:	fe 7c 1c 00 	mov	r12,-58368
80007b16:	fe b0 d7 6b 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007b1a:	fe 7c 1c 00 	mov	r12,-58368
80007b1e:	fe b0 d7 58 	rcall	800029ce <usart_spi_unselectChip>
}
80007b22:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b26:	d7 03       	nop

80007b28 <screen_line>:
80007b28:	d4 31       	pushm	r0-r7,lr
80007b2a:	20 bd       	sub	sp,44
80007b2c:	50 1c       	stdsp	sp[0x4],r12
80007b2e:	50 3a       	stdsp	sp[0xc],r10
80007b30:	a1 79       	lsl	r9,0x1
80007b32:	5c 59       	castu.b	r9
80007b34:	f9 d9 c0 04 	bfextu	r12,r9,0x0,0x4
}

// draw a line and blank to end
U8 screen_line(U16 x, U16 y, char *str, U8 hl) {
  // FIXME
  hl = ( (hl << 1) & 0xf);
80007b38:	50 4c       	stdsp	sp[0x10],r12
    }
  }
}

// draw a line and blank to end
U8 screen_line(U16 x, U16 y, char *str, U8 hl) {
80007b3a:	16 91       	mov	r1,r11
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80007b3c:	15 88       	ld.ub	r8,r10[0x0]
80007b3e:	58 08       	cp.w	r8,0
80007b40:	e0 80 00 f1 	breq	80007d22 <screen_line+0x1fa>
80007b44:	f6 c9 ff ff 	sub	r9,r11,-1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007b48:	5c 79       	castu.h	r9
80007b4a:	a7 69       	lsl	r9,0x6
80007b4c:	50 99       	stdsp	sp[0x24],r9
80007b4e:	f6 c9 ff fe 	sub	r9,r11,-2
80007b52:	5c 79       	castu.h	r9
80007b54:	a7 69       	lsl	r9,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007b56:	18 92       	mov	r2,r12
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007b58:	18 93       	mov	r3,r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007b5a:	50 a9       	stdsp	sp[0x28],r9
80007b5c:	f6 cc ff fd 	sub	r12,r11,-3
80007b60:	f3 db c0 10 	bfextu	r9,r11,0x0,0x10
80007b64:	fb 5c 00 16 	st.h	sp[22],r12
80007b68:	50 89       	stdsp	sp[0x20],r9
80007b6a:	f6 cc ff fb 	sub	r12,r11,-5
80007b6e:	f6 c9 ff fc 	sub	r9,r11,-4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007b72:	50 2a       	stdsp	sp[0x8],r10
80007b74:	fb 59 00 18 	st.h	sp[24],r9
80007b78:	fb 5c 00 1a 	st.h	sp[26],r12
80007b7c:	f6 c9 ff fa 	sub	r9,r11,-6
80007b80:	f6 cc ff f9 	sub	r12,r11,-7
80007b84:	a5 62       	lsl	r2,0x4
80007b86:	e0 6a 02 ec 	mov	r10,748
80007b8a:	fb 59 00 1c 	st.h	sp[28],r9
80007b8e:	fb 5c 00 1e 	st.h	sp[30],r12
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
80007b92:	22 08       	sub	r8,32
80007b94:	fe c9 e7 d0 	sub	r9,pc,-6192
80007b98:	f2 08 00 36 	add	r6,r9,r8<<0x3
  xnum = FONT_CHARW - g->first - g->last;
80007b9c:	0d 85       	ld.ub	r5,r6[0x0]
80007b9e:	0d 98       	ld.ub	r8,r6[0x1]
80007ba0:	ea 09 11 00 	rsub	r9,r5,0
80007ba4:	f2 08 01 08 	sub	r8,r9,r8
80007ba8:	30 04       	mov	r4,0
80007baa:	f0 cb ff fa 	sub	r11,r8,-6
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007bae:	40 18       	lddsp	r8,sp[0x4]
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
80007bb0:	5c 5b       	castu.b	r11
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007bb2:	5c 88       	casts.h	r8
80007bb4:	50 08       	stdsp	sp[0x0],r8
80007bb6:	58 0b       	cp.w	r11,0
80007bb8:	c3 e0       	breq	80007c34 <screen_line+0x10c>
80007bba:	08 97       	mov	r7,r4
80007bbc:	30 1c       	mov	r12,1
80007bbe:	02 07       	add	r7,r1
80007bc0:	f8 04 09 4e 	lsl	lr,r12,r4
80007bc4:	5c 77       	castu.h	r7
80007bc6:	40 09       	lddsp	r9,sp[0x0]
80007bc8:	a7 67       	lsl	r7,0x6
80007bca:	30 08       	mov	r8,0
80007bcc:	c1 88       	rjmp	80007bfc <screen_line+0xd4>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007bce:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80007bd2:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007bd6:	a1 9c       	lsr	r12,0x1
80007bd8:	0e 0c       	add	r12,r7
  if (x%2) {
80007bda:	58 00       	cp.w	r0,0
80007bdc:	e0 81 00 ee 	brne	80007db8 <screen_line+0x290>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007be0:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80007be4:	e0 10 ff f0 	andl	r0,0xfff0
80007be8:	06 40       	or	r0,r3
80007bea:	f4 0c 0b 00 	st.b	r10[r12],r0
80007bee:	2f f9       	sub	r9,-1
80007bf0:	2f f8       	sub	r8,-1
80007bf2:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007bf4:	f0 0b 18 00 	cp.b	r11,r8
80007bf8:	e0 88 00 1e 	brls	80007c34 <screen_line+0x10c>
      if( (g->data[x + g->first] & (1 << y))) {
80007bfc:	ec 08 00 0c 	add	r12,r6,r8
80007c00:	0a 0c       	add	r12,r5
80007c02:	19 ac       	ld.ub	r12,r12[0x2]
80007c04:	1c 6c       	and	r12,lr
80007c06:	ce 41       	brne	80007bce <screen_line+0xa6>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c08:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80007c0c:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c10:	a1 9c       	lsr	r12,0x1
80007c12:	0e 0c       	add	r12,r7
  if (x%2) {
80007c14:	58 00       	cp.w	r0,0
80007c16:	e0 81 00 d9 	brne	80007dc8 <screen_line+0x2a0>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007c1a:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80007c1e:	e0 10 ff f0 	andl	r0,0xfff0
80007c22:	f4 0c 0b 00 	st.b	r10[r12],r0
80007c26:	2f f9       	sub	r9,-1
80007c28:	2f f8       	sub	r8,-1
80007c2a:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007c2c:	f0 0b 18 00 	cp.b	r11,r8
80007c30:	fe 9b ff e6 	brhi	80007bfc <screen_line+0xd4>
80007c34:	2f f4       	sub	r4,-1
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
80007c36:	58 84       	cp.w	r4,8
80007c38:	cb f1       	brne	80007bb6 <screen_line+0x8e>
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
80007c3a:	40 18       	lddsp	r8,sp[0x4]
80007c3c:	16 08       	add	r8,r11
80007c3e:	5c 88       	casts.h	r8
80007c40:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80007c44:	f9 d9 c0 01 	bfextu	r12,r9,0x0,0x1
80007c48:	a1 99       	lsr	r9,0x1
80007c4a:	58 0c       	cp.w	r12,0
80007c4c:	e0 81 00 dd 	brne	80007e06 <screen_line+0x2de>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c50:	40 8e       	lddsp	lr,sp[0x20]
80007c52:	a7 6e       	lsl	lr,0x6
80007c54:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007c56:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007c5a:	e0 1c ff f0 	andl	r12,0xfff0
80007c5e:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c62:	40 9e       	lddsp	lr,sp[0x24]
80007c64:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007c66:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007c6a:	e0 1c ff f0 	andl	r12,0xfff0
80007c6e:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c72:	40 ae       	lddsp	lr,sp[0x28]
80007c74:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007c76:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007c7a:	e0 1c ff f0 	andl	r12,0xfff0
80007c7e:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c82:	fb 1e 00 16 	ld.uh	lr,sp[22]
80007c86:	a7 6e       	lsl	lr,0x6
80007c88:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007c8a:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007c8e:	e0 1c ff f0 	andl	r12,0xfff0
80007c92:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007c96:	fb 1e 00 18 	ld.uh	lr,sp[24]
80007c9a:	a7 6e       	lsl	lr,0x6
80007c9c:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007c9e:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007ca2:	e0 1c ff f0 	andl	r12,0xfff0
80007ca6:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007caa:	fb 1e 00 1a 	ld.uh	lr,sp[26]
80007cae:	a7 6e       	lsl	lr,0x6
80007cb0:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007cb2:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007cb6:	e0 1c ff f0 	andl	r12,0xfff0
80007cba:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007cbe:	fb 1e 00 1c 	ld.uh	lr,sp[28]
80007cc2:	a7 6e       	lsl	lr,0x6
80007cc4:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007cc6:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007cca:	e0 1c ff f0 	andl	r12,0xfff0
80007cce:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007cd2:	fb 1c 00 1e 	ld.uh	r12,sp[30]
80007cd6:	a7 6c       	lsl	r12,0x6
80007cd8:	f8 09 00 09 	add	r9,r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007cdc:	f4 09 07 0c 	ld.ub	r12,r10[r9]
80007ce0:	e0 1c ff f0 	andl	r12,0xfff0
80007ce4:	f4 09 0b 0c 	st.b	r10[r9],r12
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
80007ce8:	40 2c       	lddsp	r12,sp[0x8]
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80007cea:	2f f8       	sub	r8,-1
    str++;
80007cec:	2f fc       	sub	r12,-1
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80007cee:	5c 88       	casts.h	r8
    str++;
80007cf0:	50 2c       	stdsp	sp[0x8],r12
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80007cf2:	50 18       	stdsp	sp[0x4],r8
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80007cf4:	19 88       	ld.ub	r8,r12[0x0]
80007cf6:	58 08       	cp.w	r8,0
80007cf8:	fe 91 ff 4d 	brne	80007b92 <screen_line+0x6a>
80007cfc:	e0 6a 02 e4 	mov	r10,740
80007d00:	95 06       	st.w	r10[0x0],r6
80007d02:	e0 6a 02 e0 	mov	r10,736
80007d06:	b4 8b       	st.b	r10[0x0],r11
80007d08:	e0 6a 02 d8 	mov	r10,728
80007d0c:	30 88       	mov	r8,8
80007d0e:	b4 88       	st.b	r10[0x0],r8
80007d10:	e0 6a 02 e9 	mov	r10,745
80007d14:	b4 8b       	st.b	r10[0x0],r11
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  return x;
80007d16:	e0 6a 02 dc 	mov	r10,732
80007d1a:	95 09       	st.w	r10[0x0],r9
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80007d1c:	e0 69 02 e8 	mov	r9,744
80007d20:	b2 88       	st.b	r9[0x0],r8
80007d22:	40 15       	lddsp	r5,sp[0x4]
80007d24:	30 08       	mov	r8,0
80007d26:	5c 55       	castu.b	r5
80007d28:	f0 05 18 00 	cp.b	r5,r8
80007d2c:	c3 15       	brlt	80007d8e <screen_line+0x266>
80007d2e:	40 1a       	lddsp	r10,sp[0x4]
80007d30:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
80007d34:	e0 62 02 dc 	mov	r2,732
80007d38:	30 07       	mov	r7,0
80007d3a:	ed d1 c0 08 	bfextu	r6,r1,0x0,0x8
80007d3e:	14 93       	mov	r3,r10
    for(j=y; j<(FONT_CHARH + y); j++) {
80007d40:	2f 9c       	sub	r12,-7
80007d42:	64 08       	ld.w	r8,r2[0x0]
80007d44:	e0 6b 02 ec 	mov	r11,748
80007d48:	0e 94       	mov	r4,r7
80007d4a:	ea 07 00 0e 	add	lr,r5,r7
80007d4e:	5c 5e       	castu.b	lr
80007d50:	0c 3c       	cp.w	r12,r6
80007d52:	c1 75       	brlt	80007d80 <screen_line+0x258>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007d54:	5c 7e       	castu.h	lr
80007d56:	f1 de c0 01 	bfextu	r8,lr,0x0,0x1
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007d5a:	a1 9e       	lsr	lr,0x1
80007d5c:	58 08       	cp.w	r8,0
80007d5e:	c3 c1       	brne	80007dd6 <screen_line+0x2ae>
80007d60:	0c 9a       	mov	r10,r6
80007d62:	0c 99       	mov	r9,r6
80007d64:	f4 08 15 06 	lsl	r8,r10,0x6

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80007d68:	1c 08       	add	r8,lr
80007d6a:	f6 08 07 0a 	ld.ub	r10,r11[r8]
80007d6e:	e0 1a ff f0 	andl	r10,0xfff0
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80007d72:	f6 08 0b 0a 	st.b	r11[r8],r10
80007d76:	2f f9       	sub	r9,-1
80007d78:	5c 59       	castu.b	r9
80007d7a:	12 9a       	mov	r10,r9
80007d7c:	12 3c       	cp.w	r12,r9
  //  if (hl ) { hl =0xf;a }

  x = screen_string(x, y, str, hl);
  screen_blank_line(x, y);

  print_dbg("\r\n");
80007d7e:	cf 34       	brge	80007d64 <screen_line+0x23c>
80007d80:	2f f7       	sub	r7,-1
80007d82:	e6 07 00 09 	add	r9,r3,r7
  if(hl > 2) { print_dbg("__"); }
80007d86:	e8 09 18 00 	cp.b	r9,r4
80007d8a:	ce 04       	brge	80007d4a <screen_line+0x222>
80007d8c:	85 08       	st.w	r2[0x0],r8
80007d8e:	fe cc ef e6 	sub	r12,pc,-4122
80007d92:	fe b0 ee 39 	rcall	80005a04 <print_dbg>
  print_dbg(str);
80007d96:	30 28       	mov	r8,2
80007d98:	40 49       	lddsp	r9,sp[0x10]
80007d9a:	f0 09 18 00 	cp.b	r9,r8

  return NCOLS;
}
80007d9e:	e0 88 00 06 	brls	80007daa <screen_line+0x282>
80007da2:	fe cc e9 e2 	sub	r12,pc,-5662
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007da6:	fe b0 ee 2f 	rcall	80005a04 <print_dbg>
80007daa:	40 3c       	lddsp	r12,sp[0xc]
80007dac:	fe b0 ee 2c 	rcall	80005a04 <print_dbg>
80007db0:	e0 6c 00 80 	mov	r12,128
80007db4:	2f 5d       	sub	sp,-44
80007db6:	d8 32       	popm	r0-r7,pc
80007db8:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80007dbc:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80007dc0:	04 40       	or	r0,r2

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80007dc2:	f4 0c 0b 00 	st.b	r10[r12],r0
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007dc6:	c1 4b       	rjmp	80007bee <screen_line+0xc6>
80007dc8:	f4 0c 07 00 	ld.ub	r0,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007dcc:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80007dd0:	f4 0c 0b 00 	st.b	r10[r12],r0
80007dd4:	c0 db       	rjmp	80007bee <screen_line+0xc6>
80007dd6:	0c 9a       	mov	r10,r6

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80007dd8:	0c 99       	mov	r9,r6
80007dda:	f4 08 15 06 	lsl	r8,r10,0x6
80007dde:	1c 08       	add	r8,lr
80007de0:	f6 08 07 0a 	ld.ub	r10,r11[r8]
80007de4:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80007de8:	f6 08 0b 0a 	st.b	r11[r8],r10
80007dec:	2f f9       	sub	r9,-1
80007dee:	5c 59       	castu.b	r9
80007df0:	12 9a       	mov	r10,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007df2:	18 39       	cp.w	r9,r12
80007df4:	fe 9a ff f3 	brle	80007dda <screen_line+0x2b2>
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007df8:	2f f7       	sub	r7,-1
80007dfa:	e6 07 00 09 	add	r9,r3,r7
80007dfe:	e8 09 18 00 	cp.b	r9,r4
80007e02:	ca 44       	brge	80007d4a <screen_line+0x222>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e04:	cc 4b       	rjmp	80007d8c <screen_line+0x264>
80007e06:	40 8c       	lddsp	r12,sp[0x20]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e08:	a7 6c       	lsl	r12,0x6
80007e0a:	12 0c       	add	r12,r9
80007e0c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80007e10:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e14:	f4 0c 0b 0e 	st.b	r10[r12],lr
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e18:	40 9c       	lddsp	r12,sp[0x24]
80007e1a:	12 0c       	add	r12,r9
80007e1c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80007e20:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e24:	f4 0c 0b 0e 	st.b	r10[r12],lr
80007e28:	40 ac       	lddsp	r12,sp[0x28]
80007e2a:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e2c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80007e30:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80007e34:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e38:	fb 1c 00 16 	ld.uh	r12,sp[22]
80007e3c:	a7 6c       	lsl	r12,0x6
80007e3e:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e40:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80007e44:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80007e48:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e4c:	fb 1c 00 18 	ld.uh	r12,sp[24]
80007e50:	a7 6c       	lsl	r12,0x6
80007e52:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e54:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80007e58:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80007e5c:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e60:	fb 1c 00 1a 	ld.uh	r12,sp[26]
80007e64:	a7 6c       	lsl	r12,0x6
80007e66:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e68:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80007e6c:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80007e70:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007e74:	fb 1c 00 1c 	ld.uh	r12,sp[28]
80007e78:	a7 6c       	lsl	r12,0x6
80007e7a:	12 0c       	add	r12,r9
80007e7c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007e80:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80007e84:	f4 0c 0b 0e 	st.b	r10[r12],lr
80007e88:	fb 1c 00 1e 	ld.uh	r12,sp[30]
80007e8c:	a7 6c       	lsl	r12,0x6
80007e8e:	f8 09 00 09 	add	r9,r12,r9
80007e92:	f4 09 07 0c 	ld.ub	r12,r10[r9]
80007e96:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80007e9a:	f4 09 0b 0c 	st.b	r10[r9],r12
80007e9e:	c2 5b       	rjmp	80007ce8 <screen_line+0x1c0>

80007ea0 <init_oled>:
80007ea0:	eb cd 40 c0 	pushm	r6-r7,lr
80007ea4:	20 2d       	sub	sp,8
80007ea6:	d3 03       	ssrf	0x10
80007ea8:	33 cc       	mov	r12,60
80007eaa:	fe b0 d1 cf 	rcall	80002248 <gpio_set_gpio_pin>
80007eae:	33 cc       	mov	r12,60
80007eb0:	fe b0 d1 d9 	rcall	80002262 <gpio_clr_gpio_pin>
80007eb4:	33 cc       	mov	r12,60
80007eb6:	fe b0 d1 c9 	rcall	80002248 <gpio_set_gpio_pin>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007eba:	fe 7c 1c 00 	mov	r12,-58368
80007ebe:	fe b0 d5 84 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007ec2:	33 bc       	mov	r12,59
80007ec4:	fe b0 d1 cf 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007ec8:	e0 6b 00 ae 	mov	r11,174
80007ecc:	fe 7c 1c 00 	mov	r12,-58368
80007ed0:	fe b0 d5 8e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007ed4:	fe 7c 1c 00 	mov	r12,-58368
80007ed8:	fe b0 d5 7b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007edc:	fe 7c 1c 00 	mov	r12,-58368
80007ee0:	fe b0 d5 73 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007ee4:	33 bc       	mov	r12,59
80007ee6:	fe b0 d1 be 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007eea:	e0 6b 00 b3 	mov	r11,179
80007eee:	fe 7c 1c 00 	mov	r12,-58368
80007ef2:	fe b0 d5 7d 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007ef6:	fe 7c 1c 00 	mov	r12,-58368
80007efa:	fe b0 d5 6a 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007efe:	fe 7c 1c 00 	mov	r12,-58368
80007f02:	fe b0 d5 62 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007f06:	33 bc       	mov	r12,59
80007f08:	fe b0 d1 ad 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007f0c:	e0 6b 00 91 	mov	r11,145
80007f10:	fe 7c 1c 00 	mov	r12,-58368
80007f14:	fe b0 d5 6c 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007f18:	fe 7c 1c 00 	mov	r12,-58368
80007f1c:	fe b0 d5 59 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007f20:	fe 7c 1c 00 	mov	r12,-58368
80007f24:	fe b0 d5 51 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007f28:	33 bc       	mov	r12,59
80007f2a:	fe b0 d1 9c 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007f2e:	e0 6b 00 a8 	mov	r11,168
80007f32:	fe 7c 1c 00 	mov	r12,-58368
80007f36:	fe b0 d5 5b 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007f3a:	fe 7c 1c 00 	mov	r12,-58368
80007f3e:	fe b0 d5 48 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007f42:	fe 7c 1c 00 	mov	r12,-58368
80007f46:	fe b0 d5 40 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007f4a:	33 bc       	mov	r12,59
80007f4c:	fe b0 d1 8b 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007f50:	33 fb       	mov	r11,63
80007f52:	fe 7c 1c 00 	mov	r12,-58368
80007f56:	fe b0 d5 4b 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007f5a:	fe 7c 1c 00 	mov	r12,-58368
80007f5e:	fe b0 d5 38 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007f62:	fe 7c 1c 00 	mov	r12,-58368
80007f66:	fe b0 d5 30 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007f6a:	33 bc       	mov	r12,59
80007f6c:	fe b0 d1 7b 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007f70:	e0 6b 00 86 	mov	r11,134
80007f74:	fe 7c 1c 00 	mov	r12,-58368
80007f78:	fe b0 d5 3a 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007f7c:	fe 7c 1c 00 	mov	r12,-58368
80007f80:	fe b0 d5 27 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007f84:	fe 7c 1c 00 	mov	r12,-58368
80007f88:	fe b0 d5 1f 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007f8c:	33 bc       	mov	r12,59
80007f8e:	fe b0 d1 6a 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007f92:	e0 6b 00 81 	mov	r11,129
80007f96:	fe 7c 1c 00 	mov	r12,-58368
80007f9a:	fe b0 d5 29 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007f9e:	fe 7c 1c 00 	mov	r12,-58368
80007fa2:	fe b0 d5 16 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80007fa6:	fe 7c 1c 00 	mov	r12,-58368
80007faa:	fe b0 d5 0e 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007fae:	33 bc       	mov	r12,59
80007fb0:	fe b0 d1 59 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007fb4:	37 fb       	mov	r11,127
80007fb6:	fe 7c 1c 00 	mov	r12,-58368
80007fba:	fe b0 d5 19 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007fbe:	fe 7c 1c 00 	mov	r12,-58368
80007fc2:	fe b0 d5 06 	rcall	800029ce <usart_spi_unselectChip>
  write_command(0xA8);	// multiplex
  write_command(0x3F);
  write_command(0x86);	// full current range
  write_command(0x81);	// contrast to full
  write_command(0x7F);
  write_command(0xB2);	// frame freq
80007fc6:	e0 6c 00 b2 	mov	r12,178
80007fca:	fe b0 fd 99 	rcall	80007afc <write_command>
  write_command(0x51);
80007fce:	35 1c       	mov	r12,81
80007fd0:	fe b0 fd 96 	rcall	80007afc <write_command>
  write_command(0xA8);	// multiplex
80007fd4:	e0 6c 00 a8 	mov	r12,168
80007fd8:	fe b0 fd 92 	rcall	80007afc <write_command>
  write_command(0x3F);
80007fdc:	33 fc       	mov	r12,63
80007fde:	fe b0 fd 8f 	rcall	80007afc <write_command>
  write_command(0xBC);	// precharge
80007fe2:	e0 6c 00 bc 	mov	r12,188
80007fe6:	fe b0 fd 8b 	rcall	80007afc <write_command>
  write_command(0x10);
80007fea:	31 0c       	mov	r12,16
80007fec:	fe b0 fd 88 	rcall	80007afc <write_command>
  write_command(0xBE);	// voltage
80007ff0:	e0 6c 00 be 	mov	r12,190
80007ff4:	fe b0 fd 84 	rcall	80007afc <write_command>
  write_command(0x1C);
80007ff8:	31 cc       	mov	r12,28
80007ffa:	fe b0 fd 81 	rcall	80007afc <write_command>
  write_command(0xAD);	// dcdc
80007ffe:	e0 6c 00 ad 	mov	r12,173
80008002:	fe b0 fd 7d 	rcall	80007afc <write_command>
  write_command(0x02);
80008006:	30 2c       	mov	r12,2
80008008:	fe b0 fd 7a 	rcall	80007afc <write_command>
  write_command(0xA0);	// remap
8000800c:	e0 6c 00 a0 	mov	r12,160
80008010:	fe b0 fd 76 	rcall	80007afc <write_command>
  write_command(0x50);
80008014:	35 0c       	mov	r12,80
80008016:	fe b0 fd 73 	rcall	80007afc <write_command>
  write_command(0xA1);	// start
8000801a:	e0 6c 00 a1 	mov	r12,161
8000801e:	fe b0 fd 6f 	rcall	80007afc <write_command>
  write_command(0x0);
80008022:	30 0c       	mov	r12,0
80008024:	fe b0 fd 6c 	rcall	80007afc <write_command>
  write_command(0xA2);	// offset
80008028:	e0 6c 00 a2 	mov	r12,162
8000802c:	fe b0 fd 68 	rcall	80007afc <write_command>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008030:	fe 7c 1c 00 	mov	r12,-58368
80008034:	fe b0 d4 c9 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008038:	33 bc       	mov	r12,59
8000803a:	fe b0 d1 14 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000803e:	34 cb       	mov	r11,76
80008040:	fe 7c 1c 00 	mov	r12,-58368
80008044:	fe b0 d4 d4 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008048:	fe 7c 1c 00 	mov	r12,-58368
8000804c:	fe b0 d4 c1 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008050:	fe 7c 1c 00 	mov	r12,-58368
80008054:	fe b0 d4 b9 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008058:	33 bc       	mov	r12,59
8000805a:	fe b0 d1 04 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000805e:	e0 6b 00 b1 	mov	r11,177
80008062:	fe 7c 1c 00 	mov	r12,-58368
80008066:	fe b0 d4 c3 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000806a:	fe 7c 1c 00 	mov	r12,-58368
8000806e:	fe b0 d4 b0 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008072:	fe 7c 1c 00 	mov	r12,-58368
80008076:	fe b0 d4 a8 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000807a:	33 bc       	mov	r12,59
8000807c:	fe b0 d0 f3 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008080:	35 5b       	mov	r11,85
80008082:	fe 7c 1c 00 	mov	r12,-58368
80008086:	fe b0 d4 b3 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000808a:	fe 7c 1c 00 	mov	r12,-58368
8000808e:	fe b0 d4 a0 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008092:	fe 7c 1c 00 	mov	r12,-58368
80008096:	fe b0 d4 98 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000809a:	33 bc       	mov	r12,59
8000809c:	fe b0 d0 e3 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800080a0:	e0 6b 00 b4 	mov	r11,180
800080a4:	fe 7c 1c 00 	mov	r12,-58368
800080a8:	fe b0 d4 a2 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800080ac:	fe 7c 1c 00 	mov	r12,-58368
800080b0:	fe b0 d4 8f 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800080b4:	fe 7c 1c 00 	mov	r12,-58368
800080b8:	fe b0 d4 87 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800080bc:	33 bc       	mov	r12,59
800080be:	fe b0 d0 d2 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800080c2:	30 2b       	mov	r11,2
800080c4:	fe 7c 1c 00 	mov	r12,-58368
800080c8:	fe b0 d4 92 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800080cc:	fe 7c 1c 00 	mov	r12,-58368
800080d0:	fe b0 d4 7f 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800080d4:	fe 7c 1c 00 	mov	r12,-58368
800080d8:	fe b0 d4 77 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800080dc:	33 bc       	mov	r12,59
800080de:	fe b0 d0 c2 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800080e2:	e0 6b 00 b0 	mov	r11,176
800080e6:	fe 7c 1c 00 	mov	r12,-58368
800080ea:	fe b0 d4 81 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800080ee:	fe 7c 1c 00 	mov	r12,-58368
800080f2:	fe b0 d4 6e 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800080f6:	fe 7c 1c 00 	mov	r12,-58368
800080fa:	fe b0 d4 66 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800080fe:	33 bc       	mov	r12,59
80008100:	fe b0 d0 b1 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008104:	32 8b       	mov	r11,40
80008106:	fe 7c 1c 00 	mov	r12,-58368
8000810a:	fe b0 d4 71 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000810e:	fe 7c 1c 00 	mov	r12,-58368
80008112:	fe b0 d4 5e 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008116:	fe 7c 1c 00 	mov	r12,-58368
8000811a:	fe b0 d4 56 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000811e:	33 bc       	mov	r12,59
80008120:	fe b0 d0 a1 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008124:	e0 6b 00 bf 	mov	r11,191
80008128:	fe 7c 1c 00 	mov	r12,-58368
8000812c:	fe b0 d4 60 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008130:	fe 7c 1c 00 	mov	r12,-58368
80008134:	fe b0 d4 4d 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008138:	fe 7c 1c 00 	mov	r12,-58368
8000813c:	fe b0 d4 45 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008140:	33 bc       	mov	r12,59
80008142:	fe b0 d0 90 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008146:	30 fb       	mov	r11,15
80008148:	fe 7c 1c 00 	mov	r12,-58368
8000814c:	fe b0 d4 50 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008150:	fe 7c 1c 00 	mov	r12,-58368
80008154:	fe b0 d4 3d 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008158:	fe 7c 1c 00 	mov	r12,-58368
8000815c:	fe b0 d4 35 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008160:	33 bc       	mov	r12,59
80008162:	fe b0 d0 80 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008166:	e0 6b 00 a4 	mov	r11,164
8000816a:	fe 7c 1c 00 	mov	r12,-58368
8000816e:	fe b0 d4 3f 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008172:	fe 7c 1c 00 	mov	r12,-58368
80008176:	fe b0 d4 2c 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000817a:	fe 7c 1c 00 	mov	r12,-58368
8000817e:	fe b0 d4 24 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008182:	33 bc       	mov	r12,59
80008184:	fe b0 d0 6f 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008188:	e0 6b 00 b8 	mov	r11,184
8000818c:	fe 7c 1c 00 	mov	r12,-58368
80008190:	fe b0 d4 2e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008194:	fe 7c 1c 00 	mov	r12,-58368
80008198:	fe b0 d4 1b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000819c:	fe 7c 1c 00 	mov	r12,-58368
800081a0:	fe b0 d4 13 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800081a4:	33 bc       	mov	r12,59
800081a6:	fe b0 d0 5e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800081aa:	30 1b       	mov	r11,1
800081ac:	fe 7c 1c 00 	mov	r12,-58368
800081b0:	fe b0 d4 1e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800081b4:	fe 7c 1c 00 	mov	r12,-58368
800081b8:	fe b0 d4 0b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800081bc:	fe 7c 1c 00 	mov	r12,-58368
800081c0:	fe b0 d4 03 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800081c4:	33 bc       	mov	r12,59
800081c6:	fe b0 d0 4e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800081ca:	31 1b       	mov	r11,17
800081cc:	fe 7c 1c 00 	mov	r12,-58368
800081d0:	fe b0 d4 0e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800081d4:	fe 7c 1c 00 	mov	r12,-58368
800081d8:	fe b0 d3 fb 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800081dc:	fe 7c 1c 00 	mov	r12,-58368
800081e0:	fe b0 d3 f3 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800081e4:	33 bc       	mov	r12,59
800081e6:	fe b0 d0 3e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800081ea:	32 2b       	mov	r11,34
800081ec:	fe 7c 1c 00 	mov	r12,-58368
800081f0:	fe b0 d3 fe 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800081f4:	fe 7c 1c 00 	mov	r12,-58368
800081f8:	fe b0 d3 eb 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800081fc:	fe 7c 1c 00 	mov	r12,-58368
80008200:	fe b0 d3 e3 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008204:	33 bc       	mov	r12,59
80008206:	fe b0 d0 2e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000820a:	33 2b       	mov	r11,50
8000820c:	fe 7c 1c 00 	mov	r12,-58368
80008210:	fe b0 d3 ee 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008214:	fe 7c 1c 00 	mov	r12,-58368
80008218:	fe b0 d3 db 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000821c:	fe 7c 1c 00 	mov	r12,-58368
80008220:	fe b0 d3 d3 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008224:	33 bc       	mov	r12,59
80008226:	fe b0 d0 1e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000822a:	34 3b       	mov	r11,67
8000822c:	fe 7c 1c 00 	mov	r12,-58368
80008230:	fe b0 d3 de 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008234:	fe 7c 1c 00 	mov	r12,-58368
80008238:	fe b0 d3 cb 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000823c:	fe 7c 1c 00 	mov	r12,-58368
80008240:	fe b0 d3 c3 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008244:	33 bc       	mov	r12,59
80008246:	fe b0 d0 0e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000824a:	35 4b       	mov	r11,84
8000824c:	fe 7c 1c 00 	mov	r12,-58368
80008250:	fe b0 d3 ce 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008254:	fe 7c 1c 00 	mov	r12,-58368
80008258:	fe b0 d3 bb 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000825c:	fe 7c 1c 00 	mov	r12,-58368
80008260:	fe b0 d3 b3 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008264:	33 bc       	mov	r12,59
80008266:	fe b0 cf fe 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000826a:	36 5b       	mov	r11,101
8000826c:	fe 7c 1c 00 	mov	r12,-58368
80008270:	fe b0 d3 be 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008274:	fe 7c 1c 00 	mov	r12,-58368
80008278:	fe b0 d3 ab 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000827c:	fe 7c 1c 00 	mov	r12,-58368
80008280:	fe b0 d3 a3 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008284:	33 bc       	mov	r12,59
80008286:	fe b0 cf ee 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000828a:	37 6b       	mov	r11,118
8000828c:	fe 7c 1c 00 	mov	r12,-58368
80008290:	fe b0 d3 ae 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008294:	fe 7c 1c 00 	mov	r12,-58368
80008298:	fe b0 d3 9b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000829c:	fe 7c 1c 00 	mov	r12,-58368
800082a0:	fe b0 d3 93 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800082a4:	33 bc       	mov	r12,59
800082a6:	fe b0 cf de 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800082aa:	31 5b       	mov	r11,21
800082ac:	fe 7c 1c 00 	mov	r12,-58368
800082b0:	fe b0 d3 9e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800082b4:	fe 7c 1c 00 	mov	r12,-58368
800082b8:	fe b0 d3 8b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800082bc:	fe 7c 1c 00 	mov	r12,-58368
800082c0:	fe b0 d3 83 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800082c4:	33 bc       	mov	r12,59
800082c6:	fe b0 cf ce 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800082ca:	30 0b       	mov	r11,0
800082cc:	fe 7c 1c 00 	mov	r12,-58368
800082d0:	fe b0 d3 8e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800082d4:	fe 7c 1c 00 	mov	r12,-58368
800082d8:	fe b0 d3 7b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800082dc:	fe 7c 1c 00 	mov	r12,-58368
800082e0:	fe b0 d3 73 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800082e4:	33 bc       	mov	r12,59
800082e6:	fe b0 cf be 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800082ea:	33 fb       	mov	r11,63
800082ec:	fe 7c 1c 00 	mov	r12,-58368
800082f0:	fe b0 d3 7e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800082f4:	fe 7c 1c 00 	mov	r12,-58368
800082f8:	fe b0 d3 6b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800082fc:	fe 7c 1c 00 	mov	r12,-58368
80008300:	fe b0 d3 63 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008304:	33 bc       	mov	r12,59
80008306:	fe b0 cf ae 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000830a:	37 5b       	mov	r11,117
8000830c:	fe 7c 1c 00 	mov	r12,-58368
80008310:	fe b0 d3 6e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008314:	fe 7c 1c 00 	mov	r12,-58368
80008318:	fe b0 d3 5b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000831c:	fe 7c 1c 00 	mov	r12,-58368
80008320:	fe b0 d3 53 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008324:	33 bc       	mov	r12,59
80008326:	fe b0 cf 9e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000832a:	30 0b       	mov	r11,0
8000832c:	fe 7c 1c 00 	mov	r12,-58368
80008330:	fe b0 d3 5e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008334:	fe 7c 1c 00 	mov	r12,-58368
80008338:	fe b0 d3 4b 	rcall	800029ce <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000833c:	fe 7c 1c 00 	mov	r12,-58368
80008340:	fe b0 d3 43 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008344:	33 bc       	mov	r12,59
80008346:	fe b0 cf 8e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000834a:	33 fb       	mov	r11,63
8000834c:	fe 7c 1c 00 	mov	r12,-58368
80008350:	fe b0 d3 4e 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008354:	fe 7c 1c 00 	mov	r12,-58368
80008358:	30 07       	mov	r7,0
8000835a:	fe b0 d3 3a 	rcall	800029ce <usart_spi_unselectChip>

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000835e:	fe 7c 1c 00 	mov	r12,-58368
80008362:	fe b0 d3 32 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80008366:	33 bc       	mov	r12,59
80008368:	fe b0 cf 70 	rcall	80002248 <gpio_set_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000836c:	30 0b       	mov	r11,0
8000836e:	fe 7c 1c 00 	mov	r12,-58368
80008372:	fe b0 d3 3d 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008376:	fe 7c 1c 00 	mov	r12,-58368
8000837a:	2f f7       	sub	r7,-1
8000837c:	fe b0 d3 29 	rcall	800029ce <usart_spi_unselectChip>
  write_command(0x75);
  write_command(0);
  write_command(63);
		
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
80008380:	e0 47 10 00 	cp.w	r7,4096
80008384:	ce d1       	brne	8000835e <init_oled+0x4be>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008386:	fe 7c 1c 00 	mov	r12,-58368
8000838a:	fe b0 d3 1e 	rcall	800029c6 <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000838e:	33 bc       	mov	r12,59
80008390:	fe b0 cf 69 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008394:	e0 6b 00 af 	mov	r11,175
80008398:	fe 7c 1c 00 	mov	r12,-58368
8000839c:	fe b0 d3 28 	rcall	800029ec <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800083a0:	fe 7c 1c 00 	mov	r12,-58368
800083a4:	fe b0 d3 15 	rcall	800029ce <usart_spi_unselectChip>
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
  write_command(0xAF);	// on

  //  delay_ms(10) 
  delay = FCPU_HZ >> 8; while(delay--) {;;}
800083a8:	e2 78 ef 14 	mov	r8,257812
800083ac:	30 09       	mov	r9,0
800083ae:	3f f6       	mov	r6,-1
800083b0:	fa e9 00 00 	st.d	sp[0],r8
800083b4:	3f f7       	mov	r7,-1
800083b6:	fa e8 00 00 	ld.d	r8,sp[0]
800083ba:	f0 06 00 0a 	add	r10,r8,r6
800083be:	f2 07 00 4b 	adc	r11,r9,r7
800083c2:	fa eb 00 00 	st.d	sp[0],r10
800083c6:	58 08       	cp.w	r8,0
800083c8:	5c 29       	cpc	r9
800083ca:	cf 61       	brne	800083b6 <init_oled+0x516>
  //  cpu_irq_enable();
  Enable_global_interrupt();
800083cc:	d5 03       	csrf	0x10

}
800083ce:	2f ed       	sub	sp,-8
800083d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800083d4 <process_timers>:
}


// process the list of timers.
// called by client at desired tick interval.
void process_timers( void ) {
800083d4:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800083d8:	e0 67 12 ec 	mov	r7,4844
    if ( t == 0 ) { continue; }
800083dc:	6e 06       	ld.w	r6,r7[0x0]
800083de:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800083e0:	c0 80       	breq	800083f0 <process_timers+0x1c>
800083e2:	6c 28       	ld.w	r8,r6[0x8]
800083e4:	58 08       	cp.w	r8,0
800083e6:	e0 8a 00 05 	brle	800083f0 <process_timers+0x1c>
      // time remaining, decrement tick counter
      t->timeout--;
800083ea:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800083ec:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800083ee:	c5 50       	breq	80008498 <process_timers+0xc4>
    if ( t == 0 ) { continue; }
800083f0:	6e 16       	ld.w	r6,r7[0x4]
800083f2:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800083f4:	c0 80       	breq	80008404 <process_timers+0x30>
800083f6:	6c 28       	ld.w	r8,r6[0x8]
800083f8:	58 08       	cp.w	r8,0
800083fa:	e0 8a 00 05 	brle	80008404 <process_timers+0x30>
      // time remaining, decrement tick counter
      t->timeout--;
800083fe:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008400:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80008402:	c5 90       	breq	800084b4 <process_timers+0xe0>
    if ( t == 0 ) { continue; }
80008404:	6e 26       	ld.w	r6,r7[0x8]
80008406:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008408:	c0 80       	breq	80008418 <process_timers+0x44>
8000840a:	6c 28       	ld.w	r8,r6[0x8]
8000840c:	58 08       	cp.w	r8,0
8000840e:	e0 8a 00 05 	brle	80008418 <process_timers+0x44>
      // time remaining, decrement tick counter
      t->timeout--;
80008412:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008414:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80008416:	c5 d0       	breq	800084d0 <process_timers+0xfc>
    if ( t == 0 ) { continue; }
80008418:	6e 36       	ld.w	r6,r7[0xc]
8000841a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
8000841c:	c0 80       	breq	8000842c <process_timers+0x58>
8000841e:	6c 28       	ld.w	r8,r6[0x8]
80008420:	58 08       	cp.w	r8,0
80008422:	e0 8a 00 05 	brle	8000842c <process_timers+0x58>
      // time remaining, decrement tick counter
      t->timeout--;
80008426:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008428:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8000842a:	c6 10       	breq	800084ec <process_timers+0x118>
    if ( t == 0 ) { continue; }
8000842c:	6e 46       	ld.w	r6,r7[0x10]
8000842e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008430:	c0 80       	breq	80008440 <process_timers+0x6c>
80008432:	6c 28       	ld.w	r8,r6[0x8]
80008434:	58 08       	cp.w	r8,0
80008436:	e0 8a 00 05 	brle	80008440 <process_timers+0x6c>
      // time remaining, decrement tick counter
      t->timeout--;
8000843a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8000843c:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8000843e:	c6 50       	breq	80008508 <process_timers+0x134>
    if ( t == 0 ) { continue; }
80008440:	6e 56       	ld.w	r6,r7[0x14]
80008442:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008444:	c0 80       	breq	80008454 <process_timers+0x80>
80008446:	6c 28       	ld.w	r8,r6[0x8]
80008448:	58 08       	cp.w	r8,0
8000844a:	e0 8a 00 05 	brle	80008454 <process_timers+0x80>
      // time remaining, decrement tick counter
      t->timeout--;
8000844e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008450:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80008452:	c6 90       	breq	80008524 <process_timers+0x150>
    if ( t == 0 ) { continue; }
80008454:	6e 66       	ld.w	r6,r7[0x18]
80008456:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008458:	c0 80       	breq	80008468 <process_timers+0x94>
8000845a:	6c 28       	ld.w	r8,r6[0x8]
8000845c:	58 08       	cp.w	r8,0
8000845e:	e0 8a 00 05 	brle	80008468 <process_timers+0x94>
      // time remaining, decrement tick counter
      t->timeout--;
80008462:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008464:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80008466:	c6 d0       	breq	80008540 <process_timers+0x16c>
    if ( t == 0 ) { continue; }
80008468:	6e 76       	ld.w	r6,r7[0x1c]
8000846a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
8000846c:	c0 80       	breq	8000847c <process_timers+0xa8>
8000846e:	6c 28       	ld.w	r8,r6[0x8]
80008470:	58 08       	cp.w	r8,0
80008472:	e0 8a 00 05 	brle	8000847c <process_timers+0xa8>
      // time remaining, decrement tick counter
      t->timeout--;
80008476:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008478:	8d 28       	st.w	r6[0x8],r8
8000847a:	c0 30       	breq	80008480 <process_timers+0xac>
8000847c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
80008480:	6c 48       	ld.w	r8,r6[0x10]
80008482:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008484:	c0 30       	breq	8000848a <process_timers+0xb6>
80008486:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008488:	5d 18       	icall	r8
8000848a:	6c 08       	ld.w	r8,r6[0x0]
8000848c:	58 08       	cp.w	r8,0
	  t->timeout = t->timeoutReload;
8000848e:	c6 70       	breq	8000855c <process_timers+0x188>
80008490:	6c 38       	ld.w	r8,r6[0xc]
80008492:	8d 28       	st.w	r6[0x8],r8
80008494:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80008498:	6c 48       	ld.w	r8,r6[0x10]
8000849a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
8000849c:	c0 30       	breq	800084a2 <process_timers+0xce>
8000849e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800084a0:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800084a2:	6c 08       	ld.w	r8,r6[0x0]
800084a4:	58 08       	cp.w	r8,0
800084a6:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800084aa:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800084ae:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800084b2:	c9 fb       	rjmp	800083f0 <process_timers+0x1c>
800084b4:	6c 48       	ld.w	r8,r6[0x10]
800084b6:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800084b8:	c0 30       	breq	800084be <process_timers+0xea>
800084ba:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800084bc:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800084be:	6c 08       	ld.w	r8,r6[0x0]
800084c0:	58 08       	cp.w	r8,0
800084c2:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800084c6:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800084ca:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800084ce:	c9 bb       	rjmp	80008404 <process_timers+0x30>
800084d0:	6c 48       	ld.w	r8,r6[0x10]
800084d2:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800084d4:	c0 30       	breq	800084da <process_timers+0x106>
800084d6:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800084d8:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800084da:	6c 08       	ld.w	r8,r6[0x0]
800084dc:	58 08       	cp.w	r8,0
800084de:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800084e2:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800084e6:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800084ea:	c9 7b       	rjmp	80008418 <process_timers+0x44>
800084ec:	6c 48       	ld.w	r8,r6[0x10]
800084ee:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800084f0:	c0 30       	breq	800084f6 <process_timers+0x122>
800084f2:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800084f4:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800084f6:	6c 08       	ld.w	r8,r6[0x0]
800084f8:	58 08       	cp.w	r8,0
800084fa:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800084fe:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80008502:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80008506:	c9 3b       	rjmp	8000842c <process_timers+0x58>
80008508:	6c 48       	ld.w	r8,r6[0x10]
8000850a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
8000850c:	c0 30       	breq	80008512 <process_timers+0x13e>
8000850e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008510:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80008512:	6c 08       	ld.w	r8,r6[0x0]
80008514:	58 08       	cp.w	r8,0
80008516:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8000851a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8000851e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80008522:	c8 fb       	rjmp	80008440 <process_timers+0x6c>
80008524:	6c 48       	ld.w	r8,r6[0x10]
80008526:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008528:	c0 30       	breq	8000852e <process_timers+0x15a>
8000852a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8000852c:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000852e:	6c 08       	ld.w	r8,r6[0x0]
80008530:	58 08       	cp.w	r8,0
80008532:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80008536:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8000853a:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8000853e:	c8 bb       	rjmp	80008454 <process_timers+0x80>
80008540:	6c 48       	ld.w	r8,r6[0x10]
80008542:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008544:	c0 30       	breq	8000854a <process_timers+0x176>
80008546:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008548:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000854a:	6c 08       	ld.w	r8,r6[0x0]
8000854c:	58 08       	cp.w	r8,0
8000854e:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80008552:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80008556:	ed f8 1a 02 	st.wne	r6[0x8],r8
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000855a:	c8 7b       	rjmp	80008468 <process_timers+0x94>
8000855c:	8f 78       	st.w	r7[0x1c],r8
8000855e:	c8 fb       	rjmp	8000847c <process_timers+0xa8>

80008560 <set_timer>:
80008560:	eb cd 40 e0 	pushm	r5-r7,lr
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
80008564:	58 09       	cp.w	r9,0
80008566:	c6 10       	breq	80008628 <set_timer+0xc8>

// find a timer given a tag and optional callback
static swTimer_t* find_timer( timerCallback callback, int tag ) {
  int k;
  swTimer_t* t;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
80008568:	e1 be 00 00 	mfsr	lr,0x0
 * \return True if interrupt level is enabled.
 */
static inline bool cpu_irq_level_is_enabled_flags(irqflags_t flags,
		uint32_t level)
{
	return !(flags & (1 << level));
8000856c:	ee 1e 00 04 	eorh	lr,0x4
80008570:	ed de c2 41 	bfextu	r6,lr,0x12,0x1

  Disable_interrupt_level( TIMER_INT_LEVEL );
80008574:	d3 23       	ssrf	0x12

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008576:	e0 6e 12 ec 	mov	lr,4844
    if ( t == NULL ) {
8000857a:	7c 07       	ld.w	r7,lr[0x0]
8000857c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000857e:	c0 40       	breq	80008586 <set_timer+0x26>
80008580:	6e 15       	ld.w	r5,r7[0x4]
80008582:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008584:	c5 40       	breq	8000862c <set_timer+0xcc>
    if ( t == NULL ) {
80008586:	7c 17       	ld.w	r7,lr[0x4]
80008588:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000858a:	c0 40       	breq	80008592 <set_timer+0x32>
8000858c:	6e 15       	ld.w	r5,r7[0x4]
8000858e:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008590:	c5 60       	breq	8000863c <set_timer+0xdc>
    if ( t == NULL ) {
80008592:	7c 27       	ld.w	r7,lr[0x8]
80008594:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80008596:	c0 40       	breq	8000859e <set_timer+0x3e>
80008598:	6e 15       	ld.w	r5,r7[0x4]
8000859a:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8000859c:	c5 60       	breq	80008648 <set_timer+0xe8>
    if ( t == NULL ) {
8000859e:	7c 37       	ld.w	r7,lr[0xc]
800085a0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800085a2:	c0 40       	breq	800085aa <set_timer+0x4a>
800085a4:	6e 15       	ld.w	r5,r7[0x4]
800085a6:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800085a8:	c5 40       	breq	80008650 <set_timer+0xf0>
    if ( t == NULL ) {
800085aa:	7c 47       	ld.w	r7,lr[0x10]
800085ac:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800085ae:	c0 40       	breq	800085b6 <set_timer+0x56>
800085b0:	6e 15       	ld.w	r5,r7[0x4]
800085b2:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800085b4:	c5 20       	breq	80008658 <set_timer+0xf8>
    if ( t == NULL ) {
800085b6:	7c 57       	ld.w	r7,lr[0x14]
800085b8:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800085ba:	c0 40       	breq	800085c2 <set_timer+0x62>
800085bc:	6e 15       	ld.w	r5,r7[0x4]
800085be:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800085c0:	c5 00       	breq	80008660 <set_timer+0x100>
    if ( t == NULL ) {
800085c2:	7c 67       	ld.w	r7,lr[0x18]
800085c4:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800085c6:	c0 40       	breq	800085ce <set_timer+0x6e>
800085c8:	6e 15       	ld.w	r5,r7[0x4]
800085ca:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
800085cc:	c4 e0       	breq	80008668 <set_timer+0x108>
    if ( t == NULL ) {
800085ce:	7c 77       	ld.w	r7,lr[0x1c]
800085d0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
800085d2:	c0 40       	breq	800085da <set_timer+0x7a>
800085d4:	6e 15       	ld.w	r5,r7[0x4]
800085d6:	0a 3b       	cp.w	r11,r5
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
800085d8:	c4 c0       	breq	80008670 <set_timer+0x110>
800085da:	58 06       	cp.w	r6,0
   
  if ( find_timer( callback, tag ) != NULL ) {
    return false;
  }

  t->callback = callback;
800085dc:	c3 41       	brne	80008644 <set_timer+0xe4>
  t->tag = tag;
800085de:	99 49       	st.w	r12[0x10],r9
  t->timeout = ticks;
  t->fperiodic = fPeriodic;
800085e0:	99 1b       	st.w	r12[0x4],r11
  t->timeoutReload = ticks;
800085e2:	99 08       	st.w	r12[0x0],r8
    return false;
  }

  t->callback = callback;
  t->tag = tag;
  t->timeout = ticks;
800085e4:	99 3a       	st.w	r12[0xc],r10
}

// Add timer to pointer array. Finds first empty slot.
static bool add_timer( swTimer_t* newTimer) {
  int k;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
800085e6:	99 2a       	st.w	r12[0x8],r10
800085e8:	e1 ba 00 00 	mfsr	r10,0x0

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
800085ec:	d3 23       	ssrf	0x12
800085ee:	e0 68 12 ec 	mov	r8,4844
800085f2:	7c 09       	ld.w	r9,lr[0x0]
800085f4:	58 09       	cp.w	r9,0
800085f6:	c4 80       	breq	80008686 <set_timer+0x126>
800085f8:	70 19       	ld.w	r9,r8[0x4]
800085fa:	58 09       	cp.w	r9,0
800085fc:	c4 40       	breq	80008684 <set_timer+0x124>
800085fe:	70 29       	ld.w	r9,r8[0x8]
80008600:	58 09       	cp.w	r9,0
80008602:	c4 70       	breq	80008690 <set_timer+0x130>
80008604:	70 39       	ld.w	r9,r8[0xc]
80008606:	58 09       	cp.w	r9,0
80008608:	c4 60       	breq	80008694 <set_timer+0x134>
8000860a:	70 49       	ld.w	r9,r8[0x10]
8000860c:	58 09       	cp.w	r9,0
8000860e:	c4 50       	breq	80008698 <set_timer+0x138>
80008610:	70 59       	ld.w	r9,r8[0x14]
80008612:	58 09       	cp.w	r9,0
80008614:	c4 40       	breq	8000869c <set_timer+0x13c>
80008616:	70 69       	ld.w	r9,r8[0x18]
80008618:	58 09       	cp.w	r9,0
8000861a:	c4 30       	breq	800086a0 <set_timer+0x140>
8000861c:	70 78       	ld.w	r8,r8[0x1c]
      Enable_interrupt_level( TIMER_INT_LEVEL );
      return true;
    }
  }

  if (fReenableInterrupts) {
8000861e:	58 08       	cp.w	r8,0
80008620:	c4 20       	breq	800086a4 <set_timer+0x144>
80008622:	e6 1a 00 04 	andh	r10,0x4,COH
    Enable_interrupt_level( TIMER_INT_LEVEL );
80008626:	c2 b0       	breq	8000867c <set_timer+0x11c>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80008628:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000862c:	6e 47       	ld.w	r7,r7[0x10]
	  // tag and callback both specified and matched
	  if (fReenableInterrupts)
8000862e:	0e 39       	cp.w	r9,r7
80008630:	ca b1       	brne	80008586 <set_timer+0x26>
	    Enable_interrupt_level( TIMER_INT_LEVEL );
80008632:	58 06       	cp.w	r6,0
80008634:	cf a0       	breq	80008628 <set_timer+0xc8>
80008636:	d5 23       	csrf	0x12
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80008638:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000863c:	6e 47       	ld.w	r7,r7[0x10]
8000863e:	0e 39       	cp.w	r9,r7
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80008640:	ca 91       	brne	80008592 <set_timer+0x32>
80008642:	cf 8b       	rjmp	80008632 <set_timer+0xd2>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80008644:	d5 23       	csrf	0x12
80008646:	cc cb       	rjmp	800085de <set_timer+0x7e>
80008648:	6e 47       	ld.w	r7,r7[0x10]
8000864a:	0e 39       	cp.w	r9,r7
8000864c:	ca 91       	brne	8000859e <set_timer+0x3e>
8000864e:	cf 2b       	rjmp	80008632 <set_timer+0xd2>
80008650:	6e 47       	ld.w	r7,r7[0x10]
80008652:	0e 39       	cp.w	r9,r7
80008654:	ca b1       	brne	800085aa <set_timer+0x4a>
80008656:	ce eb       	rjmp	80008632 <set_timer+0xd2>
80008658:	6e 47       	ld.w	r7,r7[0x10]
8000865a:	0e 39       	cp.w	r9,r7
8000865c:	ca d1       	brne	800085b6 <set_timer+0x56>
8000865e:	ce ab       	rjmp	80008632 <set_timer+0xd2>
80008660:	6e 47       	ld.w	r7,r7[0x10]
80008662:	0e 39       	cp.w	r9,r7
80008664:	ca f1       	brne	800085c2 <set_timer+0x62>
80008666:	ce 6b       	rjmp	80008632 <set_timer+0xd2>
80008668:	6e 47       	ld.w	r7,r7[0x10]
8000866a:	0e 39       	cp.w	r9,r7
8000866c:	cb 11       	brne	800085ce <set_timer+0x6e>
8000866e:	ce 2b       	rjmp	80008632 <set_timer+0xd2>
80008670:	6e 47       	ld.w	r7,r7[0x10]
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
80008672:	0e 39       	cp.w	r9,r7
80008674:	cd f0       	breq	80008632 <set_timer+0xd2>
80008676:	58 06       	cp.w	r6,0
      return true;
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80008678:	cb 30       	breq	800085de <set_timer+0x7e>
8000867a:	ce 5b       	rjmp	80008644 <set_timer+0xe4>
8000867c:	d5 23       	csrf	0x12
8000867e:	14 9c       	mov	r12,r10

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80008680:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
      timers[k] = newTimer;
80008684:	30 19       	mov	r9,1
      Enable_interrupt_level( TIMER_INT_LEVEL );
80008686:	fc 09 09 2c 	st.w	lr[r9<<0x2],r12
8000868a:	d5 23       	csrf	0x12

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8000868c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80008690:	30 29       	mov	r9,2
80008692:	cf ab       	rjmp	80008686 <set_timer+0x126>
80008694:	30 39       	mov	r9,3
80008696:	cf 8b       	rjmp	80008686 <set_timer+0x126>
80008698:	30 49       	mov	r9,4
8000869a:	cf 6b       	rjmp	80008686 <set_timer+0x126>
8000869c:	30 59       	mov	r9,5
8000869e:	cf 4b       	rjmp	80008686 <set_timer+0x126>
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
800086a0:	30 69       	mov	r9,6
800086a2:	cf 2b       	rjmp	80008686 <set_timer+0x126>
800086a4:	30 79       	mov	r9,7
800086a6:	cf 0b       	rjmp	80008686 <set_timer+0x126>

800086a8 <_stext>:
800086a8:	e0 7d 00 00 	mov	sp,65536
800086ac:	fe c0 fc ac 	sub	r0,pc,-852
800086b0:	e3 b0 00 01 	mtsr	0x4,r0
800086b4:	d5 53       	csrf	0x15
800086b6:	30 80       	mov	r0,8
800086b8:	31 01       	mov	r1,16
800086ba:	02 30       	cp.w	r0,r1
800086bc:	c0 72       	brcc	800086ca <idata_load_loop_end>
800086be:	fe c2 ef fe 	sub	r2,pc,-4098

800086c2 <idata_load_loop>:
800086c2:	a5 05       	ld.d	r4,r2++
800086c4:	a1 24       	st.d	r0++,r4
800086c6:	02 30       	cp.w	r0,r1
800086c8:	cf d3       	brcs	800086c2 <idata_load_loop>

800086ca <idata_load_loop_end>:
800086ca:	31 00       	mov	r0,16
800086cc:	e0 61 1c 70 	mov	r1,7280
800086d0:	02 30       	cp.w	r0,r1
800086d2:	c0 62       	brcc	800086de <udata_clear_loop_end>
800086d4:	30 02       	mov	r2,0
800086d6:	30 03       	mov	r3,0

800086d8 <udata_clear_loop>:
800086d8:	a1 22       	st.d	r0++,r2
800086da:	02 30       	cp.w	r0,r1
800086dc:	cf e3       	brcs	800086d8 <udata_clear_loop>

800086de <udata_clear_loop_end>:
800086de:	fe cf 0c f2 	sub	pc,pc,3314
800086e2:	d7 03       	nop

800086e4 <memcmp>:
800086e4:	d4 01       	pushm	lr
800086e6:	30 08       	mov	r8,0
800086e8:	c0 d8       	rjmp	80008702 <memcmp+0x1e>
800086ea:	f8 08 07 0e 	ld.ub	lr,r12[r8]
800086ee:	f6 08 07 09 	ld.ub	r9,r11[r8]
800086f2:	20 1a       	sub	r10,1
800086f4:	2f f8       	sub	r8,-1
800086f6:	f2 0e 18 00 	cp.b	lr,r9
800086fa:	c0 40       	breq	80008702 <memcmp+0x1e>
800086fc:	fc 09 01 0c 	sub	r12,lr,r9
80008700:	d8 02       	popm	pc
80008702:	58 0a       	cp.w	r10,0
80008704:	cf 31       	brne	800086ea <memcmp+0x6>
80008706:	14 9c       	mov	r12,r10
80008708:	d8 02       	popm	pc

8000870a <memcpy>:
8000870a:	58 8a       	cp.w	r10,8
8000870c:	c2 f5       	brlt	8000876a <memcpy+0x60>
8000870e:	f9 eb 10 09 	or	r9,r12,r11
80008712:	e2 19 00 03 	andl	r9,0x3,COH
80008716:	e0 81 00 97 	brne	80008844 <memcpy+0x13a>
8000871a:	e0 4a 00 20 	cp.w	r10,32
8000871e:	c3 b4       	brge	80008794 <memcpy+0x8a>
80008720:	f4 08 14 02 	asr	r8,r10,0x2
80008724:	f0 09 11 08 	rsub	r9,r8,8
80008728:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000872c:	76 69       	ld.w	r9,r11[0x18]
8000872e:	99 69       	st.w	r12[0x18],r9
80008730:	76 59       	ld.w	r9,r11[0x14]
80008732:	99 59       	st.w	r12[0x14],r9
80008734:	76 49       	ld.w	r9,r11[0x10]
80008736:	99 49       	st.w	r12[0x10],r9
80008738:	76 39       	ld.w	r9,r11[0xc]
8000873a:	99 39       	st.w	r12[0xc],r9
8000873c:	76 29       	ld.w	r9,r11[0x8]
8000873e:	99 29       	st.w	r12[0x8],r9
80008740:	76 19       	ld.w	r9,r11[0x4]
80008742:	99 19       	st.w	r12[0x4],r9
80008744:	76 09       	ld.w	r9,r11[0x0]
80008746:	99 09       	st.w	r12[0x0],r9
80008748:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000874c:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008750:	e0 1a 00 03 	andl	r10,0x3
80008754:	f4 0a 11 04 	rsub	r10,r10,4
80008758:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000875c:	17 a9       	ld.ub	r9,r11[0x2]
8000875e:	b0 a9       	st.b	r8[0x2],r9
80008760:	17 99       	ld.ub	r9,r11[0x1]
80008762:	b0 99       	st.b	r8[0x1],r9
80008764:	17 89       	ld.ub	r9,r11[0x0]
80008766:	b0 89       	st.b	r8[0x0],r9
80008768:	5e fc       	retal	r12
8000876a:	f4 0a 11 09 	rsub	r10,r10,9
8000876e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008772:	17 f9       	ld.ub	r9,r11[0x7]
80008774:	b8 f9       	st.b	r12[0x7],r9
80008776:	17 e9       	ld.ub	r9,r11[0x6]
80008778:	b8 e9       	st.b	r12[0x6],r9
8000877a:	17 d9       	ld.ub	r9,r11[0x5]
8000877c:	b8 d9       	st.b	r12[0x5],r9
8000877e:	17 c9       	ld.ub	r9,r11[0x4]
80008780:	b8 c9       	st.b	r12[0x4],r9
80008782:	17 b9       	ld.ub	r9,r11[0x3]
80008784:	b8 b9       	st.b	r12[0x3],r9
80008786:	17 a9       	ld.ub	r9,r11[0x2]
80008788:	b8 a9       	st.b	r12[0x2],r9
8000878a:	17 99       	ld.ub	r9,r11[0x1]
8000878c:	b8 99       	st.b	r12[0x1],r9
8000878e:	17 89       	ld.ub	r9,r11[0x0]
80008790:	b8 89       	st.b	r12[0x0],r9
80008792:	5e fc       	retal	r12
80008794:	eb cd 40 c0 	pushm	r6-r7,lr
80008798:	18 99       	mov	r9,r12
8000879a:	22 0a       	sub	r10,32
8000879c:	b7 07       	ld.d	r6,r11++
8000879e:	b3 26       	st.d	r9++,r6
800087a0:	b7 07       	ld.d	r6,r11++
800087a2:	b3 26       	st.d	r9++,r6
800087a4:	b7 07       	ld.d	r6,r11++
800087a6:	b3 26       	st.d	r9++,r6
800087a8:	b7 07       	ld.d	r6,r11++
800087aa:	b3 26       	st.d	r9++,r6
800087ac:	22 0a       	sub	r10,32
800087ae:	cf 74       	brge	8000879c <memcpy+0x92>
800087b0:	2f 0a       	sub	r10,-16
800087b2:	c0 65       	brlt	800087be <memcpy+0xb4>
800087b4:	b7 07       	ld.d	r6,r11++
800087b6:	b3 26       	st.d	r9++,r6
800087b8:	b7 07       	ld.d	r6,r11++
800087ba:	b3 26       	st.d	r9++,r6
800087bc:	21 0a       	sub	r10,16
800087be:	5c 3a       	neg	r10
800087c0:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800087c4:	d7 03       	nop
800087c6:	d7 03       	nop
800087c8:	f7 36 00 0e 	ld.ub	r6,r11[14]
800087cc:	f3 66 00 0e 	st.b	r9[14],r6
800087d0:	f7 36 00 0d 	ld.ub	r6,r11[13]
800087d4:	f3 66 00 0d 	st.b	r9[13],r6
800087d8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800087dc:	f3 66 00 0c 	st.b	r9[12],r6
800087e0:	f7 36 00 0b 	ld.ub	r6,r11[11]
800087e4:	f3 66 00 0b 	st.b	r9[11],r6
800087e8:	f7 36 00 0a 	ld.ub	r6,r11[10]
800087ec:	f3 66 00 0a 	st.b	r9[10],r6
800087f0:	f7 36 00 09 	ld.ub	r6,r11[9]
800087f4:	f3 66 00 09 	st.b	r9[9],r6
800087f8:	f7 36 00 08 	ld.ub	r6,r11[8]
800087fc:	f3 66 00 08 	st.b	r9[8],r6
80008800:	f7 36 00 07 	ld.ub	r6,r11[7]
80008804:	f3 66 00 07 	st.b	r9[7],r6
80008808:	f7 36 00 06 	ld.ub	r6,r11[6]
8000880c:	f3 66 00 06 	st.b	r9[6],r6
80008810:	f7 36 00 05 	ld.ub	r6,r11[5]
80008814:	f3 66 00 05 	st.b	r9[5],r6
80008818:	f7 36 00 04 	ld.ub	r6,r11[4]
8000881c:	f3 66 00 04 	st.b	r9[4],r6
80008820:	f7 36 00 03 	ld.ub	r6,r11[3]
80008824:	f3 66 00 03 	st.b	r9[3],r6
80008828:	f7 36 00 02 	ld.ub	r6,r11[2]
8000882c:	f3 66 00 02 	st.b	r9[2],r6
80008830:	f7 36 00 01 	ld.ub	r6,r11[1]
80008834:	f3 66 00 01 	st.b	r9[1],r6
80008838:	f7 36 00 00 	ld.ub	r6,r11[0]
8000883c:	f3 66 00 00 	st.b	r9[0],r6
80008840:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008844:	20 1a       	sub	r10,1
80008846:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000884a:	f8 0a 0b 09 	st.b	r12[r10],r9
8000884e:	cf b1       	brne	80008844 <memcpy+0x13a>
80008850:	5e fc       	retal	r12

80008852 <memset>:
80008852:	18 98       	mov	r8,r12
80008854:	c0 38       	rjmp	8000885a <memset+0x8>
80008856:	10 cb       	st.b	r8++,r11
80008858:	20 1a       	sub	r10,1
8000885a:	58 0a       	cp.w	r10,0
8000885c:	cf d1       	brne	80008856 <memset+0x4>
8000885e:	5e fc       	retal	r12

Disassembly of section .exception:

80008a00 <_evba>:
80008a00:	c0 08       	rjmp	80008a00 <_evba>
	...

80008a04 <_handle_TLB_Multiple_Hit>:
80008a04:	c0 08       	rjmp	80008a04 <_handle_TLB_Multiple_Hit>
	...

80008a08 <_handle_Bus_Error_Data_Fetch>:
80008a08:	c0 08       	rjmp	80008a08 <_handle_Bus_Error_Data_Fetch>
	...

80008a0c <_handle_Bus_Error_Instruction_Fetch>:
80008a0c:	c0 08       	rjmp	80008a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008a10 <_handle_NMI>:
80008a10:	c0 08       	rjmp	80008a10 <_handle_NMI>
	...

80008a14 <_handle_Instruction_Address>:
80008a14:	c0 08       	rjmp	80008a14 <_handle_Instruction_Address>
	...

80008a18 <_handle_ITLB_Protection>:
80008a18:	c0 08       	rjmp	80008a18 <_handle_ITLB_Protection>
	...

80008a1c <_handle_Breakpoint>:
80008a1c:	c0 08       	rjmp	80008a1c <_handle_Breakpoint>
	...

80008a20 <_handle_Illegal_Opcode>:
80008a20:	c0 08       	rjmp	80008a20 <_handle_Illegal_Opcode>
	...

80008a24 <_handle_Unimplemented_Instruction>:
80008a24:	c0 08       	rjmp	80008a24 <_handle_Unimplemented_Instruction>
	...

80008a28 <_handle_Privilege_Violation>:
80008a28:	c0 08       	rjmp	80008a28 <_handle_Privilege_Violation>
	...

80008a2c <_handle_Floating_Point>:
80008a2c:	c0 08       	rjmp	80008a2c <_handle_Floating_Point>
	...

80008a30 <_handle_Coprocessor_Absent>:
80008a30:	c0 08       	rjmp	80008a30 <_handle_Coprocessor_Absent>
	...

80008a34 <_handle_Data_Address_Read>:
80008a34:	c0 08       	rjmp	80008a34 <_handle_Data_Address_Read>
	...

80008a38 <_handle_Data_Address_Write>:
80008a38:	c0 08       	rjmp	80008a38 <_handle_Data_Address_Write>
	...

80008a3c <_handle_DTLB_Protection_Read>:
80008a3c:	c0 08       	rjmp	80008a3c <_handle_DTLB_Protection_Read>
	...

80008a40 <_handle_DTLB_Protection_Write>:
80008a40:	c0 08       	rjmp	80008a40 <_handle_DTLB_Protection_Write>
	...

80008a44 <_handle_DTLB_Modified>:
80008a44:	c0 08       	rjmp	80008a44 <_handle_DTLB_Modified>
	...

80008a50 <_handle_ITLB_Miss>:
80008a50:	c0 08       	rjmp	80008a50 <_handle_ITLB_Miss>
	...

80008a60 <_handle_DTLB_Miss_Read>:
80008a60:	c0 08       	rjmp	80008a60 <_handle_DTLB_Miss_Read>
	...

80008a70 <_handle_DTLB_Miss_Write>:
80008a70:	c0 08       	rjmp	80008a70 <_handle_DTLB_Miss_Write>
	...

80008b00 <_handle_Supervisor_Call>:
80008b00:	c0 08       	rjmp	80008b00 <_handle_Supervisor_Call>
80008b02:	d7 03       	nop

80008b04 <_int0>:
80008b04:	30 0c       	mov	r12,0
80008b06:	fe b0 cc 6d 	rcall	800023e0 <_get_interrupt_handler>
80008b0a:	58 0c       	cp.w	r12,0
80008b0c:	f8 0f 17 10 	movne	pc,r12
80008b10:	d6 03       	rete

80008b12 <_int1>:
80008b12:	30 1c       	mov	r12,1
80008b14:	fe b0 cc 66 	rcall	800023e0 <_get_interrupt_handler>
80008b18:	58 0c       	cp.w	r12,0
80008b1a:	f8 0f 17 10 	movne	pc,r12
80008b1e:	d6 03       	rete

80008b20 <_int2>:
80008b20:	30 2c       	mov	r12,2
80008b22:	fe b0 cc 5f 	rcall	800023e0 <_get_interrupt_handler>
80008b26:	58 0c       	cp.w	r12,0
80008b28:	f8 0f 17 10 	movne	pc,r12
80008b2c:	d6 03       	rete

80008b2e <_int3>:
80008b2e:	30 3c       	mov	r12,3
80008b30:	fe b0 cc 58 	rcall	800023e0 <_get_interrupt_handler>
80008b34:	58 0c       	cp.w	r12,0
80008b36:	f8 0f 17 10 	movne	pc,r12
80008b3a:	d6 03       	rete
80008b3c:	d7 03       	nop
80008b3e:	d7 03       	nop
80008b40:	d7 03       	nop
80008b42:	d7 03       	nop
80008b44:	d7 03       	nop
80008b46:	d7 03       	nop
80008b48:	d7 03       	nop
80008b4a:	d7 03       	nop
80008b4c:	d7 03       	nop
80008b4e:	d7 03       	nop
80008b50:	d7 03       	nop
80008b52:	d7 03       	nop
80008b54:	d7 03       	nop
80008b56:	d7 03       	nop
80008b58:	d7 03       	nop
80008b5a:	d7 03       	nop
80008b5c:	d7 03       	nop
80008b5e:	d7 03       	nop
80008b60:	d7 03       	nop
80008b62:	d7 03       	nop
80008b64:	d7 03       	nop
80008b66:	d7 03       	nop
80008b68:	d7 03       	nop
80008b6a:	d7 03       	nop
80008b6c:	d7 03       	nop
80008b6e:	d7 03       	nop
80008b70:	d7 03       	nop
80008b72:	d7 03       	nop
80008b74:	d7 03       	nop
80008b76:	d7 03       	nop
80008b78:	d7 03       	nop
80008b7a:	d7 03       	nop
80008b7c:	d7 03       	nop
80008b7e:	d7 03       	nop
80008b80:	d7 03       	nop
80008b82:	d7 03       	nop
80008b84:	d7 03       	nop
80008b86:	d7 03       	nop
80008b88:	d7 03       	nop
80008b8a:	d7 03       	nop
80008b8c:	d7 03       	nop
80008b8e:	d7 03       	nop
80008b90:	d7 03       	nop
80008b92:	d7 03       	nop
80008b94:	d7 03       	nop
80008b96:	d7 03       	nop
80008b98:	d7 03       	nop
80008b9a:	d7 03       	nop
80008b9c:	d7 03       	nop
80008b9e:	d7 03       	nop
80008ba0:	d7 03       	nop
80008ba2:	d7 03       	nop
80008ba4:	d7 03       	nop
80008ba6:	d7 03       	nop
80008ba8:	d7 03       	nop
80008baa:	d7 03       	nop
80008bac:	d7 03       	nop
80008bae:	d7 03       	nop
80008bb0:	d7 03       	nop
80008bb2:	d7 03       	nop
80008bb4:	d7 03       	nop
80008bb6:	d7 03       	nop
80008bb8:	d7 03       	nop
80008bba:	d7 03       	nop
80008bbc:	d7 03       	nop
80008bbe:	d7 03       	nop
80008bc0:	d7 03       	nop
80008bc2:	d7 03       	nop
80008bc4:	d7 03       	nop
80008bc6:	d7 03       	nop
80008bc8:	d7 03       	nop
80008bca:	d7 03       	nop
80008bcc:	d7 03       	nop
80008bce:	d7 03       	nop
80008bd0:	d7 03       	nop
80008bd2:	d7 03       	nop
80008bd4:	d7 03       	nop
80008bd6:	d7 03       	nop
80008bd8:	d7 03       	nop
80008bda:	d7 03       	nop
80008bdc:	d7 03       	nop
80008bde:	d7 03       	nop
80008be0:	d7 03       	nop
80008be2:	d7 03       	nop
80008be4:	d7 03       	nop
80008be6:	d7 03       	nop
80008be8:	d7 03       	nop
80008bea:	d7 03       	nop
80008bec:	d7 03       	nop
80008bee:	d7 03       	nop
80008bf0:	d7 03       	nop
80008bf2:	d7 03       	nop
80008bf4:	d7 03       	nop
80008bf6:	d7 03       	nop
80008bf8:	d7 03       	nop
80008bfa:	d7 03       	nop
80008bfc:	d7 03       	nop
80008bfe:	d7 03       	nop
