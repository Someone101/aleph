
aleph-flry.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80010000  80010000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80012008  80012008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000118ac  80012008  80012008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80023a00  80023a00  00013e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000210c  80023c00  80023c00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80025d0c  80025d0c  0001610c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000588  00000008  80025d10  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00002d78  00000590  00000590  00000000  2**2
                  ALLOC
  9 .heap         0000bcf8  00003308  00003308  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00016990  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000015d8  00000000  00000000  000169c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00003242  00000000  00000000  00017f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0003553c  00000000  00000000  0001b1da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000797c  00000000  00000000  00050716  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e381  00000000  00000000  00058092  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003db4  00000000  00000000  00086414  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a340  00000000  00000000  0008a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000e409  00000000  00000000  00094508  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 02e3a6a7  00000000  00000000  000a2911  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram  00010048  80040000  80026298  00016c00  2**2
                  ALLOC
 22 .debug_ranges 00007de8  00000000  00000000  02edcfb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80010000 <_trampoline>:
80010000:	e0 8f 10 00 	bral	80012000 <program_start>
	...

80012000 <program_start>:
80012000:	fe ff 00 04 	ld.w	pc,pc[4]
80012004:	80 01       	ld.sh	r1,r0[0x0]
80012006:	fc 30 12 00 	sub	r0,-196608

Disassembly of section .text:

80012008 <smc_get_cs_size>:

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
}

unsigned char smc_get_cs_size(unsigned char cs)
{
80012008:	e0 68 05 90 	mov	r8,1424
  return smc_tab_cs_size[cs];
}
8001200c:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80012010:	5e fc       	retal	r12
80012012:	d7 03       	nop

80012014 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80012014:	eb cd 40 c0 	pushm	r6-r7,lr
  // Enable SM mode for CS1 if necessary.
#if UC3C
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
80012018:	fe 68 10 00 	mov	r8,-126976
8001201c:	f0 f9 01 24 	ld.w	r9,r8[292]
80012020:	a1 d9       	cbr	r9,0x1
80012022:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
80012026:	30 09       	mov	r9,0
#if UC3C
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80012028:	f0 f8 01 24 	ld.w	r8,r8[292]
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
8001202c:	fe 68 1c 00 	mov	r8,-123904
80012030:	91 49       	st.w	r8[0x10],r9
static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80012032:	ee 79 42 3f 	mov	r9,999999
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
80012036:	e0 6e 4d d3 	mov	lr,19923
8001203a:	ea 1e 10 62 	orh	lr,0x1062
static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8001203e:	f8 09 00 0b 	add	r11,r12,r9
80012042:	e0 69 de 83 	mov	r9,56963
80012046:	ea 19 43 1b 	orh	r9,0x431b
8001204a:	f6 09 06 4a 	mulu.d	r10,r11,r9
8001204e:	b3 8b       	lsr	r11,0x12
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
80012050:	f6 07 10 52 	mul	r7,r11,82
80012054:	ee c7 fc 19 	sub	r7,r7,-999
80012058:	ee 0e 06 46 	mulu.d	r6,r7,lr
8001205c:	0e 99       	mov	r9,r7
8001205e:	e0 67 00 a4 	mov	r7,164
80012062:	a7 89       	lsr	r9,0x6
80012064:	f6 07 02 47 	mul	r7,r11,r7
80012068:	f2 0a 15 10 	lsl	r10,r9,0x10
8001206c:	ee c7 fc 19 	sub	r7,r7,-999
80012070:	f5 e9 10 8c 	or	r12,r10,r9<<0x8
80012074:	ee 0e 06 46 	mulu.d	r6,r7,lr
80012078:	12 4c       	or	r12,r9
8001207a:	0e 9b       	mov	r11,r7
8001207c:	f9 e9 11 8c 	or	r12,r12,r9<<0x18
80012080:	a7 8b       	lsr	r11,0x6
80012082:	91 5c       	st.w	r8[0x14],r12
80012084:	12 3b       	cp.w	r11,r9
80012086:	f6 09 17 20 	movhs	r9,r11
8001208a:	12 4a       	or	r10,r9
8001208c:	e0 69 10 03 	mov	r9,4099
80012090:	91 6a       	st.w	r8[0x18],r10
80012092:	91 79       	st.w	r8[0x1c],r9
80012094:	31 49       	mov	r9,20
80012096:	e0 68 05 90 	mov	r8,1424
8001209a:	32 9b       	mov	r11,41
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
8001209c:	b0 99       	st.b	r8[0x1],r9
8001209e:	48 3c       	lddpc	r12,800120a8 <smc_init+0x94>
800120a0:	e0 a0 03 8e 	rcall	800127bc <gpio_enable_module>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
800120a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120a8:	80 02       	ld.sh	r2,r0[0x0]
800120aa:	3c 00       	mov	r0,-64

800120ac <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120ac:	fe 68 14 00 	mov	r8,-125952
800120b0:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120b2:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800120b6:	91 09       	st.w	r8[0x0],r9
}
800120b8:	5e fc       	retal	r12

800120ba <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800120ba:	e0 68 8a 3f 	mov	r8,35391
800120be:	ea 18 01 f7 	orh	r8,0x1f7
800120c2:	10 3c       	cp.w	r12,r8
800120c4:	e0 8b 00 0a 	brhi	800120d8 <flashc_set_bus_freq+0x1e>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120c8:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120cc:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120ce:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120d0:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800120d4:	91 09       	st.w	r8[0x0],r9
800120d6:	5e fc       	retal	r12
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120d8:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120dc:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120de:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120e0:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800120e4:	91 09       	st.w	r8[0x0],r9
800120e6:	5e fc       	retal	r12

800120e8 <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800120e8:	fe 6a 14 00 	mov	r10,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
800120ec:	30 09       	mov	r9,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800120ee:	74 28       	ld.w	r8,r10[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
800120f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800120f4:	f2 08 18 00 	cp.b	r8,r9
800120f8:	cf b0       	breq	800120ee <flashc_default_wait_until_ready+0x6>
}
800120fa:	5e fc       	retal	r12

800120fc <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800120fc:	d4 31       	pushm	r0-r7,lr
800120fe:	20 cd       	sub	sp,48
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80012100:	e0 68 ff ff 	mov	r8,65535
80012104:	ea 18 80 7f 	orh	r8,0x807f
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80012108:	50 1c       	stdsp	sp[0x4],r12
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
8001210a:	10 3c       	cp.w	r12,r8
8001210c:	5f b1       	srhi	r1
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
8001210e:	50 49       	stdsp	sp[0x10],r9
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80012110:	50 31       	stdsp	sp[0xc],r1
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80012112:	14 97       	mov	r7,r10

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80012114:	58 0a       	cp.w	r10,0
80012116:	e0 80 01 34 	breq	8001237e <flashc_memcpy+0x282>
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
8001211a:	30 08       	mov	r8,0
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
8001211c:	40 16       	lddsp	r6,sp[0x4]
	const uint8_t* src_buf=(const uint8_t*)src;
8001211e:	16 94       	mov	r4,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80012120:	0c 93       	mov	r3,r6
80012122:	e0 61 05 98 	mov	r1,1432
80012126:	e0 13 fe 00 	andl	r3,0xfe00
void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001212a:	fe 62 14 00 	mov	r2,-125952
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8001212e:	10 95       	mov	r5,r8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012130:	30 80       	mov	r0,8
80012132:	60 09       	ld.w	r9,r0[0x0]
80012134:	50 08       	stdsp	sp[0x0],r8
80012136:	5d 19       	icall	r9
80012138:	64 19       	ld.w	r9,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001213a:	30 3c       	mov	r12,3
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8001213c:	f3 dc d0 06 	bfins	r9,r12,0x0,0x6
80012140:	50 b9       	stdsp	sp[0x2c],r9
80012142:	3a 5a       	mov	r10,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012144:	fb 6a 00 2c 	st.b	sp[44],r10
80012148:	40 b9       	lddsp	r9,sp[0x2c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8001214a:	85 19       	st.w	r2[0x4],r9
8001214c:	64 29       	ld.w	r9,r2[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8001214e:	e2 19 00 0c 	andl	r9,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012152:	83 09       	st.w	r1[0x0],r9
80012154:	60 09       	ld.w	r9,r0[0x0]
	flashc_wait_until_ready();
80012156:	5d 19       	icall	r9
80012158:	62 0a       	ld.w	r10,r1[0x0]
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8001215a:	40 08       	lddsp	r8,sp[0x0]
8001215c:	14 48       	or	r8,r10
8001215e:	06 99       	mov	r9,r3
80012160:	50 28       	stdsp	sp[0x8],r8
80012162:	e6 cb fd ff 	sub	r11,r3,-513
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
80012166:	e6 c8 ff ff 	sub	r8,r3,-1
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8001216a:	02 9e       	mov	lr,r1
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
8001216c:	c3 e8       	rjmp	800121e8 <flashc_memcpy+0xec>
8001216e:	0c 38       	cp.w	r8,r6
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012170:	5f 0c       	sreq	r12
80012172:	14 6c       	and	r12,r10
80012174:	ea 0c 18 00 	cp.b	r12,r5
80012178:	c5 01       	brne	80012218 <flashc_memcpy+0x11c>
8001217a:	f0 c3 ff ff 	sub	r3,r8,-1
8001217e:	06 36       	cp.w	r6,r3
80012180:	5f 0c       	sreq	r12
80012182:	14 6c       	and	r12,r10
80012184:	ea 0c 18 00 	cp.b	r12,r5
80012188:	c5 61       	brne	80012234 <flashc_memcpy+0x138>
8001218a:	2f f3       	sub	r3,-1
8001218c:	06 36       	cp.w	r6,r3
8001218e:	5f 0c       	sreq	r12
80012190:	14 6c       	and	r12,r10
80012192:	ea 0c 18 00 	cp.b	r12,r5
80012196:	c5 c1       	brne	8001224e <flashc_memcpy+0x152>
80012198:	2f f3       	sub	r3,-1
8001219a:	06 36       	cp.w	r6,r3
8001219c:	5f 0c       	sreq	r12
8001219e:	14 6c       	and	r12,r10
800121a0:	ea 0c 18 00 	cp.b	r12,r5
800121a4:	c6 21       	brne	80012268 <flashc_memcpy+0x16c>
800121a6:	2f f3       	sub	r3,-1
800121a8:	06 36       	cp.w	r6,r3
800121aa:	5f 0c       	sreq	r12
800121ac:	14 6c       	and	r12,r10
800121ae:	ea 0c 18 00 	cp.b	r12,r5
800121b2:	c6 81       	brne	80012282 <flashc_memcpy+0x186>
800121b4:	2f f3       	sub	r3,-1
800121b6:	06 36       	cp.w	r6,r3
800121b8:	5f 0c       	sreq	r12
800121ba:	14 6c       	and	r12,r10
800121bc:	ea 0c 18 00 	cp.b	r12,r5
800121c0:	c6 e1       	brne	8001229c <flashc_memcpy+0x1a0>
800121c2:	2f f3       	sub	r3,-1
800121c4:	06 36       	cp.w	r6,r3
800121c6:	5f 0c       	sreq	r12
800121c8:	f9 ea 00 0a 	and	r10,r12,r10
800121cc:	ea 0a 18 00 	cp.b	r10,r5
800121d0:	c7 41       	brne	800122b8 <flashc_memcpy+0x1bc>
800121d2:	2f f3       	sub	r3,-1
800121d4:	e6 ca 00 08 	sub	r10,r3,8
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
800121d8:	fa e0 00 14 	ld.d	r0,sp[20]
800121dc:	f4 e1 00 00 	st.d	r10[0],r0
800121e0:	2f 89       	sub	r9,-8
800121e2:	2f 88       	sub	r8,-8
800121e4:	16 38       	cp.w	r8,r11
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800121e6:	c7 10       	breq	800122c8 <flashc_memcpy+0x1cc>
800121e8:	f2 e0 00 00 	ld.d	r0,r9[0]
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800121ec:	fa e1 00 14 	st.d	sp[20],r0
800121f0:	58 07       	cp.w	r7,0

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
800121f2:	5f 1a       	srne	r10
800121f4:	12 36       	cp.w	r6,r9
800121f6:	5f 0c       	sreq	r12
800121f8:	f5 ec 00 0c 	and	r12,r10,r12
800121fc:	ea 0c 18 00 	cp.b	r12,r5
80012200:	cb 70       	breq	8001216e <flashc_memcpy+0x72>
80012202:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012204:	fb 6c 00 14 	st.b	sp[20],r12
80012208:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
8001220a:	30 1c       	mov	r12,1
8001220c:	5f 1a       	srne	r10
8001220e:	10 96       	mov	r6,r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012210:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012212:	ea 0c 18 00 	cp.b	r12,r5
80012216:	cb 20       	breq	8001217a <flashc_memcpy+0x7e>
80012218:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8001221a:	fb 6c 00 15 	st.b	sp[21],r12
8001221e:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
80012220:	f0 c6 ff ff 	sub	r6,r8,-1
			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
80012224:	58 07       	cp.w	r7,0
					nbytes--;
80012226:	5f 1a       	srne	r10
80012228:	30 1c       	mov	r12,1
8001222a:	0c 93       	mov	r3,r6
8001222c:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8001222e:	ea 0c 18 00 	cp.b	r12,r5
80012232:	ca c0       	breq	8001218a <flashc_memcpy+0x8e>
80012234:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012236:	fb 6c 00 16 	st.b	sp[22],r12
8001223a:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
8001223e:	20 17       	sub	r7,1
					nbytes--;
80012240:	30 1c       	mov	r12,1
80012242:	5f 1a       	srne	r10
80012244:	0c 93       	mov	r3,r6
80012246:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012248:	ea 0c 18 00 	cp.b	r12,r5
8001224c:	ca 60       	breq	80012198 <flashc_memcpy+0x9c>
8001224e:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012250:	fb 6c 00 17 	st.b	sp[23],r12
80012254:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
80012258:	20 17       	sub	r7,1
					nbytes--;
8001225a:	30 1c       	mov	r12,1
8001225c:	5f 1a       	srne	r10
8001225e:	0c 93       	mov	r3,r6
80012260:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012262:	ea 0c 18 00 	cp.b	r12,r5
80012266:	ca 00       	breq	800121a6 <flashc_memcpy+0xaa>
80012268:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8001226a:	fb 6c 00 18 	st.b	sp[24],r12
8001226e:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
80012272:	20 17       	sub	r7,1
					nbytes--;
80012274:	30 1c       	mov	r12,1
80012276:	5f 1a       	srne	r10
80012278:	0c 93       	mov	r3,r6
8001227a:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8001227c:	ea 0c 18 00 	cp.b	r12,r5
80012280:	c9 a0       	breq	800121b4 <flashc_memcpy+0xb8>
80012282:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012284:	fb 6c 00 19 	st.b	sp[25],r12
80012288:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
8001228c:	20 17       	sub	r7,1
					nbytes--;
8001228e:	30 1c       	mov	r12,1
80012290:	5f 1a       	srne	r10
80012292:	0c 93       	mov	r3,r6
80012294:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012296:	ea 0c 18 00 	cp.b	r12,r5
8001229a:	c9 40       	breq	800121c2 <flashc_memcpy+0xc6>
8001229c:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8001229e:	fb 6c 00 1a 	st.b	sp[26],r12
800122a2:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
800122a6:	20 17       	sub	r7,1
					nbytes--;
800122a8:	30 1c       	mov	r12,1
800122aa:	5f 1a       	srne	r10
800122ac:	0c 93       	mov	r3,r6
800122ae:	f9 ea 00 0a 	and	r10,r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
800122b2:	ea 0a 18 00 	cp.b	r10,r5
800122b6:	c8 e0       	breq	800121d2 <flashc_memcpy+0xd6>
800122b8:	e6 c6 ff ff 	sub	r6,r3,-1
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
800122bc:	09 3a       	ld.ub	r10,r4++

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800122be:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
800122c0:	fb 6a 00 1b 	st.b	sp[27],r10

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800122c4:	0c 93       	mov	r3,r6
					dest_add++;
					nbytes--;
800122c6:	c8 7b       	rjmp	800121d4 <flashc_memcpy+0xd8>
800122c8:	1c 91       	mov	r1,lr
800122ca:	40 40       	lddsp	r0,sp[0x10]
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800122cc:	58 00       	cp.w	r0,0
800122ce:	c1 c0       	breq	80012306 <flashc_memcpy+0x20a>
800122d0:	40 3c       	lddsp	r12,sp[0xc]
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800122d2:	58 0c       	cp.w	r12,0
800122d4:	c4 80       	breq	80012364 <flashc_memcpy+0x268>
800122d6:	30 8a       	mov	r10,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800122d8:	74 08       	ld.w	r8,r10[0x0]
800122da:	5d 18       	icall	r8
800122dc:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800122de:	30 e9       	mov	r9,14
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800122e0:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800122e4:	50 a8       	stdsp	sp[0x28],r8
800122e6:	3a 58       	mov	r8,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800122e8:	fb 68 00 28 	st.b	sp[40],r8
800122ec:	40 a8       	lddsp	r8,sp[0x28]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800122ee:	85 18       	st.w	r2[0x4],r8
800122f0:	64 28       	ld.w	r8,r2[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800122f2:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800122f6:	30 80       	mov	r0,8
	flashc_wait_until_ready();
800122f8:	83 08       	st.w	r1[0x0],r8
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800122fa:	60 08       	ld.w	r8,r0[0x0]
	flashc_wait_until_ready();
800122fc:	5d 18       	icall	r8
800122fe:	40 2c       	lddsp	r12,sp[0x8]
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
			error_status |= flashc_error_status;
80012300:	62 08       	ld.w	r8,r1[0x0]
80012302:	10 4c       	or	r12,r8
80012304:	50 2c       	stdsp	sp[0x8],r12
80012306:	40 3a       	lddsp	r10,sp[0xc]
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80012308:	58 0a       	cp.w	r10,0
8001230a:	c2 00       	breq	8001234a <flashc_memcpy+0x24e>
8001230c:	30 89       	mov	r9,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001230e:	72 08       	ld.w	r8,r9[0x0]
80012310:	5d 18       	icall	r8
80012312:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012314:	30 d9       	mov	r9,13
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012316:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8001231a:	50 88       	stdsp	sp[0x20],r8
8001231c:	3a 58       	mov	r8,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8001231e:	fb 68 00 20 	st.b	sp[32],r8
80012322:	40 88       	lddsp	r8,sp[0x20]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012324:	85 18       	st.w	r2[0x4],r8
80012326:	64 28       	ld.w	r8,r2[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012328:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8001232c:	30 80       	mov	r0,8
	flashc_wait_until_ready();
8001232e:	83 08       	st.w	r1[0x0],r8
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012330:	60 08       	ld.w	r8,r0[0x0]
	flashc_wait_until_ready();
80012332:	5d 18       	icall	r8
80012334:	62 08       	ld.w	r8,r1[0x0]
			error_status |= flashc_error_status;
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
80012336:	40 2c       	lddsp	r12,sp[0x8]
80012338:	f9 e8 10 08 	or	r8,r12,r8
8001233c:	58 07       	cp.w	r7,0

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
8001233e:	fe 91 fe f9 	brne	80012130 <flashc_memcpy+0x34>
80012342:	83 08       	st.w	r1[0x0],r8
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80012344:	40 1c       	lddsp	r12,sp[0x4]

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
80012346:	2f 4d       	sub	sp,-48
80012348:	d8 32       	popm	r0-r7,pc
8001234a:	30 8c       	mov	r12,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001234c:	78 08       	ld.w	r8,r12[0x0]
8001234e:	5d 18       	icall	r8
80012350:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012352:	30 1a       	mov	r10,1
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012354:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
80012358:	50 78       	stdsp	sp[0x1c],r8
8001235a:	3a 59       	mov	r9,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8001235c:	fb 69 00 1c 	st.b	sp[28],r9
80012360:	40 78       	lddsp	r8,sp[0x1c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012362:	ce 1b       	rjmp	80012324 <flashc_memcpy+0x228>
80012364:	30 8c       	mov	r12,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012366:	78 08       	ld.w	r8,r12[0x0]
80012368:	5d 18       	icall	r8
8001236a:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001236c:	30 2a       	mov	r10,2
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8001236e:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
80012372:	50 98       	stdsp	sp[0x24],r8
80012374:	3a 59       	mov	r9,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012376:	fb 69 00 24 	st.b	sp[36],r9
8001237a:	40 98       	lddsp	r8,sp[0x24]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8001237c:	cb 9b       	rjmp	800122ee <flashc_memcpy+0x1f2>
8001237e:	14 98       	mov	r8,r10

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80012380:	e0 61 05 98 	mov	r1,1432
80012384:	cd fb       	rjmp	80012342 <flashc_memcpy+0x246>
80012386:	d7 03       	nop

80012388 <flashc_memset64>:
80012388:	d4 31       	pushm	r0-r7,lr
8001238a:	21 9d       	sub	sp,100
8001238c:	50 7c       	stdsp	sp[0x1c],r12
8001238e:	fe fe 03 26 	ld.w	lr,pc[806]
		256,
		384,
		512,
		768,
		1024,
	};
80012392:	fa cc ff d4 	sub	r12,sp,-44
80012396:	fc e6 00 08 	ld.d	r6,lr[8]
8001239a:	f8 e7 00 08 	st.d	r12[8],r6
volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
8001239e:	30 06       	mov	r6,0
800123a0:	30 07       	mov	r7,0
800123a2:	fa e7 00 44 	st.d	sp[68],r6
		256,
		384,
		512,
		768,
		1024,
	};
800123a6:	fc e6 00 00 	ld.d	r6,lr[0]
800123aa:	f8 e7 00 00 	st.d	r12[0],r6
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
800123ae:	40 7e       	lddsp	lr,sp[0x1c]
		384,
		512,
		768,
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
800123b0:	fe 6c 14 00 	mov	r12,-125952
800123b4:	78 2c       	ld.w	r12,r12[0x8]
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
800123b6:	51 8e       	stdsp	sp[0x60],lr
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
800123b8:	f9 dc c1 a3 	bfextu	r12,r12,0xd,0x3
800123bc:	fa ce ff 9c 	sub	lr,sp,-100
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
800123c0:	50 58       	stdsp	sp[0x14],r8
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
800123c2:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
800123c6:	fc 18 80 00 	movh	r8,0x8000
800123ca:	f9 1c ff c8 	ld.uh	r12,r12[-56]
800123ce:	ab 6c       	lsl	r12,0xa
800123d0:	f8 08 00 08 	add	r8,r12,r8
800123d4:	50 88       	stdsp	sp[0x20],r8
	dest.u8ptr = dst;
800123d6:	40 74       	lddsp	r4,sp[0x1c]
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
800123d8:	58 0a       	cp.w	r10,0
800123da:	5c 2b       	cpc	r11
800123dc:	c1 80       	breq	8001240c <flashc_memset64+0x84>
800123de:	08 98       	mov	r8,r4
800123e0:	2f 98       	sub	r8,-7
800123e2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
800123e6:	fa cc ff 9c 	sub	r12,sp,-100
800123ea:	10 0c       	add	r12,r8
800123ec:	f9 6a ff e0 	st.b	r12[-32],r10

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
800123f0:	20 18       	sub	r8,1
		source.u8[i] = src;
		src >>= 8;
800123f2:	f4 0c 16 08 	lsr	r12,r10,0x8
800123f6:	f6 0e 16 08 	lsr	lr,r11,0x8
800123fa:	f9 eb 11 8c 	or	r12,r12,r11<<0x18

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
800123fe:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
		source.u8[i] = src;
		src >>= 8;
80012402:	1c 9b       	mov	r11,lr
80012404:	18 9a       	mov	r10,r12
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80012406:	58 0a       	cp.w	r10,0
80012408:	5c 2b       	cpc	r11
8001240a:	ce e1       	brne	800123e6 <flashc_memset64+0x5e>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
8001240c:	40 7b       	lddsp	r11,sp[0x1c]
8001240e:	12 0b       	add	r11,r9
80012410:	50 1b       	stdsp	sp[0x4],r11

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80012412:	40 7a       	lddsp	r10,sp[0x1c]
80012414:	e0 69 ff ff 	mov	r9,65535
80012418:	ea 19 7f ff 	orh	r9,0x7fff
8001241c:	12 3a       	cp.w	r10,r9
8001241e:	e0 8b 01 33 	brhi	80012684 <flashc_memset64+0x2fc>
		dest.u8ptr = AVR32_FLASH;
80012422:	fc 14 80 00 	movh	r4,0x8000
80012426:	51 84       	stdsp	sp[0x60],r4
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
80012428:	40 1a       	lddsp	r10,sp[0x4]
8001242a:	e0 69 02 00 	mov	r9,512
8001242e:	ea 19 80 80 	orh	r9,0x8080
80012432:	12 3a       	cp.w	r10,r9
80012434:	e0 88 01 16 	brls	80012660 <flashc_memset64+0x2d8>
80012438:	50 39       	stdsp	sp[0xc],r9
8001243a:	50 49       	stdsp	sp[0x10],r9
8001243c:	50 19       	stdsp	sp[0x4],r9
8001243e:	12 9e       	mov	lr,r9
80012440:	12 98       	mov	r8,r9
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012442:	fd de c0 03 	bfextu	lr,lr,0x0,0x3
80012446:	fa cb ff c4 	sub	r11,sp,-60
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
8001244a:	1c 18       	sub	r8,lr
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8001244c:	1c 0b       	add	r11,lr
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
8001244e:	2f 88       	sub	r8,-8
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012450:	50 6e       	stdsp	sp[0x18],lr
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80012452:	50 a8       	stdsp	sp[0x28],r8
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012454:	50 9b       	stdsp	sp[0x24],r11
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80012456:	fa e6 00 44 	ld.d	r6,sp[68]
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8001245a:	30 01       	mov	r1,0
8001245c:	e0 63 05 98 	mov	r3,1432

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012460:	30 82       	mov	r2,8
80012462:	fe 65 14 00 	mov	r5,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012466:	3a 50       	mov	r0,-91
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012468:	40 19       	lddsp	r9,sp[0x4]
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
8001246a:	08 39       	cp.w	r9,r4
8001246c:	e0 88 00 b5 	brls	800125d6 <flashc_memset64+0x24e>
80012470:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012472:	5d 18       	icall	r8
80012474:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012476:	30 3a       	mov	r10,3
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012478:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
8001247c:	51 68       	stdsp	sp[0x58],r8
8001247e:	fb 60 00 58 	st.b	sp[88],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012482:	41 68       	lddsp	r8,sp[0x58]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012484:	8b 18       	st.w	r5[0x4],r8
80012486:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012488:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8001248c:	87 08       	st.w	r3[0x0],r8
8001248e:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012490:	5d 18       	icall	r8
80012492:	66 08       	ld.w	r8,r3[0x0]

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
80012494:	08 9b       	mov	r11,r4

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80012496:	40 3e       	lddsp	lr,sp[0xc]
80012498:	e0 1b fe 00 	andl	r11,0xfe00
8001249c:	fa e7 00 3c 	st.d	sp[60],r6
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
800124a0:	f6 c9 fe 00 	sub	r9,r11,-512
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
800124a4:	fc 09 0d 4e 	min	lr,lr,r9
800124a8:	50 2e       	stdsp	sp[0x8],lr
800124aa:	10 41       	or	r1,r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
800124ac:	f1 d4 c0 09 	bfextu	r8,r4,0x0,0x9

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
800124b0:	e0 80 00 97 	breq	800125de <flashc_memset64+0x256>
800124b4:	51 7b       	stdsp	sp[0x5c],r11
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800124b6:	08 99       	mov	r9,r4
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800124b8:	e0 19 ff f8 	andl	r9,0xfff8
800124bc:	12 9a       	mov	r10,r9
800124be:	12 3b       	cp.w	r11,r9
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800124c0:	c1 52       	brcc	800124ea <flashc_memset64+0x162>
800124c2:	16 98       	mov	r8,r11
800124c4:	12 9c       	mov	r12,r9
800124c6:	16 9e       	mov	lr,r11
800124c8:	f0 ea 00 00 	ld.d	r10,r8[0]
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
800124cc:	b1 2a       	st.d	r8++,r10
800124ce:	10 39       	cp.w	r9,r8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800124d0:	fe 9b ff fc 	brhi	800124c8 <flashc_memset64+0x140>
800124d4:	fc 08 11 ff 	rsub	r8,lr,-1
800124d8:	18 9a       	mov	r10,r12
800124da:	12 08       	add	r8,r9
800124dc:	1c 9b       	mov	r11,lr
800124de:	e0 18 ff f8 	andl	r8,0xfff8
800124e2:	2f 88       	sub	r8,-8
800124e4:	fc 08 00 08 	add	r8,lr,r8
800124e8:	51 78       	stdsp	sp[0x5c],r8
800124ea:	e9 d4 c0 03 	bfextu	r4,r4,0x0,0x3
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800124ee:	c7 80       	breq	800125de <flashc_memset64+0x256>
800124f0:	41 7e       	lddsp	lr,sp[0x5c]
800124f2:	30 08       	mov	r8,0
800124f4:	50 09       	stdsp	sp[0x0],r9
800124f6:	fc 08 00 0c 	add	r12,lr,r8
800124fa:	fa c9 ff c4 	sub	r9,sp,-60
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
					flash_dword.u8[i] = *tmp.u8ptr++;
800124fe:	19 8c       	ld.ub	r12,r12[0x0]
80012500:	f2 08 0b 0c 	st.b	r9[r8],r12
80012504:	2f f8       	sub	r8,-1
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80012506:	08 38       	cp.w	r8,r4
80012508:	cf 71       	brne	800124f6 <flashc_memset64+0x16e>
8001250a:	fc 08 00 08 	add	r8,lr,r8
8001250e:	40 09       	lddsp	r9,sp[0x0]
80012510:	51 78       	stdsp	sp[0x5c],r8
80012512:	51 89       	stdsp	sp[0x60],r9
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80012514:	40 38       	lddsp	r8,sp[0xc]

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
80012516:	10 39       	cp.w	r9,r8
80012518:	c0 82       	brcc	80012528 <flashc_memset64+0x1a0>
8001251a:	12 9a       	mov	r10,r9
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
8001251c:	fa e8 00 3c 	ld.d	r8,sp[60]
80012520:	b5 28       	st.d	r10++,r8
80012522:	fa e7 00 3c 	st.d	sp[60],r6
					flash_dword.u64 = source.u64;
80012526:	51 8a       	stdsp	sp[0x60],r10
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80012528:	40 2c       	lddsp	r12,sp[0x8]
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
8001252a:	14 1c       	sub	r12,r10
8001252c:	a3 5c       	asr	r12,0x3
8001252e:	c0 90       	breq	80012540 <flashc_memset64+0x1b8>
80012530:	14 99       	mov	r9,r10
80012532:	18 98       	mov	r8,r12
80012534:	b3 26       	st.d	r9++,r6
			*dest.u64ptr++ = source.u64;
80012536:	20 18       	sub	r8,1
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80012538:	cf e1       	brne	80012534 <flashc_memset64+0x1ac>
8001253a:	f4 0c 00 3a 	add	r10,r10,r12<<0x3
8001253e:	51 8a       	stdsp	sp[0x60],r10
80012540:	40 48       	lddsp	r8,sp[0x10]
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80012542:	e0 18 fe 00 	andl	r8,0xfe00
80012546:	10 3b       	cp.w	r11,r8
80012548:	c1 f3       	brcs	80012586 <flashc_memset64+0x1fe>
8001254a:	40 1e       	lddsp	lr,sp[0x4]
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
8001254c:	51 7e       	stdsp	sp[0x5c],lr
8001254e:	40 6b       	lddsp	r11,sp[0x18]

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012550:	58 0b       	cp.w	r11,0
80012552:	c0 f0       	breq	80012570 <flashc_memset64+0x1e8>
80012554:	1c 99       	mov	r9,lr
80012556:	40 98       	lddsp	r8,sp[0x24]
80012558:	fa cc ff bc 	sub	r12,sp,-68
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
8001255c:	13 3b       	ld.ub	r11,r9++

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
						flash_dword.u8[i] = *tmp.u8ptr++;
8001255e:	10 cb       	st.b	r8++,r11
80012560:	18 38       	cp.w	r8,r12
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80012562:	cf d1       	brne	8001255c <flashc_memset64+0x1d4>
80012564:	40 a9       	lddsp	r9,sp[0x28]
80012566:	51 79       	stdsp	sp[0x5c],r9
80012568:	fa e8 00 3c 	ld.d	r8,sp[60]
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
8001256c:	b5 28       	st.d	r10++,r8
8001256e:	51 8a       	stdsp	sp[0x60],r10
80012570:	41 78       	lddsp	r8,sp[0x5c]
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80012572:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80012576:	c0 80       	breq	80012586 <flashc_memset64+0x1fe>
80012578:	f0 ea 00 00 	ld.d	r10,r8[0]
					*tmp.u64ptr = *tmp.u64ptr;
8001257c:	b1 2a       	st.d	r8++,r10
8001257e:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80012582:	cf b1       	brne	80012578 <flashc_memset64+0x1f0>
80012584:	51 78       	stdsp	sp[0x5c],r8
80012586:	41 84       	lddsp	r4,sp[0x60]
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80012588:	fc 18 80 80 	movh	r8,0x8080
8001258c:	10 34       	cp.w	r4,r8
8001258e:	e0 8b 00 2a 	brhi	800125e2 <flashc_memset64+0x25a>
80012592:	40 5e       	lddsp	lr,sp[0x14]
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80012594:	58 0e       	cp.w	lr,0
80012596:	c3 d1       	brne	80012610 <flashc_memset64+0x288>
80012598:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001259a:	5d 18       	icall	r8
8001259c:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001259e:	30 19       	mov	r9,1
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800125a0:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800125a4:	51 48       	stdsp	sp[0x50],r8
800125a6:	fb 60 00 50 	st.b	sp[80],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800125aa:	41 48       	lddsp	r8,sp[0x50]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800125ac:	8b 18       	st.w	r5[0x4],r8
800125ae:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800125b0:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800125b4:	87 08       	st.w	r3[0x0],r8
800125b6:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
800125b8:	5d 18       	icall	r8
800125ba:	66 08       	ld.w	r8,r3[0x0]
			if (erase) {
				flashc_erase_page(-1, false);
				error_status |= flashc_error_status;
			}
			flashc_write_page(-1);
			error_status |= flashc_error_status;
800125bc:	40 8b       	lddsp	r11,sp[0x20]

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800125be:	10 41       	or	r1,r8
			if (erase) {
				flashc_erase_page(-1, false);
				error_status |= flashc_error_status;
			}
			flashc_write_page(-1);
			error_status |= flashc_error_status;
800125c0:	08 3b       	cp.w	r11,r4

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800125c2:	e0 8b 00 05 	brhi	800125cc <flashc_memset64+0x244>
800125c6:	fc 18 80 80 	movh	r8,0x8080
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800125ca:	51 88       	stdsp	sp[0x60],r8
800125cc:	41 84       	lddsp	r4,sp[0x60]
			if (erase) {
				flashc_erase_user_page(false);
				error_status |= flashc_error_status;
			}
			flashc_write_user_page();
			error_status |= flashc_error_status;
800125ce:	40 19       	lddsp	r9,sp[0x4]
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800125d0:	08 39       	cp.w	r9,r4
800125d2:	fe 9b ff 4f 	brhi	80012470 <flashc_memset64+0xe8>
800125d6:	87 01       	st.w	r3[0x0],r1
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
800125d8:	40 7c       	lddsp	r12,sp[0x1c]

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
800125da:	2e 7d       	sub	sp,-100
800125dc:	d8 32       	popm	r0-r7,pc
800125de:	41 8a       	lddsp	r10,sp[0x60]
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800125e0:	ca 4b       	rjmp	80012528 <flashc_memset64+0x1a0>
800125e2:	40 5a       	lddsp	r10,sp[0x14]
			if (dest.u8ptr >= flash_array_end.u8ptr) {
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
800125e4:	58 0a       	cp.w	r10,0
800125e6:	c2 91       	brne	80012638 <flashc_memset64+0x2b0>
800125e8:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800125ea:	5d 18       	icall	r8
800125ec:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800125ee:	30 d9       	mov	r9,13
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800125f0:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800125f4:	50 b8       	stdsp	sp[0x2c],r8
800125f6:	fb 60 00 2c 	st.b	sp[44],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800125fa:	40 b8       	lddsp	r8,sp[0x2c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800125fc:	8b 18       	st.w	r5[0x4],r8
800125fe:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012600:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012604:	87 08       	st.w	r3[0x0],r8
80012606:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012608:	5d 18       	icall	r8
8001260a:	66 08       	ld.w	r8,r3[0x0]
			if (erase) {
				flashc_erase_user_page(false);
				error_status |= flashc_error_status;
			}
			flashc_write_user_page();
			error_status |= flashc_error_status;
8001260c:	10 41       	or	r1,r8
8001260e:	cd fb       	rjmp	800125cc <flashc_memset64+0x244>
80012610:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012612:	5d 18       	icall	r8
80012614:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012616:	30 29       	mov	r9,2
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012618:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8001261c:	51 58       	stdsp	sp[0x54],r8
8001261e:	fb 60 00 54 	st.b	sp[84],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012622:	41 58       	lddsp	r8,sp[0x54]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012624:	8b 18       	st.w	r5[0x4],r8
80012626:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012628:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8001262c:	87 08       	st.w	r3[0x0],r8
8001262e:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012630:	5d 18       	icall	r8
80012632:	66 08       	ld.w	r8,r3[0x0]
		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
				flashc_erase_page(-1, false);
				error_status |= flashc_error_status;
80012634:	10 41       	or	r1,r8
80012636:	cb 1b       	rjmp	80012598 <flashc_memset64+0x210>
80012638:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001263a:	5d 18       	icall	r8
8001263c:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001263e:	30 e9       	mov	r9,14
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012640:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80012644:	51 38       	stdsp	sp[0x4c],r8
80012646:	fb 60 00 4c 	st.b	sp[76],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8001264a:	41 38       	lddsp	r8,sp[0x4c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8001264c:	8b 18       	st.w	r5[0x4],r8
8001264e:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012650:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012654:	87 08       	st.w	r3[0x0],r8
80012656:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012658:	5d 18       	icall	r8
8001265a:	66 08       	ld.w	r8,r3[0x0]
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
				flashc_erase_user_page(false);
				error_status |= flashc_error_status;
8001265c:	10 41       	or	r1,r8
8001265e:	cc 5b       	rjmp	800125e8 <flashc_memset64+0x260>
80012660:	fc 1e 80 80 	movh	lr,0x8080
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
80012664:	1c 3a       	cp.w	r10,lr
80012666:	e0 8b 00 1e 	brhi	800126a2 <flashc_memset64+0x31a>
8001266a:	40 89       	lddsp	r9,sp[0x20]
8001266c:	12 3a       	cp.w	r10,r9
8001266e:	f2 0a 17 b0 	movhi	r10,r9
80012672:	14 98       	mov	r8,r10
80012674:	e0 18 ff f8 	andl	r8,0xfff8
80012678:	50 1a       	stdsp	sp[0x4],r10
8001267a:	50 38       	stdsp	sp[0xc],r8
8001267c:	50 4a       	stdsp	sp[0x10],r10
8001267e:	14 9e       	mov	lr,r10
80012680:	14 98       	mov	r8,r10
80012682:	ce 0a       	rjmp	80012442 <flashc_memset64+0xba>
80012684:	40 88       	lddsp	r8,sp[0x20]
	dest_end.u8ptr = dest.u8ptr + nbytes;

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
		dest.u8ptr = AVR32_FLASH;
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80012686:	14 38       	cp.w	r8,r10
80012688:	fe 9b fe d0 	brhi	80012428 <flashc_memset64+0xa0>
8001268c:	e0 6b ff ff 	mov	r11,65535
80012690:	ea 1b 80 7f 	orh	r11,0x807f
80012694:	16 3a       	cp.w	r10,r11
80012696:	fe 9b fe c9 	brhi	80012428 <flashc_memset64+0xa0>
8001269a:	fc 14 80 80 	movh	r4,0x8080
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8001269e:	51 84       	stdsp	sp[0x60],r4
800126a0:	cc 4a       	rjmp	80012428 <flashc_memset64+0xa0>
800126a2:	14 9b       	mov	r11,r10
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
800126a4:	50 4a       	stdsp	sp[0x10],r10
800126a6:	e0 1b ff f8 	andl	r11,0xfff8
800126aa:	14 9e       	mov	lr,r10
800126ac:	50 3b       	stdsp	sp[0xc],r11
800126ae:	40 18       	lddsp	r8,sp[0x4]
800126b0:	cc 9a       	rjmp	80012442 <flashc_memset64+0xba>
800126b2:	d7 03       	nop
800126b4:	80 02       	ld.sh	r2,r0[0x0]
800126b6:	3d 48       	mov	r8,-44

800126b8 <flashc_memset32>:
800126b8:	eb cd 40 c0 	pushm	r6-r7,lr
800126bc:	30 0e       	mov	lr,0
800126be:	16 96       	mov	r6,r11
}


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
800126c0:	1c 97       	mov	r7,lr
800126c2:	12 98       	mov	r8,r9
800126c4:	0c 9b       	mov	r11,r6
800126c6:	14 99       	mov	r9,r10
800126c8:	0e 4b       	or	r11,r7
800126ca:	0e 9a       	mov	r10,r7
800126cc:	0c 4a       	or	r10,r6
800126ce:	c5 de       	rcall	80012388 <flashc_memset64>
800126d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800126d4 <gpio_enable_pin_pull_up>:
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->puers = 1 << (pin & 0x1F);
800126d4:	30 18       	mov	r8,1
800126d6:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800126da:	a5 9c       	lsr	r12,0x5
800126dc:	a9 6c       	lsl	r12,0x8
800126de:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
800126e2:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800126e6:	5e fc       	retal	r12

800126e8 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800126e8:	f8 08 16 05 	lsr	r8,r12,0x5
800126ec:	a9 68       	lsl	r8,0x8
800126ee:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800126f2:	71 88       	ld.w	r8,r8[0x60]
800126f4:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800126f8:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800126fc:	5e fc       	retal	r12

800126fe <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800126fe:	30 18       	mov	r8,1
80012700:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012704:	a5 9c       	lsr	r12,0x5
80012706:	a9 6c       	lsl	r12,0x8
80012708:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8001270c:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80012710:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80012714:	99 18       	st.w	r12[0x4],r8
}
80012716:	5e fc       	retal	r12

80012718 <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80012718:	30 18       	mov	r8,1
8001271a:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8001271e:	a5 9c       	lsr	r12,0x5
80012720:	a9 6c       	lsl	r12,0x8
80012722:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80012726:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8001272a:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8001272e:	99 18       	st.w	r12[0x4],r8
}
80012730:	5e fc       	retal	r12

80012732 <gpio_enable_pin_glitch_filter>:
 */
void gpio_enable_pin_glitch_filter(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->gfers = 1 << (pin & 0x1F);
80012732:	30 18       	mov	r8,1
80012734:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_glitch_filter(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012738:	a5 9c       	lsr	r12,0x5
8001273a:	a9 6c       	lsl	r12,0x8
8001273c:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->gfers = 1 << (pin & 0x1F);
80012740:	f9 48 00 c4 	st.w	r12[196],r8
}
80012744:	5e fc       	retal	r12

80012746 <gpio_enable_pin_interrupt>:
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80012746:	30 1a       	mov	r10,1
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012748:	f8 08 16 05 	lsr	r8,r12,0x5

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8001274c:	f4 0c 09 49 	lsl	r9,r10,r12
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012750:	a9 68       	lsl	r8,0x8
80012752:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80012756:	f1 49 00 c4 	st.w	r8[196],r9
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
8001275a:	14 3b       	cp.w	r11,r10
8001275c:	c0 c0       	breq	80012774 <gpio_enable_pin_interrupt+0x2e>
8001275e:	c0 82       	brcc	8001276e <gpio_enable_pin_interrupt+0x28>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80012760:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80012764:	f1 49 00 b8 	st.w	r8[184],r9
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80012768:	f1 49 00 94 	st.w	r8[148],r9
8001276c:	5e fd       	retal	0
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
8001276e:	58 2b       	cp.w	r11,2
80012770:	c0 90       	breq	80012782 <gpio_enable_pin_interrupt+0x3c>
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
		gpio_port->imr1s = 1 << (pin & 0x1F);
80012772:	5e fa       	retal	r10
		gpio_port->imr0c = 1 << (pin & 0x1F);
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80012774:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80012778:	f1 49 00 b8 	st.w	r8[184],r9
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8001277c:	f1 49 00 94 	st.w	r8[148],r9
80012780:	5e fd       	retal	0
		gpio_port->imr0s = 1 << (pin & 0x1F);
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80012782:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80012786:	f1 49 00 b4 	st.w	r8[180],r9
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8001278a:	f1 49 00 94 	st.w	r8[148],r9
8001278e:	5e fd       	retal	0

80012790 <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012790:	f8 08 16 05 	lsr	r8,r12,0x5
80012794:	a9 68       	lsl	r8,0x8
80012796:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8001279a:	f0 f8 00 d0 	ld.w	r8,r8[208]
8001279e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800127a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800127a6:	5e fc       	retal	r12

800127a8 <gpio_clear_pin_interrupt_flag>:
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800127a8:	30 18       	mov	r8,1
800127aa:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800127ae:	a5 9c       	lsr	r12,0x5
800127b0:	a9 6c       	lsl	r12,0x8
800127b2:	e0 2c f0 00 	sub	r12,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800127b6:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
800127ba:	5e fc       	retal	r12

800127bc <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800127bc:	eb cd 40 c0 	pushm	r6-r7,lr
800127c0:	18 98       	mov	r8,r12
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127c2:	58 0b       	cp.w	r11,0
800127c4:	c3 60       	breq	80012830 <gpio_enable_module+0x74>
800127c6:	30 0e       	mov	lr,0
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800127c8:	30 16       	mov	r6,1
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127ca:	1c 9c       	mov	r12,lr
800127cc:	c0 d8       	rjmp	800127e6 <gpio_enable_module+0x2a>
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800127ce:	ec 07 09 4a 	lsl	r10,r6,r7
800127d2:	93 6a       	st.w	r9[0x18],r10
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800127d4:	93 aa       	st.w	r9[0x28],r10
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800127d6:	93 2a       	st.w	r9[0x8],r10
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127d8:	2f fe       	sub	lr,-1
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800127da:	30 09       	mov	r9,0
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800127dc:	12 4c       	or	r12,r9
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127de:	1c 3b       	cp.w	r11,lr
800127e0:	e0 88 00 17 	brls	8001280e <gpio_enable_module+0x52>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800127e4:	2f 88       	sub	r8,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800127e6:	70 07       	ld.w	r7,r8[0x0]
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
800127e8:	70 1a       	ld.w	r10,r8[0x4]
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800127ea:	ee 09 16 05 	lsr	r9,r7,0x5
800127ee:	a9 69       	lsl	r9,0x8
800127f0:	e0 29 f0 00 	sub	r9,61440

	/* Enable the correct function. */
	switch (function) {
800127f4:	58 1a       	cp.w	r10,1
800127f6:	c0 e0       	breq	80012812 <gpio_enable_module+0x56>
800127f8:	ce b3       	brcs	800127ce <gpio_enable_module+0x12>
800127fa:	58 2a       	cp.w	r10,2
800127fc:	c1 50       	breq	80012826 <gpio_enable_module+0x6a>
800127fe:	58 3a       	cp.w	r10,3
80012800:	c0 e0       	breq	8001281c <gpio_enable_module+0x60>
80012802:	30 19       	mov	r9,1
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80012804:	2f fe       	sub	lr,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80012806:	12 4c       	or	r12,r9
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80012808:	1c 3b       	cp.w	r11,lr
8001280a:	fe 9b ff ed 	brhi	800127e4 <gpio_enable_module+0x28>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8001280e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80012812:	f4 07 09 4a 	lsl	r10,r10,r7
80012816:	93 5a       	st.w	r9[0x14],r10
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80012818:	93 aa       	st.w	r9[0x28],r10
8001281a:	cd eb       	rjmp	800127d6 <gpio_enable_module+0x1a>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8001281c:	ec 07 09 4a 	lsl	r10,r6,r7
80012820:	93 5a       	st.w	r9[0x14],r10
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80012822:	93 9a       	st.w	r9[0x24],r10
80012824:	cd 9b       	rjmp	800127d6 <gpio_enable_module+0x1a>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80012826:	ec 07 09 4a 	lsl	r10,r6,r7
8001282a:	93 6a       	st.w	r9[0x18],r10
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8001282c:	93 9a       	st.w	r9[0x24],r10
8001282e:	cd 4b       	rjmp	800127d6 <gpio_enable_module+0x1a>
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
80012830:	16 9c       	mov	r12,r11
80012832:	ce eb       	rjmp	8001280e <gpio_enable_module+0x52>

80012834 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80012834:	c0 08       	rjmp	80012834 <_unhandled_interrupt>
80012836:	d7 03       	nop

80012838 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80012838:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
8001283c:	49 b8       	lddpc	r8,800128a8 <INTC_register_interrupt+0x70>
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8001283e:	a5 9b       	lsr	r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80012840:	f0 0b 00 38 	add	r8,r8,r11<<0x3
80012844:	70 18       	ld.w	r8,r8[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80012846:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8001284a:	58 0a       	cp.w	r10,0
8001284c:	c1 00       	breq	8001286c <INTC_register_interrupt+0x34>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
8001284e:	58 1a       	cp.w	r10,1
80012850:	c1 70       	breq	8001287e <INTC_register_interrupt+0x46>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
80012852:	58 2a       	cp.w	r10,2
80012854:	c1 f0       	breq	80012892 <INTC_register_interrupt+0x5a>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80012856:	49 69       	lddpc	r9,800128ac <INTC_register_interrupt+0x74>
80012858:	49 68       	lddpc	r8,800128b0 <INTC_register_interrupt+0x78>
8001285a:	f2 08 01 08 	sub	r8,r9,r8
8001285e:	fe 79 08 00 	mov	r9,-63488
80012862:	ea 18 c0 00 	orh	r8,0xc000
80012866:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
8001286a:	5e fc       	retal	r12
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8001286c:	fe 78 08 00 	mov	r8,-63488
80012870:	49 09       	lddpc	r9,800128b0 <INTC_register_interrupt+0x78>
80012872:	49 1a       	lddpc	r10,800128b4 <INTC_register_interrupt+0x7c>
80012874:	f4 09 01 09 	sub	r9,r10,r9
80012878:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
8001287c:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8001287e:	48 f9       	lddpc	r9,800128b8 <INTC_register_interrupt+0x80>
80012880:	48 c8       	lddpc	r8,800128b0 <INTC_register_interrupt+0x78>
80012882:	f2 08 01 08 	sub	r8,r9,r8
80012886:	fe 79 08 00 	mov	r9,-63488
8001288a:	bf a8       	sbr	r8,0x1e
8001288c:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80012890:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80012892:	48 b9       	lddpc	r9,800128bc <INTC_register_interrupt+0x84>
80012894:	48 78       	lddpc	r8,800128b0 <INTC_register_interrupt+0x78>
80012896:	f2 08 01 08 	sub	r8,r9,r8
8001289a:	fe 79 08 00 	mov	r9,-63488
8001289e:	bf b8       	sbr	r8,0x1f
800128a0:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800128a4:	5e fc       	retal	r12
800128a6:	d7 03       	nop
800128a8:	80 02       	ld.sh	r2,r0[0x0]
800128aa:	3d 58       	mov	r8,-43
800128ac:	80 02       	ld.sh	r2,r0[0x0]
800128ae:	3b 2e       	mov	lr,-78
800128b0:	80 02       	ld.sh	r2,r0[0x0]
800128b2:	3a 00       	mov	r0,-96
800128b4:	80 02       	ld.sh	r2,r0[0x0]
800128b6:	3b 04       	mov	r4,-80
800128b8:	80 02       	ld.sh	r2,r0[0x0]
800128ba:	3b 12       	mov	r2,-79
800128bc:	80 02       	ld.sh	r2,r0[0x0]
800128be:	3b 20       	mov	r0,-78

800128c0 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800128c0:	eb cd 40 e0 	pushm	r5-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800128c4:	48 f8       	lddpc	r8,80012900 <INTC_init_interrupts+0x40>
800128c6:	e3 b8 00 01 	mtsr	0x4,r8
800128ca:	48 f5       	lddpc	r5,80012904 <INTC_init_interrupts+0x44>
800128cc:	48 f7       	lddpc	r7,80012908 <INTC_init_interrupts+0x48>
800128ce:	10 15       	sub	r5,r8
800128d0:	30 0e       	mov	lr,0
800128d2:	fe cc 00 9e 	sub	r12,pc,158

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800128d6:	fe 76 08 00 	mov	r6,-63488

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800128da:	6e 0a       	ld.w	r10,r7[0x0]
800128dc:	58 0a       	cp.w	r10,0
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800128de:	c0 90       	breq	800128f0 <INTC_init_interrupts+0x30>
800128e0:	30 08       	mov	r8,0
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800128e2:	6e 1b       	ld.w	r11,r7[0x4]
800128e4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800128e8:	2f f8       	sub	r8,-1
800128ea:	10 3a       	cp.w	r10,r8
800128ec:	fe 9b ff fc 	brhi	800128e4 <INTC_init_interrupts+0x24>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800128f0:	ec 0e 09 25 	st.w	r6[lr<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800128f4:	2f 87       	sub	r7,-8
800128f6:	2f fe       	sub	lr,-1
800128f8:	59 4e       	cp.w	lr,20
800128fa:	cf 01       	brne	800128da <INTC_init_interrupts+0x1a>
800128fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012900:	80 02       	ld.sh	r2,r0[0x0]
80012902:	3a 00       	mov	r0,-96
80012904:	80 02       	ld.sh	r2,r0[0x0]
80012906:	3b 04       	mov	r4,-80
80012908:	80 02       	ld.sh	r2,r0[0x0]
8001290a:	3d 58       	mov	r8,-43

8001290c <_get_interrupt_handler>:
8001290c:	e0 68 00 83 	mov	r8,131
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80012910:	f0 0c 01 0c 	sub	r12,r8,r12
80012914:	fe 78 08 00 	mov	r8,-63488
80012918:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8001291c:	f2 ca ff c0 	sub	r10,r9,-64
80012920:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80012924:	58 0c       	cp.w	r12,0
80012926:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80012928:	48 68       	lddpc	r8,80012940 <_get_interrupt_handler+0x34>
8001292a:	f8 0c 12 00 	clz	r12,r12
8001292e:	f0 09 00 39 	add	r9,r8,r9<<0x3
80012932:	f8 0c 11 1f 	rsub	r12,r12,31
80012936:	72 18       	ld.w	r8,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80012938:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8001293c:	5e fc       	retal	r12
8001293e:	d7 03       	nop
80012940:	80 02       	ld.sh	r2,r0[0x0]
80012942:	3d 58       	mov	r8,-43

80012944 <pdca_get_handler>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012944:	30 e8       	mov	r8,14
80012946:	f0 0c 18 00 	cp.b	r12,r8
8001294a:	e0 8b 00 06 	brhi	80012956 <pdca_get_handler+0x12>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8001294e:	a7 6c       	lsl	r12,0x6
80012950:	e0 3c 00 00 	sub	r12,65536
	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
	}

	return pdca_channel;
}
80012954:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012956:	5e fe       	retal	-1

80012958 <pdca_disable>:
80012958:	30 e8       	mov	r8,14
8001295a:	f0 0c 18 00 	cp.b	r12,r8
8001295e:	e0 8b 00 08 	brhi	8001296e <pdca_disable+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012962:	a7 6c       	lsl	r12,0x6
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80012964:	30 28       	mov	r8,2

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012966:	e0 3c 00 00 	sub	r12,65536
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8001296a:	99 58       	st.w	r12[0x14],r8
}
8001296c:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
8001296e:	3f fc       	mov	r12,-1
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80012970:	30 28       	mov	r8,2
80012972:	99 58       	st.w	r12[0x14],r8
}
80012974:	5e fc       	retal	r12

80012976 <pdca_enable_interrupt_transfer_complete>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012976:	30 e8       	mov	r8,14
80012978:	f0 0c 18 00 	cp.b	r12,r8
8001297c:	e0 8b 00 08 	brhi	8001298c <pdca_enable_interrupt_transfer_complete+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012980:	a7 6c       	lsl	r12,0x6
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80012982:	30 28       	mov	r8,2

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012984:	e0 3c 00 00 	sub	r12,65536
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80012988:	99 88       	st.w	r12[0x20],r8
}
8001298a:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
8001298c:	3f fc       	mov	r12,-1
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
8001298e:	30 28       	mov	r8,2
80012990:	99 88       	st.w	r12[0x20],r8
}
80012992:	5e fc       	retal	r12

80012994 <pdca_disable_interrupt_transfer_complete>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012994:	30 e8       	mov	r8,14
80012996:	f0 0c 18 00 	cp.b	r12,r8
8001299a:	e0 88 00 0e 	brls	800129b6 <pdca_disable_interrupt_transfer_complete+0x22>
8001299e:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800129a0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800129a4:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800129a6:	30 29       	mov	r9,2
800129a8:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800129aa:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800129ac:	ed b8 00 10 	bld	r8,0x10
800129b0:	c0 20       	breq	800129b4 <pdca_disable_interrupt_transfer_complete+0x20>
      cpu_irq_enable();
800129b2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800129b4:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800129b6:	a7 6c       	lsl	r12,0x6
800129b8:	e0 3c 00 00 	sub	r12,65536
800129bc:	cf 2b       	rjmp	800129a0 <pdca_disable_interrupt_transfer_complete+0xc>

800129be <pdca_load_channel>:

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800129be:	30 e8       	mov	r8,14
800129c0:	f0 0c 18 00 	cp.b	r12,r8
800129c4:	e0 88 00 11 	brls	800129e6 <pdca_load_channel+0x28>
800129c8:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800129ca:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800129ce:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)addr;
800129d0:	99 0b       	st.w	r12[0x0],r11
	pdca_channel->tcr = size;
800129d2:	99 2a       	st.w	r12[0x8],r10
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800129d4:	e0 69 01 00 	mov	r9,256
800129d8:	99 59       	st.w	r12[0x14],r9
	pdca_channel->isr;
800129da:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800129dc:	ed b8 00 10 	bld	r8,0x10
800129e0:	c0 20       	breq	800129e4 <pdca_load_channel+0x26>
      cpu_irq_enable();
800129e2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800129e4:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800129e6:	a7 6c       	lsl	r12,0x6
800129e8:	e0 3c 00 00 	sub	r12,65536
800129ec:	ce fb       	rjmp	800129ca <pdca_load_channel+0xc>

800129ee <pdca_init_channel>:
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
800129ee:	eb cd 40 80 	pushm	r7,lr
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800129f2:	30 e8       	mov	r8,14

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800129f4:	f8 09 15 06 	lsl	r9,r12,0x6
800129f8:	e0 39 00 00 	sub	r9,65536

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800129fc:	f0 0c 18 00 	cp.b	r12,r8
80012a00:	f9 b8 0b ff 	movhi	r8,-1
80012a04:	f0 0e 17 b0 	movhi	lr,r8
80012a08:	f2 08 17 80 	movls	r8,r9
80012a0c:	f2 0e 17 80 	movls	lr,r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80012a10:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80012a14:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80012a16:	30 27       	mov	r7,2
80012a18:	9d 97       	st.w	lr[0x24],r7
	pdca_channel->isr;
80012a1a:	7c be       	ld.w	lr,lr[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80012a1c:	ed ba 00 10 	bld	r10,0x10
80012a20:	c0 20       	breq	80012a24 <pdca_init_channel+0x36>
      cpu_irq_enable();
80012a22:	d5 03       	csrf	0x10
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012a24:	30 ea       	mov	r10,14
80012a26:	f8 0a 18 00 	cp.b	r10,r12
80012a2a:	f9 b9 03 ff 	movlo	r9,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80012a2e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80012a32:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80012a34:	30 1c       	mov	r12,1
80012a36:	93 9c       	st.w	r9[0x24],r12
	pdca_channel->isr;
80012a38:	72 b9       	ld.w	r9,r9[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80012a3a:	ed ba 00 10 	bld	r10,0x10
80012a3e:	c0 20       	breq	80012a42 <pdca_init_channel+0x54>
      cpu_irq_enable();
80012a40:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80012a42:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80012a46:	d3 03       	ssrf	0x10
	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
	
	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)opt->addr;
80012a48:	76 0a       	ld.w	r10,r11[0x0]
80012a4a:	91 0a       	st.w	r8[0x0],r10
	pdca_channel->tcr = opt->size;
80012a4c:	76 1a       	ld.w	r10,r11[0x4]
80012a4e:	91 2a       	st.w	r8[0x8],r10
	pdca_channel->psr = opt->pid;
80012a50:	76 4a       	ld.w	r10,r11[0x10]
80012a52:	91 1a       	st.w	r8[0x4],r10
	pdca_channel->marr = (uint32_t)opt->r_addr;
80012a54:	76 2a       	ld.w	r10,r11[0x8]
80012a56:	91 3a       	st.w	r8[0xc],r10
	pdca_channel->tcrr = opt->r_size;
80012a58:	76 3a       	ld.w	r10,r11[0xc]
80012a5a:	91 4a       	st.w	r8[0x10],r10
	pdca_channel->mr =
80012a5c:	76 5a       	ld.w	r10,r11[0x14]
80012a5e:	91 6a       	st.w	r8[0x18],r10
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80012a60:	e0 6a 01 00 	mov	r10,256
80012a64:	91 5a       	st.w	r8[0x14],r10
	pdca_channel->isr;
80012a66:	70 b8       	ld.w	r8,r8[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80012a68:	ed b9 00 10 	bld	r9,0x10
80012a6c:	c0 20       	breq	80012a70 <pdca_init_channel+0x82>
      cpu_irq_enable();
80012a6e:	d5 03       	csrf	0x10
	
	cpu_irq_restore(flags);

	return PDCA_SUCCESS;
}
80012a70:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80012a74 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80012a74:	f8 c8 00 01 	sub	r8,r12,1
80012a78:	f0 0b 00 0b 	add	r11,r8,r11
80012a7c:	f6 0c 0d 0a 	divu	r10,r11,r12
80012a80:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80012a82:	f4 c8 00 01 	sub	r8,r10,1
80012a86:	e0 48 00 fe 	cp.w	r8,254
80012a8a:	e0 8b 00 04 	brhi	80012a92 <getBaudDiv+0x1e>
		return -1;
	}

	return baudDiv;
80012a8e:	5c 8c       	casts.h	r12
}
80012a90:	5e fc       	retal	r12

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);

	if (baudDiv <= 0 || baudDiv > 255) {
80012a92:	5e fe       	retal	-1

80012a94 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80012a94:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80012a96:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80012a98:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80012a9a:	f7 3a 00 0d 	ld.ub	r10,r11[13]
80012a9e:	f0 0a 18 00 	cp.b	r10,r8
80012aa2:	e0 88 00 04 	brls	80012aaa <spi_initMaster+0x16>
80012aa6:	30 2c       	mov	r12,2
80012aa8:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
80012aaa:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80012aac:	e0 68 00 80 	mov	r8,128
80012ab0:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80012ab2:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80012ab4:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80012ab6:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
80012aba:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80012abc:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80012ac0:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80012ac4:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80012ac8:	30 fa       	mov	r10,15
80012aca:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80012ace:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80012ad0:	d8 02       	popm	pc

80012ad2 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80012ad2:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80012ad4:	30 18       	mov	r8,1
80012ad6:	f0 0b 18 00 	cp.b	r11,r8
80012ada:	5f be       	srhi	lr
80012adc:	f0 0a 18 00 	cp.b	r10,r8
80012ae0:	5f b8       	srhi	r8
80012ae2:	1c 48       	or	r8,lr
80012ae4:	c0 a1       	brne	80012af8 <spi_selectionMode+0x26>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80012ae6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80012ae8:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80012aec:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80012af0:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80012af4:	99 18       	st.w	r12[0x4],r8
80012af6:	d8 0a       	popm	pc,r12=0
		uint8_t pcs_decode,
		uint8_t delay)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80012af8:	30 2c       	mov	r12,2
80012afa:	d8 02       	popm	pc

80012afc <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80012afc:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80012afe:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80012b00:	ea 19 00 0f 	orh	r9,0xf
80012b04:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80012b06:	78 1c       	ld.w	r12,r12[0x4]
80012b08:	e2 1c 00 04 	andl	r12,0x4,COH
80012b0c:	c0 80       	breq	80012b1c <spi_selectChip+0x20>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80012b0e:	30 e9       	mov	r9,14
80012b10:	f2 0b 18 00 	cp.b	r11,r9
80012b14:	e0 88 00 12 	brls	80012b38 <spi_selectChip+0x3c>
	} else {
		if (chip > 3) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80012b18:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80012b1a:	5e fc       	retal	r12
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80012b1c:	30 39       	mov	r9,3
80012b1e:	f2 0b 18 00 	cp.b	r11,r9
80012b22:	fe 9b ff fb 	brhi	80012b18 <spi_selectChip+0x1c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80012b26:	70 19       	ld.w	r9,r8[0x4]
80012b28:	2f 0b       	sub	r11,-16
80012b2a:	30 1a       	mov	r10,1
80012b2c:	f4 0b 09 4b 	lsl	r11,r10,r11
80012b30:	5c db       	com	r11
80012b32:	12 6b       	and	r11,r9
80012b34:	91 1b       	st.w	r8[0x4],r11
80012b36:	5e fc       	retal	r12
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80012b38:	70 19       	ld.w	r9,r8[0x4]
80012b3a:	b1 6b       	lsl	r11,0x10
80012b3c:	30 0c       	mov	r12,0
80012b3e:	ea 1b ff f0 	orh	r11,0xfff0
80012b42:	e8 1b ff ff 	orl	r11,0xffff
80012b46:	12 6b       	and	r11,r9
80012b48:	91 1b       	st.w	r8[0x4],r11
80012b4a:	5e fc       	retal	r12

80012b4c <spi_unselectChip>:

	return SPI_OK;
}

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80012b4c:	30 09       	mov	r9,0
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80012b4e:	c0 58       	rjmp	80012b58 <spi_unselectChip+0xc>
80012b50:	2f f9       	sub	r9,-1
		if (!timeout--) {
80012b52:	e0 49 3a 99 	cp.w	r9,15001
80012b56:	c0 d0       	breq	80012b70 <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80012b58:	78 48       	ld.w	r8,r12[0x10]
80012b5a:	ed b8 00 09 	bld	r8,0x9
80012b5e:	cf 91       	brne	80012b50 <spi_unselectChip+0x4>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80012b60:	78 18       	ld.w	r8,r12[0x4]
80012b62:	ea 18 00 0f 	orh	r8,0xf
80012b66:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80012b68:	fc 18 01 00 	movh	r8,0x100
80012b6c:	99 08       	st.w	r12[0x0],r8
80012b6e:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80012b70:	5e ff       	retal	1
80012b72:	d7 03       	nop

80012b74 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80012b74:	eb cd 40 fe 	pushm	r1-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012b78:	30 34       	mov	r4,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80012b7a:	16 97       	mov	r7,r11
80012b7c:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012b7e:	f7 35 00 0c 	ld.ub	r5,r11[12]
80012b82:	e8 05 18 00 	cp.b	r5,r4
80012b86:	e0 8b 00 09 	brhi	80012b98 <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
80012b8a:	f7 32 00 0b 	ld.ub	r2,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012b8e:	30 13       	mov	r3,1
80012b90:	e6 02 18 00 	cp.b	r2,r3
80012b94:	e0 88 00 05 	brls	80012b9e <spi_setupChipReg+0x2a>
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
		break;
80012b98:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80012b9a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80012b9e:	f7 31 00 08 	ld.ub	r1,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012ba2:	30 78       	mov	r8,7
80012ba4:	f0 01 18 00 	cp.b	r1,r8
80012ba8:	fe 98 ff f8 	brls	80012b98 <spi_setupChipReg+0x24>
80012bac:	31 08       	mov	r8,16
80012bae:	f0 01 18 00 	cp.b	r1,r8
80012bb2:	fe 9b ff f3 	brhi	80012b98 <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80012bb6:	14 9b       	mov	r11,r10
80012bb8:	6e 1c       	ld.w	r12,r7[0x4]
80012bba:	c5 df       	rcall	80012a74 <getBaudDiv>
80012bbc:	ce e5       	brlt	80012b98 <spi_setupChipReg+0x24>

	if (baudDiv < 0) {
80012bbe:	0a 9a       	mov	r10,r5
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80012bc0:	ec 1a 00 01 	eorl	r10,0x1
80012bc4:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80012bc6:	a1 95       	lsr	r5,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80012bc8:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80012bcc:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80012bd0:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80012bd4:	20 81       	sub	r1,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80012bd6:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80012bda:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80012bdc:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80012be0:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80012be4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80012be8:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80012bec:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80012bf0:	e6 09 18 00 	cp.b	r9,r3

	switch (options->reg) {
80012bf4:	c0 f0       	breq	80012c12 <spi_setupChipReg+0x9e>
80012bf6:	c0 b3       	brcs	80012c0c <spi_setupChipReg+0x98>
80012bf8:	30 2a       	mov	r10,2
80012bfa:	f4 09 18 00 	cp.b	r9,r10
80012bfe:	c0 d0       	breq	80012c18 <spi_setupChipReg+0xa4>
80012c00:	e8 09 18 00 	cp.b	r9,r4
80012c04:	cc a1       	brne	80012b98 <spi_setupChipReg+0x24>
80012c06:	8d f8       	st.w	r6[0x3c],r8
	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80012c08:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c0c:	8d c8       	st.w	r6[0x30],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80012c0e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c12:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80012c14:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c18:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80012c1a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c1e:	d7 03       	nop

80012c20 <spi_enable>:
80012c20:	30 18       	mov	r8,1
80012c22:	99 08       	st.w	r12[0x0],r8
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
80012c24:	5e fc       	retal	r12

80012c26 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80012c26:	30 09       	mov	r9,0
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80012c28:	c0 58       	rjmp	80012c32 <spi_write+0xc>
80012c2a:	2f f9       	sub	r9,-1
		if (!timeout--) {
80012c2c:	e0 49 3a 99 	cp.w	r9,15001
80012c30:	c0 80       	breq	80012c40 <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80012c32:	78 48       	ld.w	r8,r12[0x10]
80012c34:	ed b8 00 01 	bld	r8,0x1
80012c38:	cf 91       	brne	80012c2a <spi_write+0x4>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80012c3a:	5c 7b       	castu.h	r11
80012c3c:	99 3b       	st.w	r12[0xc],r11
80012c3e:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
		if (!timeout--) {
80012c40:	5e ff       	retal	1

80012c42 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80012c42:	30 09       	mov	r9,0
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80012c44:	c0 58       	rjmp	80012c4e <spi_read+0xc>
80012c46:	2f f9       	sub	r9,-1
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80012c48:	e0 49 3a 99 	cp.w	r9,15001
80012c4c:	c0 b0       	breq	80012c62 <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80012c4e:	78 48       	ld.w	r8,r12[0x10]
80012c50:	e2 18 02 01 	andl	r8,0x201,COH
80012c54:	e0 48 02 01 	cp.w	r8,513
80012c58:	cf 71       	brne	80012c46 <spi_read+0x4>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80012c5a:	78 28       	ld.w	r8,r12[0x8]
80012c5c:	30 0c       	mov	r12,0
80012c5e:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
80012c60:	5e fc       	retal	r12
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80012c62:	5e ff       	retal	1

80012c64 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80012c64:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80012c66:	76 09       	ld.w	r9,r11[0x0]
80012c68:	58 29       	cp.w	r9,2
80012c6a:	e0 8b 00 4b 	brhi	80012d00 <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80012c6e:	76 18       	ld.w	r8,r11[0x4]
80012c70:	10 9e       	mov	lr,r8
80012c72:	e6 1e c0 00 	andh	lr,0xc000,COH
80012c76:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80012c7a:	af ba       	sbr	r10,0xf
80012c7c:	1c 4a       	or	r10,lr
80012c7e:	10 9e       	mov	lr,r8
80012c80:	e6 1e 30 00 	andh	lr,0x3000,COH
80012c84:	1c 4a       	or	r10,lr
80012c86:	10 9e       	mov	lr,r8
80012c88:	e6 1e 0c 00 	andh	lr,0xc00,COH
80012c8c:	1c 4a       	or	r10,lr
80012c8e:	10 9e       	mov	lr,r8
80012c90:	e6 1e 03 00 	andh	lr,0x300,COH
80012c94:	1c 4a       	or	r10,lr
80012c96:	10 9e       	mov	lr,r8
80012c98:	e6 1e 00 c0 	andh	lr,0xc0,COH
80012c9c:	1c 4a       	or	r10,lr
80012c9e:	10 9e       	mov	lr,r8
80012ca0:	e6 1e 00 30 	andh	lr,0x30,COH
80012ca4:	1c 4a       	or	r10,lr
80012ca6:	10 9e       	mov	lr,r8
80012ca8:	e6 1e 00 0c 	andh	lr,0xc,COH
80012cac:	1c 4a       	or	r10,lr
80012cae:	10 9e       	mov	lr,r8
80012cb0:	e6 1e 00 03 	andh	lr,0x3,COH
80012cb4:	1c 4a       	or	r10,lr
80012cb6:	10 9e       	mov	lr,r8
80012cb8:	e2 1e 60 00 	andl	lr,0x6000,COH
80012cbc:	1c 4a       	or	r10,lr
80012cbe:	10 9e       	mov	lr,r8
80012cc0:	e2 1e 10 00 	andl	lr,0x1000,COH
80012cc4:	1c 4a       	or	r10,lr
80012cc6:	10 9e       	mov	lr,r8
80012cc8:	e2 1e 0c 00 	andl	lr,0xc00,COH
80012ccc:	1c 4a       	or	r10,lr
80012cce:	10 9e       	mov	lr,r8
80012cd0:	e2 1e 03 00 	andl	lr,0x300,COH
80012cd4:	1c 4a       	or	r10,lr
80012cd6:	10 9e       	mov	lr,r8
80012cd8:	e2 1e 00 80 	andl	lr,0x80,COH
80012cdc:	10 9b       	mov	r11,r8
80012cde:	1c 4a       	or	r10,lr
80012ce0:	e2 1b 00 08 	andl	r11,0x8,COH
80012ce4:	10 9e       	mov	lr,r8
80012ce6:	a5 69       	lsl	r9,0x4
80012ce8:	e2 1e 00 40 	andl	lr,0x40,COH
80012cec:	2f f9       	sub	r9,-1
80012cee:	1c 4a       	or	r10,lr
80012cf0:	e2 18 00 30 	andl	r8,0x30,COH
80012cf4:	f5 e8 10 08 	or	r8,r10,r8
80012cf8:	16 48       	or	r8,r11
80012cfa:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80012cfe:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80012d00:	dc 0a       	popm	pc,r12=-1

80012d02 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d02:	58 2b       	cp.w	r11,2
80012d04:	e0 8b 00 07 	brhi	80012d12 <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80012d08:	a7 6b       	lsl	r11,0x6
80012d0a:	16 0c       	add	r12,r11
80012d0c:	30 58       	mov	r8,5
80012d0e:	99 08       	st.w	r12[0x0],r8
80012d10:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d12:	5e fe       	retal	-1

80012d14 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d14:	58 2b       	cp.w	r11,2
80012d16:	e0 8b 00 07 	brhi	80012d24 <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80012d1a:	a7 6b       	lsl	r11,0x6
80012d1c:	2e 0b       	sub	r11,-32
80012d1e:	16 0c       	add	r12,r11
80012d20:	78 0c       	ld.w	r12,r12[0x0]
}
80012d22:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d24:	5e fe       	retal	-1

80012d26 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d26:	58 2b       	cp.w	r11,2
80012d28:	e0 8b 00 1a 	brhi	80012d5c <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80012d2c:	f6 08 15 04 	lsl	r8,r11,0x4
80012d30:	2f f8       	sub	r8,-1
80012d32:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80012d36:	ed b8 00 0f 	bld	r8,0xf
80012d3a:	c0 e1       	brne	80012d56 <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80012d3c:	a7 6b       	lsl	r11,0x6
80012d3e:	f8 0b 00 0b 	add	r11,r12,r11
80012d42:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80012d46:	2e 4b       	sub	r11,-28
80012d48:	76 08       	ld.w	r8,r11[0x0]
80012d4a:	e0 18 00 00 	andl	r8,0x0
80012d4e:	f9 e8 10 08 	or	r8,r12,r8
80012d52:	97 08       	st.w	r11[0x0],r8

  return value;
}
80012d54:	5e fc       	retal	r12
80012d56:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80012d5a:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d5c:	5e fe       	retal	-1

80012d5e <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80012d5e:	eb cd 40 80 	pushm	r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80012d62:	e1 be 00 00 	mfsr	lr,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d66:	58 2b       	cp.w	r11,2
80012d68:	e0 8b 00 5f 	brhi	80012e26 <tc_configure_interrupts+0xc8>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80012d6c:	74 08       	ld.w	r8,r10[0x0]
80012d6e:	10 99       	mov	r9,r8
80012d70:	e2 19 00 02 	andl	r9,0x2,COH
80012d74:	e2 18 00 fd 	andl	r8,0xfd,COH
80012d78:	12 48       	or	r8,r9
80012d7a:	f6 09 15 06 	lsl	r9,r11,0x6
80012d7e:	f8 09 00 07 	add	r7,r12,r9
80012d82:	2d c7       	sub	r7,-36
80012d84:	8f 08       	st.w	r7[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80012d86:	ee 1e 00 01 	eorh	lr,0x1
80012d8a:	fd de c2 01 	bfextu	lr,lr,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80012d8e:	c4 e1       	brne	80012e2a <tc_configure_interrupts+0xcc>
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80012d90:	a7 6b       	lsl	r11,0x6
80012d92:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012d94:	74 08       	ld.w	r8,r10[0x0]
80012d96:	f8 09 00 0a 	add	r10,r12,r9
80012d9a:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80012d9e:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012da0:	e0 6b 00 80 	mov	r11,128
80012da4:	58 07       	cp.w	r7,0
80012da6:	f9 bb 01 00 	movne	r11,0
80012daa:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80012dae:	ec 19 00 01 	eorl	r9,0x1
80012db2:	f7 e9 10 09 	or	r9,r11,r9
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80012db6:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80012dba:	f9 bb 00 40 	moveq	r11,64
80012dbe:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dc2:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80012dc4:	f7 d8 c0 a1 	bfextu	r11,r8,0x5,0x1
80012dc8:	f9 bb 00 20 	moveq	r11,32
80012dcc:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dd0:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80012dd2:	f7 d8 c0 81 	bfextu	r11,r8,0x4,0x1
80012dd6:	f9 bb 00 10 	moveq	r11,16
80012dda:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dde:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80012de0:	f7 d8 c0 61 	bfextu	r11,r8,0x3,0x1
80012de4:	f9 bb 00 08 	moveq	r11,8
80012de8:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dec:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80012dee:	f7 d8 c0 41 	bfextu	r11,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80012df2:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80012df6:	58 0b       	cp.w	r11,0
80012df8:	f9 bb 00 04 	moveq	r11,4
80012dfc:	f9 bb 01 00 	movne	r11,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80012e00:	58 08       	cp.w	r8,0
80012e02:	f9 b8 00 02 	moveq	r8,2
80012e06:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012e0a:	16 49       	or	r9,r11
80012e0c:	f3 e8 10 08 	or	r8,r9,r8
80012e10:	2d 8a       	sub	r10,-40
80012e12:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80012e14:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80012e16:	58 0e       	cp.w	lr,0
80012e18:	c0 41       	brne	80012e20 <tc_configure_interrupts+0xc2>
80012e1a:	1c 9c       	mov	r12,lr
80012e1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80012e20:	d5 03       	csrf	0x10
80012e22:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012e26:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80012e2a:	d3 03       	ssrf	0x10
80012e2c:	cb 2b       	rjmp	80012d90 <tc_configure_interrupts+0x32>

80012e2e <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80012e2e:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80012e30:	f6 08 15 04 	lsl	r8,r11,0x4
80012e34:	14 38       	cp.w	r8,r10
80012e36:	e0 8b 00 26 	brhi	80012e82 <usart_set_async_baudrate+0x54>
80012e3a:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80012e3c:	f0 09 16 01 	lsr	r9,r8,0x1
80012e40:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80012e44:	f2 08 0d 08 	divu	r8,r9,r8
80012e48:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80012e4a:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80012e4c:	f0 cb 00 01 	sub	r11,r8,1
80012e50:	e0 4b ff fe 	cp.w	r11,65534
80012e54:	e0 8b 00 1b 	brhi	80012e8a <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80012e58:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80012e5a:	e8 6b 00 00 	mov	r11,524288
80012e5e:	e4 1a ff f7 	andh	r10,0xfff7
80012e62:	e0 1a fe cf 	andl	r10,0xfecf
80012e66:	59 0e       	cp.w	lr,16
80012e68:	f6 0e 17 10 	movne	lr,r11
80012e6c:	f9 be 00 00 	moveq	lr,0
80012e70:	fd ea 10 0a 	or	r10,lr,r10
80012e74:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80012e76:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80012e7a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80012e7e:	99 88       	st.w	r12[0x20],r8
80012e80:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80012e82:	f6 08 15 03 	lsl	r8,r11,0x3
80012e86:	30 8e       	mov	lr,8
80012e88:	cd ab       	rjmp	80012e3c <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80012e8a:	da 0a       	popm	pc,r12=1

80012e8c <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80012e8c:	17 8a       	ld.ub	r10,r11[0x0]
80012e8e:	58 0a       	cp.w	r10,0
80012e90:	5e 0c       	reteq	r12
80012e92:	30 09       	mov	r9,0
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80012e94:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80012e96:	ed b8 00 01 	bld	r8,0x1
80012e9a:	c0 91       	brne	80012eac <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80012e9c:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80012ea0:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80012ea2:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80012ea4:	17 8a       	ld.ub	r10,r11[0x0]
80012ea6:	58 0a       	cp.w	r10,0
80012ea8:	cf 51       	brne	80012e92 <usart_write_line+0x6>
80012eaa:	5e fc       	retal	r12
80012eac:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80012eae:	e0 49 27 10 	cp.w	r9,10000
80012eb2:	cf 11       	brne	80012e94 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80012eb4:	2f fb       	sub	r11,-1
80012eb6:	cf 7b       	rjmp	80012ea4 <usart_write_line+0x18>

80012eb8 <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80012eb8:	eb cd 40 e0 	pushm	r5-r7,lr
80012ebc:	18 97       	mov	r7,r12
80012ebe:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80012ec0:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80012ec4:	ed b8 00 10 	bld	r8,0x10
80012ec8:	c2 e1       	brne	80012f24 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
80012eca:	3f f8       	mov	r8,-1
80012ecc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80012ece:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80012ed0:	30 08       	mov	r8,0
80012ed2:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
80012ed4:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
80012ed6:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80012ed8:	ea 68 61 0c 	mov	r8,680204
80012edc:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80012ede:	58 06       	cp.w	r6,0
80012ee0:	c2 00       	breq	80012f20 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
80012ee2:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80012ee4:	30 49       	mov	r9,4
80012ee6:	f2 08 18 00 	cp.b	r8,r9
80012eea:	e0 88 00 1b 	brls	80012f20 <usart_init_rs232+0x68>
80012eee:	30 95       	mov	r5,9
80012ef0:	ea 08 18 00 	cp.b	r8,r5
80012ef4:	e0 8b 00 16 	brhi	80012f20 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80012ef8:	0d d9       	ld.ub	r9,r6[0x5]
80012efa:	30 78       	mov	r8,7
80012efc:	f0 09 18 00 	cp.b	r9,r8
80012f00:	e0 8b 00 10 	brhi	80012f20 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
80012f04:	8c 39       	ld.sh	r9,r6[0x6]
80012f06:	e0 68 01 01 	mov	r8,257
80012f0a:	f0 09 19 00 	cp.h	r9,r8
80012f0e:	e0 8b 00 09 	brhi	80012f20 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
80012f12:	ed 39 00 08 	ld.ub	r9,r6[8]
80012f16:	30 38       	mov	r8,3
80012f18:	f0 09 18 00 	cp.b	r9,r8
80012f1c:	e0 88 00 0a 	brls	80012f30 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80012f20:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80012f24:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80012f26:	3f f8       	mov	r8,-1
80012f28:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80012f2a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80012f2c:	d5 03       	csrf	0x10
80012f2e:	cd 1b       	rjmp	80012ed0 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80012f30:	6c 0b       	ld.w	r11,r6[0x0]
80012f32:	0e 9c       	mov	r12,r7
80012f34:	c7 df       	rcall	80012e2e <usart_set_async_baudrate>
80012f36:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80012f38:	cf 40       	breq	80012f20 <usart_init_rs232+0x68>
80012f3a:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80012f3c:	ea 08 18 00 	cp.b	r8,r5
80012f40:	c2 a0       	breq	80012f94 <usart_init_rs232+0xdc>
80012f42:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80012f44:	20 58       	sub	r8,5
80012f46:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80012f4a:	8f 18       	st.w	r7[0x4],r8
80012f4c:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80012f4e:	ed 3a 00 08 	ld.ub	r10,r6[8]
80012f52:	0d d8       	ld.ub	r8,r6[0x5]
80012f54:	a9 78       	lsl	r8,0x9
80012f56:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80012f5a:	12 48       	or	r8,r9
80012f5c:	8f 18       	st.w	r7[0x4],r8
80012f5e:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80012f60:	8c 38       	ld.sh	r8,r6[0x6]
80012f62:	f2 08 19 00 	cp.h	r8,r9
80012f66:	e0 88 00 11 	brls	80012f88 <usart_init_rs232+0xd0>
80012f6a:	6e 18       	ld.w	r8,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80012f6c:	ad b8       	sbr	r8,0xd
80012f6e:	8f 18       	st.w	r7[0x4],r8
80012f70:	8c b8       	ld.uh	r8,r6[0x6]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80012f72:	20 28       	sub	r8,2
80012f74:	8f a8       	st.w	r7[0x28],r8
80012f76:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80012f78:	e0 18 ff f0 	andl	r8,0xfff0
80012f7c:	8f 18       	st.w	r7[0x4],r8
80012f7e:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80012f80:	35 08       	mov	r8,80
80012f82:	8f 08       	st.w	r7[0x0],r8
80012f84:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80012f88:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80012f8a:	5c 78       	castu.h	r8
80012f8c:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80012f90:	8f 18       	st.w	r7[0x4],r8
80012f92:	cf 2b       	rjmp	80012f76 <usart_init_rs232+0xbe>
80012f94:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80012f96:	b1 b8       	sbr	r8,0x11
80012f98:	8f 18       	st.w	r7[0x4],r8
80012f9a:	cd 9b       	rjmp	80012f4c <usart_init_rs232+0x94>

80012f9c <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80012f9c:	d4 01       	pushm	lr


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80012f9e:	18 9b       	mov	r11,r12
80012fa0:	fe 7c 14 00 	mov	r12,-60416
80012fa4:	c7 4f       	rcall	80012e8c <usart_write_line>
80012fa6:	d8 02       	popm	pc

80012fa8 <print_dbg_ulong>:

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
80012fa8:	eb cd 40 c0 	pushm	r6-r7,lr
80012fac:	20 3d       	sub	sp,12
80012fae:	30 08       	mov	r8,0
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80012fb0:	30 a9       	mov	r9,10
80012fb2:	fb 68 00 0a 	st.b	sp[10],r8
80012fb6:	1a 9b       	mov	r11,sp
  do
  {
    tmp[--i] = '0' + n % 10;
80012fb8:	e0 6e cc cd 	mov	lr,52429
80012fbc:	ea 1e cc cc 	orh	lr,0xcccc
80012fc0:	f8 0e 06 46 	mulu.d	r6,r12,lr
80012fc4:	20 19       	sub	r9,1
80012fc6:	0e 98       	mov	r8,r7
80012fc8:	a3 98       	lsr	r8,0x3
80012fca:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80012fce:	f8 0a 01 1c 	sub	r12,r12,r10<<0x1
80012fd2:	2d 0c       	sub	r12,-48
80012fd4:	f6 09 0b 0c 	st.b	r11[r9],r12
    n /= 10;
80012fd8:	10 9c       	mov	r12,r8
  } while (n);
80012fda:	58 08       	cp.w	r8,0
80012fdc:	cf 21       	brne	80012fc0 <print_dbg_ulong+0x18>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80012fde:	12 0b       	add	r11,r9
80012fe0:	fe 7c 14 00 	mov	r12,-60416
80012fe4:	c5 4f       	rcall	80012e8c <usart_write_line>
80012fe6:	2f dd       	sub	sp,-12

void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
}
80012fe8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80012fec <print_dbg_hex>:
80012fec:	d4 01       	pushm	lr
80012fee:	20 3d       	sub	sp,12
80012ff0:	49 98       	lddpc	r8,80013054 <print_dbg_hex+0x68>
80012ff2:	f8 09 16 1c 	lsr	r9,r12,0x1c

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80012ff6:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012ffa:	ba 89       	st.b	sp[0x0],r9
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80012ffc:	30 09       	mov	r9,0
80012ffe:	fb 69 00 08 	st.b	sp[8],r9
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80013002:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
80013006:	f0 09 07 09 	ld.ub	r9,r8[r9]
8001300a:	ba f9       	st.b	sp[0x7],r9
8001300c:	f3 dc c0 84 	bfextu	r9,r12,0x4,0x4
80013010:	f0 09 07 09 	ld.ub	r9,r8[r9]
80013014:	ba e9       	st.b	sp[0x6],r9
80013016:	f3 dc c1 04 	bfextu	r9,r12,0x8,0x4
8001301a:	f0 09 07 09 	ld.ub	r9,r8[r9]
8001301e:	ba d9       	st.b	sp[0x5],r9
80013020:	f3 dc c1 84 	bfextu	r9,r12,0xc,0x4
80013024:	f0 09 07 09 	ld.ub	r9,r8[r9]
80013028:	ba c9       	st.b	sp[0x4],r9
8001302a:	f3 dc c2 04 	bfextu	r9,r12,0x10,0x4
8001302e:	f0 09 07 09 	ld.ub	r9,r8[r9]
80013032:	ba b9       	st.b	sp[0x3],r9
80013034:	f3 dc c2 84 	bfextu	r9,r12,0x14,0x4
80013038:	f9 dc c3 04 	bfextu	r12,r12,0x18,0x4
8001303c:	f0 09 07 09 	ld.ub	r9,r8[r9]
80013040:	f0 0c 07 08 	ld.ub	r8,r8[r12]
80013044:	ba a9       	st.b	sp[0x2],r9
80013046:	ba 98       	st.b	sp[0x1],r8


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80013048:	1a 9b       	mov	r11,sp
8001304a:	fe 7c 14 00 	mov	r12,-60416
8001304e:	c1 ff       	rcall	80012e8c <usart_write_line>
80013050:	2f dd       	sub	sp,-12

void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
}
80013052:	d8 02       	popm	pc
80013054:	80 02       	ld.sh	r2,r0[0x0]
80013056:	3d f8       	mov	r8,-33

80013058 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80013058:	eb cd 40 c0 	pushm	r6-r7,lr
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
8001305c:	e0 69 2c a2 	mov	r9,11426
80013060:	e0 68 2c a4 	mov	r8,11428
80013064:	13 8b       	ld.ub	r11,r9[0x0]
80013066:	11 dc       	ld.ub	r12,r8[0x5]
80013068:	30 39       	mov	r9,3
8001306a:	f2 0b 18 00 	cp.b	r11,r9
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
8001306e:	c4 60       	breq	800130fa <sd_mmc_spi_get_capacity+0xa2>
80013070:	11 fe       	ld.ub	lr,r8[0x7]
80013072:	f1 37 00 08 	ld.ub	r7,r8[8]
80013076:	a7 87       	lsr	r7,0x6
80013078:	ee 0e 00 27 	add	r7,r7,lr<<0x2
8001307c:	11 ee       	ld.ub	lr,r8[0x6]
8001307e:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
    capacity = (uint64_t)c_size << 19;
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80013082:	ab 6e       	lsl	lr,0xa
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80013084:	f1 39 00 0a 	ld.ub	r9,r8[10]
80013088:	1c 07       	add	r7,lr
8001308a:	f2 06 16 07 	lsr	r6,r9,0x7
8001308e:	2f f7       	sub	r7,-1
80013090:	f1 3e 00 09 	ld.ub	lr,r8[9]
80013094:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80013098:	ec 0e 00 1e 	add	lr,r6,lr<<0x1
8001309c:	2f ee       	sub	lr,-2
8001309e:	ee 0e 09 4e 	lsl	lr,r7,lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
800130a2:	20 1e       	sub	lr,1
800130a4:	e0 6a 2c 9c 	mov	r10,11420
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
800130a8:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800130ac:	95 0e       	st.w	r10[0x0],lr
800130ae:	74 0e       	ld.w	lr,r10[0x0]
800130b0:	2f fe       	sub	lr,-1
800130b2:	fc 0c 09 4e 	lsl	lr,lr,r12
800130b6:	1c 96       	mov	r6,lr
800130b8:	30 0e       	mov	lr,0
800130ba:	1c 97       	mov	r7,lr
    capacity_mult = 0;
800130bc:	e0 6e 2c 90 	mov	lr,11408
800130c0:	fc e7 00 00 	st.d	lr[0],r6
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800130c4:	e0 67 2c 98 	mov	r7,11416
800130c8:	30 0e       	mov	lr,0
800130ca:	ae 0e       	st.h	r7[0x0],lr
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800130cc:	30 97       	mov	r7,9
800130ce:	ee 0c 18 00 	cp.b	r12,r7
800130d2:	e0 88 00 07 	brls	800130e0 <sd_mmc_spi_get_capacity+0x88>
    }
  }
  if (card_type == MMC_CARD)
800130d6:	74 0e       	ld.w	lr,r10[0x0]
800130d8:	20 9c       	sub	r12,9
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800130da:	fc 0c 09 4c 	lsl	r12,lr,r12
800130de:	95 0c       	st.w	r10[0x0],r12
800130e0:	58 0b       	cp.w	r11,0
800130e2:	c3 51       	brne	8001314c <sd_mmc_spi_get_capacity+0xf4>
800130e4:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
800130e8:	f1 38 00 0b 	ld.ub	r8,r8[11]
800130ec:	f3 d9 c0 45 	bfextu	r9,r9,0x2,0x5
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
800130f0:	a5 98       	lsr	r8,0x5
800130f2:	f1 ea 10 38 	or	r8,r8,r10<<0x3
800130f6:	2f f8       	sub	r8,-1
800130f8:	c3 28       	rjmp	8001315c <sd_mmc_spi_get_capacity+0x104>
800130fa:	f1 3e 00 08 	ld.ub	lr,r8[8]
800130fe:	f1 39 00 09 	ld.ub	r9,r8[9]
80013102:	f3 ee 10 89 	or	r9,r9,lr<<0x8
    ++c_size;
80013106:	11 fe       	ld.ub	lr,r8[0x7]
    capacity = (uint64_t)c_size << 19;
80013108:	fd de c0 06 	bfextu	lr,lr,0x0,0x6
8001310c:	f3 ee 11 0e 	or	lr,r9,lr<<0x10
80013110:	2f fe       	sub	lr,-1
80013112:	fc 09 16 0d 	lsr	r9,lr,0xd
80013116:	fc 0a 15 13 	lsl	r10,lr,0x13
    capacity_mult = (c_size >> 13) & 0x01FF;
8001311a:	e0 6c 2c 90 	mov	r12,11408
8001311e:	12 9b       	mov	r11,r9
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80013120:	f8 eb 00 00 	st.d	r12[0],r10
80013124:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80013128:	e0 69 2c 98 	mov	r9,11416
8001312c:	b2 0a       	st.h	r9[0x0],r10
8001312e:	f8 ea 00 00 	ld.d	r10,r12[0]
80013132:	92 0c       	ld.sh	r12,r9[0x0]
80013134:	f4 09 16 09 	lsr	r9,r10,0x9
80013138:	b7 7c       	lsl	r12,0x17
8001313a:	f3 eb 11 79 	or	r9,r9,r11<<0x17
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
8001313e:	20 19       	sub	r9,1
80013140:	18 09       	add	r9,r12
80013142:	e0 6a 2c 9c 	mov	r10,11420
80013146:	95 09       	st.w	r10[0x0],r9
80013148:	f1 39 00 0a 	ld.ub	r9,r8[10]
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
8001314c:	f1 38 00 0b 	ld.ub	r8,r8[11]
80013150:	a7 98       	lsr	r8,0x7
80013152:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
}
80013156:	f0 09 00 19 	add	r9,r8,r9<<0x1
8001315a:	30 18       	mov	r8,1
8001315c:	2f f9       	sub	r9,-1
8001315e:	b1 39       	mul	r9,r8
80013160:	e0 68 2c 9a 	mov	r8,11418
80013164:	b0 09       	st.h	r8[0x0],r9
80013166:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001316a:	d7 03       	nop

8001316c <sd_mmc_spi_write_close>:
8001316c:	5e fc       	retal	r12
8001316e:	d7 03       	nop

80013170 <sd_mmc_spi_read_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA read transfer
//! page programming.
//!
void sd_mmc_spi_read_close_PDCA (void)
{
80013170:	d4 01       	pushm	lr

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80013172:	e0 6b 00 ff 	mov	r11,255
80013176:	fe 7c 28 00 	mov	r12,-55296
8001317a:	fe b0 fd 56 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
8001317e:	e0 6b 00 ff 	mov	r11,255
80013182:	fe 7c 28 00 	mov	r12,-55296
80013186:	fe b0 fd 50 	rcall	80012c26 <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
8001318a:	e0 6b 00 ff 	mov	r11,255
8001318e:	fe 7c 28 00 	mov	r12,-55296
80013192:	fe b0 fd 4a 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80013196:	e0 6b 00 ff 	mov	r11,255
8001319a:	fe 7c 28 00 	mov	r12,-55296
8001319e:	fe b0 fd 44 	rcall	80012c26 <spi_write>

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800131a2:	30 2b       	mov	r11,2
800131a4:	fe 7c 28 00 	mov	r12,-55296
800131a8:	fe b0 fc d2 	rcall	80012b4c <spi_unselectChip>

}
800131ac:	d8 02       	popm	pc
800131ae:	d7 03       	nop

800131b0 <sd_mmc_spi_wait_not_busy>:
800131b0:	d4 21       	pushm	r4-r7,lr
800131b2:	20 1d       	sub	sp,4
800131b4:	30 2b       	mov	r11,2
800131b6:	fe 7c 28 00 	mov	r12,-55296
bool sd_mmc_spi_wait_not_busy(void)
{
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800131ba:	fa c6 ff fe 	sub	r6,sp,-2
800131be:	fe b0 fc 9f 	rcall	80012afc <spi_selectChip>
800131c2:	e0 65 2c b4 	mov	r5,11444
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131c6:	30 07       	mov	r7,0
800131c8:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
800131ca:	c0 98       	rjmp	800131dc <sd_mmc_spi_wait_not_busy+0x2c>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131cc:	1b b8       	ld.ub	r8,sp[0x3]
800131ce:	aa 88       	st.b	r5[0x0],r8
800131d0:	e8 08 18 00 	cp.b	r8,r4
  {
    retry++;
    if (retry == 200000)
800131d4:	c1 40       	breq	800131fc <sd_mmc_spi_wait_not_busy+0x4c>
800131d6:	e2 57 0d 40 	cp.w	r7,200000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800131da:	c1 80       	breq	8001320a <sd_mmc_spi_wait_not_busy+0x5a>
800131dc:	e0 6b 00 ff 	mov	r11,255
800131e0:	fe 7c 28 00 	mov	r12,-55296
800131e4:	fe b0 fd 21 	rcall	80012c26 <spi_write>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131e8:	0c 9b       	mov	r11,r6
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800131ea:	2f f7       	sub	r7,-1
800131ec:	fe 7c 28 00 	mov	r12,-55296
800131f0:	fe b0 fd 29 	rcall	80012c42 <spi_read>
800131f4:	58 1c       	cp.w	r12,1
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131f6:	ce b1       	brne	800131cc <sd_mmc_spi_wait_not_busy+0x1c>
800131f8:	3f f8       	mov	r8,-1
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800131fa:	aa 88       	st.b	r5[0x0],r8
800131fc:	30 2b       	mov	r11,2
800131fe:	fe 7c 28 00 	mov	r12,-55296
80013202:	fe b0 fc a5 	rcall	80012b4c <spi_unselectChip>
80013206:	2f fd       	sub	sp,-4
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80013208:	da 2a       	popm	r4-r7,pc,r12=1
8001320a:	30 2b       	mov	r11,2
8001320c:	fe 7c 28 00 	mov	r12,-55296
80013210:	fe b0 fc 9e 	rcall	80012b4c <spi_unselectChip>
80013214:	2f fd       	sub	sp,-4
80013216:	d8 2a       	popm	r4-r7,pc,r12=0

80013218 <sd_mmc_spi_write_open>:
80013218:	d4 01       	pushm	lr
8001321a:	e0 68 06 88 	mov	r8,1672
8001321e:	a9 7c       	lsl	r12,0x9
80013220:	91 0c       	st.w	r8[0x0],r12
80013222:	cc 7f       	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013224:	d8 02       	popm	pc
80013226:	d7 03       	nop

80013228 <sd_mmc_spi_command>:
80013228:	eb cd 40 e0 	pushm	r5-r7,lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
}
8001322c:	20 1d       	sub	sp,4
8001322e:	16 97       	mov	r7,r11
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80013230:	18 96       	mov	r6,r12
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80013232:	e0 6b 00 ff 	mov	r11,255
80013236:	fe 7c 28 00 	mov	r12,-55296
8001323a:	fe b0 fc f6 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
8001323e:	fe 7c 28 00 	mov	r12,-55296
80013242:	0c 9b       	mov	r11,r6
80013244:	a7 ab       	sbr	r11,0x6
80013246:	5c 5b       	castu.b	r11
80013248:	fe b0 fc ef 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8001324c:	ee 0b 16 18 	lsr	r11,r7,0x18
80013250:	fe 7c 28 00 	mov	r12,-55296
80013254:	fe b0 fc e9 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg>>16);
80013258:	ee 0b 16 10 	lsr	r11,r7,0x10
8001325c:	fe 7c 28 00 	mov	r12,-55296
80013260:	fe b0 fc e3 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg>>8 );
80013264:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80013268:	fe 7c 28 00 	mov	r12,-55296
8001326c:	fe b0 fc dd 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg    );
80013270:	0e 9b       	mov	r11,r7
80013272:	fe 7c 28 00 	mov	r12,-55296
80013276:	5c 7b       	castu.h	r11
80013278:	fe b0 fc d7 	rcall	80012c26 <spi_write>
  switch(command)
8001327c:	30 08       	mov	r8,0
8001327e:	f0 06 18 00 	cp.b	r6,r8
80013282:	e0 80 00 ec 	breq	8001345a <sd_mmc_spi_command+0x232>
80013286:	30 88       	mov	r8,8
80013288:	f0 06 18 00 	cp.b	r6,r8
8001328c:	e0 80 00 ee 	breq	80013468 <sd_mmc_spi_command+0x240>
         break;
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
         break;
      default:
         spi_write(SD_MMC_SPI, 0xff);
80013290:	e0 6b 00 ff 	mov	r11,255
80013294:	fe 7c 28 00 	mov	r12,-55296
80013298:	fe b0 fc c7 	rcall	80012c26 <spi_write>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001329c:	e0 6b 00 ff 	mov	r11,255

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
800132a0:	e0 67 2c b4 	mov	r7,11444
800132a4:	3f f5       	mov	r5,-1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132a6:	fe 7c 28 00 	mov	r12,-55296

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
800132aa:	ae 85       	st.b	r7[0x0],r5
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132ac:	fe b0 fc bd 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800132b0:	fa c6 ff fe 	sub	r6,sp,-2
800132b4:	fe 7c 28 00 	mov	r12,-55296
800132b8:	0c 9b       	mov	r11,r6
800132ba:	fe b0 fc c4 	rcall	80012c42 <spi_read>
800132be:	58 1c       	cp.w	r12,1
800132c0:	e0 80 00 db 	breq	80013476 <sd_mmc_spi_command+0x24e>
     return 0xFF;
   return data_read;
800132c4:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800132c6:	ae 8c       	st.b	r7[0x0],r12
800132c8:	ea 0c 18 00 	cp.b	r12,r5
800132cc:	e0 81 00 c4 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132d0:	e0 6b 00 ff 	mov	r11,255
800132d4:	fe 7c 28 00 	mov	r12,-55296
800132d8:	fe b0 fc a7 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800132dc:	0c 9b       	mov	r11,r6
800132de:	fe 7c 28 00 	mov	r12,-55296
800132e2:	fe b0 fc b0 	rcall	80012c42 <spi_read>
800132e6:	58 1c       	cp.w	r12,1
800132e8:	e0 80 00 c9 	breq	8001347a <sd_mmc_spi_command+0x252>
     return 0xFF;
   return data_read;
800132ec:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800132ee:	ae 8c       	st.b	r7[0x0],r12
800132f0:	3f f8       	mov	r8,-1
800132f2:	f0 0c 18 00 	cp.b	r12,r8
800132f6:	e0 81 00 af 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132fa:	e0 6b 00 ff 	mov	r11,255
800132fe:	fe 7c 28 00 	mov	r12,-55296
80013302:	fe b0 fc 92 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013306:	0c 9b       	mov	r11,r6
80013308:	fe 7c 28 00 	mov	r12,-55296
8001330c:	fe b0 fc 9b 	rcall	80012c42 <spi_read>
80013310:	58 1c       	cp.w	r12,1
80013312:	e0 80 00 b7 	breq	80013480 <sd_mmc_spi_command+0x258>
     return 0xFF;
   return data_read;
80013316:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013318:	ae 8c       	st.b	r7[0x0],r12
8001331a:	3f f8       	mov	r8,-1
8001331c:	f0 0c 18 00 	cp.b	r12,r8
80013320:	e0 81 00 9a 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013324:	e0 6b 00 ff 	mov	r11,255
80013328:	fe 7c 28 00 	mov	r12,-55296
8001332c:	fe b0 fc 7d 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013330:	0c 9b       	mov	r11,r6
80013332:	fe 7c 28 00 	mov	r12,-55296
80013336:	fe b0 fc 86 	rcall	80012c42 <spi_read>
8001333a:	58 1c       	cp.w	r12,1
8001333c:	e0 80 00 a5 	breq	80013486 <sd_mmc_spi_command+0x25e>
     return 0xFF;
   return data_read;
80013340:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013342:	ae 8c       	st.b	r7[0x0],r12
80013344:	3f f8       	mov	r8,-1
80013346:	f0 0c 18 00 	cp.b	r12,r8
8001334a:	e0 81 00 85 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001334e:	e0 6b 00 ff 	mov	r11,255
80013352:	fe 7c 28 00 	mov	r12,-55296
80013356:	fe b0 fc 68 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001335a:	0c 9b       	mov	r11,r6
8001335c:	fe 7c 28 00 	mov	r12,-55296
80013360:	fe b0 fc 71 	rcall	80012c42 <spi_read>
80013364:	58 1c       	cp.w	r12,1
80013366:	e0 80 00 93 	breq	8001348c <sd_mmc_spi_command+0x264>
     return 0xFF;
   return data_read;
8001336a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8001336c:	ae 8c       	st.b	r7[0x0],r12
8001336e:	3f f8       	mov	r8,-1
80013370:	f0 0c 18 00 	cp.b	r12,r8
80013374:	c7 01       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013376:	e0 6b 00 ff 	mov	r11,255
8001337a:	fe 7c 28 00 	mov	r12,-55296
8001337e:	fe b0 fc 54 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013382:	0c 9b       	mov	r11,r6
80013384:	fe 7c 28 00 	mov	r12,-55296
80013388:	fe b0 fc 5d 	rcall	80012c42 <spi_read>
8001338c:	58 1c       	cp.w	r12,1
8001338e:	e0 80 00 82 	breq	80013492 <sd_mmc_spi_command+0x26a>
     return 0xFF;
   return data_read;
80013392:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013394:	ae 8c       	st.b	r7[0x0],r12
80013396:	3f f8       	mov	r8,-1
80013398:	f0 0c 18 00 	cp.b	r12,r8
8001339c:	c5 c1       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001339e:	e0 6b 00 ff 	mov	r11,255
800133a2:	fe 7c 28 00 	mov	r12,-55296
800133a6:	fe b0 fc 40 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800133aa:	0c 9b       	mov	r11,r6
800133ac:	fe 7c 28 00 	mov	r12,-55296
800133b0:	fe b0 fc 49 	rcall	80012c42 <spi_read>
800133b4:	58 1c       	cp.w	r12,1
800133b6:	c7 10       	breq	80013498 <sd_mmc_spi_command+0x270>
     return 0xFF;
   return data_read;
800133b8:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800133ba:	ae 8c       	st.b	r7[0x0],r12
800133bc:	3f f8       	mov	r8,-1
800133be:	f0 0c 18 00 	cp.b	r12,r8
800133c2:	c4 91       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800133c4:	e0 6b 00 ff 	mov	r11,255
800133c8:	fe 7c 28 00 	mov	r12,-55296
800133cc:	fe b0 fc 2d 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800133d0:	0c 9b       	mov	r11,r6
800133d2:	fe 7c 28 00 	mov	r12,-55296
800133d6:	fe b0 fc 36 	rcall	80012c42 <spi_read>
800133da:	58 1c       	cp.w	r12,1
800133dc:	c6 10       	breq	8001349e <sd_mmc_spi_command+0x276>
     return 0xFF;
   return data_read;
800133de:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800133e0:	ae 8c       	st.b	r7[0x0],r12
800133e2:	3f f8       	mov	r8,-1
800133e4:	f0 0c 18 00 	cp.b	r12,r8
800133e8:	c3 61       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800133ea:	e0 6b 00 ff 	mov	r11,255
800133ee:	fe 7c 28 00 	mov	r12,-55296
800133f2:	fe b0 fc 1a 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800133f6:	0c 9b       	mov	r11,r6
800133f8:	fe 7c 28 00 	mov	r12,-55296
800133fc:	fe b0 fc 23 	rcall	80012c42 <spi_read>
80013400:	58 1c       	cp.w	r12,1
80013402:	c5 10       	breq	800134a4 <sd_mmc_spi_command+0x27c>
     return 0xFF;
   return data_read;
80013404:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013406:	ae 8c       	st.b	r7[0x0],r12
80013408:	3f f8       	mov	r8,-1
8001340a:	f0 0c 18 00 	cp.b	r12,r8
8001340e:	c2 31       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013410:	e0 6b 00 ff 	mov	r11,255
80013414:	fe 7c 28 00 	mov	r12,-55296
80013418:	fe b0 fc 07 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001341c:	0c 9b       	mov	r11,r6
8001341e:	fe 7c 28 00 	mov	r12,-55296
80013422:	fe b0 fc 10 	rcall	80012c42 <spi_read>
80013426:	58 1c       	cp.w	r12,1
80013428:	c4 10       	breq	800134aa <sd_mmc_spi_command+0x282>
     return 0xFF;
   return data_read;
8001342a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8001342c:	ae 8c       	st.b	r7[0x0],r12
8001342e:	3f f8       	mov	r8,-1
80013430:	f0 0c 18 00 	cp.b	r12,r8
80013434:	c1 01       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013436:	e0 6b 00 ff 	mov	r11,255
8001343a:	fe 7c 28 00 	mov	r12,-55296
8001343e:	fe b0 fb f4 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013442:	0c 9b       	mov	r11,r6
80013444:	fe 7c 28 00 	mov	r12,-55296
80013448:	fe b0 fb fd 	rcall	80012c42 <spi_read>
8001344c:	58 1c       	cp.w	r12,1
8001344e:	c3 10       	breq	800134b0 <sd_mmc_spi_command+0x288>
     return 0xFF;
   return data_read;
80013450:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013452:	ae 8c       	st.b	r7[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80013454:	2f fd       	sub	sp,-4
80013456:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  spi_write(SD_MMC_SPI, arg>>8 );
  spi_write(SD_MMC_SPI, arg    );
  switch(command)
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
8001345a:	e0 6b 00 95 	mov	r11,149
8001345e:	fe 7c 28 00 	mov	r12,-55296
80013462:	fe b0 fb e2 	rcall	80012c26 <spi_write>
         break;
80013466:	c1 bb       	rjmp	8001329c <sd_mmc_spi_command+0x74>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
80013468:	e0 6b 00 87 	mov	r11,135
8001346c:	fe 7c 28 00 	mov	r12,-55296
80013470:	fe b0 fb db 	rcall	80012c26 <spi_write>
         break;
80013474:	c1 4b       	rjmp	8001329c <sd_mmc_spi_command+0x74>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013476:	ae 85       	st.b	r7[0x0],r5
80013478:	c2 cb       	rjmp	800132d0 <sd_mmc_spi_command+0xa8>
8001347a:	3f f8       	mov	r8,-1
8001347c:	ae 88       	st.b	r7[0x0],r8
8001347e:	c3 eb       	rjmp	800132fa <sd_mmc_spi_command+0xd2>
80013480:	3f f8       	mov	r8,-1
80013482:	ae 88       	st.b	r7[0x0],r8
80013484:	c5 0b       	rjmp	80013324 <sd_mmc_spi_command+0xfc>
80013486:	3f f8       	mov	r8,-1
80013488:	ae 88       	st.b	r7[0x0],r8
8001348a:	c6 2b       	rjmp	8001334e <sd_mmc_spi_command+0x126>
8001348c:	3f f8       	mov	r8,-1
8001348e:	ae 88       	st.b	r7[0x0],r8
80013490:	c7 3b       	rjmp	80013376 <sd_mmc_spi_command+0x14e>
80013492:	3f f8       	mov	r8,-1
80013494:	ae 88       	st.b	r7[0x0],r8
80013496:	c8 4b       	rjmp	8001339e <sd_mmc_spi_command+0x176>
80013498:	3f f8       	mov	r8,-1
8001349a:	ae 88       	st.b	r7[0x0],r8
8001349c:	c9 4b       	rjmp	800133c4 <sd_mmc_spi_command+0x19c>
8001349e:	3f f8       	mov	r8,-1
800134a0:	ae 88       	st.b	r7[0x0],r8
800134a2:	ca 4b       	rjmp	800133ea <sd_mmc_spi_command+0x1c2>
800134a4:	3f f8       	mov	r8,-1
800134a6:	ae 88       	st.b	r7[0x0],r8
800134a8:	cb 4b       	rjmp	80013410 <sd_mmc_spi_command+0x1e8>
800134aa:	3f f8       	mov	r8,-1
800134ac:	ae 88       	st.b	r7[0x0],r8
800134ae:	cc 4b       	rjmp	80013436 <sd_mmc_spi_command+0x20e>
800134b0:	3f f8       	mov	r8,-1
800134b2:	e0 6c 00 ff 	mov	r12,255
800134b6:	ae 88       	st.b	r7[0x0],r8
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800134b8:	2f fd       	sub	sp,-4
800134ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800134be:	d7 03       	nop

800134c0 <sd_mmc_spi_read_open_PDCA>:
800134c0:	d4 21       	pushm	r4-r7,lr
800134c2:	20 1d       	sub	sp,4
800134c4:	a9 7c       	lsl	r12,0x9
800134c6:	e0 67 06 88 	mov	r7,1672
800134ca:	8f 0c       	st.w	r7[0x0],r12

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;                    // gl_ptr_mem = pos * 512

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800134cc:	c7 2e       	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
800134ce:	c0 31       	brne	800134d4 <sd_mmc_spi_read_open_PDCA+0x14>
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  return true;   // Read done.
}
800134d0:	2f fd       	sub	sp,-4
800134d2:	d8 22       	popm	r4-r7,pc
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;


  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);          // select SD_MMC_SPI
800134d4:	30 2b       	mov	r11,2
800134d6:	fe 7c 28 00 	mov	r12,-55296
800134da:	fe b0 fb 11 	rcall	80012afc <spi_selectChip>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
800134de:	e0 68 2c a2 	mov	r8,11426
800134e2:	11 89       	ld.ub	r9,r8[0x0]
800134e4:	30 38       	mov	r8,3
800134e6:	f0 09 18 00 	cp.b	r9,r8
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
800134ea:	c3 90       	breq	8001355c <sd_mmc_spi_read_open_PDCA+0x9c>
800134ec:	6e 0b       	ld.w	r11,r7[0x0]
800134ee:	31 1c       	mov	r12,17
800134f0:	e0 66 2c b4 	mov	r6,11444
800134f4:	c9 ae       	rcall	80013228 <sd_mmc_spi_command>
  }

  // check for valid response
  if (r1 != 0x00)
800134f6:	ac 8c       	st.b	r6[0x0],r12
800134f8:	58 0c       	cp.w	r12,0
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
       return false;
800134fa:	c2 81       	brne	8001354a <sd_mmc_spi_read_open_PDCA+0x8a>
800134fc:	18 97       	mov	r7,r12
800134fe:	fa c5 ff fe 	sub	r5,sp,-2
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013502:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80013504:	c0 a8       	rjmp	80013518 <sd_mmc_spi_read_open_PDCA+0x58>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013506:	1b b8       	ld.ub	r8,sp[0x3]
80013508:	ac 88       	st.b	r6[0x0],r8
8001350a:	e8 08 18 00 	cp.b	r8,r4

  // check for valid response
  if (r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
8001350e:	c1 41       	brne	80013536 <sd_mmc_spi_read_open_PDCA+0x76>
  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
80013510:	2f f7       	sub	r7,-1
80013512:	e0 47 75 30 	cp.w	r7,30000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013516:	c1 a0       	breq	8001354a <sd_mmc_spi_read_open_PDCA+0x8a>
80013518:	e0 6b 00 ff 	mov	r11,255
8001351c:	fe 7c 28 00 	mov	r12,-55296
80013520:	fe b0 fb 83 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013524:	0a 9b       	mov	r11,r5
80013526:	fe 7c 28 00 	mov	r12,-55296
8001352a:	fe b0 fb 8c 	rcall	80012c42 <spi_read>
8001352e:	58 1c       	cp.w	r12,1
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013530:	ce b1       	brne	80013506 <sd_mmc_spi_read_open_PDCA+0x46>
80013532:	ac 84       	st.b	r6[0x0],r4
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80013534:	ce eb       	rjmp	80013510 <sd_mmc_spi_read_open_PDCA+0x50>
80013536:	3f e9       	mov	r9,-2
80013538:	f2 08 18 00 	cp.b	r8,r9
  {
    spi_write(SD_MMC_SPI,0xFF);
8001353c:	c0 e0       	breq	80013558 <sd_mmc_spi_read_open_PDCA+0x98>
8001353e:	e0 6b 00 ff 	mov	r11,255
80013542:	fe 7c 28 00 	mov	r12,-55296
80013546:	fe b0 fb 70 	rcall	80012c26 <spi_write>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001354a:	30 2b       	mov	r11,2
8001354c:	fe 7c 28 00 	mov	r12,-55296
80013550:	fe b0 fa fe 	rcall	80012b4c <spi_unselectChip>
80013554:	2f fd       	sub	sp,-4
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80013556:	d8 2a       	popm	r4-r7,pc,r12=0
80013558:	30 1c       	mov	r12,1

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);          // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
8001355a:	cb bb       	rjmp	800134d0 <sd_mmc_spi_read_open_PDCA+0x10>
8001355c:	6e 0b       	ld.w	r11,r7[0x0]
8001355e:	31 1c       	mov	r12,17
80013560:	a9 9b       	lsr	r11,0x9
80013562:	e0 66 2c b4 	mov	r6,11444
80013566:	c6 1e       	rcall	80013228 <sd_mmc_spi_command>
80013568:	ac 8c       	st.b	r6[0x0],r12
8001356a:	cc 7b       	rjmp	800134f8 <sd_mmc_spi_read_open_PDCA+0x38>

8001356c <sd_mmc_spi_check_hc>:
8001356c:	eb cd 40 e0 	pushm	r5-r7,lr
80013570:	20 1d       	sub	sp,4
80013572:	c1 fe       	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013574:	c0 61       	brne	80013580 <sd_mmc_spi_check_hc+0x14>
80013576:	3f f7       	mov	r7,-1
80013578:	0e 9c       	mov	r12,r7
8001357a:	2f fd       	sub	sp,-4
8001357c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013580:	30 2b       	mov	r11,2
80013582:	fe 7c 28 00 	mov	r12,-55296
80013586:	fe b0 fa bb 	rcall	80012afc <spi_selectChip>
8001358a:	30 0b       	mov	r11,0
8001358c:	33 ac       	mov	r12,58
8001358e:	e0 66 2c b4 	mov	r6,11444
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80013592:	c4 be       	rcall	80013228 <sd_mmc_spi_command>
80013594:	ac 8c       	st.b	r6[0x0],r12
80013596:	c5 41       	brne	8001363e <sd_mmc_spi_check_hc+0xd2>
  // check for valid response
  if(r1 != 0) {
80013598:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001359c:	fe 7c 28 00 	mov	r12,-55296
800135a0:	fe b0 fb 43 	rcall	80012c26 <spi_write>
800135a4:	fa c5 ff fe 	sub	r5,sp,-2
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800135a8:	fe 7c 28 00 	mov	r12,-55296
800135ac:	0a 9b       	mov	r11,r5
800135ae:	fe b0 fb 4a 	rcall	80012c42 <spi_read>
800135b2:	58 1c       	cp.w	r12,1
800135b4:	c3 a0       	breq	80013628 <sd_mmc_spi_check_hc+0xbc>
800135b6:	1b b7       	ld.ub	r7,sp[0x3]
800135b8:	ef d7 c0 c1 	bfextu	r7,r7,0x6,0x1
800135bc:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135c0:	fe 7c 28 00 	mov	r12,-55296
800135c4:	fe b0 fb 31 	rcall	80012c26 <spi_write>
800135c8:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800135ca:	fe 7c 28 00 	mov	r12,-55296
800135ce:	fe b0 fb 3a 	rcall	80012c42 <spi_read>
800135d2:	58 1c       	cp.w	r12,1
800135d4:	c3 20       	breq	80013638 <sd_mmc_spi_check_hc+0xcc>
800135d6:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
800135d8:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135dc:	ac 88       	st.b	r6[0x0],r8
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800135de:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135e2:	fe b0 fb 22 	rcall	80012c26 <spi_write>
800135e6:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800135e8:	fe 7c 28 00 	mov	r12,-55296
800135ec:	fe b0 fb 2b 	rcall	80012c42 <spi_read>
800135f0:	58 1c       	cp.w	r12,1
800135f2:	c2 00       	breq	80013632 <sd_mmc_spi_check_hc+0xc6>
800135f4:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
800135f6:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135fa:	ac 88       	st.b	r6[0x0],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800135fc:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013600:	fe b0 fb 13 	rcall	80012c26 <spi_write>
80013604:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013606:	fe 7c 28 00 	mov	r12,-55296
8001360a:	fe b0 fb 1c 	rcall	80012c42 <spi_read>
8001360e:	58 1c       	cp.w	r12,1
80013610:	c0 e0       	breq	8001362c <sd_mmc_spi_check_hc+0xc0>
80013612:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
80013614:	ac 88       	st.b	r6[0x0],r8
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013616:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013618:	fe 7c 28 00 	mov	r12,-55296
8001361c:	fe b0 fa 98 	rcall	80012b4c <spi_unselectChip>
80013620:	0e 9c       	mov	r12,r7
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
80013622:	2f fd       	sub	sp,-4
80013624:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013628:	18 97       	mov	r7,r12
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001362a:	cc 9b       	rjmp	800135bc <sd_mmc_spi_check_hc+0x50>
8001362c:	e0 68 00 ff 	mov	r8,255
80013630:	cf 2b       	rjmp	80013614 <sd_mmc_spi_check_hc+0xa8>
80013632:	e0 68 00 ff 	mov	r8,255
80013636:	ce 0b       	rjmp	800135f6 <sd_mmc_spi_check_hc+0x8a>
80013638:	e0 68 00 ff 	mov	r8,255
8001363c:	cc eb       	rjmp	800135d8 <sd_mmc_spi_check_hc+0x6c>
8001363e:	30 2b       	mov	r11,2

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013640:	fe 7c 28 00 	mov	r12,-55296
80013644:	fe b0 fa 84 	rcall	80012b4c <spi_unselectChip>
80013648:	c9 7b       	rjmp	80013576 <sd_mmc_spi_check_hc+0xa>
8001364a:	d7 03       	nop

8001364c <sd_mmc_spi_write_sector_from_ram>:
8001364c:	d4 21       	pushm	r4-r7,lr
8001364e:	20 1d       	sub	sp,4
80013650:	18 97       	mov	r7,r12
80013652:	fe b0 fd af 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013656:	c0 31       	brne	8001365c <sd_mmc_spi_write_sector_from_ram+0x10>
80013658:	2f fd       	sub	sp,-4
8001365a:	d8 22       	popm	r4-r7,pc
8001365c:	30 2b       	mov	r11,2
8001365e:	fe 7c 28 00 	mov	r12,-55296
80013662:	fe b0 fa 4d 	rcall	80012afc <spi_selectChip>
80013666:	e0 68 2c a2 	mov	r8,11426
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8001366a:	11 89       	ld.ub	r9,r8[0x0]
8001366c:	30 38       	mov	r8,3
8001366e:	f0 09 18 00 	cp.b	r9,r8
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80013672:	c5 40       	breq	8001371a <sd_mmc_spi_write_sector_from_ram+0xce>
80013674:	e0 64 06 88 	mov	r4,1672
80013678:	31 8c       	mov	r12,24
8001367a:	68 0b       	ld.w	r11,r4[0x0]
8001367c:	e0 65 2c b4 	mov	r5,11444
  }

  // check for valid response
  if(r1 != 0x00)
80013680:	fe b0 fd d4 	rcall	80013228 <sd_mmc_spi_command>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80013684:	aa 8c       	st.b	r5[0x0],r12
80013686:	58 0c       	cp.w	r12,0
80013688:	c4 21       	brne	8001370c <sd_mmc_spi_write_sector_from_ram+0xc0>
8001368a:	e0 6b 00 ff 	mov	r11,255
8001368e:	fe 7c 28 00 	mov	r12,-55296

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80013692:	fe b0 fa ca 	rcall	80012c26 <spi_write>
80013696:	e0 6b 00 fe 	mov	r11,254
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
8001369a:	fe 7c 28 00 	mov	r12,-55296
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
8001369e:	ee c6 fe 00 	sub	r6,r7,-512
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800136a2:	fe b0 fa c2 	rcall	80012c26 <spi_write>
800136a6:	0f 3b       	ld.ub	r11,r7++
800136a8:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800136ac:	fe b0 fa bd 	rcall	80012c26 <spi_write>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800136b0:	0c 37       	cp.w	r7,r6
800136b2:	cf a1       	brne	800136a6 <sd_mmc_spi_write_sector_from_ram+0x5a>
800136b4:	e0 6b 00 ff 	mov	r11,255
800136b8:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);
800136bc:	fe b0 fa b5 	rcall	80012c26 <spi_write>
800136c0:	e0 6b 00 ff 	mov	r11,255
800136c4:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800136c8:	fe b0 fa af 	rcall	80012c26 <spi_write>
800136cc:	e0 6b 00 ff 	mov	r11,255
800136d0:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800136d4:	fe b0 fa a9 	rcall	80012c26 <spi_write>
800136d8:	fa cb ff fe 	sub	r11,sp,-2
800136dc:	fe 7c 28 00 	mov	r12,-55296
800136e0:	fe b0 fa b1 	rcall	80012c42 <spi_read>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
800136e4:	58 1c       	cp.w	r12,1
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800136e6:	c5 80       	breq	80013796 <sd_mmc_spi_write_sector_from_ram+0x14a>
800136e8:	1b b8       	ld.ub	r8,sp[0x3]
800136ea:	aa 88       	st.b	r5[0x0],r8
800136ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800136f0:	58 58       	cp.w	r8,5
800136f2:	c1 f0       	breq	80013730 <sd_mmc_spi_write_sector_from_ram+0xe4>
800136f4:	e0 6b 00 ff 	mov	r11,255
800136f8:	fe 7c 28 00 	mov	r12,-55296
    spi_write(SD_MMC_SPI,0xFF);
800136fc:	fe b0 fa 95 	rcall	80012c26 <spi_write>
80013700:	e0 6b 00 ff 	mov	r11,255
80013704:	fe 7c 28 00 	mov	r12,-55296
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80013708:	fe b0 fa 8f 	rcall	80012c26 <spi_write>
8001370c:	30 2b       	mov	r11,2
8001370e:	fe 7c 28 00 	mov	r12,-55296
80013712:	fe b0 fa 1d 	rcall	80012b4c <spi_unselectChip>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80013716:	2f fd       	sub	sp,-4
80013718:	d8 2a       	popm	r4-r7,pc,r12=0
8001371a:	e0 64 06 88 	mov	r4,1672
8001371e:	31 8c       	mov	r12,24
80013720:	68 0b       	ld.w	r11,r4[0x0]
80013722:	e0 65 2c b4 	mov	r5,11444
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80013726:	a9 9b       	lsr	r11,0x9
80013728:	fe b0 fd 80 	rcall	80013228 <sd_mmc_spi_command>
8001372c:	aa 8c       	st.b	r5[0x0],r12
8001372e:	ca cb       	rjmp	80013686 <sd_mmc_spi_write_sector_from_ram+0x3a>
80013730:	e0 6b 00 ff 	mov	r11,255
  spi_write(SD_MMC_SPI,0xFF);
80013734:	fe 7c 28 00 	mov	r12,-55296
80013738:	fe b0 fa 77 	rcall	80012c26 <spi_write>
8001373c:	e0 6b 00 ff 	mov	r11,255

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013740:	fe 7c 28 00 	mov	r12,-55296
80013744:	fe b0 fa 71 	rcall	80012c26 <spi_write>
  gl_ptr_mem += 512;        // Update the memory pointer.
80013748:	30 2b       	mov	r11,2
8001374a:	fe 7c 28 00 	mov	r12,-55296
8001374e:	fe b0 f9 ff 	rcall	80012b4c <spi_unselectChip>

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80013752:	68 08       	ld.w	r8,r4[0x0]
80013754:	f0 c8 fe 00 	sub	r8,r8,-512
80013758:	89 08       	st.w	r4[0x0],r8
8001375a:	fe b0 fd 2b 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
8001375e:	c1 f1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013760:	fe b0 fd 28 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013764:	c1 c1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013766:	fe b0 fd 25 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
8001376a:	c1 91       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
8001376c:	fe b0 fd 22 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013770:	c1 61       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013772:	fe b0 fd 1f 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013776:	c1 31       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013778:	fe b0 fd 1c 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
8001377c:	c1 01       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
8001377e:	fe b0 fd 19 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013782:	c0 d1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013784:	fe b0 fd 16 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013788:	c0 a1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
8001378a:	fe b0 fd 13 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
8001378e:	c0 71       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013790:	fe b0 fd 10 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80013794:	c6 2b       	rjmp	80013658 <sd_mmc_spi_write_sector_from_ram+0xc>
80013796:	3f f8       	mov	r8,-1
80013798:	aa 88       	st.b	r5[0x0],r8
8001379a:	ca db       	rjmp	800136f4 <sd_mmc_spi_write_sector_from_ram+0xa8>
8001379c:	30 1c       	mov	r12,1
8001379e:	c5 db       	rjmp	80013658 <sd_mmc_spi_write_sector_from_ram+0xc>

800137a0 <sd_mmc_spi_get_if>:
800137a0:	eb cd 40 e0 	pushm	r5-r7,lr
800137a4:	20 1d       	sub	sp,4
800137a6:	fe b0 fd 05 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
800137aa:	c0 51       	brne	800137b4 <sd_mmc_spi_get_if+0x14>
800137ac:	3f fc       	mov	r12,-1
800137ae:	2f fd       	sub	sp,-4
800137b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800137b4:	30 2b       	mov	r11,2
800137b6:	fe 7c 28 00 	mov	r12,-55296
800137ba:	fe b0 f9 a1 	rcall	80012afc <spi_selectChip>
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
800137be:	e0 6b 01 aa 	mov	r11,426
800137c2:	e0 67 2c b4 	mov	r7,11444
800137c6:	30 8c       	mov	r12,8
800137c8:	fe b0 fd 30 	rcall	80013228 <sd_mmc_spi_command>
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
800137cc:	ae 8c       	st.b	r7[0x0],r12
800137ce:	ed bc 00 02 	bld	r12,0x2
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800137d2:	c5 00       	breq	80013872 <sd_mmc_spi_get_if+0xd2>
800137d4:	e0 6b 00 ff 	mov	r11,255
800137d8:	fe 7c 28 00 	mov	r12,-55296
800137dc:	fe b0 fa 25 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800137e0:	fa c6 ff fe 	sub	r6,sp,-2
800137e4:	fe 7c 28 00 	mov	r12,-55296
800137e8:	0c 9b       	mov	r11,r6
800137ea:	fe b0 fa 2c 	rcall	80012c42 <spi_read>
800137ee:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
800137f0:	c4 90       	breq	80013882 <sd_mmc_spi_get_if+0xe2>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800137f2:	1b b8       	ld.ub	r8,sp[0x3]
800137f4:	e0 6b 00 ff 	mov	r11,255
800137f8:	ae 88       	st.b	r7[0x0],r8
800137fa:	fe 7c 28 00 	mov	r12,-55296
800137fe:	fe b0 fa 14 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013802:	0c 9b       	mov	r11,r6
80013804:	fe 7c 28 00 	mov	r12,-55296
80013808:	fe b0 fa 1d 	rcall	80012c42 <spi_read>
8001380c:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
8001380e:	c4 00       	breq	8001388e <sd_mmc_spi_get_if+0xee>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013810:	1b b8       	ld.ub	r8,sp[0x3]
80013812:	e0 6b 00 ff 	mov	r11,255
80013816:	ae 88       	st.b	r7[0x0],r8
80013818:	fe 7c 28 00 	mov	r12,-55296
8001381c:	fe b0 fa 05 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013820:	0c 9b       	mov	r11,r6
80013822:	fe 7c 28 00 	mov	r12,-55296
80013826:	e0 65 2c b4 	mov	r5,11444
8001382a:	fe b0 fa 0c 	rcall	80012c42 <spi_read>
     return 0xFF;
   return data_read;
8001382e:	58 1c       	cp.w	r12,1
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013830:	c2 c0       	breq	80013888 <sd_mmc_spi_get_if+0xe8>
  if((r1 & 0x01) == 0) {
80013832:	1b b8       	ld.ub	r8,sp[0x3]
80013834:	aa 88       	st.b	r5[0x0],r8
80013836:	ed b8 00 00 	bld	r8,0x0
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001383a:	c3 61       	brne	800138a6 <sd_mmc_spi_get_if+0x106>
8001383c:	e0 6b 00 ff 	mov	r11,255
80013840:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013844:	fe b0 f9 f1 	rcall	80012c26 <spi_write>
80013848:	0c 9b       	mov	r11,r6
8001384a:	fe 7c 28 00 	mov	r12,-55296
8001384e:	fe b0 f9 fa 	rcall	80012c42 <spi_read>
     return 0xFF;
   return data_read;
80013852:	58 1c       	cp.w	r12,1
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013854:	c2 00       	breq	80013894 <sd_mmc_spi_get_if+0xf4>
  if(r1 != 0xaa) {
80013856:	1b b8       	ld.ub	r8,sp[0x3]
80013858:	ae 88       	st.b	r7[0x0],r8
8001385a:	3a a9       	mov	r9,-86
8001385c:	f2 08 18 00 	cp.b	r8,r9
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013860:	c1 c1       	brne	80013898 <sd_mmc_spi_get_if+0xf8>
80013862:	30 2b       	mov	r11,2
80013864:	fe 7c 28 00 	mov	r12,-55296
80013868:	fe b0 f9 72 	rcall	80012b4c <spi_unselectChip>
8001386c:	2f fd       	sub	sp,-4

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001386e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80013872:	30 2b       	mov	r11,2
80013874:	fe 7c 28 00 	mov	r12,-55296
80013878:	fe b0 f9 6a 	rcall	80012b4c <spi_unselectChip>
8001387c:	2f fd       	sub	sp,-4
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001387e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80013882:	e0 68 00 ff 	mov	r8,255
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013886:	cb 7b       	rjmp	800137f4 <sd_mmc_spi_get_if+0x54>
80013888:	3f f8       	mov	r8,-1
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001388a:	aa 88       	st.b	r5[0x0],r8
8001388c:	cd 8b       	rjmp	8001383c <sd_mmc_spi_get_if+0x9c>
8001388e:	e0 68 00 ff 	mov	r8,255
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013892:	cc 0b       	rjmp	80013812 <sd_mmc_spi_get_if+0x72>
  if(r1 != 0xaa) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013894:	3f f8       	mov	r8,-1
80013896:	ae 88       	st.b	r7[0x0],r8
80013898:	30 2b       	mov	r11,2
8001389a:	fe 7c 28 00 	mov	r12,-55296
8001389e:	fe b0 f9 57 	rcall	80012b4c <spi_unselectChip>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800138a2:	3f fc       	mov	r12,-1
800138a4:	c8 5b       	rjmp	800137ae <sd_mmc_spi_get_if+0xe>
800138a6:	30 2b       	mov	r11,2
800138a8:	fe 7c 28 00 	mov	r12,-55296
800138ac:	fe b0 f9 50 	rcall	80012b4c <spi_unselectChip>
800138b0:	c7 eb       	rjmp	800137ac <sd_mmc_spi_get_if+0xc>
800138b2:	d7 03       	nop

800138b4 <sd_mmc_spi_internal_init>:
800138b4:	d4 31       	pushm	r0-r7,lr
800138b6:	20 1d       	sub	sp,4
800138b8:	e6 68 1a 80 	mov	r8,400000
800138bc:	e0 69 06 9c 	mov	r9,1692
800138c0:	e0 67 06 8c 	mov	r7,1676
800138c4:	72 0a       	ld.w	r10,r9[0x0]
800138c6:	8f 18       	st.w	r7[0x4],r8
800138c8:	0e 9b       	mov	r11,r7
800138ca:	fe 7c 28 00 	mov	r12,-55296
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800138ce:	fe b0 f9 53 	rcall	80012b74 <spi_setupChipReg>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800138d2:	30 2b       	mov	r11,2
800138d4:	fe 7c 28 00 	mov	r12,-55296
800138d8:	fe b0 f9 12 	rcall	80012afc <spi_selectChip>
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
800138dc:	e0 6b 00 ff 	mov	r11,255
800138e0:	fe 7c 28 00 	mov	r12,-55296
800138e4:	fe b0 f9 a1 	rcall	80012c26 <spi_write>
800138e8:	e0 6b 00 ff 	mov	r11,255
800138ec:	fe 7c 28 00 	mov	r12,-55296
800138f0:	fe b0 f9 9b 	rcall	80012c26 <spi_write>
800138f4:	e0 6b 00 ff 	mov	r11,255
800138f8:	fe 7c 28 00 	mov	r12,-55296
800138fc:	fe b0 f9 95 	rcall	80012c26 <spi_write>
80013900:	e0 6b 00 ff 	mov	r11,255
80013904:	fe 7c 28 00 	mov	r12,-55296
80013908:	fe b0 f9 8f 	rcall	80012c26 <spi_write>
8001390c:	e0 6b 00 ff 	mov	r11,255
80013910:	fe 7c 28 00 	mov	r12,-55296
80013914:	fe b0 f9 89 	rcall	80012c26 <spi_write>
80013918:	e0 6b 00 ff 	mov	r11,255
8001391c:	fe 7c 28 00 	mov	r12,-55296
80013920:	fe b0 f9 83 	rcall	80012c26 <spi_write>
80013924:	e0 6b 00 ff 	mov	r11,255
80013928:	fe 7c 28 00 	mov	r12,-55296
8001392c:	fe b0 f9 7d 	rcall	80012c26 <spi_write>
80013930:	e0 6b 00 ff 	mov	r11,255
80013934:	fe 7c 28 00 	mov	r12,-55296
80013938:	fe b0 f9 77 	rcall	80012c26 <spi_write>
8001393c:	e0 6b 00 ff 	mov	r11,255
80013940:	fe 7c 28 00 	mov	r12,-55296
80013944:	fe b0 f9 71 	rcall	80012c26 <spi_write>
80013948:	e0 6b 00 ff 	mov	r11,255
8001394c:	fe 7c 28 00 	mov	r12,-55296
80013950:	fe b0 f9 6b 	rcall	80012c26 <spi_write>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013954:	30 2b       	mov	r11,2
80013956:	fe 7c 28 00 	mov	r12,-55296
8001395a:	fe b0 f8 f9 	rcall	80012b4c <spi_unselectChip>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8001395e:	30 08       	mov	r8,0
80013960:	e0 69 06 a0 	mov	r9,1696
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013964:	30 2b       	mov	r11,2
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80013966:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80013968:	e0 61 2c a2 	mov	r1,11426
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8001396c:	fe 7c 28 00 	mov	r12,-55296
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
  card_type = MMC_CARD;
80013970:	a2 88       	st.b	r1[0x0],r8
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013972:	fe b0 f8 c5 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80013976:	30 0b       	mov	r11,0
80013978:	16 9c       	mov	r12,r11
8001397a:	fe b0 fc 57 	rcall	80013228 <sd_mmc_spi_command>
8001397e:	e0 66 2c b4 	mov	r6,11444
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013982:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013984:	ac 8c       	st.b	r6[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013986:	fe 7c 28 00 	mov	r12,-55296
8001398a:	fe b0 f8 e1 	rcall	80012b4c <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8001398e:	e0 6b 00 ff 	mov	r11,255
80013992:	fe 7c 28 00 	mov	r12,-55296
80013996:	30 05       	mov	r5,0
80013998:	fe b0 f9 47 	rcall	80012c26 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
8001399c:	0c 90       	mov	r0,r6
8001399e:	30 12       	mov	r2,1
800139a0:	c1 78       	rjmp	800139ce <sd_mmc_spi_internal_init+0x11a>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800139a2:	fe b0 f8 ad 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800139a6:	30 0b       	mov	r11,0
800139a8:	16 9c       	mov	r12,r11
800139aa:	fe b0 fc 3f 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800139ae:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800139b0:	a0 8c       	st.b	r0[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800139b2:	fe 7c 28 00 	mov	r12,-55296
800139b6:	fe b0 f8 cb 	rcall	80012b4c <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800139ba:	e0 6b 00 ff 	mov	r11,255
800139be:	fe 7c 28 00 	mov	r12,-55296
800139c2:	fe b0 f9 32 	rcall	80012c26 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
800139c6:	e0 45 00 64 	cp.w	r5,100
800139ca:	e0 80 00 b4 	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800139ce:	30 2b       	mov	r11,2
800139d0:	fe 7c 28 00 	mov	r12,-55296
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800139d4:	2f f5       	sub	r5,-1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800139d6:	0d 84       	ld.ub	r4,r6[0x0]
800139d8:	e0 63 2c b4 	mov	r3,11444
800139dc:	e4 04 18 00 	cp.b	r4,r2
800139e0:	ce 11       	brne	800139a2 <sd_mmc_spi_internal_init+0xee>

  if_cond = sd_mmc_spi_get_if();
800139e2:	cd fe       	rcall	800137a0 <sd_mmc_spi_get_if>
800139e4:	5b fc       	cp.w	r12,-1
  if(if_cond == -1) {
800139e6:	e0 80 00 a6 	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
800139ea:	58 1c       	cp.w	r12,1
      return false; // card is bad
  } else if (if_cond == 1) {
800139ec:	e0 80 00 a6 	breq	80013b38 <sd_mmc_spi_internal_init+0x284>
800139f0:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800139f2:	fe 7c 28 00 	mov	r12,-55296
800139f6:	fe b0 f8 83 	rcall	80012afc <spi_selectChip>
800139fa:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800139fc:	33 7c       	mov	r12,55
800139fe:	fe b0 fc 15 	rcall	80013228 <sd_mmc_spi_command>
80013a02:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a04:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a06:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a0a:	fe b0 f8 a1 	rcall	80012b4c <spi_unselectChip>
80013a0e:	e0 6b 00 ff 	mov	r11,255
      card_type = SD_CARD_2;
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80013a12:	fe 7c 28 00 	mov	r12,-55296
80013a16:	fe b0 f9 08 	rcall	80012c26 <spi_write>
80013a1a:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a1c:	fe 7c 28 00 	mov	r12,-55296
80013a20:	fe b0 f8 6e 	rcall	80012afc <spi_selectChip>
80013a24:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013a26:	32 9c       	mov	r12,41
80013a28:	fe b0 fc 00 	rcall	80013228 <sd_mmc_spi_command>
80013a2c:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a2e:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a30:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a34:	fe b0 f8 8c 	rcall	80012b4c <spi_unselectChip>
80013a38:	e0 6b 00 ff 	mov	r11,255
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80013a3c:	fe 7c 28 00 	mov	r12,-55296
80013a40:	fe b0 f8 f3 	rcall	80012c26 <spi_write>
80013a44:	07 88       	ld.ub	r8,r3[0x0]

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80013a46:	e2 18 00 fe 	andl	r8,0xfe,COH
80013a4a:	e0 80 00 d3 	breq	80013bf0 <sd_mmc_spi_internal_init+0x33c>
80013a4e:	30 08       	mov	r8,0
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80013a50:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a52:	a2 88       	st.b	r1[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80013a54:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a58:	fe b0 f8 52 	rcall	80012afc <spi_selectChip>
80013a5c:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013a5e:	16 9c       	mov	r12,r11
80013a60:	fe b0 fb e4 	rcall	80013228 <sd_mmc_spi_command>
80013a64:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a66:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a68:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a6c:	fe b0 f8 70 	rcall	80012b4c <spi_unselectChip>
80013a70:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013a74:	fe 7c 28 00 	mov	r12,-55296
80013a78:	30 05       	mov	r5,0
80013a7a:	fe b0 f8 d6 	rcall	80012c26 <spi_write>
80013a7e:	30 14       	mov	r4,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80013a80:	c1 68       	rjmp	80013aac <sd_mmc_spi_internal_init+0x1f8>
80013a82:	fe b0 f8 3d 	rcall	80012afc <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a86:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013a88:	16 9c       	mov	r12,r11
80013a8a:	fe b0 fb cf 	rcall	80013228 <sd_mmc_spi_command>
80013a8e:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a90:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a92:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a96:	fe b0 f8 5b 	rcall	80012b4c <spi_unselectChip>
80013a9a:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013a9e:	fe 7c 28 00 	mov	r12,-55296
80013aa2:	fe b0 f8 c2 	rcall	80012c26 <spi_write>
80013aa6:	e0 45 00 64 	cp.w	r5,100
        // do retry counter
        retry++;
        if(retry > 100)
80013aaa:	c4 40       	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013aac:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013aae:	fe 7c 28 00 	mov	r12,-55296
80013ab2:	2f f5       	sub	r5,-1
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013ab4:	0d 88       	ld.ub	r8,r6[0x0]
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80013ab6:	e8 08 18 00 	cp.b	r8,r4
80013aba:	ce 41       	brne	80013a82 <sd_mmc_spi_internal_init+0x1ce>
80013abc:	03 88       	ld.ub	r8,r1[0x0]
80013abe:	c4 08       	rjmp	80013b3e <sd_mmc_spi_internal_init+0x28a>
80013ac0:	03 89       	ld.ub	r9,r1[0x0]
     if(retry == 50000)    // measured approx. 500 on several cards
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80013ac2:	30 28       	mov	r8,2
80013ac4:	f0 09 18 00 	cp.b	r9,r8
80013ac8:	e0 80 01 77 	breq	80013db6 <sd_mmc_spi_internal_init+0x502>
80013acc:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013ace:	fe 7c 28 00 	mov	r12,-55296
80013ad2:	fe b0 f8 15 	rcall	80012afc <spi_selectChip>
80013ad6:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013ad8:	33 bc       	mov	r12,59
80013ada:	fe b0 fb a7 	rcall	80013228 <sd_mmc_spi_command>
80013ade:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013ae0:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013ae2:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013ae6:	fe b0 f8 33 	rcall	80012b4c <spi_unselectChip>
80013aea:	e0 6b 00 ff 	mov	r11,255
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013aee:	fe 7c 28 00 	mov	r12,-55296
80013af2:	fe b0 f8 9a 	rcall	80012c26 <spi_write>
80013af6:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013af8:	fe 7c 28 00 	mov	r12,-55296
80013afc:	fe b0 f8 00 	rcall	80012afc <spi_selectChip>
80013b00:	e0 6b 02 00 	mov	r11,512
  r1 = sd_mmc_spi_command(command, arg);
80013b04:	31 0c       	mov	r12,16
80013b06:	fe b0 fb 91 	rcall	80013228 <sd_mmc_spi_command>
80013b0a:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b0c:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013b0e:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b12:	fe b0 f8 1d 	rcall	80012b4c <spi_unselectChip>
80013b16:	e0 6b 00 ff 	mov	r11,255
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013b1a:	fe 7c 28 00 	mov	r12,-55296
80013b1e:	e0 64 2c b4 	mov	r4,11444
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013b22:	fe b0 f8 82 	rcall	80012c26 <spi_write>
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013b26:	0d 85       	ld.ub	r5,r6[0x0]
  if (r1 != 0x00)
80013b28:	58 05       	cp.w	r5,0
80013b2a:	c0 41       	brne	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013b2c:	fe b0 fb 42 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80013b30:	c6 31       	brne	80013bf6 <sd_mmc_spi_internal_init+0x342>
80013b32:	30 0c       	mov	r12,0
  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
  return true;
80013b34:	2f fd       	sub	sp,-4
}
80013b36:	d8 32       	popm	r0-r7,pc
80013b38:	30 28       	mov	r8,2

  if_cond = sd_mmc_spi_get_if();
  if(if_cond == -1) {
      return false; // card is bad
  } else if (if_cond == 1) {
      card_type = SD_CARD_2;
80013b3a:	a2 88       	st.b	r1[0x0],r8
80013b3c:	30 28       	mov	r8,2
80013b3e:	30 05       	mov	r5,0
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80013b40:	30 14       	mov	r4,1

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80013b42:	30 23       	mov	r3,2
80013b44:	c1 d8       	rjmp	80013b7e <sd_mmc_spi_internal_init+0x2ca>
80013b46:	fe b0 f7 db 	rcall	80012afc <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013b4a:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013b4c:	30 1c       	mov	r12,1
80013b4e:	fe b0 fb 6d 	rcall	80013228 <sd_mmc_spi_command>
80013b52:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b54:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013b56:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b5a:	fe b0 f7 f9 	rcall	80012b4c <spi_unselectChip>
80013b5e:	e0 6b 00 ff 	mov	r11,255
      break;
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013b62:	fe 7c 28 00 	mov	r12,-55296
80013b66:	fe b0 f8 60 	rcall	80012c26 <spi_write>
80013b6a:	e0 45 c3 4f 	cp.w	r5,49999
      break;
    }
     // do retry counter
     retry++;
     if(retry == 50000)    // measured approx. 500 on several cards
80013b6e:	ce 20       	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013b70:	2f f5       	sub	r5,-1
80013b72:	0d 89       	ld.ub	r9,r6[0x0]
        return false;
  } while (r1);
80013b74:	30 08       	mov	r8,0
80013b76:	f0 09 18 00 	cp.b	r9,r8
80013b7a:	ca 30       	breq	80013ac0 <sd_mmc_spi_internal_init+0x20c>
80013b7c:	03 88       	ld.ub	r8,r1[0x0]
80013b7e:	e8 08 18 00 	cp.b	r8,r4

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80013b82:	c2 00       	breq	80013bc2 <sd_mmc_spi_internal_init+0x30e>
80013b84:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013b86:	fe 7c 28 00 	mov	r12,-55296
80013b8a:	cd e3       	brcs	80013b46 <sd_mmc_spi_internal_init+0x292>

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80013b8c:	e6 08 18 00 	cp.b	r8,r3
80013b90:	ce d1       	brne	80013b6a <sd_mmc_spi_internal_init+0x2b6>
80013b92:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013b94:	fe 7c 28 00 	mov	r12,-55296
80013b98:	fe b0 f7 b2 	rcall	80012afc <spi_selectChip>
80013b9c:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013b9e:	33 7c       	mov	r12,55
80013ba0:	fe b0 fb 44 	rcall	80013228 <sd_mmc_spi_command>
80013ba4:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013ba6:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013ba8:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013bac:	fe b0 f7 d0 	rcall	80012b4c <spi_unselectChip>
80013bb0:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013bb2:	fe 7c 28 00 	mov	r12,-55296
80013bb6:	fe b0 f7 a3 	rcall	80012afc <spi_selectChip>
80013bba:	fc 1b 40 00 	movh	r11,0x4000
  r1 = sd_mmc_spi_command(command, arg);
80013bbe:	32 9c       	mov	r12,41
80013bc0:	cc 7b       	rjmp	80013b4e <sd_mmc_spi_internal_init+0x29a>
80013bc2:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013bc4:	fe 7c 28 00 	mov	r12,-55296
80013bc8:	fe b0 f7 9a 	rcall	80012afc <spi_selectChip>
80013bcc:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013bce:	33 7c       	mov	r12,55
80013bd0:	fe b0 fb 2c 	rcall	80013228 <sd_mmc_spi_command>
80013bd4:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013bd6:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013bd8:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013bdc:	fe b0 f7 b8 	rcall	80012b4c <spi_unselectChip>
80013be0:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013be2:	fe 7c 28 00 	mov	r12,-55296
80013be6:	fe b0 f7 8b 	rcall	80012afc <spi_selectChip>
80013bea:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013bec:	32 9c       	mov	r12,41
80013bee:	cb 0b       	rjmp	80013b4e <sd_mmc_spi_internal_init+0x29a>
80013bf0:	a2 84       	st.b	r1[0x0],r4

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80013bf2:	30 18       	mov	r8,1
80013bf4:	ca 5b       	rjmp	80013b3e <sd_mmc_spi_internal_init+0x28a>
80013bf6:	30 2b       	mov	r11,2
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013bf8:	fe 7c 28 00 	mov	r12,-55296
80013bfc:	fe b0 f7 80 	rcall	80012afc <spi_selectChip>
80013c00:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80013c02:	30 9c       	mov	r12,9
80013c04:	fe b0 fb 12 	rcall	80013228 <sd_mmc_spi_command>
80013c08:	a8 8c       	st.b	r4[0x0],r12
80013c0a:	e0 81 01 f1 	brne	80013fec <sd_mmc_spi_internal_init+0x738>
  // check for valid response
  if(r1 != 0x00)
80013c0e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c12:	fe 7c 28 00 	mov	r12,-55296
80013c16:	fe b0 f8 08 	rcall	80012c26 <spi_write>
80013c1a:	1a 95       	mov	r5,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c1c:	fe 7c 28 00 	mov	r12,-55296
80013c20:	1a 9b       	mov	r11,sp
80013c22:	fe b0 f8 10 	rcall	80012c42 <spi_read>
80013c26:	58 1c       	cp.w	r12,1
80013c28:	e0 80 01 ed 	breq	80014002 <sd_mmc_spi_internal_init+0x74e>
80013c2c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013c2e:	a8 88       	st.b	r4[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013c30:	3f e9       	mov	r9,-2
80013c32:	f2 08 18 00 	cp.b	r8,r9
80013c36:	e0 80 00 d1 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013c3a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c3e:	fe 7c 28 00 	mov	r12,-55296
80013c42:	fe b0 f7 f2 	rcall	80012c26 <spi_write>
80013c46:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c48:	fe 7c 28 00 	mov	r12,-55296
80013c4c:	fe b0 f7 fb 	rcall	80012c42 <spi_read>
80013c50:	58 1c       	cp.w	r12,1
80013c52:	e0 80 00 c0 	breq	80013dd2 <sd_mmc_spi_internal_init+0x51e>
80013c56:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013c58:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013c5a:	3f e9       	mov	r9,-2
80013c5c:	f2 08 18 00 	cp.b	r8,r9
80013c60:	e0 80 00 bc 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013c64:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c68:	fe 7c 28 00 	mov	r12,-55296
80013c6c:	fe b0 f7 dd 	rcall	80012c26 <spi_write>
80013c70:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c72:	fe 7c 28 00 	mov	r12,-55296
80013c76:	fe b0 f7 e6 	rcall	80012c42 <spi_read>
80013c7a:	58 1c       	cp.w	r12,1
80013c7c:	e0 80 01 cb 	breq	80014012 <sd_mmc_spi_internal_init+0x75e>
80013c80:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013c82:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013c84:	3f e9       	mov	r9,-2
80013c86:	f2 08 18 00 	cp.b	r8,r9
80013c8a:	e0 80 00 a7 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013c8e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c92:	fe 7c 28 00 	mov	r12,-55296
80013c96:	fe b0 f7 c8 	rcall	80012c26 <spi_write>
80013c9a:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c9c:	fe 7c 28 00 	mov	r12,-55296
80013ca0:	fe b0 f7 d1 	rcall	80012c42 <spi_read>
80013ca4:	58 1c       	cp.w	r12,1
80013ca6:	e0 80 01 b2 	breq	8001400a <sd_mmc_spi_internal_init+0x756>
80013caa:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013cac:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013cae:	3f e9       	mov	r9,-2
80013cb0:	f2 08 18 00 	cp.b	r8,r9
80013cb4:	e0 80 00 92 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013cb8:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013cbc:	fe 7c 28 00 	mov	r12,-55296
80013cc0:	fe b0 f7 b3 	rcall	80012c26 <spi_write>
80013cc4:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013cc6:	fe 7c 28 00 	mov	r12,-55296
80013cca:	fe b0 f7 bc 	rcall	80012c42 <spi_read>
80013cce:	58 1c       	cp.w	r12,1
80013cd0:	e0 80 01 a9 	breq	80014022 <sd_mmc_spi_internal_init+0x76e>
80013cd4:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013cd6:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013cd8:	3f e9       	mov	r9,-2
80013cda:	f2 08 18 00 	cp.b	r8,r9
80013cde:	c7 d0       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013ce0:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013ce4:	fe 7c 28 00 	mov	r12,-55296
80013ce8:	fe b0 f7 9f 	rcall	80012c26 <spi_write>
80013cec:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013cee:	fe 7c 28 00 	mov	r12,-55296
80013cf2:	fe b0 f7 a8 	rcall	80012c42 <spi_read>
80013cf6:	58 1c       	cp.w	r12,1
80013cf8:	e0 80 01 91 	breq	8001401a <sd_mmc_spi_internal_init+0x766>
80013cfc:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013cfe:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d00:	3f e9       	mov	r9,-2
80013d02:	f2 08 18 00 	cp.b	r8,r9
80013d06:	c6 90       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d08:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d0c:	fe 7c 28 00 	mov	r12,-55296
80013d10:	fe b0 f7 8b 	rcall	80012c26 <spi_write>
80013d14:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d16:	fe 7c 28 00 	mov	r12,-55296
80013d1a:	fe b0 f7 94 	rcall	80012c42 <spi_read>
80013d1e:	58 1c       	cp.w	r12,1
80013d20:	e0 80 01 85 	breq	8001402a <sd_mmc_spi_internal_init+0x776>
80013d24:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d26:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d28:	3f e9       	mov	r9,-2
80013d2a:	f2 08 18 00 	cp.b	r8,r9
80013d2e:	c5 50       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d30:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d34:	fe 7c 28 00 	mov	r12,-55296
80013d38:	fe b0 f7 77 	rcall	80012c26 <spi_write>
80013d3c:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d3e:	fe 7c 28 00 	mov	r12,-55296
80013d42:	fe b0 f7 80 	rcall	80012c42 <spi_read>
80013d46:	58 1c       	cp.w	r12,1
80013d48:	e0 80 01 75 	breq	80014032 <sd_mmc_spi_internal_init+0x77e>
80013d4c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d4e:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d50:	3f e9       	mov	r9,-2
80013d52:	f2 08 18 00 	cp.b	r8,r9
80013d56:	c4 10       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d58:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d5c:	fe 7c 28 00 	mov	r12,-55296
80013d60:	fe b0 f7 63 	rcall	80012c26 <spi_write>
80013d64:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d66:	fe 7c 28 00 	mov	r12,-55296
80013d6a:	fe b0 f7 6c 	rcall	80012c42 <spi_read>
80013d6e:	58 1c       	cp.w	r12,1
80013d70:	e0 80 01 68 	breq	80014040 <sd_mmc_spi_internal_init+0x78c>
80013d74:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d76:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d78:	3f e9       	mov	r9,-2
80013d7a:	f2 08 18 00 	cp.b	r8,r9
80013d7e:	c2 d0       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d80:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d84:	fe 7c 28 00 	mov	r12,-55296
80013d88:	fe b0 f7 4f 	rcall	80012c26 <spi_write>
80013d8c:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d8e:	fe 7c 28 00 	mov	r12,-55296
80013d92:	fe b0 f7 58 	rcall	80012c42 <spi_read>
80013d96:	58 1c       	cp.w	r12,1
80013d98:	e0 80 01 51 	breq	8001403a <sd_mmc_spi_internal_init+0x786>
80013d9c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d9e:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013da0:	3f e9       	mov	r9,-2
80013da2:	f2 08 18 00 	cp.b	r8,r9
80013da6:	c1 90       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013da8:	30 2b       	mov	r11,2
  {
    if (retry > 8)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013daa:	fe 7c 28 00 	mov	r12,-55296
80013dae:	fe b0 f6 cf 	rcall	80012b4c <spi_unselectChip>
80013db2:	30 0c       	mov	r12,0
80013db4:	cc 0a       	rjmp	80013b34 <sd_mmc_spi_internal_init+0x280>
80013db6:	fe b0 fb db 	rcall	8001356c <sd_mmc_spi_check_hc>
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
    if_cond = sd_mmc_spi_check_hc();
80013dba:	5b fc       	cp.w	r12,-1
    if (if_cond == -1) {
80013dbc:	fe 90 fe bb 	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013dc0:	58 1c       	cp.w	r12,1
      return false;
    } else if (if_cond == 1){
80013dc2:	fe 91 fe 85 	brne	80013acc <sd_mmc_spi_internal_init+0x218>
80013dc6:	30 39       	mov	r9,3
          card_type = SD_CARD_2_SDHC;
80013dc8:	e0 68 2c a2 	mov	r8,11426
80013dcc:	b0 89       	st.b	r8[0x0],r9
80013dce:	fe 9f fe 7f 	bral	80013acc <sd_mmc_spi_internal_init+0x218>
80013dd2:	3f f8       	mov	r8,-1
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013dd4:	ac 88       	st.b	r6[0x0],r8
80013dd6:	c4 7b       	rjmp	80013c64 <sd_mmc_spi_internal_init+0x3b0>
80013dd8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ddc:	fe 7c 28 00 	mov	r12,-55296
80013de0:	fe b0 f7 23 	rcall	80012c26 <spi_write>
80013de4:	fa c5 ff fe 	sub	r5,sp,-2
   spi_read(SD_MMC_SPI,&data_read);
80013de8:	fe 7c 28 00 	mov	r12,-55296
80013dec:	0a 9b       	mov	r11,r5
80013dee:	fe b0 f7 2a 	rcall	80012c42 <spi_read>
80013df2:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013df4:	e0 66 2c a4 	mov	r6,11428
80013df8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013dfc:	ac 88       	st.b	r6[0x0],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013dfe:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e02:	fe b0 f7 12 	rcall	80012c26 <spi_write>
80013e06:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e08:	fe 7c 28 00 	mov	r12,-55296
80013e0c:	fe b0 f7 1b 	rcall	80012c42 <spi_read>
80013e10:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e12:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e16:	ac 98       	st.b	r6[0x1],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e18:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e1c:	fe b0 f7 05 	rcall	80012c26 <spi_write>
80013e20:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e22:	fe 7c 28 00 	mov	r12,-55296
80013e26:	fe b0 f7 0e 	rcall	80012c42 <spi_read>
80013e2a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e2c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e30:	ac a8       	st.b	r6[0x2],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e32:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e36:	fe b0 f6 f8 	rcall	80012c26 <spi_write>
80013e3a:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e3c:	fe 7c 28 00 	mov	r12,-55296
80013e40:	fe b0 f7 01 	rcall	80012c42 <spi_read>
80013e44:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e46:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e4a:	ac b8       	st.b	r6[0x3],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e4c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e50:	fe b0 f6 eb 	rcall	80012c26 <spi_write>
80013e54:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e56:	fe 7c 28 00 	mov	r12,-55296
80013e5a:	fe b0 f6 f4 	rcall	80012c42 <spi_read>
80013e5e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e60:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e64:	ac c8       	st.b	r6[0x4],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e66:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e6a:	fe b0 f6 de 	rcall	80012c26 <spi_write>
80013e6e:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e70:	fe 7c 28 00 	mov	r12,-55296
80013e74:	fe b0 f6 e7 	rcall	80012c42 <spi_read>
80013e78:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e7a:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e7e:	ac d8       	st.b	r6[0x5],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e80:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e84:	fe b0 f6 d1 	rcall	80012c26 <spi_write>
80013e88:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e8a:	fe 7c 28 00 	mov	r12,-55296
80013e8e:	fe b0 f6 da 	rcall	80012c42 <spi_read>
80013e92:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e94:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e98:	ac e8       	st.b	r6[0x6],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e9a:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e9e:	fe b0 f6 c4 	rcall	80012c26 <spi_write>
80013ea2:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013ea4:	fe 7c 28 00 	mov	r12,-55296
80013ea8:	fe b0 f6 cd 	rcall	80012c42 <spi_read>
80013eac:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013eae:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013eb2:	ac f8       	st.b	r6[0x7],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013eb4:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013eb8:	fe b0 f6 b7 	rcall	80012c26 <spi_write>
80013ebc:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013ebe:	fe 7c 28 00 	mov	r12,-55296
80013ec2:	fe b0 f6 c0 	rcall	80012c42 <spi_read>
80013ec6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013ec8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ecc:	ed 68 00 08 	st.b	r6[8],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013ed0:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ed4:	fe b0 f6 a9 	rcall	80012c26 <spi_write>
80013ed8:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013eda:	fe 7c 28 00 	mov	r12,-55296
80013ede:	fe b0 f6 b2 	rcall	80012c42 <spi_read>
80013ee2:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013ee4:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ee8:	ed 68 00 09 	st.b	r6[9],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013eec:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ef0:	fe b0 f6 9b 	rcall	80012c26 <spi_write>
80013ef4:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013ef6:	fe 7c 28 00 	mov	r12,-55296
80013efa:	fe b0 f6 a4 	rcall	80012c42 <spi_read>
80013efe:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f00:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f04:	ed 68 00 0a 	st.b	r6[10],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f08:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f0c:	fe b0 f6 8d 	rcall	80012c26 <spi_write>
80013f10:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f12:	fe 7c 28 00 	mov	r12,-55296
80013f16:	fe b0 f6 96 	rcall	80012c42 <spi_read>
80013f1a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f1c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f20:	ed 68 00 0b 	st.b	r6[11],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f24:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f28:	fe b0 f6 7f 	rcall	80012c26 <spi_write>
80013f2c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f2e:	fe 7c 28 00 	mov	r12,-55296
80013f32:	fe b0 f6 88 	rcall	80012c42 <spi_read>
80013f36:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f38:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f3c:	ed 68 00 0c 	st.b	r6[12],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f40:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f44:	fe b0 f6 71 	rcall	80012c26 <spi_write>
80013f48:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f4a:	fe 7c 28 00 	mov	r12,-55296
80013f4e:	fe b0 f6 7a 	rcall	80012c42 <spi_read>
80013f52:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f54:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f58:	ed 68 00 0d 	st.b	r6[13],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f5c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f60:	fe b0 f6 63 	rcall	80012c26 <spi_write>
80013f64:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f66:	fe 7c 28 00 	mov	r12,-55296
80013f6a:	fe b0 f6 6c 	rcall	80012c42 <spi_read>
80013f6e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f70:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f74:	ed 68 00 0e 	st.b	r6[14],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f78:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f7c:	fe b0 f6 55 	rcall	80012c26 <spi_write>
80013f80:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f82:	fe 7c 28 00 	mov	r12,-55296
80013f86:	fe b0 f6 5e 	rcall	80012c42 <spi_read>
80013f8a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f8c:	e0 6b 00 ff 	mov	r11,255
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80013f90:	ed 68 00 0f 	st.b	r6[15],r8
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f94:	fe 7c 28 00 	mov	r12,-55296
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80013f98:	fe b0 f6 47 	rcall	80012c26 <spi_write>
80013f9c:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);
80013fa0:	fe 7c 28 00 	mov	r12,-55296
80013fa4:	fe b0 f6 41 	rcall	80012c26 <spi_write>
80013fa8:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80013fac:	fe 7c 28 00 	mov	r12,-55296
80013fb0:	fe b0 f6 3b 	rcall	80012c26 <spi_write>
80013fb4:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013fb6:	fe 7c 28 00 	mov	r12,-55296
80013fba:	fe b0 f5 c9 	rcall	80012b4c <spi_unselectChip>
80013fbe:	fe b0 f8 4d 	rcall	80013058 <sd_mmc_spi_get_capacity>
  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80013fc2:	e0 69 06 9c 	mov	r9,1692
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80013fc6:	30 18       	mov	r8,1

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80013fc8:	72 0a       	ld.w	r10,r9[0x0]
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80013fca:	e0 69 06 a0 	mov	r9,1696

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80013fce:	b2 88       	st.b	r9[0x0],r8
80013fd0:	e0 68 1b 00 	mov	r8,6912
80013fd4:	ea 18 00 b7 	orh	r8,0xb7
80013fd8:	e0 6b 06 8c 	mov	r11,1676
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80013fdc:	8f 18       	st.w	r7[0x4],r8
80013fde:	fe 7c 28 00 	mov	r12,-55296
80013fe2:	fe b0 f5 c9 	rcall	80012b74 <spi_setupChipReg>
  return true;
80013fe6:	30 1c       	mov	r12,1
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013fe8:	fe 9f fd a6 	bral	80013b34 <sd_mmc_spi_internal_init+0x280>
80013fec:	30 2b       	mov	r11,2
80013fee:	fe 7c 28 00 	mov	r12,-55296
    sd_mmc_spi_init_done = false;
80013ff2:	fe b0 f5 ad 	rcall	80012b4c <spi_unselectChip>
80013ff6:	e0 68 06 a0 	mov	r8,1696
80013ffa:	30 0c       	mov	r12,0
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013ffc:	b0 85       	st.b	r8[0x0],r5
80013ffe:	fe 9f fd 9b 	bral	80013b34 <sd_mmc_spi_internal_init+0x280>
80014002:	3f f8       	mov	r8,-1
80014004:	a8 88       	st.b	r4[0x0],r8
80014006:	fe 9f fe 1a 	bral	80013c3a <sd_mmc_spi_internal_init+0x386>
8001400a:	3f f8       	mov	r8,-1
8001400c:	ac 88       	st.b	r6[0x0],r8
8001400e:	fe 9f fe 55 	bral	80013cb8 <sd_mmc_spi_internal_init+0x404>
80014012:	3f f8       	mov	r8,-1
80014014:	ac 88       	st.b	r6[0x0],r8
80014016:	fe 9f fe 3c 	bral	80013c8e <sd_mmc_spi_internal_init+0x3da>
8001401a:	3f f8       	mov	r8,-1
8001401c:	ac 88       	st.b	r6[0x0],r8
8001401e:	fe 9f fe 75 	bral	80013d08 <sd_mmc_spi_internal_init+0x454>
80014022:	3f f8       	mov	r8,-1
80014024:	ac 88       	st.b	r6[0x0],r8
80014026:	fe 9f fe 5d 	bral	80013ce0 <sd_mmc_spi_internal_init+0x42c>
8001402a:	3f f8       	mov	r8,-1
8001402c:	ac 88       	st.b	r6[0x0],r8
8001402e:	fe 9f fe 81 	bral	80013d30 <sd_mmc_spi_internal_init+0x47c>
80014032:	3f f8       	mov	r8,-1
80014034:	ac 88       	st.b	r6[0x0],r8
80014036:	fe 9f fe 91 	bral	80013d58 <sd_mmc_spi_internal_init+0x4a4>
8001403a:	3f f8       	mov	r8,-1
8001403c:	ac 88       	st.b	r6[0x0],r8
8001403e:	cb 5a       	rjmp	80013da8 <sd_mmc_spi_internal_init+0x4f4>
80014040:	3f f8       	mov	r8,-1
80014042:	ac 88       	st.b	r6[0x0],r8
80014044:	fe 9f fe 9e 	bral	80013d80 <sd_mmc_spi_internal_init+0x4cc>

80014048 <sd_mmc_spi_init>:
80014048:	eb cd 40 10 	pushm	r4,lr
8001404c:	e0 68 06 8c 	mov	r8,1676
80014050:	fa c4 ff f8 	sub	r4,sp,-8
80014054:	e8 ea 00 08 	ld.d	r10,r4[8]
80014058:	f0 eb 00 08 	st.d	r8[8],r10
8001405c:	e0 69 06 9c 	mov	r9,1692
80014060:	93 0c       	st.w	r9[0x0],r12
80014062:	e8 ea 00 00 	ld.d	r10,r4[0]
80014066:	f0 eb 00 00 	st.d	r8[0],r10
8001406a:	fe b0 fc 25 	rcall	800138b4 <sd_mmc_spi_internal_init>
8001406e:	e3 cd 80 10 	ldm	sp++,r4,pc
80014072:	d7 03       	nop

80014074 <sd_mmc_spi_mem_check>:
80014074:	eb cd 40 e0 	pushm	r5-r7,lr
80014078:	e0 65 06 a0 	mov	r5,1696
8001407c:	30 07       	mov	r7,0
8001407e:	0b 88       	ld.ub	r8,r5[0x0]
80014080:	ee 08 18 00 	cp.b	r8,r7
bool sd_mmc_spi_check_presence(void)
{
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80014084:	e0 81 01 2c 	brne	800142dc <sd_mmc_spi_mem_check+0x268>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014088:	30 2b       	mov	r11,2
8001408a:	fe 7c 28 00 	mov	r12,-55296
8001408e:	fe b0 f5 37 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014092:	30 0b       	mov	r11,0
80014094:	16 9c       	mov	r12,r11
80014096:	fe b0 f8 c9 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001409a:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001409c:	e0 67 2c b4 	mov	r7,11444
800140a0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800140a2:	fe 7c 28 00 	mov	r12,-55296
800140a6:	fe b0 f5 53 	rcall	80012b4c <spi_unselectChip>
  return r1;
800140aa:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800140ac:	ae 88       	st.b	r7[0x0],r8
800140ae:	30 16       	mov	r6,1
800140b0:	ec 08 18 00 	cp.b	r8,r6
800140b4:	e0 80 01 29 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800140b8:	e0 6b 00 ff 	mov	r11,255
800140bc:	fe 7c 28 00 	mov	r12,-55296
800140c0:	fe b0 f5 b3 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800140c4:	30 2b       	mov	r11,2
800140c6:	fe 7c 28 00 	mov	r12,-55296
800140ca:	fe b0 f5 19 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800140ce:	30 0b       	mov	r11,0
800140d0:	16 9c       	mov	r12,r11
800140d2:	fe b0 f8 ab 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800140d6:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800140d8:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800140da:	fe 7c 28 00 	mov	r12,-55296
800140de:	fe b0 f5 37 	rcall	80012b4c <spi_unselectChip>
  return r1;
800140e2:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800140e4:	ae 88       	st.b	r7[0x0],r8
800140e6:	ec 08 18 00 	cp.b	r8,r6
800140ea:	e0 80 01 0e 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800140ee:	e0 6b 00 ff 	mov	r11,255
800140f2:	fe 7c 28 00 	mov	r12,-55296
800140f6:	fe b0 f5 98 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800140fa:	30 2b       	mov	r11,2
800140fc:	fe 7c 28 00 	mov	r12,-55296
80014100:	fe b0 f4 fe 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014104:	30 0b       	mov	r11,0
80014106:	16 9c       	mov	r12,r11
80014108:	fe b0 f8 90 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001410c:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001410e:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014110:	fe 7c 28 00 	mov	r12,-55296
80014114:	fe b0 f5 1c 	rcall	80012b4c <spi_unselectChip>
  return r1;
80014118:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8001411a:	ae 88       	st.b	r7[0x0],r8
8001411c:	ec 08 18 00 	cp.b	r8,r6
80014120:	e0 80 00 f3 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014124:	e0 6b 00 ff 	mov	r11,255
80014128:	fe 7c 28 00 	mov	r12,-55296
8001412c:	fe b0 f5 7d 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014130:	30 2b       	mov	r11,2
80014132:	fe 7c 28 00 	mov	r12,-55296
80014136:	fe b0 f4 e3 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
8001413a:	30 0b       	mov	r11,0
8001413c:	16 9c       	mov	r12,r11
8001413e:	fe b0 f8 75 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014142:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80014144:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014146:	fe 7c 28 00 	mov	r12,-55296
8001414a:	fe b0 f5 01 	rcall	80012b4c <spi_unselectChip>
  return r1;
8001414e:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014150:	ae 88       	st.b	r7[0x0],r8
80014152:	ec 08 18 00 	cp.b	r8,r6
80014156:	e0 80 00 d8 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8001415a:	e0 6b 00 ff 	mov	r11,255
8001415e:	fe 7c 28 00 	mov	r12,-55296
80014162:	fe b0 f5 62 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014166:	30 2b       	mov	r11,2
80014168:	fe 7c 28 00 	mov	r12,-55296
8001416c:	fe b0 f4 c8 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014170:	30 0b       	mov	r11,0
80014172:	16 9c       	mov	r12,r11
80014174:	fe b0 f8 5a 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014178:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001417a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001417c:	fe 7c 28 00 	mov	r12,-55296
80014180:	fe b0 f4 e6 	rcall	80012b4c <spi_unselectChip>
  return r1;
80014184:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014186:	ae 88       	st.b	r7[0x0],r8
80014188:	ec 08 18 00 	cp.b	r8,r6
8001418c:	e0 80 00 bd 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014190:	e0 6b 00 ff 	mov	r11,255
80014194:	fe 7c 28 00 	mov	r12,-55296
80014198:	fe b0 f5 47 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8001419c:	30 2b       	mov	r11,2
8001419e:	fe 7c 28 00 	mov	r12,-55296
800141a2:	fe b0 f4 ad 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800141a6:	30 0b       	mov	r11,0
800141a8:	16 9c       	mov	r12,r11
800141aa:	fe b0 f8 3f 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141ae:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800141b0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141b2:	fe 7c 28 00 	mov	r12,-55296
800141b6:	fe b0 f4 cb 	rcall	80012b4c <spi_unselectChip>
  return r1;
800141ba:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800141bc:	ae 88       	st.b	r7[0x0],r8
800141be:	ec 08 18 00 	cp.b	r8,r6
800141c2:	e0 80 00 a2 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800141c6:	e0 6b 00 ff 	mov	r11,255
800141ca:	fe 7c 28 00 	mov	r12,-55296
800141ce:	fe b0 f5 2c 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800141d2:	30 2b       	mov	r11,2
800141d4:	fe 7c 28 00 	mov	r12,-55296
800141d8:	fe b0 f4 92 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800141dc:	30 0b       	mov	r11,0
800141de:	16 9c       	mov	r12,r11
800141e0:	fe b0 f8 24 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141e4:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800141e6:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141e8:	fe 7c 28 00 	mov	r12,-55296
800141ec:	fe b0 f4 b0 	rcall	80012b4c <spi_unselectChip>
  return r1;
800141f0:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800141f2:	ae 88       	st.b	r7[0x0],r8
800141f4:	ec 08 18 00 	cp.b	r8,r6
800141f8:	e0 80 00 87 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800141fc:	e0 6b 00 ff 	mov	r11,255
80014200:	fe 7c 28 00 	mov	r12,-55296
80014204:	fe b0 f5 11 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014208:	30 2b       	mov	r11,2
8001420a:	fe 7c 28 00 	mov	r12,-55296
8001420e:	fe b0 f4 77 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014212:	30 0b       	mov	r11,0
80014214:	16 9c       	mov	r12,r11
80014216:	fe b0 f8 09 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001421a:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001421c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001421e:	fe 7c 28 00 	mov	r12,-55296
80014222:	fe b0 f4 95 	rcall	80012b4c <spi_unselectChip>
  return r1;
80014226:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014228:	ae 88       	st.b	r7[0x0],r8
8001422a:	ec 08 18 00 	cp.b	r8,r6
8001422e:	c6 c0       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014230:	e0 6b 00 ff 	mov	r11,255
80014234:	fe 7c 28 00 	mov	r12,-55296
80014238:	fe b0 f4 f7 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8001423c:	30 2b       	mov	r11,2
8001423e:	fe 7c 28 00 	mov	r12,-55296
80014242:	fe b0 f4 5d 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014246:	30 0b       	mov	r11,0
80014248:	16 9c       	mov	r12,r11
8001424a:	fe b0 f7 ef 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001424e:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80014250:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014252:	fe 7c 28 00 	mov	r12,-55296
80014256:	fe b0 f4 7b 	rcall	80012b4c <spi_unselectChip>
  return r1;
8001425a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8001425c:	ae 88       	st.b	r7[0x0],r8
8001425e:	ec 08 18 00 	cp.b	r8,r6
80014262:	c5 20       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014264:	e0 6b 00 ff 	mov	r11,255
80014268:	fe 7c 28 00 	mov	r12,-55296
8001426c:	fe b0 f4 dd 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014270:	30 2b       	mov	r11,2
80014272:	fe 7c 28 00 	mov	r12,-55296
80014276:	fe b0 f4 43 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
8001427a:	30 0b       	mov	r11,0
8001427c:	16 9c       	mov	r12,r11
8001427e:	fe b0 f7 d5 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014282:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80014284:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014286:	fe 7c 28 00 	mov	r12,-55296
8001428a:	fe b0 f4 61 	rcall	80012b4c <spi_unselectChip>
  return r1;
8001428e:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014290:	ae 88       	st.b	r7[0x0],r8
80014292:	ec 08 18 00 	cp.b	r8,r6
80014296:	c3 80       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014298:	e0 6b 00 ff 	mov	r11,255
8001429c:	fe 7c 28 00 	mov	r12,-55296
800142a0:	fe b0 f4 c3 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800142a4:	30 2b       	mov	r11,2
800142a6:	fe 7c 28 00 	mov	r12,-55296
800142aa:	fe b0 f4 29 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800142ae:	30 0b       	mov	r11,0
800142b0:	16 9c       	mov	r12,r11
800142b2:	fe b0 f7 bb 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800142b6:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800142b8:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800142ba:	fe 7c 28 00 	mov	r12,-55296
800142be:	fe b0 f4 47 	rcall	80012b4c <spi_unselectChip>
  return r1;
800142c2:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800142c4:	ae 88       	st.b	r7[0x0],r8
800142c6:	ec 08 18 00 	cp.b	r8,r6
800142ca:	c1 e0       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800142cc:	e0 6b 00 ff 	mov	r11,255
800142d0:	fe 7c 28 00 	mov	r12,-55296
800142d4:	fe b0 f4 a9 	rcall	80012c26 <spi_write>
800142d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800142dc:	30 2b       	mov	r11,2
800142de:	fe 7c 28 00 	mov	r12,-55296
800142e2:	fe b0 f4 0d 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800142e6:	30 0b       	mov	r11,0
800142e8:	33 bc       	mov	r12,59
800142ea:	fe b0 f7 9f 	rcall	80013228 <sd_mmc_spi_command>
800142ee:	e0 66 2c b4 	mov	r6,11444
800142f2:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800142f4:	ac 8c       	st.b	r6[0x0],r12
800142f6:	fe 7c 28 00 	mov	r12,-55296
800142fa:	fe b0 f4 29 	rcall	80012b4c <spi_unselectChip>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800142fe:	0d 88       	ld.ub	r8,r6[0x0]
80014300:	ac 88       	st.b	r6[0x0],r8
80014302:	58 08       	cp.w	r8,0
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
  if (sd_mmc_spi_check_presence())
  {
    if (sd_mmc_spi_init_done == false)
80014304:	c0 c1       	brne	8001431c <sd_mmc_spi_mem_check+0x2a8>
80014306:	0b 89       	ld.ub	r9,r5[0x0]
80014308:	30 08       	mov	r8,0
8001430a:	f0 09 18 00 	cp.b	r9,r8
8001430e:	c0 30       	breq	80014314 <sd_mmc_spi_mem_check+0x2a0>
80014310:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80014314:	fe b0 fa d0 	rcall	800138b4 <sd_mmc_spi_internal_init>
    }
    else
      return true;
  }
  return false;
}
80014318:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
      return true;
    sd_mmc_spi_init_done = false;
8001431c:	aa 87       	st.b	r5[0x0],r7
8001431e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80014322:	d7 03       	nop

80014324 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80014324:	fe 68 08 04 	mov	r8,-129020
80014328:	70 08       	ld.w	r8,r8[0x0]
8001432a:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8001432e:	58 38       	cp.w	r8,3
80014330:	c0 50       	breq	8001433a <uhd_get_speed+0x16>
80014332:	48 39       	lddpc	r9,8001433c <uhd_get_speed+0x18>
80014334:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80014338:	5e fc       	retal	r12
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
8001433a:	5e fd       	retal	0
8001433c:	80 02       	ld.sh	r2,r0[0x0]
8001433e:	3e 08       	mov	r8,-32

80014340 <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80014340:	e0 69 06 a4 	mov	r9,1700
	uhd_start_reset();
80014344:	93 0c       	st.w	r9[0x0],r12
80014346:	fe 68 04 00 	mov	r8,-130048
8001434a:	70 09       	ld.w	r9,r8[0x0]
8001434c:	a9 b9       	sbr	r9,0x9
}
8001434e:	91 09       	st.w	r8[0x0],r9
80014350:	5e fc       	retal	r12
80014352:	d7 03       	nop

80014354 <uhd_suspend>:

void uhd_suspend(void)
{
80014354:	eb cd 40 80 	pushm	r7,lr
	if (uhd_ctrl_request_timeout) {
80014358:	e0 68 2c c8 	mov	r8,11464
8001435c:	90 08       	ld.sh	r8,r8[0x0]
8001435e:	58 08       	cp.w	r8,0
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014360:	c4 d1       	brne	800143fa <uhd_suspend+0xa6>
80014362:	fe 69 05 c4 	mov	r9,-129596
		uhd_freeze_pipe(pipe);
80014366:	72 0e       	ld.w	lr,r9[0x0]
80014368:	fe 69 05 f4 	mov	r9,-129548
8001436c:	e2 68 00 00 	mov	r8,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014370:	93 08       	st.w	r9[0x0],r8
80014372:	fe 69 05 c8 	mov	r9,-129592
		uhd_freeze_pipe(pipe);
80014376:	72 0c       	ld.w	r12,r9[0x0]
80014378:	fe 69 05 f8 	mov	r9,-129544
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001437c:	93 08       	st.w	r9[0x0],r8
8001437e:	fe 69 05 cc 	mov	r9,-129588
		uhd_freeze_pipe(pipe);
80014382:	72 0b       	ld.w	r11,r9[0x0]
80014384:	fe 69 05 fc 	mov	r9,-129540
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014388:	93 08       	st.w	r9[0x0],r8
8001438a:	fe 69 05 d0 	mov	r9,-129584
		uhd_freeze_pipe(pipe);
8001438e:	72 0a       	ld.w	r10,r9[0x0]
80014390:	fe 69 06 00 	mov	r9,-129536
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014394:	93 08       	st.w	r9[0x0],r8
80014396:	10 5e       	eor	lr,r8
80014398:	10 5c       	eor	r12,r8
8001439a:	10 5b       	eor	r11,r8
8001439c:	10 5a       	eor	r10,r8
8001439e:	fe 69 05 d4 	mov	r9,-129580
		uhd_freeze_pipe(pipe);
800143a2:	fe 67 06 04 	mov	r7,-129532
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800143a6:	72 09       	ld.w	r9,r9[0x0]
800143a8:	fd de c2 21 	bfextu	lr,lr,0x11,0x1
800143ac:	8f 08       	st.w	r7[0x0],r8
800143ae:	10 59       	eor	r9,r8
800143b0:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
800143b4:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800143b8:	a3 6c       	lsl	r12,0x2
800143ba:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
800143be:	f9 ee 10 1e 	or	lr,r12,lr<<0x1
800143c2:	f5 da c2 21 	bfextu	r10,r10,0x11,0x1
800143c6:	fd eb 10 3b 	or	r11,lr,r11<<0x3
800143ca:	f7 ea 10 4a 	or	r10,r11,r10<<0x4
800143ce:	f5 e9 10 5a 	or	r10,r10,r9<<0x5
800143d2:	fe 69 05 d8 	mov	r9,-129576
800143d6:	72 09       	ld.w	r9,r9[0x0]
800143d8:	10 59       	eor	r9,r8
800143da:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800143de:	f5 e9 10 69 	or	r9,r10,r9<<0x6
		uhd_freeze_pipe(pipe);
800143e2:	fe 6a 06 08 	mov	r10,-129528
800143e6:	95 08       	st.w	r10[0x0],r8
800143e8:	e0 68 07 21 	mov	r8,1825
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
800143ec:	b0 89       	st.b	r8[0x0],r9
800143ee:	30 39       	mov	r9,3
800143f0:	e0 68 07 20 	mov	r8,1824

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
800143f4:	b0 89       	st.b	r8[0x0],r9
800143f6:	e3 cd 80 80 	ldm	sp++,r7,pc
		return;
800143fa:	30 19       	mov	r9,1
800143fc:	e0 68 07 23 	mov	r8,1827
80014400:	b0 89       	st.b	r8[0x0],r9
80014402:	e3 cd 80 80 	ldm	sp++,r7,pc
80014406:	d7 03       	nop

80014408 <uhd_ep_alloc>:
80014408:	d4 21       	pushm	r4-r7,lr
8001440a:	fe 69 00 00 	mov	r9,-131072
8001440e:	f2 f8 04 1c 	ld.w	r8,r9[1052]
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80014412:	ed b8 00 01 	bld	r8,0x1
80014416:	c2 90       	breq	80014468 <uhd_ep_alloc+0x60>
80014418:	30 2a       	mov	r10,2
8001441a:	30 19       	mov	r9,1
			continue;
		}
		uhd_enable_pipe(pipe);
8001441c:	fe 68 00 00 	mov	r8,-131072
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80014420:	e0 67 02 00 	mov	r7,512

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
80014424:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80014428:	f5 ee 10 0e 	or	lr,r10,lr
8001442c:	f1 4e 04 1c 	st.w	r8[1052],lr
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80014430:	e0 68 01 00 	mov	r8,256
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
80014434:	17 ae       	ld.ub	lr,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80014436:	30 06       	mov	r6,0
80014438:	fc 06 18 00 	cp.b	r6,lr
8001443c:	f0 06 17 90 	movgt	r6,r8
80014440:	ee 06 17 a0 	movle	r6,r7
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80014444:	17 b8       	ld.ub	r8,r11[0x3]
		// Bank choice
		switch(ep_type) {
80014446:	30 27       	mov	r7,2
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80014448:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
		// Bank choice
		switch(ep_type) {
8001444c:	ee 08 18 00 	cp.b	r8,r7
80014450:	e0 80 00 9b 	breq	80014586 <uhd_ep_alloc+0x17e>
80014454:	30 37       	mov	r7,3
80014456:	ee 08 18 00 	cp.b	r8,r7
8001445a:	c1 d0       	breq	80014494 <uhd_ep_alloc+0x8c>
8001445c:	30 17       	mov	r7,1
8001445e:	ee 08 18 00 	cp.b	r8,r7
80014462:	e0 80 00 8e 	breq	8001457e <uhd_ep_alloc+0x176>
		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
		uhd_enable_stall_interrupt(pipe);
		uhd_enable_pipe_error_interrupt(pipe);
		uhd_enable_pipe_interrupt(pipe);
		return true;
80014466:	d8 2a       	popm	r4-r7,pc,r12=0
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80014468:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8001446c:	ed b8 00 02 	bld	r8,0x2
80014470:	c0 f1       	brne	8001448e <uhd_ep_alloc+0x86>
80014472:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80014476:	ed b8 00 03 	bld	r8,0x3
8001447a:	c4 c1       	brne	80014512 <uhd_ep_alloc+0x10a>
8001447c:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80014480:	ed b8 00 04 	bld	r8,0x4
80014484:	e0 80 00 84 	breq	8001458c <uhd_ep_alloc+0x184>
80014488:	31 0a       	mov	r10,16
8001448a:	30 49       	mov	r9,4
8001448c:	cc 8b       	rjmp	8001441c <uhd_ep_alloc+0x14>
8001448e:	30 4a       	mov	r10,4
80014490:	30 29       	mov	r9,2
80014492:	cc 5b       	rjmp	8001441c <uhd_ep_alloc+0x14>
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
80014494:	17 e5       	ld.ub	r5,r11[0x6]
80014496:	30 07       	mov	r7,0
80014498:	b9 65       	lsl	r5,0x18
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
8001449a:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
8001449e:	ad 68       	lsl	r8,0xc
800144a0:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800144a4:	ab a8       	sbr	r8,0xa
800144a6:	0c 48       	or	r8,r6
800144a8:	f1 e5 10 05 	or	r5,r8,r5
800144ac:	eb e7 10 06 	or	r6,r5,r7
800144b0:	fe 65 05 00 	mov	r5,-129792
800144b4:	17 d4       	ld.ub	r4,r11[0x5]
800144b6:	f2 0e 15 02 	lsl	lr,r9,0x2
800144ba:	17 cb       	ld.ub	r11,r11[0x4]
800144bc:	fc 05 00 08 	add	r8,lr,r5
800144c0:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
800144c4:	30 87       	mov	r7,8
800144c6:	e0 65 04 00 	mov	r5,1024
800144ca:	5c cb       	swap.bh	r11
800144cc:	5c 7b       	castu.h	r11
800144ce:	f6 07 0c 4b 	max	r11,r11,r7
800144d2:	f6 05 0d 45 	min	r5,r11,r5
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800144d6:	fe 6b 05 30 	mov	r11,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
800144da:	a1 75       	lsl	r5,0x1
800144dc:	20 15       	sub	r5,1
800144de:	ea 05 12 00 	clz	r5,r5
800144e2:	ea 05 11 1c 	rsub	r5,r5,28
800144e6:	ed e5 10 45 	or	r5,r6,r5<<0x4
800144ea:	91 05       	st.w	r8[0x0],r5
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800144ec:	fc 0b 00 06 	add	r6,lr,r11
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
800144f0:	70 0b       	ld.w	r11,r8[0x0]
800144f2:	a1 bb       	sbr	r11,0x1
800144f4:	91 0b       	st.w	r8[0x0],r11
		if (!Is_uhd_pipe_configured(pipe)) {
800144f6:	6c 08       	ld.w	r8,r6[0x0]
800144f8:	e6 18 00 04 	andh	r8,0x4,COH
800144fc:	c0 e1       	brne	80014518 <uhd_ep_alloc+0x110>
			uhd_disable_pipe(pipe);
800144fe:	5c da       	com	r10
80014500:	10 9c       	mov	r12,r8
80014502:	fe 68 00 00 	mov	r8,-131072
80014506:	f0 f9 04 1c 	ld.w	r9,r8[1052]
8001450a:	12 6a       	and	r10,r9
8001450c:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
80014510:	d8 22       	popm	r4-r7,pc
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80014512:	30 8a       	mov	r10,8
80014514:	30 39       	mov	r9,3
80014516:	c8 3b       	rjmp	8001441c <uhd_ep_alloc+0x14>
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
			uhd_disable_pipe(pipe);
			return false;
		}
		uhd_configure_address(pipe, add);
80014518:	37 f5       	mov	r5,127
8001451a:	12 98       	mov	r8,r9
8001451c:	f7 d9 c0 02 	bfextu	r11,r9,0x0,0x2
80014520:	e2 18 00 04 	andl	r8,0x4,COH
80014524:	a3 7b       	lsl	r11,0x3
80014526:	e0 38 fb dc 	sub	r8,130012
8001452a:	ea 0b 09 4b 	lsl	r11,r5,r11
8001452e:	70 06       	ld.w	r6,r8[0x0]
80014530:	16 95       	mov	r5,r11
80014532:	5c 95       	brev	r5
80014534:	ea 05 12 00 	clz	r5,r5
80014538:	16 86       	andn	r6,r11
8001453a:	f8 05 09 4c 	lsl	r12,r12,r5
8001453e:	f9 eb 00 0b 	and	r11,r12,r11
80014542:	0c 4b       	or	r11,r6
80014544:	91 0b       	st.w	r8[0x0],r11
		uhd_enable_pipe(pipe);
80014546:	fe 68 00 00 	mov	r8,-131072
8001454a:	f0 fb 04 1c 	ld.w	r11,r8[1052]
8001454e:	16 4a       	or	r10,r11
80014550:	f1 4a 04 1c 	st.w	r8[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80014554:	fc 1b 02 00 	movh	r11,0x200
80014558:	f2 ca 00 01 	sub	r10,r9,1
8001455c:	f6 0a 09 4a 	lsl	r10,r11,r10
80014560:	f1 4a 04 18 	st.w	r8[1048],r10
		uhd_enable_stall_interrupt(pipe);
80014564:	e0 3e fa 10 	sub	lr,129552
80014568:	34 0a       	mov	r10,64
8001456a:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
8001456c:	9d 07       	st.w	lr[0x0],r7
		uhd_enable_pipe_interrupt(pipe);
8001456e:	e0 6a 01 00 	mov	r10,256
80014572:	30 1c       	mov	r12,1
80014574:	f4 09 09 49 	lsl	r9,r10,r9
80014578:	f1 49 04 18 	st.w	r8[1048],r9
		return true;
8001457c:	d8 22       	popm	r4-r7,pc
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8001457e:	17 e5       	ld.ub	r5,r11[0x6]
80014580:	30 47       	mov	r7,4
80014582:	b9 65       	lsl	r5,0x18
		case 1:
			bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
			break;
		case 2:
			bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
			break;
80014584:	c8 bb       	rjmp	8001449a <uhd_ep_alloc+0x92>
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
80014586:	30 05       	mov	r5,0
80014588:	30 47       	mov	r7,4
8001458a:	c8 8b       	rjmp	8001449a <uhd_ep_alloc+0x92>
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
8001458c:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80014590:	ed b8 00 05 	bld	r8,0x5
80014594:	c0 a1       	brne	800145a8 <uhd_ep_alloc+0x1a0>
80014596:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8001459a:	ed b8 00 06 	bld	r8,0x6
8001459e:	fe 90 ff 64 	breq	80014466 <uhd_ep_alloc+0x5e>
800145a2:	34 0a       	mov	r10,64
800145a4:	30 69       	mov	r9,6
800145a6:	c3 bb       	rjmp	8001441c <uhd_ep_alloc+0x14>
800145a8:	32 0a       	mov	r10,32
800145aa:	30 59       	mov	r9,5
800145ac:	c3 8b       	rjmp	8001441c <uhd_ep_alloc+0x14>

800145ae <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
800145ae:	d4 01       	pushm	lr
	if (ep_size < 8) {
800145b0:	30 78       	mov	r8,7
800145b2:	f0 0b 18 00 	cp.b	r11,r8
800145b6:	e0 88 00 3f 	brls	80014634 <uhd_ep0_alloc+0x86>
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
800145ba:	fe 69 00 00 	mov	r9,-131072
800145be:	f2 f8 04 1c 	ld.w	r8,r9[1052]
800145c2:	a1 a8       	sbr	r8,0x0
800145c4:	f3 48 04 1c 	st.w	r9[1052],r8
	uhd_configure_pipe(0, // Pipe 0
800145c8:	30 8e       	mov	lr,8
800145ca:	fe 68 05 00 	mov	r8,-129792
800145ce:	f6 0e 0c 4b 	max	r11,r11,lr
800145d2:	e0 6a 04 00 	mov	r10,1024
800145d6:	f6 0a 0d 4a 	min	r10,r11,r10
800145da:	a1 7a       	lsl	r10,0x1
800145dc:	20 1a       	sub	r10,1
800145de:	f4 0a 12 00 	clz	r10,r10
800145e2:	f4 0a 11 1c 	rsub	r10,r10,28
800145e6:	a5 6a       	lsl	r10,0x4
800145e8:	91 0a       	st.w	r8[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
800145ea:	70 0a       	ld.w	r10,r8[0x0]
800145ec:	a1 ba       	sbr	r10,0x1
800145ee:	91 0a       	st.w	r8[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
800145f0:	fe 68 05 30 	mov	r8,-129744
800145f4:	70 08       	ld.w	r8,r8[0x0]
800145f6:	e6 18 00 04 	andh	r8,0x4,COH
800145fa:	c1 60       	breq	80014626 <uhd_ep0_alloc+0x78>
		uhd_disable_pipe(0);
		return false;
	}
	uhd_configure_address(0, add);
800145fc:	fe 6a 04 24 	mov	r10,-130012
80014600:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80014604:	74 08       	ld.w	r8,r10[0x0]
80014606:	e0 18 ff 80 	andl	r8,0xff80
8001460a:	f9 e8 10 08 	or	r8,r12,r8
8001460e:	95 08       	st.w	r10[0x0],r8

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
80014610:	fe 68 05 f0 	mov	r8,-129552
80014614:	34 0a       	mov	r10,64
80014616:	91 0a       	st.w	r8[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
80014618:	91 0e       	st.w	r8[0x0],lr
	uhd_enable_pipe_interrupt(0);
8001461a:	30 1c       	mov	r12,1
8001461c:	e0 68 01 00 	mov	r8,256
80014620:	f3 48 04 18 	st.w	r9[1048],r8
	return true;
}
80014624:	d8 02       	popm	pc
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
	if (!Is_uhd_pipe_configured(0)) {
		uhd_disable_pipe(0);
80014626:	10 9c       	mov	r12,r8
80014628:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8001462c:	a1 c8       	cbr	r8,0x0
8001462e:	f3 48 04 1c 	st.w	r9[1052],r8
		return false;
80014632:	d8 02       	popm	pc
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
	if (ep_size < 8) {
80014634:	d8 0a       	popm	pc,r12=0
80014636:	d7 03       	nop

80014638 <otg_dual_enable>:
	}
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
80014638:	eb cd 40 80 	pushm	r7,lr
	if (otg_initialized) {
8001463c:	e0 68 06 a1 	mov	r8,1697
80014640:	30 09       	mov	r9,0
80014642:	11 8a       	ld.ub	r10,r8[0x0]
80014644:	f2 0a 18 00 	cp.b	r10,r9
80014648:	c0 30       	breq	8001464e <otg_dual_enable+0x16>
8001464a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		return false; // Dual role already initialized
	}
	otg_initialized = true;
8001464e:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
80014650:	b0 89       	st.b	r8[0x0],r9
80014652:	e0 a0 0b af 	rcall	80015db0 <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
80014656:	30 0a       	mov	r10,0
80014658:	e0 6b 02 20 	mov	r11,544
8001465c:	fe cc f5 34 	sub	r12,pc,-2764
	//pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
80014660:	fe b0 f0 ec 	rcall	80012838 <INTC_register_interrupt>
80014664:	fe 78 10 00 	mov	r8,-61440
80014668:	fc 19 00 20 	movh	r9,0x20
8001466c:	91 69       	st.w	r8[0x18],r9
8001466e:	91 99       	st.w	r8[0x24],r9
80014670:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
80014672:	f1 49 00 74 	st.w	r8[116],r9
80014676:	fe 68 08 00 	mov	r8,-129024
8001467a:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
8001467c:	af c9       	cbr	r9,0xe
8001467e:	91 09       	st.w	r8[0x0],r9
80014680:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
80014682:	af b9       	sbr	r9,0xf
80014684:	91 09       	st.w	r8[0x0],r9
80014686:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
80014688:	a1 a9       	sbr	r9,0x0
8001468a:	91 09       	st.w	r8[0x0],r9
8001468c:	30 17       	mov	r7,1
8001468e:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
80014692:	93 07       	st.w	r9[0x0],r7
80014694:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
80014696:	af a9       	sbr	r9,0xe
80014698:	91 09       	st.w	r8[0x0],r9
8001469a:	fe 68 08 04 	mov	r8,-129020
8001469e:	70 08       	ld.w	r8,r8[0x0]
800146a0:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
800146a4:	c0 90       	breq	800146b6 <otg_dual_enable+0x7e>
800146a6:	0e 9c       	mov	r12,r7
		uhc_start();
800146a8:	e0 a0 30 3a 	rcall	8001a71c <usb_mode_change>
800146ac:	e0 a0 0c 60 	rcall	80015f6c <uhc_start>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
800146b0:	0e 9c       	mov	r12,r7
	otg_enable_id_interrupt();
	otg_ack_id_transition();
	otg_freeze_clock();
	if (Is_otg_id_device()) {
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
800146b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800146b6:	30 0c       	mov	r12,0
800146b8:	e0 a0 30 32 	rcall	8001a71c <usb_mode_change>
800146bc:	0e 9c       	mov	r12,r7
800146be:	e3 cd 80 80 	ldm	sp++,r7,pc
800146c2:	d7 03       	nop

800146c4 <uhd_enable>:
800146c4:	eb cd 40 80 	pushm	r7,lr
800146c8:	e1 b7 00 00 	mfsr	r7,0x0
800146cc:	d3 03       	ssrf	0x10
800146ce:	cb 5f       	rcall	80014638 <otg_dual_enable>
800146d0:	c0 71       	brne	800146de <uhd_enable+0x1a>
800146d2:	fe 6b 08 04 	mov	r11,-129020
800146d6:	76 08       	ld.w	r8,r11[0x0]
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
800146d8:	e2 18 04 00 	andl	r8,0x400,COH
800146dc:	c0 70       	breq	800146ea <uhd_enable+0x26>
800146de:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800146e2:	c0 21       	brne	800146e6 <uhd_enable+0x22>
800146e4:	d5 03       	csrf	0x10
      cpu_irq_enable();
800146e6:	e3 cd 80 80 	ldm	sp++,r7,pc
   }

	barrier();
800146ea:	fe 79 10 00 	mov	r9,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
800146ee:	fc 1a 00 40 	movh	r10,0x40
800146f2:	93 6a       	st.w	r9[0x18],r10
800146f4:	93 9a       	st.w	r9[0x24],r10
800146f6:	93 2a       	st.w	r9[0x8],r10
800146f8:	f3 4a 00 88 	st.w	r9[136],r10
800146fc:	f3 4a 00 78 	st.w	r9[120],r10
80014700:	fe 69 08 00 	mov	r9,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80014704:	72 0a       	ld.w	r10,r9[0x0]
80014706:	ad ba       	sbr	r10,0xd
80014708:	93 0a       	st.w	r9[0x0],r10
8001470a:	72 0a       	ld.w	r10,r9[0x0]
# endif
#endif
	otg_enable_pad();
8001470c:	ad aa       	sbr	r10,0xc
8001470e:	93 0a       	st.w	r9[0x0],r10
80014710:	72 0a       	ld.w	r10,r9[0x0]
	otg_enable();
80014712:	af ba       	sbr	r10,0xf
80014714:	93 0a       	st.w	r9[0x0],r10
80014716:	e0 6a 2c c8 	mov	r10,11464

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
8001471a:	b4 08       	st.h	r10[0x0],r8
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
8001471c:	72 0a       	ld.w	r10,r9[0x0]
8001471e:	af ca       	cbr	r10,0xe
80014720:	93 0a       	st.w	r9[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
80014722:	37 fa       	mov	r10,127
80014724:	fe 69 00 00 	mov	r9,-131072
80014728:	f3 4a 04 08 	st.w	r9[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
8001472c:	fe 6a 08 08 	mov	r10,-129016
80014730:	30 2c       	mov	r12,2
80014732:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
80014734:	f2 fa 08 00 	ld.w	r10,r9[2048]
80014738:	e8 1a 01 0a 	orl	r10,0x10a
8001473c:	f3 4a 08 00 	st.w	r9[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
80014740:	e0 6a 2c bc 	mov	r10,11452
80014744:	10 99       	mov	r9,r8
	uhd_ctrl_request_last = NULL;
80014746:	95 08       	st.w	r10[0x0],r8
80014748:	e0 6a 2c c4 	mov	r10,11460
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
8001474c:	95 08       	st.w	r10[0x0],r8
	uhd_resume_start = 0;
8001474e:	e0 68 07 20 	mov	r8,1824
	uhd_b_suspend_requested = false;
80014752:	b0 89       	st.b	r8[0x0],r9
80014754:	e0 68 07 22 	mov	r8,1826
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
80014758:	b0 89       	st.b	r8[0x0],r9
8001475a:	e0 68 07 23 	mov	r8,1827
8001475e:	b0 89       	st.b	r8[0x0],r9

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80014760:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
80014764:	e0 68 02 00 	mov	r8,512
80014768:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
8001476a:	76 08       	ld.w	r8,r11[0x0]
8001476c:	ed b8 00 0b 	bld	r8,0xb
80014770:	f3 fc 0a 00 	st.weq	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80014774:	32 59       	mov	r9,37
80014776:	fe 68 00 00 	mov	r8,-131072
8001477a:	f1 49 04 18 	st.w	r8[1048],r9
8001477e:	fe 69 08 00 	mov	r9,-129024
80014782:	72 08       	ld.w	r8,r9[0x0]
80014784:	af a8       	sbr	r8,0xe
80014786:	93 08       	st.w	r9[0x0],r8
80014788:	ca bb       	rjmp	800146de <uhd_enable+0x1a>
8001478a:	d7 03       	nop

8001478c <uhd_disable>:
8001478c:	eb cd 40 c0 	pushm	r6-r7,lr
80014790:	fe 69 08 04 	mov	r9,-129020
80014794:	18 96       	mov	r6,r12
80014796:	72 08       	ld.w	r8,r9[0x0]
80014798:	ed b8 00 0e 	bld	r8,0xe
void uhd_disable(bool b_id_stop)
{
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
8001479c:	cf d1       	brne	80014796 <uhd_disable+0xa>
	otg_unfreeze_clock();
8001479e:	fe 67 08 00 	mov	r7,-129024
800147a2:	6e 08       	ld.w	r8,r7[0x0]
800147a4:	af c8       	cbr	r8,0xe
800147a6:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
800147a8:	fe 68 00 00 	mov	r8,-131072
800147ac:	f0 f9 08 00 	ld.w	r9,r8[2048]
800147b0:	e0 19 ff f5 	andl	r9,0xfff5
800147b4:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
800147b8:	37 f9       	mov	r9,127
800147ba:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
800147be:	fe 69 04 00 	mov	r9,-130048
800147c2:	72 08       	ld.w	r8,r9[0x0]
800147c4:	a9 c8       	cbr	r8,0x8
800147c6:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
800147c8:	fe 68 08 08 	mov	r8,-129016
800147cc:	e0 69 02 00 	mov	r9,512
	uhc_notify_connection(false);
800147d0:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
800147d2:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
800147d4:	e0 a0 0f 58 	rcall	80016684 <uhc_notify_connection>
	otg_freeze_clock();
800147d8:	6e 08       	ld.w	r8,r7[0x0]
800147da:	af a8       	sbr	r8,0xe
800147dc:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
800147de:	58 06       	cp.w	r6,0
800147e0:	c0 31       	brne	800147e6 <uhd_disable+0x5a>
800147e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800147e6:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800147ea:	d3 03       	ssrf	0x10
}


void otg_dual_disable(void)
{
	if (!otg_initialized) {
800147ec:	e0 68 06 a1 	mov	r8,1697
800147f0:	30 09       	mov	r9,0
800147f2:	11 8a       	ld.ub	r10,r8[0x0]
800147f4:	f2 0a 18 00 	cp.b	r10,r9
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
800147f8:	c1 90       	breq	8001482a <uhd_disable+0x9e>
800147fa:	fe 7a 0c 00 	mov	r10,-62464
800147fe:	30 0c       	mov	r12,0
80014800:	f4 fb 01 44 	ld.w	r11,r10[324]
80014804:	f7 dc d0 01 	bfins	r11,r12,0x0,0x1
80014808:	f5 4b 01 44 	st.w	r10[324],r11
	otg_unfreeze_clock();
8001480c:	6e 0a       	ld.w	r10,r7[0x0]
8001480e:	af ca       	cbr	r10,0xe
# ifdef USB_ID
	otg_disable_id_interrupt();
80014810:	8f 0a       	st.w	r7[0x0],r10
80014812:	6e 0a       	ld.w	r10,r7[0x0]
80014814:	a1 ca       	cbr	r10,0x0
# endif
	otg_disable();
80014816:	8f 0a       	st.w	r7[0x0],r10
80014818:	6e 0a       	ld.w	r10,r7[0x0]
8001481a:	af da       	cbr	r10,0xf
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
8001481c:	8f 0a       	st.w	r7[0x0],r10
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
8001481e:	b0 89       	st.b	r8[0x0],r9
80014820:	6e 08       	ld.w	r8,r7[0x0]
80014822:	ad c8       	cbr	r8,0xc
	sysclk_disable_usb();
80014824:	8f 08       	st.w	r7[0x0],r8
80014826:	e0 a0 0a 4b 	rcall	80015cbc <sysclk_disable_usb>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8001482a:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
   }

	barrier();
8001482e:	c0 30       	breq	80014834 <uhd_disable+0xa8>
80014830:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014834:	d5 03       	csrf	0x10
80014836:	cf db       	rjmp	80014830 <uhd_disable+0xa4>

80014838 <uhd_ctrl_request_end>:
80014838:	eb cd 40 f8 	pushm	r3-r7,lr
8001483c:	20 2d       	sub	sp,8
8001483e:	30 08       	mov	r8,0
80014840:	18 93       	mov	r3,r12
80014842:	e0 64 2c c8 	mov	r4,11464
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
80014846:	e0 67 2c bc 	mov	r7,11452

	//	print_dbg("\r\n ctrl request end.");

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
8001484a:	a8 08       	st.h	r4[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8001484c:	6e 0c       	ld.w	r12,r7[0x0]
8001484e:	78 65       	ld.w	r5,r12[0x18]
	cpu_irq_disable();
80014850:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
80014854:	d3 03       	ssrf	0x10
80014856:	6e 09       	ld.w	r9,r7[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80014858:	72 76       	ld.w	r6,r9[0x1c]
8001485a:	8f 06       	st.w	r7[0x0],r6
8001485c:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80014860:	e0 81 00 c2 	brne	800149e4 <uhd_ctrl_request_end+0x1ac>

	// Call callback
	if (callback_end != NULL) {
80014864:	e0 a0 73 ac 	rcall	80022fbc <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80014868:	58 05       	cp.w	r5,0
8001486a:	c0 b0       	breq	80014880 <uhd_ctrl_request_end+0x48>
8001486c:	fe 68 04 24 	mov	r8,-130012
80014870:	70 0c       	ld.w	r12,r8[0x0]
80014872:	e0 68 2c c0 	mov	r8,11456
80014876:	06 9b       	mov	r11,r3
80014878:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
8001487c:	90 8a       	ld.uh	r10,r8[0x0]
	} setup;
	volatile uint64_t *ptr_ep_data;

	//	print_dbg("\r\n control request setup phase ");

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
8001487e:	5d 15       	icall	r5
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014880:	58 06       	cp.w	r6,0
80014882:	c3 50       	breq	800148ec <uhd_ctrl_request_end+0xb4>
	} setup;
	volatile uint64_t *ptr_ep_data;

	//	print_dbg("\r\n control request setup phase ");

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80014884:	e0 68 2c b8 	mov	r8,11448
80014888:	6e 0b       	ld.w	r11,r7[0x0]
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
8001488a:	30 8a       	mov	r10,8
8001488c:	30 07       	mov	r7,0
8001488e:	2f fb       	sub	r11,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
80014890:	91 07       	st.w	r8[0x0],r7
80014892:	1a 9c       	mov	r12,sp
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014894:	e0 a0 75 bc 	rcall	8002340c <memcpy>
	volatile uint64_t *ptr_ep_data;

	//	print_dbg("\r\n control request setup phase ");

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014898:	e0 68 2c c0 	mov	r8,11456

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
8001489c:	b0 07       	st.h	r8[0x0],r7
8001489e:	fe 68 00 00 	mov	r8,-131072
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148a2:	40 09       	lddsp	r9,sp[0x0]
800148a4:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
800148a8:	5c ca       	swap.bh	r10
	volatile uint64_t *ptr_ep_data;

	//	print_dbg("\r\n control request setup phase ");

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
800148aa:	5c 8a       	casts.h	r10

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
800148ac:	f0 fb 04 1c 	ld.w	r11,r8[1052]
800148b0:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148b4:	40 18       	lddsp	r8,sp[0x4]
800148b6:	f0 0a 14 10 	asr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
800148ba:	5c ca       	swap.bh	r10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800148bc:	5c 8a       	casts.h	r10
800148be:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
800148c2:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148c6:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
800148ca:	5c ca       	swap.bh	r10
800148cc:	5c 8a       	casts.h	r10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148ce:	58 0b       	cp.w	r11,0
800148d0:	c0 c0       	breq	800148e8 <uhd_ctrl_request_end+0xb0>
800148d2:	fe 6b 04 24 	mov	r11,-130012
800148d6:	76 0b       	ld.w	r11,r11[0x0]
800148d8:	e0 6c 2c bc 	mov	r12,11452
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
800148dc:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
800148e0:	78 0c       	ld.w	r12,r12[0x0]
800148e2:	19 8c       	ld.ub	r12,r12[0x0]
800148e4:	16 3c       	cp.w	r12,r11
800148e6:	c0 d0       	breq	80014900 <uhd_ctrl_request_end+0xc8>
800148e8:	30 1c       	mov	r12,1
800148ea:	ca 7f       	rcall	80014838 <uhd_ctrl_request_end>
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800148ec:	e0 68 07 23 	mov	r8,1827
800148f0:	30 09       	mov	r9,0
		return; // Endpoint not valid
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
800148f2:	11 8a       	ld.ub	r10,r8[0x0]
800148f4:	f2 0a 18 00 	cp.b	r10,r9
800148f8:	c2 51       	brne	80014942 <uhd_ctrl_request_end+0x10a>
800148fa:	2f ed       	sub	sp,-8
800148fc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80014900:	fe 6c 05 00 	mov	r12,-129792
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
80014904:	78 0b       	ld.w	r11,r12[0x0]
80014906:	e0 1b fc ff 	andl	r11,0xfcff
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
8001490a:	99 0b       	st.w	r12[0x0],r11
8001490c:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
80014910:	30 4c       	mov	r12,4
80014912:	fe 6b 05 60 	mov	r11,-129696

	uhd_ctrl_request_timeout = 5000;
80014916:	97 0c       	st.w	r11[0x0],r12
80014918:	10 9a       	mov	r10,r8
8001491a:	12 9b       	mov	r11,r9
	uhd_enable_setup_ready_interrupt(0);
8001491c:	fc 18 e0 00 	movh	r8,0xe000
80014920:	f0 eb 00 00 	st.d	r8[0],r10
	uhd_ack_fifocon(0);
80014924:	e0 68 13 88 	mov	r8,5000
80014928:	a8 08       	st.h	r4[0x0],r8
8001492a:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
8001492e:	91 0c       	st.w	r8[0x0],r12
80014930:	e0 69 40 00 	mov	r9,16384
	if (b_new_request) {
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80014934:	fe 68 06 20 	mov	r8,-129504
	uhd_start_reset();
}

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
80014938:	91 09       	st.w	r8[0x0],r9
8001493a:	e2 69 00 00 	mov	r9,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001493e:	91 09       	st.w	r8[0x0],r9
80014940:	cd 6b       	rjmp	800148ec <uhd_ctrl_request_end+0xb4>
		uhd_freeze_pipe(pipe);
80014942:	b0 89       	st.b	r8[0x0],r9
80014944:	88 09       	ld.sh	r9,r4[0x0]
80014946:	58 09       	cp.w	r9,0
80014948:	c5 01       	brne	800149e8 <uhd_ctrl_request_end+0x1b0>
8001494a:	fe 69 05 c4 	mov	r9,-129596
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001494e:	72 07       	ld.w	r7,r9[0x0]
80014950:	fe 69 05 f4 	mov	r9,-129548
		uhd_freeze_pipe(pipe);
80014954:	e2 68 00 00 	mov	r8,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014958:	93 08       	st.w	r9[0x0],r8
8001495a:	fe 69 05 c8 	mov	r9,-129592
		uhd_freeze_pipe(pipe);
8001495e:	72 0c       	ld.w	r12,r9[0x0]
80014960:	fe 69 05 f8 	mov	r9,-129544
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014964:	93 08       	st.w	r9[0x0],r8
80014966:	fe 69 05 cc 	mov	r9,-129588
		uhd_freeze_pipe(pipe);
8001496a:	72 0b       	ld.w	r11,r9[0x0]
8001496c:	fe 69 05 fc 	mov	r9,-129540
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014970:	93 08       	st.w	r9[0x0],r8
80014972:	fe 69 05 d0 	mov	r9,-129584
80014976:	72 0a       	ld.w	r10,r9[0x0]
80014978:	fe 69 06 00 	mov	r9,-129536
		uhd_freeze_pipe(pipe);
8001497c:	93 08       	st.w	r9[0x0],r8
8001497e:	10 57       	eor	r7,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014980:	10 5c       	eor	r12,r8
80014982:	10 5b       	eor	r11,r8
80014984:	10 5a       	eor	r10,r8
		uhd_freeze_pipe(pipe);
80014986:	fe 69 05 d4 	mov	r9,-129580
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001498a:	fe 66 06 04 	mov	r6,-129532
8001498e:	72 09       	ld.w	r9,r9[0x0]
80014990:	ef d7 c2 21 	bfextu	r7,r7,0x11,0x1
80014994:	8d 08       	st.w	r6[0x0],r8
80014996:	10 59       	eor	r9,r8
80014998:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
8001499c:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800149a0:	a3 6c       	lsl	r12,0x2
800149a2:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
800149a6:	f9 e7 10 17 	or	r7,r12,r7<<0x1
800149aa:	f5 da c2 21 	bfextu	r10,r10,0x11,0x1
800149ae:	ef eb 10 3b 	or	r11,r7,r11<<0x3
800149b2:	f7 ea 10 4a 	or	r10,r11,r10<<0x4
800149b6:	f5 e9 10 5a 	or	r10,r10,r9<<0x5
800149ba:	fe 69 05 d8 	mov	r9,-129576
		uhd_freeze_pipe(pipe);
800149be:	72 09       	ld.w	r9,r9[0x0]
800149c0:	10 59       	eor	r9,r8
800149c2:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
800149c6:	f5 e9 10 69 	or	r9,r10,r9<<0x6
800149ca:	fe 6a 06 08 	mov	r10,-129528
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800149ce:	95 08       	st.w	r10[0x0],r8
800149d0:	e0 68 07 21 	mov	r8,1825
      cpu_irq_enable();
800149d4:	b0 89       	st.b	r8[0x0],r9

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
800149d6:	30 39       	mov	r9,3
800149d8:	e0 68 07 20 	mov	r8,1824
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800149dc:	b0 89       	st.b	r8[0x0],r9
800149de:	2f ed       	sub	sp,-8
800149e0:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800149e4:	d5 03       	csrf	0x10
800149e6:	c3 fb       	rjmp	80014864 <uhd_ctrl_request_end+0x2c>
800149e8:	30 19       	mov	r9,1
800149ea:	b0 89       	st.b	r8[0x0],r9
800149ec:	2f ed       	sub	sp,-8
800149ee:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800149f2:	d7 03       	nop

800149f4 <uhd_setup_request>:
800149f4:	eb cd 40 fc 	pushm	r2-r7,lr
800149f8:	20 3d       	sub	sp,12
800149fa:	18 97       	mov	r7,r12
800149fc:	50 0b       	stdsp	sp[0x0],r11
800149fe:	14 92       	mov	r2,r10
80014a00:	12 96       	mov	r6,r9
80014a02:	10 93       	mov	r3,r8
		usb_setup_req_t *req,
		uint8_t *payload,
		uint16_t payload_size,
		uhd_callback_setup_run_t callback_run,
		uhd_callback_setup_end_t callback_end)
{
80014a04:	40 a4       	lddsp	r4,sp[0x28]
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80014a06:	32 0c       	mov	r12,32
80014a08:	e0 a0 72 e2 	rcall	80022fcc <malloc>
	if (request == NULL) {
80014a0c:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80014a0e:	18 95       	mov	r5,r12
	if (request == NULL) {
80014a10:	c5 c0       	breq	80014ac8 <uhd_setup_request+0xd4>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80014a12:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
80014a14:	30 8a       	mov	r10,8
80014a16:	e0 a0 74 fb 	rcall	8002340c <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
80014a1a:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
80014a1c:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
80014a1e:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
80014a22:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
80014a24:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
80014a26:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80014a28:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80014a2c:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80014a2e:	e0 69 2c bc 	mov	r9,11452
80014a32:	72 0a       	ld.w	r10,r9[0x0]
80014a34:	58 0a       	cp.w	r10,0
		uhd_ctrl_request_first = request;
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80014a36:	c6 f0       	breq	80014b14 <uhd_setup_request+0x120>
80014a38:	10 9a       	mov	r10,r8
80014a3a:	e0 68 2c c4 	mov	r8,11460
	}
	uhd_ctrl_request_last = request;
80014a3e:	70 0c       	ld.w	r12,r8[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80014a40:	99 75       	st.w	r12[0x1c],r5
80014a42:	91 05       	st.w	r8[0x0],r5
80014a44:	ed bb 00 10 	bld	r11,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80014a48:	c3 e1       	brne	80014ac4 <uhd_setup_request+0xd0>
	*ptr_ep_data = setup.value64;

	uhd_ctrl_request_timeout = 5000;
	uhd_enable_setup_ready_interrupt(0);
	uhd_ack_fifocon(0);
	uhd_unfreeze_pipe(0);
80014a4a:	58 0a       	cp.w	r10,0
80014a4c:	c0 41       	brne	80014a54 <uhd_setup_request+0x60>
80014a4e:	2f dd       	sub	sp,-12
	} setup;
	volatile uint64_t *ptr_ep_data;

	//	print_dbg("\r\n control request setup phase ");

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80014a50:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80014a54:	e0 68 2c b8 	mov	r8,11448
80014a58:	72 0b       	ld.w	r11,r9[0x0]
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014a5a:	30 07       	mov	r7,0
80014a5c:	2f fb       	sub	r11,-1
80014a5e:	91 07       	st.w	r8[0x0],r7
80014a60:	30 8a       	mov	r10,8
80014a62:	fa cc ff fc 	sub	r12,sp,-4

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
80014a66:	e0 a0 74 d3 	rcall	8002340c <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a6a:	e0 68 2c c0 	mov	r8,11456

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80014a6e:	b0 07       	st.h	r8[0x0],r7
80014a70:	fe 68 00 00 	mov	r8,-131072
80014a74:	40 19       	lddsp	r9,sp[0x4]
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a76:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80014a7a:	5c ca       	swap.bh	r10
80014a7c:	5c 8a       	casts.h	r10
	volatile uint64_t *ptr_ep_data;

	//	print_dbg("\r\n control request setup phase ");

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014a7e:	f0 fb 04 1c 	ld.w	r11,r8[1052]

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80014a82:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
80014a86:	40 28       	lddsp	r8,sp[0x8]
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a88:	f0 0a 14 10 	asr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80014a8c:	5c ca       	swap.bh	r10
80014a8e:	5c 8a       	casts.h	r10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80014a90:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80014a94:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a98:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80014a9c:	5c ca       	swap.bh	r10
80014a9e:	5c 8a       	casts.h	r10
80014aa0:	58 0b       	cp.w	r11,0
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014aa2:	c0 c0       	breq	80014aba <uhd_setup_request+0xc6>
80014aa4:	fe 6b 04 24 	mov	r11,-130012
80014aa8:	76 0b       	ld.w	r11,r11[0x0]
80014aaa:	e0 6c 2c bc 	mov	r12,11452
80014aae:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80014ab2:	78 0c       	ld.w	r12,r12[0x0]
80014ab4:	19 8c       	ld.ub	r12,r12[0x0]
80014ab6:	16 3c       	cp.w	r12,r11
80014ab8:	c0 b0       	breq	80014ace <uhd_setup_request+0xda>
80014aba:	30 1c       	mov	r12,1
      cpu_irq_enable();
80014abc:	cb ee       	rcall	80014838 <uhd_ctrl_request_end>
80014abe:	2f dd       	sub	sp,-12
	if (b_start_request) {
		// Start immediately request
		uhd_ctrl_phase_setup();
	}
	return true;
}
80014ac0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80014ac4:	d5 03       	csrf	0x10
		return; // Endpoint not valid
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
80014ac6:	cc 2b       	rjmp	80014a4a <uhd_setup_request+0x56>
80014ac8:	2f dd       	sub	sp,-12
80014aca:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80014ace:	fe 6c 05 00 	mov	r12,-129792
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80014ad2:	78 0b       	ld.w	r11,r12[0x0]
80014ad4:	e0 1b fc ff 	andl	r11,0xfcff
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
80014ad8:	99 0b       	st.w	r12[0x0],r11
80014ada:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
80014ade:	30 4c       	mov	r12,4
80014ae0:	fe 6b 05 60 	mov	r11,-129696
80014ae4:	97 0c       	st.w	r11[0x0],r12
80014ae6:	10 9a       	mov	r10,r8
80014ae8:	12 9b       	mov	r11,r9

	uhd_ctrl_request_timeout = 5000;
80014aea:	fc 18 e0 00 	movh	r8,0xe000
80014aee:	f0 eb 00 00 	st.d	r8[0],r10
	uhd_enable_setup_ready_interrupt(0);
80014af2:	e0 69 13 88 	mov	r9,5000
80014af6:	e0 68 2c c8 	mov	r8,11464
	uhd_ack_fifocon(0);
80014afa:	b0 09       	st.h	r8[0x0],r9
80014afc:	fe 68 05 f0 	mov	r8,-129552
80014b00:	91 0c       	st.w	r8[0x0],r12
	uhd_unfreeze_pipe(0);
80014b02:	e0 69 40 00 	mov	r9,16384
80014b06:	fe 68 06 20 	mov	r8,-129504
	request->next_request = NULL;

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
		uhd_ctrl_request_first = request;
80014b0a:	91 09       	st.w	r8[0x0],r9
80014b0c:	e2 69 00 00 	mov	r9,131072
80014b10:	91 09       	st.w	r8[0x0],r9
80014b12:	c9 eb       	rjmp	80014a4e <uhd_setup_request+0x5a>
80014b14:	93 05       	st.w	r9[0x0],r5
80014b16:	30 1a       	mov	r10,1
80014b18:	e0 68 2c c4 	mov	r8,11460
80014b1c:	c9 3b       	rjmp	80014a42 <uhd_setup_request+0x4e>
80014b1e:	d7 03       	nop

80014b20 <uhd_ep_abort_pipe>:
80014b20:	eb cd 40 c0 	pushm	r6-r7,lr
80014b24:	fe 68 00 00 	mov	r8,-131072
80014b28:	e0 79 00 00 	mov	r9,65536
80014b2c:	f0 fa 04 1c 	ld.w	r10,r8[1052]
80014b30:	f2 0c 09 49 	lsl	r9,r9,r12
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80014b34:	f3 ea 10 0a 	or	r10,r9,r10
80014b38:	f1 4a 04 1c 	st.w	r8[1052],r10
80014b3c:	f0 fa 04 1c 	ld.w	r10,r8[1052]
80014b40:	5c d9       	com	r9
80014b42:	14 69       	and	r9,r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80014b44:	fe 6a 05 00 	mov	r10,-129792
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80014b48:	f1 49 04 1c 	st.w	r8[1052],r9

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80014b4c:	f8 08 15 02 	lsl	r8,r12,0x2
80014b50:	f0 0a 00 0e 	add	lr,r8,r10
	uhd_enable_stall_interrupt(pipe);
80014b54:	fe 6a 05 f0 	mov	r10,-129552
{
	// Stop transfer
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80014b58:	7c 09       	ld.w	r9,lr[0x0]
80014b5a:	ab a9       	sbr	r9,0xa
80014b5c:	9d 09       	st.w	lr[0x0],r9
	uhd_enable_stall_interrupt(pipe);
80014b5e:	f0 0a 00 09 	add	r9,r8,r10
80014b62:	34 0a       	mov	r10,64
80014b64:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80014b66:	e0 38 f9 e0 	sub	r8,129504
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);
80014b6a:	30 8a       	mov	r10,8
80014b6c:	93 0a       	st.w	r9[0x0],r10

	uhd_disable_out_ready_interrupt(pipe);
80014b6e:	30 29       	mov	r9,2
80014b70:	91 09       	st.w	r8[0x0],r9
	uhd_pipe_dma_set_control(pipe, 0);
80014b72:	f8 08 15 04 	lsl	r8,r12,0x4
80014b76:	e0 38 f9 00 	sub	r8,129280
80014b7a:	30 09       	mov	r9,0
80014b7c:	91 29       	st.w	r8[0x8],r9
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80014b7e:	e0 68 06 a8 	mov	r8,1704
80014b82:	f8 ca 00 01 	sub	r10,r12,1
80014b86:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80014b8a:	f0 0a 00 2a 	add	r10,r8,r10<<0x2
	if (ptr_job->busy == false) {
80014b8e:	74 08       	ld.w	r8,r10[0x0]
80014b90:	58 08       	cp.w	r8,0
		return; // No job running
	}
	ptr_job->busy = false;
80014b92:	c2 b4       	brge	80014be8 <uhd_ep_abort_pipe+0xc8>
80014b94:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
	if (NULL == ptr_job->call_end) {
80014b98:	95 08       	st.w	r10[0x0],r8
80014b9a:	74 48       	ld.w	r8,r10[0x10]
80014b9c:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80014b9e:	c2 50       	breq	80014be8 <uhd_ep_abort_pipe+0xc8>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014ba0:	7c 06       	ld.w	r6,lr[0x0]
80014ba2:	74 39       	ld.w	r9,r10[0xc]
			uhd_get_pipe_endpoint_address(pipe),
80014ba4:	16 9a       	mov	r10,r11
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014ba6:	7c 0b       	ld.w	r11,lr[0x0]
80014ba8:	fd d6 c2 04 	bfextu	lr,r6,0x10,0x4
80014bac:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
80014bb0:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80014bb4:	a3 77       	lsl	r7,0x3
80014bb6:	e0 66 00 80 	mov	r6,128
80014bba:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80014bbe:	58 1b       	cp.w	r11,1
80014bc0:	ec 0b 17 00 	moveq	r11,r6
80014bc4:	f9 bb 01 00 	movne	r11,0
80014bc8:	e0 3c fb dc 	sub	r12,130012
80014bcc:	1c 4b       	or	r11,lr
80014bce:	78 0c       	ld.w	r12,r12[0x0]
80014bd0:	37 fe       	mov	lr,127
80014bd2:	fc 07 09 4e 	lsl	lr,lr,r7
80014bd6:	fd ec 00 0c 	and	r12,lr,r12
80014bda:	5c 9e       	brev	lr
80014bdc:	fc 0e 12 00 	clz	lr,lr
80014be0:	f8 0e 0a 4c 	lsr	r12,r12,lr
80014be4:	5c 5c       	castu.b	r12
80014be6:	5d 18       	icall	r8
80014be8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80014bec <uhd_ep_free>:
80014bec:	d4 31       	pushm	r0-r7,lr
80014bee:	20 2d       	sub	sp,8
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80014bf0:	30 17       	mov	r7,1
80014bf2:	18 91       	mov	r1,r12
80014bf4:	16 90       	mov	r0,r11
80014bf6:	30 06       	mov	r6,0
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014bf8:	fe 65 00 00 	mov	r5,-131072
80014bfc:	0e 94       	mov	r4,r7
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80014bfe:	30 63       	mov	r3,6
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014c00:	37 f2       	mov	r2,127
			continue;
		}
		if (endp != 0xFF) {
80014c02:	3f f8       	mov	r8,-1
80014c04:	c0 48       	rjmp	80014c0c <uhd_ep_free+0x20>
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80014c06:	2f f7       	sub	r7,-1
80014c08:	2f f6       	sub	r6,-1
80014c0a:	5c 57       	castu.b	r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014c0c:	ea fa 04 1c 	ld.w	r10,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80014c10:	f9 d6 c0 08 	bfextu	r12,r6,0x0,0x8
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014c14:	e8 0c 09 49 	lsl	r9,r4,r12
80014c18:	f3 ea 00 0a 	and	r10,r9,r10
80014c1c:	c1 50       	breq	80014c46 <uhd_ep_free+0x5a>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014c1e:	18 9a       	mov	r10,r12
80014c20:	e2 1a 00 fc 	andl	r10,0xfc,COH
80014c24:	e0 3a fb dc 	sub	r10,130012
80014c28:	74 0b       	ld.w	r11,r10[0x0]
80014c2a:	f5 dc c0 02 	bfextu	r10,r12,0x0,0x2
80014c2e:	a3 7a       	lsl	r10,0x3
80014c30:	e4 0a 09 4a 	lsl	r10,r2,r10
80014c34:	f5 eb 00 0b 	and	r11,r10,r11
80014c38:	5c 9a       	brev	r10
80014c3a:	f4 0a 12 00 	clz	r10,r10
80014c3e:	f6 0a 0a 4a 	lsr	r10,r11,r10
80014c42:	14 31       	cp.w	r1,r10
80014c44:	c0 70       	breq	80014c52 <uhd_ep_free+0x66>
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80014c46:	e6 07 18 00 	cp.b	r7,r3
80014c4a:	fe 98 ff de 	brls	80014c06 <uhd_ep_free+0x1a>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80014c4e:	2f ed       	sub	sp,-8
80014c50:	d8 32       	popm	r0-r7,pc
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80014c52:	f0 00 18 00 	cp.b	r0,r8
80014c56:	c2 d0       	breq	80014cb0 <uhd_ep_free+0xc4>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014c58:	f8 0a 15 02 	lsl	r10,r12,0x2
80014c5c:	e0 3a fb 00 	sub	r10,129792
80014c60:	74 0e       	ld.w	lr,r10[0x0]
80014c62:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
80014c66:	74 0b       	ld.w	r11,r10[0x0]
80014c68:	50 0e       	stdsp	sp[0x0],lr
80014c6a:	e0 6e 00 80 	mov	lr,128
80014c6e:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80014c72:	58 1b       	cp.w	r11,1
80014c74:	fc 0b 17 00 	moveq	r11,lr
80014c78:	f9 bb 01 00 	movne	r11,0
80014c7c:	40 0e       	lddsp	lr,sp[0x0]
80014c7e:	1c 4b       	or	r11,lr
80014c80:	16 30       	cp.w	r0,r11
80014c82:	ce 21       	brne	80014c46 <uhd_ep_free+0x5a>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80014c84:	ea fb 04 1c 	ld.w	r11,r5[1052]
80014c88:	5c d9       	com	r9
80014c8a:	16 69       	and	r9,r11
80014c8c:	eb 49 04 1c 	st.w	r5[1052],r9
		uhd_unallocate_memory(pipe);
80014c90:	74 09       	ld.w	r9,r10[0x0]
80014c92:	a1 d9       	cbr	r9,0x1
80014c94:	95 09       	st.w	r10[0x0],r9

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80014c96:	58 0c       	cp.w	r12,0
80014c98:	c1 11       	brne	80014cba <uhd_ep_free+0xce>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80014c9a:	e0 6a 2c c8 	mov	r10,11464
80014c9e:	94 09       	ld.sh	r9,r10[0x0]
80014ca0:	58 09       	cp.w	r9,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80014ca2:	cd 20       	breq	80014c46 <uhd_ep_free+0x5a>
80014ca4:	50 18       	stdsp	sp[0x4],r8
80014ca6:	30 1c       	mov	r12,1
80014ca8:	fe b0 fd c8 	rcall	80014838 <uhd_ctrl_request_end>
80014cac:	40 18       	lddsp	r8,sp[0x4]
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80014cae:	ca cb       	rjmp	80014c06 <uhd_ep_free+0x1a>
80014cb0:	f8 0a 15 02 	lsl	r10,r12,0x2
80014cb4:	e0 3a fb 00 	sub	r10,129792
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80014cb8:	ce 6b       	rjmp	80014c84 <uhd_ep_free+0x98>
80014cba:	50 18       	stdsp	sp[0x4],r8
80014cbc:	30 1b       	mov	r11,1
80014cbe:	c3 1f       	rcall	80014b20 <uhd_ep_abort_pipe>
80014cc0:	40 18       	lddsp	r8,sp[0x4]
80014cc2:	cc 2b       	rjmp	80014c46 <uhd_ep_free+0x5a>

80014cc4 <uhd_pipe_trans_complet>:
80014cc4:	eb cd 40 f8 	pushm	r3-r7,lr
80014cc8:	e0 69 06 a8 	mov	r9,1704
80014ccc:	f8 c8 00 01 	sub	r8,r12,1
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80014cd0:	f0 08 00 28 	add	r8,r8,r8<<0x2
80014cd4:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
80014cd8:	70 0a       	ld.w	r10,r8[0x0]
80014cda:	58 0a       	cp.w	r10,0
80014cdc:	e0 84 00 8c 	brge	80014df4 <uhd_pipe_trans_complet+0x130>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80014ce0:	70 39       	ld.w	r9,r8[0xc]
80014ce2:	70 26       	ld.w	r6,r8[0x8]
80014ce4:	0c 39       	cp.w	r9,r6
80014ce6:	e0 80 00 89 	breq	80014df8 <uhd_pipe_trans_complet+0x134>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
80014cea:	fe 67 05 00 	mov	r7,-129792
80014cee:	f8 0e 15 02 	lsl	lr,r12,0x2
80014cf2:	fc 07 00 0b 	add	r11,lr,r7
80014cf6:	76 07       	ld.w	r7,r11[0x0]
80014cf8:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80014cfc:	58 17       	cp.w	r7,1
80014cfe:	e0 80 00 d5 	breq	80014ea8 <uhd_pipe_trans_complet+0x1e4>
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80014d02:	e0 77 00 00 	mov	r7,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80014d06:	12 16       	sub	r6,r9
80014d08:	0c 37       	cp.w	r7,r6
80014d0a:	ec 07 17 b0 	movhi	r7,r6
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80014d0e:	e0 57 00 00 	cp.w	r7,65536
80014d12:	e0 80 00 c9 	breq	80014ea4 <uhd_pipe_trans_complet+0x1e0>
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80014d16:	ee 06 15 10 	lsl	r6,r7,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80014d1a:	76 05       	ld.w	r5,r11[0x0]
80014d1c:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014d20:	58 25       	cp.w	r5,2
80014d22:	e0 80 00 b0 	breq	80014e82 <uhd_pipe_trans_complet+0x1be>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80014d26:	76 0a       	ld.w	r10,r11[0x0]
80014d28:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80014d2c:	58 1a       	cp.w	r10,1
80014d2e:	e0 80 00 d0 	breq	80014ece <uhd_pipe_trans_complet+0x20a>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80014d32:	e8 16 00 14 	orl	r6,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80014d36:	70 1a       	ld.w	r10,r8[0x4]
80014d38:	f4 09 00 09 	add	r9,r10,r9
80014d3c:	f8 0a 15 04 	lsl	r10,r12,0x4
80014d40:	e0 3a f9 00 	sub	r10,129280
80014d44:	95 19       	st.w	r10[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80014d46:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80014d4a:	d3 03       	ssrf	0x10
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80014d4c:	74 39       	ld.w	r9,r10[0xc]
80014d4e:	ed b9 00 04 	bld	r9,0x4
80014d52:	c1 a0       	breq	80014d86 <uhd_pipe_trans_complet+0xc2>
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80014d54:	76 09       	ld.w	r9,r11[0x0]
80014d56:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
80014d5a:	58 19       	cp.w	r9,1
80014d5c:	c7 70       	breq	80014e4a <uhd_pipe_trans_complet+0x186>
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
80014d5e:	e0 3e f9 e0 	sub	lr,129504
80014d62:	e0 69 10 00 	mov	r9,4096
80014d66:	9d 09       	st.w	lr[0x0],r9
			uhd_unfreeze_pipe(pipe);
80014d68:	e2 69 00 00 	mov	r9,131072
80014d6c:	9d 09       	st.w	lr[0x0],r9
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80014d6e:	e8 16 00 21 	orl	r6,0x21
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
80014d72:	95 26       	st.w	r10[0x8],r6
			ptr_job->nb_trans += next_trans;
80014d74:	70 39       	ld.w	r9,r8[0xc]
80014d76:	f2 07 00 07 	add	r7,r9,r7
80014d7a:	91 37       	st.w	r8[0xc],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80014d7c:	e6 15 00 01 	andh	r5,0x1,COH
80014d80:	c6 30       	breq	80014e46 <uhd_pipe_trans_complet+0x182>
			cpu_irq_restore(flags);
			return;
80014d82:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80014d86:	e6 15 00 01 	andh	r5,0x1,COH
80014d8a:	c0 21       	brne	80014d8e <uhd_pipe_trans_complet+0xca>
      cpu_irq_enable();
80014d8c:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80014d8e:	70 39       	ld.w	r9,r8[0xc]
80014d90:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80014d92:	76 07       	ld.w	r7,r11[0x0]
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80014d94:	70 0a       	ld.w	r10,r8[0x0]
	}
	if (uhd_is_pipe_out(pipe)) {
80014d96:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80014d9a:	58 27       	cp.w	r7,2
80014d9c:	c3 90       	breq	80014e0e <uhd_pipe_trans_complet+0x14a>
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
80014d9e:	58 0a       	cp.w	r10,0
80014da0:	c2 a4       	brge	80014df4 <uhd_pipe_trans_complet+0x130>
		return; // No job running
	}
	ptr_job->busy = false;
80014da2:	14 9e       	mov	lr,r10
80014da4:	30 0a       	mov	r10,0
80014da6:	fd da d3 e1 	bfins	lr,r10,0x1f,0x1
80014daa:	91 0e       	st.w	r8[0x0],lr
	if (NULL == ptr_job->call_end) {
80014dac:	70 48       	ld.w	r8,r8[0x10]
80014dae:	58 08       	cp.w	r8,0
80014db0:	c2 20       	breq	80014df4 <uhd_pipe_trans_complet+0x130>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80014db2:	76 0e       	ld.w	lr,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014db4:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
			uhd_get_pipe_endpoint_address(pipe),
80014db8:	76 06       	ld.w	r6,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014dba:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80014dbe:	f7 de c2 04 	bfextu	r11,lr,0x10,0x4
80014dc2:	e0 3c fb dc 	sub	r12,130012
80014dc6:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
80014dca:	e0 6e 00 80 	mov	lr,128
80014dce:	58 16       	cp.w	r6,1
80014dd0:	f4 0e 17 10 	movne	lr,r10
80014dd4:	a3 77       	lsl	r7,0x3
80014dd6:	fd eb 10 0b 	or	r11,lr,r11
80014dda:	78 0e       	ld.w	lr,r12[0x0]
80014ddc:	37 fc       	mov	r12,127
80014dde:	f8 07 09 4c 	lsl	r12,r12,r7
80014de2:	f9 ee 00 0e 	and	lr,r12,lr
80014de6:	5c 9c       	brev	r12
80014de8:	f8 0c 12 00 	clz	r12,r12
80014dec:	fc 0c 0a 4c 	lsr	r12,lr,r12
80014df0:	5c 5c       	castu.b	r12
80014df2:	5d 18       	icall	r8
80014df4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80014df8:	fe 67 05 00 	mov	r7,-129792
80014dfc:	f8 0e 15 02 	lsl	lr,r12,0x2
80014e00:	fc 07 00 0b 	add	r11,lr,r7
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}
	if (uhd_is_pipe_out(pipe)) {
80014e04:	76 07       	ld.w	r7,r11[0x0]
80014e06:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80014e0a:	58 27       	cp.w	r7,2
80014e0c:	cc 91       	brne	80014d9e <uhd_pipe_trans_complet+0xda>
		if (ptr_job->b_shortpacket) {
80014e0e:	14 96       	mov	r6,r10
80014e10:	e6 16 40 00 	andh	r6,0x4000,COH
80014e14:	cc 50       	breq	80014d9e <uhd_pipe_trans_complet+0xda>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80014e16:	fe 69 05 60 	mov	r9,-129696
80014e1a:	fc 09 00 08 	add	r8,lr,r9
80014e1e:	91 07       	st.w	r8[0x0],r7
			if (Is_uhd_write_enabled(pipe)) {
80014e20:	fe 69 05 30 	mov	r9,-129744
80014e24:	fc 09 00 08 	add	r8,lr,r9
80014e28:	70 08       	ld.w	r8,r8[0x0]
80014e2a:	ed b8 00 10 	bld	r8,0x10
80014e2e:	c0 61       	brne	80014e3a <uhd_pipe_trans_complet+0x176>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
80014e30:	fe 69 05 90 	mov	r9,-129648
80014e34:	fc 09 00 08 	add	r8,lr,r9
80014e38:	91 07       	st.w	r8[0x0],r7
			}
			uhd_enable_out_ready_interrupt(pipe);
80014e3a:	e0 3e fa 10 	sub	lr,129552
80014e3e:	30 28       	mov	r8,2
80014e40:	9d 08       	st.w	lr[0x0],r8
			return;
80014e42:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80014e46:	d5 03       	csrf	0x10
80014e48:	c9 db       	rjmp	80014d82 <uhd_pipe_trans_complet+0xbe>
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
				uhd_in_request_number(pipe,
80014e4a:	fe 69 06 50 	mov	r9,-129456
80014e4e:	fc 09 00 0c 	add	r12,lr,r9
80014e52:	78 09       	ld.w	r9,r12[0x0]
80014e54:	76 03       	ld.w	r3,r11[0x0]
80014e56:	e0 19 ff 00 	andl	r9,0xff00
80014e5a:	76 04       	ld.w	r4,r11[0x0]
80014e5c:	f7 d3 c0 83 	bfextu	r11,r3,0x4,0x3
80014e60:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80014e64:	30 83       	mov	r3,8
80014e66:	2f d4       	sub	r4,-3
80014e68:	e6 0b 09 4b 	lsl	r11,r3,r11
80014e6c:	20 1b       	sub	r11,1
80014e6e:	0e 0b       	add	r11,r7
80014e70:	f6 04 0a 4b 	lsr	r11,r11,r4
80014e74:	20 1b       	sub	r11,1
80014e76:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80014e7a:	f7 e9 10 09 	or	r9,r11,r9
80014e7e:	99 09       	st.w	r12[0x0],r9
80014e80:	c6 fb       	rjmp	80014d5e <uhd_pipe_trans_complet+0x9a>
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80014e82:	76 05       	ld.w	r5,r11[0x0]
80014e84:	30 84       	mov	r4,8
80014e86:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80014e8a:	e8 05 09 45 	lsl	r5,r4,r5
80014e8e:	20 15       	sub	r5,1
80014e90:	ef e5 00 05 	and	r5,r7,r5
80014e94:	fe 90 ff 51 	breq	80014d36 <uhd_pipe_trans_complet+0x72>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80014e98:	30 05       	mov	r5,0
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80014e9a:	08 46       	or	r6,r4
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80014e9c:	f5 d5 d3 c1 	bfins	r10,r5,0x1e,0x1
80014ea0:	91 0a       	st.w	r8[0x0],r10
80014ea2:	c4 ab       	rjmp	80014d36 <uhd_pipe_trans_complet+0x72>
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80014ea4:	30 06       	mov	r6,0
80014ea6:	c3 ab       	rjmp	80014d1a <uhd_pipe_trans_complet+0x56>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
80014ea8:	76 05       	ld.w	r5,r11[0x0]
80014eaa:	30 87       	mov	r7,8
80014eac:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80014eb0:	ee 05 09 45 	lsl	r5,r7,r5
80014eb4:	ea 07 09 45 	lsl	r5,r5,r7
80014eb8:	e0 45 ff ff 	cp.w	r5,65535
80014ebc:	fe 99 ff 23 	brgt	80014d02 <uhd_pipe_trans_complet+0x3e>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80014ec0:	76 05       	ld.w	r5,r11[0x0]
80014ec2:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80014ec6:	ee 05 09 47 	lsl	r7,r7,r5
80014eca:	a9 67       	lsl	r7,0x8
80014ecc:	c1 db       	rjmp	80014d06 <uhd_pipe_trans_complet+0x42>
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80014ece:	76 0a       	ld.w	r10,r11[0x0]
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80014ed0:	30 85       	mov	r5,8
80014ed2:	f5 da c0 83 	bfextu	r10,r10,0x4,0x3
80014ed6:	ea 0a 09 4a 	lsl	r10,r5,r10
80014eda:	0e 3a       	cp.w	r10,r7
80014edc:	fe 93 ff 2d 	brlo	80014d36 <uhd_pipe_trans_complet+0x72>
80014ee0:	c2 9b       	rjmp	80014d32 <uhd_pipe_trans_complet+0x6e>
80014ee2:	d7 03       	nop

80014ee4 <uhd_ep_run>:
80014ee4:	eb cd 40 f8 	pushm	r3-r7,lr
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014ee8:	fe 6e 00 00 	mov	lr,-131072
80014eec:	fc fe 04 1c 	ld.w	lr,lr[1052]
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80014ef0:	fa c4 ff e8 	sub	r4,sp,-24
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014ef4:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80014ef8:	68 17       	ld.w	r7,r4[0x4]
80014efa:	68 04       	ld.w	r4,r4[0x0]
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014efc:	c0 90       	breq	80014f0e <uhd_ep_run+0x2a>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014efe:	fe 6e 04 24 	mov	lr,-130012
80014f02:	7c 0e       	ld.w	lr,lr[0x0]
80014f04:	fd de c0 07 	bfextu	lr,lr,0x0,0x7
80014f08:	1c 3c       	cp.w	r12,lr
80014f0a:	e0 80 00 cb 	breq	800150a0 <uhd_ep_run+0x1bc>
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014f0e:	fe 6e 00 00 	mov	lr,-131072
80014f12:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f16:	ed be 00 01 	bld	lr,0x1
80014f1a:	c2 a0       	breq	80014f6e <uhd_ep_run+0x8a>
80014f1c:	fe 6e 00 00 	mov	lr,-131072
80014f20:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f24:	ed be 00 02 	bld	lr,0x2
80014f28:	c3 c0       	breq	80014fa0 <uhd_ep_run+0xbc>
80014f2a:	fe 6e 00 00 	mov	lr,-131072
80014f2e:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f32:	ed be 00 03 	bld	lr,0x3
80014f36:	c4 e0       	breq	80014fd2 <uhd_ep_run+0xee>
80014f38:	fe 6e 00 00 	mov	lr,-131072
80014f3c:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f40:	ed be 00 04 	bld	lr,0x4
80014f44:	c6 00       	breq	80015004 <uhd_ep_run+0x120>
80014f46:	fe 6e 00 00 	mov	lr,-131072
80014f4a:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f4e:	ed be 00 05 	bld	lr,0x5
80014f52:	c7 20       	breq	80015036 <uhd_ep_run+0x152>
80014f54:	fe 6e 00 00 	mov	lr,-131072
80014f58:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f5c:	ed be 00 06 	bld	lr,0x6
80014f60:	e0 80 00 85 	breq	8001506a <uhd_ep_run+0x186>
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
	if (pipe == AVR32_USBB_EPT_NUM) {
	  print_dbg("\r\n uhd error: pipe not found");
80014f64:	4f 0c       	lddpc	r12,80015124 <uhd_ep_run+0x240>
80014f66:	fe b0 f0 1b 	rcall	80012f9c <print_dbg>
80014f6a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014f6e:	fe 6e 04 24 	mov	lr,-130012
80014f72:	7c 0e       	ld.w	lr,lr[0x0]
80014f74:	fd de c1 07 	bfextu	lr,lr,0x8,0x7
80014f78:	1c 3c       	cp.w	r12,lr
80014f7a:	cd 11       	brne	80014f1c <uhd_ep_run+0x38>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014f7c:	fe 6e 05 04 	mov	lr,-129788
80014f80:	7c 06       	ld.w	r6,lr[0x0]
80014f82:	7c 05       	ld.w	r5,lr[0x0]
80014f84:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80014f88:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014f8c:	e0 6e 00 80 	mov	lr,128
80014f90:	58 15       	cp.w	r5,1
80014f92:	f9 be 01 00 	movne	lr,0
80014f96:	0c 4e       	or	lr,r6
80014f98:	1c 3b       	cp.w	r11,lr
80014f9a:	cc 11       	brne	80014f1c <uhd_ep_run+0x38>
80014f9c:	30 1c       	mov	r12,1
80014f9e:	c9 38       	rjmp	800150c4 <uhd_ep_run+0x1e0>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014fa0:	fe 6e 04 24 	mov	lr,-130012
80014fa4:	7c 0e       	ld.w	lr,lr[0x0]
80014fa6:	fd de c2 07 	bfextu	lr,lr,0x10,0x7
80014faa:	1c 3c       	cp.w	r12,lr
80014fac:	cb f1       	brne	80014f2a <uhd_ep_run+0x46>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014fae:	fe 6e 05 08 	mov	lr,-129784
80014fb2:	7c 06       	ld.w	r6,lr[0x0]
80014fb4:	7c 05       	ld.w	r5,lr[0x0]
80014fb6:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80014fba:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014fbe:	e0 6e 00 80 	mov	lr,128
80014fc2:	58 15       	cp.w	r5,1
80014fc4:	f9 be 01 00 	movne	lr,0
80014fc8:	0c 4e       	or	lr,r6
80014fca:	1c 3b       	cp.w	r11,lr
80014fcc:	ca f1       	brne	80014f2a <uhd_ep_run+0x46>
80014fce:	30 2c       	mov	r12,2
80014fd0:	c7 a8       	rjmp	800150c4 <uhd_ep_run+0x1e0>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014fd2:	fe 6e 04 24 	mov	lr,-130012
80014fd6:	7c 0e       	ld.w	lr,lr[0x0]
80014fd8:	fd de c3 07 	bfextu	lr,lr,0x18,0x7
80014fdc:	1c 3c       	cp.w	r12,lr
80014fde:	ca d1       	brne	80014f38 <uhd_ep_run+0x54>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014fe0:	fe 6e 05 0c 	mov	lr,-129780
80014fe4:	7c 06       	ld.w	r6,lr[0x0]
80014fe6:	7c 05       	ld.w	r5,lr[0x0]
80014fe8:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80014fec:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014ff0:	e0 6e 00 80 	mov	lr,128
80014ff4:	58 15       	cp.w	r5,1
80014ff6:	f9 be 01 00 	movne	lr,0
80014ffa:	0c 4e       	or	lr,r6
80014ffc:	1c 3b       	cp.w	r11,lr
80014ffe:	c9 d1       	brne	80014f38 <uhd_ep_run+0x54>
80015000:	30 3c       	mov	r12,3
80015002:	c6 18       	rjmp	800150c4 <uhd_ep_run+0x1e0>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80015004:	fe 6e 04 28 	mov	lr,-130008
80015008:	7c 0e       	ld.w	lr,lr[0x0]
8001500a:	fd de c0 07 	bfextu	lr,lr,0x0,0x7
8001500e:	1c 3c       	cp.w	r12,lr
80015010:	c9 b1       	brne	80014f46 <uhd_ep_run+0x62>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80015012:	fe 6e 05 10 	mov	lr,-129776
80015016:	7c 06       	ld.w	r6,lr[0x0]
80015018:	7c 05       	ld.w	r5,lr[0x0]
8001501a:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
8001501e:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80015022:	e0 6e 00 80 	mov	lr,128
80015026:	58 15       	cp.w	r5,1
80015028:	f9 be 01 00 	movne	lr,0
8001502c:	0c 4e       	or	lr,r6
8001502e:	1c 3b       	cp.w	r11,lr
80015030:	c8 b1       	brne	80014f46 <uhd_ep_run+0x62>
80015032:	30 4c       	mov	r12,4
80015034:	c4 88       	rjmp	800150c4 <uhd_ep_run+0x1e0>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80015036:	fe 6e 04 28 	mov	lr,-130008
8001503a:	7c 0e       	ld.w	lr,lr[0x0]
8001503c:	fd de c1 07 	bfextu	lr,lr,0x8,0x7
80015040:	1c 3c       	cp.w	r12,lr
80015042:	c8 91       	brne	80014f54 <uhd_ep_run+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80015044:	fe 6e 05 14 	mov	lr,-129772
80015048:	7c 06       	ld.w	r6,lr[0x0]
8001504a:	7c 05       	ld.w	r5,lr[0x0]
8001504c:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80015050:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80015054:	e0 6e 00 80 	mov	lr,128
80015058:	58 15       	cp.w	r5,1
8001505a:	f9 be 01 00 	movne	lr,0
8001505e:	0c 4e       	or	lr,r6
80015060:	1c 3b       	cp.w	r11,lr
80015062:	fe 91 ff 79 	brne	80014f54 <uhd_ep_run+0x70>
80015066:	30 5c       	mov	r12,5
80015068:	c2 e8       	rjmp	800150c4 <uhd_ep_run+0x1e0>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8001506a:	fe 6e 04 28 	mov	lr,-130008
8001506e:	7c 0e       	ld.w	lr,lr[0x0]
80015070:	fd de c2 07 	bfextu	lr,lr,0x10,0x7
80015074:	1c 3c       	cp.w	r12,lr
80015076:	fe 91 ff 77 	brne	80014f64 <uhd_ep_run+0x80>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8001507a:	fe 6c 05 18 	mov	r12,-129768
8001507e:	78 0e       	ld.w	lr,r12[0x0]
80015080:	78 06       	ld.w	r6,r12[0x0]
80015082:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
80015086:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
8001508a:	e0 6c 00 80 	mov	r12,128
8001508e:	58 16       	cp.w	r6,1
80015090:	f9 bc 01 00 	movne	r12,0
80015094:	1c 4c       	or	r12,lr
80015096:	18 3b       	cp.w	r11,r12
80015098:	fe 91 ff 66 	brne	80014f64 <uhd_ep_run+0x80>
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
	return true;
8001509c:	30 6c       	mov	r12,6
8001509e:	c1 38       	rjmp	800150c4 <uhd_ep_run+0x1e0>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
800150a0:	fe 6e 05 00 	mov	lr,-129792
800150a4:	7c 06       	ld.w	r6,lr[0x0]
800150a6:	7c 05       	ld.w	r5,lr[0x0]
800150a8:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
800150ac:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
800150b0:	e0 6e 00 80 	mov	lr,128
800150b4:	58 15       	cp.w	r5,1
800150b6:	f9 be 01 00 	movne	lr,0
800150ba:	0c 4e       	or	lr,r6
800150bc:	1c 3b       	cp.w	r11,lr
800150be:	fe 91 ff 28 	brne	80014f0e <uhd_ep_run+0x2a>
800150c2:	30 0c       	mov	r12,0
	  print_dbg("\r\n uhd error: pipe not found");
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
800150c4:	f8 cb 00 01 	sub	r11,r12,1
800150c8:	e0 6e 06 a8 	mov	lr,1704
800150cc:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800150d0:	fc 0b 00 2b 	add	r11,lr,r11<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800150d4:	e1 b6 00 00 	mfsr	r6,0x0
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800150d8:	d3 03       	ssrf	0x10
800150da:	76 0e       	ld.w	lr,r11[0x0]
800150dc:	1c 93       	mov	r3,lr
800150de:	e6 13 80 00 	andh	r3,0x8000,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800150e2:	c0 70       	breq	800150f0 <uhd_ep_run+0x20c>
800150e4:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
800150e8:	c0 21       	brne	800150ec <uhd_ep_run+0x208>
   }

	barrier();
800150ea:	d5 03       	csrf	0x10
800150ec:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		cpu_irq_restore(flags);
		//		print_dbg("\r\n uhd error: job is already underway");
		return false; // Job already on going
	}
	ptr_job->busy = true;
800150f0:	30 15       	mov	r5,1
800150f2:	fd d5 d3 e1 	bfins	lr,r5,0x1f,0x1

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
800150f6:	97 0e       	st.w	r11[0x0],lr
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
800150f8:	b6 14       	st.h	r11[0x2],r4
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
800150fa:	97 28       	st.w	r11[0x8],r8
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800150fc:	97 47       	st.w	r11[0x10],r7
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
800150fe:	76 08       	ld.w	r8,r11[0x0]
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80015100:	97 19       	st.w	r11[0x4],r9
80015102:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80015106:	97 33       	st.w	r11[0xc],r3
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015108:	97 08       	st.w	r11[0x0],r8
8001510a:	e6 16 00 01 	andh	r6,0x1,COH
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
8001510e:	c0 50       	breq	80015118 <uhd_ep_run+0x234>
80015110:	fe b0 fd da 	rcall	80014cc4 <uhd_pipe_trans_complet>
80015114:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
80015118:	d5 03       	csrf	0x10
8001511a:	fe b0 fd d5 	rcall	80014cc4 <uhd_pipe_trans_complet>
8001511e:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
80015122:	d7 03       	nop
80015124:	80 02       	ld.sh	r2,r0[0x0]
80015126:	3e 20       	mov	r0,-30

80015128 <otg_interrupt>:
80015128:	d4 31       	pushm	r0-r7,lr
8001512a:	20 1d       	sub	sp,4
8001512c:	fe 69 08 04 	mov	r9,-129020
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
80015130:	72 08       	ld.w	r8,r9[0x0]
80015132:	ed b8 00 00 	bld	r8,0x0
80015136:	c0 c0       	breq	8001514e <otg_interrupt+0x26>
			UHC_MODE_CHANGE(true);
			uhc_start();
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
80015138:	72 08       	ld.w	r8,r9[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
8001513a:	ed b8 00 0a 	bld	r8,0xa
8001513e:	c2 e1       	brne	8001519a <otg_interrupt+0x72>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
80015140:	fe 68 00 00 	mov	r8,-131072
80015144:	f0 f8 08 18 	ld.w	r8,r8[2072]
}
80015148:	2f fd       	sub	sp,-4
8001514a:	d4 32       	popm	r0-r7,lr
8001514c:	d6 03       	rete
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
8001514e:	72 08       	ld.w	r8,r9[0x0]
80015150:	ed b8 00 0e 	bld	r8,0xe
80015154:	cf d1       	brne	8001514e <otg_interrupt+0x26>
		otg_unfreeze_clock();
80015156:	fe 68 08 00 	mov	r8,-129024
8001515a:	70 09       	ld.w	r9,r8[0x0]
8001515c:	af c9       	cbr	r9,0xe
8001515e:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80015160:	30 1c       	mov	r12,1
80015162:	fe 69 08 08 	mov	r9,-129016
80015166:	93 0c       	st.w	r9[0x0],r12
		otg_freeze_clock();
80015168:	70 09       	ld.w	r9,r8[0x0]
8001516a:	af a9       	sbr	r9,0xe
8001516c:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
8001516e:	fe 68 08 04 	mov	r8,-129020
80015172:	70 08       	ld.w	r8,r8[0x0]
80015174:	ed b8 00 0a 	bld	r8,0xa
80015178:	c0 a1       	brne	8001518c <otg_interrupt+0x64>
			uhc_stop(false);
8001517a:	30 0c       	mov	r12,0
8001517c:	e0 a0 06 f4 	rcall	80015f64 <uhc_stop>
			UHC_MODE_CHANGE(false);
80015180:	30 0c       	mov	r12,0
80015182:	e0 a0 2a cd 	rcall	8001a71c <usb_mode_change>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
}
80015186:	2f fd       	sub	sp,-4
80015188:	d4 32       	popm	r0-r7,lr
8001518a:	d6 03       	rete
			uhc_stop(false);
			UHC_MODE_CHANGE(false);
			udc_start();
		} else {
			udc_stop();
			UHC_MODE_CHANGE(true);
8001518c:	e0 a0 2a c8 	rcall	8001a71c <usb_mode_change>
			uhc_start();
80015190:	e0 a0 06 ee 	rcall	80015f6c <uhc_start>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
}
80015194:	2f fd       	sub	sp,-4
80015196:	d4 32       	popm	r0-r7,lr
80015198:	d6 03       	rete
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
8001519a:	fe 6a 04 04 	mov	r10,-130044
8001519e:	74 08       	ld.w	r8,r10[0x0]
800151a0:	ed b8 00 05 	bld	r8,0x5
800151a4:	e0 80 00 a5 	breq	800152ee <otg_interrupt+0x1c6>
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
800151a8:	fe 69 00 00 	mov	r9,-131072
800151ac:	f2 f8 04 04 	ld.w	r8,r9[1028]
800151b0:	f2 fc 04 10 	ld.w	r12,r9[1040]
800151b4:	a9 88       	lsr	r8,0x8
800151b6:	f1 ec 02 8c 	and	r12,r8,r12>>0x8
800151ba:	a7 bc       	sbr	r12,0x7
800151bc:	5c 9c       	brev	r12
800151be:	f8 0c 12 00 	clz	r12,r12
	if (pipe_int == 0) {
800151c2:	e0 80 00 c3 	breq	80015348 <otg_interrupt+0x220>
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
800151c6:	30 78       	mov	r8,7
800151c8:	f0 0c 18 00 	cp.b	r12,r8
800151cc:	c5 c1       	brne	80015284 <otg_interrupt+0x15c>
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
800151ce:	f2 fb 04 04 	ld.w	r11,r9[1028]
800151d2:	f2 fc 04 10 	ld.w	r12,r9[1040]
800151d6:	b9 9b       	lsr	r11,0x19
800151d8:	f7 ec 03 9b 	and	r11,r11,r12>>0x19
800151dc:	a7 ab       	sbr	r11,0x6
800151de:	5c 9b       	brev	r11
800151e0:	f6 0b 12 00 	clz	r11,r11
800151e4:	f6 cc ff ff 	sub	r12,r11,-1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
800151e8:	f0 0c 18 00 	cp.b	r12,r8
800151ec:	c3 b0       	breq	80015262 <otg_interrupt+0x13a>
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
800151ee:	f8 08 15 04 	lsl	r8,r12,0x4
800151f2:	e0 38 f9 00 	sub	r8,129280
800151f6:	70 39       	ld.w	r9,r8[0xc]
800151f8:	ed b9 00 00 	bld	r9,0x0
800151fc:	ca 20       	breq	80015140 <otg_interrupt+0x18>
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
800151fe:	70 3b       	ld.w	r11,r8[0xc]
80015200:	b1 8b       	lsr	r11,0x10
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
80015202:	c0 d0       	breq	8001521c <otg_interrupt+0xf4>
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
80015204:	e0 69 06 a8 	mov	r9,1704
80015208:	f8 c8 00 01 	sub	r8,r12,1
8001520c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80015210:	f2 08 00 28 	add	r8,r9,r8<<0x2

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80015214:	70 39       	ld.w	r9,r8[0xc]
80015216:	16 19       	sub	r9,r11

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80015218:	91 29       	st.w	r8[0x8],r9
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
8001521a:	91 39       	st.w	r8[0xc],r9

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
8001521c:	f8 0a 15 02 	lsl	r10,r12,0x2
80015220:	fe 69 05 00 	mov	r9,-129792
80015224:	f4 09 00 08 	add	r8,r10,r9
80015228:	70 08       	ld.w	r8,r8[0x0]
8001522a:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
8001522e:	58 28       	cp.w	r8,2
80015230:	e0 80 02 35 	breq	8001569a <otg_interrupt+0x572>
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
80015234:	fe 68 05 c0 	mov	r8,-129600
80015238:	f4 08 00 09 	add	r9,r10,r8
8001523c:	72 08       	ld.w	r8,r9[0x0]
8001523e:	ed b8 00 11 	bld	r8,0x11
80015242:	c0 80       	breq	80015252 <otg_interrupt+0x12a>
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
80015244:	58 0b       	cp.w	r11,0
80015246:	c0 90       	breq	80015258 <otg_interrupt+0x130>
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
80015248:	e0 3a fa 10 	sub	r10,129552
8001524c:	e2 68 00 00 	mov	r8,131072
80015250:	95 08       	st.w	r10[0x0],r8
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
80015252:	fe b0 fd 39 	rcall	80014cc4 <uhd_pipe_trans_complet>
80015256:	c7 5b       	rjmp	80015140 <otg_interrupt+0x18>
			if (nb_remaining) {
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
80015258:	72 08       	ld.w	r8,r9[0x0]
8001525a:	ed b8 00 11 	bld	r8,0x11
8001525e:	cf d1       	brne	80015258 <otg_interrupt+0x130>
80015260:	cf 9b       	rjmp	80015252 <otg_interrupt+0x12a>
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
80015262:	74 08       	ld.w	r8,r10[0x0]
80015264:	e2 18 00 04 	andl	r8,0x4,COH
80015268:	e0 80 01 79 	breq	8001555a <otg_interrupt+0x432>
		uhd_ack_reset_sent();
8001526c:	fe 68 04 08 	mov	r8,-130040
80015270:	30 49       	mov	r9,4
80015272:	91 09       	st.w	r8[0x0],r9
		if (uhd_reset_callback != NULL) {
80015274:	e0 68 06 a4 	mov	r8,1700
80015278:	70 08       	ld.w	r8,r8[0x0]
8001527a:	58 08       	cp.w	r8,0
8001527c:	fe 90 ff 62 	breq	80015140 <otg_interrupt+0x18>
			uhd_reset_callback();
80015280:	5d 18       	icall	r8
80015282:	c5 fb       	rjmp	80015140 <otg_interrupt+0x18>
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80015284:	fe 68 05 c0 	mov	r8,-129600
80015288:	f8 0b 15 02 	lsl	r11,r12,0x2
8001528c:	f6 08 00 0e 	add	lr,r11,r8
80015290:	7c 08       	ld.w	r8,lr[0x0]
80015292:	ed b8 00 0c 	bld	r8,0xc
80015296:	e0 81 00 95 	brne	800153c0 <otg_interrupt+0x298>
8001529a:	fe 68 05 30 	mov	r8,-129744
8001529e:	f6 08 00 09 	add	r9,r11,r8
800152a2:	72 0a       	ld.w	r10,r9[0x0]
800152a4:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
800152a8:	e0 80 02 00 	breq	800156a8 <otg_interrupt+0x580>
		uhd_disable_bank_interrupt(pipe);
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
800152ac:	7c 08       	ld.w	r8,lr[0x0]
800152ae:	ed b8 00 01 	bld	r8,0x1
800152b2:	c0 61       	brne	800152be <otg_interrupt+0x196>
800152b4:	72 08       	ld.w	r8,r9[0x0]
800152b6:	ed b8 00 01 	bld	r8,0x1
800152ba:	e0 80 01 a5 	breq	80015604 <otg_interrupt+0x4dc>
		uhd_ack_fifocon(pipe);
		uhd_unfreeze_pipe(pipe);
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
800152be:	72 08       	ld.w	r8,r9[0x0]
800152c0:	e2 18 00 40 	andl	r8,0x40,COH
800152c4:	e0 81 01 d9 	brne	80015676 <otg_interrupt+0x54e>
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
800152c8:	72 09       	ld.w	r9,r9[0x0]
800152ca:	ed b9 00 03 	bld	r9,0x3
800152ce:	fe 91 ff 39 	brne	80015140 <otg_interrupt+0x18>
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
800152d2:	e0 3b f9 80 	sub	r11,129408
800152d6:	76 09       	ld.w	r9,r11[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
800152d8:	97 08       	st.w	r11[0x0],r8
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
800152da:	f1 d9 c0 04 	bfextu	r8,r9,0x0,0x4
800152de:	20 18       	sub	r8,1
800152e0:	58 28       	cp.w	r8,2
800152e2:	e0 88 01 a9 	brls	80015634 <otg_interrupt+0x50c>
800152e6:	30 6b       	mov	r11,6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
800152e8:	fe b0 fc 1c 	rcall	80014b20 <uhd_ep_abort_pipe>
800152ec:	c2 ab       	rjmp	80015140 <otg_interrupt+0x18>
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
		uhd_ack_sof();
800152ee:	32 09       	mov	r9,32
800152f0:	fe 68 04 08 	mov	r8,-130040
800152f4:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
800152f6:	e0 68 07 20 	mov	r8,1824
800152fa:	11 89       	ld.ub	r9,r8[0x0]
800152fc:	58 09       	cp.w	r9,0
800152fe:	c6 60       	breq	800153ca <otg_interrupt+0x2a2>
		if (--uhd_suspend_start == 0) {
80015300:	20 19       	sub	r9,1
80015302:	5c 59       	castu.b	r9
80015304:	b0 89       	st.b	r8[0x0],r9
80015306:	fe 91 ff 1d 	brne	80015140 <otg_interrupt+0x18>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
8001530a:	fe 69 04 20 	mov	r9,-130016
8001530e:	72 08       	ld.w	r8,r9[0x0]
80015310:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80015314:	e0 48 00 b9 	cp.w	r8,185
80015318:	e0 88 00 06 	brls	80015324 <otg_interrupt+0x1fc>
#endif
				if (Is_uhd_disconnection()) {
8001531c:	74 08       	ld.w	r8,r10[0x0]
8001531e:	ed b8 00 01 	bld	r8,0x1
80015322:	cf 61       	brne	8001530e <otg_interrupt+0x1e6>
					break;
				}
			}
			uhd_disable_sof();
80015324:	fe 69 04 00 	mov	r9,-130048
80015328:	72 08       	ld.w	r8,r9[0x0]
8001532a:	a9 c8       	cbr	r8,0x8
8001532c:	93 08       	st.w	r9[0x0],r8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
8001532e:	fe 68 00 00 	mov	r8,-131072
80015332:	35 89       	mov	r9,88
80015334:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80015338:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
8001533c:	fe 69 08 00 	mov	r9,-129024
80015340:	72 08       	ld.w	r8,r9[0x0]
80015342:	af a8       	sbr	r8,0xe
80015344:	93 08       	st.w	r9[0x0],r8
80015346:	cf da       	rjmp	80015140 <otg_interrupt+0x18>
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80015348:	30 78       	mov	r8,7
8001534a:	f3 48 06 20 	st.w	r9[1568],r8
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
8001534e:	fe 69 05 30 	mov	r9,-129744
80015352:	72 08       	ld.w	r8,r9[0x0]
80015354:	ed b8 00 02 	bld	r8,0x2
80015358:	c7 91       	brne	8001544a <otg_interrupt+0x322>
		// SETUP packet sent
		uhd_freeze_pipe(0);
8001535a:	fe 6b 05 f0 	mov	r11,-129552
8001535e:	e2 69 00 00 	mov	r9,131072
80015362:	97 09       	st.w	r11[0x0],r9
		uhd_ack_setup_ready(0);
80015364:	30 4a       	mov	r10,4
80015366:	fe 68 05 60 	mov	r8,-129696
8001536a:	91 0a       	st.w	r8[0x0],r10
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
8001536c:	e0 67 2c bc 	mov	r7,11452
80015370:	18 9e       	mov	lr,r12
80015372:	6e 0a       	ld.w	r10,r7[0x0]
80015374:	15 96       	ld.ub	r6,r10[0x1]
80015376:	f8 06 18 00 	cp.b	r6,r12
8001537a:	e0 85 02 e5 	brlt	80015944 <otg_interrupt+0x81c>
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
8001537e:	15 f6       	ld.ub	r6,r10[0x7]
80015380:	f5 3e 00 08 	ld.ub	lr,r10[8]
80015384:	fd e6 10 8e 	or	lr,lr,r6<<0x8
80015388:	f8 0e 19 00 	cp.h	lr,r12
8001538c:	e0 81 01 ce 	brne	80015728 <otg_interrupt+0x600>
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015390:	fe 6c 05 00 	mov	r12,-129792
80015394:	78 0a       	ld.w	r10,r12[0x0]
80015396:	e0 1a fc ff 	andl	r10,0xfcff
8001539a:	a9 aa       	sbr	r10,0x8
8001539c:	99 0a       	st.w	r12[0x0],r10
	uhd_ack_in_received(0);
8001539e:	30 1a       	mov	r10,1
800153a0:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_short_packet(0);
800153a2:	e0 6c 00 80 	mov	r12,128
800153a6:	91 0c       	st.w	r8[0x0],r12
	uhd_enable_in_received_interrupt(0);
800153a8:	97 0a       	st.w	r11[0x0],r10
	uhd_ack_fifocon(0);
800153aa:	fe 68 06 20 	mov	r8,-129504
800153ae:	e0 6a 40 00 	mov	r10,16384
800153b2:	91 0a       	st.w	r8[0x0],r10
	uhd_unfreeze_pipe(0);
800153b4:	91 09       	st.w	r8[0x0],r9
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800153b6:	30 39       	mov	r9,3
800153b8:	e0 68 2c b8 	mov	r8,11448
800153bc:	91 09       	st.w	r8[0x0],r9
800153be:	cc 1a       	rjmp	80015140 <otg_interrupt+0x18>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800153c0:	fe 68 05 30 	mov	r8,-129744
800153c4:	f6 08 00 09 	add	r9,r11,r8
800153c8:	c7 2b       	rjmp	800152ac <otg_interrupt+0x184>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
800153ca:	e0 68 07 22 	mov	r8,1826
800153ce:	11 89       	ld.ub	r9,r8[0x0]
800153d0:	58 09       	cp.w	r9,0
800153d2:	c5 90       	breq	80015484 <otg_interrupt+0x35c>
		if (--uhd_resume_start == 0) {
800153d4:	20 19       	sub	r9,1
800153d6:	5c 59       	castu.b	r9
800153d8:	b0 89       	st.b	r8[0x0],r9
800153da:	fe 91 fe b3 	brne	80015140 <otg_interrupt+0x18>
800153de:	e0 68 07 21 	mov	r8,1825
800153e2:	11 88       	ld.ub	r8,r8[0x0]
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800153e4:	ed b8 00 01 	bld	r8,0x1
800153e8:	c0 61       	brne	800153f4 <otg_interrupt+0x2cc>
					uhd_unfreeze_pipe(pipe);
800153ea:	e2 6a 00 00 	mov	r10,131072
800153ee:	fe 69 06 24 	mov	r9,-129500
800153f2:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800153f4:	ed b8 00 02 	bld	r8,0x2
800153f8:	c0 61       	brne	80015404 <otg_interrupt+0x2dc>
					uhd_unfreeze_pipe(pipe);
800153fa:	e2 6a 00 00 	mov	r10,131072
800153fe:	fe 69 06 28 	mov	r9,-129496
80015402:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015404:	ed b8 00 03 	bld	r8,0x3
80015408:	c0 61       	brne	80015414 <otg_interrupt+0x2ec>
					uhd_unfreeze_pipe(pipe);
8001540a:	e2 6a 00 00 	mov	r10,131072
8001540e:	fe 69 06 2c 	mov	r9,-129492
80015412:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015414:	ed b8 00 04 	bld	r8,0x4
80015418:	c0 61       	brne	80015424 <otg_interrupt+0x2fc>
					uhd_unfreeze_pipe(pipe);
8001541a:	e2 6a 00 00 	mov	r10,131072
8001541e:	fe 69 06 30 	mov	r9,-129488
80015422:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015424:	ed b8 00 05 	bld	r8,0x5
80015428:	c0 61       	brne	80015434 <otg_interrupt+0x30c>
					uhd_unfreeze_pipe(pipe);
8001542a:	e2 6a 00 00 	mov	r10,131072
8001542e:	fe 69 06 34 	mov	r9,-129484
80015432:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015434:	ed b8 00 06 	bld	r8,0x6
80015438:	c0 61       	brne	80015444 <otg_interrupt+0x31c>
					uhd_unfreeze_pipe(pipe);
8001543a:	e2 69 00 00 	mov	r9,131072
8001543e:	fe 68 06 38 	mov	r8,-129480
80015442:	91 09       	st.w	r8[0x0],r9
				}
			}
			uhc_notify_resume();
80015444:	e0 a0 09 62 	rcall	80016708 <uhc_notify_resume>
80015448:	c7 ca       	rjmp	80015140 <otg_interrupt+0x18>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
8001544a:	72 0c       	ld.w	r12,r9[0x0]
8001544c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80015450:	e0 80 00 f8 	breq	80015640 <otg_interrupt+0x518>
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
80015454:	fe 69 05 c0 	mov	r9,-129600
80015458:	72 08       	ld.w	r8,r9[0x0]
8001545a:	ed b8 00 11 	bld	r8,0x11
8001545e:	cf d1       	brne	80015458 <otg_interrupt+0x330>

		// IN packet received
		uhd_ack_in_received(0);
80015460:	fe 68 05 60 	mov	r8,-129696
80015464:	30 19       	mov	r9,1
80015466:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80015468:	e0 60 2c b8 	mov	r0,11448
8001546c:	60 08       	ld.w	r8,r0[0x0]
8001546e:	58 28       	cp.w	r8,2
80015470:	e0 80 02 14 	breq	80015898 <otg_interrupt+0x770>
80015474:	58 38       	cp.w	r8,3
80015476:	fe 91 fe 65 	brne	80015140 <otg_interrupt+0x18>
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
8001547a:	30 0c       	mov	r12,0
8001547c:	fe b0 f9 de 	rcall	80014838 <uhd_ctrl_request_end>
80015480:	fe 9f fe 60 	bral	80015140 <otg_interrupt+0x18>
			uhc_notify_resume();
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80015484:	e0 68 2c c8 	mov	r8,11464
80015488:	90 09       	ld.sh	r9,r8[0x0]
8001548a:	58 09       	cp.w	r9,0
8001548c:	c0 80       	breq	8001549c <otg_interrupt+0x374>
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
8001548e:	90 09       	ld.sh	r9,r8[0x0]
80015490:	20 19       	sub	r9,1
80015492:	b0 09       	st.h	r8[0x0],r9
80015494:	90 08       	ld.sh	r8,r8[0x0]
80015496:	58 08       	cp.w	r8,0
80015498:	e0 80 03 07 	breq	80015aa6 <otg_interrupt+0x97e>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
8001549c:	e0 67 06 a8 	mov	r7,1704
800154a0:	6e 08       	ld.w	r8,r7[0x0]
800154a2:	58 08       	cp.w	r8,0
800154a4:	c0 94       	brge	800154b6 <otg_interrupt+0x38e>
			if (ptr_job->timeout) {
800154a6:	8e 18       	ld.sh	r8,r7[0x2]
800154a8:	58 08       	cp.w	r8,0
800154aa:	c0 60       	breq	800154b6 <otg_interrupt+0x38e>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800154ac:	20 18       	sub	r8,1
800154ae:	5c 88       	casts.h	r8
800154b0:	ae 18       	st.h	r7[0x2],r8
800154b2:	e0 80 03 99 	breq	80015be4 <otg_interrupt+0xabc>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154b6:	e0 68 06 a8 	mov	r8,1704
800154ba:	6e 59       	ld.w	r9,r7[0x14]
800154bc:	58 09       	cp.w	r9,0
800154be:	c0 b4       	brge	800154d4 <otg_interrupt+0x3ac>
			if (ptr_job->timeout) {
800154c0:	f1 09 00 16 	ld.sh	r9,r8[22]
800154c4:	58 09       	cp.w	r9,0
800154c6:	c0 70       	breq	800154d4 <otg_interrupt+0x3ac>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800154c8:	20 19       	sub	r9,1
800154ca:	5c 89       	casts.h	r9
800154cc:	f1 59 00 16 	st.h	r8[22],r9
800154d0:	e0 80 03 90 	breq	80015bf0 <otg_interrupt+0xac8>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154d4:	e0 68 06 a8 	mov	r8,1704
800154d8:	6e a9       	ld.w	r9,r7[0x28]
800154da:	58 09       	cp.w	r9,0
800154dc:	c0 b4       	brge	800154f2 <otg_interrupt+0x3ca>
			if (ptr_job->timeout) {
800154de:	f1 09 00 2a 	ld.sh	r9,r8[42]
800154e2:	58 09       	cp.w	r9,0
800154e4:	c0 70       	breq	800154f2 <otg_interrupt+0x3ca>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800154e6:	20 19       	sub	r9,1
800154e8:	5c 89       	casts.h	r9
800154ea:	f1 59 00 2a 	st.h	r8[42],r9
800154ee:	e0 80 03 87 	breq	80015bfc <otg_interrupt+0xad4>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154f2:	e0 68 06 a8 	mov	r8,1704
800154f6:	6e f9       	ld.w	r9,r7[0x3c]
800154f8:	58 09       	cp.w	r9,0
800154fa:	c0 b4       	brge	80015510 <otg_interrupt+0x3e8>
			if (ptr_job->timeout) {
800154fc:	f1 09 00 3e 	ld.sh	r9,r8[62]
80015500:	58 09       	cp.w	r9,0
80015502:	c0 70       	breq	80015510 <otg_interrupt+0x3e8>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80015504:	20 19       	sub	r9,1
80015506:	5c 89       	casts.h	r9
80015508:	f1 59 00 3e 	st.h	r8[62],r9
8001550c:	e0 80 03 7e 	breq	80015c08 <otg_interrupt+0xae0>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80015510:	e0 68 06 a8 	mov	r8,1704
80015514:	6f 49       	ld.w	r9,r7[0x50]
80015516:	58 09       	cp.w	r9,0
80015518:	c0 b4       	brge	8001552e <otg_interrupt+0x406>
			if (ptr_job->timeout) {
8001551a:	f1 09 00 52 	ld.sh	r9,r8[82]
8001551e:	58 09       	cp.w	r9,0
80015520:	c0 70       	breq	8001552e <otg_interrupt+0x406>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80015522:	20 19       	sub	r9,1
80015524:	5c 89       	casts.h	r9
80015526:	f1 59 00 52 	st.h	r8[82],r9
8001552a:	e0 80 03 75 	breq	80015c14 <otg_interrupt+0xaec>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
8001552e:	6f 99       	ld.w	r9,r7[0x64]
80015530:	e0 68 06 a8 	mov	r8,1704
80015534:	58 09       	cp.w	r9,0
80015536:	c0 b4       	brge	8001554c <otg_interrupt+0x424>
			if (ptr_job->timeout) {
80015538:	f1 09 00 66 	ld.sh	r9,r8[102]
8001553c:	58 09       	cp.w	r9,0
8001553e:	c0 70       	breq	8001554c <otg_interrupt+0x424>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80015540:	20 19       	sub	r9,1
80015542:	5c 89       	casts.h	r9
80015544:	f1 59 00 66 	st.h	r8[102],r9
80015548:	e0 80 03 32 	breq	80015bac <otg_interrupt+0xa84>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
8001554c:	30 0c       	mov	r12,0
8001554e:	e0 a0 04 df 	rcall	80015f0c <uhc_notify_sof>

	// Notify the user application
	UHC_SOF_EVENT();
80015552:	e0 a0 28 ea 	rcall	8001a726 <usb_sof>
80015556:	fe 9f fd f5 	bral	80015140 <otg_interrupt+0x18>
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
8001555a:	74 0a       	ld.w	r10,r10[0x0]
8001555c:	ed ba 00 01 	bld	r10,0x1
80015560:	c0 81       	brne	80015570 <otg_interrupt+0x448>
80015562:	fe 6a 04 10 	mov	r10,-130032
80015566:	74 0a       	ld.w	r10,r10[0x0]
80015568:	ed ba 00 01 	bld	r10,0x1
8001556c:	e0 80 02 a7 	breq	80015aba <otg_interrupt+0x992>
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
80015570:	fe 68 04 04 	mov	r8,-130044
80015574:	70 08       	ld.w	r8,r8[0x0]
80015576:	ed b8 00 00 	bld	r8,0x0
8001557a:	c0 81       	brne	8001558a <otg_interrupt+0x462>
8001557c:	fe 68 04 10 	mov	r8,-130032
80015580:	70 08       	ld.w	r8,r8[0x0]
80015582:	ed b8 00 00 	bld	r8,0x0
80015586:	e0 80 02 b8 	breq	80015af6 <otg_interrupt+0x9ce>
		uhc_notify_connection(true);
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
8001558a:	fe 69 08 04 	mov	r9,-129020
8001558e:	72 08       	ld.w	r8,r9[0x0]
80015590:	ed b8 00 03 	bld	r8,0x3
80015594:	e0 80 01 f1 	breq	80015976 <otg_interrupt+0x84e>
		UHC_VBUS_ERROR();
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80015598:	72 08       	ld.w	r8,r9[0x0]
8001559a:	ed b8 00 0e 	bld	r8,0xe
8001559e:	cf d1       	brne	80015598 <otg_interrupt+0x470>
	otg_unfreeze_clock();
800155a0:	fe 69 08 00 	mov	r9,-129024
800155a4:	72 08       	ld.w	r8,r9[0x0]
800155a6:	af c8       	cbr	r8,0xe
800155a8:	93 08       	st.w	r9[0x0],r8

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800155aa:	fe 68 04 10 	mov	r8,-130032
800155ae:	70 08       	ld.w	r8,r8[0x0]
800155b0:	ed b8 00 06 	bld	r8,0x6
800155b4:	e0 81 01 43 	brne	8001583a <otg_interrupt+0x712>
800155b8:	fe 68 04 04 	mov	r8,-130044
800155bc:	70 09       	ld.w	r9,r8[0x0]
800155be:	ed b9 00 06 	bld	r9,0x6
800155c2:	c0 a0       	breq	800155d6 <otg_interrupt+0x4ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800155c4:	70 09       	ld.w	r9,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800155c6:	ed b9 00 03 	bld	r9,0x3
800155ca:	c0 60       	breq	800155d6 <otg_interrupt+0x4ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800155cc:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800155ce:	ed b8 00 04 	bld	r8,0x4
800155d2:	e0 81 01 34 	brne	8001583a <otg_interrupt+0x712>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800155d6:	fe 68 00 00 	mov	r8,-131072
800155da:	35 89       	mov	r9,88
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800155dc:	fe 6a 04 00 	mov	r10,-130048
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800155e0:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800155e4:	74 08       	ld.w	r8,r10[0x0]
800155e6:	a9 a8       	sbr	r8,0x8
		if ((!Is_uhd_downstream_resume())
800155e8:	fe 69 04 04 	mov	r9,-130044
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800155ec:	95 08       	st.w	r10[0x0],r8
		if ((!Is_uhd_downstream_resume())
800155ee:	72 08       	ld.w	r8,r9[0x0]
				&&(!Is_uhd_disconnection())) {
800155f0:	ed b8 00 03 	bld	r8,0x3
800155f4:	f3 f8 10 00 	ld.wne	r8,r9[0x0]
			if (Is_uhd_high_speed_mode()) {
				uhd_send_resume();
			}
		}
		// Wait 50ms before restarting transfer
		uhd_resume_start = 50;
800155f8:	e0 68 07 22 	mov	r8,1826
800155fc:	33 29       	mov	r9,50
800155fe:	b0 89       	st.b	r8[0x0],r9
80015600:	fe 9f fd a0 	bral	80015140 <otg_interrupt+0x18>
		uhd_disable_bank_interrupt(pipe);
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
		uhd_disable_out_ready_interrupt(pipe);
80015604:	30 29       	mov	r9,2
80015606:	fe 6c 06 20 	mov	r12,-129504
8001560a:	f6 0c 00 08 	add	r8,r11,r12
8001560e:	91 09       	st.w	r8[0x0],r9
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
80015610:	fe 6c 05 60 	mov	r12,-129696
80015614:	f6 0c 00 0a 	add	r10,r11,r12
80015618:	95 09       	st.w	r10[0x0],r9
		uhd_ack_fifocon(pipe);
8001561a:	e0 69 40 00 	mov	r9,16384
8001561e:	91 09       	st.w	r8[0x0],r9
		uhd_unfreeze_pipe(pipe);
80015620:	e2 69 00 00 	mov	r9,131072
80015624:	91 09       	st.w	r8[0x0],r9
		uhd_enable_bank_interrupt(pipe);
80015626:	e0 3b fa 10 	sub	r11,129552
8001562a:	e0 68 10 00 	mov	r8,4096
8001562e:	97 08       	st.w	r11[0x0],r8
80015630:	fe 9f fd 88 	bral	80015140 <otg_interrupt+0x18>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
80015634:	fe f9 05 ec 	ld.w	r9,pc[1516]
80015638:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
8001563c:	fe 9f fe 56 	bral	800152e8 <otg_interrupt+0x1c0>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80015640:	72 08       	ld.w	r8,r9[0x0]
80015642:	ed b8 00 01 	bld	r8,0x1
80015646:	e0 81 01 13 	brne	8001586c <otg_interrupt+0x744>
		// OUT packet sent
		uhd_freeze_pipe(0);
8001564a:	fe 64 05 f0 	mov	r4,-129552
8001564e:	e2 65 00 00 	mov	r5,131072
80015652:	89 05       	st.w	r4[0x0],r5
		uhd_ack_out_ready(0);
80015654:	30 28       	mov	r8,2
80015656:	fe 6e 05 60 	mov	lr,-129696
8001565a:	9d 08       	st.w	lr[0x0],r8
		switch(uhd_ctrl_request_phase) {
8001565c:	e0 60 2c b8 	mov	r0,11448
80015660:	60 08       	ld.w	r8,r0[0x0]
80015662:	58 18       	cp.w	r8,1
80015664:	e0 80 01 a5 	breq	800159ae <otg_interrupt+0x886>
80015668:	58 48       	cp.w	r8,4
8001566a:	fe 91 fd 6b 	brne	80015140 <otg_interrupt+0x18>
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
8001566e:	fe b0 f8 e5 	rcall	80014838 <uhd_ctrl_request_end>
80015672:	fe 9f fd 67 	bral	80015140 <otg_interrupt+0x18>
		uhd_unfreeze_pipe(pipe);
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
80015676:	fe 69 05 60 	mov	r9,-129696
8001567a:	f6 09 00 08 	add	r8,r11,r9
8001567e:	34 09       	mov	r9,64
80015680:	91 09       	st.w	r8[0x0],r9
		uhd_reset_data_toggle(pipe);
80015682:	fe 69 05 f0 	mov	r9,-129552
80015686:	f6 09 00 08 	add	r8,r11,r9
8001568a:	e4 69 00 00 	mov	r9,262144
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
8001568e:	30 4b       	mov	r11,4
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
80015690:	91 09       	st.w	r8[0x0],r9
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
80015692:	fe b0 fa 47 	rcall	80014b20 <uhd_ep_abort_pipe>
80015696:	fe 9f fd 55 	bral	80015140 <otg_interrupt+0x18>
	}

	if (uhd_is_pipe_out(pipe)) {
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
8001569a:	e0 3a fa 10 	sub	r10,129552
8001569e:	e0 68 10 00 	mov	r8,4096
800156a2:	95 08       	st.w	r10[0x0],r8
800156a4:	fe 9f fd 4e 	bral	80015140 <otg_interrupt+0x18>
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
		uhd_disable_bank_interrupt(pipe);
800156a8:	fe 69 06 20 	mov	r9,-129504
800156ac:	f6 09 00 08 	add	r8,r11,r9
800156b0:	e0 69 10 00 	mov	r9,4096
800156b4:	91 09       	st.w	r8[0x0],r9
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800156b6:	e0 68 06 a8 	mov	r8,1704
800156ba:	f8 c9 00 01 	sub	r9,r12,1
800156be:	f2 09 00 29 	add	r9,r9,r9<<0x2
800156c2:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
800156c6:	72 08       	ld.w	r8,r9[0x0]
800156c8:	58 08       	cp.w	r8,0
800156ca:	fe 94 fd 3b 	brge	80015140 <otg_interrupt+0x18>
		return; // No job running
	}
	ptr_job->busy = false;
800156ce:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800156d2:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_end) {
800156d4:	72 48       	ld.w	r8,r9[0x10]
800156d6:	58 08       	cp.w	r8,0
800156d8:	fe 90 fd 34 	breq	80015140 <otg_interrupt+0x18>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
800156dc:	e0 3b fb 00 	sub	r11,129792
800156e0:	76 0e       	ld.w	lr,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800156e2:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
			uhd_get_pipe_endpoint_address(pipe),
800156e6:	76 06       	ld.w	r6,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800156e8:	e2 1c 00 3c 	andl	r12,0x3c,COH
800156ec:	f7 de c2 04 	bfextu	r11,lr,0x10,0x4
800156f0:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
800156f4:	e0 3c fb dc 	sub	r12,130012
800156f8:	e0 6e 00 80 	mov	lr,128
800156fc:	58 16       	cp.w	r6,1
800156fe:	f9 be 01 00 	movne	lr,0
80015702:	a3 77       	lsl	r7,0x3
80015704:	fd eb 10 0b 	or	r11,lr,r11
80015708:	78 0e       	ld.w	lr,r12[0x0]
8001570a:	37 fc       	mov	r12,127
8001570c:	f8 07 09 4c 	lsl	r12,r12,r7
80015710:	f9 ee 00 0e 	and	lr,r12,lr
80015714:	72 39       	ld.w	r9,r9[0xc]
80015716:	5c 9c       	brev	r12
80015718:	f8 0c 12 00 	clz	r12,r12
8001571c:	fc 0c 0a 4c 	lsr	r12,lr,r12
80015720:	5c 5c       	castu.b	r12
80015722:	5d 18       	icall	r8
80015724:	fe 9f fd 0e 	bral	80015140 <otg_interrupt+0x18>
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80015728:	e0 60 2c b8 	mov	r0,11448
8001572c:	30 14       	mov	r4,1
8001572e:	81 04       	st.w	r0[0x0],r4

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80015730:	f5 3e 00 08 	ld.ub	lr,r10[8]
80015734:	e0 66 2c c0 	mov	r6,11456
80015738:	15 f5       	ld.ub	r5,r10[0x7]
8001573a:	fd e5 10 85 	or	r5,lr,r5<<0x8
8001573e:	8c 0e       	ld.sh	lr,r6[0x0]
80015740:	5c 85       	casts.h	r5
80015742:	fc 05 19 00 	cp.h	r5,lr
80015746:	e0 80 01 f3 	breq	80015b2c <otg_interrupt+0xa04>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
8001574a:	f5 08 00 10 	ld.sh	r8,r10[16]
8001574e:	f8 08 19 00 	cp.h	r8,r12
80015752:	c1 81       	brne	80015782 <otg_interrupt+0x65a>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80015754:	74 58       	ld.w	r8,r10[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80015756:	58 08       	cp.w	r8,0
80015758:	e0 80 01 17 	breq	80015986 <otg_interrupt+0x85e>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
8001575c:	fe 69 04 24 	mov	r9,-130012
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80015760:	f4 cb ff f4 	sub	r11,r10,-12
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80015764:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80015766:	2f 0a       	sub	r10,-16
80015768:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8001576c:	5d 18       	icall	r8
8001576e:	e0 80 01 0c 	breq	80015986 <otg_interrupt+0x85e>
80015772:	6e 0a       	ld.w	r10,r7[0x0]
80015774:	8c 0e       	ld.sh	lr,r6[0x0]
80015776:	15 f5       	ld.ub	r5,r10[0x7]
80015778:	f5 38 00 08 	ld.ub	r8,r10[8]
8001577c:	f1 e5 10 85 	or	r5,r8,r5<<0x8
80015780:	5c 85       	casts.h	r5
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015782:	fe 69 05 00 	mov	r9,-129792
80015786:	72 0c       	ld.w	r12,r9[0x0]
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80015788:	72 08       	ld.w	r8,r9[0x0]
8001578a:	e0 18 fc ff 	andl	r8,0xfcff
8001578e:	a9 b8       	sbr	r8,0x9
80015790:	93 08       	st.w	r9[0x0],r8
	uhd_ack_out_ready(0);
80015792:	fe 68 05 60 	mov	r8,-129696
80015796:	30 29       	mov	r9,2
80015798:	91 09       	st.w	r8[0x0],r9
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
8001579a:	f1 dc c0 83 	bfextu	r8,r12,0x4,0x3

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
8001579e:	fc 05 19 00 	cp.h	r5,lr
800157a2:	5f bb       	srhi	r11
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
800157a4:	30 8e       	mov	lr,8
800157a6:	fc 08 09 4e 	lsl	lr,lr,r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800157aa:	30 08       	mov	r8,0
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
800157ac:	5c 5e       	castu.b	lr

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800157ae:	f0 0e 18 00 	cp.b	lr,r8
800157b2:	5f 19       	srne	r9
800157b4:	f7 e9 00 09 	and	r9,r11,r9
800157b8:	f0 09 18 00 	cp.b	r9,r8
800157bc:	c3 10       	breq	8001581e <otg_interrupt+0x6f6>
800157be:	f5 08 00 10 	ld.sh	r8,r10[16]
800157c2:	30 0b       	mov	r11,0
800157c4:	f6 08 19 00 	cp.h	r8,r11
800157c8:	c2 b0       	breq	8001581e <otg_interrupt+0x6f6>
800157ca:	16 95       	mov	r5,r11
800157cc:	fc 19 e0 00 	movh	r9,0xe000
800157d0:	c0 68       	rjmp	800157dc <otg_interrupt+0x6b4>
800157d2:	f5 08 00 10 	ld.sh	r8,r10[16]
800157d6:	ea 08 19 00 	cp.h	r8,r5
800157da:	c2 20       	breq	8001581e <otg_interrupt+0x6f6>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
800157dc:	74 38       	ld.w	r8,r10[0xc]
800157de:	11 3c       	ld.ub	r12,r8++
800157e0:	12 cc       	st.b	r9++,r12
800157e2:	95 38       	st.w	r10[0xc],r8
		uhd_ctrl_nb_trans++;
800157e4:	8c 08       	ld.sh	r8,r6[0x0]
800157e6:	2f f8       	sub	r8,-1
800157e8:	ac 08       	st.h	r6[0x0],r8
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
800157ea:	6e 08       	ld.w	r8,r7[0x0]
800157ec:	f1 0a 00 10 	ld.sh	r10,r8[16]
800157f0:	20 1a       	sub	r10,1
800157f2:	f1 5a 00 10 	st.h	r8[16],r10

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800157f6:	fc 09 01 08 	sub	r8,lr,r9
800157fa:	6e 0a       	ld.w	r10,r7[0x0]
800157fc:	f6 08 18 00 	cp.b	r8,r11
80015800:	5f 1c       	srne	r12
80015802:	8c 04       	ld.sh	r4,r6[0x0]
80015804:	15 f3       	ld.ub	r3,r10[0x7]
80015806:	f5 38 00 08 	ld.ub	r8,r10[8]
8001580a:	f1 e3 10 88 	or	r8,r8,r3<<0x8
8001580e:	f0 04 19 00 	cp.h	r4,r8
80015812:	5f 38       	srlo	r8
80015814:	f9 e8 00 08 	and	r8,r12,r8
80015818:	f6 08 18 00 	cp.b	r8,r11
8001581c:	cd b1       	brne	800157d2 <otg_interrupt+0x6aa>
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
8001581e:	30 29       	mov	r9,2
80015820:	fe 68 05 f0 	mov	r8,-129552
80015824:	91 09       	st.w	r8[0x0],r9
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	uhd_enable_out_ready_interrupt(0);
	uhd_ack_fifocon(0);
80015826:	fe 68 06 20 	mov	r8,-129504
8001582a:	e0 69 40 00 	mov	r9,16384
8001582e:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80015830:	e2 69 00 00 	mov	r9,131072
80015834:	91 09       	st.w	r8[0x0],r9
80015836:	fe 9f fc 85 	bral	80015140 <otg_interrupt+0x18>
		uhd_sleep_mode(UHD_STATE_IDLE);
		return;
	}

	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
8001583a:	fe 69 08 04 	mov	r9,-129020
8001583e:	72 08       	ld.w	r8,r9[0x0]
80015840:	ed b8 00 01 	bld	r8,0x1
80015844:	fe 91 fc 7e 	brne	80015140 <otg_interrupt+0x18>
		otg_ack_vbus_transition();
80015848:	30 2a       	mov	r10,2
8001584a:	fe 68 08 08 	mov	r8,-129016
8001584e:	91 0a       	st.w	r8[0x0],r10
		if (Is_otg_vbus_high()) {
80015850:	72 0c       	ld.w	r12,r9[0x0]
80015852:	e2 1c 08 00 	andl	r12,0x800,COH
80015856:	e0 81 01 81 	brne	80015b58 <otg_interrupt+0xa30>
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
			UHC_VBUS_CHANGE(true);
		} else {
			uhd_sleep_mode(UHD_STATE_NO_VBUS);
			otg_freeze_clock();
8001585a:	fe 69 08 00 	mov	r9,-129024
8001585e:	72 08       	ld.w	r8,r9[0x0]
80015860:	af a8       	sbr	r8,0xe
80015862:	93 08       	st.w	r9[0x0],r8
			UHC_VBUS_CHANGE(false);
80015864:	e0 a0 27 5d 	rcall	8001a71e <usb_vbus_change>
80015868:	fe 9f fc 6c 	bral	80015140 <otg_interrupt+0x18>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
8001586c:	72 08       	ld.w	r8,r9[0x0]
8001586e:	e2 18 00 40 	andl	r8,0x40,COH
80015872:	e0 81 01 94 	brne	80015b9a <otg_interrupt+0xa72>
		// Stall Handshake received
		uhd_ack_stall(0);
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80015876:	72 09       	ld.w	r9,r9[0x0]
80015878:	ed b9 00 03 	bld	r9,0x3
8001587c:	fe 91 fc 62 	brne	80015140 <otg_interrupt+0x18>
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80015880:	fe 69 06 80 	mov	r9,-129408
80015884:	72 0a       	ld.w	r10,r9[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80015886:	93 08       	st.w	r9[0x0],r8
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
80015888:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
8001588c:	20 18       	sub	r8,1
8001588e:	58 28       	cp.w	r8,2
80015890:	e0 88 01 80 	brls	80015b90 <otg_interrupt+0xa68>
80015894:	30 6c       	mov	r12,6
80015896:	ce ca       	rjmp	8001566e <otg_interrupt+0x546>
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80015898:	fe 68 05 30 	mov	r8,-129744
8001589c:	e0 67 2c bc 	mov	r7,11452
800158a0:	70 05       	ld.w	r5,r8[0x0]
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
800158a2:	fc 12 e0 00 	movh	r2,0xe000
800158a6:	70 08       	ld.w	r8,r8[0x0]
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
800158a8:	eb d5 c2 88 	bfextu	r5,r5,0x14,0x8
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
800158ac:	50 08       	stdsp	sp[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158ae:	0e 91       	mov	r1,r7
800158b0:	30 06       	mov	r6,0
800158b2:	30 04       	mov	r4,0
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
800158b4:	e0 63 2c c0 	mov	r3,11456
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158b8:	6e 0a       	ld.w	r10,r7[0x0]
800158ba:	ec 05 18 00 	cp.b	r5,r6
800158be:	5f 18       	srne	r8
800158c0:	f5 09 00 10 	ld.sh	r9,r10[16]
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
800158c4:	ea ce 00 01 	sub	lr,r5,1
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158c8:	e8 09 19 00 	cp.h	r9,r4
800158cc:	5f 1c       	srne	r12
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158ce:	f4 cb ff f4 	sub	r11,r10,-12
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158d2:	f1 ec 00 0c 	and	r12,r8,r12
800158d6:	ec 0c 18 00 	cp.b	r12,r6
800158da:	c2 51       	brne	80015924 <otg_interrupt+0x7fc>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158dc:	e8 09 19 00 	cp.h	r9,r4
800158e0:	5f 09       	sreq	r9
800158e2:	12 68       	and	r8,r9
800158e4:	ec 08 18 00 	cp.b	r8,r6
800158e8:	e0 80 01 3d 	breq	80015b62 <otg_interrupt+0xa3a>
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
800158ec:	74 58       	ld.w	r8,r10[0x14]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158ee:	58 08       	cp.w	r8,0
800158f0:	c0 90       	breq	80015902 <otg_interrupt+0x7da>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800158f2:	fe 69 04 24 	mov	r9,-130012
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158f6:	2f 0a       	sub	r10,-16
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800158f8:	72 0c       	ld.w	r12,r9[0x0]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158fa:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800158fe:	5d 18       	icall	r8
80015900:	cd c1       	brne	800158b8 <otg_interrupt+0x790>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
80015902:	30 48       	mov	r8,4
80015904:	81 08       	st.w	r0[0x0],r8
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80015906:	fe 69 05 00 	mov	r9,-129792
8001590a:	72 08       	ld.w	r8,r9[0x0]
8001590c:	e0 18 fc ff 	andl	r8,0xfcff
80015910:	a9 b8       	sbr	r8,0x9
80015912:	93 08       	st.w	r9[0x0],r8
	uhd_ack_out_ready(0);
80015914:	30 28       	mov	r8,2
80015916:	fe 69 05 60 	mov	r9,-129696
8001591a:	93 08       	st.w	r9[0x0],r8
	uhd_enable_out_ready_interrupt(0);
8001591c:	fe 69 05 f0 	mov	r9,-129552
80015920:	93 08       	st.w	r9[0x0],r8
80015922:	c8 2b       	rjmp	80015826 <otg_interrupt+0x6fe>

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
80015924:	05 39       	ld.ub	r9,r2++
80015926:	74 38       	ld.w	r8,r10[0xc]
80015928:	10 c9       	st.b	r8++,r9
8001592a:	95 38       	st.w	r10[0xc],r8
		uhd_ctrl_nb_trans++;
8001592c:	86 08       	ld.sh	r8,r3[0x0]
8001592e:	2f f8       	sub	r8,-1
80015930:	a6 08       	st.h	r3[0x0],r8
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80015932:	eb de c0 08 	bfextu	r5,lr,0x0,0x8
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
80015936:	62 08       	ld.w	r8,r1[0x0]
80015938:	f1 09 00 10 	ld.sh	r9,r8[16]
8001593c:	20 19       	sub	r9,1
8001593e:	f1 59 00 10 	st.h	r8[16],r9
80015942:	cb bb       	rjmp	800158b8 <otg_interrupt+0x790>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015944:	fe 6c 05 00 	mov	r12,-129792
80015948:	78 0a       	ld.w	r10,r12[0x0]
8001594a:	e0 1a fc ff 	andl	r10,0xfcff
8001594e:	a9 aa       	sbr	r10,0x8
80015950:	99 0a       	st.w	r12[0x0],r10
	uhd_ack_in_received(0);
80015952:	30 1a       	mov	r10,1
80015954:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_short_packet(0);
80015956:	e0 6c 00 80 	mov	r12,128
8001595a:	91 0c       	st.w	r8[0x0],r12
	uhd_enable_in_received_interrupt(0);
8001595c:	97 0a       	st.w	r11[0x0],r10
	uhd_ack_fifocon(0);
8001595e:	fe 68 06 20 	mov	r8,-129504
80015962:	e0 6a 40 00 	mov	r10,16384
80015966:	91 0a       	st.w	r8[0x0],r10
	uhd_unfreeze_pipe(0);
80015968:	91 09       	st.w	r8[0x0],r9
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
8001596a:	30 29       	mov	r9,2
8001596c:	e0 68 2c b8 	mov	r8,11448
80015970:	91 09       	st.w	r8[0x0],r9
80015972:	fe 9f fb e7 	bral	80015140 <otg_interrupt+0x18>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
		uhd_ack_vbus_error_interrupt();
80015976:	30 89       	mov	r9,8
80015978:	fe 68 08 08 	mov	r8,-129016
8001597c:	91 09       	st.w	r8[0x0],r9
		UHC_VBUS_ERROR();
8001597e:	e0 a0 26 d1 	rcall	8001a720 <usb_vbus_error>
80015982:	fe 9f fb df 	bral	80015140 <otg_interrupt+0x18>
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80015986:	30 38       	mov	r8,3
80015988:	81 08       	st.w	r0[0x0],r8
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
8001598a:	fe 69 05 00 	mov	r9,-129792
8001598e:	72 08       	ld.w	r8,r9[0x0]
80015990:	e0 18 fc ff 	andl	r8,0xfcff
80015994:	a9 a8       	sbr	r8,0x8
80015996:	93 08       	st.w	r9[0x0],r8
	uhd_ack_in_received(0);
80015998:	fe 69 05 60 	mov	r9,-129696
8001599c:	30 18       	mov	r8,1
8001599e:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
800159a0:	e0 6a 00 80 	mov	r10,128
800159a4:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
800159a6:	fe 69 05 f0 	mov	r9,-129552
800159aa:	93 08       	st.w	r9[0x0],r8
800159ac:	c3 db       	rjmp	80015826 <otg_interrupt+0x6fe>
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
800159ae:	81 08       	st.w	r0[0x0],r8

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
800159b0:	e0 67 2c bc 	mov	r7,11452
800159b4:	e0 66 2c c0 	mov	r6,11456
800159b8:	6e 0a       	ld.w	r10,r7[0x0]
800159ba:	8c 0b       	ld.sh	r11,r6[0x0]
800159bc:	15 f3       	ld.ub	r3,r10[0x7]
800159be:	f5 39 00 08 	ld.ub	r9,r10[8]
800159c2:	f3 e3 10 89 	or	r9,r9,r3<<0x8
800159c6:	5c 89       	casts.h	r9
800159c8:	f6 09 19 00 	cp.h	r9,r11
800159cc:	e0 80 00 f6 	breq	80015bb8 <otg_interrupt+0xa90>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
800159d0:	f5 08 00 10 	ld.sh	r8,r10[16]
800159d4:	f8 08 19 00 	cp.h	r8,r12
800159d8:	c1 51       	brne	80015a02 <otg_interrupt+0x8da>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
800159da:	74 58       	ld.w	r8,r10[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800159dc:	58 08       	cp.w	r8,0
800159de:	cd 40       	breq	80015986 <otg_interrupt+0x85e>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800159e0:	fe 69 04 24 	mov	r9,-130012
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800159e4:	f4 cb ff f4 	sub	r11,r10,-12
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800159e8:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800159ea:	2f 0a       	sub	r10,-16
800159ec:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800159f0:	5d 18       	icall	r8
800159f2:	cc a0       	breq	80015986 <otg_interrupt+0x85e>
800159f4:	6e 0a       	ld.w	r10,r7[0x0]
800159f6:	8c 0b       	ld.sh	r11,r6[0x0]
800159f8:	15 f9       	ld.ub	r9,r10[0x7]
800159fa:	f5 38 00 08 	ld.ub	r8,r10[8]
800159fe:	f1 e9 10 89 	or	r9,r8,r9<<0x8
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a02:	fe 6c 05 00 	mov	r12,-129792
80015a06:	78 0e       	ld.w	lr,r12[0x0]
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80015a08:	78 08       	ld.w	r8,r12[0x0]
80015a0a:	e0 18 fc ff 	andl	r8,0xfcff
80015a0e:	a9 b8       	sbr	r8,0x9
80015a10:	99 08       	st.w	r12[0x0],r8
	uhd_ack_out_ready(0);
80015a12:	fe 68 05 60 	mov	r8,-129696
80015a16:	30 2c       	mov	r12,2
80015a18:	91 0c       	st.w	r8[0x0],r12
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a1a:	f1 de c0 83 	bfextu	r8,lr,0x4,0x3

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a1e:	f2 0b 19 00 	cp.h	r11,r9
80015a22:	5f 3b       	srlo	r11
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a24:	30 8c       	mov	r12,8
80015a26:	f8 08 09 4c 	lsl	r12,r12,r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a2a:	30 08       	mov	r8,0
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a2c:	5c 5c       	castu.b	r12

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a2e:	f0 0c 18 00 	cp.b	r12,r8
80015a32:	5f 19       	srne	r9
80015a34:	f7 e9 00 09 	and	r9,r11,r9
80015a38:	f0 09 18 00 	cp.b	r9,r8
80015a3c:	fe 90 fe f1 	breq	8001581e <otg_interrupt+0x6f6>
80015a40:	f5 09 00 10 	ld.sh	r9,r10[16]
80015a44:	30 08       	mov	r8,0
80015a46:	f0 09 19 00 	cp.h	r9,r8
80015a4a:	fe 90 fe ea 	breq	8001581e <otg_interrupt+0x6f6>
80015a4e:	10 9e       	mov	lr,r8
80015a50:	fc 19 e0 00 	movh	r9,0xe000
80015a54:	c0 78       	rjmp	80015a62 <otg_interrupt+0x93a>
80015a56:	f5 0b 00 10 	ld.sh	r11,r10[16]
80015a5a:	fc 0b 19 00 	cp.h	r11,lr
80015a5e:	fe 90 fe e0 	breq	8001581e <otg_interrupt+0x6f6>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80015a62:	74 3b       	ld.w	r11,r10[0xc]
80015a64:	17 35       	ld.ub	r5,r11++
80015a66:	12 c5       	st.b	r9++,r5
80015a68:	95 3b       	st.w	r10[0xc],r11
		uhd_ctrl_nb_trans++;
80015a6a:	8c 0a       	ld.sh	r10,r6[0x0]
80015a6c:	2f fa       	sub	r10,-1
80015a6e:	ac 0a       	st.h	r6[0x0],r10
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80015a70:	6e 0a       	ld.w	r10,r7[0x0]
80015a72:	f5 0b 00 10 	ld.sh	r11,r10[16]
80015a76:	20 1b       	sub	r11,1
80015a78:	f5 5b 00 10 	st.h	r10[16],r11

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a7c:	f8 09 01 0a 	sub	r10,r12,r9
80015a80:	8c 04       	ld.sh	r4,r6[0x0]
80015a82:	f0 0a 18 00 	cp.b	r10,r8
80015a86:	5f 15       	srne	r5
80015a88:	6e 0a       	ld.w	r10,r7[0x0]
80015a8a:	15 f3       	ld.ub	r3,r10[0x7]
80015a8c:	f5 3b 00 08 	ld.ub	r11,r10[8]
80015a90:	f7 e3 10 8b 	or	r11,r11,r3<<0x8
80015a94:	f6 04 19 00 	cp.h	r4,r11
80015a98:	5f 3b       	srlo	r11
80015a9a:	eb eb 00 0b 	and	r11,r5,r11
80015a9e:	f0 0b 18 00 	cp.b	r11,r8
80015aa2:	cd a1       	brne	80015a56 <otg_interrupt+0x92e>
80015aa4:	cb da       	rjmp	8001581e <otg_interrupt+0x6f6>
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
			// Stop request
			uhd_freeze_pipe(0);
80015aa6:	e2 69 00 00 	mov	r9,131072
80015aaa:	fe 68 05 f0 	mov	r8,-129552
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
80015aae:	30 7c       	mov	r12,7
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
			// Stop request
			uhd_freeze_pipe(0);
80015ab0:	91 09       	st.w	r8[0x0],r9
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
80015ab2:	fe b0 f6 c3 	rcall	80014838 <uhd_ctrl_request_end>
80015ab6:	fe 9f fc f3 	bral	8001549c <otg_interrupt+0x374>
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
		uhd_ack_disconnection();
80015aba:	30 2a       	mov	r10,2
80015abc:	fe 6b 04 08 	mov	r11,-130040
80015ac0:	97 0a       	st.w	r11[0x0],r10
		uhd_disable_disconnection_int();
80015ac2:	fe 6b 04 14 	mov	r11,-130028
80015ac6:	97 0a       	st.w	r11[0x0],r10
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
80015ac8:	fe 6b 04 00 	mov	r11,-130048
80015acc:	76 0a       	ld.w	r10,r11[0x0]
80015ace:	a9 da       	cbr	r10,0x9
80015ad0:	97 0a       	st.w	r11[0x0],r10
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80015ad2:	35 8a       	mov	r10,88
80015ad4:	f3 4a 04 14 	st.w	r9[1044],r10
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
80015ad8:	fe 69 04 18 	mov	r9,-130024
80015adc:	30 1a       	mov	r10,1
80015ade:	93 0a       	st.w	r9[0x0],r10
		uhd_suspend_start = 0;
80015ae0:	e0 69 07 20 	mov	r9,1824
		uhd_resume_start = 0;
80015ae4:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(false);
80015ae6:	e0 69 07 22 	mov	r9,1826
80015aea:	10 9c       	mov	r12,r8
80015aec:	b2 88       	st.b	r9[0x0],r8
80015aee:	e0 a0 05 cb 	rcall	80016684 <uhc_notify_connection>
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
80015af2:	fe 9f fb 27 	bral	80015140 <otg_interrupt+0x18>
80015af6:	fe 68 04 08 	mov	r8,-130040
		uhd_disable_connection_int();
80015afa:	30 1c       	mov	r12,1
80015afc:	91 0c       	st.w	r8[0x0],r12
80015afe:	fe 68 04 14 	mov	r8,-130028
		uhd_enable_disconnection_int();
80015b02:	91 0c       	st.w	r8[0x0],r12
		uhd_enable_sof();
80015b04:	fe 68 04 18 	mov	r8,-130024
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
		uhd_disable_connection_int();
		uhd_enable_disconnection_int();
80015b08:	fe 6a 04 00 	mov	r10,-130048
		uhd_enable_sof();
80015b0c:	30 29       	mov	r9,2
80015b0e:	91 09       	st.w	r8[0x0],r9
80015b10:	74 08       	ld.w	r8,r10[0x0]
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
80015b12:	a9 a8       	sbr	r8,0x8
80015b14:	95 08       	st.w	r10[0x0],r8
80015b16:	e0 68 07 20 	mov	r8,1824
		uhd_resume_start = 0;
80015b1a:	30 09       	mov	r9,0
		uhc_notify_connection(true);
80015b1c:	b0 89       	st.b	r8[0x0],r9
80015b1e:	e0 68 07 22 	mov	r8,1826
80015b22:	b0 89       	st.b	r8[0x0],r9
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80015b24:	e0 a0 05 b0 	rcall	80016684 <uhc_notify_connection>
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015b28:	fe 9f fb 0c 	bral	80015140 <otg_interrupt+0x18>
80015b2c:	30 3a       	mov	r10,3
80015b2e:	81 0a       	st.w	r0[0x0],r10
80015b30:	fe 6c 05 00 	mov	r12,-129792
80015b34:	78 0a       	ld.w	r10,r12[0x0]
	uhd_ack_in_received(0);
80015b36:	e0 1a fc ff 	andl	r10,0xfcff
	uhd_ack_short_packet(0);
80015b3a:	a9 aa       	sbr	r10,0x8
80015b3c:	99 0a       	st.w	r12[0x0],r10
	uhd_enable_in_received_interrupt(0);
80015b3e:	91 04       	st.w	r8[0x0],r4
	uhd_ack_fifocon(0);
80015b40:	e0 6a 00 80 	mov	r10,128
80015b44:	91 0a       	st.w	r8[0x0],r10
80015b46:	97 04       	st.w	r11[0x0],r4
80015b48:	fe 68 06 20 	mov	r8,-129504
	uhd_unfreeze_pipe(0);
80015b4c:	e0 6a 40 00 	mov	r10,16384
	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
		otg_ack_vbus_transition();
		if (Is_otg_vbus_high()) {
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
			UHC_VBUS_CHANGE(true);
80015b50:	91 0a       	st.w	r8[0x0],r10
80015b52:	91 09       	st.w	r8[0x0],r9
80015b54:	fe 9f fa f6 	bral	80015140 <otg_interrupt+0x18>
80015b58:	30 1c       	mov	r12,1
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80015b5a:	e0 a0 25 e2 	rcall	8001a71e <usb_vbus_change>
80015b5e:	fe 9f fa f1 	bral	80015140 <otg_interrupt+0x18>
80015b62:	15 f9       	ld.ub	r9,r10[0x7]
80015b64:	f5 38 00 08 	ld.ub	r8,r10[8]
80015b68:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80015b6c:	e0 69 2c c0 	mov	r9,11456
80015b70:	92 09       	ld.sh	r9,r9[0x0]
80015b72:	f0 09 19 00 	cp.h	r9,r8
80015b76:	fe 90 fe c6 	breq	80015902 <otg_interrupt+0x7da>
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80015b7a:	40 08       	lddsp	r8,sp[0x0]
80015b7c:	ed b8 00 07 	bld	r8,0x7
80015b80:	fe 90 fe c1 	breq	80015902 <otg_interrupt+0x7da>
80015b84:	30 19       	mov	r9,1
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
80015b86:	fe 68 05 f0 	mov	r8,-129552
80015b8a:	91 09       	st.w	r8[0x0],r9
80015b8c:	fe 9f fe 4d 	bral	80015826 <otg_interrupt+0x6fe>
		}
		return;
	}
	if (Is_uhd_stall(0)) {
		// Stall Handshake received
		uhd_ack_stall(0);
80015b90:	4a 49       	lddpc	r9,80015c20 <otg_interrupt+0xaf8>
80015b92:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		uhd_ctrl_request_end(UHD_TRANS_STALL);
80015b96:	fe 9f fd 6c 	bral	8001566e <otg_interrupt+0x546>
80015b9a:	34 09       	mov	r9,64
80015b9c:	fe 68 05 60 	mov	r8,-129696
80015ba0:	30 4c       	mov	r12,4
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80015ba2:	91 09       	st.w	r8[0x0],r9
80015ba4:	fe b0 f6 4a 	rcall	80014838 <uhd_ctrl_request_end>
80015ba8:	fe 9f fa cc 	bral	80015140 <otg_interrupt+0x18>
80015bac:	30 7b       	mov	r11,7
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80015bae:	30 6c       	mov	r12,6
80015bb0:	fe b0 f7 b8 	rcall	80014b20 <uhd_ep_abort_pipe>
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015bb4:	fe 9f fc cc 	bral	8001554c <otg_interrupt+0x424>
80015bb8:	30 39       	mov	r9,3
80015bba:	81 09       	st.w	r0[0x0],r9
80015bbc:	fe 6a 05 00 	mov	r10,-129792
	uhd_ack_in_received(0);
80015bc0:	74 09       	ld.w	r9,r10[0x0]
	uhd_ack_short_packet(0);
80015bc2:	e0 19 fc ff 	andl	r9,0xfcff
80015bc6:	a9 a9       	sbr	r9,0x8
	uhd_enable_in_received_interrupt(0);
80015bc8:	95 09       	st.w	r10[0x0],r9
	uhd_ack_fifocon(0);
80015bca:	9d 08       	st.w	lr[0x0],r8
80015bcc:	e0 69 00 80 	mov	r9,128
80015bd0:	9d 09       	st.w	lr[0x0],r9
80015bd2:	89 08       	st.w	r4[0x0],r8
	uhd_unfreeze_pipe(0);
80015bd4:	e0 69 40 00 	mov	r9,16384
80015bd8:	fe 68 06 20 	mov	r8,-129504
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80015bdc:	91 09       	st.w	r8[0x0],r9
80015bde:	91 05       	st.w	r8[0x0],r5
80015be0:	fe 9f fa b0 	bral	80015140 <otg_interrupt+0x18>
80015be4:	30 7b       	mov	r11,7
80015be6:	30 1c       	mov	r12,1
80015be8:	fe b0 f7 9c 	rcall	80014b20 <uhd_ep_abort_pipe>
80015bec:	fe 9f fc 65 	bral	800154b6 <otg_interrupt+0x38e>
80015bf0:	30 7b       	mov	r11,7
80015bf2:	30 2c       	mov	r12,2
80015bf4:	fe b0 f7 96 	rcall	80014b20 <uhd_ep_abort_pipe>
80015bf8:	fe 9f fc 6e 	bral	800154d4 <otg_interrupt+0x3ac>
80015bfc:	30 7b       	mov	r11,7
80015bfe:	30 3c       	mov	r12,3
80015c00:	fe b0 f7 90 	rcall	80014b20 <uhd_ep_abort_pipe>
80015c04:	fe 9f fc 77 	bral	800154f2 <otg_interrupt+0x3ca>
80015c08:	30 7b       	mov	r11,7
80015c0a:	30 4c       	mov	r12,4
80015c0c:	fe b0 f7 8a 	rcall	80014b20 <uhd_ep_abort_pipe>
80015c10:	fe 9f fc 80 	bral	80015510 <otg_interrupt+0x3e8>
80015c14:	30 7b       	mov	r11,7
80015c16:	30 5c       	mov	r12,5
80015c18:	fe b0 f7 84 	rcall	80014b20 <uhd_ep_abort_pipe>
80015c1c:	fe 9f fc 89 	bral	8001552e <otg_interrupt+0x406>
80015c20:	80 02       	ld.sh	r2,r0[0x0]
80015c22:	3e 14       	mov	r4,-31

80015c24 <osc_enable>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015c24:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80015c28:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();

	switch (id) {
80015c2a:	58 0c       	cp.w	r12,0
80015c2c:	c0 f0       	breq	80015c4a <osc_enable+0x26>
80015c2e:	30 29       	mov	r9,2
80015c30:	f2 0c 18 00 	cp.b	r12,r9
80015c34:	c0 61       	brne	80015c40 <osc_enable+0x1c>
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
		AVR32_PM.oscctrl32 = oscctrl;
80015c36:	e2 6a 01 01 	mov	r10,131329
80015c3a:	fe 79 0c 00 	mov	r9,-62464
80015c3e:	93 ca       	st.w	r9[0x30],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015c40:	ed b8 00 10 	bld	r8,0x10
80015c44:	c0 20       	breq	80015c48 <osc_enable+0x24>
      cpu_irq_enable();
80015c46:	d5 03       	csrf	0x10
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
}
80015c48:	5e fc       	retal	r12
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80015c4a:	fe 79 0c 00 	mov	r9,-62464
80015c4e:	e0 6a 03 07 	mov	r10,775
80015c52:	93 aa       	st.w	r9[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80015c54:	72 0a       	ld.w	r10,r9[0x0]
80015c56:	a3 aa       	sbr	r10,0x2
80015c58:	93 0a       	st.w	r9[0x0],r10
		break;
80015c5a:	cf 3b       	rjmp	80015c40 <osc_enable+0x1c>

80015c5c <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015c5c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015c60:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015c62:	fe 79 0c 00 	mov	r9,-62464
80015c66:	73 58       	ld.w	r8,r9[0x54]
80015c68:	ed b8 00 06 	bld	r8,0x6
80015c6c:	cf d1       	brne	80015c66 <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c6e:	a3 6c       	lsl	r12,0x2
	mask &= ~(1U << module_index);
80015c70:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c72:	e0 2c f3 f8 	sub	r12,62456
	mask &= ~(1U << module_index);
80015c76:	f0 0b 09 48 	lsl	r8,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c7a:	78 09       	ld.w	r9,r12[0x0]
	mask &= ~(1U << module_index);
80015c7c:	5c d8       	com	r8
80015c7e:	12 68       	and	r8,r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015c80:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015c82:	ed ba 00 10 	bld	r10,0x10
80015c86:	c0 20       	breq	80015c8a <sysclk_priv_disable_module+0x2e>
      cpu_irq_enable();
80015c88:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80015c8a:	5e fc       	retal	r12

80015c8c <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015c8c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015c90:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015c92:	fe 79 0c 00 	mov	r9,-62464
80015c96:	73 58       	ld.w	r8,r9[0x54]
80015c98:	ed b8 00 06 	bld	r8,0x6
80015c9c:	cf d1       	brne	80015c96 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80015c9e:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015ca0:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80015ca2:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015ca6:	e0 2c f3 f8 	sub	r12,62456
80015caa:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80015cac:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015cae:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015cb0:	ed ba 00 10 	bld	r10,0x10
80015cb4:	c0 20       	breq	80015cb8 <sysclk_priv_enable_module+0x2c>
      cpu_irq_enable();
80015cb6:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80015cb8:	5e fc       	retal	r12
80015cba:	d7 03       	nop

80015cbc <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
80015cbc:	eb cd 40 80 	pushm	r7,lr
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
}

static inline void genclk_disable(unsigned int id)
{
	AVR32_PM.gcctrl[id] = 0;
80015cc0:	fe 79 0c 00 	mov	r9,-62464
80015cc4:	30 08       	mov	r8,0
80015cc6:	f3 48 00 70 	st.w	r9[112],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015cca:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015cce:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015cd0:	73 58       	ld.w	r8,r9[0x54]
80015cd2:	ed b8 00 06 	bld	r8,0x6
80015cd6:	cf d1       	brne	80015cd0 <sysclk_disable_usb+0x14>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015cd8:	fe 79 0c 0c 	mov	r9,-62452
80015cdc:	72 08       	ld.w	r8,r9[0x0]
	mask &= ~(1U << module_index);
80015cde:	a3 d8       	cbr	r8,0x3
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015ce0:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015ce2:	ed ba 00 10 	bld	r10,0x10
80015ce6:	c0 20       	breq	80015cea <sysclk_disable_usb+0x2e>
      cpu_irq_enable();
80015ce8:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015cea:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015cee:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015cf0:	fe 79 0c 00 	mov	r9,-62464
80015cf4:	73 58       	ld.w	r8,r9[0x54]
80015cf6:	ed b8 00 06 	bld	r8,0x6
80015cfa:	cf d1       	brne	80015cf4 <sysclk_disable_usb+0x38>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015cfc:	fe 79 0c 14 	mov	r9,-62444
80015d00:	72 08       	ld.w	r8,r9[0x0]
	mask &= ~(1U << module_index);
80015d02:	a1 d8       	cbr	r8,0x1
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015d04:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d06:	ed ba 00 10 	bld	r10,0x10
80015d0a:	c0 20       	breq	80015d0e <sysclk_disable_usb+0x52>
      cpu_irq_enable();
80015d0c:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015d0e:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80015d12:	d3 03       	ssrf	0x10
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80015d14:	e0 69 07 24 	mov	r9,1828
80015d18:	13 88       	ld.ub	r8,r9[0x0]
80015d1a:	20 18       	sub	r8,1
80015d1c:	5c 58       	castu.b	r8
	if (!sysclk_pbb_refcount)
80015d1e:	b2 88       	st.b	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d20:	c0 70       	breq	80015d2e <sysclk_disable_usb+0x72>
80015d22:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
80015d26:	c0 21       	brne	80015d2a <sysclk_disable_usb+0x6e>
void sysclk_disable_usb(void)
{
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
}
80015d28:	d5 03       	csrf	0x10
80015d2a:	e3 cd 80 80 	ldm	sp++,r7,pc
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
80015d2e:	30 2b       	mov	r11,2
80015d30:	30 1c       	mov	r12,1
80015d32:	c9 5f       	rcall	80015c5c <sysclk_priv_disable_module>
80015d34:	cf 7b       	rjmp	80015d22 <sysclk_disable_usb+0x66>
80015d36:	d7 03       	nop

80015d38 <sysclk_enable_pbb_module>:
80015d38:	d4 01       	pushm	lr
80015d3a:	e1 bb 00 00 	mfsr	r11,0x0
80015d3e:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80015d40:	e0 69 07 24 	mov	r9,1828
80015d44:	13 88       	ld.ub	r8,r9[0x0]
80015d46:	58 08       	cp.w	r8,0
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
80015d48:	c1 d0       	breq	80015d82 <sysclk_enable_pbb_module+0x4a>
80015d4a:	2f f8       	sub	r8,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d4c:	b2 88       	st.b	r9[0x0],r8
80015d4e:	ed bb 00 10 	bld	r11,0x10
      cpu_irq_enable();
80015d52:	c0 20       	breq	80015d56 <sysclk_enable_pbb_module+0x1e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015d54:	d5 03       	csrf	0x10
80015d56:	e1 ba 00 00 	mfsr	r10,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015d5a:	d3 03       	ssrf	0x10
80015d5c:	fe 79 0c 00 	mov	r9,-62464
80015d60:	73 58       	ld.w	r8,r9[0x54]
80015d62:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80015d66:	cf d1       	brne	80015d60 <sysclk_enable_pbb_module+0x28>
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015d68:	30 19       	mov	r9,1
80015d6a:	fe 78 0c 14 	mov	r8,-62444
	mask |= 1U << module_index;
80015d6e:	f2 0c 09 4c 	lsl	r12,r9,r12
80015d72:	70 09       	ld.w	r9,r8[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015d74:	12 4c       	or	r12,r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d76:	91 0c       	st.w	r8[0x0],r12
80015d78:	ed ba 00 10 	bld	r10,0x10
      cpu_irq_enable();
80015d7c:	c0 20       	breq	80015d80 <sysclk_enable_pbb_module+0x48>

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
}
80015d7e:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015d80:	d8 02       	popm	pc
80015d82:	e1 be 00 00 	mfsr	lr,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015d86:	d3 03       	ssrf	0x10
80015d88:	fe 7a 0c 00 	mov	r10,-62464
80015d8c:	75 58       	ld.w	r8,r10[0x54]
80015d8e:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015d92:	cf d1       	brne	80015d8c <sysclk_enable_pbb_module+0x54>
80015d94:	fe 7a 0c 0c 	mov	r10,-62452
	mask |= 1U << module_index;
80015d98:	74 08       	ld.w	r8,r10[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015d9a:	a3 a8       	sbr	r8,0x2
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d9c:	95 08       	st.w	r10[0x0],r8
80015d9e:	ed be 00 10 	bld	lr,0x10
      cpu_irq_enable();
   }

	barrier();
80015da2:	c0 31       	brne	80015da8 <sysclk_enable_pbb_module+0x70>
80015da4:	13 88       	ld.ub	r8,r9[0x0]
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80015da6:	cd 2b       	rjmp	80015d4a <sysclk_enable_pbb_module+0x12>
   }

	barrier();
80015da8:	d5 03       	csrf	0x10
80015daa:	13 88       	ld.ub	r8,r9[0x0]
80015dac:	cc fb       	rjmp	80015d4a <sysclk_enable_pbb_module+0x12>
80015dae:	d7 03       	nop

80015db0 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80015db0:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015db4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80015db8:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80015dba:	e0 67 07 24 	mov	r7,1828
80015dbe:	0f 88       	ld.ub	r8,r7[0x0]
80015dc0:	58 08       	cp.w	r8,0
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
80015dc2:	c4 e0       	breq	80015e5e <sysclk_enable_usb+0xae>
80015dc4:	2f f8       	sub	r8,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015dc6:	ae 88       	st.b	r7[0x0],r8
80015dc8:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
80015dcc:	c0 21       	brne	80015dd0 <sysclk_enable_usb+0x20>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015dce:	d5 03       	csrf	0x10
80015dd0:	e1 ba 00 00 	mfsr	r10,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015dd4:	d3 03       	ssrf	0x10
80015dd6:	fe 79 0c 00 	mov	r9,-62464
80015dda:	73 58       	ld.w	r8,r9[0x54]
80015ddc:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015de0:	cf d1       	brne	80015dda <sysclk_enable_usb+0x2a>
80015de2:	fe 79 0c 14 	mov	r9,-62444
	mask |= 1U << module_index;
80015de6:	72 08       	ld.w	r8,r9[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015de8:	a1 b8       	sbr	r8,0x1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015dea:	93 08       	st.w	r9[0x0],r8
80015dec:	ed ba 00 10 	bld	r10,0x10
      cpu_irq_enable();
80015df0:	c0 20       	breq	80015df4 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015df2:	d5 03       	csrf	0x10
80015df4:	e1 ba 00 00 	mfsr	r10,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015df8:	d3 03       	ssrf	0x10
80015dfa:	fe 79 0c 00 	mov	r9,-62464
80015dfe:	73 58       	ld.w	r8,r9[0x54]
80015e00:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015e04:	cf d1       	brne	80015dfe <sysclk_enable_usb+0x4e>
80015e06:	fe 79 0c 0c 	mov	r9,-62452
	mask |= 1U << module_index;
80015e0a:	72 08       	ld.w	r8,r9[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015e0c:	a3 b8       	sbr	r8,0x3
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015e0e:	93 08       	st.w	r9[0x0],r8
80015e10:	ed ba 00 10 	bld	r10,0x10
      cpu_irq_enable();
80015e14:	c0 20       	breq	80015e18 <sysclk_enable_usb+0x68>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e16:	d5 03       	csrf	0x10
80015e18:	fe 77 0c 00 	mov	r7,-62464

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80015e1c:	6f 58       	ld.w	r8,r7[0x54]
80015e1e:	ed b8 00 01 	bld	r8,0x1
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80015e22:	c1 10       	breq	80015e44 <sysclk_enable_usb+0x94>

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80015e24:	6f 5c       	ld.w	r12,r7[0x54]
80015e26:	e2 1c 00 80 	andl	r12,0x80,COH
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e2a:	c1 40       	breq	80015e52 <sysclk_enable_usb+0xa2>
80015e2c:	fe 78 0c 00 	mov	r8,-62464
		vco_hz *= 2;
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80015e30:	e0 6a 02 0d 	mov	r10,525
80015e34:	ea 1a 3f 0f 	orh	r10,0x3f0f
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e38:	10 99       	mov	r9,r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e3a:	91 9a       	st.w	r8[0x24],r10
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80015e3c:	73 58       	ld.w	r8,r9[0x54]
80015e3e:	ed b8 00 01 	bld	r8,0x1
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80015e42:	cf d1       	brne	80015e3c <sysclk_enable_usb+0x8c>
80015e44:	30 79       	mov	r9,7
80015e46:	fe 78 0c 00 	mov	r8,-62464
80015e4a:	f1 49 00 70 	st.w	r8[112],r9
void sysclk_enable_usb(void)
{
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80015e4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
80015e52:	ce 9e       	rcall	80015c24 <osc_enable>
80015e54:	6f 58       	ld.w	r8,r7[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80015e56:	ed b8 00 07 	bld	r8,0x7
80015e5a:	cf d1       	brne	80015e54 <sysclk_enable_usb+0xa4>
80015e5c:	ce 8b       	rjmp	80015e2c <sysclk_enable_usb+0x7c>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80015e5e:	30 2b       	mov	r11,2
80015e60:	30 1c       	mov	r12,1
80015e62:	c1 5f       	rcall	80015c8c <sysclk_priv_enable_module>
80015e64:	0f 88       	ld.ub	r8,r7[0x0]
80015e66:	ca fb       	rjmp	80015dc4 <sysclk_enable_usb+0x14>

80015e68 <sysclk_init>:
80015e68:	eb cd 40 80 	pushm	r7,lr
80015e6c:	fe 77 0c 00 	mov	r7,-62464
80015e70:	6f 58       	ld.w	r8,r7[0x54]
80015e72:	ed b8 00 00 	bld	r8,0x0
80015e76:	c1 10       	breq	80015e98 <sysclk_init+0x30>
80015e78:	6f 5c       	ld.w	r12,r7[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80015e7a:	e2 1c 00 80 	andl	r12,0x80,COH
80015e7e:	c2 c0       	breq	80015ed6 <sysclk_init+0x6e>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e80:	fe 78 0c 00 	mov	r8,-62464
		vco_hz *= 2;
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80015e84:	e0 6a 02 05 	mov	r10,517
80015e88:	ea 1a 3f 0a 	orh	r10,0x3f0a

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e8c:	10 99       	mov	r9,r8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e8e:	91 8a       	st.w	r8[0x20],r10

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e90:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80015e92:	ed b8 00 00 	bld	r8,0x0
80015e96:	cf d1       	brne	80015e90 <sysclk_init+0x28>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80015e98:	e0 6c 14 80 	mov	r12,5248
80015e9c:	ea 1c 03 ef 	orh	r12,0x3ef
80015ea0:	fe b0 e1 0d 	rcall	800120ba <flashc_set_bus_freq>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015ea4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80015ea8:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80015eaa:	fe 7a 0c 00 	mov	r10,-62464
80015eae:	74 08       	ld.w	r8,r10[0x0]
80015eb0:	e0 18 ff fc 	andl	r8,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80015eb4:	a1 b8       	sbr	r8,0x1
	AVR32_PM.mcctrl = mcctrl;
80015eb6:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015eb8:	ed b9 00 10 	bld	r9,0x10
80015ebc:	c0 20       	breq	80015ec0 <sysclk_init+0x58>
      cpu_irq_enable();
80015ebe:	d5 03       	csrf	0x10
	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80015ec0:	fe 78 0c 00 	mov	r8,-62464
80015ec4:	e0 69 43 6f 	mov	r9,17263
80015ec8:	91 49       	st.w	r8[0x10],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
80015eca:	31 59       	mov	r9,21
80015ecc:	91 59       	st.w	r8[0x14],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
80015ece:	36 39       	mov	r9,99
80015ed0:	91 39       	st.w	r8[0xc],r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80015ed2:	e3 cd 80 80 	ldm	sp++,r7,pc
static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
80015ed6:	ca 7e       	rcall	80015c24 <osc_enable>
80015ed8:	6f 58       	ld.w	r8,r7[0x54]
80015eda:	ed b8 00 07 	bld	r8,0x7
80015ede:	cf d1       	brne	80015ed8 <sysclk_init+0x70>
80015ee0:	cd 0b       	rjmp	80015e80 <sysclk_init+0x18>
80015ee2:	d7 03       	nop

80015ee4 <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
					uhc_sof_timeout_callback_t callback)
{
  uhc_sof_timeout_callback = callback;
80015ee4:	fe c9 ff 5c 	sub	r9,pc,-164
80015ee8:	e0 68 07 48 	mov	r8,1864
  uhc_sof_timeout = timeout;
80015eec:	91 09       	st.w	r8[0x0],r9
80015eee:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
  uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
80015ef0:	e0 68 2c ca 	mov	r8,11466
80015ef4:	b0 89       	st.b	r8[0x0],r9
80015ef6:	5e fc       	retal	r12

80015ef8 <uhc_enumeration_step8>:
80015ef8:	fe c9 fe 30 	sub	r9,pc,-464
80015efc:	e0 68 07 48 	mov	r8,1864
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
					uhc_sof_timeout_callback_t callback)
{
  uhc_sof_timeout_callback = callback;
  uhc_sof_timeout = timeout;
80015f00:	91 09       	st.w	r8[0x0],r9
80015f02:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
  // Wait 100ms
  uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
80015f04:	e0 68 2c ca 	mov	r8,11466
80015f08:	b0 89       	st.b	r8[0x0],r9
80015f0a:	5e fc       	retal	r12

80015f0c <uhc_notify_sof>:
80015f0c:	eb cd 40 c0 	pushm	r6-r7,lr
80015f10:	49 47       	lddpc	r7,80015f60 <uhc_notify_sof+0x54>
80015f12:	18 96       	mov	r6,r12

void uhc_notify_sof(bool b_micro)
{
  // Call all UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    if (uhc_uhis[i].sof_notify != NULL) {
80015f14:	6e 38       	ld.w	r8,r7[0xc]
80015f16:	58 08       	cp.w	r8,0
80015f18:	c0 20       	breq	80015f1c <uhc_notify_sof+0x10>
      uhc_uhis[i].sof_notify(b_micro);
80015f1a:	5d 18       	icall	r8

void uhc_notify_sof(bool b_micro)
{
  // Call all UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    if (uhc_uhis[i].sof_notify != NULL) {
80015f1c:	6e 78       	ld.w	r8,r7[0x1c]
80015f1e:	58 08       	cp.w	r8,0
80015f20:	c0 30       	breq	80015f26 <uhc_notify_sof+0x1a>
      uhc_uhis[i].sof_notify(b_micro);
80015f22:	0c 9c       	mov	r12,r6
80015f24:	5d 18       	icall	r8

void uhc_notify_sof(bool b_micro)
{
  // Call all UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    if (uhc_uhis[i].sof_notify != NULL) {
80015f26:	6e b8       	ld.w	r8,r7[0x2c]
80015f28:	58 08       	cp.w	r8,0
80015f2a:	c0 30       	breq	80015f30 <uhc_notify_sof+0x24>
      uhc_uhis[i].sof_notify(b_micro);
80015f2c:	0c 9c       	mov	r12,r6
80015f2e:	5d 18       	icall	r8

void uhc_notify_sof(bool b_micro)
{
  // Call all UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    if (uhc_uhis[i].sof_notify != NULL) {
80015f30:	6e f8       	ld.w	r8,r7[0x3c]
80015f32:	58 08       	cp.w	r8,0
80015f34:	c0 30       	breq	80015f3a <uhc_notify_sof+0x2e>
      uhc_uhis[i].sof_notify(b_micro);
80015f36:	0c 9c       	mov	r12,r6
80015f38:	5d 18       	icall	r8
    }
  }

  if (!b_micro) {
80015f3a:	58 06       	cp.w	r6,0
80015f3c:	c0 a1       	brne	80015f50 <uhc_notify_sof+0x44>
    // Manage SOF timeout
    if (uhc_sof_timeout) {
80015f3e:	e0 68 2c ca 	mov	r8,11466
80015f42:	11 89       	ld.ub	r9,r8[0x0]
80015f44:	58 09       	cp.w	r9,0
      if (--uhc_sof_timeout == 0) {
80015f46:	c0 50       	breq	80015f50 <uhc_notify_sof+0x44>
80015f48:	20 19       	sub	r9,1
80015f4a:	5c 59       	castu.b	r9
80015f4c:	b0 89       	st.b	r8[0x0],r9
80015f4e:	c0 30       	breq	80015f54 <uhc_notify_sof+0x48>
80015f50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	uhc_sof_timeout_callback();
80015f54:	e0 68 07 48 	mov	r8,1864
80015f58:	70 08       	ld.w	r8,r8[0x0]
80015f5a:	5d 18       	icall	r8
80015f5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f60:	80 02       	ld.sh	r2,r0[0x0]
80015f62:	41 90       	lddsp	r0,sp[0x64]

80015f64 <uhc_stop>:
80015f64:	d4 01       	pushm	lr
80015f66:	fe b0 f4 13 	rcall	8001478c <uhd_disable>

void uhc_stop(bool b_id_stop)
{
  // Stop UHD
  uhd_disable(b_id_stop);
}
80015f6a:	d8 02       	popm	pc

80015f6c <uhc_start>:
80015f6c:	d4 01       	pushm	lr
80015f6e:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
  g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80015f70:	e0 68 07 28 	mov	r8,1832
80015f74:	f1 69 00 12 	st.b	r8[18],r9
  uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80015f78:	30 09       	mov	r9,0
80015f7a:	e0 68 2c ca 	mov	r8,11466
  uhd_enable();
80015f7e:	b0 89       	st.b	r8[0x0],r9
}
80015f80:	fe b0 f3 a2 	rcall	800146c4 <uhd_enable>
80015f84:	d8 02       	popm	pc
80015f86:	d7 03       	nop

80015f88 <uhc_enumeration_step3>:
80015f88:	d4 01       	pushm	lr
80015f8a:	fe cc ff ea 	sub	r12,pc,-22
80015f8e:	fe b0 f1 d9 	rcall	80014340 <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
  uhc_enumeration_reset(uhc_enumeration_step4);
}
80015f92:	d8 02       	popm	pc

80015f94 <uhc_enumeration_step7>:
80015f94:	d4 01       	pushm	lr
80015f96:	fe cc 00 9e 	sub	r12,pc,158
80015f9a:	fe b0 f1 d3 	rcall	80014340 <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
  uhc_enumeration_reset(uhc_enumeration_step8);
}
80015f9e:	d8 02       	popm	pc

80015fa0 <uhc_enumeration_step4>:
80015fa0:	d4 01       	pushm	lr
80015fa2:	fe b0 f1 c1 	rcall	80014324 <uhd_get_speed>
80015fa6:	e0 68 07 28 	mov	r8,1832
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
  uhc_dev_enum->speed = uhd_get_speed();
80015faa:	fe c9 ff 82 	sub	r9,pc,-126
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
					uhc_sof_timeout_callback_t callback)
{
  uhc_sof_timeout_callback = callback;
80015fae:	91 5c       	st.w	r8[0x14],r12
  uhc_sof_timeout = timeout;
80015fb0:	e0 68 07 48 	mov	r8,1864
80015fb4:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
  uhc_dev_enum->speed = uhd_get_speed();
  uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
80015fb6:	36 49       	mov	r9,100
80015fb8:	e0 68 2c ca 	mov	r8,11466
80015fbc:	b0 89       	st.b	r8[0x0],r9
80015fbe:	d8 02       	popm	pc

80015fc0 <uhc_enumeration_error>:
80015fc0:	d4 21       	pushm	r4-r7,lr
80015fc2:	18 96       	mov	r6,r12
80015fc4:	58 7c       	cp.w	r12,7
80015fc6:	c2 c0       	breq	8001601e <uhc_enumeration_error+0x5e>
80015fc8:	e0 67 07 28 	mov	r7,1832
{
  if (status == UHC_ENUM_DISCONNECT) {
    uhc_enum_try = 0;
    return; // Abort enumeration process
  }
  uhd_ep_free(uhc_dev_enum->address, 0xFF);
80015fcc:	e0 6b 00 ff 	mov	r11,255
80015fd0:	ef 3c 00 12 	ld.ub	r12,r7[18]
80015fd4:	fe b0 f6 0c 	rcall	80014bec <uhd_ep_free>

  // Free USB configuration descriptor buffer
  if (uhc_dev_enum->conf_desc != NULL) {
80015fd8:	6e 6c       	ld.w	r12,r7[0x18]
80015fda:	58 0c       	cp.w	r12,0
    free(uhc_dev_enum->conf_desc);
80015fdc:	c0 50       	breq	80015fe6 <uhc_enumeration_error+0x26>
80015fde:	e0 a0 67 ef 	rcall	80022fbc <free>
    uhc_dev_enum->conf_desc = NULL;
80015fe2:	30 08       	mov	r8,0
  }
  uhc_dev_enum->address = 0;
  if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80015fe4:	8f 68       	st.w	r7[0x18],r8
  // Free USB configuration descriptor buffer
  if (uhc_dev_enum->conf_desc != NULL) {
    free(uhc_dev_enum->conf_desc);
    uhc_dev_enum->conf_desc = NULL;
  }
  uhc_dev_enum->address = 0;
80015fe6:	e0 65 07 44 	mov	r5,1860
80015fea:	30 04       	mov	r4,0
80015fec:	0b 88       	ld.ub	r8,r5[0x0]
  if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80015fee:	ef 64 00 12 	st.b	r7[18],r4
80015ff2:	f0 c9 ff ff 	sub	r9,r8,-1
80015ff6:	aa 89       	st.b	r5[0x0],r9
80015ff8:	30 39       	mov	r9,3
80015ffa:	f2 08 18 00 	cp.b	r8,r9
    uhi_hub_suspend(uhc_dev_enum);
  } else
#endif
    {
      // Suspend USB line
      uhd_suspend();
80015ffe:	e0 88 00 0b 	brls	80016014 <uhc_enumeration_error+0x54>
    uhc_enumeration_step1();
    return;
  }
  // Abort enumeration, set line in suspend mode
  uhc_enumeration_suspend();
  UHC_ENUM_EVENT(uhc_dev_enum, status);
80016002:	fe b0 f1 a9 	rcall	80014354 <uhd_suspend>
80016006:	0c 9b       	mov	r11,r6
80016008:	e0 6c 07 28 	mov	r12,1832
  uhc_enum_try = 0;
8001600c:	e0 a0 23 8e 	rcall	8001a728 <usb_enum>
    // Device connected on USB hub
    uhi_hub_send_reset(uhc_dev_enum, callback);
  } else
#endif
    {
      uhd_send_reset(callback);
80016010:	aa 84       	st.b	r5[0x0],r4
80016012:	d8 22       	popm	r4-r7,pc
  }
  uhc_dev_enum->address = 0;
  if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
    // Restart enumeration at beginning
    uhc_enumeration_step1();
    return;
80016014:	fe cc 01 30 	sub	r12,pc,304
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
  if (status == UHC_ENUM_DISCONNECT) {
    uhc_enum_try = 0;
80016018:	fe b0 f1 94 	rcall	80014340 <uhd_send_reset>
    return; // Abort enumeration process
8001601c:	d8 22       	popm	r4-r7,pc
8001601e:	30 09       	mov	r9,0
80016020:	e0 68 07 44 	mov	r8,1860
80016024:	b0 89       	st.b	r8[0x0],r9
80016026:	d8 22       	popm	r4-r7,pc

80016028 <uhc_enumeration_step5>:
80016028:	d4 01       	pushm	lr
8001602a:	20 2d       	sub	sp,8
8001602c:	38 08       	mov	r8,-128
8001602e:	ba 88       	st.b	sp[0x0],r8
80016030:	30 68       	mov	r8,6
80016032:	ba 98       	st.b	sp[0x1],r8
80016034:	e0 68 01 00 	mov	r8,256
80016038:	ba 18       	st.h	sp[0x2],r8
8001603a:	30 08       	mov	r8,0
8001603c:	ba 28       	st.h	sp[0x4],r8
8001603e:	30 88       	mov	r8,8
  req.wValue = (USB_DT_DEVICE << 8);
  req.wIndex = 0;
  req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
    + sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

  if (!uhd_ep0_alloc(0, 64)) {
80016040:	34 0b       	mov	r11,64

  req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
  req.wValue = (USB_DT_DEVICE << 8);
  req.wIndex = 0;
  req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80016042:	ba 38       	st.h	sp[0x6],r8
    + sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

  if (!uhd_ep0_alloc(0, 64)) {
80016044:	30 0c       	mov	r12,0
80016046:	fe b0 f2 b4 	rcall	800145ae <uhd_ep0_alloc>
8001604a:	c1 60       	breq	80016076 <uhc_enumeration_step5+0x4e>
    uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
    return;
  }
  if (!uhd_setup_request(0,
8001604c:	fe c9 ff cc 	sub	r9,pc,-52
80016050:	30 08       	mov	r8,0
80016052:	1a d9       	st.w	--sp,r9
80016054:	e0 6a 07 28 	mov	r10,1832
80016058:	fa cb ff fc 	sub	r11,sp,-4
8001605c:	31 29       	mov	r9,18
8001605e:	10 9c       	mov	r12,r8
80016060:	fe b0 f4 ca 	rcall	800149f4 <uhd_setup_request>
80016064:	2f fd       	sub	sp,-4
			 NULL,
			 uhc_enumeration_step6)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
}
80016066:	58 0c       	cp.w	r12,0
80016068:	c0 30       	breq	8001606e <uhc_enumeration_step5+0x46>
			 &req,
			 (uint8_t*)&uhc_dev_enum->dev_desc,
			 sizeof(usb_dev_desc_t),
			 NULL,
			 uhc_enumeration_step6)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8001606a:	2f ed       	sub	sp,-8
8001606c:	d8 02       	popm	pc
8001606e:	30 6c       	mov	r12,6
    return;
  }
}
80016070:	ca 8f       	rcall	80015fc0 <uhc_enumeration_error>
80016072:	2f ed       	sub	sp,-8
  req.wIndex = 0;
  req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
    + sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

  if (!uhd_ep0_alloc(0, 64)) {
    uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80016074:	d8 02       	popm	pc
80016076:	30 4c       	mov	r12,4
80016078:	ca 4f       	rcall	80015fc0 <uhc_enumeration_error>
			 NULL,
			 uhc_enumeration_step6)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
}
8001607a:	2f ed       	sub	sp,-8
8001607c:	d8 02       	popm	pc
8001607e:	d7 03       	nop

80016080 <uhc_enumeration_step6>:
80016080:	d4 01       	pushm	lr
80016082:	30 79       	mov	r9,7
80016084:	58 0b       	cp.w	r11,0
80016086:	5f 18       	srne	r8
80016088:	f2 0a 19 00 	cp.h	r10,r9
8001608c:	5f 89       	srls	r9
8001608e:	f3 e8 10 08 	or	r8,r9,r8
80016092:	c0 b1       	brne	800160a8 <uhc_enumeration_step6+0x28>
				  usb_add_t add,
				  uhd_trans_status_t status,
				  uint16_t payload_trans)
{
  UNUSED(add);
  if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
80016094:	e0 68 07 28 	mov	r8,1832
80016098:	11 99       	ld.ub	r9,r8[0x1]
8001609a:	30 18       	mov	r8,1
8001609c:	f0 09 18 00 	cp.b	r9,r8
      || (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
    uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
800160a0:	c0 90       	breq	800160b2 <uhc_enumeration_step6+0x32>
800160a2:	30 3c       	mov	r12,3
800160a4:	c8 ef       	rcall	80015fc0 <uhc_enumeration_error>
			  UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
    return;
800160a6:	d8 02       	popm	pc
				  uint16_t payload_trans)
{
  UNUSED(add);
  if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
      || (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
    uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
800160a8:	58 1b       	cp.w	r11,1
800160aa:	cf c1       	brne	800160a2 <uhc_enumeration_step6+0x22>
800160ac:	30 7c       	mov	r12,7
800160ae:	c8 9f       	rcall	80015fc0 <uhc_enumeration_error>
800160b0:	d8 02       	popm	pc
			  UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
    return;
800160b2:	fe c9 01 1e 	sub	r9,pc,286
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
					uhc_sof_timeout_callback_t callback)
{
  uhc_sof_timeout_callback = callback;
800160b6:	e0 68 07 48 	mov	r8,1864
  uhc_sof_timeout = timeout;
800160ba:	91 09       	st.w	r8[0x0],r9
800160bc:	31 49       	mov	r9,20
800160be:	e0 68 2c ca 	mov	r8,11466
800160c2:	b0 89       	st.b	r8[0x0],r9
800160c4:	d8 02       	popm	pc
800160c6:	d7 03       	nop

800160c8 <uhc_enumeration_step9>:
800160c8:	eb cd 40 80 	pushm	r7,lr
800160cc:	20 2d       	sub	sp,8
800160ce:	30 18       	mov	r8,1
800160d0:	e0 67 07 28 	mov	r7,1832
800160d4:	ba 18       	st.h	sp[0x2],r8
800160d6:	ef 68 00 12 	st.b	r7[18],r8
#else
  req.wValue = UHC_DEVICE_ENUM_ADD;
  uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
  req.wIndex = 0;
  req.wLength = 0;
800160da:	30 08       	mov	r8,0
  uhc_dev_enum->address = usb_addr_free;
#else
  req.wValue = UHC_DEVICE_ENUM_ADD;
  uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
  req.wIndex = 0;
800160dc:	ba 38       	st.h	sp[0x6],r8
 */
static void uhc_enumeration_step9(void)
{
  usb_setup_req_t req;

  req.bmRequestType = USB_REQ_RECIP_DEVICE
800160de:	ba 28       	st.h	sp[0x4],r8
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_ADDRESS;
800160e0:	ba 88       	st.b	sp[0x0],r8
#endif
  req.wIndex = 0;
  req.wLength = 0;

  // After a USB reset, the reallocation is required
  uhd_ep_free(0, 0);
800160e2:	30 58       	mov	r8,5
{
  usb_setup_req_t req;

  req.bmRequestType = USB_REQ_RECIP_DEVICE
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_ADDRESS;
800160e4:	30 0b       	mov	r11,0
#endif
  req.wIndex = 0;
  req.wLength = 0;

  // After a USB reset, the reallocation is required
  uhd_ep_free(0, 0);
800160e6:	ba 98       	st.b	sp[0x1],r8
800160e8:	16 9c       	mov	r12,r11
800160ea:	fe b0 f5 81 	rcall	80014bec <uhd_ep_free>
  if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
800160ee:	0f fb       	ld.ub	r11,r7[0x7]
800160f0:	30 0c       	mov	r12,0
800160f2:	fe b0 f2 5e 	rcall	800145ae <uhd_ep0_alloc>
    uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
    return;
  }

  if (!uhd_setup_request(0,
800160f6:	c1 70       	breq	80016124 <uhc_enumeration_step9+0x5c>
800160f8:	fe c9 ff c8 	sub	r9,pc,-56
800160fc:	30 08       	mov	r8,0
800160fe:	1a d9       	st.w	--sp,r9
80016100:	0e 9a       	mov	r10,r7
80016102:	fa cb ff fc 	sub	r11,sp,-4
80016106:	31 29       	mov	r9,18
80016108:	10 9c       	mov	r12,r8
8001610a:	fe b0 f4 75 	rcall	800149f4 <uhd_setup_request>
8001610e:	2f fd       	sub	sp,-4
			 NULL,
			 uhc_enumeration_step10)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
}
80016110:	58 0c       	cp.w	r12,0
80016112:	c0 40       	breq	8001611a <uhc_enumeration_step9+0x52>
80016114:	2f ed       	sub	sp,-8
			 &req,
			 (uint8_t*)&uhc_dev_enum->dev_desc,
			 sizeof(usb_dev_desc_t),
			 NULL,
			 uhc_enumeration_step10)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016116:	e3 cd 80 80 	ldm	sp++,r7,pc
8001611a:	30 6c       	mov	r12,6
    return;
  }
}
8001611c:	c5 2f       	rcall	80015fc0 <uhc_enumeration_error>
8001611e:	2f ed       	sub	sp,-8
80016120:	e3 cd 80 80 	ldm	sp++,r7,pc
  req.wLength = 0;

  // After a USB reset, the reallocation is required
  uhd_ep_free(0, 0);
  if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
    uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80016124:	30 4c       	mov	r12,4
80016126:	c4 df       	rcall	80015fc0 <uhc_enumeration_error>
			 NULL,
			 uhc_enumeration_step10)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
}
80016128:	2f ed       	sub	sp,-8
8001612a:	e3 cd 80 80 	ldm	sp++,r7,pc
8001612e:	d7 03       	nop

80016130 <uhc_enumeration_step10>:
80016130:	d4 01       	pushm	lr
80016132:	58 0b       	cp.w	r11,0
80016134:	c0 80       	breq	80016144 <uhc_enumeration_step10+0x14>
80016136:	58 1b       	cp.w	r11,1
80016138:	f9 bc 00 07 	moveq	r12,7
8001613c:	f9 bc 01 03 	movne	r12,3
80016140:	c4 0f       	rcall	80015fc0 <uhc_enumeration_error>
80016142:	d8 02       	popm	pc
80016144:	fe c9 ff ec 	sub	r9,pc,-20
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
					uhc_sof_timeout_callback_t callback)
{
  uhc_sof_timeout_callback = callback;
80016148:	e0 68 07 48 	mov	r8,1864
  uhc_sof_timeout = timeout;
8001614c:	91 09       	st.w	r8[0x0],r9
8001614e:	31 49       	mov	r9,20
80016150:	e0 68 2c ca 	mov	r8,11466
80016154:	b0 89       	st.b	r8[0x0],r9
80016156:	d8 02       	popm	pc

80016158 <uhc_enumeration_step11>:
80016158:	eb cd 40 80 	pushm	r7,lr
8001615c:	20 2d       	sub	sp,8
8001615e:	30 0b       	mov	r11,0
80016160:	16 9c       	mov	r12,r11
80016162:	fe b0 f5 45 	rcall	80014bec <uhd_ep_free>

  // Free address 0 used to start enumeration
  uhd_ep_free(0, 0);

  // Alloc control endpoint with the new USB address
  if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
80016166:	30 1c       	mov	r12,1
80016168:	e0 67 07 28 	mov	r7,1832
8001616c:	0f fb       	ld.ub	r11,r7[0x7]
8001616e:	fe b0 f2 20 	rcall	800145ae <uhd_ep0_alloc>
		     uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
    uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
    return;
  }
  // Send USB device descriptor request
  req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80016172:	c2 20       	breq	800161b6 <uhc_enumeration_step11+0x5e>
80016174:	38 08       	mov	r8,-128
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
80016176:	ba 88       	st.b	sp[0x0],r8
80016178:	30 68       	mov	r8,6
  req.wValue = (USB_DT_DEVICE << 8);
8001617a:	ba 98       	st.b	sp[0x1],r8
8001617c:	e0 68 01 00 	mov	r8,256
  req.wIndex = 0;
80016180:	ba 18       	st.h	sp[0x2],r8
80016182:	30 08       	mov	r8,0
  req.wLength = sizeof(usb_dev_desc_t);
80016184:	ba 28       	st.h	sp[0x4],r8
80016186:	31 28       	mov	r8,18
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80016188:	ba 38       	st.h	sp[0x6],r8
8001618a:	fe c8 ff ca 	sub	r8,pc,-54
8001618e:	0e 9a       	mov	r10,r7
80016190:	1a d8       	st.w	--sp,r8
80016192:	31 29       	mov	r9,18
80016194:	fa cb ff fc 	sub	r11,sp,-4
80016198:	30 08       	mov	r8,0
8001619a:	30 1c       	mov	r12,1
8001619c:	fe b0 f4 2c 	rcall	800149f4 <uhd_setup_request>
800161a0:	2f fd       	sub	sp,-4
			 sizeof(usb_dev_desc_t),
			 NULL, uhc_enumeration_step12)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
}
800161a2:	58 0c       	cp.w	r12,0
800161a4:	c0 40       	breq	800161ac <uhc_enumeration_step11+0x54>
800161a6:	2f ed       	sub	sp,-8
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			 &req,
			 (uint8_t *) & uhc_dev_enum->dev_desc,
			 sizeof(usb_dev_desc_t),
			 NULL, uhc_enumeration_step12)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800161a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800161ac:	30 6c       	mov	r12,6
    return;
  }
}
800161ae:	c0 9f       	rcall	80015fc0 <uhc_enumeration_error>
800161b0:	2f ed       	sub	sp,-8
800161b2:	e3 cd 80 80 	ldm	sp++,r7,pc
  uhd_ep_free(0, 0);

  // Alloc control endpoint with the new USB address
  if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
		     uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
    uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
800161b6:	30 4c       	mov	r12,4
800161b8:	c0 4f       	rcall	80015fc0 <uhc_enumeration_error>
			 sizeof(usb_dev_desc_t),
			 NULL, uhc_enumeration_step12)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
}
800161ba:	2f ed       	sub	sp,-8
800161bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800161c0 <uhc_enumeration_step12>:
800161c0:	eb cd 40 80 	pushm	r7,lr
800161c4:	20 2d       	sub	sp,8
800161c6:	31 29       	mov	r9,18
800161c8:	58 0b       	cp.w	r11,0
800161ca:	5f 18       	srne	r8
800161cc:	f2 0a 19 00 	cp.h	r10,r9
800161d0:	5f 19       	srne	r9
800161d2:	f3 e8 10 08 	or	r8,r9,r8
800161d6:	c0 d1       	brne	800161f0 <uhc_enumeration_step12+0x30>
{
  usb_setup_req_t req;
  uint8_t conf_num;
  UNUSED(add);

  if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
800161d8:	e0 67 07 28 	mov	r7,1832
800161dc:	30 18       	mov	r8,1
800161de:	0f 99       	ld.ub	r9,r7[0x1]
800161e0:	f0 09 18 00 	cp.b	r9,r8
      || (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
    uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800161e4:	c0 a0       	breq	800161f8 <uhc_enumeration_step12+0x38>
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			 &req,
			 (uint8_t *) uhc_dev_enum->conf_desc,
			 sizeof(usb_conf_desc_t),
			 NULL, uhc_enumeration_step13)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800161e6:	30 3c       	mov	r12,3
800161e8:	ce ce       	rcall	80015fc0 <uhc_enumeration_error>
    return;
  }
}
800161ea:	2f ed       	sub	sp,-8
800161ec:	e3 cd 80 80 	ldm	sp++,r7,pc
  uint8_t conf_num;
  UNUSED(add);

  if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
      || (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
    uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800161f0:	58 1b       	cp.w	r11,1
800161f2:	cf a1       	brne	800161e6 <uhc_enumeration_step12+0x26>
800161f4:	30 7c       	mov	r12,7
800161f6:	cf 9b       	rjmp	800161e8 <uhc_enumeration_step12+0x28>
    conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
  } else {
    conf_num = 1;
  }

  uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
800161f8:	30 9c       	mov	r12,9
800161fa:	e0 a0 66 e9 	rcall	80022fcc <malloc>
800161fe:	8f 6c       	st.w	r7[0x18],r12
  if (uhc_dev_enum->conf_desc == NULL) {
80016200:	c1 c0       	breq	80016238 <uhc_enumeration_step12+0x78>
    Assert(false);
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
  // Send USB device descriptor request
  req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80016202:	38 08       	mov	r8,-128
80016204:	ba 88       	st.b	sp[0x0],r8
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
80016206:	30 68       	mov	r8,6
80016208:	ba 98       	st.b	sp[0x1],r8
  req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
8001620a:	e0 68 02 00 	mov	r8,512
8001620e:	ba 18       	st.h	sp[0x2],r8
  req.wIndex = 0;
80016210:	30 08       	mov	r8,0
80016212:	ba 28       	st.h	sp[0x4],r8
  req.wLength = sizeof(usb_conf_desc_t);
80016214:	30 98       	mov	r8,9
80016216:	ba 38       	st.h	sp[0x6],r8
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80016218:	fe c8 ff d8 	sub	r8,pc,-40
8001621c:	18 9a       	mov	r10,r12
8001621e:	1a d8       	st.w	--sp,r8
80016220:	30 99       	mov	r9,9
80016222:	fa cb ff fc 	sub	r11,sp,-4
80016226:	30 08       	mov	r8,0
80016228:	30 1c       	mov	r12,1
8001622a:	fe b0 f3 e5 	rcall	800149f4 <uhd_setup_request>
8001622e:	2f fd       	sub	sp,-4
80016230:	58 0c       	cp.w	r12,0
			 &req,
			 (uint8_t *) uhc_dev_enum->conf_desc,
			 sizeof(usb_conf_desc_t),
			 NULL, uhc_enumeration_step13)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016232:	cd c1       	brne	800161ea <uhc_enumeration_step12+0x2a>
80016234:	30 6c       	mov	r12,6
  }

  uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
  if (uhc_dev_enum->conf_desc == NULL) {
    Assert(false);
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016236:	cd 9b       	rjmp	800161e8 <uhc_enumeration_step12+0x28>
80016238:	30 6c       	mov	r12,6
8001623a:	cc 3e       	rcall	80015fc0 <uhc_enumeration_error>
    return;
8001623c:	cd 7b       	rjmp	800161ea <uhc_enumeration_step12+0x2a>
8001623e:	d7 03       	nop

80016240 <uhc_enumeration_step13>:
80016240:	eb cd 40 e0 	pushm	r5-r7,lr
80016244:	20 2d       	sub	sp,8
80016246:	30 99       	mov	r9,9
80016248:	58 0b       	cp.w	r11,0
8001624a:	5f 18       	srne	r8
8001624c:	f2 0a 19 00 	cp.h	r10,r9
80016250:	5f 19       	srne	r9
80016252:	f3 e8 10 08 	or	r8,r9,r8
  uint8_t conf_num, conf_size;
  uint16_t bus_power = 0;
  usb_setup_req_t req;
  UNUSED(add);

  if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80016256:	c0 e1       	brne	80016272 <uhc_enumeration_step13+0x32>
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
80016258:	e0 67 07 28 	mov	r7,1832
8001625c:	30 29       	mov	r9,2
  uint8_t conf_num, conf_size;
  uint16_t bus_power = 0;
  usb_setup_req_t req;
  UNUSED(add);

  if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
8001625e:	6e 68       	ld.w	r8,r7[0x18]
80016260:	11 9a       	ld.ub	r10,r8[0x1]
80016262:	f2 0a 18 00 	cp.b	r10,r9
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
    uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80016266:	c0 a0       	breq	8001627a <uhc_enumeration_step13+0x3a>
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			 &req,
			 (uint8_t *) uhc_dev_enum->conf_desc,
			 conf_size,
			 NULL, uhc_enumeration_step14)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016268:	30 3c       	mov	r12,3
8001626a:	ca be       	rcall	80015fc0 <uhc_enumeration_error>
    return;
  }
}
8001626c:	2f ed       	sub	sp,-8
8001626e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  usb_setup_req_t req;
  UNUSED(add);

  if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
    uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80016272:	58 1b       	cp.w	r11,1
80016274:	cf a1       	brne	80016268 <uhc_enumeration_step13+0x28>
80016276:	30 7c       	mov	r12,7
80016278:	cf 9b       	rjmp	8001626a <uhc_enumeration_step13+0x2a>
    }
    // Go to USB HUB parent
    dev = dev->hub;
  }
#else
  if (!(uhc_dev_enum->conf_desc->bmAttributes
8001627a:	11 f9       	ld.ub	r9,r8[0x7]
8001627c:	ed b9 00 06 	bld	r9,0x6
80016280:	c1 10       	breq	800162a2 <uhc_enumeration_step13+0x62>
	&USB_CONFIG_ATTR_SELF_POWERED)) {
    bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
80016282:	f1 3a 00 08 	ld.ub	r10,r8[8]
80016286:	e0 69 01 f4 	mov	r9,500
8001628a:	a1 7a       	lsl	r10,0x1
8001628c:	f2 0a 19 00 	cp.h	r10,r9
80016290:	e0 88 00 09 	brls	800162a2 <uhc_enumeration_step13+0x62>
  }
#endif
  if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
    // USB interfaces consumption too high
    UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_OVERCURRENT);
80016294:	0e 9c       	mov	r12,r7
80016296:	30 2b       	mov	r11,2
80016298:	e0 a0 22 48 	rcall	8001a728 <usb_enum>
    uhi_hub_suspend(uhc_dev_enum);
  } else
#endif
    {
      // Suspend USB line
      uhd_suspend();
8001629c:	fe b0 f0 5c 	rcall	80014354 <uhd_suspend>
800162a0:	ce 6b       	rjmp	8001626c <uhc_enumeration_step13+0x2c>
  uhc_dev_enum->power = bus_power;
  uhc_power_running += bus_power;
#endif

  // Save information about USB configuration descriptor size
  conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
800162a2:	11 a6       	ld.ub	r6,r8[0x2]
  conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
800162a4:	6e 68       	ld.w	r8,r7[0x18]
  Assert(conf_num);
  // Re alloc USB configuration descriptor
  free(uhc_dev_enum->conf_desc);
800162a6:	10 9c       	mov	r12,r8
  uhc_power_running += bus_power;
#endif

  // Save information about USB configuration descriptor size
  conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
  conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
800162a8:	11 d5       	ld.ub	r5,r8[0x5]
  Assert(conf_num);
  // Re alloc USB configuration descriptor
  free(uhc_dev_enum->conf_desc);
800162aa:	e0 a0 66 89 	rcall	80022fbc <free>
  uhc_dev_enum->conf_desc = malloc(conf_size);
800162ae:	0c 9c       	mov	r12,r6
800162b0:	e0 a0 66 8e 	rcall	80022fcc <malloc>
800162b4:	8f 6c       	st.w	r7[0x18],r12
  if (uhc_dev_enum->conf_desc == NULL) {
800162b6:	c1 b0       	breq	800162ec <uhc_enumeration_step13+0xac>
    Assert(false);
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
    return;
  }
  // Send USB device descriptor request
  req.bmRequestType =
800162b8:	38 08       	mov	r8,-128
800162ba:	ba 88       	st.b	sp[0x0],r8
    USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
    USB_REQ_DIR_IN;
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
800162bc:	30 68       	mov	r8,6
800162be:	ba 98       	st.b	sp[0x1],r8
  req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
  req.wIndex = 0;
800162c0:	30 08       	mov	r8,0
800162c2:	ba 28       	st.h	sp[0x4],r8
  req.wLength = conf_size;
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162c4:	fe c8 ff d0 	sub	r8,pc,-48
800162c8:	ba 36       	st.h	sp[0x6],r6
  // Send USB device descriptor request
  req.bmRequestType =
    USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
    USB_REQ_DIR_IN;
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
  req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800162ca:	18 9a       	mov	r10,r12
  req.wIndex = 0;
  req.wLength = conf_size;
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162cc:	20 15       	sub	r5,1
  // Send USB device descriptor request
  req.bmRequestType =
    USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
    USB_REQ_DIR_IN;
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
  req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800162ce:	0c 99       	mov	r9,r6
  req.wIndex = 0;
  req.wLength = conf_size;
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162d0:	a9 b5       	sbr	r5,0x9
  // Send USB device descriptor request
  req.bmRequestType =
    USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
    USB_REQ_DIR_IN;
  req.bRequest = USB_REQ_GET_DESCRIPTOR;
  req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800162d2:	30 1c       	mov	r12,1
  req.wIndex = 0;
  req.wLength = conf_size;
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162d4:	ba 15       	st.h	sp[0x2],r5
800162d6:	1a d8       	st.w	--sp,r8
800162d8:	30 08       	mov	r8,0
800162da:	fa cb ff fc 	sub	r11,sp,-4
800162de:	fe b0 f3 8b 	rcall	800149f4 <uhd_setup_request>
800162e2:	2f fd       	sub	sp,-4
800162e4:	58 0c       	cp.w	r12,0
			 &req,
			 (uint8_t *) uhc_dev_enum->conf_desc,
			 conf_size,
			 NULL, uhc_enumeration_step14)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800162e6:	cc 31       	brne	8001626c <uhc_enumeration_step13+0x2c>
800162e8:	30 6c       	mov	r12,6
  // Re alloc USB configuration descriptor
  free(uhc_dev_enum->conf_desc);
  uhc_dev_enum->conf_desc = malloc(conf_size);
  if (uhc_dev_enum->conf_desc == NULL) {
    Assert(false);
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800162ea:	cc 0b       	rjmp	8001626a <uhc_enumeration_step13+0x2a>
800162ec:	30 6c       	mov	r12,6
800162ee:	c6 9e       	rcall	80015fc0 <uhc_enumeration_error>
    return;
800162f0:	cb eb       	rjmp	8001626c <uhc_enumeration_step13+0x2c>
800162f2:	d7 03       	nop

800162f4 <uhc_enumeration_step14>:
800162f4:	eb cd 40 e0 	pushm	r5-r7,lr
800162f8:	20 2d       	sub	sp,8
800162fa:	fe fc 02 5a 	ld.w	r12,pc[602]
800162fe:	16 97       	mov	r7,r11
80016300:	14 95       	mov	r5,r10
80016302:	fe b0 e6 4d 	rcall	80012f9c <print_dbg>
80016306:	fe fc 02 52 	ld.w	r12,pc[594]
8001630a:	fe b0 e6 49 	rcall	80012f9c <print_dbg>
8001630e:	e0 66 07 28 	mov	r6,1832
80016312:	ed 3c 00 12 	ld.ub	r12,r6[18]
  ///// TESTING
#if UHC_PRINT_DBG
  print_dbg("\r\n received device descriptor. ");

  print_dbg("\r\n address: ");
  print_dbg_hex(uhc_dev_enum -> address);
80016316:	fe b0 e6 6b 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n speed: ");
8001631a:	fe fc 02 42 	ld.w	r12,pc[578]
8001631e:	fe b0 e6 3f 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum -> speed);
80016322:	6c 5c       	ld.w	r12,r6[0x14]
80016324:	fe b0 e6 64 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n\r\n");
80016328:	fe fc 02 38 	ld.w	r12,pc[568]
8001632c:	fe b0 e6 38 	rcall	80012f9c <print_dbg>

  print_dbg("\r\n dev desc -> bLength : ");
80016330:	fe fc 02 34 	ld.w	r12,pc[564]
80016334:	fe b0 e6 34 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bLength);
80016338:	0d 8c       	ld.ub	r12,r6[0x0]
8001633a:	fe b0 e6 59 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bDescriptorType : ");
8001633e:	fe fc 02 2a 	ld.w	r12,pc[554]
80016342:	fe b0 e6 2d 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bDescriptorType);
80016346:	0d 9c       	ld.ub	r12,r6[0x1]
80016348:	fe b0 e6 52 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bcdUSB : ");
8001634c:	fe fc 02 20 	ld.w	r12,pc[544]
80016350:	fe b0 e6 26 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bcdUSB);
80016354:	8c 9c       	ld.uh	r12,r6[0x2]
80016356:	fe b0 e6 4b 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bDeviceClass : ");
8001635a:	fe fc 02 16 	ld.w	r12,pc[534]
8001635e:	fe b0 e6 1f 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bDeviceClass);
80016362:	0d cc       	ld.ub	r12,r6[0x4]
80016364:	fe b0 e6 44 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bDeviceSubClass : ");
80016368:	fe fc 02 0c 	ld.w	r12,pc[524]
8001636c:	fe b0 e6 18 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bDeviceSubClass);
80016370:	0d dc       	ld.ub	r12,r6[0x5]
80016372:	fe b0 e6 3d 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bDeviceProtocol : ");
80016376:	fe fc 02 02 	ld.w	r12,pc[514]
8001637a:	fe b0 e6 11 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bDeviceProtocol);
8001637e:	0d ec       	ld.ub	r12,r6[0x6]
80016380:	fe b0 e6 36 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bMaxPacketSize0 : ");
80016384:	4f ec       	lddpc	r12,8001657c <uhc_enumeration_step14+0x288>
80016386:	fe b0 e6 0b 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bMaxPacketSize0);
8001638a:	0d fc       	ld.ub	r12,r6[0x7]
8001638c:	fe b0 e6 30 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> idVendor : ");
80016390:	4f cc       	lddpc	r12,80016580 <uhc_enumeration_step14+0x28c>
80016392:	fe b0 e6 05 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.idVendor);
80016396:	8c cc       	ld.uh	r12,r6[0x8]
80016398:	fe b0 e6 2a 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> idProduct : ");
8001639c:	4f ac       	lddpc	r12,80016584 <uhc_enumeration_step14+0x290>
8001639e:	fe b0 e5 ff 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.idProduct);
800163a2:	8c dc       	ld.uh	r12,r6[0xa]
800163a4:	fe b0 e6 24 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bcdDevice : ");
800163a8:	4f 8c       	lddpc	r12,80016588 <uhc_enumeration_step14+0x294>
800163aa:	fe b0 e5 f9 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bcdDevice);
800163ae:	8c ec       	ld.uh	r12,r6[0xc]
800163b0:	fe b0 e6 1e 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> iManufacturer : ");
800163b4:	4f 6c       	lddpc	r12,8001658c <uhc_enumeration_step14+0x298>
800163b6:	fe b0 e5 f3 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.iManufacturer);
800163ba:	ed 3c 00 0e 	ld.ub	r12,r6[14]
800163be:	fe b0 e6 17 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> iProduct : ");
800163c2:	4f 4c       	lddpc	r12,80016590 <uhc_enumeration_step14+0x29c>
800163c4:	fe b0 e5 ec 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.iProduct);
800163c8:	ed 3c 00 0f 	ld.ub	r12,r6[15]
800163cc:	fe b0 e6 10 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> iSerialNumber : ");
800163d0:	4f 1c       	lddpc	r12,80016594 <uhc_enumeration_step14+0x2a0>
800163d2:	fe b0 e5 e5 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.iSerialNumber);
800163d6:	ed 3c 00 10 	ld.ub	r12,r6[16]
800163da:	fe b0 e6 09 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n dev desc -> bNumConfigurations : ");
800163de:	4e fc       	lddpc	r12,80016598 <uhc_enumeration_step14+0x2a4>
800163e0:	fe b0 e5 de 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->dev_desc.bNumConfigurations);
800163e4:	ed 3c 00 11 	ld.ub	r12,r6[17]
800163e8:	fe b0 e6 02 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n\r\n");
800163ec:	4d dc       	lddpc	r12,80016560 <uhc_enumeration_step14+0x26c>
800163ee:	fe b0 e5 d7 	rcall	80012f9c <print_dbg>
	
  print_dbg("\r\n conf desc -> bLength : ");
800163f2:	4e bc       	lddpc	r12,8001659c <uhc_enumeration_step14+0x2a8>
800163f4:	fe b0 e5 d4 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->bLength);
800163f8:	6c 68       	ld.w	r8,r6[0x18]
800163fa:	11 8c       	ld.ub	r12,r8[0x0]
800163fc:	fe b0 e5 f8 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> bDescriptorType : ");
80016400:	4e 8c       	lddpc	r12,800165a0 <uhc_enumeration_step14+0x2ac>
80016402:	fe b0 e5 cd 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->bDescriptorType);
80016406:	6c 68       	ld.w	r8,r6[0x18]
80016408:	11 9c       	ld.ub	r12,r8[0x1]
8001640a:	fe b0 e5 f1 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> wTotalLength : ");
8001640e:	4e 6c       	lddpc	r12,800165a4 <uhc_enumeration_step14+0x2b0>
80016410:	fe b0 e5 c6 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->wTotalLength);
80016414:	6c 68       	ld.w	r8,r6[0x18]
80016416:	11 b9       	ld.ub	r9,r8[0x3]
80016418:	11 ac       	ld.ub	r12,r8[0x2]
8001641a:	f3 ec 10 8c 	or	r12,r9,r12<<0x8
8001641e:	fe b0 e5 e7 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> bNumInterfaces : ");
80016422:	4e 2c       	lddpc	r12,800165a8 <uhc_enumeration_step14+0x2b4>
80016424:	fe b0 e5 bc 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->bNumInterfaces);
80016428:	6c 68       	ld.w	r8,r6[0x18]
8001642a:	11 cc       	ld.ub	r12,r8[0x4]
8001642c:	fe b0 e5 e0 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> bConfigurationValue : ");
80016430:	4d fc       	lddpc	r12,800165ac <uhc_enumeration_step14+0x2b8>
80016432:	fe b0 e5 b5 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->bConfigurationValue);
80016436:	6c 68       	ld.w	r8,r6[0x18]
80016438:	11 dc       	ld.ub	r12,r8[0x5]
8001643a:	fe b0 e5 d9 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> iConfiguration : ");
8001643e:	4d dc       	lddpc	r12,800165b0 <uhc_enumeration_step14+0x2bc>
80016440:	fe b0 e5 ae 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->iConfiguration);
80016444:	6c 68       	ld.w	r8,r6[0x18]
80016446:	11 ec       	ld.ub	r12,r8[0x6]
80016448:	fe b0 e5 d2 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> bmAttributes : ");
8001644c:	4d ac       	lddpc	r12,800165b4 <uhc_enumeration_step14+0x2c0>
8001644e:	fe b0 e5 a7 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->bmAttributes);
80016452:	6c 68       	ld.w	r8,r6[0x18]
80016454:	11 fc       	ld.ub	r12,r8[0x7]
80016456:	fe b0 e5 cb 	rcall	80012fec <print_dbg_hex>
  print_dbg("\r\n conf desc -> bMaxPower : ");
8001645a:	4d 8c       	lddpc	r12,800165b8 <uhc_enumeration_step14+0x2c4>
8001645c:	fe b0 e5 a0 	rcall	80012f9c <print_dbg>
  print_dbg_hex(uhc_dev_enum->conf_desc->bMaxPower);
80016460:	6c 68       	ld.w	r8,r6[0x18]
80016462:	f1 3c 00 08 	ld.ub	r12,r8[8]
80016466:	fe b0 e5 c3 	rcall	80012fec <print_dbg_hex>
#endif
  /////////////////////////////////
  /////////////////////////////////

  if ((status != UHD_TRANS_NOERROR)
8001646a:	58 07       	cp.w	r7,0
8001646c:	5f 18       	srne	r8
8001646e:	30 89       	mov	r9,8
80016470:	f2 05 19 00 	cp.h	r5,r9
80016474:	5f 89       	srls	r9
80016476:	f3 e8 10 08 	or	r8,r9,r8
8001647a:	c0 d1       	brne	80016494 <uhc_enumeration_step14+0x1a0>
      || (payload_trans < sizeof(usb_conf_desc_t))
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
8001647c:	6c 68       	ld.w	r8,r6[0x18]
  print_dbg_hex(uhc_dev_enum->conf_desc->bMaxPower);
#endif
  /////////////////////////////////
  /////////////////////////////////

  if ((status != UHD_TRANS_NOERROR)
8001647e:	30 29       	mov	r9,2
80016480:	11 9a       	ld.ub	r10,r8[0x1]
80016482:	f2 0a 18 00 	cp.b	r10,r9
80016486:	c0 b0       	breq	8001649c <uhc_enumeration_step14+0x1a8>
      || (payload_trans < sizeof(usb_conf_desc_t))
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
      || (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
    uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80016488:	30 3c       	mov	r12,3
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			 &req,
			 NULL,
			 0,
			 NULL, uhc_enumeration_step15)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8001648a:	fe b0 fd 9b 	rcall	80015fc0 <uhc_enumeration_error>
    return;
  }
}
8001648e:	2f ed       	sub	sp,-8
80016490:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

  if ((status != UHD_TRANS_NOERROR)
      || (payload_trans < sizeof(usb_conf_desc_t))
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
      || (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
    uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80016494:	58 17       	cp.w	r7,1
80016496:	cf 91       	brne	80016488 <uhc_enumeration_step14+0x194>
80016498:	30 7c       	mov	r12,7
8001649a:	cf 8b       	rjmp	8001648a <uhc_enumeration_step14+0x196>
  /////////////////////////////////

  if ((status != UHD_TRANS_NOERROR)
      || (payload_trans < sizeof(usb_conf_desc_t))
      || (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
      || (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
8001649c:	11 b9       	ld.ub	r9,r8[0x3]
8001649e:	11 a8       	ld.ub	r8,r8[0x2]
800164a0:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800164a4:	5c c8       	swap.bh	r8
  print_dbg_hex(uhc_dev_enum->conf_desc->bMaxPower);
#endif
  /////////////////////////////////
  /////////////////////////////////

  if ((status != UHD_TRANS_NOERROR)
800164a6:	ea 08 19 00 	cp.h	r8,r5
800164aa:	ce f1       	brne	80016488 <uhc_enumeration_step14+0x194>
			  UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
    return;
  }
  // Check if unless one USB interface is supported by UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    switch (uhc_uhis[i].install(uhc_dev_enum)) {
800164ac:	4c 47       	lddpc	r7,800165bc <uhc_enumeration_step14+0x2c8>
800164ae:	0c 9c       	mov	r12,r6
800164b0:	6e 08       	ld.w	r8,r7[0x0]
800164b2:	5d 18       	icall	r8
800164b4:	c2 21       	brne	800164f8 <uhc_enumeration_step14+0x204>
800164b6:	30 15       	mov	r5,1
800164b8:	6e 48       	ld.w	r8,r7[0x10]
800164ba:	e0 6c 07 28 	mov	r12,1832
800164be:	5d 18       	icall	r8
800164c0:	c2 01       	brne	80016500 <uhc_enumeration_step14+0x20c>
800164c2:	30 15       	mov	r5,1
800164c4:	6e 88       	ld.w	r8,r7[0x20]
800164c6:	e0 6c 07 28 	mov	r12,1832
800164ca:	5d 18       	icall	r8
800164cc:	c3 71       	brne	8001653a <uhc_enumeration_step14+0x246>
800164ce:	30 15       	mov	r5,1
800164d0:	6e c8       	ld.w	r8,r7[0x30]
800164d2:	e0 6c 07 28 	mov	r12,1832
800164d6:	5d 18       	icall	r8
    case UHC_ENUM_UNSUPPORTED:
      break;
    default:
      // USB host hardware limitation
      // Free all endpoints
      uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
800164d8:	c1 70       	breq	80016506 <uhc_enumeration_step14+0x212>
800164da:	58 1c       	cp.w	r12,1
800164dc:	c3 20       	breq	80016540 <uhc_enumeration_step14+0x24c>
800164de:	e0 6b 00 ff 	mov	r11,255
      UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
800164e2:	30 1c       	mov	r12,1
800164e4:	fe b0 f3 84 	rcall	80014bec <uhd_ep_free>
800164e8:	30 4b       	mov	r11,4
    uhi_hub_suspend(uhc_dev_enum);
  } else
#endif
    {
      // Suspend USB line
      uhd_suspend();
800164ea:	e0 6c 07 28 	mov	r12,1832
800164ee:	e0 a0 21 1d 	rcall	8001a728 <usb_enum>
			  UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
    return;
  }
  // Check if unless one USB interface is supported by UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    switch (uhc_uhis[i].install(uhc_dev_enum)) {
800164f2:	fe b0 ef 31 	rcall	80014354 <uhd_suspend>
800164f6:	cc cb       	rjmp	8001648e <uhc_enumeration_step14+0x19a>
800164f8:	58 1c       	cp.w	r12,1
800164fa:	cf 21       	brne	800164de <uhc_enumeration_step14+0x1ea>
800164fc:	30 05       	mov	r5,0
  // Enable device configuration
  req.bmRequestType = USB_REQ_RECIP_DEVICE
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_CONFIGURATION;
  req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
  req.wIndex = 0;
800164fe:	cd db       	rjmp	800164b8 <uhc_enumeration_step14+0x1c4>
    // Abort enumeration, set line in suspend mode
    uhc_enumeration_suspend();
    return;
  }
  // Enable device configuration
  req.bmRequestType = USB_REQ_RECIP_DEVICE
80016500:	58 1c       	cp.w	r12,1
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_CONFIGURATION;
  req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80016502:	ce e1       	brne	800164de <uhc_enumeration_step14+0x1ea>
    // Abort enumeration, set line in suspend mode
    uhc_enumeration_suspend();
    return;
  }
  // Enable device configuration
  req.bmRequestType = USB_REQ_RECIP_DEVICE
80016504:	ce 0b       	rjmp	800164c4 <uhc_enumeration_step14+0x1d0>
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_CONFIGURATION;
80016506:	30 09       	mov	r9,0
80016508:	30 0b       	mov	r11,0
  req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
8001650a:	6c 6a       	ld.w	r10,r6[0x18]
  req.wIndex = 0;
  req.wLength = 0;
8001650c:	ba 8b       	st.b	sp[0x0],r11
  // Enable device configuration
  req.bmRequestType = USB_REQ_RECIP_DEVICE
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_CONFIGURATION;
  req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
  req.wIndex = 0;
8001650e:	30 9b       	mov	r11,9
  req.wLength = 0;
  //  print_dbg("\r\n device enumeration successful; calling uhd_setup_request in uhc.c");
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80016510:	ba 9b       	st.b	sp[0x1],r11
  }
  // Enable device configuration
  req.bmRequestType = USB_REQ_RECIP_DEVICE
    | USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
  req.bRequest = USB_REQ_SET_CONFIGURATION;
  req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80016512:	15 da       	ld.ub	r10,r10[0x5]
  req.wIndex = 0;
  req.wLength = 0;
  //  print_dbg("\r\n device enumeration successful; calling uhd_setup_request in uhc.c");
  if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80016514:	ba 39       	st.h	sp[0x6],r9
80016516:	ba 29       	st.h	sp[0x4],r9
80016518:	fe c9 ff 58 	sub	r9,pc,-168
8001651c:	ba 1a       	st.h	sp[0x2],r10
8001651e:	30 08       	mov	r8,0
80016520:	1a d9       	st.w	--sp,r9
80016522:	10 9a       	mov	r10,r8
80016524:	fa cb ff fc 	sub	r11,sp,-4
80016528:	10 99       	mov	r9,r8
8001652a:	30 1c       	mov	r12,1
			 &req,
			 NULL,
			 0,
			 NULL, uhc_enumeration_step15)) {
    uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8001652c:	fe b0 f2 64 	rcall	800149f4 <uhd_setup_request>
			  UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
    return;
  }
  // Check if unless one USB interface is supported by UHIs
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
    switch (uhc_uhis[i].install(uhc_dev_enum)) {
80016530:	2f fd       	sub	sp,-4
80016532:	58 0c       	cp.w	r12,0
80016534:	ca d1       	brne	8001648e <uhc_enumeration_step14+0x19a>
      // Abort enumeration, set line in suspend mode
      uhc_enumeration_suspend();
      return;
    }
  }
  if (!b_conf_supported) {
80016536:	30 6c       	mov	r12,6
80016538:	ca 9b       	rjmp	8001648a <uhc_enumeration_step14+0x196>
    // No USB interface supported
    UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
8001653a:	58 1c       	cp.w	r12,1
8001653c:	cd 11       	brne	800164de <uhc_enumeration_step14+0x1ea>
8001653e:	cc 9b       	rjmp	800164d0 <uhc_enumeration_step14+0x1dc>
80016540:	58 05       	cp.w	r5,0
    uhi_hub_suspend(uhc_dev_enum);
  } else
#endif
    {
      // Suspend USB line
      uhd_suspend();
80016542:	ce 21       	brne	80016506 <uhc_enumeration_step14+0x212>
80016544:	18 9b       	mov	r11,r12
80016546:	e0 6c 07 28 	mov	r12,1832
8001654a:	e0 a0 20 ef 	rcall	8001a728 <usb_enum>
8001654e:	fe b0 ef 03 	rcall	80014354 <uhd_suspend>
80016552:	c9 eb       	rjmp	8001648e <uhc_enumeration_step14+0x19a>
80016554:	80 02       	ld.sh	r2,r0[0x0]
80016556:	3e 64       	mov	r4,-26
80016558:	80 02       	ld.sh	r2,r0[0x0]
8001655a:	3e 84       	mov	r4,-24
8001655c:	80 02       	ld.sh	r2,r0[0x0]
8001655e:	3e 94       	mov	r4,-23
80016560:	80 02       	ld.sh	r2,r0[0x0]
80016562:	3e a0       	mov	r0,-22
80016564:	80 02       	ld.sh	r2,r0[0x0]
80016566:	3e a8       	mov	r8,-22
80016568:	80 02       	ld.sh	r2,r0[0x0]
8001656a:	3e c4       	mov	r4,-20
8001656c:	80 02       	ld.sh	r2,r0[0x0]
8001656e:	3e e8       	mov	r8,-18
80016570:	80 02       	ld.sh	r2,r0[0x0]
80016572:	3f 04       	mov	r4,-16
80016574:	80 02       	ld.sh	r2,r0[0x0]
80016576:	3f 24       	mov	r4,-14
80016578:	80 02       	ld.sh	r2,r0[0x0]
8001657a:	3f 48       	mov	r8,-12
8001657c:	80 02       	ld.sh	r2,r0[0x0]
8001657e:	3f 6c       	mov	r12,-10
80016580:	80 02       	ld.sh	r2,r0[0x0]
80016582:	3f 90       	mov	r0,-7
80016584:	80 02       	ld.sh	r2,r0[0x0]
80016586:	3f ac       	mov	r12,-6
80016588:	80 02       	ld.sh	r2,r0[0x0]
8001658a:	3f c8       	mov	r8,-4
8001658c:	80 02       	ld.sh	r2,r0[0x0]
8001658e:	3f e4       	mov	r4,-2
80016590:	80 02       	ld.sh	r2,r0[0x0]
80016592:	40 04       	lddsp	r4,sp[0x0]
80016594:	80 02       	ld.sh	r2,r0[0x0]
80016596:	40 20       	lddsp	r0,sp[0x8]
80016598:	80 02       	ld.sh	r2,r0[0x0]
8001659a:	40 40       	lddsp	r0,sp[0x10]
8001659c:	80 02       	ld.sh	r2,r0[0x0]
8001659e:	40 68       	lddsp	r8,sp[0x18]
800165a0:	80 02       	ld.sh	r2,r0[0x0]
800165a2:	40 84       	lddsp	r4,sp[0x20]
800165a4:	80 02       	ld.sh	r2,r0[0x0]
800165a6:	40 a8       	lddsp	r8,sp[0x28]
800165a8:	80 02       	ld.sh	r2,r0[0x0]
800165aa:	40 c8       	lddsp	r8,sp[0x30]
800165ac:	80 02       	ld.sh	r2,r0[0x0]
800165ae:	40 ec       	lddsp	r12,sp[0x38]
800165b0:	80 02       	ld.sh	r2,r0[0x0]
800165b2:	41 14       	lddsp	r4,sp[0x44]
800165b4:	80 02       	ld.sh	r2,r0[0x0]
800165b6:	41 38       	lddsp	r8,sp[0x4c]
800165b8:	80 02       	ld.sh	r2,r0[0x0]
800165ba:	41 58       	lddsp	r8,sp[0x54]
800165bc:	80 02       	ld.sh	r2,r0[0x0]
800165be:	41 90       	lddsp	r0,sp[0x64]

800165c0 <uhc_enumeration_step15>:
800165c0:	eb cd 40 c0 	pushm	r6-r7,lr
800165c4:	20 1d       	sub	sp,4
800165c6:	30 08       	mov	r8,0
800165c8:	58 0b       	cp.w	r11,0
800165ca:	5f 19       	srne	r9
800165cc:	f0 0a 19 00 	cp.h	r10,r8
800165d0:	5f 17       	srne	r7
800165d2:	12 47       	or	r7,r9
800165d4:	f0 07 18 00 	cp.b	r7,r8
				   usb_add_t add,
				   uhd_trans_status_t status,
				   uint16_t payload_trans)
{
  UNUSED(add);
  if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
800165d8:	c1 e0       	breq	80016614 <uhc_enumeration_step15+0x54>
    for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
      uhc_uhis[i].uninstall(uhc_dev_enum);
800165da:	4a 97       	lddpc	r7,8001667c <uhc_enumeration_step15+0xbc>
800165dc:	50 0b       	stdsp	sp[0x0],r11
800165de:	6e 28       	ld.w	r8,r7[0x8]
800165e0:	e0 6c 07 28 	mov	r12,1832
800165e4:	5d 18       	icall	r8
800165e6:	6e 68       	ld.w	r8,r7[0x18]
800165e8:	e0 6c 07 28 	mov	r12,1832
800165ec:	5d 18       	icall	r8
800165ee:	6e a8       	ld.w	r8,r7[0x28]
800165f0:	e0 6c 07 28 	mov	r12,1832
800165f4:	5d 18       	icall	r8
    }
    uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
800165f6:	6e e8       	ld.w	r8,r7[0x38]
800165f8:	e0 6c 07 28 	mov	r12,1832
800165fc:	5d 18       	icall	r8
800165fe:	40 0b       	lddsp	r11,sp[0x0]
80016600:	58 1b       	cp.w	r11,1
80016602:	f9 bc 00 07 	moveq	r12,7
    uhc_uhis[i].enable(uhc_dev_enum);
  }
  uhc_enum_try = 0;
	
  UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
}
80016606:	f9 bc 01 03 	movne	r12,3
8001660a:	fe b0 fc db 	rcall	80015fc0 <uhc_enumeration_error>
  }

  // Enable all UHIs supported
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
#if UHC_PRINT_DBG
    print_dbg("\r\n enabling UHI, idx: "); print_dbg_ulong(i); 
8001660e:	2f fd       	sub	sp,-4
80016610:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016614:	49 bc       	lddpc	r12,80016680 <uhc_enumeration_step15+0xc0>
80016616:	fe b0 e4 c3 	rcall	80012f9c <print_dbg>
#endif
    uhc_uhis[i].enable(uhc_dev_enum);
8001661a:	30 0c       	mov	r12,0
8001661c:	fe b0 e4 c6 	rcall	80012fa8 <print_dbg_ulong>
  }

  // Enable all UHIs supported
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
#if UHC_PRINT_DBG
    print_dbg("\r\n enabling UHI, idx: "); print_dbg_ulong(i); 
80016620:	49 76       	lddpc	r6,8001667c <uhc_enumeration_step15+0xbc>
80016622:	e0 6c 07 28 	mov	r12,1832
80016626:	6c 18       	ld.w	r8,r6[0x4]
80016628:	5d 18       	icall	r8
8001662a:	49 6c       	lddpc	r12,80016680 <uhc_enumeration_step15+0xc0>
#endif
    uhc_uhis[i].enable(uhc_dev_enum);
8001662c:	fe b0 e4 b8 	rcall	80012f9c <print_dbg>
80016630:	30 1c       	mov	r12,1
  }

  // Enable all UHIs supported
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
#if UHC_PRINT_DBG
    print_dbg("\r\n enabling UHI, idx: "); print_dbg_ulong(i); 
80016632:	fe b0 e4 bb 	rcall	80012fa8 <print_dbg_ulong>
80016636:	6c 58       	ld.w	r8,r6[0x14]
80016638:	e0 6c 07 28 	mov	r12,1832
8001663c:	5d 18       	icall	r8
#endif
    uhc_uhis[i].enable(uhc_dev_enum);
8001663e:	49 1c       	lddpc	r12,80016680 <uhc_enumeration_step15+0xc0>
80016640:	fe b0 e4 ae 	rcall	80012f9c <print_dbg>
  }

  // Enable all UHIs supported
  for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
#if UHC_PRINT_DBG
    print_dbg("\r\n enabling UHI, idx: "); print_dbg_ulong(i); 
80016644:	30 2c       	mov	r12,2
80016646:	fe b0 e4 b1 	rcall	80012fa8 <print_dbg_ulong>
8001664a:	6c 98       	ld.w	r8,r6[0x24]
8001664c:	e0 6c 07 28 	mov	r12,1832
#endif
    uhc_uhis[i].enable(uhc_dev_enum);
80016650:	5d 18       	icall	r8
80016652:	48 cc       	lddpc	r12,80016680 <uhc_enumeration_step15+0xc0>
80016654:	fe b0 e4 a4 	rcall	80012f9c <print_dbg>
  }
  uhc_enum_try = 0;
	
  UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80016658:	30 3c       	mov	r12,3
#if UHC_PRINT_DBG
    print_dbg("\r\n enabling UHI, idx: "); print_dbg_ulong(i); 
#endif
    uhc_uhis[i].enable(uhc_dev_enum);
  }
  uhc_enum_try = 0;
8001665a:	fe b0 e4 a7 	rcall	80012fa8 <print_dbg_ulong>
	
  UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
8001665e:	6c d8       	ld.w	r8,r6[0x34]
80016660:	e0 6c 07 28 	mov	r12,1832
}
80016664:	5d 18       	icall	r8
80016666:	e0 68 07 44 	mov	r8,1860
8001666a:	30 0b       	mov	r11,0
8001666c:	b0 87       	st.b	r8[0x0],r7
8001666e:	e0 6c 07 28 	mov	r12,1832
80016672:	e0 a0 20 5b 	rcall	8001a728 <usb_enum>
80016676:	2f fd       	sub	sp,-4
80016678:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001667c:	80 02       	ld.sh	r2,r0[0x0]
8001667e:	41 90       	lddsp	r0,sp[0x64]
80016680:	80 02       	ld.sh	r2,r0[0x0]
80016682:	41 78       	lddsp	r8,sp[0x5c]

80016684 <uhc_notify_connection>:
80016684:	d4 21       	pushm	r4-r7,lr
80016686:	18 96       	mov	r6,r12
 * \name Callbacks used by USB Host Driver (UHD) to notify events
 * @{
 */
void uhc_notify_connection(bool b_plug)
{
  if (b_plug) {
80016688:	58 0c       	cp.w	r12,0
8001668a:	c2 91       	brne	800166dc <uhc_notify_connection+0x58>

#ifdef USB_HOST_HUB_SUPPORT
    uhc_power_running = 0;
#endif
  } else {
    if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
8001668c:	e0 67 07 28 	mov	r7,1832
80016690:	3f f5       	mov	r5,-1
80016692:	ef 3c 00 12 	ld.ub	r12,r7[18]
80016696:	ea 0c 18 00 	cp.b	r12,r5
    UHC_CONNECTION_EVENT(uhc_dev_enum, true);
    uhc_enumeration_step1();
  } else {
    if (uhc_dev_enum == dev) {
      // Eventually stop enumeration timeout on-going on this device
      uhc_sof_timeout = 0;
8001669a:	c3 40       	breq	80016702 <uhc_notify_connection+0x7e>
    }
    // Abort all transfers (endpoint control and other) and free pipe(s)
    uhd_ep_free(dev->address, 0xFF);
8001669c:	e0 68 2c ca 	mov	r8,11466
    UHC_CONNECTION_EVENT(uhc_dev_enum, true);
    uhc_enumeration_step1();
  } else {
    if (uhc_dev_enum == dev) {
      // Eventually stop enumeration timeout on-going on this device
      uhc_sof_timeout = 0;
800166a0:	e0 6b 00 ff 	mov	r11,255
    }
    // Abort all transfers (endpoint control and other) and free pipe(s)
    uhd_ep_free(dev->address, 0xFF);
800166a4:	b0 86       	st.b	r8[0x0],r6

    // Disable all USB interfaces (this includes HUB interface)
    for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
      uhc_uhis[i].uninstall(dev);
800166a6:	fe b0 f2 a3 	rcall	80014bec <uhd_ep_free>
800166aa:	49 74       	lddpc	r4,80016704 <uhc_notify_connection+0x80>
800166ac:	0e 9c       	mov	r12,r7
800166ae:	68 28       	ld.w	r8,r4[0x8]
800166b0:	5d 18       	icall	r8
800166b2:	0e 9c       	mov	r12,r7
800166b4:	68 68       	ld.w	r8,r4[0x18]
800166b6:	5d 18       	icall	r8
800166b8:	0e 9c       	mov	r12,r7
800166ba:	68 a8       	ld.w	r8,r4[0x28]
800166bc:	5d 18       	icall	r8
800166be:	68 e8       	ld.w	r8,r4[0x38]
    }

    UHC_CONNECTION_EVENT(dev, false);
800166c0:	0e 9c       	mov	r12,r7
800166c2:	5d 18       	icall	r8
800166c4:	0e 9c       	mov	r12,r7
800166c6:	0c 9b       	mov	r11,r6
    dev->address = UHC_USB_ADD_NOT_VALID;
800166c8:	e0 a0 20 2d 	rcall	8001a722 <usb_connection>
    // Free USB configuration descriptor buffer
    if (dev->conf_desc != NULL) {
800166cc:	ef 65 00 12 	st.b	r7[18],r5
800166d0:	6e 6c       	ld.w	r12,r7[0x18]
      free(dev->conf_desc);
800166d2:	58 0c       	cp.w	r12,0
800166d4:	c0 30       	breq	800166da <uhc_notify_connection+0x56>
800166d6:	e0 a0 64 73 	rcall	80022fbc <free>
  if (b_plug) {
    uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
    uhc_dev_enum = dev;
#endif
    uhc_dev_enum->conf_desc = NULL;
800166da:	d8 22       	popm	r4-r7,pc
    uhc_dev_enum->address = 0;
    UHC_CONNECTION_EVENT(uhc_dev_enum, true);
800166dc:	e0 68 07 28 	mov	r8,1832
    uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
    uhc_dev_enum = dev;
#endif
    uhc_dev_enum->conf_desc = NULL;
    uhc_dev_enum->address = 0;
800166e0:	30 09       	mov	r9,0
  if (b_plug) {
    uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
    uhc_dev_enum = dev;
#endif
    uhc_dev_enum->conf_desc = NULL;
800166e2:	10 9c       	mov	r12,r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
  if (b_plug) {
    uhc_enum_try = 1;
800166e4:	f1 69 00 12 	st.b	r8[18],r9
#ifdef USB_HOST_HUB_SUPPORT
    uhc_dev_enum = dev;
#endif
    uhc_dev_enum->conf_desc = NULL;
    uhc_dev_enum->address = 0;
    UHC_CONNECTION_EVENT(uhc_dev_enum, true);
800166e8:	91 69       	st.w	r8[0x18],r9
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
  if (b_plug) {
    uhc_enum_try = 1;
800166ea:	30 19       	mov	r9,1
#ifdef USB_HOST_HUB_SUPPORT
    uhc_dev_enum = dev;
#endif
    uhc_dev_enum->conf_desc = NULL;
    uhc_dev_enum->address = 0;
    UHC_CONNECTION_EVENT(uhc_dev_enum, true);
800166ec:	e0 68 07 44 	mov	r8,1860
    // Device connected on USB hub
    uhi_hub_send_reset(uhc_dev_enum, callback);
  } else
#endif
    {
      uhd_send_reset(callback);
800166f0:	30 1b       	mov	r11,1
800166f2:	b0 89       	st.b	r8[0x0],r9
800166f4:	e0 a0 20 17 	rcall	8001a722 <usb_connection>
800166f8:	fe cc 08 14 	sub	r12,pc,2068
800166fc:	fe b0 ee 22 	rcall	80014340 <uhd_send_reset>
80016700:	d8 22       	popm	r4-r7,pc
80016702:	d8 22       	popm	r4-r7,pc
80016704:	80 02       	ld.sh	r2,r0[0x0]
80016706:	41 90       	lddsp	r0,sp[0x64]

80016708 <uhc_notify_resume>:
80016708:	d4 01       	pushm	lr
8001670a:	20 2d       	sub	sp,8
8001670c:	e0 69 07 28 	mov	r9,1832
80016710:	72 68       	ld.w	r8,r9[0x18]
80016712:	11 f8       	ld.ub	r8,r8[0x7]
80016714:	ed b8 00 05 	bld	r8,0x5
80016718:	c1 61       	brne	80016744 <uhc_notify_resume+0x3c>
8001671a:	f3 3c 00 12 	ld.ub	r12,r9[18]
8001671e:	30 08       	mov	r8,0
      }
      req.bmRequestType = USB_REQ_RECIP_DEVICE
	|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
      req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
      req.wIndex = 0;
      req.wLength = 0;
80016720:	30 09       	mov	r9,0
	req.bRequest = USB_REQ_CLEAR_FEATURE;
      }
      req.bmRequestType = USB_REQ_RECIP_DEVICE
	|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
      req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
      req.wIndex = 0;
80016722:	ba 38       	st.h	sp[0x6],r8
      req.wLength = 0;
      uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80016724:	ba 28       	st.h	sp[0x4],r8
80016726:	1a d9       	st.w	--sp,r9
  while(1) {
    if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
      if (b_enable) {
	req.bRequest = USB_REQ_SET_FEATURE;
      } else {
	req.bRequest = USB_REQ_CLEAR_FEATURE;
80016728:	12 98       	mov	r8,r9
8001672a:	30 19       	mov	r9,1
      }
      req.bmRequestType = USB_REQ_RECIP_DEVICE
8001672c:	ba d9       	st.b	sp[0x5],r9
8001672e:	30 09       	mov	r9,0
	|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
      req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
80016730:	ba c9       	st.b	sp[0x4],r9
      req.wIndex = 0;
      req.wLength = 0;
      uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80016732:	30 19       	mov	r9,1
80016734:	fa cb ff fc 	sub	r11,sp,-4
80016738:	ba 39       	st.h	sp[0x6],r9
8001673a:	10 9a       	mov	r10,r8
8001673c:	10 99       	mov	r9,r8
8001673e:	fe b0 f1 5b 	rcall	800149f4 <uhd_setup_request>
}

void uhc_notify_resume(void)
{
  uhc_remotewakeup(false);
  UHC_WAKEUP_EVENT();
80016742:	2f fd       	sub	sp,-4
80016744:	e0 a0 1f f0 	rcall	8001a724 <usb_wakeup>
}
80016748:	2f ed       	sub	sp,-8
8001674a:	d8 02       	popm	pc

8001674c <init_adc>:

  //  cpu_irq_enable();
}

// setup ad7923
void init_adc(void) {
8001674c:	eb cd 40 80 	pushm	r7,lr
  u16 cmd;

  //  cpu_irq_disable();

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80016750:	30 1b       	mov	r11,1
80016752:	fe 7c 28 00 	mov	r12,-55296
80016756:	fe b0 e1 d3 	rcall	80012afc <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
8001675a:	e0 6b ff ff 	mov	r11,65535
8001675e:	fe 7c 28 00 	mov	r12,-55296
80016762:	fe b0 e2 62 	rcall	80012c26 <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80016766:	30 1b       	mov	r11,1
80016768:	fe 7c 28 00 	mov	r12,-55296
8001676c:	fe b0 e1 f0 	rcall	80012b4c <spi_unselectChip>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80016770:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80016774:	ee 78 42 40 	mov	r8,1000000
80016778:	30 09       	mov	r9,0
8001677a:	e0 6a a8 bf 	mov	r10,43199
8001677e:	ea 1a 13 ba 	orh	r10,0x13ba
80016782:	30 0b       	mov	r11,0
80016784:	e0 a0 62 cd 	rcall	80022d1e <__avr32_udiv64>
80016788:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001678c:	e1 b8 00 42 	mfsr	r8,0x108
80016790:	14 37       	cp.w	r7,r10
80016792:	e0 8b 00 1b 	brhi	800167c8 <init_adc+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80016796:	10 37       	cp.w	r7,r8
80016798:	e0 8b 00 04 	brhi	800167a0 <init_adc+0x54>
8001679c:	10 3a       	cp.w	r10,r8
8001679e:	c1 b2       	brcc	800167d4 <init_adc+0x88>
  // wait for powerup time (5us in datasheet)
  delay_us(5);
  
  // write base configuration
  cmd = AD7923_CMD_BASE << 4;
  spi_selectChip( ADC_SPI, ADC_SPI_NPCS );
800167a0:	30 1b       	mov	r11,1
800167a2:	fe 7c 28 00 	mov	r12,-55296
800167a6:	fe b0 e1 ab 	rcall	80012afc <spi_selectChip>
  spi_write( ADC_SPI, cmd );
800167aa:	e0 6b 83 10 	mov	r11,33552
800167ae:	fe 7c 28 00 	mov	r12,-55296
800167b2:	fe b0 e2 3a 	rcall	80012c26 <spi_write>
  spi_unselectChip( ADC_SPI, ADC_SPI_NPCS );
800167b6:	30 1b       	mov	r11,1
800167b8:	fe 7c 28 00 	mov	r12,-55296
800167bc:	fe b0 e1 c8 	rcall	80012b4c <spi_unselectChip>

  //  cpu_irq_enable();
}
800167c0:	e3 cd 80 80 	ldm	sp++,r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800167c4:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800167c8:	10 37       	cp.w	r7,r8
800167ca:	fe 98 ff fd 	brls	800167c4 <init_adc+0x78>
800167ce:	10 3a       	cp.w	r10,r8
800167d0:	cf a2       	brcc	800167c4 <init_adc+0x78>
800167d2:	ce 7b       	rjmp	800167a0 <init_adc+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800167d4:	e1 b8 00 42 	mfsr	r8,0x108
800167d8:	cd fb       	rjmp	80016796 <init_adc+0x4a>
800167da:	d7 03       	nop

800167dc <app_resume>:
  // disable pdca interrupt
  //  cpu_irq_disable_level(SYS_IRQ_PRIORITY);
  
  //  print_dbg("\r\n enabling tc/ui irq...");
  
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
800167dc:	d5 43       	csrf	0x14
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
800167de:	d5 33       	csrf	0x13
  
  //  }
  
  //  notifyMsg = 0;
  //  inNotify = 0;
}
800167e0:	5e fc       	retal	r12
800167e2:	d7 03       	nop

800167e4 <app_pause>:
/*   screen_clear(); */
/*   //  screen_line(0, 0, (char*)msg, 0xf); */
/*   screen_refresh(); */
/* } */

void app_pause(void) {
800167e4:	eb cd 40 80 	pushm	r7,lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800167e8:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800167ec:	e0 68 03 e8 	mov	r8,1000
800167f0:	30 09       	mov	r9,0
800167f2:	e0 6a d0 e7 	mov	r10,53479
800167f6:	ea 1a 27 56 	orh	r10,0x2756
800167fa:	30 0b       	mov	r11,0
800167fc:	e0 a0 62 91 	rcall	80022d1e <__avr32_udiv64>
80016800:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80016804:	e1 b8 00 42 	mfsr	r8,0x108
80016808:	14 37       	cp.w	r7,r10
8001680a:	e0 8b 00 0d 	brhi	80016824 <app_pause+0x40>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001680e:	10 37       	cp.w	r7,r8
80016810:	e0 8b 00 04 	brhi	80016818 <app_pause+0x34>
80016814:	10 3a       	cp.w	r10,r8
80016816:	c1 02       	brcc	80016836 <app_pause+0x52>
  //  print_pending_events();

  //  delay_ns(100);
  delay_ms(10);

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
80016818:	d3 43       	ssrf	0x14
  cpu_irq_disable_level(UI_IRQ_PRIORITY);
8001681a:	d3 33       	ssrf	0x13

  /// disable all interrupts and save flags 
  //  flags = cpu_irq_save();
    // enable pdca interrupt
  //  cpu_irq_enable_level(SYS_IRQ_PRIORITY);
}
8001681c:	e3 cd 80 80 	ldm	sp++,r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80016820:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80016824:	10 37       	cp.w	r7,r8
80016826:	fe 98 ff fd 	brls	80016820 <app_pause+0x3c>
8001682a:	10 3a       	cp.w	r10,r8
8001682c:	cf a2       	brcc	80016820 <app_pause+0x3c>
  //  print_pending_events();

  //  delay_ns(100);
  delay_ms(10);

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
8001682e:	d3 43       	ssrf	0x14
  cpu_irq_disable_level(UI_IRQ_PRIORITY);
80016830:	d3 33       	ssrf	0x13

  /// disable all interrupts and save flags 
  //  flags = cpu_irq_save();
    // enable pdca interrupt
  //  cpu_irq_enable_level(SYS_IRQ_PRIORITY);
}
80016832:	e3 cd 80 80 	ldm	sp++,r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80016836:	e1 b8 00 42 	mfsr	r8,0x108
8001683a:	ce ab       	rjmp	8001680e <app_pause+0x2a>

8001683c <init_sys_timers>:
  ctl_perform_all_changes();
}


//====== external
void init_sys_timers(void) {
8001683c:	d4 01       	pushm	lr
  set_timer(&encTimer,           eEncTimerTag,           20,  &enc_timer_callback,    1);
8001683e:	30 18       	mov	r8,1
80016840:	fe c9 ff d4 	sub	r9,pc,-44
80016844:	31 4a       	mov	r10,20
80016846:	30 0b       	mov	r11,0
80016848:	e0 6c 07 64 	mov	r12,1892
  set_timer(&paramChangeTimer,   eParamChangeTimerTag,      1,  &param_change_timer_callback, 1);
8001684c:	e0 a0 1d 78 	rcall	8001a33c <set_timer>
80016850:	30 18       	mov	r8,1
80016852:	fe c9 ff ee 	sub	r9,pc,-18
80016856:	10 9a       	mov	r10,r8
80016858:	10 9b       	mov	r11,r8
}
8001685a:	e0 6c 07 50 	mov	r12,1872
8001685e:	e0 a0 1d 6f 	rcall	8001a33c <set_timer>
80016862:	d8 02       	popm	pc

80016864 <param_change_timer_callback>:
80016864:	d4 01       	pushm	lr
80016866:	e0 a0 05 a5 	rcall	800173b0 <ctl_perform_all_changes>
8001686a:	d8 02       	popm	pc

8001686c <enc_timer_callback>:
8001686c:	eb cd 40 fc 	pushm	r2-r7,lr

// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
80016870:	30 08       	mov	r8,0
80016872:	30 0b       	mov	r11,0
80016874:	e0 66 07 4c 	mov	r6,1868
80016878:	e0 67 2c cc 	mov	r7,11468
8001687c:	ac 88       	st.b	r6[0x0],r8
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.eventType = enc[i].event;
8001687e:	e0 63 07 4e 	mov	r3,1870

// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
80016882:	16 98       	mov	r8,r11
80016884:	e0 65 07 78 	mov	r5,1912
    val = enc[i].val;
80016888:	16 92       	mov	r2,r11
8001688a:	30 34       	mov	r4,3
8001688c:	c0 28       	rjmp	80016890 <enc_timer_callback+0x24>
8001688e:	10 9b       	mov	r11,r8
80016890:	f0 08 00 18 	add	r8,r8,r8<<0x1
80016894:	f0 ca ff ff 	sub	r10,r8,-1
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80016898:	ee 0a 04 29 	ld.sh	r9,r7[r10<<0x2]
8001689c:	a6 09       	st.h	r3[0x0],r9
8001689e:	ee 0a 00 2a 	add	r10,r7,r10<<0x2
800168a2:	94 1a       	ld.sh	r10,r10[0x2]
800168a4:	f4 09 19 00 	cp.h	r9,r10
800168a8:	e0 89 00 05 	brgt	800168b2 <enc_timer_callback+0x46>
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.eventType = enc[i].event;
      e.eventData = val;
      enc[i].val = 0;
800168ac:	5c 3a       	neg	r10
800168ae:	14 39       	cp.w	r9,r10
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.eventType = enc[i].event;
800168b0:	c0 f4       	brge	800168ce <enc_timer_callback+0x62>
800168b2:	8b 19       	st.w	r5[0x4],r9
800168b4:	f0 c9 ff ff 	sub	r9,r8,-1
      e.eventData = val;
      enc[i].val = 0;
800168b8:	ee 08 00 28 	add	r8,r7,r8<<0x2
      post_event(&e);
800168bc:	70 28       	ld.w	r8,r8[0x8]
800168be:	ee 09 0a 22 	st.h	r7[r9<<0x2],r2
800168c2:	8b 08       	st.w	r5[0x0],r8

// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
800168c4:	e0 6c 07 78 	mov	r12,1912
800168c8:	e0 a0 05 a4 	rcall	80017410 <post_event>
800168cc:	0d 8b       	ld.ub	r11,r6[0x0]
800168ce:	f6 c8 ff ff 	sub	r8,r11,-1
800168d2:	5c 58       	castu.b	r8
800168d4:	ac 88       	st.b	r6[0x0],r8
800168d6:	e8 08 18 00 	cp.b	r8,r4
800168da:	fe 98 ff da 	brls	8001688e <enc_timer_callback+0x22>
800168de:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800168e2:	d7 03       	nop

800168e4 <bfin_enable>:
  

/*   bfin_enable(); */
/* } */

void bfin_enable(void) {
800168e4:	d4 01       	pushm	lr
  // enable audio processing
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800168e6:	30 0b       	mov	r11,0
800168e8:	fe 7c 24 00 	mov	r12,-56320
800168ec:	fe b0 e1 08 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, MSG_ENABLE_AUDIO);
800168f0:	30 6b       	mov	r11,6
800168f2:	fe 7c 24 00 	mov	r12,-56320
800168f6:	fe b0 e1 98 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800168fa:	30 0b       	mov	r11,0
800168fc:	fe 7c 24 00 	mov	r12,-56320
80016900:	fe b0 e1 26 	rcall	80012b4c <spi_unselectChip>
}
80016904:	d8 02       	popm	pc
80016906:	d7 03       	nop

80016908 <bfin_get_module_name>:
80016908:	eb cd 40 e0 	pushm	r5-r7,lr
8001690c:	20 1d       	sub	sp,4
8001690e:	18 95       	mov	r5,r12
80016910:	c6 af       	rcall	800167e4 <app_pause>
80016912:	30 0b       	mov	r11,0
  u8 i;

  app_pause();

  // command 
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016914:	fe 7c 24 00 	mov	r12,-56320
80016918:	fe b0 e0 f2 	rcall	80012afc <spi_selectChip>
8001691c:	30 4b       	mov	r11,4
  spi_write(BFIN_SPI, MSG_GET_MODULE_NAME_COM);
8001691e:	fe 7c 24 00 	mov	r12,-56320
80016922:	fe b0 e1 82 	rcall	80012c26 <spi_write>
80016926:	30 0b       	mov	r11,0
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016928:	fe 7c 24 00 	mov	r12,-56320
8001692c:	fa c6 ff fe 	sub	r6,sp,-2
80016930:	fe b0 e1 0e 	rcall	80012b4c <spi_unselectChip>
80016934:	30 07       	mov	r7,0
80016936:	30 0b       	mov	r11,0
  for(i=0; i<MODULE_NAME_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016938:	fe 7c 24 00 	mov	r12,-56320
8001693c:	fe b0 e0 e0 	rcall	80012afc <spi_selectChip>
80016940:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016942:	fe 7c 24 00 	mov	r12,-56320
80016946:	fe b0 e1 70 	rcall	80012c26 <spi_write>
8001694a:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
8001694c:	fe 7c 24 00 	mov	r12,-56320
80016950:	fe b0 e1 79 	rcall	80012c42 <spi_read>
80016954:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016956:	fe 7c 24 00 	mov	r12,-56320
8001695a:	fe b0 e0 f9 	rcall	80012b4c <spi_unselectChip>
8001695e:	ea 07 00 08 	add	r8,r5,r7
80016962:	1b b9       	ld.ub	r9,sp[0x3]
    buf[i] = (char)(x & 0xff);
80016964:	b0 89       	st.b	r8[0x0],r9
80016966:	2f f7       	sub	r7,-1
80016968:	59 87       	cp.w	r7,24

  // command 
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, MSG_GET_MODULE_NAME_COM);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  for(i=0; i<MODULE_NAME_LEN; i++) {
8001696a:	ce 61       	brne	80016936 <bfin_get_module_name+0x2e>
8001696c:	c3 8f       	rcall	800167dc <app_resume>
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    buf[i] = (char)(x & 0xff);
  }

  app_resume();
8001696e:	2f fd       	sub	sp,-4
80016970:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80016974 <bfin_get_param_desc>:
}
80016974:	eb cd 40 e0 	pushm	r5-r7,lr
80016978:	20 2d       	sub	sp,8
8001697a:	16 97       	mov	r7,r11
8001697c:	18 96       	mov	r6,r12
8001697e:	c3 3f       	rcall	800167e4 <app_pause>
80016980:	30 0b       	mov	r11,0
80016982:	fe 7c 24 00 	mov	r12,-56320
80016986:	fe b0 e0 bb 	rcall	80012afc <spi_selectChip>
8001698a:	30 3b       	mov	r11,3
8001698c:	fe 7c 24 00 	mov	r12,-56320
  u8 i;

  app_pause();
  // command 
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, MSG_GET_PARAM_DESC_COM);
80016990:	fe b0 e1 4b 	rcall	80012c26 <spi_write>
80016994:	30 0b       	mov	r11,0
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016996:	fe 7c 24 00 	mov	r12,-56320
8001699a:	fe b0 e0 d9 	rcall	80012b4c <spi_unselectChip>
8001699e:	30 0b       	mov	r11,0
  // idx
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169a0:	fe 7c 24 00 	mov	r12,-56320
800169a4:	fe b0 e0 ac 	rcall	80012afc <spi_selectChip>
800169a8:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
  spi_write(BFIN_SPI, paramIdx);
800169ac:	fe 7c 24 00 	mov	r12,-56320
800169b0:	fe b0 e1 3b 	rcall	80012c26 <spi_write>
800169b4:	30 0b       	mov	r11,0
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169b6:	fe 7c 24 00 	mov	r12,-56320
800169ba:	fe b0 e0 c9 	rcall	80012b4c <spi_unselectChip>
800169be:	30 0b       	mov	r11,0
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169c0:	fe 7c 24 00 	mov	r12,-56320
800169c4:	fe b0 e0 9c 	rcall	80012afc <spi_selectChip>
800169c8:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
800169ca:	fe 7c 24 00 	mov	r12,-56320
800169ce:	fe b0 e1 2c 	rcall	80012c26 <spi_write>
800169d2:	fa c6 ff fa 	sub	r6,sp,-6
    spi_read(BFIN_SPI, &x);
800169d6:	fe 7c 24 00 	mov	r12,-56320
800169da:	0c 9b       	mov	r11,r6
800169dc:	fe b0 e1 33 	rcall	80012c42 <spi_read>
800169e0:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169e2:	fe 7c 24 00 	mov	r12,-56320
800169e6:	fe b0 e0 b3 	rcall	80012b4c <spi_unselectChip>
800169ea:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
800169ec:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169ee:	ae 88       	st.b	r7[0x0],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
800169f0:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169f4:	fe b0 e0 84 	rcall	80012afc <spi_selectChip>
800169f8:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
800169fa:	fe 7c 24 00 	mov	r12,-56320
800169fe:	fe b0 e1 14 	rcall	80012c26 <spi_write>
80016a02:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016a04:	fe 7c 24 00 	mov	r12,-56320
80016a08:	fe b0 e1 1d 	rcall	80012c42 <spi_read>
80016a0c:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a0e:	fe 7c 24 00 	mov	r12,-56320
80016a12:	fe b0 e0 9d 	rcall	80012b4c <spi_unselectChip>
80016a16:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016a18:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a1a:	ae 98       	st.b	r7[0x1],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016a1c:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a20:	fe b0 e0 6e 	rcall	80012afc <spi_selectChip>
80016a24:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016a26:	fe 7c 24 00 	mov	r12,-56320
80016a2a:	fe b0 e0 fe 	rcall	80012c26 <spi_write>
80016a2e:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016a30:	fe 7c 24 00 	mov	r12,-56320
80016a34:	fe b0 e1 07 	rcall	80012c42 <spi_read>
80016a38:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a3a:	fe 7c 24 00 	mov	r12,-56320
80016a3e:	fe b0 e0 87 	rcall	80012b4c <spi_unselectChip>
80016a42:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016a44:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a46:	ae a8       	st.b	r7[0x2],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016a48:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a4c:	fe b0 e0 58 	rcall	80012afc <spi_selectChip>
80016a50:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016a52:	fe 7c 24 00 	mov	r12,-56320
80016a56:	fe b0 e0 e8 	rcall	80012c26 <spi_write>
80016a5a:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016a5c:	fe 7c 24 00 	mov	r12,-56320
80016a60:	fe b0 e0 f1 	rcall	80012c42 <spi_read>
80016a64:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a66:	fe 7c 24 00 	mov	r12,-56320
80016a6a:	fe b0 e0 71 	rcall	80012b4c <spi_unselectChip>
80016a6e:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016a70:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a72:	ae b8       	st.b	r7[0x3],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016a74:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a78:	fe b0 e0 42 	rcall	80012afc <spi_selectChip>
80016a7c:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016a7e:	fe 7c 24 00 	mov	r12,-56320
80016a82:	fe b0 e0 d2 	rcall	80012c26 <spi_write>
80016a86:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016a88:	fe 7c 24 00 	mov	r12,-56320
80016a8c:	fe b0 e0 db 	rcall	80012c42 <spi_read>
80016a90:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a92:	fe 7c 24 00 	mov	r12,-56320
80016a96:	fe b0 e0 5b 	rcall	80012b4c <spi_unselectChip>
80016a9a:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016a9c:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a9e:	ae c8       	st.b	r7[0x4],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016aa0:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016aa4:	fe b0 e0 2c 	rcall	80012afc <spi_selectChip>
80016aa8:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016aaa:	fe 7c 24 00 	mov	r12,-56320
80016aae:	fe b0 e0 bc 	rcall	80012c26 <spi_write>
80016ab2:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016ab4:	fe 7c 24 00 	mov	r12,-56320
80016ab8:	fe b0 e0 c5 	rcall	80012c42 <spi_read>
80016abc:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016abe:	fe 7c 24 00 	mov	r12,-56320
80016ac2:	fe b0 e0 45 	rcall	80012b4c <spi_unselectChip>
80016ac6:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016ac8:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016aca:	ae d8       	st.b	r7[0x5],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016acc:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ad0:	fe b0 e0 16 	rcall	80012afc <spi_selectChip>
80016ad4:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016ad6:	fe 7c 24 00 	mov	r12,-56320
80016ada:	fe b0 e0 a6 	rcall	80012c26 <spi_write>
80016ade:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016ae0:	fe 7c 24 00 	mov	r12,-56320
80016ae4:	fe b0 e0 af 	rcall	80012c42 <spi_read>
80016ae8:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016aea:	fe 7c 24 00 	mov	r12,-56320
80016aee:	fe b0 e0 2f 	rcall	80012b4c <spi_unselectChip>
80016af2:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016af4:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016af6:	ae e8       	st.b	r7[0x6],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016af8:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016afc:	fe b0 e0 00 	rcall	80012afc <spi_selectChip>
80016b00:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016b02:	fe 7c 24 00 	mov	r12,-56320
80016b06:	fe b0 e0 90 	rcall	80012c26 <spi_write>
80016b0a:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016b0c:	fe 7c 24 00 	mov	r12,-56320
80016b10:	fe b0 e0 99 	rcall	80012c42 <spi_read>
80016b14:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b16:	fe 7c 24 00 	mov	r12,-56320
80016b1a:	fe b0 e0 19 	rcall	80012b4c <spi_unselectChip>
80016b1e:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016b20:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b22:	ae f8       	st.b	r7[0x7],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b24:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b28:	fe b0 df ea 	rcall	80012afc <spi_selectChip>
80016b2c:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016b2e:	fe 7c 24 00 	mov	r12,-56320
80016b32:	fe b0 e0 7a 	rcall	80012c26 <spi_write>
80016b36:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016b38:	fe 7c 24 00 	mov	r12,-56320
80016b3c:	fe b0 e0 83 	rcall	80012c42 <spi_read>
80016b40:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b42:	fe 7c 24 00 	mov	r12,-56320
80016b46:	fe b0 e0 03 	rcall	80012b4c <spi_unselectChip>
80016b4a:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016b4c:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b4e:	ef 68 00 08 	st.b	r7[8],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b52:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b56:	fe b0 df d3 	rcall	80012afc <spi_selectChip>
80016b5a:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016b5c:	fe 7c 24 00 	mov	r12,-56320
80016b60:	fe b0 e0 63 	rcall	80012c26 <spi_write>
80016b64:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016b66:	fe 7c 24 00 	mov	r12,-56320
80016b6a:	fe b0 e0 6c 	rcall	80012c42 <spi_read>
80016b6e:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b70:	fe 7c 24 00 	mov	r12,-56320
80016b74:	fe b0 df ec 	rcall	80012b4c <spi_unselectChip>
80016b78:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016b7a:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b7c:	ef 68 00 09 	st.b	r7[9],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b80:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b84:	fe b0 df bc 	rcall	80012afc <spi_selectChip>
80016b88:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016b8a:	fe 7c 24 00 	mov	r12,-56320
80016b8e:	fe b0 e0 4c 	rcall	80012c26 <spi_write>
80016b92:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016b94:	fe 7c 24 00 	mov	r12,-56320
80016b98:	fe b0 e0 55 	rcall	80012c42 <spi_read>
80016b9c:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b9e:	fe 7c 24 00 	mov	r12,-56320
80016ba2:	fe b0 df d5 	rcall	80012b4c <spi_unselectChip>
80016ba6:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016ba8:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016baa:	ef 68 00 0a 	st.b	r7[10],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016bae:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bb2:	fe b0 df a5 	rcall	80012afc <spi_selectChip>
80016bb6:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016bb8:	fe 7c 24 00 	mov	r12,-56320
80016bbc:	fe b0 e0 35 	rcall	80012c26 <spi_write>
80016bc0:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016bc2:	fe 7c 24 00 	mov	r12,-56320
80016bc6:	fe b0 e0 3e 	rcall	80012c42 <spi_read>
80016bca:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bcc:	fe 7c 24 00 	mov	r12,-56320
80016bd0:	fe b0 df be 	rcall	80012b4c <spi_unselectChip>
80016bd4:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016bd6:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bd8:	ef 68 00 0b 	st.b	r7[11],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016bdc:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016be0:	fe b0 df 8e 	rcall	80012afc <spi_selectChip>
80016be4:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016be6:	fe 7c 24 00 	mov	r12,-56320
80016bea:	fe b0 e0 1e 	rcall	80012c26 <spi_write>
80016bee:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016bf0:	fe 7c 24 00 	mov	r12,-56320
80016bf4:	fe b0 e0 27 	rcall	80012c42 <spi_read>
80016bf8:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bfa:	fe 7c 24 00 	mov	r12,-56320
80016bfe:	fe b0 df a7 	rcall	80012b4c <spi_unselectChip>
80016c02:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016c04:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c06:	ef 68 00 0c 	st.b	r7[12],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c0a:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c0e:	fe b0 df 77 	rcall	80012afc <spi_selectChip>
80016c12:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016c14:	fe 7c 24 00 	mov	r12,-56320
80016c18:	fe b0 e0 07 	rcall	80012c26 <spi_write>
80016c1c:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016c1e:	fe 7c 24 00 	mov	r12,-56320
80016c22:	fe b0 e0 10 	rcall	80012c42 <spi_read>
80016c26:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c28:	fe 7c 24 00 	mov	r12,-56320
80016c2c:	fe b0 df 90 	rcall	80012b4c <spi_unselectChip>
80016c30:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016c32:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c34:	ef 68 00 0d 	st.b	r7[13],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c38:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c3c:	fe b0 df 60 	rcall	80012afc <spi_selectChip>
80016c40:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016c42:	fe 7c 24 00 	mov	r12,-56320
80016c46:	fe b0 df f0 	rcall	80012c26 <spi_write>
80016c4a:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016c4c:	fe 7c 24 00 	mov	r12,-56320
80016c50:	fe b0 df f9 	rcall	80012c42 <spi_read>
80016c54:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c56:	fe 7c 24 00 	mov	r12,-56320
80016c5a:	fe b0 df 79 	rcall	80012b4c <spi_unselectChip>
80016c5e:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016c60:	30 0b       	mov	r11,0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c62:	ef 68 00 0e 	st.b	r7[14],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c66:	fe 7c 24 00 	mov	r12,-56320
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c6a:	fe b0 df 49 	rcall	80012afc <spi_selectChip>
80016c6e:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016c70:	fe 7c 24 00 	mov	r12,-56320
80016c74:	fe b0 df d9 	rcall	80012c26 <spi_write>
80016c78:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016c7a:	fe 7c 24 00 	mov	r12,-56320
80016c7e:	fe b0 df e2 	rcall	80012c42 <spi_read>
80016c82:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c84:	fe 7c 24 00 	mov	r12,-56320
80016c88:	fe b0 df 62 	rcall	80012b4c <spi_unselectChip>
80016c8c:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->label[i] = (char)(x & 0xff);
80016c8e:	30 0b       	mov	r11,0
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c90:	ef 68 00 0f 	st.b	r7[15],r8
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c94:	fe 7c 24 00 	mov	r12,-56320
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c98:	fe b0 df 32 	rcall	80012afc <spi_selectChip>
80016c9c:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016c9e:	fe 7c 24 00 	mov	r12,-56320
80016ca2:	fe b0 df c2 	rcall	80012c26 <spi_write>
80016ca6:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016ca8:	fe 7c 24 00 	mov	r12,-56320
80016cac:	fe b0 df cb 	rcall	80012c42 <spi_read>
80016cb0:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cb2:	fe 7c 24 00 	mov	r12,-56320
80016cb6:	fe b0 df 4b 	rcall	80012b4c <spi_unselectChip>
80016cba:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016cbc:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cbe:	ef 68 00 10 	st.b	r7[16],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016cc2:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cc6:	fe b0 df 1b 	rcall	80012afc <spi_selectChip>
80016cca:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016ccc:	fe 7c 24 00 	mov	r12,-56320
80016cd0:	fe b0 df ab 	rcall	80012c26 <spi_write>
80016cd4:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016cd6:	fe 7c 24 00 	mov	r12,-56320
80016cda:	fe b0 df b4 	rcall	80012c42 <spi_read>
80016cde:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ce0:	fe 7c 24 00 	mov	r12,-56320
80016ce4:	fe b0 df 34 	rcall	80012b4c <spi_unselectChip>
80016ce8:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016cea:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cec:	ef 68 00 11 	st.b	r7[17],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016cf0:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cf4:	fe b0 df 04 	rcall	80012afc <spi_selectChip>
80016cf8:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016cfa:	fe 7c 24 00 	mov	r12,-56320
80016cfe:	fe b0 df 94 	rcall	80012c26 <spi_write>
80016d02:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016d04:	fe 7c 24 00 	mov	r12,-56320
80016d08:	fe b0 df 9d 	rcall	80012c42 <spi_read>
80016d0c:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d0e:	fe 7c 24 00 	mov	r12,-56320
80016d12:	fe b0 df 1d 	rcall	80012b4c <spi_unselectChip>
80016d16:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016d18:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d1a:	ef 68 00 12 	st.b	r7[18],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016d1e:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d22:	fe b0 de ed 	rcall	80012afc <spi_selectChip>
80016d26:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016d28:	fe 7c 24 00 	mov	r12,-56320
80016d2c:	fe b0 df 7d 	rcall	80012c26 <spi_write>
80016d30:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016d32:	fe 7c 24 00 	mov	r12,-56320
80016d36:	fe b0 df 86 	rcall	80012c42 <spi_read>
80016d3a:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d3c:	fe 7c 24 00 	mov	r12,-56320
80016d40:	fe b0 df 06 	rcall	80012b4c <spi_unselectChip>
80016d44:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016d46:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d48:	ef 68 00 13 	st.b	r7[19],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016d4c:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d50:	fe b0 de d6 	rcall	80012afc <spi_selectChip>
80016d54:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016d56:	fe 7c 24 00 	mov	r12,-56320
80016d5a:	fe b0 df 66 	rcall	80012c26 <spi_write>
80016d5e:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016d60:	fe 7c 24 00 	mov	r12,-56320
80016d64:	fe b0 df 6f 	rcall	80012c42 <spi_read>
80016d68:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d6a:	fe 7c 24 00 	mov	r12,-56320
80016d6e:	fe b0 de ef 	rcall	80012b4c <spi_unselectChip>
80016d72:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016d74:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d76:	ef 68 00 14 	st.b	r7[20],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016d7a:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d7e:	fe b0 de bf 	rcall	80012afc <spi_selectChip>
80016d82:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016d84:	fe 7c 24 00 	mov	r12,-56320
80016d88:	fe b0 df 4f 	rcall	80012c26 <spi_write>
80016d8c:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016d8e:	fe 7c 24 00 	mov	r12,-56320
80016d92:	fe b0 df 58 	rcall	80012c42 <spi_read>
80016d96:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d98:	fe 7c 24 00 	mov	r12,-56320
80016d9c:	fe b0 de d8 	rcall	80012b4c <spi_unselectChip>
80016da0:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016da2:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016da4:	ef 68 00 15 	st.b	r7[21],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016da8:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dac:	fe b0 de a8 	rcall	80012afc <spi_selectChip>
80016db0:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016db2:	fe 7c 24 00 	mov	r12,-56320
80016db6:	fe b0 df 38 	rcall	80012c26 <spi_write>
80016dba:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016dbc:	fe 7c 24 00 	mov	r12,-56320
80016dc0:	fe b0 df 41 	rcall	80012c42 <spi_read>
80016dc4:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dc6:	fe 7c 24 00 	mov	r12,-56320
80016dca:	fe b0 de c1 	rcall	80012b4c <spi_unselectChip>
80016dce:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016dd0:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dd2:	ef 68 00 16 	st.b	r7[22],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016dd6:	fe 7c 24 00 	mov	r12,-56320
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dda:	fe b0 de 91 	rcall	80012afc <spi_selectChip>
80016dde:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016de0:	fe 7c 24 00 	mov	r12,-56320
80016de4:	fe b0 df 21 	rcall	80012c26 <spi_write>
80016de8:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016dea:	fe 7c 24 00 	mov	r12,-56320
80016dee:	fe b0 df 2a 	rcall	80012c42 <spi_read>
80016df2:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016df4:	fe 7c 24 00 	mov	r12,-56320
80016df8:	fe b0 de aa 	rcall	80012b4c <spi_unselectChip>
80016dfc:	1b f8       	ld.ub	r8,sp[0x7]
    pDesc->unit[i] = (char)(x & 0xff);
80016dfe:	30 0b       	mov	r11,0
  }
  // read type
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e00:	ef 68 00 17 	st.b	r7[23],r8
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016e04:	fe 7c 24 00 	mov	r12,-56320
  }
  // read type
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e08:	fe b0 de 7a 	rcall	80012afc <spi_selectChip>
80016e0c:	30 0b       	mov	r11,0
  spi_write(BFIN_SPI, 0); //dont care
80016e0e:	fe 7c 24 00 	mov	r12,-56320
80016e12:	fe b0 df 0a 	rcall	80012c26 <spi_write>
80016e16:	0c 9b       	mov	r11,r6
  spi_read(BFIN_SPI, &x);
80016e18:	fe 7c 24 00 	mov	r12,-56320
80016e1c:	fe b0 df 13 	rcall	80012c42 <spi_read>
80016e20:	30 0b       	mov	r11,0
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e22:	fe 7c 24 00 	mov	r12,-56320
80016e26:	fe b0 de 93 	rcall	80012b4c <spi_unselectChip>
80016e2a:	1b f8       	ld.ub	r8,sp[0x7]
  pDesc->type = (U8)(x & 0xff);
80016e2c:	30 0b       	mov	r11,0
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e2e:	ef 68 00 18 	st.b	r7[24],r8
  // read type
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, 0); //dont care
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
80016e32:	fe 7c 24 00 	mov	r12,-56320
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e36:	fe b0 de 63 	rcall	80012afc <spi_selectChip>
80016e3a:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016e3c:	fe 7c 24 00 	mov	r12,-56320
80016e40:	fe b0 de f3 	rcall	80012c26 <spi_write>
80016e44:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016e46:	fe 7c 24 00 	mov	r12,-56320
80016e4a:	fe b0 de fc 	rcall	80012c42 <spi_read>
80016e4e:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e50:	fe 7c 24 00 	mov	r12,-56320
80016e54:	fe b0 de 7c 	rcall	80012b4c <spi_unselectChip>
80016e58:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
80016e5a:	30 0b       	mov	r11,0
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e5c:	ba a8       	st.b	sp[0x2],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016e5e:	fe 7c 24 00 	mov	r12,-56320
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e62:	fe b0 de 4d 	rcall	80012afc <spi_selectChip>
80016e66:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016e68:	fe 7c 24 00 	mov	r12,-56320
80016e6c:	fe b0 de dd 	rcall	80012c26 <spi_write>
80016e70:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016e72:	fe 7c 24 00 	mov	r12,-56320
80016e76:	fe b0 de e6 	rcall	80012c42 <spi_read>
80016e7a:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e7c:	fe 7c 24 00 	mov	r12,-56320
80016e80:	fe b0 de 66 	rcall	80012b4c <spi_unselectChip>
80016e84:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
80016e86:	30 0b       	mov	r11,0
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e88:	ba b8       	st.b	sp[0x3],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016e8a:	fe 7c 24 00 	mov	r12,-56320
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e8e:	fe b0 de 37 	rcall	80012afc <spi_selectChip>
80016e92:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016e94:	fe 7c 24 00 	mov	r12,-56320
80016e98:	fe b0 de c7 	rcall	80012c26 <spi_write>
80016e9c:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016e9e:	fe 7c 24 00 	mov	r12,-56320
80016ea2:	fe b0 de d0 	rcall	80012c42 <spi_read>
80016ea6:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ea8:	fe 7c 24 00 	mov	r12,-56320
80016eac:	fe b0 de 50 	rcall	80012b4c <spi_unselectChip>
80016eb0:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
80016eb2:	30 0b       	mov	r11,0
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016eb4:	ba c8       	st.b	sp[0x4],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016eb6:	fe 7c 24 00 	mov	r12,-56320
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016eba:	fe b0 de 21 	rcall	80012afc <spi_selectChip>
80016ebe:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
80016ec0:	fe 7c 24 00 	mov	r12,-56320
80016ec4:	fe b0 de b1 	rcall	80012c26 <spi_write>
80016ec8:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016eca:	fe 7c 24 00 	mov	r12,-56320
80016ece:	fe b0 de ba 	rcall	80012c42 <spi_read>
80016ed2:	30 0b       	mov	r11,0
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ed4:	fe 7c 24 00 	mov	r12,-56320
80016ed8:	fe b0 de 3a 	rcall	80012b4c <spi_unselectChip>
80016edc:	ef 38 00 19 	ld.ub	r8,r7[25]
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
80016ee0:	9a 38       	ld.sh	r8,sp[0x6]
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016ee2:	9a 99       	ld.uh	r9,sp[0x2]
  }
  pDesc->min = pval.asInt;
80016ee4:	ba d8       	st.b	sp[0x5],r8
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016ee6:	9a a8       	ld.uh	r8,sp[0x4]
  }
  pDesc->min = pval.asInt;
80016ee8:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80016eec:	f0 09 16 18 	lsr	r9,r8,0x18
80016ef0:	ef 69 00 19 	st.b	r7[25],r9
80016ef4:	ef 39 00 1a 	ld.ub	r9,r7[26]
80016ef8:	f3 d8 c2 08 	bfextu	r9,r8,0x10,0x8
80016efc:	ef 69 00 1a 	st.b	r7[26],r9
80016f00:	ef 39 00 1b 	ld.ub	r9,r7[27]
80016f04:	f3 d8 c1 08 	bfextu	r9,r8,0x8,0x8
80016f08:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80016f0c:	ef 69 00 1b 	st.b	r7[27],r9
80016f10:	ef 39 00 1c 	ld.ub	r9,r7[28]
80016f14:	30 05       	mov	r5,0
80016f16:	ef 68 00 1c 	st.b	r7[28],r8
80016f1a:	0a 9b       	mov	r11,r5
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f1c:	fe 7c 24 00 	mov	r12,-56320
80016f20:	fe b0 dd ee 	rcall	80012afc <spi_selectChip>
80016f24:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
80016f26:	fe 7c 24 00 	mov	r12,-56320
80016f2a:	fe b0 de 7e 	rcall	80012c26 <spi_write>
80016f2e:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016f30:	fe 7c 24 00 	mov	r12,-56320
80016f34:	fe b0 de 87 	rcall	80012c42 <spi_read>
80016f38:	0a 9b       	mov	r11,r5
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f3a:	fe 7c 24 00 	mov	r12,-56320
80016f3e:	fe b0 de 07 	rcall	80012b4c <spi_unselectChip>
80016f42:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
80016f44:	0a 9b       	mov	r11,r5
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f46:	ba a8       	st.b	sp[0x2],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016f48:	fe 7c 24 00 	mov	r12,-56320
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f4c:	fe b0 dd d8 	rcall	80012afc <spi_selectChip>
80016f50:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
80016f52:	fe 7c 24 00 	mov	r12,-56320
80016f56:	fe b0 de 68 	rcall	80012c26 <spi_write>
80016f5a:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016f5c:	fe 7c 24 00 	mov	r12,-56320
80016f60:	fe b0 de 71 	rcall	80012c42 <spi_read>
80016f64:	0a 9b       	mov	r11,r5
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f66:	fe 7c 24 00 	mov	r12,-56320
80016f6a:	fe b0 dd f1 	rcall	80012b4c <spi_unselectChip>
80016f6e:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
80016f70:	0a 9b       	mov	r11,r5
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f72:	ba b8       	st.b	sp[0x3],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016f74:	fe 7c 24 00 	mov	r12,-56320
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f78:	fe b0 dd c2 	rcall	80012afc <spi_selectChip>
80016f7c:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
80016f7e:	fe 7c 24 00 	mov	r12,-56320
80016f82:	fe b0 de 52 	rcall	80012c26 <spi_write>
80016f86:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016f88:	fe 7c 24 00 	mov	r12,-56320
80016f8c:	fe b0 de 5b 	rcall	80012c42 <spi_read>
80016f90:	0a 9b       	mov	r11,r5
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f92:	fe 7c 24 00 	mov	r12,-56320
80016f96:	fe b0 dd db 	rcall	80012b4c <spi_unselectChip>
80016f9a:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
80016f9c:	0a 9b       	mov	r11,r5
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f9e:	ba c8       	st.b	sp[0x4],r8
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016fa0:	fe 7c 24 00 	mov	r12,-56320
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asInt;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fa4:	fe b0 dd ac 	rcall	80012afc <spi_selectChip>
80016fa8:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
80016faa:	fe 7c 24 00 	mov	r12,-56320
80016fae:	fe b0 de 3c 	rcall	80012c26 <spi_write>
80016fb2:	0c 9b       	mov	r11,r6
    spi_read(BFIN_SPI, &x);
80016fb4:	fe 7c 24 00 	mov	r12,-56320
80016fb8:	fe b0 de 45 	rcall	80012c42 <spi_read>
80016fbc:	0a 9b       	mov	r11,r5
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fbe:	fe 7c 24 00 	mov	r12,-56320
80016fc2:	fe b0 dd c5 	rcall	80012b4c <spi_unselectChip>
80016fc6:	ef 38 00 1d 	ld.ub	r8,r7[29]
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->max = pval.asInt;
80016fca:	9a 38       	ld.sh	r8,sp[0x6]
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016fcc:	9a 99       	ld.uh	r9,sp[0x2]
  }
  pDesc->max = pval.asInt;
80016fce:	ba d8       	st.b	sp[0x5],r8
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016fd0:	9a a8       	ld.uh	r8,sp[0x4]
  }
  pDesc->max = pval.asInt;
80016fd2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80016fd6:	f0 09 16 18 	lsr	r9,r8,0x18
80016fda:	ef 69 00 1d 	st.b	r7[29],r9
80016fde:	ef 39 00 1e 	ld.ub	r9,r7[30]
80016fe2:	f3 d8 c2 08 	bfextu	r9,r8,0x10,0x8
80016fe6:	ef 69 00 1e 	st.b	r7[30],r9
80016fea:	ef 39 00 1f 	ld.ub	r9,r7[31]
80016fee:	f3 d8 c1 08 	bfextu	r9,r8,0x8,0x8
80016ff2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80016ff6:	ef 69 00 1f 	st.b	r7[31],r9
80016ffa:	ef 39 00 20 	ld.ub	r9,r7[32]
80016ffe:	ef 68 00 20 	st.b	r7[32],r8
80017002:	fe b0 fb ed 	rcall	800167dc <app_resume>

  app_resume();
80017006:	2f ed       	sub	sp,-8
}
80017008:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001700c <bfin_get_num_params>:
8001700c:	eb cd 40 80 	pushm	r7,lr
80017010:	20 1d       	sub	sp,4
80017012:	18 97       	mov	r7,r12
80017014:	fe b0 fb e8 	rcall	800167e4 <app_pause>
80017018:	30 0b       	mov	r11,0
8001701a:	fe 7c 24 00 	mov	r12,-56320
8001701e:	fe b0 dd 6f 	rcall	80012afc <spi_selectChip>
80017022:	30 2b       	mov	r11,2
80017024:	fe 7c 24 00 	mov	r12,-56320

  app_pause();

  // command 
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, MSG_GET_NUM_PARAMS_COM);
80017028:	fe b0 dd ff 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
8001702c:	30 0b       	mov	r11,0
8001702e:	fe 7c 24 00 	mov	r12,-56320
80017032:	fe b0 dd 8d 	rcall	80012b4c <spi_unselectChip>
  // read num
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017036:	30 0b       	mov	r11,0
80017038:	fe 7c 24 00 	mov	r12,-56320
8001703c:	fe b0 dd 60 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, 0); //dont care
80017040:	30 0b       	mov	r11,0
80017042:	fe 7c 24 00 	mov	r12,-56320
80017046:	fe b0 dd f0 	rcall	80012c26 <spi_write>
  spi_read(BFIN_SPI, &x);
8001704a:	fa cb ff fe 	sub	r11,sp,-2
8001704e:	fe 7c 24 00 	mov	r12,-56320
80017052:	fe b0 dd f8 	rcall	80012c42 <spi_read>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);  
80017056:	30 0b       	mov	r11,0
80017058:	fe 7c 24 00 	mov	r12,-56320
8001705c:	fe b0 dd 78 	rcall	80012b4c <spi_unselectChip>
  *num = (u8)(x & 0xff);
80017060:	1b b8       	ld.ub	r8,sp[0x3]
80017062:	8f 08       	st.w	r7[0x0],r8

  app_resume();
80017064:	fe b0 fb bc 	rcall	800167dc <app_resume>

}
80017068:	2f fd       	sub	sp,-4
8001706a:	e3 cd 80 80 	ldm	sp++,r7,pc
8001706e:	d7 03       	nop

80017070 <bfin_set_param>:
80017070:	eb cd 40 e0 	pushm	r5-r7,lr
80017074:	f6 08 16 18 	lsr	r8,r11,0x18
80017078:	e0 66 07 80 	mov	r6,1920
8001707c:	ac 88       	st.b	r6[0x0],r8
8001707e:	f1 db c2 08 	bfextu	r8,r11,0x10,0x8
80017082:	ac 98       	st.b	r6[0x1],r8
80017084:	f1 db c1 08 	bfextu	r8,r11,0x8,0x8

//void bfin_set_param(u8 idx, f32 x ) {
void bfin_set_param(u8 idx, fix16_t x ) {

  static ParamValue pval;
  pval.asInt = (s32)x;
80017088:	16 97       	mov	r7,r11
8001708a:	ac a8       	st.b	r6[0x2],r8
  
  app_resume();
}

//void bfin_set_param(u8 idx, f32 x ) {
void bfin_set_param(u8 idx, fix16_t x ) {
8001708c:	ac bb       	st.b	r6[0x3],r11

  static ParamValue pval;
  pval.asInt = (s32)x;

  print_dbg("\r\n bfin_set_param, idx: ");
8001708e:	18 95       	mov	r5,r12
80017090:	4b 5c       	lddpc	r12,80017164 <bfin_set_param+0xf4>
80017092:	fe b0 df 85 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(idx);
80017096:	0a 9c       	mov	r12,r5
80017098:	fe b0 df 88 	rcall	80012fa8 <print_dbg_ulong>

  print_dbg(", val: 0x");
8001709c:	4b 3c       	lddpc	r12,80017168 <bfin_set_param+0xf8>
8001709e:	fe b0 df 7f 	rcall	80012f9c <print_dbg>

//void bfin_set_param(u8 idx, f32 x ) {
void bfin_set_param(u8 idx, fix16_t x ) {

  static ParamValue pval;
  pval.asInt = (s32)x;
800170a2:	0e 9c       	mov	r12,r7

  print_dbg("\r\n bfin_set_param, idx: ");
  print_dbg_ulong(idx);

  print_dbg(", val: 0x");
  print_dbg_hex((u32)x);
800170a4:	30 07       	mov	r7,0
800170a6:	fe b0 df a3 	rcall	80012fec <print_dbg_hex>

  //  app_pause();

  // command
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170aa:	0e 9b       	mov	r11,r7
800170ac:	fe 7c 24 00 	mov	r12,-56320
800170b0:	fe b0 dd 26 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, MSG_SET_PARAM_COM);
800170b4:	0e 9b       	mov	r11,r7
800170b6:	fe 7c 24 00 	mov	r12,-56320
800170ba:	fe b0 dd b6 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170be:	0e 9b       	mov	r11,r7
800170c0:	fe 7c 24 00 	mov	r12,-56320
800170c4:	fe b0 dd 44 	rcall	80012b4c <spi_unselectChip>
  //idx
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170c8:	0e 9b       	mov	r11,r7
800170ca:	fe 7c 24 00 	mov	r12,-56320
800170ce:	fe b0 dd 17 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, idx);
800170d2:	0a 9b       	mov	r11,r5
800170d4:	fe 7c 24 00 	mov	r12,-56320
800170d8:	fe b0 dd a7 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170dc:	0e 9b       	mov	r11,r7
800170de:	fe 7c 24 00 	mov	r12,-56320
800170e2:	fe b0 dd 35 	rcall	80012b4c <spi_unselectChip>
  //val0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170e6:	0e 9b       	mov	r11,r7
800170e8:	fe 7c 24 00 	mov	r12,-56320
800170ec:	fe b0 dd 08 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[0]);
800170f0:	0d 8b       	ld.ub	r11,r6[0x0]
800170f2:	fe 7c 24 00 	mov	r12,-56320
800170f6:	fe b0 dd 98 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170fa:	0e 9b       	mov	r11,r7
800170fc:	fe 7c 24 00 	mov	r12,-56320
80017100:	fe b0 dd 26 	rcall	80012b4c <spi_unselectChip>
  // val1
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017104:	0e 9b       	mov	r11,r7
80017106:	fe 7c 24 00 	mov	r12,-56320
8001710a:	fe b0 dc f9 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[1]);
8001710e:	0d 9b       	ld.ub	r11,r6[0x1]
80017110:	fe 7c 24 00 	mov	r12,-56320
80017114:	fe b0 dd 89 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017118:	0e 9b       	mov	r11,r7
8001711a:	fe 7c 24 00 	mov	r12,-56320
8001711e:	fe b0 dd 17 	rcall	80012b4c <spi_unselectChip>
  //val2
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017122:	0e 9b       	mov	r11,r7
80017124:	fe 7c 24 00 	mov	r12,-56320
80017128:	fe b0 dc ea 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[2]);
8001712c:	0d ab       	ld.ub	r11,r6[0x2]
8001712e:	fe 7c 24 00 	mov	r12,-56320
80017132:	fe b0 dd 7a 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017136:	0e 9b       	mov	r11,r7
80017138:	fe 7c 24 00 	mov	r12,-56320
8001713c:	fe b0 dd 08 	rcall	80012b4c <spi_unselectChip>
  //val3
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017140:	0e 9b       	mov	r11,r7
80017142:	fe 7c 24 00 	mov	r12,-56320
80017146:	fe b0 dc db 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[3]);
8001714a:	0d bb       	ld.ub	r11,r6[0x3]
8001714c:	fe 7c 24 00 	mov	r12,-56320
80017150:	fe b0 dd 6b 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017154:	0e 9b       	mov	r11,r7
80017156:	fe 7c 24 00 	mov	r12,-56320
8001715a:	fe b0 dc f9 	rcall	80012b4c <spi_unselectChip>

  //  app_resume();
}
8001715e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017162:	d7 03       	nop
80017164:	80 02       	ld.sh	r2,r0[0x0]
80017166:	41 d0       	lddsp	r0,sp[0x74]
80017168:	80 02       	ld.sh	r2,r0[0x0]
8001716a:	41 ec       	lddsp	r12,sp[0x78]

8001716c <bfin_load_buf>:
8001716c:	d4 31       	pushm	r0-r7,lr
8001716e:	e0 65 0b 90 	mov	r5,2960
80017172:	6a 08       	ld.w	r8,r5[0x0]
80017174:	e0 58 00 00 	cp.w	r8,65536
80017178:	e0 8b 00 d0 	brhi	80017318 <bfin_load_buf+0x1ac>
8001717c:	fe b0 fb 34 	rcall	800167e4 <app_pause>
80017180:	30 6c       	mov	r12,6
80017182:	fe b0 da be 	rcall	800126fe <gpio_set_gpio_pin>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80017186:	30 09       	mov	r9,0
80017188:	e0 68 03 e8 	mov	r8,1000
8001718c:	e0 6a 18 67 	mov	r10,6247
80017190:	ea 1a 03 ef 	orh	r10,0x3ef
80017194:	30 0b       	mov	r11,0
80017196:	e0 a0 5d c4 	rcall	80022d1e <__avr32_udiv64>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001719a:	14 94       	mov	r4,r10
8001719c:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800171a0:	f2 0a 00 0a 	add	r10,r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800171a4:	e1 b8 00 42 	mfsr	r8,0x108
800171a8:	14 39       	cp.w	r9,r10
800171aa:	e0 8b 00 88 	brhi	800172ba <bfin_load_buf+0x14e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800171ae:	10 39       	cp.w	r9,r8
800171b0:	e0 8b 00 05 	brhi	800171ba <bfin_load_buf+0x4e>
800171b4:	10 3a       	cp.w	r10,r8
800171b6:	e0 82 00 a5 	brhs	80017300 <bfin_load_buf+0x194>
void bfin_start_transfer(void) {
  //  volatile u64 delay;
  gpio_set_gpio_pin(BFIN_RESET_PIN);  
  //  delay = 30; while (--delay > 0) {;;}
  delay_ms(1);
  gpio_clr_gpio_pin(BFIN_RESET_PIN);
800171ba:	30 6c       	mov	r12,6
800171bc:	fe b0 da ae 	rcall	80012718 <gpio_clr_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800171c0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800171c4:	f0 04 00 0a 	add	r10,r8,r4
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800171c8:	e1 b9 00 42 	mfsr	r9,0x108
800171cc:	14 38       	cp.w	r8,r10
800171ce:	e0 8b 00 7f 	brhi	800172cc <bfin_load_buf+0x160>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800171d2:	10 39       	cp.w	r9,r8
800171d4:	c0 43       	brcs	800171dc <bfin_load_buf+0x70>
800171d6:	14 39       	cp.w	r9,r10
800171d8:	e0 88 00 97 	brls	80017306 <bfin_load_buf+0x19a>
  //  delay = 30; while (--delay > 0) {;;}
  delay_ms(1);
  gpio_set_gpio_pin(BFIN_RESET_PIN);  
800171dc:	30 6c       	mov	r12,6
800171de:	fe b0 da 90 	rcall	800126fe <gpio_set_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800171e2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800171e6:	f0 04 00 04 	add	r4,r8,r4
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800171ea:	e1 b9 00 42 	mfsr	r9,0x108
800171ee:	08 38       	cp.w	r8,r4
800171f0:	e0 8b 00 76 	brhi	800172dc <bfin_load_buf+0x170>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800171f4:	12 38       	cp.w	r8,r9
800171f6:	e0 8b 00 05 	brhi	80017200 <bfin_load_buf+0x94>
800171fa:	12 34       	cp.w	r4,r9
800171fc:	e0 82 00 88 	brhs	8001730c <bfin_load_buf+0x1a0>
  //  delay = 3000; while (--delay > 0) {;;}
  delay_ms(1);
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017200:	30 0b       	mov	r11,0
80017202:	fe 7c 24 00 	mov	r12,-56320
80017206:	fe b0 dc 7b 	rcall	80012afc <spi_selectChip>

  app_pause();

  bfin_start_transfer();

  for(i=0; i<bfinLdrSize; i++) {
8001720a:	6a 08       	ld.w	r8,r5[0x0]
8001720c:	58 08       	cp.w	r8,0
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001720e:	c2 30       	breq	80017254 <bfin_load_buf+0xe8>
80017210:	30 02       	mov	r2,0
80017212:	30 03       	mov	r3,0
    bfin_transfer_byte(bfinLdrData[i]);
80017214:	e0 61 31 08 	mov	r1,12552
80017218:	62 08       	ld.w	r8,r1[0x0]
8001721a:	04 08       	add	r8,r2
//---------------------------------------------
//------ static function definition

static void bfin_transfer_byte(u8 data) {
    while (gpio_get_pin_value(BFIN_HWAIT_PIN) > 0) { 
      print_dbg("\r\n HWAIT asserted..."); 
8001721c:	11 80       	ld.ub	r0,r8[0x0]
8001721e:	c0 48       	rjmp	80017226 <bfin_load_buf+0xba>
80017220:	4c 2c       	lddpc	r12,80017328 <bfin_load_buf+0x1bc>

//---------------------------------------------
//------ static function definition

static void bfin_transfer_byte(u8 data) {
    while (gpio_get_pin_value(BFIN_HWAIT_PIN) > 0) { 
80017222:	fe b0 de bd 	rcall	80012f9c <print_dbg>
80017226:	30 5c       	mov	r12,5
80017228:	fe b0 da 60 	rcall	800126e8 <gpio_get_pin_value>
      print_dbg("\r\n HWAIT asserted..."); 
    }
    spi_write(BFIN_SPI, data);
8001722c:	18 94       	mov	r4,r12
8001722e:	cf 91       	brne	80017220 <bfin_load_buf+0xb4>
80017230:	00 9b       	mov	r11,r0
80017232:	fe 7c 24 00 	mov	r12,-56320

  app_pause();

  bfin_start_transfer();

  for(i=0; i<bfinLdrSize; i++) {
80017236:	fe b0 dc f8 	rcall	80012c26 <spi_write>
8001723a:	6a 08       	ld.w	r8,r5[0x0]
8001723c:	30 1a       	mov	r10,1
8001723e:	30 0b       	mov	r11,0
80017240:	10 96       	mov	r6,r8
80017242:	14 02       	add	r2,r10
80017244:	e6 0b 00 43 	adc	r3,r3,r11
80017248:	08 97       	mov	r7,r4
8001724a:	04 36       	cp.w	r6,r2
8001724c:	e6 07 13 00 	cpc	r7,r3
  delay_ms(1);
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
}

void bfin_end_transfer(void) {
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017250:	fe 9b ff e4 	brhi	80017218 <bfin_load_buf+0xac>
80017254:	30 0b       	mov	r11,0
80017256:	fe 7c 24 00 	mov	r12,-56320
  print_dbg("\r\n done loading; waiting... ");
8001725a:	fe b0 dc 79 	rcall	80012b4c <spi_unselectChip>
8001725e:	4b 4c       	lddpc	r12,8001732c <bfin_load_buf+0x1c0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80017260:	fe b0 de 9e 	rcall	80012f9c <print_dbg>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80017264:	e1 b7 00 42 	mfsr	r7,0x108
80017268:	e0 6a 14 80 	mov	r10,5248
8001726c:	ea 1a 03 ef 	orh	r10,0x3ef
80017270:	30 0b       	mov	r11,0
80017272:	36 49       	mov	r9,100
80017274:	f4 09 06 48 	mulu.d	r8,r10,r9
80017278:	f6 0a 10 64 	mul	r10,r11,100
8001727c:	30 0b       	mov	r11,0
8001727e:	f4 09 00 09 	add	r9,r10,r9
80017282:	e0 6a 03 e7 	mov	r10,999
80017286:	f0 0a 00 0a 	add	r10,r8,r10
8001728a:	f2 0b 00 4b 	adc	r11,r9,r11
8001728e:	e0 68 03 e8 	mov	r8,1000
80017292:	30 09       	mov	r9,0
80017294:	e0 a0 5d 45 	rcall	80022d1e <__avr32_udiv64>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80017298:	ee 0a 00 0a 	add	r10,r7,r10
8001729c:	e1 b8 00 42 	mfsr	r8,0x108
800172a0:	14 37       	cp.w	r7,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800172a2:	e0 8b 00 27 	brhi	800172f0 <bfin_load_buf+0x184>
800172a6:	10 37       	cp.w	r7,r8
800172a8:	e0 8b 00 04 	brhi	800172b0 <bfin_load_buf+0x144>
    bfin_transfer_byte(bfinLdrData[i]);
  }

  bfin_end_transfer();
  
  app_resume();
800172ac:	10 3a       	cp.w	r10,r8
800172ae:	c3 22       	brcc	80017312 <bfin_load_buf+0x1a6>
800172b0:	fe b0 fa 96 	rcall	800167dc <app_resume>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800172b4:	d8 32       	popm	r0-r7,pc
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800172b6:	e1 b8 00 42 	mfsr	r8,0x108
800172ba:	10 39       	cp.w	r9,r8
800172bc:	fe 98 ff fd 	brls	800172b6 <bfin_load_buf+0x14a>
800172c0:	10 3a       	cp.w	r10,r8
800172c2:	fe 93 ff 7c 	brlo	800171ba <bfin_load_buf+0x4e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800172c6:	cf 8b       	rjmp	800172b6 <bfin_load_buf+0x14a>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800172c8:	e1 b9 00 42 	mfsr	r9,0x108
800172cc:	12 38       	cp.w	r8,r9
800172ce:	fe 98 ff fd 	brls	800172c8 <bfin_load_buf+0x15c>
800172d2:	12 3a       	cp.w	r10,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800172d4:	c8 43       	brcs	800171dc <bfin_load_buf+0x70>
800172d6:	cf 9b       	rjmp	800172c8 <bfin_load_buf+0x15c>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800172d8:	e1 b9 00 42 	mfsr	r9,0x108
800172dc:	10 39       	cp.w	r9,r8
800172de:	cf d2       	brcc	800172d8 <bfin_load_buf+0x16c>
800172e0:	08 39       	cp.w	r9,r4
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800172e2:	fe 9b ff 8f 	brhi	80017200 <bfin_load_buf+0x94>
800172e6:	e1 b9 00 42 	mfsr	r9,0x108
800172ea:	cf 9b       	rjmp	800172dc <bfin_load_buf+0x170>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800172ec:	e1 b8 00 42 	mfsr	r8,0x108
800172f0:	10 37       	cp.w	r7,r8
800172f2:	fe 98 ff fd 	brls	800172ec <bfin_load_buf+0x180>
800172f6:	10 3a       	cp.w	r10,r8
800172f8:	cf a2       	brcc	800172ec <bfin_load_buf+0x180>
800172fa:	fe b0 fa 71 	rcall	800167dc <app_resume>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800172fe:	d8 32       	popm	r0-r7,pc
80017300:	e1 b8 00 42 	mfsr	r8,0x108
80017304:	c5 5b       	rjmp	800171ae <bfin_load_buf+0x42>
80017306:	e1 b9 00 42 	mfsr	r9,0x108
8001730a:	c6 4b       	rjmp	800171d2 <bfin_load_buf+0x66>
8001730c:	e1 b9 00 42 	mfsr	r9,0x108
80017310:	c7 2b       	rjmp	800171f4 <bfin_load_buf+0x88>
80017312:	e1 b8 00 42 	mfsr	r8,0x108
// load bfin executable from the RAM buffer
void bfin_load_buf(void) {
  u64 i; /// byte index in .ldr

  if(bfinLdrSize > BFIN_LDR_MAX_BYTES) {
    print_dbg("\r\n bfin load error: size : "); print_dbg_hex(bfinLdrSize);
80017316:	cc 8b       	rjmp	800172a6 <bfin_load_buf+0x13a>
80017318:	48 6c       	lddpc	r12,80017330 <bfin_load_buf+0x1c4>
8001731a:	fe b0 de 41 	rcall	80012f9c <print_dbg>
8001731e:	6a 0c       	ld.w	r12,r5[0x0]
    return;
80017320:	fe b0 de 66 	rcall	80012fec <print_dbg_hex>
80017324:	d8 32       	popm	r0-r7,pc
80017326:	d7 03       	nop
80017328:	80 02       	ld.sh	r2,r0[0x0]
8001732a:	42 14       	lddsp	r4,sp[0x84]
8001732c:	80 02       	ld.sh	r2,r0[0x0]
8001732e:	42 2c       	lddsp	r12,sp[0x88]
80017330:	80 02       	ld.sh	r2,r0[0x0]
80017332:	41 f8       	lddsp	r8,sp[0x7c]

80017334 <ctl_param_change>:
/* static void clear_all_param_dirty(void) { */
/*   memset(paramsDirty, 0, NUM_PARAMS); */
/* } */

// request a parameter change.
extern u8 ctl_param_change(u32 idx, u32 val) {
80017334:	eb cd 40 80 	pushm	r7,lr
// get dirty flag for param idx (inlined in header)
//extern u8 get_param_dirty(u32 idx);

static inline u8 get_param_dirty(u32 idx) {
  //return BITTEST(paramsDirty, idx);
  return paramsDirty[idx] > 0;
80017338:	e0 68 08 88 	mov	r8,2184
8001733c:	30 09       	mov	r9,0
8001733e:	f0 0c 07 0a 	ld.ub	r10,r8[r12]
80017342:	f2 0a 18 00 	cp.b	r10,r9
// request a parameter change.
extern u8 ctl_param_change(u32 idx, u32 val) {
  u32 i;
  if(get_param_dirty(idx)) {
    // search for event with this param idx
    for(i=0; i<evCount; i++) {
80017346:	c1 80       	breq	80017376 <ctl_param_change+0x42>
80017348:	e0 68 07 84 	mov	r8,1924
8001734c:	70 0e       	ld.w	lr,r8[0x0]
      if(ctlBuf[i].idx == idx) {
8001734e:	58 0e       	cp.w	lr,0
80017350:	c1 10       	breq	80017372 <ctl_param_change+0x3e>
80017352:	e0 67 07 88 	mov	r7,1928
	ctlBuf[i].val.u = val;
	break;
80017356:	0f 88       	ld.ub	r8,r7[0x0]
80017358:	18 38       	cp.w	r8,r12
8001735a:	c2 20       	breq	8001739e <ctl_param_change+0x6a>
8001735c:	ee c9 ff f8 	sub	r9,r7,-8
extern u8 ctl_param_change(u32 idx, u32 val) {
  u32 i;
  if(get_param_dirty(idx)) {
    // search for event with this param idx
    for(i=0; i<evCount; i++) {
      if(ctlBuf[i].idx == idx) {
80017360:	30 08       	mov	r8,0
80017362:	c0 58       	rjmp	8001736c <ctl_param_change+0x38>
80017364:	13 8a       	ld.ub	r10,r9[0x0]
// request a parameter change.
extern u8 ctl_param_change(u32 idx, u32 val) {
  u32 i;
  if(get_param_dirty(idx)) {
    // search for event with this param idx
    for(i=0; i<evCount; i++) {
80017366:	2f 89       	sub	r9,-8
80017368:	18 3a       	cp.w	r10,r12
8001736a:	c1 b0       	breq	800173a0 <ctl_param_change+0x6c>
      ctlBuf[evCount].idx = idx;
      ctlBuf[evCount].val.u = val;
      evCount++; 
      // update dirty flag
      set_param_dirty(idx);
      return 0;
8001736c:	2f f8       	sub	r8,-1
8001736e:	1c 38       	cp.w	r8,lr
      }
    }
    return CTL_REQUEST_OK;
  } else {
    // add a new event
    if(evCount < CTL_BUF_SIZE_1) {
80017370:	cf a3       	brcs	80017364 <ctl_param_change+0x30>
80017372:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80017376:	e0 6a 07 84 	mov	r10,1924
      ctlBuf[evCount].idx = idx;
8001737a:	74 09       	ld.w	r9,r10[0x0]
8001737c:	59 e9       	cp.w	r9,30
8001737e:	e0 8b 00 17 	brhi	800173ac <ctl_param_change+0x78>
      ctlBuf[evCount].val.u = val;
80017382:	e0 6e 07 88 	mov	lr,1928
80017386:	fc 09 0b 3c 	st.b	lr[r9<<0x3],r12
  //return BITTEST(paramsDirty, idx);
  return paramsDirty[idx] > 0;
}
static void set_param_dirty(u32 idx) {
  //      BITSET(paramsDirty, idx);
  paramsDirty[idx] = 1;
8001738a:	fc 09 00 3e 	add	lr,lr,r9<<0x3
8001738e:	2f f9       	sub	r9,-1
80017390:	9d 1b       	st.w	lr[0x4],r11
80017392:	95 09       	st.w	r10[0x0],r9
extern u8 ctl_param_change(u32 idx, u32 val) {
  u32 i;
  if(get_param_dirty(idx)) {
    // search for event with this param idx
    for(i=0; i<evCount; i++) {
      if(ctlBuf[i].idx == idx) {
80017394:	30 19       	mov	r9,1
	ctlBuf[i].val.u = val;
80017396:	f0 0c 0b 09 	st.b	r8[r12],r9
8001739a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
	break;
8001739e:	30 08       	mov	r8,0
800173a0:	ee 08 00 38 	add	r8,r7,r8<<0x3
      }
    }
    return CTL_REQUEST_OK;
  } else {
    // add a new event
    if(evCount < CTL_BUF_SIZE_1) {
800173a4:	30 0c       	mov	r12,0
800173a6:	91 1b       	st.w	r8[0x4],r11
800173a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800173ac:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1

800173b0 <ctl_perform_all_changes>:
800173b0:	eb cd 40 fc 	pushm	r2-r7,lr

// attempt to execute all pending param changes
extern void ctl_perform_all_changes(void) {
  u32 idx, i;
  // execute in FIFO order
  for(i=0; i<evCount; i++) {
800173b4:	e0 64 07 84 	mov	r4,1924
800173b8:	68 08       	ld.w	r8,r4[0x0]
800173ba:	58 08       	cp.w	r8,0
800173bc:	c1 30       	breq	800173e2 <ctl_perform_all_changes+0x32>
800173be:	30 06       	mov	r6,0
800173c0:	e0 67 07 88 	mov	r7,1928
    idx = ctlBuf[i].idx;
800173c4:	e0 62 08 88 	mov	r2,2184
    bfin_set_param(idx, ctlBuf[i].val.fix);
800173c8:	0c 93       	mov	r3,r6
800173ca:	0f 85       	ld.ub	r5,r7[0x0]
800173cc:	6e 1b       	ld.w	r11,r7[0x4]
  paramsDirty[idx] = 1;

}
// clear dirty flag
static void clear_param_dirty(u32 idx) {
  paramsDirty[idx] = 0;
800173ce:	0a 9c       	mov	r12,r5
800173d0:	c5 0e       	rcall	80017070 <bfin_set_param>

// attempt to execute all pending param changes
extern void ctl_perform_all_changes(void) {
  u32 idx, i;
  // execute in FIFO order
  for(i=0; i<evCount; i++) {
800173d2:	e4 05 0b 03 	st.b	r2[r5],r3
800173d6:	2f f6       	sub	r6,-1
800173d8:	2f 87       	sub	r7,-8
800173da:	68 08       	ld.w	r8,r4[0x0]
800173dc:	0c 38       	cp.w	r8,r6
    idx = ctlBuf[i].idx;
    bfin_set_param(idx, ctlBuf[i].val.fix);
    clear_param_dirty(idx);
  }
  evCount = 0;
800173de:	fe 9b ff f6 	brhi	800173ca <ctl_perform_all_changes+0x1a>
}
800173e2:	30 08       	mov	r8,0
800173e4:	89 08       	st.w	r4[0x0],r8
800173e6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800173ea:	d7 03       	nop

800173ec <init_events>:
// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
800173ec:	e0 6a 09 88 	mov	r10,2440
800173f0:	30 08       	mov	r8,0
  getIdx = 0;
800173f2:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
800173f4:	e0 6a 09 8c 	mov	r10,2444
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;
800173f8:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
800173fa:	95 08       	st.w	r10[0x0],r8
800173fc:	e0 68 09 90 	mov	r8,2448
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
80017400:	f0 ca fe 00 	sub	r10,r8,-512
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80017404:	91 09       	st.w	r8[0x0],r9
80017406:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
  }
}
80017408:	2f 88       	sub	r8,-8
8001740a:	14 38       	cp.w	r8,r10
8001740c:	cf c1       	brne	80017404 <init_events+0x18>
8001740e:	5e fc       	retal	r12

80017410 <post_event>:
80017410:	d4 01       	pushm	lr
80017412:	d3 43       	ssrf	0x14
80017414:	e0 69 09 88 	mov	r9,2440
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
80017418:	72 0a       	ld.w	r10,r9[0x0]
8001741a:	f4 c8 ff ff 	sub	r8,r10,-1
8001741e:	93 08       	st.w	r9[0x0],r8
80017420:	e0 48 00 40 	cp.w	r8,64
80017424:	f9 b8 00 00 	moveq	r8,0
80017428:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
8001742c:	e0 6b 09 8c 	mov	r11,2444
80017430:	76 0b       	ld.w	r11,r11[0x0]
    sysEvents[ putIdx ].eventType = e->eventType;
80017432:	10 3b       	cp.w	r11,r8
80017434:	c0 d0       	breq	8001744e <post_event+0x3e>
80017436:	78 0a       	ld.w	r10,r12[0x0]
80017438:	e0 69 09 90 	mov	r9,2448
    sysEvents[ putIdx ].eventData = e->eventData;
8001743c:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
80017440:	f2 08 00 38 	add	r8,r9,r8<<0x3
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
    print_dbg("\r\n event queue full!");
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80017444:	78 19       	ld.w	r9,r12[0x4]
  //  if (fReenableInterrupts) {
  //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }

  return status;
}
80017446:	30 1c       	mov	r12,1
    sysEvents[ putIdx ].eventType = e->eventType;
    sysEvents[ putIdx ].eventData = e->eventData;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80017448:	91 19       	st.w	r8[0x4],r9
    print_dbg("\r\n event queue full!");
8001744a:	d5 43       	csrf	0x14
8001744c:	d8 02       	popm	pc
8001744e:	93 0a       	st.w	r9[0x0],r10
80017450:	48 3c       	lddpc	r12,8001745c <post_event+0x4c>
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80017452:	fe b0 dd a5 	rcall	80012f9c <print_dbg>
  //  if (fReenableInterrupts) {
  //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }

  return status;
}
80017456:	30 0c       	mov	r12,0
80017458:	d5 43       	csrf	0x14
8001745a:	d8 02       	popm	pc
8001745c:	80 02       	ld.sh	r2,r0[0x0]
8001745e:	42 90       	lddsp	r0,sp[0xa4]

80017460 <get_next_event>:
80017460:	18 99       	mov	r9,r12
80017462:	d3 43       	ssrf	0x14
80017464:	e0 68 09 88 	mov	r8,2440
80017468:	e0 6a 09 8c 	mov	r10,2444
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
8001746c:	70 0b       	ld.w	r11,r8[0x0]
8001746e:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
80017470:	16 38       	cp.w	r8,r11
80017472:	c1 50       	breq	8001749c <get_next_event+0x3c>
80017474:	2f f8       	sub	r8,-1
80017476:	95 08       	st.w	r10[0x0],r8
80017478:	e0 48 00 40 	cp.w	r8,64
8001747c:	f9 b8 00 00 	moveq	r8,0
    e->eventType = sysEvents[ getIdx ].eventType;
80017480:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->eventData = sysEvents[ getIdx ].eventData;
80017484:	e0 6a 09 90 	mov	r10,2448
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
80017488:	f4 08 00 3b 	add	r11,r10,r8<<0x3
    e->eventData = sysEvents[ getIdx ].eventData;
8001748c:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
80017490:	99 08       	st.w	r12[0x0],r8
    e->eventType  = 0xff;
    e->eventData = 0;
    status = false;
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80017492:	76 18       	ld.w	r8,r11[0x4]
  //  if (fReenableInterrupts) {
    //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }
  return status;
}
80017494:	99 18       	st.w	r12[0x4],r8
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
    e->eventData = 0;
80017496:	30 1c       	mov	r12,1
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80017498:	d5 43       	csrf	0x14
8001749a:	5e fc       	retal	r12
    e->eventData = 0;
8001749c:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
8001749e:	e0 68 00 ff 	mov	r8,255
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  //  if (fReenableInterrupts) {
    //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }
  return status;
}
800174a2:	93 1c       	st.w	r9[0x4],r12
800174a4:	93 08       	st.w	r9[0x0],r8
800174a6:	d5 43       	csrf	0x14
800174a8:	5e fc       	retal	r12
800174aa:	d7 03       	nop

800174ac <process_enc>:
    enc[i].thresh = ENC_THRESH_DEFAULT;
  }
}

// apply pin mapping to deteremine movement
void process_enc( const U8 idx) {
800174ac:	eb cd 40 f8 	pushm	r3-r7,lr
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);
800174b0:	e0 65 2c cc 	mov	r5,11468
800174b4:	f8 0c 00 14 	add	r4,r12,r12<<0x1
800174b8:	ea 04 00 26 	add	r6,r5,r4<<0x2
800174bc:	0c 97       	mov	r7,r6
800174be:	0f 3c       	ld.ub	r12,r7++
800174c0:	fe b0 d9 14 	rcall	800126e8 <gpio_get_pin_value>
800174c4:	18 93       	mov	r3,r12
800174c6:	0f 8c       	ld.ub	r12,r7[0x0]
800174c8:	fe b0 d9 10 	rcall	800126e8 <gpio_get_pin_value>
800174cc:	0d a8       	ld.ub	r8,r6[0x2]
800174ce:	e6 0c 00 13 	add	r3,r3,r12<<0x1
  
  if (pos != enc[idx].pos) {
800174d2:	5c 53       	castu.b	r3
800174d4:	e6 08 18 00 	cp.b	r8,r3
    enc[idx].val -= enc_map[enc[idx].pos][pos];
800174d8:	c0 d0       	breq	800174f2 <process_enc+0x46>
800174da:	2f f4       	sub	r4,-1
800174dc:	e6 08 00 28 	add	r8,r3,r8<<0x2
800174e0:	ea 04 04 29 	ld.sh	r9,r5[r4<<0x2]
800174e4:	48 5a       	lddpc	r10,800174f8 <process_enc+0x4c>
800174e6:	f4 08 06 08 	ld.sb	r8,r10[r8]
800174ea:	10 19       	sub	r9,r8
800174ec:	ea 04 0a 29 	st.h	r5[r4<<0x2],r9
    enc[idx].pos = pos;
800174f0:	ac a3       	st.b	r6[0x2],r3
800174f2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800174f6:	d7 03       	nop
800174f8:	80 02       	ld.sh	r2,r0[0x0]
800174fa:	42 a5       	lddsp	r5,sp[0xa8]

800174fc <init_encoders>:
800174fc:	eb cd 40 e0 	pushm	r5-r7,lr

// initialize encoder positions
void init_encoders(void) {
  U8 i;
  // constant data
  enc[0].pin[0] = ENC0_S0_PIN;
80017500:	32 28       	mov	r8,34
80017502:	e0 67 2c cc 	mov	r7,11468
  enc[0].pin[1] = ENC0_S1_PIN;
80017506:	ae 88       	st.b	r7[0x0],r8
80017508:	32 38       	mov	r8,35
  enc[0].event = kEventEncoder0;
8001750a:	ae 98       	st.b	r7[0x1],r8
8001750c:	30 98       	mov	r8,9
  enc[1].pin[0] = ENC1_S0_PIN;
8001750e:	8f 28       	st.w	r7[0x8],r8
80017510:	32 48       	mov	r8,36
80017512:	ef 68 00 0c 	st.b	r7[12],r8
  enc[1].pin[1] = ENC1_S1_PIN;
80017516:	32 58       	mov	r8,37
80017518:	ef 68 00 0d 	st.b	r7[13],r8
  enc[1].event = kEventEncoder1;
8001751c:	30 a8       	mov	r8,10
  enc[2].pin[0] = ENC2_S0_PIN;
8001751e:	8f 58       	st.w	r7[0x14],r8
80017520:	32 68       	mov	r8,38
80017522:	ef 68 00 18 	st.b	r7[24],r8
  enc[2].pin[1] = ENC2_S1_PIN;
80017526:	32 78       	mov	r8,39
80017528:	ef 68 00 19 	st.b	r7[25],r8
  enc[2].event = kEventEncoder2;
8001752c:	30 b8       	mov	r8,11
  enc[3].pin[0] = ENC3_S0_PIN;
8001752e:	8f 88       	st.w	r7[0x20],r8
80017530:	32 88       	mov	r8,40
80017532:	ef 68 00 24 	st.b	r7[36],r8
  enc[3].pin[1] = ENC3_S1_PIN;
80017536:	32 98       	mov	r8,41
80017538:	ef 68 00 25 	st.b	r7[37],r8
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
8001753c:	30 c8       	mov	r8,12
  enc[2].pin[0] = ENC2_S0_PIN;
  enc[2].pin[1] = ENC2_S1_PIN;
  enc[2].event = kEventEncoder2;
  enc[3].pin[0] = ENC3_S0_PIN;
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
8001753e:	32 2c       	mov	r12,34
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80017540:	8f b8       	st.w	r7[0x2c],r8
80017542:	fe b0 d8 d3 	rcall	800126e8 <gpio_get_pin_value>
80017546:	18 96       	mov	r6,r12
80017548:	0f 9c       	ld.ub	r12,r7[0x1]
8001754a:	fe b0 d8 cf 	rcall	800126e8 <gpio_get_pin_value>
8001754e:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
80017552:	30 06       	mov	r6,0
    enc[i].thresh = ENC_THRESH_DEFAULT;
80017554:	ae ac       	st.b	r7[0x2],r12
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80017556:	ae 36       	st.h	r7[0x6],r6
80017558:	ef 3c 00 0c 	ld.ub	r12,r7[12]
8001755c:	fe b0 d8 c6 	rcall	800126e8 <gpio_get_pin_value>
80017560:	18 95       	mov	r5,r12
80017562:	ef 3c 00 0d 	ld.ub	r12,r7[13]
80017566:	fe b0 d8 c1 	rcall	800126e8 <gpio_get_pin_value>
8001756a:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = ENC_THRESH_DEFAULT;
8001756e:	ef 56 00 12 	st.h	r7[18],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80017572:	ef 6c 00 0e 	st.b	r7[14],r12
80017576:	ef 3c 00 18 	ld.ub	r12,r7[24]
8001757a:	fe b0 d8 b7 	rcall	800126e8 <gpio_get_pin_value>
8001757e:	18 95       	mov	r5,r12
80017580:	ef 3c 00 19 	ld.ub	r12,r7[25]
80017584:	fe b0 d8 b2 	rcall	800126e8 <gpio_get_pin_value>
80017588:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = ENC_THRESH_DEFAULT;
8001758c:	ef 56 00 1e 	st.h	r7[30],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80017590:	ef 6c 00 1a 	st.b	r7[26],r12
80017594:	ef 3c 00 24 	ld.ub	r12,r7[36]
80017598:	fe b0 d8 a8 	rcall	800126e8 <gpio_get_pin_value>
8001759c:	18 95       	mov	r5,r12
8001759e:	ef 3c 00 25 	ld.ub	r12,r7[37]
800175a2:	fe b0 d8 a3 	rcall	800126e8 <gpio_get_pin_value>
    enc[i].thresh = ENC_THRESH_DEFAULT;
800175a6:	ef 56 00 2a 	st.h	r7[42],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800175aa:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
800175ae:	ef 6c 00 26 	st.b	r7[38],r12
    enc[i].thresh = ENC_THRESH_DEFAULT;
  }
}
800175b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800175b6:	d7 03       	nop

800175b8 <fat_init>:


//=========
// extern

int fat_init(void) {
800175b8:	eb cd 40 80 	pushm	r7,lr
  // Initialise File IO Library
  print_dbg("\r\n beginning FAT library init.");
800175bc:	48 ec       	lddpc	r12,800175f4 <fat_init+0x3c>
800175be:	fe b0 dc ef 	rcall	80012f9c <print_dbg>
  fl_init();
800175c2:	e0 a0 24 61 	rcall	8001be84 <fl_init>
  print_dbg("\r\n finished FAT library init.");
800175c6:	48 dc       	lddpc	r12,800175f8 <fat_init+0x40>
800175c8:	fe b0 dc ea 	rcall	80012f9c <print_dbg>
  // Attach media access functions to library
  if ( fl_attach_media((fn_diskio_read)media_read, (fn_diskio_write)media_write) != FAT_INIT_OK ) {
800175cc:	fe cb ff c8 	sub	r11,pc,-56
800175d0:	fe cc ff 64 	sub	r12,pc,-156
800175d4:	e0 a0 27 fc 	rcall	8001c5cc <fl_attach_media>
    print_dbg("\r\n failed to attach media access functions to fat_io_lib \r\n");
    return 1;
  } else {
    print_dbg("\r\n attached media access functions to fat_io_lib");
800175d8:	18 97       	mov	r7,r12
800175da:	c0 71       	brne	800175e8 <fat_init+0x30>
800175dc:	48 8c       	lddpc	r12,800175fc <fat_init+0x44>
800175de:	fe b0 dc df 	rcall	80012f9c <print_dbg>
    return 0;
  }
}
800175e2:	0e 9c       	mov	r12,r7
  print_dbg("\r\n beginning FAT library init.");
  fl_init();
  print_dbg("\r\n finished FAT library init.");
  // Attach media access functions to library
  if ( fl_attach_media((fn_diskio_read)media_read, (fn_diskio_write)media_write) != FAT_INIT_OK ) {
    print_dbg("\r\n failed to attach media access functions to fat_io_lib \r\n");
800175e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800175e8:	48 6c       	lddpc	r12,80017600 <fat_init+0x48>
800175ea:	fe b0 dc d9 	rcall	80012f9c <print_dbg>
800175ee:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800175f2:	d7 03       	nop
800175f4:	80 02       	ld.sh	r2,r0[0x0]
800175f6:	42 b8       	lddsp	r8,sp[0xac]
800175f8:	80 02       	ld.sh	r2,r0[0x0]
800175fa:	42 d8       	lddsp	r8,sp[0xb4]
800175fc:	80 02       	ld.sh	r2,r0[0x0]
800175fe:	43 34       	lddsp	r4,sp[0xcc]
80017600:	80 02       	ld.sh	r2,r0[0x0]
80017602:	42 f8       	lddsp	r8,sp[0xbc]

80017604 <media_write>:
80017604:	eb cd 40 f8 	pushm	r3-r7,lr
80017608:	16 97       	mov	r7,r11
8001760a:	14 94       	mov	r4,r10
8001760c:	18 93       	mov	r3,r12
8001760e:	fe b0 de 05 	rcall	80013218 <sd_mmc_spi_write_open>
80017612:	18 96       	mov	r6,r12
  // PDCA write isn't implemented in ASF... 
  // for the moment use slower blocking write.

  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
80017614:	c1 e0       	breq	80017650 <media_write+0x4c>
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
80017616:	58 04       	cp.w	r4,0
80017618:	c1 80       	breq	80017648 <media_write+0x44>
  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
8001761a:	30 06       	mov	r6,0
8001761c:	c0 48       	rjmp	80017624 <media_write+0x20>
  }

  for (i=0;i<sector_count;i++) {
8001761e:	0c 34       	cp.w	r4,r6
80017620:	e0 88 00 14 	brls	80017648 <media_write+0x44>
  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
80017624:	ec 03 00 05 	add	r5,r6,r3
  }

  for (i=0;i<sector_count;i++) {
    status = sd_mmc_spi_write_sector_from_ram(buffer);
80017628:	0e 9c       	mov	r12,r7
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
8001762a:	2f f6       	sub	r6,-1
      print_dbg("\r\n error writing sd_mmc_spi, sector: ");
      print_dbg_hex(sector);
    }
    //////////////
    sector++;
    buffer += 512;
8001762c:	ee c7 fe 00 	sub	r7,r7,-512
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
    status = sd_mmc_spi_write_sector_from_ram(buffer);
80017630:	fe b0 e0 0e 	rcall	8001364c <sd_mmc_spi_write_sector_from_ram>
    /////////// dbg
    if(status == false) {
80017634:	cf 51       	brne	8001761e <media_write+0x1a>
      print_dbg("\r\n error writing sd_mmc_spi, sector: ");
80017636:	48 cc       	lddpc	r12,80017664 <media_write+0x60>
80017638:	fe b0 dc b2 	rcall	80012f9c <print_dbg>
      print_dbg_hex(sector);
8001763c:	0a 9c       	mov	r12,r5
8001763e:	fe b0 dc d7 	rcall	80012fec <print_dbg_hex>
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
80017642:	0c 34       	cp.w	r4,r6
80017644:	fe 9b ff f0 	brhi	80017624 <media_write+0x20>
    }
    //////////////
    sector++;
    buffer += 512;
  }
  sd_mmc_spi_write_close();
80017648:	fe b0 dd 92 	rcall	8001316c <sd_mmc_spi_write_close>
8001764c:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
  // for the moment use slower blocking write.

  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
80017650:	48 6c       	lddpc	r12,80017668 <media_write+0x64>
80017652:	fe b0 dc a5 	rcall	80012f9c <print_dbg>
    print_dbg_hex(sector);
80017656:	06 9c       	mov	r12,r3
80017658:	fe b0 dc ca 	rcall	80012fec <print_dbg_hex>
8001765c:	0c 9c       	mov	r12,r6
    return 0;
8001765e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80017662:	d7 03       	nop
80017664:	80 02       	ld.sh	r2,r0[0x0]
80017666:	43 90       	lddsp	r0,sp[0xe4]
80017668:	80 02       	ld.sh	r2,r0[0x0]
8001766a:	43 68       	lddsp	r8,sp[0xd8]

8001766c <media_read>:
8001766c:	d4 31       	pushm	r0-r7,lr
8001766e:	18 94       	mov	r4,r12
80017670:	16 97       	mov	r7,r11
80017672:	14 91       	mov	r1,r10
80017674:	58 0a       	cp.w	r10,0
80017676:	c5 30       	breq	8001771c <media_read+0xb0>
80017678:	30 03       	mov	r3,0
8001767a:	e0 66 2f 08 	mov	r6,12040
8001767e:	e0 65 2d 00 	mov	r5,11520
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count);
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count) {
  unsigned long i;

  for (i=0;i<sector_count;i++) {
    pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX,
80017682:	30 10       	mov	r0,1
80017684:	06 92       	mov	r2,r3
80017686:	e0 6a 02 00 	mov	r10,512
8001768a:	e0 6b 2f 08 	mov	r11,12040
		       &pdcaRxBuf,
		       FS_BUF_SIZE);
    
    pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,
8001768e:	30 0c       	mov	r12,0
80017690:	fe b0 d9 97 	rcall	800129be <pdca_load_channel>
80017694:	30 1c       	mov	r12,1
80017696:	e0 6a 02 00 	mov	r10,512
		       (void *)&pdcaTxBuf,
		       FS_BUF_SIZE); //send dummy to activate the clock
    
    fsEndTransfer = false;
    
    if(sd_mmc_spi_read_open_PDCA (sector)) {
8001769a:	e0 6b 2d 08 	mov	r11,11528
8001769e:	fe b0 d9 90 	rcall	800129be <pdca_load_channel>
800176a2:	08 9c       	mov	r12,r4

      spi_write(SD_MMC_SPI,0xFF); // dummy byte synchronizes transfer
800176a4:	aa 82       	st.b	r5[0x0],r2
800176a6:	fe b0 df 0d 	rcall	800134c0 <sd_mmc_spi_read_open_PDCA>
800176aa:	c2 f0       	breq	80017708 <media_read+0x9c>
800176ac:	e0 6b 00 ff 	mov	r11,255

      pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
800176b0:	fe 7c 28 00 	mov	r12,-55296
800176b4:	fe b0 da b9 	rcall	80012c26 <spi_write>
      pdcaRxChan =(volatile avr32_pdca_channel_t*) pdca_get_handler(AVR32_PDCA_CHANNEL_SPI_RX);
800176b8:	30 0c       	mov	r12,0
800176ba:	fe b0 d9 5e 	rcall	80012976 <pdca_enable_interrupt_transfer_complete>
800176be:	30 0c       	mov	r12,0
      pdcaTxChan =(volatile avr32_pdca_channel_t*) pdca_get_handler(AVR32_PDCA_CHANNEL_SPI_TX);
800176c0:	fe b0 d9 42 	rcall	80012944 <pdca_get_handler>
800176c4:	e0 63 2c fc 	mov	r3,11516
800176c8:	87 0c       	st.w	r3[0x0],r12
      pdcaRxChan->cr = AVR32_PDCA_TEN_MASK; // Enable RX PDCA transfer first
800176ca:	30 1c       	mov	r12,1
800176cc:	fe b0 d9 3c 	rcall	80012944 <pdca_get_handler>
      pdcaTxChan->cr = AVR32_PDCA_TEN_MASK; // and TX PDCA transfer
800176d0:	e0 68 2d 04 	mov	r8,11524
      // wait for signal from ISR
      while(!fsEndTransfer) { ;; }
800176d4:	91 0c       	st.w	r8[0x0],r12
800176d6:	66 09       	ld.w	r9,r3[0x0]
800176d8:	93 50       	st.w	r9[0x14],r0
      // copy FIXME: could optimize away
      for(i=0; i<FS_BUF_SIZE; i++) {
	buffer[i] = pdcaRxBuf[i];
800176da:	70 08       	ld.w	r8,r8[0x0]
800176dc:	91 50       	st.w	r8[0x14],r0
800176de:	0b 88       	ld.ub	r8,r5[0x0]
800176e0:	58 08       	cp.w	r8,0
      pdcaRxChan->cr = AVR32_PDCA_TEN_MASK; // Enable RX PDCA transfer first
      pdcaTxChan->cr = AVR32_PDCA_TEN_MASK; // and TX PDCA transfer
      // wait for signal from ISR
      while(!fsEndTransfer) { ;; }
      // copy FIXME: could optimize away
      for(i=0; i<FS_BUF_SIZE; i++) {
800176e2:	cf e0       	breq	800176de <media_read+0x72>
800176e4:	30 08       	mov	r8,0
800176e6:	ec 08 07 09 	ld.ub	r9,r6[r8]
800176ea:	ee 08 0b 09 	st.b	r7[r8],r9
//---- low level i/o
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count);
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count) {
  unsigned long i;

  for (i=0;i<sector_count;i++) {
800176ee:	2f f8       	sub	r8,-1
800176f0:	e0 48 02 00 	cp.w	r8,512
      }
    } else {
      print_dbg("\r\n error opening PDCA at sector "); 
      print_dbg_ulong(sector);
    }
    sector ++;
800176f4:	cf 91       	brne	800176e6 <media_read+0x7a>
    buffer += FS_BUF_SIZE;
800176f6:	e0 63 02 01 	mov	r3,513
800176fa:	06 31       	cp.w	r1,r3
      // copy FIXME: could optimize away
      for(i=0; i<FS_BUF_SIZE; i++) {
	buffer[i] = pdcaRxBuf[i];
      }
    } else {
      print_dbg("\r\n error opening PDCA at sector "); 
800176fc:	e0 88 00 10 	brls	8001771c <media_read+0xb0>
80017700:	2f f4       	sub	r4,-1
      print_dbg_ulong(sector);
80017702:	ee c7 fe 00 	sub	r7,r7,-512
80017706:	cc 0b       	rjmp	80017686 <media_read+0x1a>
80017708:	48 6c       	lddpc	r12,80017720 <media_read+0xb4>
//---- low level i/o
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count);
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count) {
  unsigned long i;

  for (i=0;i<sector_count;i++) {
8001770a:	fe b0 dc 49 	rcall	80012f9c <print_dbg>
8001770e:	2f f3       	sub	r3,-1
    }
    sector ++;
    buffer += FS_BUF_SIZE;
  }
  return 1;
}
80017710:	08 9c       	mov	r12,r4
80017712:	fe b0 dc 4b 	rcall	80012fa8 <print_dbg_ulong>
80017716:	06 31       	cp.w	r1,r3
80017718:	fe 9b ff f4 	brhi	80017700 <media_read+0x94>
8001771c:	da 3a       	popm	r0-r7,pc,r12=1
8001771e:	d7 03       	nop
80017720:	80 02       	ld.sh	r2,r0[0x0]
80017722:	43 b8       	lddsp	r8,sp[0xec]

80017724 <flash_clear_firstrun>:
extern void flash_write_firstrun(void) {
  flashc_memset32((void*)&(flash_nvram_data.firstRun), FIRSTRUN_MAGIC, 4, true);
}

// clear firstrun status
extern void flash_clear_firstrun(void) {
80017724:	d4 01       	pushm	lr
  flashc_memset32((void*)&(flash_nvram_data.firstRun), 0x00000000, 4, true);
80017726:	30 19       	mov	r9,1
80017728:	30 4a       	mov	r10,4
8001772a:	30 0b       	mov	r11,0
8001772c:	48 2c       	lddpc	r12,80017734 <flash_clear_firstrun+0x10>
8001772e:	fe b0 d7 c5 	rcall	800126b8 <flashc_memset32>
}
80017732:	d8 02       	popm	pc
80017734:	80 04       	ld.sh	r4,r0[0x0]
	...

80017738 <flash_write_firstrun>:
80017738:	d4 01       	pushm	lr
8001773a:	30 19       	mov	r9,1
  return (flash_nvram_data.firstRun == FIRSTRUN_MAGIC);
}

// write firstrun status
extern void flash_write_firstrun(void) {
  flashc_memset32((void*)&(flash_nvram_data.firstRun), FIRSTRUN_MAGIC, 4, true);
8001773c:	30 4a       	mov	r10,4
8001773e:	e0 6b 32 10 	mov	r11,12816
80017742:	ea 1b 76 54 	orh	r11,0x7654
80017746:	48 3c       	lddpc	r12,80017750 <flash_write_firstrun+0x18>
80017748:	fe b0 d7 b8 	rcall	800126b8 <flashc_memset32>
}
8001774c:	d8 02       	popm	pc
8001774e:	d7 03       	nop
80017750:	80 04       	ld.sh	r4,r0[0x0]
	...

80017754 <flash_write_ldr>:
80017754:	eb cd 40 fe 	pushm	r1-r7,lr
void flash_write_ldr(void) {
  //  flashc_memset32((void*)&(flash_nvram_data.ldrSize), bfinLdrSize, 4, true);
  //  flashc_memcpy((void*)&(flash_nvram_data.ldrData), (const void*)bfinLdrData, bfinLdrSize, true);
  // seeing some missing pages, so try writing one page at a time
  u32 i;
  u32 nPages = bfinLdrSize / 0x200;
80017758:	e0 61 0b 90 	mov	r1,2960
8001775c:	30 4a       	mov	r10,4
  u32 rem;
  const u8* pSrc;
  u8* pDst;
  // write size
  flashc_memset32((void*)&(flash_nvram_data.ldrSize), bfinLdrSize, 4, true);
8001775e:	62 07       	ld.w	r7,r1[0x0]
void flash_write_ldr(void) {
  //  flashc_memset32((void*)&(flash_nvram_data.ldrSize), bfinLdrSize, 4, true);
  //  flashc_memcpy((void*)&(flash_nvram_data.ldrData), (const void*)bfinLdrData, bfinLdrSize, true);
  // seeing some missing pages, so try writing one page at a time
  u32 i;
  u32 nPages = bfinLdrSize / 0x200;
80017760:	4a a6       	lddpc	r6,80017808 <flash_write_ldr+0xb4>
  u32 rem;
  const u8* pSrc;
  u8* pDst;
  // write size
  flashc_memset32((void*)&(flash_nvram_data.ldrSize), bfinLdrSize, 4, true);
80017762:	a9 97       	lsr	r7,0x9
80017764:	62 0b       	ld.w	r11,r1[0x0]
80017766:	30 19       	mov	r9,1
80017768:	ec 0a 00 0c 	add	r12,r6,r10
8001776c:	fe b0 d7 a6 	rcall	800126b8 <flashc_memset32>
  // write data 
  pSrc = (const void*)bfinLdrData;
80017770:	e0 68 31 08 	mov	r8,12552
  pDst = (void*)&(flash_nvram_data.ldrData);
  for(i=0; i<nPages; i++) {
80017774:	70 02       	ld.w	r2,r8[0x0]
80017776:	58 07       	cp.w	r7,0
80017778:	c4 60       	breq	80017804 <flash_write_ldr+0xb0>
8001777a:	e0 68 03 e8 	mov	r8,1000
8001777e:	30 09       	mov	r9,0
80017780:	e0 6a 18 67 	mov	r10,6247
80017784:	ea 1a 03 ef 	orh	r10,0x3ef
80017788:	30 0b       	mov	r11,0
8001778a:	2b 86       	sub	r6,-72
8001778c:	e0 a0 5a c9 	rcall	80022d1e <__avr32_udiv64>
80017790:	04 95       	mov	r5,r2
    flashc_memcpy((void*)pDst, (const void*)pSrc, 0x200, true);
80017792:	14 93       	mov	r3,r10
80017794:	30 04       	mov	r4,0
80017796:	30 19       	mov	r9,1
80017798:	0a 9b       	mov	r11,r5
8001779a:	e0 6a 02 00 	mov	r10,512
    pDst += 0x200;
    pSrc += 0x200;
8001779e:	0c 9c       	mov	r12,r6
  flashc_memset32((void*)&(flash_nvram_data.ldrSize), bfinLdrSize, 4, true);
  // write data 
  pSrc = (const void*)bfinLdrData;
  pDst = (void*)&(flash_nvram_data.ldrData);
  for(i=0; i<nPages; i++) {
    flashc_memcpy((void*)pDst, (const void*)pSrc, 0x200, true);
800177a0:	ea c5 fe 00 	sub	r5,r5,-512
    pDst += 0x200;
800177a4:	fe b0 d4 ac 	rcall	800120fc <flashc_memcpy>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800177a8:	ec c6 fe 00 	sub	r6,r6,-512
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800177ac:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800177b0:	f2 03 00 0a 	add	r10,r9,r3
800177b4:	e1 b8 00 42 	mfsr	r8,0x108
800177b8:	14 39       	cp.w	r9,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800177ba:	e0 8b 00 1a 	brhi	800177ee <flash_write_ldr+0x9a>
800177be:	12 38       	cp.w	r8,r9
800177c0:	c0 83       	brcs	800177d0 <flash_write_ldr+0x7c>
800177c2:	14 38       	cp.w	r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800177c4:	e0 8b 00 06 	brhi	800177d0 <flash_write_ldr+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800177c8:	e1 b8 00 42 	mfsr	r8,0x108
  // write size
  flashc_memset32((void*)&(flash_nvram_data.ldrSize), bfinLdrSize, 4, true);
  // write data 
  pSrc = (const void*)bfinLdrData;
  pDst = (void*)&(flash_nvram_data.ldrData);
  for(i=0; i<nPages; i++) {
800177cc:	12 38       	cp.w	r8,r9
800177ce:	cf a2       	brcc	800177c2 <flash_write_ldr+0x6e>
800177d0:	2f f4       	sub	r4,-1
800177d2:	08 37       	cp.w	r7,r4
800177d4:	fe 9b ff e1 	brhi	80017796 <flash_write_ldr+0x42>
    pDst += 0x200;
    pSrc += 0x200;
    delay_ms(1);
  }
  // remaining bytes
  rem = bfinLdrSize - (nPages * 0x200);
800177d8:	a9 77       	lsl	r7,0x9
  flashc_memcpy((void*)pDst, (const void*)pSrc, rem, true);
800177da:	0e 02       	add	r2,r7
800177dc:	62 0a       	ld.w	r10,r1[0x0]
800177de:	04 9b       	mov	r11,r2
800177e0:	0e 1a       	sub	r10,r7
800177e2:	0c 9c       	mov	r12,r6
800177e4:	30 19       	mov	r9,1
}
800177e6:	fe b0 d4 8b 	rcall	800120fc <flashc_memcpy>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800177ea:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800177ee:	10 39       	cp.w	r9,r8
800177f0:	e0 88 00 04 	brls	800177f8 <flash_write_ldr+0xa4>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800177f4:	10 3a       	cp.w	r10,r8
800177f6:	ce d3       	brcs	800177d0 <flash_write_ldr+0x7c>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800177f8:	e1 b8 00 42 	mfsr	r8,0x108
800177fc:	10 39       	cp.w	r9,r8
800177fe:	fe 98 ff fd 	brls	800177f8 <flash_write_ldr+0xa4>
80017802:	cf 9b       	rjmp	800177f4 <flash_write_ldr+0xa0>
80017804:	2b 86       	sub	r6,-72
80017806:	ce bb       	rjmp	800177dc <flash_write_ldr+0x88>
80017808:	80 04       	ld.sh	r4,r0[0x0]
	...

8001780c <flash_read_ldr>:
8001780c:	eb cd 40 c0 	pushm	r6-r7,lr
80017810:	48 b6       	lddpc	r6,8001783c <flash_read_ldr+0x30>
80017812:	6c 18       	ld.w	r8,r6[0x4]
80017814:	e0 67 0b 90 	mov	r7,2960
80017818:	48 ac       	lddpc	r12,80017840 <flash_read_ldr+0x34>
8001781a:	8f 08       	st.w	r7[0x0],r8
}

// read default blackfin
void flash_read_ldr(void) {
  bfinLdrSize = flash_nvram_data.ldrSize;
  print_dbg("\r\n read ldrSize from flash: ");
8001781c:	fe b0 db c0 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(bfinLdrSize);
80017820:	6e 0c       	ld.w	r12,r7[0x0]
80017822:	fe b0 db c3 	rcall	80012fa8 <print_dbg_ulong>
  memcpy((void*)bfinLdrData, (void*)flash_nvram_data.ldrData, bfinLdrSize); 
80017826:	e0 68 31 08 	mov	r8,12552
8001782a:	ec cb ff b8 	sub	r11,r6,-72
8001782e:	6e 0a       	ld.w	r10,r7[0x0]
80017830:	70 0c       	ld.w	r12,r8[0x0]
  //  print_flash((u32)flash_nvram_data.ldrData, bfinLdrSize);
}
80017832:	e0 a0 5d ed 	rcall	8002340c <memcpy>
80017836:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001783a:	d7 03       	nop
8001783c:	80 04       	ld.sh	r4,r0[0x0]
8001783e:	00 00       	add	r0,r0
80017840:	80 02       	ld.sh	r2,r0[0x0]
80017842:	43 dc       	lddsp	r12,sp[0xf4]

80017844 <init_flash>:
80017844:	d4 01       	pushm	lr
80017846:	49 5c       	lddpc	r12,80017898 <init_flash+0x54>
80017848:	fe b0 db aa 	rcall	80012f9c <print_dbg>
8001784c:	e0 7c 00 00 	mov	r12,65536
80017850:	e0 a0 05 48 	rcall	800182e0 <alloc_mem>
  u32 i;

  print_dbg("\r\n init flash... ");

  // allocate bfin loader buf
  bfinLdrData = alloc_mem(BFIN_LDR_MAX_BYTES);
80017854:	e0 6a 31 08 	mov	r10,12552
80017858:	30 08       	mov	r8,0
  for(i=0; i<BFIN_LDR_MAX_BYTES; i++) { bfinLdrData[i] = 0; }
8001785a:	95 0c       	st.w	r10[0x0],r12
8001785c:	10 99       	mov	r9,r8
8001785e:	c0 28       	rjmp	80017862 <init_flash+0x1e>
80017860:	74 0c       	ld.w	r12,r10[0x0]
80017862:	10 0c       	add	r12,r8
80017864:	b8 89       	st.b	r12[0x0],r9
80017866:	2f f8       	sub	r8,-1
80017868:	e0 58 00 00 	cp.w	r8,65536

  if(flash_nvram_data.firstRun != FIRSTRUN_MAGIC) {
8001786c:	cf a1       	brne	80017860 <init_flash+0x1c>
8001786e:	48 cc       	lddpc	r12,8001789c <init_flash+0x58>
80017870:	e0 69 32 10 	mov	r9,12816
80017874:	ea 19 76 54 	orh	r9,0x7654
80017878:	78 08       	ld.w	r8,r12[0x0]
8001787a:	12 38       	cp.w	r8,r9
    // set size=0 so we won't attempt unitialized bfin load on next start
    bfinLdrSize = 0;
8001787c:	c0 c0       	breq	80017894 <init_flash+0x50>
8001787e:	30 08       	mov	r8,0
    flashc_memset32((void*)&(flash_nvram_data.ldrSize), 0x00000000, 4, true);
80017880:	e0 69 0b 90 	mov	r9,2960
80017884:	10 9b       	mov	r11,r8
80017886:	93 08       	st.w	r9[0x0],r8
80017888:	30 4a       	mov	r10,4
8001788a:	30 19       	mov	r9,1
8001788c:	2f cc       	sub	r12,-4
8001788e:	fe b0 d7 15 	rcall	800126b8 <flashc_memset32>

  // allocate bfin loader buf
  bfinLdrData = alloc_mem(BFIN_LDR_MAX_BYTES);
  for(i=0; i<BFIN_LDR_MAX_BYTES; i++) { bfinLdrData[i] = 0; }

  if(flash_nvram_data.firstRun != FIRSTRUN_MAGIC) {
80017892:	da 0a       	popm	pc,r12=1
80017894:	d8 0a       	popm	pc,r12=0
80017896:	d7 03       	nop
80017898:	80 02       	ld.sh	r2,r0[0x0]
8001789a:	43 fc       	lddsp	r12,sp[0xfc]
8001789c:	80 04       	ld.sh	r4,r0[0x0]
	...

800178a0 <font_string>:
  return p;
}


// render a string of packed glyphs to a buffer
u8* font_string(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
800178a0:	eb cd 40 fe 	pushm	r1-r7,lr
800178a4:	40 8e       	lddsp	lr,sp[0x20]
  // u32 x = 0;  // columns processed
  // u32 off = 0; // offset
  u8* max = buf + size;
800178a6:	f6 0a 00 03 	add	r3,r11,r10
  while (buf < max) {
800178aa:	06 3b       	cp.w	r11,r3
800178ac:	e0 82 00 8c 	brhs	800179c4 <font_string+0x124>
    if (*str == 0) {
800178b0:	19 8a       	ld.ub	r10,r12[0x0]
800178b2:	58 0a       	cp.w	r10,0
800178b4:	e0 80 00 88 	breq	800179c4 <font_string+0x124>
800178b8:	4c 52       	lddpc	r2,800179cc <font_string+0x12c>
// return columns used
extern u8* font_glyph(char ch, u8* buf, u8 w, u8 a, u8 b) {
  u8 i=0;
  u8 j;
  u8 * p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);
800178ba:	22 0a       	sub	r10,32
800178bc:	e4 0a 00 3a 	add	r10,r2,r10<<0x3
  // columns to draw
  u8 cols = FONT_CHARW - gl->first - gl->last;
800178c0:	15 85       	ld.ub	r5,r10[0x0]
800178c2:	15 97       	ld.ub	r7,r10[0x1]
800178c4:	ea 04 11 00 	rsub	r4,r5,0
800178c8:	0e 14       	sub	r4,r7
800178ca:	2f a4       	sub	r4,-6
800178cc:	5c 54       	castu.b	r4
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
800178ce:	c7 20       	breq	800179b2 <font_string+0x112>
800178d0:	16 97       	mov	r7,r11
800178d2:	30 06       	mov	r6,0
800178d4:	c0 28       	rjmp	800178d8 <font_string+0x38>
800178d6:	15 85       	ld.ub	r5,r10[0x0]
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
800178d8:	f4 05 00 05 	add	r5,r10,r5
800178dc:	0c 05       	add	r5,r6
800178de:	0b a5       	ld.ub	r5,r5[0x2]
800178e0:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
800178e4:	f0 05 17 10 	movne	r5,r8
800178e8:	fc 05 17 00 	moveq	r5,lr
800178ec:	ae 85       	st.b	r7[0x0],r5
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
800178ee:	ee 09 00 01 	add	r1,r7,r9
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
800178f2:	15 85       	ld.ub	r5,r10[0x0]
800178f4:	f4 06 00 07 	add	r7,r10,r6
800178f8:	ee 05 00 05 	add	r5,r7,r5
800178fc:	0b a5       	ld.ub	r5,r5[0x2]
800178fe:	e2 15 00 02 	andl	r5,0x2,COH
80017902:	f0 05 17 10 	movne	r5,r8
80017906:	fc 05 17 00 	moveq	r5,lr
8001790a:	a2 85       	st.b	r1[0x0],r5
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
8001790c:	12 01       	add	r1,r9
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
8001790e:	15 85       	ld.ub	r5,r10[0x0]
80017910:	ee 05 00 05 	add	r5,r7,r5
80017914:	0b a5       	ld.ub	r5,r5[0x2]
80017916:	e2 15 00 04 	andl	r5,0x4,COH
8001791a:	f0 05 17 10 	movne	r5,r8
8001791e:	fc 05 17 00 	moveq	r5,lr
80017922:	a2 85       	st.b	r1[0x0],r5
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
80017924:	12 01       	add	r1,r9
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
80017926:	15 85       	ld.ub	r5,r10[0x0]
80017928:	ee 05 00 05 	add	r5,r7,r5
8001792c:	0b a5       	ld.ub	r5,r5[0x2]
8001792e:	e2 15 00 08 	andl	r5,0x8,COH
80017932:	f0 05 17 10 	movne	r5,r8
80017936:	fc 05 17 00 	moveq	r5,lr
8001793a:	a2 85       	st.b	r1[0x0],r5
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
8001793c:	12 01       	add	r1,r9
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
8001793e:	15 85       	ld.ub	r5,r10[0x0]
80017940:	ee 05 00 05 	add	r5,r7,r5
80017944:	0b a5       	ld.ub	r5,r5[0x2]
80017946:	e2 15 00 10 	andl	r5,0x10,COH
8001794a:	f0 05 17 10 	movne	r5,r8
8001794e:	fc 05 17 00 	moveq	r5,lr
80017952:	a2 85       	st.b	r1[0x0],r5
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
80017954:	12 01       	add	r1,r9
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
80017956:	15 85       	ld.ub	r5,r10[0x0]
80017958:	ee 05 00 05 	add	r5,r7,r5
8001795c:	0b a5       	ld.ub	r5,r5[0x2]
8001795e:	e2 15 00 20 	andl	r5,0x20,COH
80017962:	f0 05 17 10 	movne	r5,r8
80017966:	fc 05 17 00 	moveq	r5,lr
8001796a:	a2 85       	st.b	r1[0x0],r5
      //      if(*buf) { print_dbg("#"); } else { print_dbg("_"); }
      // point at next row
      p += w;
8001796c:	12 01       	add	r1,r9
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      *p = gl->data[i + gl->first] & (1 << j) ? a : b;
8001796e:	15 85       	ld.ub	r5,r10[0x0]
80017970:	ee 05 00 05 	add	r5,r7,r5
80017974:	0b a5       	ld.ub	r5,r5[0x2]
80017976:	e2 15 00 40 	andl	r5,0x40,COH
8001797a:	f0 05 17 10 	movne	r5,r8
8001797e:	fc 05 17 00 	moveq	r5,lr
80017982:	a2 85       	st.b	r1[0x0],r5
80017984:	15 85       	ld.ub	r5,r10[0x0]
80017986:	0a 07       	add	r7,r5
80017988:	0f a7       	ld.ub	r7,r7[0x2]
8001798a:	e2 17 00 80 	andl	r7,0x80,COH
8001798e:	f0 07 17 10 	movne	r7,r8
80017992:	fc 07 17 00 	moveq	r7,lr
80017996:	e2 09 0b 07 	st.b	r1[r9],r7
  // columns to draw
  u8 cols = FONT_CHARW - gl->first - gl->last;
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
8001799a:	08 95       	mov	r5,r4
    }
    // print_dbg("\r\n");
    // increment column count
    i++;
    // reset pointer to row
    p = buf + i;
8001799c:	ec c7 ff ff 	sub	r7,r6,-1
800179a0:	2f f6       	sub	r6,-1
800179a2:	5c 57       	castu.b	r7
800179a4:	f6 07 00 07 	add	r7,r11,r7
  // columns to draw
  u8 cols = FONT_CHARW - gl->first - gl->last;
  // hm...
  //  w >>= 1;
  //  print_dbg("\r\n");
  while(i < cols) {
800179a8:	ec 04 18 00 	cp.b	r4,r6
800179ac:	fe 9b ff 95 	brhi	800178d6 <font_string+0x36>
800179b0:	0e 9b       	mov	r11,r7
      // end of string
      break;
    }
    buf = font_glyph(*str, buf, w, a, b);
    // 1-column space between chars
    buf++;
800179b2:	2f fb       	sub	r11,-1
// render a string of packed glyphs to a buffer
u8* font_string(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
  // u32 x = 0;  // columns processed
  // u32 off = 0; // offset
  u8* max = buf + size;
  while (buf < max) {
800179b4:	16 33       	cp.w	r3,r11
800179b6:	e0 88 00 07 	brls	800179c4 <font_string+0x124>
      break;
    }
    buf = font_glyph(*str, buf, w, a, b);
    // 1-column space between chars
    buf++;
    str++;
800179ba:	2f fc       	sub	r12,-1
u8* font_string(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
  // u32 x = 0;  // columns processed
  // u32 off = 0; // offset
  u8* max = buf + size;
  while (buf < max) {
    if (*str == 0) {
800179bc:	19 8a       	ld.ub	r10,r12[0x0]
800179be:	58 0a       	cp.w	r10,0
800179c0:	fe 91 ff 7d 	brne	800178ba <font_string+0x1a>
    // 1-column space between chars
    buf++;
    str++;
  }
  return buf;
}
800179c4:	16 9c       	mov	r12,r11
800179c6:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800179ca:	d7 03       	nop
800179cc:	80 02       	ld.sh	r2,r0[0x0]
800179ce:	44 0e       	lddsp	lr,sp[0x100]

800179d0 <font_string_big>:

// same as font_string, double size
u8* font_string_big(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
800179d0:	eb cd 40 fe 	pushm	r1-r7,lr
800179d4:	40 8e       	lddsp	lr,sp[0x20]
  u8* max = buf + size;
800179d6:	f6 0a 00 03 	add	r3,r11,r10
  while (buf < max) {
800179da:	06 3b       	cp.w	r11,r3
800179dc:	e0 82 00 ac 	brhs	80017b34 <font_string_big+0x164>
    if (*str == 0) {
800179e0:	19 8a       	ld.ub	r10,r12[0x0]
800179e2:	58 0a       	cp.w	r10,0
800179e4:	e0 80 00 a8 	breq	80017b34 <font_string_big+0x164>
800179e8:	4d 52       	lddpc	r2,80017b3c <font_string_big+0x16c>

// same as font_glyph, double size
extern u8* font_glyph_big(char ch, u8* buf, u8 w, u8 a, u8 b) {
  u8 i=0, j, val;
  u8* p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);
800179ea:	22 0a       	sub	r10,32
800179ec:	e4 0a 00 3a 	add	r10,r2,r10<<0x3
  // columns to draw
  u8 cols = (FONT_CHARW - gl->first - gl->last);
800179f0:	15 85       	ld.ub	r5,r10[0x0]
800179f2:	15 97       	ld.ub	r7,r10[0x1]
800179f4:	ea 04 11 00 	rsub	r4,r5,0
800179f8:	0e 14       	sub	r4,r7
800179fa:	2f a4       	sub	r4,-6
800179fc:	5c 54       	castu.b	r4
  // byte offset produced by 1 full column
  //  u32 colOffset = FONT_CHARH * w - 1;
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
800179fe:	e0 80 00 92 	breq	80017b22 <font_string_big+0x152>
80017a02:	16 91       	mov	r1,r11
80017a04:	30 06       	mov	r6,0
80017a06:	c0 28       	rjmp	80017a0a <font_string_big+0x3a>
80017a08:	15 85       	ld.ub	r5,r10[0x0]
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017a0a:	f4 06 00 07 	add	r7,r10,r6
80017a0e:	ee 05 00 05 	add	r5,r7,r5
80017a12:	0b a5       	ld.ub	r5,r5[0x2]
80017a14:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80017a18:	f0 05 17 10 	movne	r5,r8
80017a1c:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017a20:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017a22:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017a24:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017a26:	a2 95       	st.b	r1[0x1],r5
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017a28:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
      // point at next row
      p += w;
80017a2a:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017a2c:	15 85       	ld.ub	r5,r10[0x0]
80017a2e:	ee 05 00 05 	add	r5,r7,r5
80017a32:	0b a5       	ld.ub	r5,r5[0x2]
80017a34:	e2 15 00 02 	andl	r5,0x2,COH
80017a38:	f0 05 17 10 	movne	r5,r8
80017a3c:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017a40:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017a42:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017a44:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017a46:	a2 95       	st.b	r1[0x1],r5
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017a48:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
      // point at next row
      p += w;
80017a4a:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017a4c:	15 85       	ld.ub	r5,r10[0x0]
80017a4e:	ee 05 00 05 	add	r5,r7,r5
80017a52:	0b a5       	ld.ub	r5,r5[0x2]
80017a54:	e2 15 00 04 	andl	r5,0x4,COH
80017a58:	f0 05 17 10 	movne	r5,r8
80017a5c:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017a60:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017a62:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017a64:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017a66:	a2 95       	st.b	r1[0x1],r5
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017a68:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
      // point at next row
      p += w;
80017a6a:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017a6c:	15 85       	ld.ub	r5,r10[0x0]
80017a6e:	ee 05 00 05 	add	r5,r7,r5
80017a72:	0b a5       	ld.ub	r5,r5[0x2]
80017a74:	e2 15 00 08 	andl	r5,0x8,COH
80017a78:	f0 05 17 10 	movne	r5,r8
80017a7c:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017a80:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017a82:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017a84:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017a86:	a2 95       	st.b	r1[0x1],r5
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017a88:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
      // point at next row
      p += w;
80017a8a:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017a8c:	15 85       	ld.ub	r5,r10[0x0]
80017a8e:	ee 05 00 05 	add	r5,r7,r5
80017a92:	0b a5       	ld.ub	r5,r5[0x2]
80017a94:	e2 15 00 10 	andl	r5,0x10,COH
80017a98:	f0 05 17 10 	movne	r5,r8
80017a9c:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017aa0:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017aa2:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017aa4:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017aa6:	a2 95       	st.b	r1[0x1],r5
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017aa8:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
      // point at next row
      p += w;
80017aaa:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017aac:	15 85       	ld.ub	r5,r10[0x0]
80017aae:	ee 05 00 05 	add	r5,r7,r5
80017ab2:	0b a5       	ld.ub	r5,r5[0x2]
80017ab4:	e2 15 00 20 	andl	r5,0x20,COH
80017ab8:	f0 05 17 10 	movne	r5,r8
80017abc:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017ac0:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017ac2:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017ac4:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017ac6:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017ac8:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017aca:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017acc:	15 85       	ld.ub	r5,r10[0x0]
80017ace:	ee 05 00 05 	add	r5,r7,r5
80017ad2:	0b a5       	ld.ub	r5,r5[0x2]
80017ad4:	e2 15 00 40 	andl	r5,0x40,COH
80017ad8:	f0 05 17 10 	movne	r5,r8
80017adc:	fc 05 17 00 	moveq	r5,lr
      *p = val;
80017ae0:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
80017ae2:	a2 95       	st.b	r1[0x1],r5
      // point at next row
      p += w;
80017ae4:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017ae6:	a2 95       	st.b	r1[0x1],r5
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017ae8:	a2 85       	st.b	r1[0x0],r5
      *(p +1) = val;
      // point at next row
      p += w;
80017aea:	e2 09 00 05 	add	r5,r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017aee:	15 81       	ld.ub	r1,r10[0x0]
80017af0:	02 07       	add	r7,r1
80017af2:	0f a7       	ld.ub	r7,r7[0x2]
80017af4:	e2 17 00 80 	andl	r7,0x80,COH
80017af8:	f0 07 17 10 	movne	r7,r8
80017afc:	fc 07 17 00 	moveq	r7,lr
      *p = val;
80017b00:	aa 87       	st.b	r5[0x0],r7
      *(p +1) = val;
80017b02:	aa 97       	st.b	r5[0x1],r7
      // point at next row
      p += w;
80017b04:	12 05       	add	r5,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
80017b06:	aa 97       	st.b	r5[0x1],r7
      *p = val;
      *(p +1) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017b08:	aa 87       	st.b	r5[0x0],r7
    // increment for next row
    //    buf += 2;
    // increment column count
    i++;
    // set pointer to next (pixel*2) in first row
    p = buf + (i*2);
80017b0a:	ec c1 ff ff 	sub	r1,r6,-1
  // byte offset produced by 1 full column
  //  u32 colOffset = FONT_CHARH * w - 1;
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
80017b0e:	08 97       	mov	r7,r4
    // increment for next row
    //    buf += 2;
    // increment column count
    i++;
    // set pointer to next (pixel*2) in first row
    p = buf + (i*2);
80017b10:	5c 51       	castu.b	r1
80017b12:	2f f6       	sub	r6,-1
80017b14:	f6 01 00 11 	add	r1,r11,r1<<0x1
  // byte offset produced by 1 full column
  //  u32 colOffset = FONT_CHARH * w - 1;
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
80017b18:	ec 04 18 00 	cp.b	r4,r6
80017b1c:	fe 9b ff 76 	brhi	80017a08 <font_string_big+0x38>
80017b20:	02 9b       	mov	r11,r1
      // end of string
      break;
    }
    buf = font_glyph_big(*str, buf, w, a, b);
    // 1-column space between chars
    buf++;
80017b22:	2f fb       	sub	r11,-1
}

// same as font_string, double size
u8* font_string_big(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
  u8* max = buf + size;
  while (buf < max) {
80017b24:	16 33       	cp.w	r3,r11
80017b26:	e0 88 00 07 	brls	80017b34 <font_string_big+0x164>
      break;
    }
    buf = font_glyph_big(*str, buf, w, a, b);
    // 1-column space between chars
    buf++;
    str++;
80017b2a:	2f fc       	sub	r12,-1

// same as font_string, double size
u8* font_string_big(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
  u8* max = buf + size;
  while (buf < max) {
    if (*str == 0) {
80017b2c:	19 8a       	ld.ub	r10,r12[0x0]
80017b2e:	58 0a       	cp.w	r10,0
80017b30:	fe 91 ff 5d 	brne	800179ea <font_string_big+0x1a>
    // 1-column space between chars
    buf++;
    str++;
  }
  return buf;
}
80017b34:	16 9c       	mov	r12,r11
80017b36:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80017b3a:	d7 03       	nop
80017b3c:	80 02       	ld.sh	r2,r0[0x0]
80017b3e:	44 0e       	lddsp	lr,sp[0x100]

80017b40 <font_string_bigbig>:

// same as font_string, 4x size
u8* font_string_bigbig(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
80017b40:	eb cd 40 fe 	pushm	r1-r7,lr
80017b44:	40 8e       	lddsp	lr,sp[0x20]
  u8* max = buf + size;
80017b46:	f6 0a 00 04 	add	r4,r11,r10
  while (buf < max) {
80017b4a:	08 3b       	cp.w	r11,r4
80017b4c:	e0 82 01 1c 	brhs	80017d84 <font_string_bigbig+0x244>
    if (*str == 0) {
80017b50:	19 8a       	ld.ub	r10,r12[0x0]
80017b52:	58 0a       	cp.w	r10,0
80017b54:	e0 80 01 18 	breq	80017d84 <font_string_bigbig+0x244>
80017b58:	fe f3 02 34 	ld.w	r3,pc[564]

// same as font_glyph,m 4x size
extern u8* font_glyph_bigbig(char ch, u8* buf, u8 w, u8 a, u8 b) {
  u8 i=0, j, val;
  u8* p = buf;
  const glyph_t* gl = &(font_data[ch - FONT_ASCII_OFFSET]);
80017b5c:	22 0a       	sub	r10,32
80017b5e:	e6 0a 00 37 	add	r7,r3,r10<<0x3
  // columns to draw
  u8 cols = (FONT_CHARW - gl->first - gl->last);
80017b62:	0f 8a       	ld.ub	r10,r7[0x0]
80017b64:	0f 96       	ld.ub	r6,r7[0x1]
80017b66:	f4 05 11 00 	rsub	r5,r10,0
80017b6a:	0c 15       	sub	r5,r6
80017b6c:	2f a5       	sub	r5,-6
80017b6e:	5c 55       	castu.b	r5
  // byte offset produced by 1 full column
  //  u32 colOffset = FONT_CHARH * w - 1;
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
80017b70:	e0 80 01 01 	breq	80017d72 <font_string_bigbig+0x232>
80017b74:	16 91       	mov	r1,r11
80017b76:	30 06       	mov	r6,0
80017b78:	c0 28       	rjmp	80017b7c <font_string_bigbig+0x3c>
80017b7a:	0f 8a       	ld.ub	r10,r7[0x0]
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017b7c:	ee 06 00 02 	add	r2,r7,r6
80017b80:	e4 0a 00 0a 	add	r10,r2,r10
80017b84:	15 aa       	ld.ub	r10,r10[0x2]
80017b86:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80017b8a:	f0 0a 17 10 	movne	r10,r8
80017b8e:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017b92:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017b94:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017b96:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017b98:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017b9a:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017b9c:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017b9e:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017ba0:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017ba2:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017ba4:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017ba6:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017ba8:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017baa:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017bac:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017bae:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017bb0:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017bb2:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
      *(p +3) = val;
80017bb4:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
80017bb6:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
      // point at next row
      p += w;
80017bb8:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017bba:	0f 8a       	ld.ub	r10,r7[0x0]
80017bbc:	e4 0a 00 0a 	add	r10,r2,r10
80017bc0:	15 aa       	ld.ub	r10,r10[0x2]
80017bc2:	e2 1a 00 02 	andl	r10,0x2,COH
80017bc6:	f0 0a 17 10 	movne	r10,r8
80017bca:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017bce:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017bd0:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017bd2:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017bd4:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017bd6:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017bd8:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017bda:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017bdc:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017bde:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017be0:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017be2:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017be4:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017be6:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017be8:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017bea:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017bec:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017bee:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017bf0:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017bf2:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017bf4:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017bf6:	0f 8a       	ld.ub	r10,r7[0x0]
80017bf8:	e4 0a 00 0a 	add	r10,r2,r10
80017bfc:	15 aa       	ld.ub	r10,r10[0x2]
80017bfe:	e2 1a 00 04 	andl	r10,0x4,COH
80017c02:	f0 0a 17 10 	movne	r10,r8
80017c06:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017c0a:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c0c:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c0e:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c10:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c12:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c14:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c16:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c18:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c1a:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c1c:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c1e:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c20:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c22:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c24:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c26:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
80017c28:	a2 ba       	st.b	r1[0x3],r10
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017c2a:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c2c:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c2e:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
      // point at next row
      p += w;
80017c30:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017c32:	0f 8a       	ld.ub	r10,r7[0x0]
80017c34:	e4 0a 00 0a 	add	r10,r2,r10
80017c38:	15 aa       	ld.ub	r10,r10[0x2]
80017c3a:	e2 1a 00 08 	andl	r10,0x8,COH
80017c3e:	f0 0a 17 10 	movne	r10,r8
80017c42:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017c46:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c48:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c4a:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c4c:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c4e:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c50:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c52:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c54:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c56:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c58:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c5a:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c5c:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c5e:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c60:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c62:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c64:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c66:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
      *(p +3) = val;
80017c68:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
80017c6a:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
      // point at next row
      p += w;
80017c6c:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017c6e:	0f 8a       	ld.ub	r10,r7[0x0]
80017c70:	e4 0a 00 0a 	add	r10,r2,r10
80017c74:	15 aa       	ld.ub	r10,r10[0x2]
80017c76:	e2 1a 00 10 	andl	r10,0x10,COH
80017c7a:	f0 0a 17 10 	movne	r10,r8
80017c7e:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017c82:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c84:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c86:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c88:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c8a:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c8c:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c8e:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c90:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c92:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c94:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017c96:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017c98:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017c9a:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017c9c:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017c9e:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017ca0:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017ca2:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
      *(p +3) = val;
80017ca4:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
80017ca6:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
      // point at next row
      p += w;
80017ca8:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017caa:	0f 8a       	ld.ub	r10,r7[0x0]
80017cac:	e4 0a 00 0a 	add	r10,r2,r10
80017cb0:	15 aa       	ld.ub	r10,r10[0x2]
80017cb2:	e2 1a 00 20 	andl	r10,0x20,COH
80017cb6:	f0 0a 17 10 	movne	r10,r8
80017cba:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017cbe:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017cc0:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017cc2:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017cc4:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017cc6:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017cc8:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017cca:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017ccc:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017cce:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017cd0:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017cd2:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017cd4:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017cd6:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017cd8:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017cda:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
80017cdc:	a2 ba       	st.b	r1[0x3],r10
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017cde:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017ce0:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017ce2:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
      // point at next row
      p += w;
80017ce4:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017ce6:	0f 8a       	ld.ub	r10,r7[0x0]
80017ce8:	e4 0a 00 0a 	add	r10,r2,r10
80017cec:	15 aa       	ld.ub	r10,r10[0x2]
80017cee:	e2 1a 00 40 	andl	r10,0x40,COH
80017cf2:	f0 0a 17 10 	movne	r10,r8
80017cf6:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017cfa:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017cfc:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017cfe:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017d00:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017d02:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017d04:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017d06:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017d08:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017d0a:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017d0c:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
80017d0e:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017d10:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017d12:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017d14:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017d16:	12 01       	add	r1,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
80017d18:	a2 ba       	st.b	r1[0x3],r10
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017d1a:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017d1c:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017d1e:	a2 aa       	st.b	r1[0x2],r10
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017d20:	0f 8a       	ld.ub	r10,r7[0x0]
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
80017d22:	12 01       	add	r1,r9
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
    for(j=0; j<FONT_CHARH; j++) {
      val = gl->data[i + gl->first] & (1 << j) ? a : b;
80017d24:	14 02       	add	r2,r10
80017d26:	05 aa       	ld.ub	r10,r2[0x2]
80017d28:	e2 1a 00 80 	andl	r10,0x80,COH
80017d2c:	f0 0a 17 10 	movne	r10,r8
80017d30:	fc 0a 17 00 	moveq	r10,lr
      *p = val;
80017d34:	a2 8a       	st.b	r1[0x0],r10
      *(p +1) = val;
80017d36:	a2 9a       	st.b	r1[0x1],r10
      *(p +2) = val;
80017d38:	a2 aa       	st.b	r1[0x2],r10
      *(p +3) = val;
80017d3a:	a2 ba       	st.b	r1[0x3],r10
      // point at next row
      p += w;
80017d3c:	e2 09 00 02 	add	r2,r1,r9
      // fill the next row as well
      *p = val;
80017d40:	a4 8a       	st.b	r2[0x0],r10
      *(p +1) = val;
80017d42:	a4 9a       	st.b	r2[0x1],r10
      *(p +2) = val;
80017d44:	a4 aa       	st.b	r2[0x2],r10
      *(p +3) = val;
80017d46:	a4 ba       	st.b	r2[0x3],r10
      // point at next row
      p += w;
80017d48:	12 02       	add	r2,r9
      // fill the next row as well
      *p = val;
80017d4a:	a4 8a       	st.b	r2[0x0],r10
      *(p +1) = val;
80017d4c:	a4 9a       	st.b	r2[0x1],r10
      *(p +2) = val;
80017d4e:	a4 aa       	st.b	r2[0x2],r10
      *(p +3) = val;
80017d50:	a4 ba       	st.b	r2[0x3],r10
      // point at next row
      p += w;
80017d52:	12 02       	add	r2,r9
      // fill the next row as well
      *p = val;
      *(p +1) = val;
      *(p +2) = val;
      *(p +3) = val;
80017d54:	a4 ba       	st.b	r2[0x3],r10
      *(p +2) = val;
      *(p +3) = val;
      // point at next row
      p += w;
      // fill the next row as well
      *p = val;
80017d56:	a4 8a       	st.b	r2[0x0],r10
      *(p +1) = val;
80017d58:	a4 9a       	st.b	r2[0x1],r10
      *(p +2) = val;
80017d5a:	a4 aa       	st.b	r2[0x2],r10
    // increment for next row
    //    buf += 2;
    // increment column count
    i++;
    // set pointer to next (pixel*2) in first row
    p = buf + (i*4);
80017d5c:	ec c1 ff ff 	sub	r1,r6,-1
80017d60:	2f f6       	sub	r6,-1
80017d62:	5c 51       	castu.b	r1
80017d64:	f6 01 00 21 	add	r1,r11,r1<<0x2
  // byte offset produced by 1 full column
  //  u32 colOffset = FONT_CHARH * w - 1;
  // offset pointer
  //  pbuf = buf + (y*w + x);
  //  pbyf
  while(i < cols) {
80017d68:	ec 05 18 00 	cp.b	r5,r6
80017d6c:	fe 9b ff 07 	brhi	80017b7a <font_string_bigbig+0x3a>
80017d70:	02 9b       	mov	r11,r1
      // end of string
      break;
    }
    buf = font_glyph_bigbig(*str, buf, w, a, b);
    // 1-column space between chars
    buf++;
80017d72:	2f fb       	sub	r11,-1
}

// same as font_string, 4x size
u8* font_string_bigbig(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
  u8* max = buf + size;
  while (buf < max) {
80017d74:	16 34       	cp.w	r4,r11
80017d76:	e0 88 00 07 	brls	80017d84 <font_string_bigbig+0x244>
      break;
    }
    buf = font_glyph_bigbig(*str, buf, w, a, b);
    // 1-column space between chars
    buf++;
    str++;
80017d7a:	2f fc       	sub	r12,-1

// same as font_string, 4x size
u8* font_string_bigbig(const char* str, u8* buf, u32 size, u8 w, u8 a, u8 b) {
  u8* max = buf + size;
  while (buf < max) {
    if (*str == 0) {
80017d7c:	19 8a       	ld.ub	r10,r12[0x0]
80017d7e:	58 0a       	cp.w	r10,0
80017d80:	fe 91 fe ee 	brne	80017b5c <font_string_bigbig+0x1c>
    // 1-column space between chars
    buf++;
    str++;
  }
  return buf;
}
80017d84:	16 9c       	mov	r12,r11
80017d86:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80017d8a:	d7 03       	nop
80017d8c:	80 02       	ld.sh	r2,r0[0x0]
80017d8e:	44 0e       	lddsp	lr,sp[0x100]

80017d90 <init_usb_host>:
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
}


// initialize USB host stack
void init_usb_host (void) {
80017d90:	d4 01       	pushm	lr
  //  pm_configure_usb_clock();
  uhc_start();
80017d92:	fe b0 f0 ed 	rcall	80015f6c <uhc_start>
}
80017d96:	d8 02       	popm	pc

80017d98 <init_bfin_resources>:
80017d98:	eb cd 40 80 	pushm	r7,lr
  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
}

// intialize resources for bf533 communication: SPI, GPIO
void init_bfin_resources(void) {
80017d9c:	20 4d       	sub	sp,16
    //    .trans_delay  = 0,
    .trans_delay = 20,
    .stay_act     = 1,
    .spi_mode     = 1,
    .modfdis      = 1
  };
80017d9e:	49 78       	lddpc	r8,80017df8 <init_bfin_resources+0x60>
80017da0:	f0 ea 00 08 	ld.d	r10,r8[8]
80017da4:	fa eb 00 08 	st.d	sp[8],r10
80017da8:	f0 e8 00 00 	ld.d	r8,r8[0]
80017dac:	1a 97       	mov	r7,sp
80017dae:	fa e9 00 00 	st.d	sp[0],r8

  // assign pins to SPI.
  gpio_enable_module(BFIN_SPI_GPIO_MAP,
80017db2:	30 4b       	mov	r11,4
80017db4:	49 2c       	lddpc	r12,80017dfc <init_bfin_resources+0x64>
80017db6:	fe b0 d5 03 	rcall	800127bc <gpio_enable_module>
		     sizeof(BFIN_SPI_GPIO_MAP) / sizeof(BFIN_SPI_GPIO_MAP[0]));

  // intialize as master
  spi_initMaster(BFIN_SPI, &spiOptions);
80017dba:	1a 9b       	mov	r11,sp
80017dbc:	fe 7c 24 00 	mov	r12,-56320
80017dc0:	fe b0 d6 6a 	rcall	80012a94 <spi_initMaster>

  // set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(BFIN_SPI, 0, 0, 0);
80017dc4:	30 09       	mov	r9,0
80017dc6:	fe 7c 24 00 	mov	r12,-56320
80017dca:	12 9a       	mov	r10,r9
80017dcc:	12 9b       	mov	r11,r9
80017dce:	fe b0 d6 82 	rcall	80012ad2 <spi_selectionMode>

  // enable SPI.
  spi_enable(BFIN_SPI);
80017dd2:	fe 7c 24 00 	mov	r12,-56320
80017dd6:	fe b0 d7 25 	rcall	80012c20 <spi_enable>

  // intialize the chip register
  spi_setupChipReg(BFIN_SPI, &spiOptions, FPBA_HZ);
80017dda:	1a 9b       	mov	r11,sp
80017ddc:	e0 6a 14 80 	mov	r10,5248
80017de0:	ea 1a 03 ef 	orh	r10,0x3ef
80017de4:	fe 7c 24 00 	mov	r12,-56320
80017de8:	fe b0 d6 c6 	rcall	80012b74 <spi_setupChipReg>
  // enable pulldown on bfin HWAIT line
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
80017dec:	30 6c       	mov	r12,6
80017dee:	fe b0 d4 73 	rcall	800126d4 <gpio_enable_pin_pull_up>
}
80017df2:	2f cd       	sub	sp,-16
80017df4:	e3 cd 80 80 	ldm	sp++,r7,pc
80017df8:	80 02       	ld.sh	r2,r0[0x0]
80017dfa:	47 48       	lddsp	r8,sp[0x1d0]
80017dfc:	80 02       	ld.sh	r2,r0[0x0]
80017dfe:	47 28       	lddsp	r8,sp[0x1c8]

80017e00 <init_local_pdca>:
80017e00:	eb cd 40 b0 	pushm	r4-r5,r7,lr
80017e04:	20 cd       	sub	sp,48
80017e06:	49 4a       	lddpc	r10,80017e54 <init_local_pdca+0x54>
80017e08:	f4 e4 00 10 	ld.d	r4,r10[16]
80017e0c:	fa c7 ff e8 	sub	r7,sp,-24
80017e10:	49 29       	lddpc	r9,80017e58 <init_local_pdca+0x58>
80017e12:	ee e5 00 10 	st.d	r7[16],r4
80017e16:	f2 e4 00 10 	ld.d	r4,r9[16]
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017e1a:	fa e5 00 10 	st.d	sp[16],r4
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - SPI1 RX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017e1e:	f4 e4 00 00 	ld.d	r4,r10[0]
80017e22:	ee e5 00 00 	st.d	r7[0],r4
80017e26:	f4 e4 00 08 	ld.d	r4,r10[8]
80017e2a:	ee e5 00 08 	st.d	r7[8],r4
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017e2e:	f2 e4 00 00 	ld.d	r4,r9[0]

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80017e32:	1a 9b       	mov	r11,sp
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017e34:	fa e5 00 00 	st.d	sp[0],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80017e38:	30 1c       	mov	r12,1
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017e3a:	f2 e4 00 08 	ld.d	r4,r9[8]
80017e3e:	fa e5 00 08 	st.d	sp[8],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80017e42:	fe b0 d5 d6 	rcall	800129ee <pdca_init_channel>

  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
80017e46:	0e 9b       	mov	r11,r7
80017e48:	30 0c       	mov	r12,0
80017e4a:	fe b0 d5 d2 	rcall	800129ee <pdca_init_channel>
}
80017e4e:	2f 4d       	sub	sp,-48
80017e50:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc
80017e54:	80 02       	ld.sh	r2,r0[0x0]
80017e56:	47 68       	lddsp	r8,sp[0x1d8]
80017e58:	80 02       	ld.sh	r2,r0[0x0]
80017e5a:	47 10       	lddsp	r0,sp[0x1c4]

80017e5c <init_spi1>:
80017e5c:	d4 21       	pushm	r4-r7,lr
80017e5e:	20 4d       	sub	sp,16
    .trans_delay = 0,
    .spck_delay = 0,
    .stay_act = 1,
    .spi_mode = 3,
    .modfdis = 1
  };
80017e60:	4b 68       	lddpc	r8,80017f38 <init_spi1+0xdc>
80017e62:	f0 ea 00 08 	ld.d	r10,r8[8]
80017e66:	fa eb 00 08 	st.d	sp[8],r10
80017e6a:	f0 e8 00 00 	ld.d	r8,r8[0]
80017e6e:	1a 97       	mov	r7,sp
80017e70:	fa e9 00 00 	st.d	sp[0],r8

  // Assign GPIO to SPI.
  gpio_enable_module(OLED_SPI_GPIO_MAP,
80017e74:	30 6b       	mov	r11,6
80017e76:	4b 2c       	lddpc	r12,80017f3c <init_spi1+0xe0>
80017e78:	fe b0 d4 a2 	rcall	800127bc <gpio_enable_module>
		     sizeof(OLED_SPI_GPIO_MAP) / sizeof(OLED_SPI_GPIO_MAP[0]));
  // Initialize as master.
  spi_initMaster(OLED_SPI, &spiOptions);
80017e7c:	1a 9b       	mov	r11,sp
80017e7e:	fe 7c 28 00 	mov	r12,-55296
80017e82:	fe b0 d6 09 	rcall	80012a94 <spi_initMaster>
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(OLED_SPI, 0, 0, 0);
80017e86:	30 09       	mov	r9,0
80017e88:	fe 7c 28 00 	mov	r12,-55296
80017e8c:	12 9a       	mov	r10,r9
80017e8e:	12 9b       	mov	r11,r9
80017e90:	fe b0 d6 21 	rcall	80012ad2 <spi_selectionMode>
  // Enable SPI module.
  spi_enable(OLED_SPI);
80017e94:	fe 7c 28 00 	mov	r12,-55296
80017e98:	fe b0 d6 c4 	rcall	80012c20 <spi_enable>

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );
80017e9c:	1a 9b       	mov	r11,sp
80017e9e:	e0 6a 14 80 	mov	r10,5248
80017ea2:	ea 1a 03 ef 	orh	r10,0x3ef
80017ea6:	fe 7c 28 00 	mov	r12,-55296
80017eaa:	fe b0 d6 65 	rcall	80012b74 <spi_setupChipReg>

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
80017eae:	e0 68 2d 00 	mov	r8,11520
80017eb2:	ea 18 01 31 	orh	r8,0x131
80017eb6:	50 18       	stdsp	sp[0x4],r8
  spiOptions.bits         = 16;
80017eb8:	31 08       	mov	r8,16
80017eba:	fb 68 00 08 	st.b	sp[8],r8
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80017ebe:	30 58       	mov	r8,5
  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80017ec0:	30 06       	mov	r6,0

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
80017ec2:	30 15       	mov	r5,1
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80017ec4:	1a 9b       	mov	r11,sp
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80017ec6:	fb 68 00 0a 	st.b	sp[10],r8
  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80017eca:	fb 66 00 09 	st.b	sp[9],r6
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
80017ece:	fb 66 00 0b 	st.b	sp[11],r6
  spiOptions.modfdis      = 0;
80017ed2:	fb 66 00 0d 	st.b	sp[13],r6

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
80017ed6:	ba 85       	st.b	sp[0x0],r5
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
80017ed8:	30 24       	mov	r4,2
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80017eda:	e0 6a 14 80 	mov	r10,5248
80017ede:	ea 1a 03 ef 	orh	r10,0x3ef

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
80017ee2:	fb 64 00 0c 	st.b	sp[12],r4
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80017ee6:	fe 7c 28 00 	mov	r12,-55296
80017eea:	fe b0 d6 45 	rcall	80012b74 <spi_setupChipReg>

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
80017eee:	e0 68 1b 00 	mov	r8,6912
80017ef2:	ea 18 00 b7 	orh	r8,0xb7
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
80017ef6:	ba 84       	st.b	sp[0x0],r4
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
  spiOptions.bits        = SD_MMC_SPI_BITS; // Defined in conf_sd_mmc_spi.h;
  spiOptions.spck_delay  = 0;
  spiOptions.trans_delay = 0;
  spiOptions.stay_act    = 1;
  spiOptions.spi_mode    = 0;
80017ef8:	fb 66 00 0c 	st.b	sp[12],r6
  spiOptions.modfdis     = 1;
80017efc:	fb 65 00 0d 	st.b	sp[13],r5

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
80017f00:	20 4d       	sub	sp,16

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
80017f02:	50 58       	stdsp	sp[0x14],r8
  spiOptions.bits        = SD_MMC_SPI_BITS; // Defined in conf_sd_mmc_spi.h;
80017f04:	30 88       	mov	r8,8
  spiOptions.spck_delay  = 0;
80017f06:	fb 66 00 19 	st.b	sp[25],r6
  spiOptions.trans_delay = 0;
80017f0a:	fb 66 00 1a 	st.b	sp[26],r6
  spiOptions.stay_act    = 1;
80017f0e:	fb 65 00 1b 	st.b	sp[27],r5
  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
  spiOptions.bits        = SD_MMC_SPI_BITS; // Defined in conf_sd_mmc_spi.h;
80017f12:	fb 68 00 18 	st.b	sp[24],r8
  spiOptions.stay_act    = 1;
  spiOptions.spi_mode    = 0;
  spiOptions.modfdis     = 1;

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
80017f16:	ee e8 00 08 	ld.d	r8,r7[8]
80017f1a:	fa e9 00 08 	st.d	sp[8],r8
80017f1e:	ee e8 00 00 	ld.d	r8,r7[0]
80017f22:	e0 6c 14 80 	mov	r12,5248
80017f26:	ea 1c 03 ef 	orh	r12,0x3ef
80017f2a:	fa e9 00 00 	st.d	sp[0],r8
80017f2e:	fe b0 e0 8d 	rcall	80014048 <sd_mmc_spi_init>
80017f32:	2f cd       	sub	sp,-16
}
80017f34:	2f cd       	sub	sp,-16
80017f36:	d8 22       	popm	r4-r7,pc
80017f38:	80 02       	ld.sh	r2,r0[0x0]
80017f3a:	47 58       	lddsp	r8,sp[0x1d4]
80017f3c:	80 02       	ld.sh	r2,r0[0x0]
80017f3e:	47 a0       	lddsp	r0,sp[0x1e8]

80017f40 <init_ftdi_usart>:
80017f40:	d4 01       	pushm	lr
80017f42:	30 2b       	mov	r11,2
80017f44:	48 7c       	lddpc	r12,80017f60 <init_ftdi_usart+0x20>
80017f46:	fe b0 d4 3b 	rcall	800127bc <gpio_enable_module>
80017f4a:	e0 6a 14 80 	mov	r10,5248
80017f4e:	ea 1a 03 ef 	orh	r10,0x3ef
80017f52:	48 5b       	lddpc	r11,80017f64 <init_ftdi_usart+0x24>
80017f54:	fe 7c 14 00 	mov	r12,-60416
  // Set up GPIO for FTDI_USART
  gpio_enable_module(FTDI_USART_GPIO_MAP,
                     sizeof(FTDI_USART_GPIO_MAP) / sizeof(FTDI_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(FTDI_USART, &FTDI_USART_OPTIONS, FPBA_HZ);
80017f58:	fe b0 d7 b0 	rcall	80012eb8 <usart_init_rs232>
}
80017f5c:	d8 02       	popm	pc
80017f5e:	d7 03       	nop
80017f60:	80 02       	ld.sh	r2,r0[0x0]
80017f62:	47 90       	lddsp	r0,sp[0x1e4]
80017f64:	80 02       	ld.sh	r2,r0[0x0]
80017f66:	47 84       	lddsp	r4,sp[0x1e0]

80017f68 <init_tc>:
80017f68:	eb cd 40 80 	pushm	r7,lr
80017f6c:	48 bb       	lddpc	r11,80017f98 <init_tc+0x30>
80017f6e:	18 97       	mov	r7,r12
    .cpas  = 0,
    .lovrs = 0,
    .covfs = 0
  };
  // Initialize the timer/counter.
  tc_init_waveform(tc, &waveform_opt);
80017f70:	fe b0 d6 7a 	rcall	80012c64 <tc_init_waveform>

  // set timer compare trigger.
  // we want it to overflow and generate an interrupt every 1 ms
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
80017f74:	e0 6a 02 03 	mov	r10,515
80017f78:	30 0b       	mov	r11,0
80017f7a:	0e 9c       	mov	r12,r7
80017f7c:	fe b0 d6 d5 	rcall	80012d26 <tc_write_rc>
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80017f80:	30 0b       	mov	r11,0
80017f82:	48 7a       	lddpc	r10,80017f9c <init_tc+0x34>
80017f84:	0e 9c       	mov	r12,r7
80017f86:	fe b0 d6 ec 	rcall	80012d5e <tc_configure_interrupts>
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80017f8a:	0e 9c       	mov	r12,r7
80017f8c:	30 0b       	mov	r11,0
80017f8e:	fe b0 d6 ba 	rcall	80012d02 <tc_start>
}
80017f92:	e3 cd 80 80 	ldm	sp++,r7,pc
80017f96:	d7 03       	nop
80017f98:	80 02       	ld.sh	r2,r0[0x0]
80017f9a:	47 08       	lddsp	r8,sp[0x1c0]
80017f9c:	80 02       	ld.sh	r2,r0[0x0]
80017f9e:	47 80       	lddsp	r0,sp[0x1e0]

80017fa0 <init_gpio>:
80017fa0:	d4 01       	pushm	lr
80017fa2:	32 2c       	mov	r12,34
80017fa4:	fe b0 d3 98 	rcall	800126d4 <gpio_enable_pin_pull_up>
80017fa8:	32 3c       	mov	r12,35
80017faa:	fe b0 d3 95 	rcall	800126d4 <gpio_enable_pin_pull_up>
80017fae:	32 4c       	mov	r12,36
// initialize non-peripheral GPIO
void init_gpio(void) {
  
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
80017fb0:	fe b0 d3 92 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
80017fb4:	32 5c       	mov	r12,37
80017fb6:	fe b0 d3 8f 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80017fba:	32 6c       	mov	r12,38
80017fbc:	fe b0 d3 8c 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
80017fc0:	32 7c       	mov	r12,39
80017fc2:	fe b0 d3 89 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
80017fc6:	32 8c       	mov	r12,40
80017fc8:	fe b0 d3 86 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80017fcc:	32 9c       	mov	r12,41
80017fce:	fe b0 d3 83 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
  gpio_enable_pin_pull_up(SW3_PIN);
  gpio_enable_pin_pull_up(SW_MODE_PIN);
#endif

  gpio_enable_pin_pull_up(SW_POWER_PIN);
80017fd2:	33 0c       	mov	r12,48
80017fd4:	fe b0 d3 80 	rcall	800126d4 <gpio_enable_pin_pull_up>
  /// trying this...
  /* gpio_enable_pin_glitch_filter(SW0_PIN); */
  /* gpio_enable_pin_glitch_filter(SW1_PIN); */
  /* gpio_enable_pin_glitch_filter(SW2_PIN); */
  /* gpio_enable_pin_glitch_filter(SW3_PIN); */
  gpio_enable_pin_glitch_filter(SW_MODE_PIN); 
80017fd8:	31 8c       	mov	r12,24
80017fda:	fe b0 d3 ac 	rcall	80012732 <gpio_enable_pin_glitch_filter>
}
80017fde:	d8 02       	popm	pc

80017fe0 <register_interrupts>:

  //-----------------------------
  //---- external function definitions

  // register interrupts
  void register_interrupts(void) {
80017fe0:	d4 01       	pushm	lr
    // enable interrupts on GPIO inputs

    // BFIN_HWAIT
    // gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_PIN_CHANGE);
    gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_RISING_EDGE);
80017fe2:	30 1b       	mov	r11,1
80017fe4:	30 5c       	mov	r12,5
80017fe6:	fe b0 d3 b0 	rcall	80012746 <gpio_enable_pin_interrupt>

    // encoders
    gpio_enable_pin_interrupt( ENC0_S0_PIN,	GPIO_PIN_CHANGE);
80017fea:	30 0b       	mov	r11,0
80017fec:	32 2c       	mov	r12,34
80017fee:	fe b0 d3 ac 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC0_S1_PIN,	GPIO_PIN_CHANGE);
80017ff2:	30 0b       	mov	r11,0
80017ff4:	32 3c       	mov	r12,35
80017ff6:	fe b0 d3 a8 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC1_S0_PIN,	GPIO_PIN_CHANGE);
80017ffa:	30 0b       	mov	r11,0
80017ffc:	32 4c       	mov	r12,36
80017ffe:	fe b0 d3 a4 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC1_S1_PIN,	GPIO_PIN_CHANGE);
80018002:	30 0b       	mov	r11,0
80018004:	32 5c       	mov	r12,37
80018006:	fe b0 d3 a0 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC2_S0_PIN,	GPIO_PIN_CHANGE);
8001800a:	30 0b       	mov	r11,0
8001800c:	32 6c       	mov	r12,38
8001800e:	fe b0 d3 9c 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC2_S1_PIN,	GPIO_PIN_CHANGE);
80018012:	30 0b       	mov	r11,0
80018014:	32 7c       	mov	r12,39
80018016:	fe b0 d3 98 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC3_S0_PIN,	GPIO_PIN_CHANGE);
8001801a:	30 0b       	mov	r11,0
8001801c:	32 8c       	mov	r12,40
8001801e:	fe b0 d3 94 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC3_S1_PIN,	GPIO_PIN_CHANGE);
80018022:	30 0b       	mov	r11,0
80018024:	32 9c       	mov	r12,41
80018026:	fe b0 d3 90 	rcall	80012746 <gpio_enable_pin_interrupt>

    // switches
    gpio_enable_pin_interrupt( SW0_PIN,	        GPIO_PIN_CHANGE);
8001802a:	30 0b       	mov	r11,0
8001802c:	31 9c       	mov	r12,25
8001802e:	fe b0 d3 8c 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( SW1_PIN,	        GPIO_PIN_CHANGE);
80018032:	30 0b       	mov	r11,0
80018034:	31 ac       	mov	r12,26
80018036:	fe b0 d3 88 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( SW2_PIN,	        GPIO_PIN_CHANGE);
8001803a:	30 0b       	mov	r11,0
8001803c:	31 bc       	mov	r12,27
8001803e:	fe b0 d3 84 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_PIN_CHANGE);
80018042:	30 0b       	mov	r11,0
80018044:	31 cc       	mov	r12,28
80018046:	fe b0 d3 80 	rcall	80012746 <gpio_enable_pin_interrupt>

    gpio_enable_pin_interrupt( FS0_PIN,	GPIO_PIN_CHANGE);
8001804a:	30 0b       	mov	r11,0
8001804c:	33 ec       	mov	r12,62
8001804e:	fe b0 d3 7c 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( FS1_PIN,	GPIO_PIN_CHANGE);
80018052:	30 0b       	mov	r11,0
80018054:	33 fc       	mov	r12,63
80018056:	fe b0 d3 78 	rcall	80012746 <gpio_enable_pin_interrupt>

    gpio_enable_pin_interrupt( SW_MODE_PIN,	GPIO_PIN_CHANGE);
8001805a:	30 0b       	mov	r11,0
8001805c:	31 8c       	mov	r12,24
8001805e:	fe b0 d3 74 	rcall	80012746 <gpio_enable_pin_interrupt>
    //  gpio_enable_pin_interrupt( SW_POWER_PIN,	GPIO_PIN_CHANGE);
 
    // PA24 - PA31
    INTC_register_interrupt( &irq_port0_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA24 / 8), UI_IRQ_PRIORITY);
80018062:	30 2a       	mov	r10,2
80018064:	34 3b       	mov	r11,67
80018066:	fe cc fe b2 	sub	r12,pc,-334
8001806a:	fe b0 d3 e7 	rcall	80012838 <INTC_register_interrupt>

    // PB00 - PB07
    INTC_register_interrupt( &irq_port1_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB00 / 8), UI_IRQ_PRIORITY );
8001806e:	30 2a       	mov	r10,2
80018070:	34 4b       	mov	r11,68
80018072:	fe cc fe 1a 	sub	r12,pc,-486

    // PB08 - PB15
    INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_PRIORITY);
80018076:	fe b0 d3 e1 	rcall	80012838 <INTC_register_interrupt>
8001807a:	30 2a       	mov	r10,2
8001807c:	34 5b       	mov	r11,69
8001807e:	fe cc fe 56 	sub	r12,pc,-426

    // PB16 - PB23
    //  INTC_register_interrupt( &irq_port1_line2, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB16 / 8), UI_IRQ_PRIORITY);

    // PB24 - PB31
    INTC_register_interrupt( &irq_port1_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB24 / 8), UI_IRQ_PRIORITY);
80018082:	fe b0 d3 db 	rcall	80012838 <INTC_register_interrupt>
80018086:	30 2a       	mov	r10,2
80018088:	34 7b       	mov	r11,71


    // register IRQ for PDCA transfer
    INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, SYS_IRQ_PRIORITY);
8001808a:	fe cc ff 06 	sub	r12,pc,-250
8001808e:	fe b0 d3 d5 	rcall	80012838 <INTC_register_interrupt>
80018092:	30 1a       	mov	r10,1

    // register TC interrupt
    INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
80018094:	36 0b       	mov	r11,96
80018096:	fe cc ff 82 	sub	r12,pc,-126
8001809a:	fe b0 d3 cf 	rcall	80012838 <INTC_register_interrupt>
8001809e:	30 3a       	mov	r10,3
  }
800180a0:	e0 6b 01 c0 	mov	r11,448
800180a4:	fe cc ff f4 	sub	r12,pc,-12
800180a8:	fe b0 d3 c8 	rcall	80012838 <INTC_register_interrupt>
800180ac:	d8 02       	popm	pc
800180ae:	d7 03       	nop

800180b0 <irq_tc>:
800180b0:	eb cd 40 c0 	pushm	r6-r7,lr
800180b4:	e0 68 0b 98 	mov	r8,2968
800180b8:	30 1a       	mov	r10,1
800180ba:	f0 e6 00 00 	ld.d	r6,r8[0]
800180be:	30 0b       	mov	r11,0
800180c0:	ec 0a 00 0a 	add	r10,r6,r10
}

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
800180c4:	ee 0b 00 4b 	adc	r11,r7,r11
800180c8:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
800180cc:	e0 66 ff ff 	mov	r6,65535
800180d0:	ea 16 7f ff 	orh	r6,0x7fff
800180d4:	f0 ea 00 00 	ld.d	r10,r8[0]
800180d8:	30 07       	mov	r7,0
800180da:	0c 3a       	cp.w	r10,r6
800180dc:	ee 0b 13 00 	cpc	r11,r7
800180e0:	e0 8b 00 10 	brhi	80018100 <irq_tc+0x50>
    tcTicks = 0;
    tcOverflow = 1;
  } else {
    tcOverflow = 0;
800180e4:	30 09       	mov	r9,0
800180e6:	e0 68 0b 94 	mov	r8,2964
  }
  process_timers();
800180ea:	b0 89       	st.b	r8[0x0],r9
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
800180ec:	e0 a0 0f f6 	rcall	8001a0d8 <process_timers>
800180f0:	30 0b       	mov	r11,0
800180f2:	fe 7c 38 00 	mov	r12,-51200
}
800180f6:	fe b0 d6 0f 	rcall	80012d14 <tc_read_sr>
800180fa:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
  // overflow control
  if(tcTicks > tcMax) { 
    tcTicks = 0;
800180fe:	d6 03       	rete
80018100:	30 0a       	mov	r10,0
80018102:	30 0b       	mov	r11,0
    tcOverflow = 1;
80018104:	f0 eb 00 00 	st.d	r8[0],r10
80018108:	30 19       	mov	r9,1
8001810a:	e0 68 0b 94 	mov	r8,2964
8001810e:	b0 89       	st.b	r8[0x0],r9
80018110:	ce eb       	rjmp	800180ec <irq_tc+0x3c>
80018112:	d7 03       	nop

80018114 <irq_pdca>:
80018114:	d4 01       	pushm	lr
80018116:	d3 03       	ssrf	0x10
80018118:	30 0c       	mov	r12,0
8001811a:	fe b0 d4 3d 	rcall	80012994 <pdca_disable_interrupt_transfer_complete>
  //  Disable_global_interrupt();
  cpu_irq_disable();
  // Disable interrupt channel.
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
  //unselects the SD/MMC memory.
  sd_mmc_spi_read_close_PDCA();
8001811e:	fe b0 d8 29 	rcall	80013170 <sd_mmc_spi_read_close_PDCA>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80018122:	30 09       	mov	r9,0
80018124:	e0 68 03 e8 	mov	r8,1000
80018128:	e0 6a d0 e7 	mov	r10,53479
8001812c:	ea 1a 27 56 	orh	r10,0x2756
80018130:	30 0b       	mov	r11,0
80018132:	e0 a0 55 f6 	rcall	80022d1e <__avr32_udiv64>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80018136:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001813a:	f2 0a 00 0a 	add	r10,r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001813e:	e1 b8 00 42 	mfsr	r8,0x108
80018142:	14 39       	cp.w	r9,r10
80018144:	e0 8b 00 16 	brhi	80018170 <irq_pdca+0x5c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80018148:	10 39       	cp.w	r9,r8
8001814a:	e0 8b 00 04 	brhi	80018152 <irq_pdca+0x3e>
8001814e:	10 3a       	cp.w	r10,r8
80018150:	c1 62       	brcc	8001817c <irq_pdca+0x68>
  //.... example has a 5000 clock gimpy delay here.
  // using delay_us instead
  delay_ms(10);
  //  delay_ms(2);
  // Disable unnecessary channel
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80018152:	30 1c       	mov	r12,1
80018154:	fe b0 d4 02 	rcall	80012958 <pdca_disable>
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80018158:	30 0c       	mov	r12,0
8001815a:	fe b0 d3 ff 	rcall	80012958 <pdca_disable>
  // Enable all interrupts.
  cpu_irq_enable();
8001815e:	d5 03       	csrf	0x10
  //  Enable_global_interrupt();
  //  print_dbg("\r\n handled PDCA interrupt. \r\n");
  fsEndTransfer = true;
80018160:	30 19       	mov	r9,1
80018162:	e0 68 2d 00 	mov	r8,11520
}
80018166:	b0 89       	st.b	r8[0x0],r9
80018168:	d4 02       	popm	lr
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001816a:	d6 03       	rete
8001816c:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80018170:	10 39       	cp.w	r9,r8
80018172:	fe 98 ff fd 	brls	8001816c <irq_pdca+0x58>
80018176:	10 3a       	cp.w	r10,r8
80018178:	cf a2       	brcc	8001816c <irq_pdca+0x58>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001817a:	ce cb       	rjmp	80018152 <irq_pdca+0x3e>
8001817c:	e1 b8 00 42 	mfsr	r8,0x108
80018180:	ce 4b       	rjmp	80018148 <irq_pdca+0x34>
80018182:	d7 03       	nop

80018184 <irq_port1_line3>:
80018184:	d4 01       	pushm	lr
80018186:	33 ec       	mov	r12,62
80018188:	fe b0 d3 04 	rcall	80012790 <gpio_get_pin_interrupt_flag>
8001818c:	c0 d1       	brne	800181a6 <irq_port1_line3+0x22>
8001818e:	33 fc       	mov	r12,63
80018190:	fe b0 d3 00 	rcall	80012790 <gpio_get_pin_interrupt_flag>
  //  print_dbg("\r\n irq_port1_line3");
  if(gpio_get_pin_interrupt_flag(FS0_PIN)) {
    gpio_clear_pin_interrupt_flag(FS0_PIN);
    process_sw(6);
  }
  if(gpio_get_pin_interrupt_flag(FS1_PIN)) {
80018194:	c0 70       	breq	800181a2 <irq_port1_line3+0x1e>
    gpio_clear_pin_interrupt_flag(FS1_PIN);
80018196:	33 fc       	mov	r12,63
80018198:	fe b0 d3 08 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(7);
8001819c:	30 7c       	mov	r12,7
8001819e:	e0 a0 0f 85 	rcall	8001a0a8 <process_sw>
  }
}
800181a2:	d4 02       	popm	lr
800181a4:	d6 03       	rete
// interrupt handler for PB24-PB31
__attribute__((__interrupt__))
static void irq_port1_line3(void) {
  //  print_dbg("\r\n irq_port1_line3");
  if(gpio_get_pin_interrupt_flag(FS0_PIN)) {
    gpio_clear_pin_interrupt_flag(FS0_PIN);
800181a6:	33 ec       	mov	r12,62
800181a8:	fe b0 d3 00 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(6);
800181ac:	30 6c       	mov	r12,6
800181ae:	e0 a0 0f 7d 	rcall	8001a0a8 <process_sw>
800181b2:	ce eb       	rjmp	8001818e <irq_port1_line3+0xa>

800181b4 <irq_port0_line3>:
800181b4:	d4 01       	pushm	lr
800181b6:	31 9c       	mov	r12,25
800181b8:	fe b0 d2 ec 	rcall	80012790 <gpio_get_pin_interrupt_flag>
800181bc:	c2 e1       	brne	80018218 <irq_port0_line3+0x64>
800181be:	31 ac       	mov	r12,26
    /// this might be problematic if we were expecting faster interrupts from switches,
    /// but hardware pre-filtering should preclude this.
    process_sw(0);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
800181c0:	fe b0 d2 e8 	rcall	80012790 <gpio_get_pin_interrupt_flag>
800181c4:	c2 31       	brne	8001820a <irq_port0_line3+0x56>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
    process_sw(1);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
800181c6:	31 bc       	mov	r12,27
800181c8:	fe b0 d2 e4 	rcall	80012790 <gpio_get_pin_interrupt_flag>
800181cc:	c1 81       	brne	800181fc <irq_port0_line3+0x48>
    gpio_clear_pin_interrupt_flag(SW2_PIN);
    process_sw(2);
  }
 
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
800181ce:	31 cc       	mov	r12,28
800181d0:	fe b0 d2 e0 	rcall	80012790 <gpio_get_pin_interrupt_flag>
800181d4:	c0 d1       	brne	800181ee <irq_port0_line3+0x3a>
    gpio_clear_pin_interrupt_flag(SW3_PIN);
    process_sw(3);
  }
  // SW_MODE
  if(gpio_get_pin_interrupt_flag(SW_MODE_PIN)) {
800181d6:	31 8c       	mov	r12,24
800181d8:	fe b0 d2 dc 	rcall	80012790 <gpio_get_pin_interrupt_flag>
800181dc:	c0 70       	breq	800181ea <irq_port0_line3+0x36>
    gpio_clear_pin_interrupt_flag(SW_MODE_PIN);
800181de:	31 8c       	mov	r12,24
800181e0:	fe b0 d2 e4 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(4);
800181e4:	30 4c       	mov	r12,4
800181e6:	e0 a0 0f 61 	rcall	8001a0a8 <process_sw>
  }
}
800181ea:	d4 02       	popm	lr
800181ec:	d6 03       	rete
    process_sw(2);
  }
 
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
    gpio_clear_pin_interrupt_flag(SW3_PIN);
800181ee:	31 cc       	mov	r12,28
800181f0:	fe b0 d2 dc 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(3);
800181f4:	30 3c       	mov	r12,3
800181f6:	e0 a0 0f 59 	rcall	8001a0a8 <process_sw>
800181fa:	ce eb       	rjmp	800181d6 <irq_port0_line3+0x22>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
    process_sw(1);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
    gpio_clear_pin_interrupt_flag(SW2_PIN);
800181fc:	31 bc       	mov	r12,27
800181fe:	fe b0 d2 d5 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(2);
80018202:	30 2c       	mov	r12,2
80018204:	e0 a0 0f 52 	rcall	8001a0a8 <process_sw>
80018208:	ce 3b       	rjmp	800181ce <irq_port0_line3+0x1a>
    /// but hardware pre-filtering should preclude this.
    process_sw(0);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    gpio_clear_pin_interrupt_flag(SW1_PIN);
8001820a:	31 ac       	mov	r12,26
8001820c:	fe b0 d2 ce 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(1);
80018210:	30 1c       	mov	r12,1
80018212:	e0 a0 0f 4b 	rcall	8001a0a8 <process_sw>
80018216:	cd 8b       	rjmp	800181c6 <irq_port0_line3+0x12>
__attribute__((__interrupt__))
static void irq_port0_line3(void) {
  //  print_dbg("\r\n interrupt on port0_line3");
  //SW_F0
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    gpio_clear_pin_interrupt_flag(SW0_PIN);
80018218:	31 9c       	mov	r12,25
8001821a:	fe b0 d2 c7 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    /// process_sw() will post an event, which calls cpu_irq_disable().
    /// apparently, this also clears the GPIO interrupt flags (!?)
    /// so clear the flag first to avoid triggering an infinite series of interrupts.
    /// this might be problematic if we were expecting faster interrupts from switches,
    /// but hardware pre-filtering should preclude this.
    process_sw(0);
8001821e:	30 0c       	mov	r12,0
80018220:	e0 a0 0f 44 	rcall	8001a0a8 <process_sw>
80018224:	cc db       	rjmp	800181be <irq_port0_line3+0xa>
80018226:	d7 03       	nop

80018228 <irq_port1_line1>:
80018228:	d4 01       	pushm	lr
8001822a:	32 8c       	mov	r12,40
8001822c:	fe b0 d2 b2 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018230:	c0 d1       	brne	8001824a <irq_port1_line1+0x22>
80018232:	32 9c       	mov	r12,41
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  // ENC3_1
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
80018234:	fe b0 d2 ae 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018238:	c0 70       	breq	80018246 <irq_port1_line1+0x1e>
    process_enc(3);
8001823a:	30 3c       	mov	r12,3
8001823c:	fe b0 f9 38 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
80018240:	32 9c       	mov	r12,41
80018242:	fe b0 d2 b3 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
  }

}
80018246:	d4 02       	popm	lr
80018248:	d6 03       	rete
__attribute__((__interrupt__))
static void irq_port1_line1(void) {
  //    print_dbg("\r\b\interrupt on PB08-PB15.");
  // ENC3_0
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
8001824a:	30 3c       	mov	r12,3
8001824c:	fe b0 f9 30 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
80018250:	32 8c       	mov	r12,40
80018252:	fe b0 d2 ab 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80018256:	ce eb       	rjmp	80018232 <irq_port1_line1+0xa>

80018258 <irq_port1_line0>:
80018258:	d4 01       	pushm	lr
8001825a:	32 2c       	mov	r12,34
8001825c:	fe b0 d2 9a 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018260:	c3 91       	brne	800182d2 <irq_port1_line0+0x7a>
80018262:	32 3c       	mov	r12,35
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
80018264:	fe b0 d2 96 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018268:	c2 e1       	brne	800182c4 <irq_port1_line0+0x6c>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
8001826a:	32 4c       	mov	r12,36
8001826c:	fe b0 d2 92 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018270:	c2 31       	brne	800182b6 <irq_port1_line0+0x5e>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
80018272:	32 5c       	mov	r12,37
80018274:	fe b0 d2 8e 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018278:	c1 81       	brne	800182a8 <irq_port1_line0+0x50>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
8001827a:	32 6c       	mov	r12,38
8001827c:	fe b0 d2 8a 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018280:	c0 d1       	brne	8001829a <irq_port1_line0+0x42>
    process_enc(2);
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
  }  
  // ENC2_1
  if(gpio_get_pin_interrupt_flag(ENC2_S1_PIN)) {
80018282:	32 7c       	mov	r12,39
80018284:	fe b0 d2 86 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80018288:	c0 70       	breq	80018296 <irq_port1_line0+0x3e>
    process_enc(2);
8001828a:	30 2c       	mov	r12,2
8001828c:	fe b0 f9 10 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S1_PIN);
80018290:	32 7c       	mov	r12,39
80018292:	fe b0 d2 8b 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
  }
}
80018296:	d4 02       	popm	lr
80018298:	d6 03       	rete
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
    process_enc(2);
8001829a:	30 2c       	mov	r12,2
8001829c:	fe b0 f9 08 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
800182a0:	32 6c       	mov	r12,38
800182a2:	fe b0 d2 83 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
800182a6:	ce eb       	rjmp	80018282 <irq_port1_line0+0x2a>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
800182a8:	30 1c       	mov	r12,1
800182aa:	fe b0 f9 01 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
800182ae:	32 5c       	mov	r12,37
800182b0:	fe b0 d2 7c 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
800182b4:	ce 3b       	rjmp	8001827a <irq_port1_line0+0x22>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
800182b6:	30 1c       	mov	r12,1
800182b8:	fe b0 f8 fa 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
800182bc:	32 4c       	mov	r12,36
800182be:	fe b0 d2 75 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
800182c2:	cd 8b       	rjmp	80018272 <irq_port1_line0+0x1a>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
800182c4:	30 0c       	mov	r12,0
800182c6:	fe b0 f8 f3 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
800182ca:	32 3c       	mov	r12,35
800182cc:	fe b0 d2 6e 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
800182d0:	cc db       	rjmp	8001826a <irq_port1_line0+0x12>
__attribute__((__interrupt__))
static void irq_port1_line0(void) {
  // print_dbg("\r\b\interrupt on PB00-PB07.");
  // ENC0_0
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
800182d2:	30 0c       	mov	r12,0
800182d4:	fe b0 f8 ec 	rcall	800174ac <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
800182d8:	32 2c       	mov	r12,34
800182da:	fe b0 d2 67 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
800182de:	cc 2b       	rjmp	80018262 <irq_port1_line0+0xa>

800182e0 <alloc_mem>:
  print_dbg_hex(heapSize);

}

// allocate and return pointer
heap_t alloc_mem(u32 bytes) {
800182e0:	eb cd 40 c0 	pushm	r6-r7,lr
800182e4:	18 96       	mov	r6,r12
  print_dbg("\r\n allocating memory, bytes: 0x");
800182e6:	49 3c       	lddpc	r12,80018330 <alloc_mem+0x50>
800182e8:	fe b0 d6 5a 	rcall	80012f9c <print_dbg>
  print_dbg_hex(bytes);
800182ec:	0c 9c       	mov	r12,r6
800182ee:	fe b0 d6 7f 	rcall	80012fec <print_dbg_hex>

  print_dbg("\r\n location: 0x");
800182f2:	49 1c       	lddpc	r12,80018334 <alloc_mem+0x54>
800182f4:	fe b0 d6 54 	rcall	80012f9c <print_dbg>
  print_dbg_hex(heapOffset);
800182f8:	e0 67 0b a4 	mov	r7,2980
800182fc:	6e 0c       	ld.w	r12,r7[0x0]
800182fe:	fe b0 d6 77 	rcall	80012fec <print_dbg_hex>

  heap_t ret = pHeapStart + heapOffset;
80018302:	e0 68 0b a0 	mov	r8,2976

  u32 tmp = heapOffset + bytes;
80018306:	70 0c       	ld.w	r12,r8[0x0]
  u8 mtmp = tmp % 4;
80018308:	6e 08       	ld.w	r8,r7[0x0]
8001830a:	10 06       	add	r6,r8

  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
8001830c:	f3 d6 c0 02 	bfextu	r9,r6,0x0,0x2
80018310:	f7 b6 01 fc 	subne	r6,-4
  }
  if (tmp < heapSize) {
80018314:	ed d9 e1 16 	subne	r6,r6,r9
80018318:	e0 69 0b a8 	mov	r9,2984
8001831c:	72 09       	ld.w	r9,r9[0x0]
    heapOffset = tmp;
8001831e:	12 36       	cp.w	r6,r9
80018320:	f9 bc 02 ff 	movhs	r12,-1
  print_dbg_hex(bytes);

  print_dbg("\r\n location: 0x");
  print_dbg_hex(heapOffset);

  heap_t ret = pHeapStart + heapOffset;
80018324:	ef f6 3a 00 	st.wcs	r7[0x0],r6
    //    ret = pHeapStart + heapOffset;
  } else {
    ret = (heap_t)ALLOC_FAIL;
  }
  return ret;
}
80018328:	f9 d8 e3 0c 	addcs	r12,r12,r8
8001832c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018330:	80 02       	ld.sh	r2,r0[0x0]
80018332:	47 d0       	lddsp	r0,sp[0x1f4]
80018334:	80 02       	ld.sh	r2,r0[0x0]
80018336:	47 f0       	lddsp	r0,sp[0x1fc]

80018338 <init_mem>:
80018338:	eb cd 40 80 	pushm	r7,lr
8001833c:	30 1c       	mov	r12,1
8001833e:	fe b0 ce 65 	rcall	80012008 <smc_get_cs_size>
80018342:	fc 18 d0 00 	movh	r8,0xd000
80018346:	30 19       	mov	r9,1


// setup heap-ish
void init_mem(void) {
  heapSize = SRAM_SIZE;
  pHeapStart = (heap_t)SRAM;
80018348:	e0 6a 0b a0 	mov	r10,2976
static u32 heapSize;


// setup heap-ish
void init_mem(void) {
  heapSize = SRAM_SIZE;
8001834c:	f2 0c 09 4c 	lsl	r12,r9,r12
  pHeapStart = (heap_t)SRAM;
  pHeapEnd = (heap_t)((u32)pHeapStart + heapSize);
80018350:	95 08       	st.w	r10[0x0],r8
80018352:	f8 08 00 09 	add	r9,r12,r8
80018356:	e0 68 0b ac 	mov	r8,2988
  heapOffset = 0;
8001835a:	91 09       	st.w	r8[0x0],r9
static u32 heapSize;


// setup heap-ish
void init_mem(void) {
  heapSize = SRAM_SIZE;
8001835c:	30 09       	mov	r9,0
  pHeapStart = (heap_t)SRAM;
  pHeapEnd = (heap_t)((u32)pHeapStart + heapSize);
  heapOffset = 0;
8001835e:	e0 68 0b a4 	mov	r8,2980

  print_dbg("\r\n SRAM size: 0x");
80018362:	e0 67 0b a8 	mov	r7,2984
80018366:	91 09       	st.w	r8[0x0],r9
  print_dbg_hex(heapSize);
80018368:	8f 0c       	st.w	r7[0x0],r12
8001836a:	48 5c       	lddpc	r12,8001837c <init_mem+0x44>
8001836c:	fe b0 d6 18 	rcall	80012f9c <print_dbg>

}
80018370:	6e 0c       	ld.w	r12,r7[0x0]
80018372:	fe b0 d6 3d 	rcall	80012fec <print_dbg_hex>
80018376:	e3 cd 80 80 	ldm	sp++,r7,pc
8001837a:	d7 03       	nop
8001837c:	80 02       	ld.sh	r2,r0[0x0]
8001837e:	48 00       	lddpc	r0,8001837c <init_mem+0x44>

80018380 <read_serial_dummy>:
  u8 tilt;  // has tilt (??)  
} monomeDesc;


//// dummy functions
static void read_serial_dummy(void) { return; }
80018380:	5e fc       	retal	r12
80018382:	d7 03       	nop

80018384 <init_monome>:

//================================================
//----- extern function definitions

// init
void init_monome(void) {
80018384:	e0 68 31 18 	mov	r8,12568
80018388:	48 4a       	lddpc	r10,80018398 <init_monome+0x14>
8001838a:	f0 c9 ff 00 	sub	r9,r8,-256
  u32 i;
  for(i=0; i<MONOME_MAX_LED_BYTES; i++) {
    monomeLedBuffer[i] = 0;
8001838e:	10 aa       	st.w	r8++,r10
80018390:	12 38       	cp.w	r8,r9
  }
  //  print_dbg("\r\n finished monome class init");
}
80018392:	cf e1       	brne	8001838e <init_monome+0xa>
80018394:	5e fc       	retal	r12
80018396:	d7 03       	nop
80018398:	00 00       	add	r0,r0
	...

8001839c <read_serial_40h>:
/// parse serial input from device
/// should be called when read is complete
/// (e.g. from usb transfer callback )

static void read_serial_40h(void) {
}
8001839c:	5e fc       	retal	r12

8001839e <grid_map_40h>:
}


static void grid_map_40h(u8 x, u8 y, const u8* data) {
  // TODO : (use 8 row commands and ignore x/y)
}
8001839e:	5e fc       	retal	r12

800183a0 <ring_map_mext>:
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
  // TODO
}
800183a0:	5e fc       	retal	r12
800183a2:	d7 03       	nop

800183a4 <monome_grid_refresh>:
    return setup_mext();
  }
}

// check dirty flags and refresh leds
void monome_grid_refresh(void) {
800183a4:	eb cd 40 80 	pushm	r7,lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
800183a8:	e0 67 0b c5 	mov	r7,3013
}

// check dirty flags and refresh leds
void monome_grid_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
800183ac:	e0 a0 14 7e 	rcall	8001aca8 <ftdi_tx_busy>
800183b0:	0f 88       	ld.ub	r8,r7[0x0]

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
800183b2:	18 99       	mov	r9,r12
800183b4:	ed b8 00 00 	bld	r8,0x0
    (*monome_grid_map)(0, 0, monomeLedBuffer);
    monomeFrameDirty &= 0b1110;
    busy = 1;
  }
  // check quad 1
  if( monomeFrameDirty & 0b0010 ) {
800183b8:	c5 10       	breq	8001845a <monome_grid_refresh+0xb6>
800183ba:	ed b8 00 01 	bld	r8,0x1
    if ( mdesc.cols > 8 ) {
800183be:	c1 c1       	brne	800183f6 <monome_grid_refresh+0x52>
800183c0:	31 0a       	mov	r10,16
800183c2:	f5 3b 00 08 	ld.ub	r11,r10[8]
800183c6:	30 8a       	mov	r10,8
800183c8:	f4 0b 18 00 	cp.b	r11,r10
800183cc:	e0 88 00 15 	brls	800183f6 <monome_grid_refresh+0x52>
      while( busy ) { busy = ftdi_tx_busy(); }
800183d0:	58 09       	cp.w	r9,0
800183d2:	c0 40       	breq	800183da <monome_grid_refresh+0x36>
800183d4:	e0 a0 14 6a 	rcall	8001aca8 <ftdi_tx_busy>
      (*monome_grid_map)(8, 0, monomeLedBuffer + 8);
800183d8:	cf e1       	brne	800183d4 <monome_grid_refresh+0x30>
800183da:	e0 68 31 10 	mov	r8,12560
800183de:	e0 6a 31 18 	mov	r10,12568
800183e2:	70 08       	ld.w	r8,r8[0x0]
800183e4:	2f 8a       	sub	r10,-8
      monomeFrameDirty &= 0b1101;
800183e6:	30 0b       	mov	r11,0
800183e8:	30 8c       	mov	r12,8
800183ea:	5d 18       	icall	r8
800183ec:	0f 88       	ld.ub	r8,r7[0x0]
800183ee:	30 19       	mov	r9,1
      busy = 1;
    }
  }
  // check quad 2
  if( monomeFrameDirty &  0b0100 ) { 
800183f0:	e2 18 00 0d 	andl	r8,0xd,COH
800183f4:	ae 88       	st.b	r7[0x0],r8
    if( mdesc.rows > 8 ) {
800183f6:	ed b8 00 02 	bld	r8,0x2
800183fa:	c1 c1       	brne	80018432 <monome_grid_refresh+0x8e>
800183fc:	31 0a       	mov	r10,16
800183fe:	f5 3b 00 09 	ld.ub	r11,r10[9]
80018402:	30 8a       	mov	r10,8
80018404:	f4 0b 18 00 	cp.b	r11,r10
      while( busy ) { busy = ftdi_tx_busy(); }
80018408:	e0 88 00 15 	brls	80018432 <monome_grid_refresh+0x8e>
8001840c:	58 09       	cp.w	r9,0
8001840e:	c0 40       	breq	80018416 <monome_grid_refresh+0x72>
      (*monome_grid_map)(0, 8, monomeLedBuffer + 128);
80018410:	e0 a0 14 4c 	rcall	8001aca8 <ftdi_tx_busy>
80018414:	cf e1       	brne	80018410 <monome_grid_refresh+0x6c>
80018416:	e0 68 31 10 	mov	r8,12560
8001841a:	e0 6a 31 18 	mov	r10,12568
      monomeFrameDirty &= 0b1011;
8001841e:	70 08       	ld.w	r8,r8[0x0]
80018420:	28 0a       	sub	r10,-128
80018422:	30 8b       	mov	r11,8
80018424:	30 0c       	mov	r12,0
80018426:	5d 18       	icall	r8
      busy = 1;
    }
  }
  // check quad 3
  if( monomeFrameDirty & 0b1000 ) {
80018428:	0f 88       	ld.ub	r8,r7[0x0]
8001842a:	30 19       	mov	r9,1
8001842c:	e2 18 00 0b 	andl	r8,0xb,COH
    if( (mdesc.rows > 8) && (mdesc.cols > 8) )  {
80018430:	ae 88       	st.b	r7[0x0],r8
80018432:	ed b8 00 03 	bld	r8,0x3
80018436:	c0 91       	brne	80018448 <monome_grid_refresh+0xa4>
80018438:	31 0a       	mov	r10,16
8001843a:	30 88       	mov	r8,8
8001843c:	f5 3b 00 09 	ld.ub	r11,r10[9]
      (*monome_grid_map)(8, 8, monomeLedBuffer + 136);
      monomeFrameDirty &= 0b0111;
      busy = 1;
    }
  }
  while( busy ) { busy = ftdi_tx_busy(); }
80018440:	f0 0b 18 00 	cp.b	r11,r8
80018444:	e0 8b 00 1b 	brhi	8001847a <monome_grid_refresh+0xd6>
80018448:	58 09       	cp.w	r9,0
8001844a:	c0 40       	breq	80018452 <monome_grid_refresh+0xae>
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
    while( busy ) { busy = ftdi_tx_busy(); }
8001844c:	e0 a0 14 2e 	rcall	8001aca8 <ftdi_tx_busy>
80018450:	cf e1       	brne	8001844c <monome_grid_refresh+0xa8>
80018452:	e3 cd 80 80 	ldm	sp++,r7,pc
    (*monome_grid_map)(0, 0, monomeLedBuffer);
80018456:	e0 a0 14 29 	rcall	8001aca8 <ftdi_tx_busy>
8001845a:	58 0c       	cp.w	r12,0
8001845c:	cf d1       	brne	80018456 <monome_grid_refresh+0xb2>
8001845e:	30 0b       	mov	r11,0
    monomeFrameDirty &= 0b1110;
80018460:	e0 68 31 10 	mov	r8,12560
80018464:	e0 6a 31 18 	mov	r10,12568
80018468:	70 08       	ld.w	r8,r8[0x0]
8001846a:	16 9c       	mov	r12,r11
      busy = 1;
    }
  }
  // check quad 3
  if( monomeFrameDirty & 0b1000 ) {
    if( (mdesc.rows > 8) && (mdesc.cols > 8) )  {
8001846c:	5d 18       	icall	r8
8001846e:	0f 88       	ld.ub	r8,r7[0x0]
80018470:	30 19       	mov	r9,1
80018472:	e2 18 00 0e 	andl	r8,0xe,COH
80018476:	ae 88       	st.b	r7[0x0],r8
      while( busy ) { busy = ftdi_tx_busy(); }
80018478:	ca 1b       	rjmp	800183ba <monome_grid_refresh+0x16>
8001847a:	f5 3a 00 08 	ld.ub	r10,r10[8]
8001847e:	f0 0a 18 00 	cp.b	r10,r8
      (*monome_grid_map)(8, 8, monomeLedBuffer + 136);
80018482:	fe 98 ff e3 	brls	80018448 <monome_grid_refresh+0xa4>
80018486:	58 09       	cp.w	r9,0
80018488:	c0 40       	breq	80018490 <monome_grid_refresh+0xec>
8001848a:	e0 a0 14 0f 	rcall	8001aca8 <ftdi_tx_busy>
8001848e:	cf e1       	brne	8001848a <monome_grid_refresh+0xe6>
80018490:	30 8b       	mov	r11,8
      monomeFrameDirty &= 0b0111;
80018492:	e0 68 31 10 	mov	r8,12560
80018496:	e0 6a 31 18 	mov	r10,12568
8001849a:	70 08       	ld.w	r8,r8[0x0]
8001849c:	f4 ca ff 78 	sub	r10,r10,-136
800184a0:	16 9c       	mov	r12,r11
800184a2:	5d 18       	icall	r8
800184a4:	0f 88       	ld.ub	r8,r7[0x0]
800184a6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800184aa:	ae 88       	st.b	r7[0x0],r8
800184ac:	cd 0b       	rjmp	8001844c <monome_grid_refresh+0xa8>
800184ae:	d7 03       	nop

800184b0 <grid_map_mext>:

// update a whole frame
// . note that our input data is one byte per led!!
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
800184b0:	eb cd 40 80 	pushm	r7,lr
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x14;
800184b4:	e0 68 0b d4 	mov	r8,3028
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
800184b8:	30 09       	mov	r9,0
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x14;
  txBuf[1] = x;
  txBuf[2] = y;
800184ba:	b0 ab       	st.b	r8[0x2],r11
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
800184bc:	b0 b9       	st.b	r8[0x3],r9
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x14;
800184be:	31 4b       	mov	r11,20
  txBuf[1] = x;
800184c0:	b0 9c       	st.b	r8[0x1],r12
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x14;
800184c2:	b0 8b       	st.b	r8[0x0],r11
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800184c4:	14 9b       	mov	r11,r10
800184c6:	17 3c       	ld.ub	r12,r11++
800184c8:	f2 0c 18 00 	cp.b	r12,r9
800184cc:	5f 1c       	srne	r12
800184ce:	b0 bc       	st.b	r8[0x3],r12
800184d0:	17 3e       	ld.ub	lr,r11++
800184d2:	f2 0e 18 00 	cp.b	lr,r9
800184d6:	f9 be 01 02 	movne	lr,2
800184da:	f9 be 00 00 	moveq	lr,0
800184de:	1c 4c       	or	r12,lr
800184e0:	b0 bc       	st.b	r8[0x3],r12
800184e2:	17 3e       	ld.ub	lr,r11++
800184e4:	f2 0e 18 00 	cp.b	lr,r9
800184e8:	f9 be 01 04 	movne	lr,4
800184ec:	f9 be 00 00 	moveq	lr,0
800184f0:	1c 4c       	or	r12,lr
800184f2:	b0 bc       	st.b	r8[0x3],r12
800184f4:	17 3e       	ld.ub	lr,r11++
800184f6:	f2 0e 18 00 	cp.b	lr,r9
800184fa:	f9 be 01 08 	movne	lr,8
800184fe:	f9 be 00 00 	moveq	lr,0
80018502:	1c 4c       	or	r12,lr
80018504:	b0 bc       	st.b	r8[0x3],r12
80018506:	17 3e       	ld.ub	lr,r11++
80018508:	f2 0e 18 00 	cp.b	lr,r9
8001850c:	f9 be 01 10 	movne	lr,16
80018510:	f9 be 00 00 	moveq	lr,0
80018514:	1c 4c       	or	r12,lr
80018516:	b0 bc       	st.b	r8[0x3],r12
80018518:	17 3e       	ld.ub	lr,r11++
8001851a:	f2 0e 18 00 	cp.b	lr,r9
8001851e:	f9 be 01 20 	movne	lr,32
80018522:	f9 be 00 00 	moveq	lr,0
80018526:	1c 4c       	or	r12,lr
80018528:	b0 bc       	st.b	r8[0x3],r12
8001852a:	17 8e       	ld.ub	lr,r11[0x0]
8001852c:	f2 0e 18 00 	cp.b	lr,r9
80018530:	f9 be 01 40 	movne	lr,64
80018534:	f9 be 00 00 	moveq	lr,0
80018538:	1c 4c       	or	r12,lr
8001853a:	b0 bc       	st.b	r8[0x3],r12
8001853c:	17 9b       	ld.ub	r11,r11[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
8001853e:	b0 c9       	st.b	r8[0x4],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018540:	f2 0b 18 00 	cp.b	r11,r9
80018544:	5f 1b       	srne	r11
80018546:	f9 eb 10 7c 	or	r12,r12,r11<<0x7
8001854a:	b0 bc       	st.b	r8[0x3],r12
8001854c:	f4 cc ff f8 	sub	r12,r10,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018550:	f8 cb ff f8 	sub	r11,r12,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018554:	17 8e       	ld.ub	lr,r11[0x0]
80018556:	f2 0e 18 00 	cp.b	lr,r9
8001855a:	5f 1e       	srne	lr
8001855c:	b0 ce       	st.b	r8[0x4],lr
8001855e:	f5 37 00 11 	ld.ub	r7,r10[17]
80018562:	f2 07 18 00 	cp.b	r7,r9
80018566:	f9 b7 01 02 	movne	r7,2
8001856a:	f9 b7 00 00 	moveq	r7,0
8001856e:	0e 4e       	or	lr,r7
80018570:	b0 ce       	st.b	r8[0x4],lr
80018572:	f5 37 00 12 	ld.ub	r7,r10[18]
80018576:	f2 07 18 00 	cp.b	r7,r9
8001857a:	f9 b7 01 04 	movne	r7,4
8001857e:	f9 b7 00 00 	moveq	r7,0
80018582:	0e 4e       	or	lr,r7
80018584:	b0 ce       	st.b	r8[0x4],lr
80018586:	f5 37 00 13 	ld.ub	r7,r10[19]
8001858a:	f2 07 18 00 	cp.b	r7,r9
8001858e:	f9 b7 01 08 	movne	r7,8
80018592:	f9 b7 00 00 	moveq	r7,0
80018596:	0e 4e       	or	lr,r7
80018598:	b0 ce       	st.b	r8[0x4],lr
8001859a:	f5 37 00 14 	ld.ub	r7,r10[20]
8001859e:	f2 07 18 00 	cp.b	r7,r9
800185a2:	f9 b7 01 10 	movne	r7,16
800185a6:	f9 b7 00 00 	moveq	r7,0
800185aa:	0e 4e       	or	lr,r7
800185ac:	b0 ce       	st.b	r8[0x4],lr
800185ae:	f5 37 00 15 	ld.ub	r7,r10[21]
800185b2:	f2 07 18 00 	cp.b	r7,r9
800185b6:	f9 b7 01 20 	movne	r7,32
800185ba:	f9 b7 00 00 	moveq	r7,0
800185be:	0e 4e       	or	lr,r7
800185c0:	b0 ce       	st.b	r8[0x4],lr
      data++;
800185c2:	2e aa       	sub	r10,-22
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800185c4:	15 87       	ld.ub	r7,r10[0x0]
800185c6:	f2 07 18 00 	cp.b	r7,r9
800185ca:	f9 b7 01 40 	movne	r7,64
800185ce:	f9 b7 00 00 	moveq	r7,0
800185d2:	0e 4e       	or	lr,r7
800185d4:	b0 ce       	st.b	r8[0x4],lr
800185d6:	15 9a       	ld.ub	r10,r10[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
800185d8:	b0 d9       	st.b	r8[0x5],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800185da:	f2 0a 18 00 	cp.b	r10,r9
800185de:	5f 1a       	srne	r10
800185e0:	fd ea 10 7e 	or	lr,lr,r10<<0x7
800185e4:	f6 ca ff f8 	sub	r10,r11,-8
800185e8:	b0 ce       	st.b	r8[0x4],lr
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
800185ea:	f4 cb ff f8 	sub	r11,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800185ee:	17 8e       	ld.ub	lr,r11[0x0]
800185f0:	f2 0e 18 00 	cp.b	lr,r9
800185f4:	5f 1e       	srne	lr
800185f6:	b0 de       	st.b	r8[0x5],lr
800185f8:	f9 37 00 19 	ld.ub	r7,r12[25]
800185fc:	f2 07 18 00 	cp.b	r7,r9
80018600:	f9 b7 01 02 	movne	r7,2
80018604:	f9 b7 00 00 	moveq	r7,0
80018608:	0e 4e       	or	lr,r7
8001860a:	b0 de       	st.b	r8[0x5],lr
8001860c:	f9 37 00 1a 	ld.ub	r7,r12[26]
80018610:	f2 07 18 00 	cp.b	r7,r9
80018614:	f9 b7 01 04 	movne	r7,4
80018618:	f9 b7 00 00 	moveq	r7,0
8001861c:	0e 4e       	or	lr,r7
8001861e:	b0 de       	st.b	r8[0x5],lr
80018620:	f9 37 00 1b 	ld.ub	r7,r12[27]
80018624:	f2 07 18 00 	cp.b	r7,r9
80018628:	f9 b7 01 08 	movne	r7,8
8001862c:	f9 b7 00 00 	moveq	r7,0
80018630:	0e 4e       	or	lr,r7
80018632:	b0 de       	st.b	r8[0x5],lr
80018634:	f9 37 00 1c 	ld.ub	r7,r12[28]
80018638:	f2 07 18 00 	cp.b	r7,r9
8001863c:	f9 b7 01 10 	movne	r7,16
80018640:	f9 b7 00 00 	moveq	r7,0
80018644:	0e 4e       	or	lr,r7
80018646:	b0 de       	st.b	r8[0x5],lr
80018648:	f9 37 00 1d 	ld.ub	r7,r12[29]
8001864c:	f2 07 18 00 	cp.b	r7,r9
80018650:	f9 b7 01 20 	movne	r7,32
80018654:	f9 b7 00 00 	moveq	r7,0
80018658:	0e 4e       	or	lr,r7
8001865a:	b0 de       	st.b	r8[0x5],lr
      data++;
8001865c:	2e 2c       	sub	r12,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
8001865e:	19 87       	ld.ub	r7,r12[0x0]
80018660:	f2 07 18 00 	cp.b	r7,r9
80018664:	f9 b7 01 40 	movne	r7,64
80018668:	f9 b7 00 00 	moveq	r7,0
8001866c:	0e 4e       	or	lr,r7
8001866e:	b0 de       	st.b	r8[0x5],lr
80018670:	19 9c       	ld.ub	r12,r12[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018672:	b0 e9       	st.b	r8[0x6],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018674:	f2 0c 18 00 	cp.b	r12,r9
80018678:	5f 1c       	srne	r12
8001867a:	fd ec 10 7e 	or	lr,lr,r12<<0x7
8001867e:	2f 8b       	sub	r11,-8
80018680:	b0 de       	st.b	r8[0x5],lr
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018682:	f6 cc ff f8 	sub	r12,r11,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018686:	19 8e       	ld.ub	lr,r12[0x0]
80018688:	f2 0e 18 00 	cp.b	lr,r9
8001868c:	5f 1e       	srne	lr
8001868e:	b0 ee       	st.b	r8[0x6],lr
80018690:	f5 37 00 19 	ld.ub	r7,r10[25]
80018694:	f2 07 18 00 	cp.b	r7,r9
80018698:	f9 b7 01 02 	movne	r7,2
8001869c:	f9 b7 00 00 	moveq	r7,0
800186a0:	0e 4e       	or	lr,r7
800186a2:	b0 ee       	st.b	r8[0x6],lr
800186a4:	f5 37 00 1a 	ld.ub	r7,r10[26]
800186a8:	f2 07 18 00 	cp.b	r7,r9
800186ac:	f9 b7 01 04 	movne	r7,4
800186b0:	f9 b7 00 00 	moveq	r7,0
800186b4:	0e 4e       	or	lr,r7
800186b6:	b0 ee       	st.b	r8[0x6],lr
800186b8:	f5 37 00 1b 	ld.ub	r7,r10[27]
800186bc:	f2 07 18 00 	cp.b	r7,r9
800186c0:	f9 b7 01 08 	movne	r7,8
800186c4:	f9 b7 00 00 	moveq	r7,0
800186c8:	0e 4e       	or	lr,r7
800186ca:	b0 ee       	st.b	r8[0x6],lr
800186cc:	f5 37 00 1c 	ld.ub	r7,r10[28]
800186d0:	f2 07 18 00 	cp.b	r7,r9
800186d4:	f9 b7 01 10 	movne	r7,16
800186d8:	f9 b7 00 00 	moveq	r7,0
800186dc:	0e 4e       	or	lr,r7
800186de:	b0 ee       	st.b	r8[0x6],lr
800186e0:	f5 37 00 1d 	ld.ub	r7,r10[29]
800186e4:	f2 07 18 00 	cp.b	r7,r9
800186e8:	f9 b7 01 20 	movne	r7,32
800186ec:	f9 b7 00 00 	moveq	r7,0
800186f0:	0e 4e       	or	lr,r7
800186f2:	b0 ee       	st.b	r8[0x6],lr
      data++;
800186f4:	2e 2a       	sub	r10,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800186f6:	15 87       	ld.ub	r7,r10[0x0]
800186f8:	f2 07 18 00 	cp.b	r7,r9
800186fc:	f9 b7 01 40 	movne	r7,64
80018700:	f9 b7 00 00 	moveq	r7,0
80018704:	0e 4e       	or	lr,r7
80018706:	b0 ee       	st.b	r8[0x6],lr
80018708:	15 9a       	ld.ub	r10,r10[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
8001870a:	b0 f9       	st.b	r8[0x7],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
8001870c:	f2 0a 18 00 	cp.b	r10,r9
80018710:	5f 1a       	srne	r10
80018712:	fd ea 10 7e 	or	lr,lr,r10<<0x7
80018716:	2f 8c       	sub	r12,-8
80018718:	b0 ee       	st.b	r8[0x6],lr
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
8001871a:	f8 ca ff f8 	sub	r10,r12,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
8001871e:	15 8e       	ld.ub	lr,r10[0x0]
80018720:	f2 0e 18 00 	cp.b	lr,r9
80018724:	5f 1e       	srne	lr
80018726:	b0 fe       	st.b	r8[0x7],lr
80018728:	f7 37 00 19 	ld.ub	r7,r11[25]
8001872c:	f2 07 18 00 	cp.b	r7,r9
80018730:	f9 b7 01 02 	movne	r7,2
80018734:	f9 b7 00 00 	moveq	r7,0
80018738:	0e 4e       	or	lr,r7
8001873a:	b0 fe       	st.b	r8[0x7],lr
8001873c:	f7 37 00 1a 	ld.ub	r7,r11[26]
80018740:	f2 07 18 00 	cp.b	r7,r9
80018744:	f9 b7 01 04 	movne	r7,4
80018748:	f9 b7 00 00 	moveq	r7,0
8001874c:	0e 4e       	or	lr,r7
8001874e:	b0 fe       	st.b	r8[0x7],lr
80018750:	f7 37 00 1b 	ld.ub	r7,r11[27]
80018754:	f2 07 18 00 	cp.b	r7,r9
80018758:	f9 b7 01 08 	movne	r7,8
8001875c:	f9 b7 00 00 	moveq	r7,0
80018760:	0e 4e       	or	lr,r7
80018762:	b0 fe       	st.b	r8[0x7],lr
80018764:	f7 37 00 1c 	ld.ub	r7,r11[28]
80018768:	f2 07 18 00 	cp.b	r7,r9
8001876c:	f9 b7 01 10 	movne	r7,16
80018770:	f9 b7 00 00 	moveq	r7,0
80018774:	0e 4e       	or	lr,r7
80018776:	b0 fe       	st.b	r8[0x7],lr
80018778:	f7 37 00 1d 	ld.ub	r7,r11[29]
8001877c:	f2 07 18 00 	cp.b	r7,r9
80018780:	f9 b7 01 20 	movne	r7,32
80018784:	f9 b7 00 00 	moveq	r7,0
80018788:	0e 4e       	or	lr,r7
8001878a:	b0 fe       	st.b	r8[0x7],lr
      data++;
8001878c:	2e 2b       	sub	r11,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
8001878e:	17 87       	ld.ub	r7,r11[0x0]
80018790:	f2 07 18 00 	cp.b	r7,r9
80018794:	f9 b7 01 40 	movne	r7,64
80018798:	f9 b7 00 00 	moveq	r7,0
8001879c:	0e 4e       	or	lr,r7
8001879e:	b0 fe       	st.b	r8[0x7],lr
800187a0:	17 9b       	ld.ub	r11,r11[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
800187a2:	f1 69 00 08 	st.b	r8[8],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800187a6:	f2 0b 18 00 	cp.b	r11,r9
800187aa:	5f 1b       	srne	r11
800187ac:	fd eb 10 7e 	or	lr,lr,r11<<0x7
800187b0:	2f 8a       	sub	r10,-8
800187b2:	b0 fe       	st.b	r8[0x7],lr
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
800187b4:	f4 cb ff f8 	sub	r11,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800187b8:	17 8e       	ld.ub	lr,r11[0x0]
800187ba:	f2 0e 18 00 	cp.b	lr,r9
800187be:	5f 1e       	srne	lr
800187c0:	f1 6e 00 08 	st.b	r8[8],lr
800187c4:	f9 37 00 19 	ld.ub	r7,r12[25]
800187c8:	f2 07 18 00 	cp.b	r7,r9
800187cc:	f9 b7 01 02 	movne	r7,2
800187d0:	f9 b7 00 00 	moveq	r7,0
800187d4:	0e 4e       	or	lr,r7
800187d6:	f1 6e 00 08 	st.b	r8[8],lr
800187da:	f9 37 00 1a 	ld.ub	r7,r12[26]
800187de:	f2 07 18 00 	cp.b	r7,r9
800187e2:	f9 b7 01 04 	movne	r7,4
800187e6:	f9 b7 00 00 	moveq	r7,0
800187ea:	0e 4e       	or	lr,r7
800187ec:	f1 6e 00 08 	st.b	r8[8],lr
800187f0:	f9 37 00 1b 	ld.ub	r7,r12[27]
800187f4:	f2 07 18 00 	cp.b	r7,r9
800187f8:	f9 b7 01 08 	movne	r7,8
800187fc:	f9 b7 00 00 	moveq	r7,0
80018800:	0e 4e       	or	lr,r7
80018802:	f1 6e 00 08 	st.b	r8[8],lr
80018806:	f9 37 00 1c 	ld.ub	r7,r12[28]
8001880a:	f2 07 18 00 	cp.b	r7,r9
8001880e:	f9 b7 01 10 	movne	r7,16
80018812:	f9 b7 00 00 	moveq	r7,0
80018816:	0e 4e       	or	lr,r7
80018818:	f1 6e 00 08 	st.b	r8[8],lr
8001881c:	f9 37 00 1d 	ld.ub	r7,r12[29]
80018820:	f2 07 18 00 	cp.b	r7,r9
80018824:	f9 b7 01 20 	movne	r7,32
80018828:	f9 b7 00 00 	moveq	r7,0
8001882c:	0e 4e       	or	lr,r7
8001882e:	f1 6e 00 08 	st.b	r8[8],lr
      data++;
80018832:	2e 2c       	sub	r12,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018834:	19 87       	ld.ub	r7,r12[0x0]
80018836:	f2 07 18 00 	cp.b	r7,r9
8001883a:	f9 b7 01 40 	movne	r7,64
8001883e:	f9 b7 00 00 	moveq	r7,0
80018842:	0e 4e       	or	lr,r7
80018844:	f1 6e 00 08 	st.b	r8[8],lr
80018848:	19 9c       	ld.ub	r12,r12[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
8001884a:	f1 69 00 09 	st.b	r8[9],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
8001884e:	f2 0c 18 00 	cp.b	r12,r9
80018852:	5f 1c       	srne	r12
80018854:	fd ec 10 7e 	or	lr,lr,r12<<0x7
80018858:	2f 8b       	sub	r11,-8
8001885a:	f1 6e 00 08 	st.b	r8[8],lr
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
8001885e:	f6 cc ff f8 	sub	r12,r11,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018862:	19 8e       	ld.ub	lr,r12[0x0]
80018864:	f2 0e 18 00 	cp.b	lr,r9
80018868:	5f 1e       	srne	lr
8001886a:	f1 6e 00 09 	st.b	r8[9],lr
8001886e:	f5 37 00 19 	ld.ub	r7,r10[25]
80018872:	f2 07 18 00 	cp.b	r7,r9
80018876:	f9 b7 01 02 	movne	r7,2
8001887a:	f9 b7 00 00 	moveq	r7,0
8001887e:	0e 4e       	or	lr,r7
80018880:	f1 6e 00 09 	st.b	r8[9],lr
80018884:	f5 37 00 1a 	ld.ub	r7,r10[26]
80018888:	f2 07 18 00 	cp.b	r7,r9
8001888c:	f9 b7 01 04 	movne	r7,4
80018890:	f9 b7 00 00 	moveq	r7,0
80018894:	0e 4e       	or	lr,r7
80018896:	f1 6e 00 09 	st.b	r8[9],lr
8001889a:	f5 37 00 1b 	ld.ub	r7,r10[27]
8001889e:	f2 07 18 00 	cp.b	r7,r9
800188a2:	f9 b7 01 08 	movne	r7,8
800188a6:	f9 b7 00 00 	moveq	r7,0
800188aa:	0e 4e       	or	lr,r7
800188ac:	f1 6e 00 09 	st.b	r8[9],lr
800188b0:	f5 37 00 1c 	ld.ub	r7,r10[28]
800188b4:	f2 07 18 00 	cp.b	r7,r9
800188b8:	f9 b7 01 10 	movne	r7,16
800188bc:	f9 b7 00 00 	moveq	r7,0
800188c0:	0e 4e       	or	lr,r7
800188c2:	f1 6e 00 09 	st.b	r8[9],lr
800188c6:	f5 37 00 1d 	ld.ub	r7,r10[29]
800188ca:	f2 07 18 00 	cp.b	r7,r9
800188ce:	f9 b7 01 20 	movne	r7,32
800188d2:	f9 b7 00 00 	moveq	r7,0
800188d6:	0e 4e       	or	lr,r7
800188d8:	f1 6e 00 09 	st.b	r8[9],lr
      data++;
800188dc:	2e 2a       	sub	r10,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800188de:	15 87       	ld.ub	r7,r10[0x0]
800188e0:	f2 07 18 00 	cp.b	r7,r9
800188e4:	f9 b7 01 40 	movne	r7,64
800188e8:	f9 b7 00 00 	moveq	r7,0
800188ec:	0e 4e       	or	lr,r7
800188ee:	f1 6e 00 09 	st.b	r8[9],lr
800188f2:	15 9a       	ld.ub	r10,r10[0x1]
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
800188f4:	f1 69 00 0a 	st.b	r8[10],r9
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800188f8:	f2 0a 18 00 	cp.b	r10,r9
800188fc:	5f 1a       	srne	r10
800188fe:	fd ea 10 7e 	or	lr,lr,r10<<0x7
80018902:	f1 6e 00 09 	st.b	r8[9],lr
80018906:	f9 3a 00 10 	ld.ub	r10,r12[16]
8001890a:	f2 0a 18 00 	cp.b	r10,r9
8001890e:	5f 1a       	srne	r10
80018910:	f1 6a 00 0a 	st.b	r8[10],r10
80018914:	f7 3c 00 19 	ld.ub	r12,r11[25]
80018918:	f2 0c 18 00 	cp.b	r12,r9
8001891c:	f9 bc 01 02 	movne	r12,2
80018920:	f9 bc 00 00 	moveq	r12,0
80018924:	18 4a       	or	r10,r12
80018926:	f1 6a 00 0a 	st.b	r8[10],r10
8001892a:	f7 3c 00 1a 	ld.ub	r12,r11[26]
8001892e:	f2 0c 18 00 	cp.b	r12,r9
80018932:	f9 bc 01 04 	movne	r12,4
80018936:	f9 bc 00 00 	moveq	r12,0
8001893a:	18 4a       	or	r10,r12
8001893c:	f1 6a 00 0a 	st.b	r8[10],r10
80018940:	f7 3c 00 1b 	ld.ub	r12,r11[27]
80018944:	f2 0c 18 00 	cp.b	r12,r9
80018948:	f9 bc 01 08 	movne	r12,8
8001894c:	f9 bc 00 00 	moveq	r12,0
80018950:	18 4a       	or	r10,r12
80018952:	f1 6a 00 0a 	st.b	r8[10],r10
80018956:	f7 3c 00 1c 	ld.ub	r12,r11[28]
8001895a:	f2 0c 18 00 	cp.b	r12,r9
8001895e:	f9 bc 01 10 	movne	r12,16
80018962:	f9 bc 00 00 	moveq	r12,0
80018966:	18 4a       	or	r10,r12
80018968:	f1 6a 00 0a 	st.b	r8[10],r10
8001896c:	f7 3c 00 1d 	ld.ub	r12,r11[29]
80018970:	f2 0c 18 00 	cp.b	r12,r9
80018974:	f9 bc 01 20 	movne	r12,32
80018978:	f9 bc 00 00 	moveq	r12,0
8001897c:	18 4a       	or	r10,r12
8001897e:	f1 6a 00 0a 	st.b	r8[10],r10
      data++;
80018982:	2e 2b       	sub	r11,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018984:	17 8e       	ld.ub	lr,r11[0x0]
80018986:	f2 0e 18 00 	cp.b	lr,r9
8001898a:	f9 be 01 40 	movne	lr,64
8001898e:	f9 be 00 00 	moveq	lr,0
80018992:	1c 4a       	or	r10,lr
80018994:	f1 6a 00 0a 	st.b	r8[10],r10
80018998:	17 9b       	ld.ub	r11,r11[0x1]
8001899a:	f2 0b 18 00 	cp.b	r11,r9
8001899e:	5f 19       	srne	r9
800189a0:	f5 e9 10 7a 	or	r10,r10,r9<<0x7
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ptx++;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 3);
800189a4:	10 9c       	mov	r12,r8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800189a6:	f1 6a 00 0a 	st.b	r8[10],r10
800189aa:	e0 6a 0b c6 	mov	r10,3014
800189ae:	2f 58       	sub	r8,-11
800189b0:	30 89       	mov	r9,8
800189b2:	b4 89       	st.b	r10[0x0],r9
800189b4:	e0 6a 0b d0 	mov	r10,3024
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ptx++;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 3);
800189b8:	95 08       	st.w	r10[0x0],r8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
800189ba:	e0 68 0b c4 	mov	r8,3012
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ptx++;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 3);
800189be:	30 bb       	mov	r11,11
}
800189c0:	b0 89       	st.b	r8[0x0],r9
800189c2:	e0 a0 11 d1 	rcall	8001ad64 <ftdi_write>
800189c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800189ca:	d7 03       	nop

800189cc <grid_map_series>:
800189cc:	d4 21       	pushm	r4-r7,lr
800189ce:	30 88       	mov	r8,8
800189d0:	f0 0c 18 00 	cp.b	r12,r8
800189d4:	5f b9       	srhi	r9
800189d6:	e0 6c 0b d4 	mov	r12,3028
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 8) | ((y > 8) << 1) );
800189da:	f0 0b 18 00 	cp.b	r11,r8
800189de:	e0 8b 02 7d 	brhi	80018ed8 <grid_map_series+0x50c>
800189e2:	ea 19 ff ff 	orh	r9,0xffff
800189e6:	e8 19 ff 80 	orl	r9,0xff80

  // pointer to tx data
  ptx = txBuf + 1;
800189ea:	e0 6e 0b c0 	mov	lr,3008
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 8) | ((y > 8) << 1) );
800189ee:	18 c9       	st.b	r12++,r9

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
800189f0:	e0 67 0b c8 	mov	r7,3016
800189f4:	30 08       	mov	r8,0
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 8) | ((y > 8) << 1) );

  // pointer to tx data
  ptx = txBuf + 1;
800189f6:	9d 0c       	st.w	lr[0x0],r12
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
800189f8:	ae 88       	st.b	r7[0x0],r8
800189fa:	18 9b       	mov	r11,r12
    *ptx = 0;
800189fc:	30 08       	mov	r8,0
800189fe:	b6 88       	st.b	r11[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018a00:	14 99       	mov	r9,r10
80018a02:	13 3c       	ld.ub	r12,r9++
80018a04:	f0 0c 18 00 	cp.b	r12,r8
80018a08:	5f 1c       	srne	r12
80018a0a:	b6 8c       	st.b	r11[0x0],r12
80018a0c:	13 36       	ld.ub	r6,r9++
80018a0e:	f0 06 18 00 	cp.b	r6,r8
80018a12:	f9 b6 01 02 	movne	r6,2
80018a16:	f9 b6 00 00 	moveq	r6,0
80018a1a:	0c 4c       	or	r12,r6
80018a1c:	b6 8c       	st.b	r11[0x0],r12
80018a1e:	13 36       	ld.ub	r6,r9++
80018a20:	f0 06 18 00 	cp.b	r6,r8
80018a24:	f9 b6 01 04 	movne	r6,4
80018a28:	f9 b6 00 00 	moveq	r6,0
80018a2c:	0c 4c       	or	r12,r6
80018a2e:	b6 8c       	st.b	r11[0x0],r12
80018a30:	13 36       	ld.ub	r6,r9++
80018a32:	f0 06 18 00 	cp.b	r6,r8
80018a36:	f9 b6 01 08 	movne	r6,8
80018a3a:	f9 b6 00 00 	moveq	r6,0
80018a3e:	0c 4c       	or	r12,r6
80018a40:	b6 8c       	st.b	r11[0x0],r12
80018a42:	13 36       	ld.ub	r6,r9++
80018a44:	f0 06 18 00 	cp.b	r6,r8
80018a48:	f9 b6 01 10 	movne	r6,16
80018a4c:	f9 b6 00 00 	moveq	r6,0
80018a50:	0c 4c       	or	r12,r6
80018a52:	b6 8c       	st.b	r11[0x0],r12
80018a54:	13 36       	ld.ub	r6,r9++
80018a56:	f0 06 18 00 	cp.b	r6,r8
80018a5a:	f9 b6 01 20 	movne	r6,32
80018a5e:	f9 b6 00 00 	moveq	r6,0
80018a62:	0c 4c       	or	r12,r6
80018a64:	b6 8c       	st.b	r11[0x0],r12
80018a66:	13 86       	ld.ub	r6,r9[0x0]
80018a68:	f0 06 18 00 	cp.b	r6,r8
80018a6c:	f9 b6 01 40 	movne	r6,64
80018a70:	f9 b6 00 00 	moveq	r6,0
80018a74:	0c 4c       	or	r12,r6
80018a76:	b6 8c       	st.b	r11[0x0],r12
80018a78:	13 99       	ld.ub	r9,r9[0x1]
80018a7a:	f0 09 18 00 	cp.b	r9,r8
80018a7e:	5f 19       	srne	r9
80018a80:	f9 e9 10 7c 	or	r12,r12,r9<<0x7
80018a84:	16 99       	mov	r9,r11
80018a86:	12 cc       	st.b	r9++,r12
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018a88:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018a8a:	f4 cc ff f8 	sub	r12,r10,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018a8e:	f8 c6 ff f8 	sub	r6,r12,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018a92:	0d 85       	ld.ub	r5,r6[0x0]
80018a94:	f0 05 18 00 	cp.b	r5,r8
80018a98:	5f 15       	srne	r5
80018a9a:	b2 85       	st.b	r9[0x0],r5
80018a9c:	f5 34 00 11 	ld.ub	r4,r10[17]
80018aa0:	f0 04 18 00 	cp.b	r4,r8
80018aa4:	f9 b4 01 02 	movne	r4,2
80018aa8:	f9 b4 00 00 	moveq	r4,0
80018aac:	08 45       	or	r5,r4
80018aae:	b2 85       	st.b	r9[0x0],r5
80018ab0:	f5 34 00 12 	ld.ub	r4,r10[18]
80018ab4:	f0 04 18 00 	cp.b	r4,r8
80018ab8:	f9 b4 01 04 	movne	r4,4
80018abc:	f9 b4 00 00 	moveq	r4,0
80018ac0:	08 45       	or	r5,r4
80018ac2:	b2 85       	st.b	r9[0x0],r5
80018ac4:	f5 34 00 13 	ld.ub	r4,r10[19]
80018ac8:	f0 04 18 00 	cp.b	r4,r8
80018acc:	f9 b4 01 08 	movne	r4,8
80018ad0:	f9 b4 00 00 	moveq	r4,0
80018ad4:	08 45       	or	r5,r4
80018ad6:	b2 85       	st.b	r9[0x0],r5
80018ad8:	f5 34 00 14 	ld.ub	r4,r10[20]
80018adc:	f0 04 18 00 	cp.b	r4,r8
80018ae0:	f9 b4 01 10 	movne	r4,16
80018ae4:	f9 b4 00 00 	moveq	r4,0
80018ae8:	08 45       	or	r5,r4
80018aea:	b2 85       	st.b	r9[0x0],r5
80018aec:	f5 34 00 15 	ld.ub	r4,r10[21]
80018af0:	f0 04 18 00 	cp.b	r4,r8
80018af4:	f9 b4 01 20 	movne	r4,32
80018af8:	f9 b4 00 00 	moveq	r4,0
80018afc:	08 45       	or	r5,r4
80018afe:	b2 85       	st.b	r9[0x0],r5
      data++;
80018b00:	2e aa       	sub	r10,-22
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018b02:	15 84       	ld.ub	r4,r10[0x0]
80018b04:	f0 04 18 00 	cp.b	r4,r8
80018b08:	f9 b4 01 40 	movne	r4,64
80018b0c:	f9 b4 00 00 	moveq	r4,0
80018b10:	08 45       	or	r5,r4
80018b12:	b2 85       	st.b	r9[0x0],r5
80018b14:	15 9a       	ld.ub	r10,r10[0x1]
80018b16:	f0 0a 18 00 	cp.b	r10,r8
80018b1a:	5f 1a       	srne	r10
80018b1c:	eb ea 10 75 	or	r5,r5,r10<<0x7
80018b20:	12 c5       	st.b	r9++,r5
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018b22:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018b24:	ec ca ff f8 	sub	r10,r6,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018b28:	f4 c6 ff f8 	sub	r6,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018b2c:	0d 85       	ld.ub	r5,r6[0x0]
80018b2e:	f0 05 18 00 	cp.b	r5,r8
80018b32:	5f 15       	srne	r5
80018b34:	b2 85       	st.b	r9[0x0],r5
80018b36:	f9 34 00 19 	ld.ub	r4,r12[25]
80018b3a:	f0 04 18 00 	cp.b	r4,r8
80018b3e:	f9 b4 01 02 	movne	r4,2
80018b42:	f9 b4 00 00 	moveq	r4,0
80018b46:	08 45       	or	r5,r4
80018b48:	b2 85       	st.b	r9[0x0],r5
80018b4a:	f9 34 00 1a 	ld.ub	r4,r12[26]
80018b4e:	f0 04 18 00 	cp.b	r4,r8
80018b52:	f9 b4 01 04 	movne	r4,4
80018b56:	f9 b4 00 00 	moveq	r4,0
80018b5a:	08 45       	or	r5,r4
80018b5c:	b2 85       	st.b	r9[0x0],r5
80018b5e:	f9 34 00 1b 	ld.ub	r4,r12[27]
80018b62:	f0 04 18 00 	cp.b	r4,r8
80018b66:	f9 b4 01 08 	movne	r4,8
80018b6a:	f9 b4 00 00 	moveq	r4,0
80018b6e:	08 45       	or	r5,r4
80018b70:	b2 85       	st.b	r9[0x0],r5
80018b72:	f9 34 00 1c 	ld.ub	r4,r12[28]
80018b76:	f0 04 18 00 	cp.b	r4,r8
80018b7a:	f9 b4 01 10 	movne	r4,16
80018b7e:	f9 b4 00 00 	moveq	r4,0
80018b82:	08 45       	or	r5,r4
80018b84:	b2 85       	st.b	r9[0x0],r5
80018b86:	f9 34 00 1d 	ld.ub	r4,r12[29]
80018b8a:	f0 04 18 00 	cp.b	r4,r8
80018b8e:	f9 b4 01 20 	movne	r4,32
80018b92:	f9 b4 00 00 	moveq	r4,0
80018b96:	08 45       	or	r5,r4
80018b98:	b2 85       	st.b	r9[0x0],r5
      data++;
80018b9a:	2e 2c       	sub	r12,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018b9c:	19 84       	ld.ub	r4,r12[0x0]
80018b9e:	f0 04 18 00 	cp.b	r4,r8
80018ba2:	f9 b4 01 40 	movne	r4,64
80018ba6:	f9 b4 00 00 	moveq	r4,0
80018baa:	08 45       	or	r5,r4
80018bac:	b2 85       	st.b	r9[0x0],r5
80018bae:	19 9c       	ld.ub	r12,r12[0x1]
80018bb0:	f0 0c 18 00 	cp.b	r12,r8
80018bb4:	5f 1c       	srne	r12
80018bb6:	eb ec 10 75 	or	r5,r5,r12<<0x7
80018bba:	12 c5       	st.b	r9++,r5
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018bbc:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018bbe:	ec cc ff f8 	sub	r12,r6,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018bc2:	f8 c6 ff f8 	sub	r6,r12,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018bc6:	0d 85       	ld.ub	r5,r6[0x0]
80018bc8:	f0 05 18 00 	cp.b	r5,r8
80018bcc:	5f 15       	srne	r5
80018bce:	b2 85       	st.b	r9[0x0],r5
80018bd0:	f5 34 00 19 	ld.ub	r4,r10[25]
80018bd4:	f0 04 18 00 	cp.b	r4,r8
80018bd8:	f9 b4 01 02 	movne	r4,2
80018bdc:	f9 b4 00 00 	moveq	r4,0
80018be0:	08 45       	or	r5,r4
80018be2:	b2 85       	st.b	r9[0x0],r5
80018be4:	f5 34 00 1a 	ld.ub	r4,r10[26]
80018be8:	f0 04 18 00 	cp.b	r4,r8
80018bec:	f9 b4 01 04 	movne	r4,4
80018bf0:	f9 b4 00 00 	moveq	r4,0
80018bf4:	08 45       	or	r5,r4
80018bf6:	b2 85       	st.b	r9[0x0],r5
80018bf8:	f5 34 00 1b 	ld.ub	r4,r10[27]
80018bfc:	f0 04 18 00 	cp.b	r4,r8
80018c00:	f9 b4 01 08 	movne	r4,8
80018c04:	f9 b4 00 00 	moveq	r4,0
80018c08:	08 45       	or	r5,r4
80018c0a:	b2 85       	st.b	r9[0x0],r5
80018c0c:	f5 34 00 1c 	ld.ub	r4,r10[28]
80018c10:	f0 04 18 00 	cp.b	r4,r8
80018c14:	f9 b4 01 10 	movne	r4,16
80018c18:	f9 b4 00 00 	moveq	r4,0
80018c1c:	08 45       	or	r5,r4
80018c1e:	b2 85       	st.b	r9[0x0],r5
80018c20:	f5 34 00 1d 	ld.ub	r4,r10[29]
80018c24:	f0 04 18 00 	cp.b	r4,r8
80018c28:	f9 b4 01 20 	movne	r4,32
80018c2c:	f9 b4 00 00 	moveq	r4,0
80018c30:	08 45       	or	r5,r4
80018c32:	b2 85       	st.b	r9[0x0],r5
      data++;
80018c34:	2e 2a       	sub	r10,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018c36:	15 84       	ld.ub	r4,r10[0x0]
80018c38:	f0 04 18 00 	cp.b	r4,r8
80018c3c:	f9 b4 01 40 	movne	r4,64
80018c40:	f9 b4 00 00 	moveq	r4,0
80018c44:	08 45       	or	r5,r4
80018c46:	b2 85       	st.b	r9[0x0],r5
80018c48:	15 9a       	ld.ub	r10,r10[0x1]
80018c4a:	f0 0a 18 00 	cp.b	r10,r8
80018c4e:	5f 1a       	srne	r10
80018c50:	eb ea 10 75 	or	r5,r5,r10<<0x7
80018c54:	12 c5       	st.b	r9++,r5
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018c56:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018c58:	ec ca ff f8 	sub	r10,r6,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018c5c:	f4 c6 ff f8 	sub	r6,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018c60:	0d 85       	ld.ub	r5,r6[0x0]
80018c62:	f0 05 18 00 	cp.b	r5,r8
80018c66:	5f 15       	srne	r5
80018c68:	b2 85       	st.b	r9[0x0],r5
80018c6a:	f9 34 00 19 	ld.ub	r4,r12[25]
80018c6e:	f0 04 18 00 	cp.b	r4,r8
80018c72:	f9 b4 01 02 	movne	r4,2
80018c76:	f9 b4 00 00 	moveq	r4,0
80018c7a:	08 45       	or	r5,r4
80018c7c:	b2 85       	st.b	r9[0x0],r5
80018c7e:	f9 34 00 1a 	ld.ub	r4,r12[26]
80018c82:	f0 04 18 00 	cp.b	r4,r8
80018c86:	f9 b4 01 04 	movne	r4,4
80018c8a:	f9 b4 00 00 	moveq	r4,0
80018c8e:	08 45       	or	r5,r4
80018c90:	b2 85       	st.b	r9[0x0],r5
80018c92:	f9 34 00 1b 	ld.ub	r4,r12[27]
80018c96:	f0 04 18 00 	cp.b	r4,r8
80018c9a:	f9 b4 01 08 	movne	r4,8
80018c9e:	f9 b4 00 00 	moveq	r4,0
80018ca2:	08 45       	or	r5,r4
80018ca4:	b2 85       	st.b	r9[0x0],r5
80018ca6:	f9 34 00 1c 	ld.ub	r4,r12[28]
80018caa:	f0 04 18 00 	cp.b	r4,r8
80018cae:	f9 b4 01 10 	movne	r4,16
80018cb2:	f9 b4 00 00 	moveq	r4,0
80018cb6:	08 45       	or	r5,r4
80018cb8:	b2 85       	st.b	r9[0x0],r5
80018cba:	f9 34 00 1d 	ld.ub	r4,r12[29]
80018cbe:	f0 04 18 00 	cp.b	r4,r8
80018cc2:	f9 b4 01 20 	movne	r4,32
80018cc6:	f9 b4 00 00 	moveq	r4,0
80018cca:	08 45       	or	r5,r4
80018ccc:	b2 85       	st.b	r9[0x0],r5
      data++;
80018cce:	2e 2c       	sub	r12,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018cd0:	19 84       	ld.ub	r4,r12[0x0]
80018cd2:	f0 04 18 00 	cp.b	r4,r8
80018cd6:	f9 b4 01 40 	movne	r4,64
80018cda:	f9 b4 00 00 	moveq	r4,0
80018cde:	08 45       	or	r5,r4
80018ce0:	b2 85       	st.b	r9[0x0],r5
80018ce2:	19 9c       	ld.ub	r12,r12[0x1]
80018ce4:	f0 0c 18 00 	cp.b	r12,r8
80018ce8:	5f 1c       	srne	r12
80018cea:	eb ec 10 75 	or	r5,r5,r12<<0x7
80018cee:	12 c5       	st.b	r9++,r5
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018cf0:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018cf2:	ec cc ff f8 	sub	r12,r6,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018cf6:	f8 c6 ff f8 	sub	r6,r12,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018cfa:	0d 85       	ld.ub	r5,r6[0x0]
80018cfc:	f0 05 18 00 	cp.b	r5,r8
80018d00:	5f 15       	srne	r5
80018d02:	b2 85       	st.b	r9[0x0],r5
80018d04:	f5 34 00 19 	ld.ub	r4,r10[25]
80018d08:	f0 04 18 00 	cp.b	r4,r8
80018d0c:	f9 b4 01 02 	movne	r4,2
80018d10:	f9 b4 00 00 	moveq	r4,0
80018d14:	08 45       	or	r5,r4
80018d16:	b2 85       	st.b	r9[0x0],r5
80018d18:	f5 34 00 1a 	ld.ub	r4,r10[26]
80018d1c:	f0 04 18 00 	cp.b	r4,r8
80018d20:	f9 b4 01 04 	movne	r4,4
80018d24:	f9 b4 00 00 	moveq	r4,0
80018d28:	08 45       	or	r5,r4
80018d2a:	b2 85       	st.b	r9[0x0],r5
80018d2c:	f5 34 00 1b 	ld.ub	r4,r10[27]
80018d30:	f0 04 18 00 	cp.b	r4,r8
80018d34:	f9 b4 01 08 	movne	r4,8
80018d38:	f9 b4 00 00 	moveq	r4,0
80018d3c:	08 45       	or	r5,r4
80018d3e:	b2 85       	st.b	r9[0x0],r5
80018d40:	f5 34 00 1c 	ld.ub	r4,r10[28]
80018d44:	f0 04 18 00 	cp.b	r4,r8
80018d48:	f9 b4 01 10 	movne	r4,16
80018d4c:	f9 b4 00 00 	moveq	r4,0
80018d50:	08 45       	or	r5,r4
80018d52:	b2 85       	st.b	r9[0x0],r5
80018d54:	f5 34 00 1d 	ld.ub	r4,r10[29]
80018d58:	f0 04 18 00 	cp.b	r4,r8
80018d5c:	f9 b4 01 20 	movne	r4,32
80018d60:	f9 b4 00 00 	moveq	r4,0
80018d64:	08 45       	or	r5,r4
80018d66:	b2 85       	st.b	r9[0x0],r5
      data++;
80018d68:	2e 2a       	sub	r10,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018d6a:	15 84       	ld.ub	r4,r10[0x0]
80018d6c:	f0 04 18 00 	cp.b	r4,r8
80018d70:	f9 b4 01 40 	movne	r4,64
80018d74:	f9 b4 00 00 	moveq	r4,0
80018d78:	08 45       	or	r5,r4
80018d7a:	b2 85       	st.b	r9[0x0],r5
80018d7c:	15 9a       	ld.ub	r10,r10[0x1]
80018d7e:	f0 0a 18 00 	cp.b	r10,r8
80018d82:	5f 1a       	srne	r10
80018d84:	eb ea 10 75 	or	r5,r5,r10<<0x7
80018d88:	12 c5       	st.b	r9++,r5
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018d8a:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018d8c:	ec ca ff f8 	sub	r10,r6,-8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
80018d90:	f4 c6 ff f8 	sub	r6,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018d94:	0d 85       	ld.ub	r5,r6[0x0]
80018d96:	f0 05 18 00 	cp.b	r5,r8
80018d9a:	5f 15       	srne	r5
80018d9c:	b2 85       	st.b	r9[0x0],r5
80018d9e:	f9 34 00 19 	ld.ub	r4,r12[25]
80018da2:	f0 04 18 00 	cp.b	r4,r8
80018da6:	f9 b4 01 02 	movne	r4,2
80018daa:	f9 b4 00 00 	moveq	r4,0
80018dae:	08 45       	or	r5,r4
80018db0:	b2 85       	st.b	r9[0x0],r5
80018db2:	f9 34 00 1a 	ld.ub	r4,r12[26]
80018db6:	f0 04 18 00 	cp.b	r4,r8
80018dba:	f9 b4 01 04 	movne	r4,4
80018dbe:	f9 b4 00 00 	moveq	r4,0
80018dc2:	08 45       	or	r5,r4
80018dc4:	b2 85       	st.b	r9[0x0],r5
80018dc6:	f9 34 00 1b 	ld.ub	r4,r12[27]
80018dca:	f0 04 18 00 	cp.b	r4,r8
80018dce:	f9 b4 01 08 	movne	r4,8
80018dd2:	f9 b4 00 00 	moveq	r4,0
80018dd6:	08 45       	or	r5,r4
80018dd8:	b2 85       	st.b	r9[0x0],r5
80018dda:	f9 34 00 1c 	ld.ub	r4,r12[28]
80018dde:	f0 04 18 00 	cp.b	r4,r8
80018de2:	f9 b4 01 10 	movne	r4,16
80018de6:	f9 b4 00 00 	moveq	r4,0
80018dea:	08 45       	or	r5,r4
80018dec:	b2 85       	st.b	r9[0x0],r5
80018dee:	f9 34 00 1d 	ld.ub	r4,r12[29]
80018df2:	f0 04 18 00 	cp.b	r4,r8
80018df6:	f9 b4 01 20 	movne	r4,32
80018dfa:	f9 b4 00 00 	moveq	r4,0
80018dfe:	eb e4 10 04 	or	r4,r5,r4
80018e02:	b2 84       	st.b	r9[0x0],r4
      data++;
80018e04:	f8 c5 ff e2 	sub	r5,r12,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018e08:	0b 8c       	ld.ub	r12,r5[0x0]
80018e0a:	f0 0c 18 00 	cp.b	r12,r8
80018e0e:	f9 bc 01 40 	movne	r12,64
80018e12:	f9 bc 00 00 	moveq	r12,0
80018e16:	e9 ec 10 0c 	or	r12,r4,r12
80018e1a:	b2 8c       	st.b	r9[0x0],r12
80018e1c:	0b 95       	ld.ub	r5,r5[0x1]
80018e1e:	f0 05 18 00 	cp.b	r5,r8
80018e22:	5f 15       	srne	r5
80018e24:	f9 e5 10 7c 	or	r12,r12,r5<<0x7
80018e28:	12 cc       	st.b	r9++,r12
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80018e2a:	b2 88       	st.b	r9[0x0],r8
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018e2c:	ed 3c 00 10 	ld.ub	r12,r6[16]
80018e30:	f0 0c 18 00 	cp.b	r12,r8
80018e34:	5f 1c       	srne	r12
80018e36:	b2 8c       	st.b	r9[0x0],r12
80018e38:	f5 36 00 19 	ld.ub	r6,r10[25]
80018e3c:	f0 06 18 00 	cp.b	r6,r8
80018e40:	f9 b6 01 02 	movne	r6,2
80018e44:	f9 b6 00 00 	moveq	r6,0
80018e48:	0c 4c       	or	r12,r6
80018e4a:	b2 8c       	st.b	r9[0x0],r12
80018e4c:	f5 36 00 1a 	ld.ub	r6,r10[26]
80018e50:	f0 06 18 00 	cp.b	r6,r8
80018e54:	f9 b6 01 04 	movne	r6,4
80018e58:	f9 b6 00 00 	moveq	r6,0
80018e5c:	0c 4c       	or	r12,r6
80018e5e:	b2 8c       	st.b	r9[0x0],r12
80018e60:	f5 36 00 1b 	ld.ub	r6,r10[27]
80018e64:	f0 06 18 00 	cp.b	r6,r8
80018e68:	f9 b6 01 08 	movne	r6,8
80018e6c:	f9 b6 00 00 	moveq	r6,0
80018e70:	0c 4c       	or	r12,r6
80018e72:	b2 8c       	st.b	r9[0x0],r12
80018e74:	f5 36 00 1c 	ld.ub	r6,r10[28]
80018e78:	f0 06 18 00 	cp.b	r6,r8
80018e7c:	f9 b6 01 10 	movne	r6,16
80018e80:	f9 b6 00 00 	moveq	r6,0
80018e84:	0c 4c       	or	r12,r6
80018e86:	b2 8c       	st.b	r9[0x0],r12
80018e88:	f5 36 00 1d 	ld.ub	r6,r10[29]
80018e8c:	f0 06 18 00 	cp.b	r6,r8
80018e90:	f9 b6 01 20 	movne	r6,32
80018e94:	f9 b6 00 00 	moveq	r6,0
80018e98:	0c 4c       	or	r12,r6
80018e9a:	b2 8c       	st.b	r9[0x0],r12
      data++;
80018e9c:	2e 2a       	sub	r10,-30
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > 0) << j);
80018e9e:	15 86       	ld.ub	r6,r10[0x0]
80018ea0:	f0 06 18 00 	cp.b	r6,r8
80018ea4:	f9 b6 01 40 	movne	r6,64
80018ea8:	f9 b6 00 00 	moveq	r6,0
80018eac:	0c 4c       	or	r12,r6
80018eae:	b2 8c       	st.b	r9[0x0],r12
80018eb0:	15 9a       	ld.ub	r10,r10[0x1]
80018eb2:	f0 0a 18 00 	cp.b	r10,r8
80018eb6:	5f 18       	srne	r8
80018eb8:	2f 8b       	sub	r11,-8
80018eba:	f9 e8 10 7c 	or	r12,r12,r8<<0x7
80018ebe:	30 88       	mov	r8,8
80018ec0:	b2 8c       	st.b	r9[0x0],r12
80018ec2:	e0 69 0c 1d 	mov	r9,3101
80018ec6:	9d 0b       	st.w	lr[0x0],r11
80018ec8:	ae 88       	st.b	r7[0x0],r8
      data++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ptx++;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 1);  
80018eca:	b2 88       	st.b	r9[0x0],r8
80018ecc:	30 9b       	mov	r11,9
80018ece:	e0 6c 0b d4 	mov	r12,3028
}
80018ed2:	e0 a0 0f 49 	rcall	8001ad64 <ftdi_write>
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 8) | ((y > 8) << 1) );
80018ed6:	d8 22       	popm	r4-r7,pc
80018ed8:	18 98       	mov	r8,r12
80018eda:	ea 19 ff ff 	orh	r9,0xffff
80018ede:	e8 19 ff 82 	orl	r9,0xff82

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80018ee2:	10 c9       	st.b	r8++,r9
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 8) | ((y > 8) << 1) );

  // pointer to tx data
  ptx = txBuf + 1;
80018ee4:	e0 6e 0b c0 	mov	lr,3008
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80018ee8:	e0 67 0b c8 	mov	r7,3016
80018eec:	9d 08       	st.w	lr[0x0],r8
80018eee:	30 08       	mov	r8,0
80018ef0:	7c 0b       	ld.w	r11,lr[0x0]
80018ef2:	ae 88       	st.b	r7[0x0],r8
80018ef4:	fe 9f fd 84 	bral	800189fc <grid_map_series+0x30>

80018ef8 <read_serial_series>:
80018ef8:	d4 31       	pushm	r0-r7,lr
80018efa:	e0 a0 0e cb 	rcall	8001ac90 <ftdi_rx_buf>
80018efe:	e0 64 0c 1c 	mov	r4,3100
80018f02:	18 97       	mov	r7,r12
}

static void read_serial_series(void) {
  u8* prx = ftdi_rx_buf();
  u8 i;
  rxBytes = ftdi_rx_bytes();
80018f04:	e0 a0 0e ca 	rcall	8001ac98 <ftdi_rx_bytes>
  /* print_dbg_hex(prx[0]); */
  /* print_dbg(" , 0x"); */
  /* print_dbg_hex(prx[1]); */
  /* print_dbg(" ]");   */
  i = 0;
  while(i < rxBytes) {
80018f08:	a8 8c       	st.b	r4[0x0],r12
80018f0a:	c2 30       	breq	80018f50 <read_serial_series+0x58>
80018f0c:	e0 65 0b b4 	mov	r5,2996
80018f10:	30 06       	mov	r6,0
80018f12:	ea c0 ff fc 	sub	r0,r5,-4
80018f16:	ea c1 ff fb 	sub	r1,r5,-5
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
80018f1a:	ea c2 ff fa 	sub	r2,r5,-6
    /* print_dbg("; y : 0x"); */
    /* print_dbg_hex(prx[1] & 0xf); */
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
80018f1e:	31 53       	mov	r3,21

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
  data[0] = x;
  data[1] = y;
80018f20:	0f 99       	ld.ub	r9,r7[0x1]
80018f22:	0f 88       	ld.ub	r8,r7[0x0]
80018f24:	f5 d9 c0 04 	bfextu	r10,r9,0x0,0x4
    /* print_dbg("; y : 0x"); */
    /* print_dbg_hex(prx[1] & 0xf); */
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
80018f28:	a2 8a       	st.b	r1[0x0],r10
80018f2a:	e2 18 00 f0 	andl	r8,0xf0,COH
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
80018f2e:	5f 08       	sreq	r8
//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
  data[0] = x;
80018f30:	a4 88       	st.b	r2[0x0],r8
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
				 ((prx[0] & 0xf0) == 0)
				 );
    i += 2;
    prx += 2;
80018f32:	8b 03       	st.w	r5[0x0],r3
//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
  data[0] = x;
80018f34:	a5 89       	lsr	r9,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
  post_event(&ev);
80018f36:	2f e7       	sub	r7,-2
80018f38:	a0 89       	st.b	r0[0x0],r9
80018f3a:	e0 6c 0b b4 	mov	r12,2996
  /* print_dbg_hex(prx[0]); */
  /* print_dbg(" , 0x"); */
  /* print_dbg_hex(prx[1]); */
  /* print_dbg(" ]");   */
  i = 0;
  while(i < rxBytes) {
80018f3e:	fe b0 f2 69 	rcall	80017410 <post_event>
80018f42:	2f e6       	sub	r6,-2
80018f44:	09 88       	ld.ub	r8,r4[0x0]
80018f46:	5c 56       	castu.b	r6
80018f48:	ec 08 18 00 	cp.b	r8,r6
80018f4c:	fe 9b ff ea 	brhi	80018f20 <read_serial_series+0x28>
80018f50:	d8 32       	popm	r0-r7,pc
80018f52:	d7 03       	nop

80018f54 <read_serial_mext>:
80018f54:	d4 31       	pushm	r0-r7,lr
80018f56:	e0 64 0c 1c 	mov	r4,3100
80018f5a:	e0 a0 0e 9f 	rcall	8001ac98 <ftdi_rx_bytes>
80018f5e:	a8 8c       	st.b	r4[0x0],r12
  static u8 nbp; // number of bytes processed
  static u8* prx; // pointer to rx buf
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
80018f60:	c0 21       	brne	80018f64 <read_serial_mext+0x10>
    nbp = 0;
80018f62:	d8 32       	popm	r0-r7,pc
80018f64:	30 08       	mov	r8,0
    prx = ftdi_rx_buf();
80018f66:	e0 65 0b b0 	mov	r5,2992
80018f6a:	e0 67 0b cc 	mov	r7,3020

//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
80018f6e:	aa 88       	st.b	r5[0x0],r8
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80018f70:	e0 a0 0e 90 	rcall	8001ac90 <ftdi_rx_buf>
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));    
80018f74:	e0 61 0b b4 	mov	r1,2996
      nbp++;
      switch(com) {
80018f78:	8f 0c       	st.w	r7[0x0],r12

//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
80018f7a:	0e 93       	mov	r3,r7
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80018f7c:	e0 62 0b bc 	mov	r2,3004
    while(nbp < rxBytes) {
80018f80:	0a 90       	mov	r0,r5
80018f82:	35 06       	mov	r6,80
80018f84:	2f c1       	sub	r1,-4
80018f86:	0b 88       	ld.ub	r8,r5[0x0]
      com = (u8)(*(prx++));    
80018f88:	09 8c       	ld.ub	r12,r4[0x0]
      nbp++;
80018f8a:	f0 0c 18 00 	cp.b	r12,r8
80018f8e:	fe 98 ff ea 	brls	80018f62 <read_serial_mext+0xe>
80018f92:	6e 0b       	ld.w	r11,r7[0x0]
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));    
80018f94:	2f f8       	sub	r8,-1
80018f96:	16 99       	mov	r9,r11
      nbp++;
      switch(com) {
80018f98:	5c 58       	castu.b	r8
80018f9a:	13 3a       	ld.ub	r10,r9++
80018f9c:	aa 88       	st.b	r5[0x0],r8
80018f9e:	a4 8a       	st.b	r2[0x0],r10
80018fa0:	8f 09       	st.w	r7[0x0],r9
80018fa2:	ec 0a 18 00 	cp.b	r10,r6
80018fa6:	c3 e0       	breq	80019022 <read_serial_mext+0xce>
80018fa8:	e0 8b 00 20 	brhi	80018fe8 <read_serial_mext+0x94>
80018fac:	32 0b       	mov	r11,32
80018fae:	f6 0a 18 00 	cp.b	r10,r11
	monome_grid_key_write_event( *prx, *(prx+1), 0);
	nbp += 2;
	prx += 2;
	break;
      case 0x21: // grid key down
	monome_grid_key_write_event( *prx, *(prx+1), 1);
80018fb2:	c2 c0       	breq	8001900a <read_serial_mext+0xb6>
//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
  data[0] = x;
80018fb4:	32 18       	mov	r8,33
  data[1] = y;
80018fb6:	f0 0a 18 00 	cp.b	r10,r8
  data[2] = val;
80018fba:	cd 41       	brne	80018f62 <read_serial_mext+0xe>
80018fbc:	13 98       	ld.ub	r8,r9[0x1]
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
80018fbe:	13 8a       	ld.ub	r10,r9[0x0]
80018fc0:	a2 98       	st.b	r1[0x1],r8
  post_event(&ev);
80018fc2:	a2 8a       	st.b	r1[0x0],r10
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
80018fc4:	30 18       	mov	r8,1
  post_event(&ev);
80018fc6:	a2 a8       	st.b	r1[0x2],r8
80018fc8:	e0 6b 0b b4 	mov	r11,2996
	prx += 2;
	break;
      case 0x21: // grid key down
	monome_grid_key_write_event( *prx, *(prx+1), 1);
	nbp += 2;
	prx += 2;
80018fcc:	31 58       	mov	r8,21
	nbp += 2;
	prx += 2;
	break;
      case 0x21: // grid key down
	monome_grid_key_write_event( *prx, *(prx+1), 1);
	nbp += 2;
80018fce:	16 9c       	mov	r12,r11
	prx += 2;
80018fd0:	97 08       	st.w	r11[0x0],r8
	nbp += 2;
	prx += 2;
	break;
      case 0x21: // grid key down
	monome_grid_key_write_event( *prx, *(prx+1), 1);
	nbp += 2;
80018fd2:	fe b0 f2 1f 	rcall	80017410 <post_event>
80018fd6:	01 88       	ld.ub	r8,r0[0x0]
	prx += 2;
80018fd8:	66 09       	ld.w	r9,r3[0x0]
	break;
80018fda:	2f e8       	sub	r8,-2
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));    
      nbp++;
      switch(com) {
80018fdc:	2f e9       	sub	r9,-2
80018fde:	5c 58       	castu.b	r8
80018fe0:	87 09       	st.w	r3[0x0],r9
80018fe2:	a0 88       	st.b	r0[0x0],r8
80018fe4:	09 8c       	ld.ub	r12,r4[0x0]
80018fe6:	cd 2b       	rjmp	80018f8a <read_serial_mext+0x36>
80018fe8:	35 1b       	mov	r11,81
80018fea:	f6 0a 18 00 	cp.b	r10,r11
	monome_ring_key_write_event( *prx++, 0);
	prx++;
	break;
      case 0x52 : // ring key down
	monome_ring_key_write_event( *prx++, 1);
	nbp++;
80018fee:	c0 b0       	breq	80019004 <read_serial_mext+0xb0>
      case 0x51 : // ring key up
	monome_ring_key_write_event( *prx++, 0);
	prx++;
	break;
      case 0x52 : // ring key down
	monome_ring_key_write_event( *prx++, 1);
80018ff0:	35 2b       	mov	r11,82
	nbp++;
80018ff2:	f6 0a 18 00 	cp.b	r10,r11
80018ff6:	cb 61       	brne	80018f62 <read_serial_mext+0xe>
	nbp += 2;
	prx += 2;
	break;
      case 0x51 : // ring key up
	monome_ring_key_write_event( *prx++, 0);
	prx++;
80018ff8:	2f f9       	sub	r9,-1
80018ffa:	2f f8       	sub	r8,-1
	break;
80018ffc:	87 09       	st.w	r3[0x0],r9
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));    
      nbp++;
      switch(com) {
      case 0x20: // grid key up
	monome_grid_key_write_event( *prx, *(prx+1), 0);
80018ffe:	5c 58       	castu.b	r8
//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
  data[0] = x;
80019000:	a0 88       	st.b	r0[0x0],r8
  data[1] = y;
80019002:	cc 4b       	rjmp	80018f8a <read_serial_mext+0x36>
//---- convert to/from event data

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.eventData));
  data[0] = x;
80019004:	2f e9       	sub	r9,-2
  data[1] = y;
  data[2] = val;
80019006:	87 09       	st.w	r3[0x0],r9
80019008:	cc 1b       	rjmp	80018f8a <read_serial_mext+0x36>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
8001900a:	13 98       	ld.ub	r8,r9[0x1]
8001900c:	13 8a       	ld.ub	r10,r9[0x0]
  post_event(&ev);
8001900e:	a2 98       	st.b	r1[0x1],r8
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.eventType = kEventMonomeGridKey;
80019010:	a2 8a       	st.b	r1[0x0],r10
80019012:	30 08       	mov	r8,0
	nbp += 2;
	prx += 2;
	break;
	case 0x50: // ring delta
	monome_ring_enc_write_event( *prx, *(prx+1));
	nbp += 2;
80019014:	a2 a8       	st.b	r1[0x2],r8
	prx += 2;
80019016:	e0 69 0b b4 	mov	r9,2996
8001901a:	31 58       	mov	r8,21
	nbp += 2;
	prx += 2;
	break;
	case 0x50: // ring delta
	monome_ring_enc_write_event( *prx, *(prx+1));
	nbp += 2;
8001901c:	12 9c       	mov	r12,r9
	prx += 2;
	break;
8001901e:	93 08       	st.w	r9[0x0],r8
80019020:	cd 9b       	rjmp	80018fd2 <read_serial_mext+0x7e>
80019022:	2f e8       	sub	r8,-2
80019024:	2f db       	sub	r11,-3
80019026:	5c 58       	castu.b	r8
80019028:	87 0b       	st.w	r3[0x0],r11
8001902a:	a0 88       	st.b	r0[0x0],r8
8001902c:	ca fb       	rjmp	80018f8a <read_serial_mext+0x36>
8001902e:	d7 03       	nop

80019030 <setup_series>:
80019030:	eb cd 40 c0 	pushm	r6-r7,lr
80019034:	49 8c       	lddpc	r12,80019094 <setup_series+0x64>
80019036:	fe b0 cf b3 	rcall	80012f9c <print_dbg>
8001903a:	30 88       	mov	r8,8
8001903c:	31 07       	mov	r7,16
8001903e:	ef 68 00 09 	st.b	r7[9],r8
// setup series device
static void setup_series(u8 cols, u8 rows) {
  print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
80019042:	ef 68 00 08 	st.b	r7[8],r8

// setup series device
static void setup_series(u8 cols, u8 rows) {
  print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
80019046:	30 08       	mov	r8,0
}

// setup series device
static void setup_series(u8 cols, u8 rows) {
  print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
80019048:	30 16       	mov	r6,1
  mdesc.device = eDeviceGrid;
8001904a:	8f 18       	st.w	r7[0x4],r8
//=============================================
//------ static function definitions

// set function pointers
static inline void set_funcs(void) {
  print_dbg("\r\n setting monome functions, protocol idx: ");
8001904c:	49 3c       	lddpc	r12,80019098 <setup_series+0x68>
}

// setup series device
static void setup_series(u8 cols, u8 rows) {
  print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
8001904e:	8f 06       	st.w	r7[0x0],r6
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  mdesc.tilt = 1;
80019050:	ef 66 00 0b 	st.b	r7[11],r6
//=============================================
//------ static function definitions

// set function pointers
static inline void set_funcs(void) {
  print_dbg("\r\n setting monome functions, protocol idx: ");
80019054:	fe b0 cf a4 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(mdesc.protocol);
80019058:	6e 0c       	ld.w	r12,r7[0x0]
8001905a:	fe b0 cf a7 	rcall	80012fa8 <print_dbg_ulong>
  monome_read_serial = readSerialFuncs[mdesc.protocol];
8001905e:	49 09       	lddpc	r9,8001909c <setup_series+0x6c>
80019060:	6e 08       	ld.w	r8,r7[0x0]
80019062:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80019066:	30 c9       	mov	r9,12
80019068:	93 0a       	st.w	r9[0x0],r10
  monome_grid_map = gridMapFuncs[mdesc.protocol];
8001906a:	e0 6a 31 10 	mov	r10,12560
8001906e:	48 d9       	lddpc	r9,800190a0 <setup_series+0x70>
80019070:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80019074:	95 09       	st.w	r10[0x0],r9
80019076:	e0 6a 32 18 	mov	r10,12824
  monome_ring_map = ringMapFuncs[mdesc.protocol];
8001907a:	95 09       	st.w	r10[0x0],r9
8001907c:	48 a9       	lddpc	r9,800190a4 <setup_series+0x74>
8001907e:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  mdesc.tilt = 1;
  set_funcs();
  monomeConnect = 1;
80019082:	e0 68 31 14 	mov	r8,12564
  test_draw();
}
80019086:	91 09       	st.w	r8[0x0],r9
80019088:	e0 68 0b c7 	mov	r8,3015
8001908c:	b0 86       	st.b	r8[0x0],r6
8001908e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019092:	d7 03       	nop
80019094:	80 02       	ld.sh	r2,r0[0x0]
80019096:	48 2c       	lddpc	r12,8001909c <setup_series+0x6c>
80019098:	80 02       	ld.sh	r2,r0[0x0]
8001909a:	48 44       	lddpc	r4,800190a8 <check_monome_device_desc>
8001909c:	80 02       	ld.sh	r2,r0[0x0]
8001909e:	49 c4       	lddpc	r4,8001910c <check_monome_device_desc+0x64>
800190a0:	80 02       	ld.sh	r2,r0[0x0]
800190a2:	48 20       	lddpc	r0,800190a8 <check_monome_device_desc>
800190a4:	80 02       	ld.sh	r2,r0[0x0]
800190a6:	48 14       	lddpc	r4,800190a8 <check_monome_device_desc>

800190a8 <check_monome_device_desc>:
800190a8:	d4 21       	pushm	r4-r7,lr
800190aa:	20 5d       	sub	sp,20
800190ac:	f9 38 00 0a 	ld.ub	r8,r12[10]
800190b0:	ba d8       	st.b	sp[0x5],r8
800190b2:	19 88       	ld.ub	r8,r12[0x0]
800190b4:	ba 88       	st.b	sp[0x0],r8
800190b6:	19 a8       	ld.ub	r8,r12[0x2]
800190b8:	ba 98       	st.b	sp[0x1],r8
800190ba:	19 c8       	ld.ub	r8,r12[0x4]
800190bc:	ba a8       	st.b	sp[0x2],r8
800190be:	19 e8       	ld.ub	r8,r12[0x6]
  u8 matchMan = 0;
  u8 i;
  //-- source strings are unicode so we need to look at every other byte
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
800190c0:	ba b8       	st.b	sp[0x3],r8
800190c2:	f9 38 00 08 	ld.ub	r8,r12[8]
  }
  //  print_dbg("\r\n finished monome class init");
}

// determine if FTDI string descriptors match monome device pattern
u8 check_monome_device_desc(char* mstr, char* pstr, char* sstr) {
800190c6:	14 97       	mov	r7,r10
  u8 matchMan = 0;
  u8 i;
  //-- source strings are unicode so we need to look at every other byte
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
800190c8:	ba c8       	st.b	sp[0x4],r8
  }
  buf[i] = 0;
800190ca:	30 06       	mov	r6,0
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
800190cc:	30 6a       	mov	r10,6
  //-- source strings are unicode so we need to look at every other byte
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
  }
  buf[i] = 0;
800190ce:	ba e6       	st.b	sp[0x6],r6
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
800190d0:	fe fb 02 e4 	ld.w	r11,pc[740]
800190d4:	1a 9c       	mov	r12,sp
800190d6:	e0 a0 52 b8 	rcall	80023646 <strncmp>
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
    buf[i] = sstr[i*2];
  }
  buf[i] = 0;
800190da:	fb 66 00 09 	st.b	sp[9],r6
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
    buf[i] = sstr[i*2];
800190de:	ef 38 00 10 	ld.ub	r8,r7[16]
800190e2:	fb 68 00 08 	st.b	sp[8],r8
800190e6:	0f 88       	ld.ub	r8,r7[0x0]
800190e8:	ba 88       	st.b	sp[0x0],r8
800190ea:	0f a8       	ld.ub	r8,r7[0x2]
800190ec:	ba 98       	st.b	sp[0x1],r8
800190ee:	0f c8       	ld.ub	r8,r7[0x4]
800190f0:	ba a8       	st.b	sp[0x2],r8
800190f2:	0f e8       	ld.ub	r8,r7[0x6]
800190f4:	ba b8       	st.b	sp[0x3],r8
800190f6:	ef 38 00 08 	ld.ub	r8,r7[8]
800190fa:	ba c8       	st.b	sp[0x4],r8
800190fc:	ef 38 00 0a 	ld.ub	r8,r7[10]
80019100:	ba d8       	st.b	sp[0x5],r8
80019102:	ef 38 00 0c 	ld.ub	r8,r7[12]
80019106:	ba e8       	st.b	sp[0x6],r8
80019108:	ef 38 00 0e 	ld.ub	r8,r7[14]
8001910c:	ba f8       	st.b	sp[0x7],r8
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
  }
  buf[i] = 0;
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
8001910e:	1a 95       	mov	r5,sp
80019110:	18 94       	mov	r4,r12
    buf[i] = sstr[i*2];
  }
  buf[i] = 0;
  /* print_dbg("\r\n serial string: "); */
  /* print_dbg(buf); */
  if(matchMan == 0) {
80019112:	c0 c0       	breq	8001912a <check_monome_device_desc+0x82>
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
80019114:	1a 9c       	mov	r12,sp
80019116:	30 4a       	mov	r10,4
80019118:	fe fb 02 a0 	ld.w	r11,pc[672]
8001911c:	e0 a0 52 95 	rcall	80023646 <strncmp>
80019120:	e0 80 00 88 	breq	80019230 <check_monome_device_desc+0x188>
  } else {
    return 0;
  }
  set_funcs();
  monomeConnect = 1;
  print_dbg("\r\n connected monome device, mext protocol");
80019124:	30 0c       	mov	r12,0
    // if we got here, serial number didn't match series or 40h patterns.
    // so this is probably an extended-protocol device.
    // we need to query for device attributes
    return setup_mext();
  }
}
80019126:	2f bd       	sub	sp,-20
80019128:	d8 22       	popm	r4-r7,pc
    } else {
      // not a monome
      return 0;
    }
  } else { // matched manufctrr string
    if(buf[0] != 'm') {
8001912a:	36 d8       	mov	r8,109
8001912c:	1b 89       	ld.ub	r9,sp[0x0]
8001912e:	f0 09 18 00 	cp.b	r9,r8
80019132:	cf 91       	brne	80019124 <check_monome_device_desc+0x7c>
      // not a monome, somehow. shouldn't happen
      return 0;
    }
    if(buf[3] == 'h') {
80019134:	36 88       	mov	r8,104
80019136:	1b b9       	ld.ub	r9,sp[0x3]
80019138:	f0 09 18 00 	cp.b	r9,r8
8001913c:	e0 80 00 e5 	breq	80019306 <check_monome_device_desc+0x25e>
      // this is a 40h
      setup_40h(8, 8);
      return 1;
    }
    if( strncmp(buf, "m64-", 4) == 0 ) {
80019140:	30 4a       	mov	r10,4
80019142:	fe fb 02 7a 	ld.w	r11,pc[634]
80019146:	1a 9c       	mov	r12,sp
80019148:	e0 a0 52 7f 	rcall	80023646 <strncmp>
8001914c:	e0 80 00 d3 	breq	800192f2 <check_monome_device_desc+0x24a>
      // series 64
      setup_series(8, 8);
      return 1;
    }
    if( strncmp(buf, "m128-", 5) == 0 ) {
80019150:	1a 9c       	mov	r12,sp
80019152:	30 5a       	mov	r10,5
80019154:	fe fb 02 6c 	ld.w	r11,pc[620]
80019158:	e0 a0 52 77 	rcall	80023646 <strncmp>
8001915c:	e0 80 00 d0 	breq	800192fc <check_monome_device_desc+0x254>
static u8 setup_mext(void) {
  u8* prx;
  u8 w = 0;
  u8 busy;

  print_dbg("\r\n setup mext device");
80019160:	fe fc 02 64 	ld.w	r12,pc[612]
}

// setup extended device, return success /failure of query
static u8 setup_mext(void) {
  u8* prx;
  u8 w = 0;
80019164:	fb 64 00 13 	st.b	sp[19],r4
  u8 busy;

  print_dbg("\r\n setup mext device");
80019168:	fe b0 cf 1a 	rcall	80012f9c <print_dbg>

  mdesc.protocol = eProtocolMext;
8001916c:	30 28       	mov	r8,2
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8001916e:	30 09       	mov	r9,0
80019170:	31 07       	mov	r7,16
80019172:	e0 6a d0 e7 	mov	r10,53479
80019176:	ea 1a 27 56 	orh	r10,0x2756
8001917a:	8f 08       	st.w	r7[0x0],r8
8001917c:	30 0b       	mov	r11,0
8001917e:	e0 68 03 e8 	mov	r8,1000
80019182:	e0 a0 4d ce 	rcall	80022d1e <__avr32_udiv64>
80019186:	14 96       	mov	r6,r10
80019188:	e1 b9 00 42 	mfsr	r9,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001918c:	f2 0a 00 0a 	add	r10,r9,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80019190:	e1 b8 00 42 	mfsr	r8,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019194:	14 39       	cp.w	r9,r10
80019196:	e0 8b 00 59 	brhi	80019248 <check_monome_device_desc+0x1a0>
8001919a:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001919c:	e0 8b 00 04 	brhi	800191a4 <check_monome_device_desc+0xfc>
800191a0:	10 3a       	cp.w	r10,r8
800191a2:	c6 c2       	brcc	8001927a <check_monome_device_desc+0x1d2>
800191a4:	30 1b       	mov	r11,1

  delay_ms(10);
  ftdi_write(&w, 1);	// query
800191a6:	fa cc ff ed 	sub	r12,sp,-19
800191aa:	e0 a0 0d dd 	rcall	8001ad64 <ftdi_write>
800191ae:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800191b2:	f0 06 00 0a 	add	r10,r8,r6
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800191b6:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800191ba:	14 38       	cp.w	r8,r10
800191bc:	e0 8b 00 4e 	brhi	80019258 <check_monome_device_desc+0x1b0>
800191c0:	12 38       	cp.w	r8,r9
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800191c2:	e0 8b 00 04 	brhi	800191ca <check_monome_device_desc+0x122>
800191c6:	12 3a       	cp.w	r10,r9
800191c8:	c5 c2       	brcc	80019280 <check_monome_device_desc+0x1d8>
800191ca:	e0 a0 0d b5 	rcall	8001ad34 <ftdi_read>
  
  delay_ms(10);

  ftdi_read();
800191ce:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800191d2:	f0 06 00 06 	add	r6,r8,r6
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800191d6:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800191da:	0c 38       	cp.w	r8,r6
800191dc:	e0 8b 00 46 	brhi	80019268 <check_monome_device_desc+0x1c0>
800191e0:	12 38       	cp.w	r8,r9
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800191e2:	e0 8b 00 04 	brhi	800191ea <check_monome_device_desc+0x142>
800191e6:	12 36       	cp.w	r6,r9
800191e8:	c4 62       	brcc	80019274 <check_monome_device_desc+0x1cc>
800191ea:	4f 8c       	lddpc	r12,800193c8 <check_monome_device_desc+0x320>

  delay_ms(10);
  busy = 1;

  print_dbg("\r\n setup request ftdi read; waiting...");
800191ec:	fe b0 ce d8 	rcall	80012f9c <print_dbg>
800191f0:	e0 a0 0d 58 	rcall	8001aca0 <ftdi_rx_busy>

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
    busy = ftdi_rx_busy();
800191f4:	18 96       	mov	r6,r12
800191f6:	4f 6c       	lddpc	r12,800193cc <check_monome_device_desc+0x324>
    print_dbg("\r\n waiting for transfer complete; busy flag: ");
800191f8:	fe b0 ce d2 	rcall	80012f9c <print_dbg>
800191fc:	0c 9c       	mov	r12,r6
    print_dbg_ulong(busy);
800191fe:	fe b0 ce d5 	rcall	80012fa8 <print_dbg_ulong>
80019202:	58 06       	cp.w	r6,0
  busy = 1;

  print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
80019204:	cf 61       	brne	800191f0 <check_monome_device_desc+0x148>
80019206:	e0 a0 0d 49 	rcall	8001ac98 <ftdi_rx_bytes>
    busy = ftdi_rx_busy();
    print_dbg("\r\n waiting for transfer complete; busy flag: ");
    print_dbg_ulong(busy);
    
  }
  rxBytes = ftdi_rx_bytes();
8001920a:	e0 65 0c 1c 	mov	r5,3100
8001920e:	aa 8c       	st.b	r5[0x0],r12

  print_dbg(" done waiting. bytes read: ");
80019210:	4f 0c       	lddpc	r12,800193d0 <check_monome_device_desc+0x328>
80019212:	fe b0 ce c5 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(rxBytes);
80019216:	0b 8c       	ld.ub	r12,r5[0x0]
80019218:	fe b0 ce c8 	rcall	80012fa8 <print_dbg_ulong>

  if(rxBytes != 6 ){
8001921c:	0b 89       	ld.ub	r9,r5[0x0]
8001921e:	30 68       	mov	r8,6
80019220:	f0 09 18 00 	cp.b	r9,r8
80019224:	c3 10       	breq	80019286 <check_monome_device_desc+0x1de>
    print_dbg("\r\n got unexpected byte count in response to mext setup request; aborting");
80019226:	4e cc       	lddpc	r12,800193d4 <check_monome_device_desc+0x32c>
80019228:	fe b0 ce ba 	rcall	80012f9c <print_dbg>
8001922c:	0c 9c       	mov	r12,r6
8001922e:	c7 cb       	rjmp	80019126 <check_monome_device_desc+0x7e>
  /* print_dbg(buf); */
  if(matchMan == 0) {
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
80019230:	31 08       	mov	r8,16
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
80019232:	30 89       	mov	r9,8
  if(matchMan == 0) {
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
      mdesc.device = eDeviceGrid;
80019234:	91 1c       	st.w	r8[0x4],r12
  /* print_dbg(buf); */
  if(matchMan == 0) {
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
80019236:	91 0c       	st.w	r8[0x0],r12
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
      mdesc.rows = 8;
80019238:	f1 69 00 09 	st.b	r8[9],r9
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
8001923c:	f1 69 00 08 	st.b	r8[8],r9
      mdesc.rows = 8;
80019240:	2f bd       	sub	sp,-20
80019242:	da 2a       	popm	r4-r7,pc,r12=1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019244:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019248:	10 39       	cp.w	r9,r8
8001924a:	fe 98 ff fd 	brls	80019244 <check_monome_device_desc+0x19c>
8001924e:	10 3a       	cp.w	r10,r8
80019250:	ca a3       	brcs	800191a4 <check_monome_device_desc+0xfc>
80019252:	cf 9b       	rjmp	80019244 <check_monome_device_desc+0x19c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019254:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019258:	12 38       	cp.w	r8,r9
8001925a:	fe 98 ff fd 	brls	80019254 <check_monome_device_desc+0x1ac>
8001925e:	12 3a       	cp.w	r10,r9
80019260:	cb 53       	brcs	800191ca <check_monome_device_desc+0x122>
80019262:	cf 9b       	rjmp	80019254 <check_monome_device_desc+0x1ac>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019264:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019268:	12 38       	cp.w	r8,r9
8001926a:	fe 98 ff fd 	brls	80019264 <check_monome_device_desc+0x1bc>
8001926e:	12 36       	cp.w	r6,r9
80019270:	cb d3       	brcs	800191ea <check_monome_device_desc+0x142>
80019272:	cf 9b       	rjmp	80019264 <check_monome_device_desc+0x1bc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019274:	e1 b9 00 42 	mfsr	r9,0x108
80019278:	cb 4b       	rjmp	800191e0 <check_monome_device_desc+0x138>
8001927a:	e1 b8 00 42 	mfsr	r8,0x108
8001927e:	c8 eb       	rjmp	8001919a <check_monome_device_desc+0xf2>
80019280:	e1 b9 00 42 	mfsr	r9,0x108
80019284:	c9 eb       	rjmp	800191c0 <check_monome_device_desc+0x118>
  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request; aborting");
    return 0;
  }
  
  prx = ftdi_rx_buf();
80019286:	e0 a0 0d 05 	rcall	8001ac90 <ftdi_rx_buf>
  prx++; // 1st returned byte is 0
  if(*prx == 1) {
8001928a:	30 19       	mov	r9,1
    print_dbg("\r\n got unexpected byte count in response to mext setup request; aborting");
    return 0;
  }
  
  prx = ftdi_rx_buf();
  prx++; // 1st returned byte is 0
8001928c:	2f fc       	sub	r12,-1
  if(*prx == 1) {
8001928e:	19 88       	ld.ub	r8,r12[0x0]
80019290:	f2 08 18 00 	cp.b	r8,r9
80019294:	c6 20       	breq	80019358 <check_monome_device_desc+0x2b0>
    else {
      return 0;
    }		
    mdesc.tilt = 1;
  }
  else if(*prx == 5) {
80019296:	30 59       	mov	r9,5
80019298:	f2 08 18 00 	cp.b	r8,r9
8001929c:	fe 91 ff 44 	brne	80019124 <check_monome_device_desc+0x7c>
    mdesc.device = eDeviceArc;
800192a0:	30 18       	mov	r8,1
800192a2:	8f 18       	st.w	r7[0x4],r8
    mdesc.encs = *(++prx);
800192a4:	19 98       	ld.ub	r8,r12[0x1]
800192a6:	ef 68 00 0a 	st.b	r7[10],r8
//=============================================
//------ static function definitions

// set function pointers
static inline void set_funcs(void) {
  print_dbg("\r\n setting monome functions, protocol idx: ");
800192aa:	4c cc       	lddpc	r12,800193d8 <check_monome_device_desc+0x330>
800192ac:	fe b0 ce 78 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(mdesc.protocol);
800192b0:	6e 0c       	ld.w	r12,r7[0x0]
800192b2:	fe b0 ce 7b 	rcall	80012fa8 <print_dbg_ulong>
  monome_read_serial = readSerialFuncs[mdesc.protocol];
800192b6:	4c a9       	lddpc	r9,800193dc <check_monome_device_desc+0x334>
800192b8:	6e 08       	ld.w	r8,r7[0x0]
800192ba:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800192be:	30 c9       	mov	r9,12
800192c0:	93 0a       	st.w	r9[0x0],r10
  monome_grid_map = gridMapFuncs[mdesc.protocol];
800192c2:	e0 6a 31 10 	mov	r10,12560
800192c6:	4c 79       	lddpc	r9,800193e0 <check_monome_device_desc+0x338>
800192c8:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
800192cc:	95 09       	st.w	r10[0x0],r9
800192ce:	e0 6a 32 18 	mov	r10,12824
  monome_ring_map = ringMapFuncs[mdesc.protocol];
800192d2:	95 09       	st.w	r10[0x0],r9
800192d4:	4c 49       	lddpc	r9,800193e4 <check_monome_device_desc+0x33c>
800192d6:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
    mdesc.encs = *(++prx);
  } else {
    return 0;
  }
  set_funcs();
  monomeConnect = 1;
800192da:	e0 68 31 14 	mov	r8,12564
  print_dbg("\r\n connected monome device, mext protocol");
800192de:	91 09       	st.w	r8[0x0],r9
    mdesc.encs = *(++prx);
  } else {
    return 0;
  }
  set_funcs();
  monomeConnect = 1;
800192e0:	30 19       	mov	r9,1
  print_dbg("\r\n connected monome device, mext protocol");
800192e2:	e0 68 0b c7 	mov	r8,3015
800192e6:	4c 1c       	lddpc	r12,800193e8 <check_monome_device_desc+0x340>
800192e8:	b0 89       	st.b	r8[0x0],r9
      setup_40h(8, 8);
      return 1;
    }
    if( strncmp(buf, "m64-", 4) == 0 ) {
      // series 64
      setup_series(8, 8);
800192ea:	fe b0 ce 59 	rcall	80012f9c <print_dbg>
800192ee:	30 1c       	mov	r12,1
800192f0:	c1 bb       	rjmp	80019126 <check_monome_device_desc+0x7e>
800192f2:	30 8b       	mov	r11,8
      return 1;
800192f4:	16 9c       	mov	r12,r11
    }
    if( strncmp(buf, "m128-", 5) == 0 ) {
      // series 128
      setup_series(8, 16);
800192f6:	c9 de       	rcall	80019030 <setup_series>
800192f8:	30 1c       	mov	r12,1
800192fa:	c1 6b       	rjmp	80019126 <check_monome_device_desc+0x7e>
800192fc:	30 8c       	mov	r12,8
800192fe:	31 0b       	mov	r11,16
      return 1;
80019300:	c9 8e       	rcall	80019030 <setup_series>

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
80019302:	30 1c       	mov	r12,1
  monome_ring_map = ringMapFuncs[mdesc.protocol];
}

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  mdesc.protocol = eProtocol40h;
80019304:	c1 1b       	rjmp	80019126 <check_monome_device_desc+0x7e>
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
80019306:	30 88       	mov	r8,8
80019308:	31 07       	mov	r7,16

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
8001930a:	ef 68 00 09 	st.b	r7[9],r8
}

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
8001930e:	ef 68 00 08 	st.b	r7[8],r8
//=============================================
//------ static function definitions

// set function pointers
static inline void set_funcs(void) {
  print_dbg("\r\n setting monome functions, protocol idx: ");
80019312:	8f 1c       	st.w	r7[0x4],r12
80019314:	8f 0c       	st.w	r7[0x0],r12
80019316:	4b 1c       	lddpc	r12,800193d8 <check_monome_device_desc+0x330>
  print_dbg_ulong(mdesc.protocol);
80019318:	fe b0 ce 42 	rcall	80012f9c <print_dbg>
8001931c:	6e 0c       	ld.w	r12,r7[0x0]
  monome_read_serial = readSerialFuncs[mdesc.protocol];
8001931e:	fe b0 ce 45 	rcall	80012fa8 <print_dbg_ulong>
80019322:	4a f9       	lddpc	r9,800193dc <check_monome_device_desc+0x334>
80019324:	6e 08       	ld.w	r8,r7[0x0]
80019326:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
  monome_grid_map = gridMapFuncs[mdesc.protocol];
8001932a:	30 c9       	mov	r9,12
8001932c:	93 0a       	st.w	r9[0x0],r10
8001932e:	e0 6a 31 10 	mov	r10,12560
80019332:	4a c9       	lddpc	r9,800193e0 <check_monome_device_desc+0x338>
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80019334:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80019338:	95 09       	st.w	r10[0x0],r9
8001933a:	e0 6a 32 18 	mov	r10,12824
8001933e:	95 09       	st.w	r10[0x0],r9
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  set_funcs();
  monomeConnect = 1;
80019340:	4a 99       	lddpc	r9,800193e4 <check_monome_device_desc+0x33c>
  print_dbg("\r\n setting monome functions, protocol idx: ");
  print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80019342:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  set_funcs();
  monomeConnect = 1;
80019346:	e0 68 31 14 	mov	r8,12564
      return 0;
    }
    if(buf[3] == 'h') {
      // this is a 40h
      setup_40h(8, 8);
      return 1;
8001934a:	30 1c       	mov	r12,1
  }
  
  prx = ftdi_rx_buf();
  prx++; // 1st returned byte is 0
  if(*prx == 1) {
    mdesc.device = eDeviceGrid;
8001934c:	91 09       	st.w	r8[0x0],r9
8001934e:	30 19       	mov	r9,1
    prx++;
    if(*prx == 1) {
80019350:	e0 68 0b c7 	mov	r8,3015
80019354:	b0 89       	st.b	r8[0x0],r9
80019356:	ce 8a       	rjmp	80019126 <check_monome_device_desc+0x7e>
      print_dbg("\r\n monome 64");
      mdesc.rows = 8;
      mdesc.cols = 8;
    }
    else if(*prx == 2) {
80019358:	8f 16       	st.w	r7[0x4],r6
8001935a:	31 06       	mov	r6,16
8001935c:	19 98       	ld.ub	r8,r12[0x1]
8001935e:	f2 08 18 00 	cp.b	r8,r9
      print_dbg("\r\n monome 128");
      mdesc.rows = 8;
      mdesc.cols = 16;
    }
    else if(*prx == 4) {
80019362:	c1 60       	breq	8001938e <check_monome_device_desc+0x2e6>
80019364:	30 29       	mov	r9,2
80019366:	f2 08 18 00 	cp.b	r8,r9
      print_dbg("\r\n monome 256");
8001936a:	c1 b0       	breq	800193a0 <check_monome_device_desc+0x2f8>
8001936c:	30 49       	mov	r9,4
8001936e:	f2 08 18 00 	cp.b	r8,r9
      mdesc.rows = 16; 
      mdesc.cols = 16;
80019372:	fe 91 fe d9 	brne	80019124 <check_monome_device_desc+0x7c>
      mdesc.rows = 8;
      mdesc.cols = 16;
    }
    else if(*prx == 4) {
      print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
80019376:	49 ec       	lddpc	r12,800193ec <check_monome_device_desc+0x344>
80019378:	fe b0 ce 12 	rcall	80012f9c <print_dbg>
      mdesc.cols = 16;
    }
    else {
      return 0;
    }		
    mdesc.tilt = 1;
8001937c:	31 08       	mov	r8,16
8001937e:	ed 68 00 08 	st.b	r6[8],r8
  prx++; // 1st returned byte is 0
  if(*prx == 1) {
    mdesc.device = eDeviceGrid;
    prx++;
    if(*prx == 1) {
      print_dbg("\r\n monome 64");
80019382:	ed 68 00 09 	st.b	r6[9],r8
80019386:	30 18       	mov	r8,1
      mdesc.rows = 8;
80019388:	ef 68 00 0b 	st.b	r7[11],r8
      mdesc.cols = 8;
8001938c:	c8 fb       	rjmp	800192aa <check_monome_device_desc+0x202>
  if(*prx == 1) {
    mdesc.device = eDeviceGrid;
    prx++;
    if(*prx == 1) {
      print_dbg("\r\n monome 64");
      mdesc.rows = 8;
8001938e:	49 9c       	lddpc	r12,800193f0 <check_monome_device_desc+0x348>
80019390:	fe b0 ce 06 	rcall	80012f9c <print_dbg>
      mdesc.cols = 8;
    }
    else if(*prx == 2) {
      print_dbg("\r\n monome 128");
80019394:	30 88       	mov	r8,8
80019396:	ed 68 00 08 	st.b	r6[8],r8
      mdesc.rows = 8;
8001939a:	ed 68 00 09 	st.b	r6[9],r8
8001939e:	cf 4b       	rjmp	80019386 <check_monome_device_desc+0x2de>
      mdesc.cols = 16;
800193a0:	49 5c       	lddpc	r12,800193f4 <check_monome_device_desc+0x34c>
800193a2:	fe b0 cd fd 	rcall	80012f9c <print_dbg>
800193a6:	30 88       	mov	r8,8
800193a8:	ed 68 00 09 	st.b	r6[9],r8
800193ac:	31 08       	mov	r8,16
800193ae:	ed 68 00 08 	st.b	r6[8],r8
800193b2:	ce ab       	rjmp	80019386 <check_monome_device_desc+0x2de>
800193b4:	80 02       	ld.sh	r2,r0[0x0]
800193b6:	48 70       	lddpc	r0,800193d0 <check_monome_device_desc+0x328>
800193b8:	80 02       	ld.sh	r2,r0[0x0]
800193ba:	48 78       	lddpc	r8,800193d4 <check_monome_device_desc+0x32c>
800193bc:	80 02       	ld.sh	r2,r0[0x0]
800193be:	48 80       	lddpc	r0,800193dc <check_monome_device_desc+0x334>
800193c0:	80 02       	ld.sh	r2,r0[0x0]
800193c2:	48 88       	lddpc	r8,800193e0 <check_monome_device_desc+0x338>
800193c4:	80 02       	ld.sh	r2,r0[0x0]
800193c6:	48 90       	lddpc	r0,800193e8 <check_monome_device_desc+0x340>
800193c8:	80 02       	ld.sh	r2,r0[0x0]
800193ca:	49 9c       	lddpc	r12,8001942c <region_string+0x14>
800193cc:	80 02       	ld.sh	r2,r0[0x0]
800193ce:	48 a8       	lddpc	r8,800193f4 <check_monome_device_desc+0x34c>
800193d0:	80 02       	ld.sh	r2,r0[0x0]
800193d2:	48 d8       	lddpc	r8,80019404 <region_fill+0xc>
800193d4:	80 02       	ld.sh	r2,r0[0x0]
800193d6:	48 f4       	lddpc	r4,80019410 <region_fill+0x18>
800193d8:	80 02       	ld.sh	r2,r0[0x0]
800193da:	48 44       	lddpc	r4,800193e8 <check_monome_device_desc+0x340>
800193dc:	80 02       	ld.sh	r2,r0[0x0]
800193de:	49 c4       	lddpc	r4,8001944c <region_string+0x34>
800193e0:	80 02       	ld.sh	r2,r0[0x0]
800193e2:	48 20       	lddpc	r0,800193e8 <check_monome_device_desc+0x340>
800193e4:	80 02       	ld.sh	r2,r0[0x0]
800193e6:	48 14       	lddpc	r4,800193e8 <check_monome_device_desc+0x340>
800193e8:	80 02       	ld.sh	r2,r0[0x0]
800193ea:	49 70       	lddpc	r0,80019444 <region_string+0x2c>
800193ec:	80 02       	ld.sh	r2,r0[0x0]
800193ee:	49 60       	lddpc	r0,80019444 <region_string+0x2c>
800193f0:	80 02       	ld.sh	r2,r0[0x0]
800193f2:	49 40       	lddpc	r0,80019440 <region_string+0x28>
800193f4:	80 02       	ld.sh	r2,r0[0x0]
800193f6:	49 50       	lddpc	r0,80019448 <region_string+0x30>

800193f8 <region_fill>:
}

// fill a region with given color
 void region_fill(region* reg, u8 c) {
  u32 i;
  for(i=0; i<reg->len; i++) {
800193f8:	78 18       	ld.w	r8,r12[0x4]
800193fa:	58 08       	cp.w	r8,0
800193fc:	c0 a0       	breq	80019410 <region_fill+0x18>
800193fe:	30 08       	mov	r8,0
    reg->data[i] = c; 
80019400:	78 39       	ld.w	r9,r12[0xc]
80019402:	f2 08 0b 0b 	st.b	r9[r8],r11
}

// fill a region with given color
 void region_fill(region* reg, u8 c) {
  u32 i;
  for(i=0; i<reg->len; i++) {
80019406:	2f f8       	sub	r8,-1
80019408:	78 19       	ld.w	r9,r12[0x4]
8001940a:	10 39       	cp.w	r9,r8
8001940c:	fe 9b ff fa 	brhi	80019400 <region_fill+0x8>
    reg->data[i] = c; 
  }
  reg->dirty = 1;
80019410:	30 18       	mov	r8,1
80019412:	f9 68 00 0a 	st.b	r12[10],r8
}
80019416:	5e fc       	retal	r12

80019418 <region_string>:
				 region* reg,	 // region
				 const char* str,// string
				 u8 x, u8 y, 	 // offset
				 u8 a, u8 b, 	 // colors
				 u8 sz)  // size levels (dimensions multiplied by 2**sz)
{
80019418:	eb cd 40 90 	pushm	r4,r7,lr
8001941c:	fa c4 ff f4 	sub	r4,sp,-12
80019420:	18 97       	mov	r7,r12
80019422:	68 0e       	ld.w	lr,r4[0x0]
80019424:	68 1c       	ld.w	r12,r4[0x4]
  if(sz == 0) {
80019426:	58 0c       	cp.w	r12,0
80019428:	c0 e0       	breq	80019444 <region_string+0x2c>
    font_string(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 1) {
8001942a:	30 14       	mov	r4,1
8001942c:	e8 0c 18 00 	cp.b	r12,r4
80019430:	c2 c0       	breq	80019488 <region_string+0x70>
    font_string_big(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 2) {
80019432:	30 24       	mov	r4,2
80019434:	e8 0c 18 00 	cp.b	r12,r4
80019438:	c1 70       	breq	80019466 <region_string+0x4e>
    font_string_bigbig(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  }
  reg->dirty = 1;
8001943a:	30 18       	mov	r8,1
8001943c:	ef 68 00 0a 	st.b	r7[10],r8
}
80019440:	e3 cd 80 90 	ldm	sp++,r4,r7,pc
				 u8 x, u8 y, 	 // offset
				 u8 a, u8 b, 	 // colors
				 u8 sz)  // size levels (dimensions multiplied by 2**sz)
{
  if(sz == 0) {
    font_string(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
80019444:	1a de       	st.w	--sp,lr
80019446:	16 9c       	mov	r12,r11
80019448:	0f 8b       	ld.ub	r11,r7[0x0]
8001944a:	f2 0b 03 4a 	mac	r10,r9,r11
8001944e:	16 99       	mov	r9,r11
80019450:	6e 3b       	ld.w	r11,r7[0xc]
80019452:	14 0b       	add	r11,r10
80019454:	6e 1a       	ld.w	r10,r7[0x4]
80019456:	fe b0 f2 25 	rcall	800178a0 <font_string>
  } else if (sz == 1) {
    font_string_big(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 2) {
    font_string_bigbig(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  }
  reg->dirty = 1;
8001945a:	30 18       	mov	r8,1
				 u8 x, u8 y, 	 // offset
				 u8 a, u8 b, 	 // colors
				 u8 sz)  // size levels (dimensions multiplied by 2**sz)
{
  if(sz == 0) {
    font_string(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
8001945c:	2f fd       	sub	sp,-4
  } else if (sz == 1) {
    font_string_big(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 2) {
    font_string_bigbig(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  }
  reg->dirty = 1;
8001945e:	ef 68 00 0a 	st.b	r7[10],r8
}
80019462:	e3 cd 80 90 	ldm	sp++,r4,r7,pc
  if(sz == 0) {
    font_string(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 1) {
    font_string_big(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 2) {
    font_string_bigbig(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
80019466:	1a de       	st.w	--sp,lr
80019468:	16 9c       	mov	r12,r11
8001946a:	0f 8b       	ld.ub	r11,r7[0x0]
8001946c:	f2 0b 03 4a 	mac	r10,r9,r11
80019470:	16 99       	mov	r9,r11
80019472:	6e 3b       	ld.w	r11,r7[0xc]
80019474:	14 0b       	add	r11,r10
80019476:	6e 1a       	ld.w	r10,r7[0x4]
80019478:	fe b0 f3 64 	rcall	80017b40 <font_string_bigbig>
  }
  reg->dirty = 1;
8001947c:	30 18       	mov	r8,1
  if(sz == 0) {
    font_string(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 1) {
    font_string_big(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 2) {
    font_string_bigbig(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
8001947e:	2f fd       	sub	sp,-4
  }
  reg->dirty = 1;
80019480:	ef 68 00 0a 	st.b	r7[10],r8
}
80019484:	e3 cd 80 90 	ldm	sp++,r4,r7,pc
				 u8 sz)  // size levels (dimensions multiplied by 2**sz)
{
  if(sz == 0) {
    font_string(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
  } else if (sz == 1) {
    font_string_big(str, reg->data + (u32)reg->w * (u32)y + (u32)x, reg->len, reg->w, a, b);
80019488:	1a de       	st.w	--sp,lr
8001948a:	16 9c       	mov	r12,r11
8001948c:	0f 8b       	ld.ub	r11,r7[0x0]
8001948e:	f2 0b 03 4a 	mac	r10,r9,r11
80019492:	16 99       	mov	r9,r11
80019494:	6e 3b       	ld.w	r11,r7[0xc]
80019496:	14 0b       	add	r11,r10
80019498:	6e 1a       	ld.w	r10,r7[0x4]
8001949a:	fe b0 f2 9b 	rcall	800179d0 <font_string_big>
8001949e:	2f fd       	sub	sp,-4
800194a0:	cc db       	rjmp	8001943a <region_string+0x22>
800194a2:	d7 03       	nop

800194a4 <region_alloc>:
800194a4:	eb cd 40 80 	pushm	r7,lr
800194a8:	18 97       	mov	r7,r12
800194aa:	0f 88       	ld.ub	r8,r7[0x0]
800194ac:	19 9c       	ld.ub	r12,r12[0x1]
800194ae:	b1 3c       	mul	r12,r8


// allocate buffer
 void region_alloc(region* reg) {
  u32 i;
  reg->len = reg->w * reg->h;
800194b0:	8f 1c       	st.w	r7[0x4],r12
  reg->data = (u8*)alloc_mem(reg->len);
800194b2:	fe b0 f7 17 	rcall	800182e0 <alloc_mem>
800194b6:	8f 3c       	st.w	r7[0xc],r12
  for(i=0; i<reg->len; i++) {
800194b8:	6e 18       	ld.w	r8,r7[0x4]
800194ba:	58 08       	cp.w	r8,0
800194bc:	c0 c0       	breq	800194d4 <region_alloc+0x30>
800194be:	30 08       	mov	r8,0
    reg->data[i] = 0; 
800194c0:	10 9a       	mov	r10,r8
800194c2:	c0 28       	rjmp	800194c6 <region_alloc+0x22>
// allocate buffer
 void region_alloc(region* reg) {
  u32 i;
  reg->len = reg->w * reg->h;
  reg->data = (u8*)alloc_mem(reg->len);
  for(i=0; i<reg->len; i++) {
800194c4:	6e 3c       	ld.w	r12,r7[0xc]
    reg->data[i] = 0; 
800194c6:	f8 08 0b 0a 	st.b	r12[r8],r10
// allocate buffer
 void region_alloc(region* reg) {
  u32 i;
  reg->len = reg->w * reg->h;
  reg->data = (u8*)alloc_mem(reg->len);
  for(i=0; i<reg->len; i++) {
800194ca:	2f f8       	sub	r8,-1
800194cc:	6e 19       	ld.w	r9,r7[0x4]
800194ce:	10 39       	cp.w	r9,r8
800194d0:	fe 9b ff fa 	brhi	800194c4 <region_alloc+0x20>
    reg->data[i] = 0; 
  }
  reg->dirty = 0;
800194d4:	30 08       	mov	r8,0
800194d6:	ef 68 00 0a 	st.b	r7[10],r8
}
800194da:	e3 cd 80 80 	ldm	sp++,r7,pc
800194de:	d7 03       	nop

800194e0 <screen_clear>:
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

 // clear OLED RAM and local screenbuffer
void screen_clear(void) {
800194e0:	eb cd 40 e0 	pushm	r5-r7,lr
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800194e4:	30 0b       	mov	r11,0
800194e6:	fe 7c 28 00 	mov	r12,-55296
800194ea:	fe b0 cb 09 	rcall	80012afc <spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
800194ee:	30 9c       	mov	r12,9
800194f0:	fe b0 c9 07 	rcall	800126fe <gpio_set_gpio_pin>
  for(i=0; i<GRAM_BYTES; i++) { 
800194f4:	30 09       	mov	r9,0
800194f6:	e0 67 0c 20 	mov	r7,3104
800194fa:	12 98       	mov	r8,r9
800194fc:	8f 09       	st.w	r7[0x0],r9
    screenBuf[i] = 0;
800194fe:	e0 65 0c 28 	mov	r5,3112
80019502:	12 96       	mov	r6,r9
    spi_write(OLED_SPI, 0);
80019504:	ea 08 0b 06 	st.b	r5[r8],r6
80019508:	30 0b       	mov	r11,0
8001950a:	fe 7c 28 00 	mov	r12,-55296
 // clear OLED RAM and local screenbuffer
void screen_clear(void) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  for(i=0; i<GRAM_BYTES; i++) { 
8001950e:	fe b0 cb 8c 	rcall	80012c26 <spi_write>
80019512:	6e 08       	ld.w	r8,r7[0x0]
80019514:	2f f8       	sub	r8,-1
80019516:	8f 08       	st.w	r7[0x0],r8
80019518:	e0 48 0f ff 	cp.w	r8,4095
    screenBuf[i] = 0;
    spi_write(OLED_SPI, 0);
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001951c:	fe 98 ff f4 	brls	80019504 <screen_clear+0x24>
80019520:	30 0b       	mov	r11,0
80019522:	fe 7c 28 00 	mov	r12,-55296
}
80019526:	fe b0 cb 13 	rcall	80012b4c <spi_unselectChip>
8001952a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001952e:	d7 03       	nop

80019530 <write_command>:
80019530:	eb cd 40 80 	pushm	r7,lr
80019534:	30 0b       	mov	r11,0
80019536:	18 97       	mov	r7,r12
80019538:	fe 7c 28 00 	mov	r12,-55296
8001953c:	fe b0 ca e0 	rcall	80012afc <spi_selectChip>
80019540:	30 9c       	mov	r12,9
80019542:	fe b0 c8 eb 	rcall	80012718 <gpio_clr_gpio_pin>
static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
  spi_write(OLED_SPI, c);
80019546:	0e 9b       	mov	r11,r7
80019548:	fe 7c 28 00 	mov	r12,-55296
8001954c:	fe b0 cb 6d 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019550:	30 0b       	mov	r11,0
80019552:	fe 7c 28 00 	mov	r12,-55296
80019556:	fe b0 ca fb 	rcall	80012b4c <spi_unselectChip>
}
8001955a:	e3 cd 80 80 	ldm	sp++,r7,pc
8001955e:	d7 03       	nop

80019560 <screen_draw_region>:
80019560:	d4 31       	pushm	r0-r7,lr
80019562:	20 2d       	sub	sp,8
80019564:	ed da c0 28 	bfextu	r6,r10,0x1,0x8
80019568:	f9 dc c0 28 	bfextu	r12,r12,0x1,0x8
8001956c:	10 93       	mov	r3,r8
8001956e:	f2 06 02 48 	mul	r8,r9,r6
}


// draw data given target rect
// assume x-offset and width are both even!
extern void screen_draw_region(u8 x, u8 y, u8 w, u8 h, u8* data) {
80019572:	12 97       	mov	r7,r9
80019574:	50 1b       	stdsp	sp[0x4],r11
  static u32 nb; // count of destination bytes
  //  static u32 off; // offset from end of screenbuffer
  // 1 row address = 2 horizontal pixels
  //  u32 wb = w >> 1;
  w >>= 1;
  x >>= 1;
80019576:	50 0c       	stdsp	sp[0x0],r12
  nb = w * h;
80019578:	e0 65 1c 2c 	mov	r5,7212
8001957c:	4f 8c       	lddpc	r12,8001975c <screen_draw_region+0x1fc>

  print_dbg("\r\n screen_draw_region: w:");
8001957e:	8b 08       	st.w	r5[0x0],r8
80019580:	fe b0 cd 0e 	rcall	80012f9c <print_dbg>
  // print_dbg("\r\n bytes in row: "); */
  print_dbg_ulong(w); 
80019584:	0c 9c       	mov	r12,r6
80019586:	fe b0 cd 11 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , x:"); 
8001958a:	4f 6c       	lddpc	r12,80019760 <screen_draw_region+0x200>
8001958c:	fe b0 cd 08 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(x); 
80019590:	40 0c       	lddsp	r12,sp[0x0]
80019592:	fe b0 cd 0b 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , h:");
80019596:	4f 4c       	lddpc	r12,80019764 <screen_draw_region+0x204>
80019598:	fe b0 cd 02 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(h);
8001959c:	0e 9c       	mov	r12,r7
8001959e:	fe b0 cd 05 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , y:");
800195a2:	4f 2c       	lddpc	r12,80019768 <screen_draw_region+0x208>
800195a4:	fe b0 cc fc 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(y);
800195a8:	40 1c       	lddsp	r12,sp[0x4]
800195aa:	fe b0 cc ff 	rcall	80012fa8 <print_dbg_ulong>

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
800195ae:	e0 68 1c 28 	mov	r8,7208
  for(j=0; j<h; j++) {
800195b2:	e0 64 0c 28 	mov	r4,3112
  print_dbg_ulong(y);

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
800195b6:	6a 02       	ld.w	r2,r5[0x0]
800195b8:	30 0e       	mov	lr,0
800195ba:	20 12       	sub	r2,1
  for(j=0; j<h; j++) {
800195bc:	e8 02 00 02 	add	r2,r4,r2
800195c0:	91 02       	st.w	r8[0x0],r2
800195c2:	e0 68 0c 24 	mov	r8,3108
    for(i=0; i<w; i++) {
800195c6:	91 0e       	st.w	r8[0x0],lr
800195c8:	58 07       	cp.w	r7,0
800195ca:	e0 80 00 c6 	breq	80019756 <screen_draw_region+0x1f6>
800195ce:	ec 00 15 01 	lsl	r0,r6,0x1
800195d2:	ec 01 11 00 	rsub	r1,r6,0
800195d6:	58 06       	cp.w	r6,0
      *pScr = (0xf0 & ((*data) << 4) );
800195d8:	c1 50       	breq	80019602 <screen_draw_region+0xa2>
800195da:	04 99       	mov	r9,r2
800195dc:	06 98       	mov	r8,r3
800195de:	30 0a       	mov	r10,0
      data++;
      *pScr |= ((*data) & 0xf);
800195e0:	11 8b       	ld.ub	r11,r8[0x0]
800195e2:	a5 6b       	lsl	r11,0x4
800195e4:	5c 5b       	castu.b	r11
800195e6:	b2 8b       	st.b	r9[0x0],r11
800195e8:	11 9c       	ld.ub	r12,r8[0x1]
}


// draw data given target rect
// assume x-offset and width are both even!
extern void screen_draw_region(u8 x, u8 y, u8 w, u8 h, u8* data) {
800195ea:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800195ee:	18 4b       	or	r11,r12
  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
800195f0:	b2 8b       	st.b	r9[0x0],r11
800195f2:	2f e8       	sub	r8,-2
800195f4:	2f fa       	sub	r10,-1
800195f6:	20 19       	sub	r9,1
800195f8:	14 36       	cp.w	r6,r10
800195fa:	fe 9b ff f3 	brhi	800195e0 <screen_draw_region+0x80>

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
800195fe:	00 03       	add	r3,r0
80019600:	02 02       	add	r2,r1
80019602:	2f fe       	sub	lr,-1
80019604:	1c 37       	cp.w	r7,lr
80019606:	fe 9b ff e8 	brhi	800195d6 <screen_draw_region+0x76>
8001960a:	e0 68 1c 28 	mov	r8,7208
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001960e:	e0 63 0c 20 	mov	r3,3104
    }
  }
  
  // flip the screen coordinates 
  x = SCREEN_ROW_BYTES - x -  w;
  y = SCREEN_COL_BYTES - y - h;
80019612:	91 02       	st.w	r8[0x0],r2
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019614:	87 06       	st.w	r3[0x0],r6
80019616:	e0 68 0c 24 	mov	r8,3108
8001961a:	91 07       	st.w	r8[0x0],r7
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001961c:	30 0b       	mov	r11,0
8001961e:	40 01       	lddsp	r1,sp[0x0]
80019620:	40 12       	lddsp	r2,sp[0x4]
  spi_write(OLED_SPI, c);
80019622:	fe 7c 28 00 	mov	r12,-55296
80019626:	fe b0 ca 6b 	rcall	80012afc <spi_selectChip>
8001962a:	30 9c       	mov	r12,9
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001962c:	fe b0 c8 76 	rcall	80012718 <gpio_clr_gpio_pin>
80019630:	31 5b       	mov	r11,21
80019632:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019636:	fe b0 ca f8 	rcall	80012c26 <spi_write>
8001963a:	30 0b       	mov	r11,0
8001963c:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019640:	fe b0 ca 86 	rcall	80012b4c <spi_unselectChip>
80019644:	30 0b       	mov	r11,0
      pScr--;
    }
  }
  
  // flip the screen coordinates 
  x = SCREEN_ROW_BYTES - x -  w;
80019646:	fe 7c 28 00 	mov	r12,-55296
static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
  spi_write(OLED_SPI, c);
8001964a:	fe b0 ca 59 	rcall	80012afc <spi_selectChip>
      pScr--;
    }
  }
  
  // flip the screen coordinates 
  x = SCREEN_ROW_BYTES - x -  w;
8001964e:	30 9c       	mov	r12,9
80019650:	fe b0 c8 64 	rcall	80012718 <gpio_clr_gpio_pin>
static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
  spi_write(OLED_SPI, c);
80019654:	5c 31       	neg	r1
80019656:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001965a:	2c 01       	sub	r1,-64
8001965c:	0c 11       	sub	r1,r6
8001965e:	5c 51       	castu.b	r1
80019660:	02 9b       	mov	r11,r1
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019662:	fe b0 ca e2 	rcall	80012c26 <spi_write>
80019666:	30 0b       	mov	r11,0
80019668:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001966c:	fe b0 ca 70 	rcall	80012b4c <spi_unselectChip>
80019670:	30 0b       	mov	r11,0
  spi_write(OLED_SPI, c);
80019672:	fe 7c 28 00 	mov	r12,-55296
80019676:	fe b0 ca 43 	rcall	80012afc <spi_selectChip>
8001967a:	30 9c       	mov	r12,9
8001967c:	fe b0 c8 4e 	rcall	80012718 <gpio_clr_gpio_pin>
80019680:	ec cb 00 01 	sub	r11,r6,1
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019684:	fe 7c 28 00 	mov	r12,-55296
80019688:	02 0b       	add	r11,r1
8001968a:	5c 5b       	castu.b	r11
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001968c:	fe b0 ca cd 	rcall	80012c26 <spi_write>
80019690:	30 0b       	mov	r11,0
80019692:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019696:	fe b0 ca 5b 	rcall	80012b4c <spi_unselectChip>
8001969a:	30 0b       	mov	r11,0
  spi_write(OLED_SPI, c);
8001969c:	fe 7c 28 00 	mov	r12,-55296
800196a0:	fe b0 ca 2e 	rcall	80012afc <spi_selectChip>
800196a4:	30 9c       	mov	r12,9
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800196a6:	fe b0 c8 39 	rcall	80012718 <gpio_clr_gpio_pin>
800196aa:	37 5b       	mov	r11,117
800196ac:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800196b0:	fe b0 ca bb 	rcall	80012c26 <spi_write>
800196b4:	30 0b       	mov	r11,0
800196b6:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800196ba:	fe b0 ca 49 	rcall	80012b4c <spi_unselectChip>
800196be:	30 0b       	mov	r11,0
    }
  }
  
  // flip the screen coordinates 
  x = SCREEN_ROW_BYTES - x -  w;
  y = SCREEN_COL_BYTES - y - h;
800196c0:	fe 7c 28 00 	mov	r12,-55296
static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
  spi_write(OLED_SPI, c);
800196c4:	fe b0 ca 1c 	rcall	80012afc <spi_selectChip>
    }
  }
  
  // flip the screen coordinates 
  x = SCREEN_ROW_BYTES - x -  w;
  y = SCREEN_COL_BYTES - y - h;
800196c8:	30 9c       	mov	r12,9
800196ca:	fe b0 c8 27 	rcall	80012718 <gpio_clr_gpio_pin>
static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
  spi_write(OLED_SPI, c);
800196ce:	5c 32       	neg	r2
800196d0:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800196d4:	2c 02       	sub	r2,-64
800196d6:	0e 12       	sub	r2,r7
800196d8:	5c 52       	castu.b	r2
800196da:	04 9b       	mov	r11,r2
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800196dc:	fe b0 ca a5 	rcall	80012c26 <spi_write>
800196e0:	30 0b       	mov	r11,0
800196e2:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800196e6:	fe b0 ca 33 	rcall	80012b4c <spi_unselectChip>
800196ea:	30 0b       	mov	r11,0
  spi_write(OLED_SPI, c);
800196ec:	fe 7c 28 00 	mov	r12,-55296
800196f0:	fe b0 ca 06 	rcall	80012afc <spi_selectChip>
800196f4:	30 9c       	mov	r12,9
800196f6:	fe b0 c8 11 	rcall	80012718 <gpio_clr_gpio_pin>
800196fa:	0e 9b       	mov	r11,r7
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800196fc:	fe 7c 28 00 	mov	r12,-55296
80019700:	20 1b       	sub	r11,1
80019702:	04 0b       	add	r11,r2
80019704:	5c 5b       	castu.b	r11
  y = SCREEN_COL_BYTES - y - h;
  
  // set drawing region
  screen_set_rect(x, y, w, h);
  // select chip for data
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019706:	fe b0 ca 90 	rcall	80012c26 <spi_write>
8001970a:	30 0b       	mov	r11,0
8001970c:	fe 7c 28 00 	mov	r12,-55296
  // register select high for data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80019710:	fe b0 ca 1e 	rcall	80012b4c <spi_unselectChip>
80019714:	30 0b       	mov	r11,0
  // send data
  for(i=0; i<(nb); i++) {
80019716:	fe 7c 28 00 	mov	r12,-55296
8001971a:	fe b0 c9 f1 	rcall	80012afc <spi_selectChip>
8001971e:	30 9c       	mov	r12,9
    spi_write(OLED_SPI, screenBuf[i]);
80019720:	fe b0 c7 ef 	rcall	800126fe <gpio_set_gpio_pin>
80019724:	30 08       	mov	r8,0
80019726:	87 08       	st.w	r3[0x0],r8
80019728:	6a 09       	ld.w	r9,r5[0x0]
8001972a:	58 09       	cp.w	r9,0
  // select chip for data
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // register select high for data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  // send data
  for(i=0; i<(nb); i++) {
8001972c:	c0 e0       	breq	80019748 <screen_draw_region+0x1e8>
8001972e:	e8 08 07 0b 	ld.ub	r11,r4[r8]
80019732:	fe 7c 28 00 	mov	r12,-55296
80019736:	fe b0 ca 78 	rcall	80012c26 <spi_write>
    spi_write(OLED_SPI, screenBuf[i]);
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001973a:	66 08       	ld.w	r8,r3[0x0]
8001973c:	2f f8       	sub	r8,-1
8001973e:	87 08       	st.w	r3[0x0],r8
80019740:	6a 09       	ld.w	r9,r5[0x0]
80019742:	10 39       	cp.w	r9,r8
}
80019744:	fe 9b ff f5 	brhi	8001972e <screen_draw_region+0x1ce>
80019748:	30 0b       	mov	r11,0
8001974a:	fe 7c 28 00 	mov	r12,-55296
8001974e:	fe b0 c9 ff 	rcall	80012b4c <spi_unselectChip>
80019752:	2f ed       	sub	sp,-8
80019754:	d8 32       	popm	r0-r7,pc
80019756:	e0 63 0c 20 	mov	r3,3104
8001975a:	c6 1b       	rjmp	8001961c <screen_draw_region+0xbc>
8001975c:	80 02       	ld.sh	r2,r0[0x0]
8001975e:	49 d0       	lddpc	r0,800197d0 <init_oled+0x64>
80019760:	80 02       	ld.sh	r2,r0[0x0]
80019762:	49 ec       	lddpc	r12,800197d8 <init_oled+0x6c>
80019764:	80 02       	ld.sh	r2,r0[0x0]
80019766:	49 f4       	lddpc	r4,800197e0 <init_oled+0x74>
80019768:	80 02       	ld.sh	r2,r0[0x0]
8001976a:	49 fc       	lddpc	r12,800197e4 <init_oled+0x78>

8001976c <init_oled>:
8001976c:	d4 21       	pushm	r4-r7,lr
8001976e:	d3 03       	ssrf	0x10
80019770:	30 7c       	mov	r12,7
80019772:	fe b0 c7 c6 	rcall	800126fe <gpio_set_gpio_pin>
80019776:	30 09       	mov	r9,0
80019778:	e0 68 03 e8 	mov	r8,1000
8001977c:	30 07       	mov	r7,0
8001977e:	e0 66 14 80 	mov	r6,5248
80019782:	ea 16 03 ef 	orh	r6,0x3ef
80019786:	e0 6a 18 67 	mov	r10,6247
8001978a:	ea 1a 03 ef 	orh	r10,0x3ef
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8001978e:	30 0b       	mov	r11,0
80019790:	e0 a0 4a c7 	rcall	80022d1e <__avr32_udiv64>
80019794:	14 95       	mov	r5,r10
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80019796:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001979a:	f2 0a 00 0a 	add	r10,r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001979e:	e1 b8 00 42 	mfsr	r8,0x108
800197a2:	14 39       	cp.w	r9,r10
800197a4:	e0 8b 02 cf 	brhi	80019d42 <init_oled+0x5d6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800197a8:	10 39       	cp.w	r9,r8
800197aa:	e0 8b 00 05 	brhi	800197b4 <init_oled+0x48>
800197ae:	10 3a       	cp.w	r10,r8
800197b0:	e0 82 02 eb 	brhs	80019d86 <init_oled+0x61a>
  Disable_global_interrupt();
  //  delay_ms(1);
  // flip the reset pin
  gpio_set_gpio_pin(OLED_RESET_PIN);
  delay_ms(1);
  gpio_clr_gpio_pin(OLED_RESET_PIN);
800197b4:	30 7c       	mov	r12,7
800197b6:	fe b0 c7 b1 	rcall	80012718 <gpio_clr_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800197ba:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800197be:	f0 05 00 05 	add	r5,r8,r5
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800197c2:	e1 b9 00 42 	mfsr	r9,0x108
800197c6:	0a 38       	cp.w	r8,r5
800197c8:	e0 8b 02 c6 	brhi	80019d54 <init_oled+0x5e8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800197cc:	12 38       	cp.w	r8,r9
800197ce:	e0 8b 00 05 	brhi	800197d8 <init_oled+0x6c>
800197d2:	12 35       	cp.w	r5,r9
800197d4:	e0 82 02 dd 	brhs	80019d8e <init_oled+0x622>
  delay_ms(1);
  gpio_set_gpio_pin(OLED_RESET_PIN);
800197d8:	30 7c       	mov	r12,7
800197da:	fe b0 c7 92 	rcall	800126fe <gpio_set_gpio_pin>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800197de:	ee 0c 10 0a 	mul	r12,r7,10
800197e2:	e0 68 03 e8 	mov	r8,1000
800197e6:	30 07       	mov	r7,0
800197e8:	30 09       	mov	r9,0
800197ea:	30 ab       	mov	r11,10
800197ec:	ec 0b 06 4a 	mulu.d	r10,r6,r11
800197f0:	e0 66 03 e7 	mov	r6,999
800197f4:	f8 0b 00 0b 	add	r11,r12,r11
800197f8:	0c 0a       	add	r10,r6
800197fa:	f6 07 00 4b 	adc	r11,r11,r7
800197fe:	e0 a0 4a 90 	rcall	80022d1e <__avr32_udiv64>
80019802:	14 94       	mov	r4,r10
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80019804:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80019808:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001980c:	e1 b9 00 42 	mfsr	r9,0x108
80019810:	14 38       	cp.w	r8,r10
80019812:	e0 8b 02 a9 	brhi	80019d64 <init_oled+0x5f8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80019816:	12 38       	cp.w	r8,r9
80019818:	e0 8b 00 05 	brhi	80019822 <init_oled+0xb6>
8001981c:	12 3a       	cp.w	r10,r9
8001981e:	e0 82 02 bc 	brhs	80019d96 <init_oled+0x62a>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019822:	30 0b       	mov	r11,0
80019824:	fe 7c 28 00 	mov	r12,-55296
80019828:	fe b0 c9 6a 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001982c:	30 9c       	mov	r12,9
8001982e:	fe b0 c7 75 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019832:	e0 6b 00 ae 	mov	r11,174
80019836:	fe 7c 28 00 	mov	r12,-55296
8001983a:	fe b0 c9 f6 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001983e:	30 0b       	mov	r11,0
80019840:	fe 7c 28 00 	mov	r12,-55296
80019844:	fe b0 c9 84 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019848:	30 0b       	mov	r11,0
8001984a:	fe 7c 28 00 	mov	r12,-55296
8001984e:	fe b0 c9 57 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019852:	30 9c       	mov	r12,9
80019854:	fe b0 c7 62 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019858:	e0 6b 00 b3 	mov	r11,179
8001985c:	fe 7c 28 00 	mov	r12,-55296
80019860:	fe b0 c9 e3 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019864:	30 0b       	mov	r11,0
80019866:	fe 7c 28 00 	mov	r12,-55296
8001986a:	fe b0 c9 71 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001986e:	30 0b       	mov	r11,0
80019870:	fe 7c 28 00 	mov	r12,-55296
80019874:	fe b0 c9 44 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019878:	30 9c       	mov	r12,9
8001987a:	fe b0 c7 4f 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001987e:	e0 6b 00 91 	mov	r11,145
80019882:	fe 7c 28 00 	mov	r12,-55296
80019886:	fe b0 c9 d0 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001988a:	30 0b       	mov	r11,0
8001988c:	fe 7c 28 00 	mov	r12,-55296
80019890:	fe b0 c9 5e 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019894:	30 0b       	mov	r11,0
80019896:	fe 7c 28 00 	mov	r12,-55296
8001989a:	fe b0 c9 31 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001989e:	30 9c       	mov	r12,9
800198a0:	fe b0 c7 3c 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800198a4:	e0 6b 00 a8 	mov	r11,168
800198a8:	fe 7c 28 00 	mov	r12,-55296
800198ac:	fe b0 c9 bd 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800198b0:	30 0b       	mov	r11,0
800198b2:	fe 7c 28 00 	mov	r12,-55296
800198b6:	fe b0 c9 4b 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800198ba:	30 0b       	mov	r11,0
800198bc:	fe 7c 28 00 	mov	r12,-55296
800198c0:	fe b0 c9 1e 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800198c4:	30 9c       	mov	r12,9
800198c6:	fe b0 c7 29 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800198ca:	33 fb       	mov	r11,63
800198cc:	fe 7c 28 00 	mov	r12,-55296
800198d0:	fe b0 c9 ab 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800198d4:	30 0b       	mov	r11,0
800198d6:	fe 7c 28 00 	mov	r12,-55296
800198da:	fe b0 c9 39 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800198de:	30 0b       	mov	r11,0
800198e0:	fe 7c 28 00 	mov	r12,-55296
800198e4:	fe b0 c9 0c 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800198e8:	30 9c       	mov	r12,9
800198ea:	fe b0 c7 17 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800198ee:	e0 6b 00 86 	mov	r11,134
800198f2:	fe 7c 28 00 	mov	r12,-55296
800198f6:	fe b0 c9 98 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800198fa:	30 0b       	mov	r11,0
800198fc:	fe 7c 28 00 	mov	r12,-55296
80019900:	fe b0 c9 26 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019904:	30 0b       	mov	r11,0
80019906:	fe 7c 28 00 	mov	r12,-55296
8001990a:	fe b0 c8 f9 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001990e:	30 9c       	mov	r12,9
80019910:	fe b0 c7 04 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019914:	e0 6b 00 81 	mov	r11,129
80019918:	fe 7c 28 00 	mov	r12,-55296
8001991c:	fe b0 c9 85 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019920:	30 0b       	mov	r11,0
80019922:	fe 7c 28 00 	mov	r12,-55296
80019926:	fe b0 c9 13 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001992a:	30 0b       	mov	r11,0
8001992c:	fe 7c 28 00 	mov	r12,-55296
80019930:	fe b0 c8 e6 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019934:	30 9c       	mov	r12,9
80019936:	fe b0 c6 f1 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001993a:	37 fb       	mov	r11,127
8001993c:	fe 7c 28 00 	mov	r12,-55296
80019940:	fe b0 c9 73 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019944:	30 0b       	mov	r11,0
80019946:	fe 7c 28 00 	mov	r12,-55296
8001994a:	fe b0 c9 01 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001994e:	30 0b       	mov	r11,0
80019950:	fe 7c 28 00 	mov	r12,-55296
80019954:	fe b0 c8 d4 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019958:	30 9c       	mov	r12,9
8001995a:	fe b0 c6 df 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001995e:	e0 6b 00 b2 	mov	r11,178
80019962:	fe 7c 28 00 	mov	r12,-55296
80019966:	fe b0 c9 60 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001996a:	30 0b       	mov	r11,0
8001996c:	fe 7c 28 00 	mov	r12,-55296
80019970:	fe b0 c8 ee 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019974:	30 0b       	mov	r11,0
80019976:	fe 7c 28 00 	mov	r12,-55296
8001997a:	fe b0 c8 c1 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001997e:	30 9c       	mov	r12,9
80019980:	fe b0 c6 cc 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019984:	35 1b       	mov	r11,81
80019986:	fe 7c 28 00 	mov	r12,-55296
8001998a:	fe b0 c9 4e 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001998e:	30 0b       	mov	r11,0
80019990:	fe 7c 28 00 	mov	r12,-55296
80019994:	fe b0 c8 dc 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019998:	30 0b       	mov	r11,0
8001999a:	fe 7c 28 00 	mov	r12,-55296
8001999e:	fe b0 c8 af 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800199a2:	30 9c       	mov	r12,9
800199a4:	fe b0 c6 ba 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800199a8:	e0 6b 00 a8 	mov	r11,168
800199ac:	fe 7c 28 00 	mov	r12,-55296
800199b0:	fe b0 c9 3b 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800199b4:	30 0b       	mov	r11,0
800199b6:	fe 7c 28 00 	mov	r12,-55296
800199ba:	fe b0 c8 c9 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800199be:	30 0b       	mov	r11,0
800199c0:	fe 7c 28 00 	mov	r12,-55296
800199c4:	fe b0 c8 9c 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800199c8:	30 9c       	mov	r12,9
800199ca:	fe b0 c6 a7 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800199ce:	33 fb       	mov	r11,63
800199d0:	fe 7c 28 00 	mov	r12,-55296
800199d4:	fe b0 c9 29 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800199d8:	30 0b       	mov	r11,0
800199da:	fe 7c 28 00 	mov	r12,-55296
800199de:	fe b0 c8 b7 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800199e2:	30 0b       	mov	r11,0
800199e4:	fe 7c 28 00 	mov	r12,-55296
800199e8:	fe b0 c8 8a 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800199ec:	30 9c       	mov	r12,9
800199ee:	fe b0 c6 95 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800199f2:	e0 6b 00 bc 	mov	r11,188
800199f6:	fe 7c 28 00 	mov	r12,-55296
800199fa:	fe b0 c9 16 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800199fe:	30 0b       	mov	r11,0
80019a00:	fe 7c 28 00 	mov	r12,-55296
80019a04:	fe b0 c8 a4 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019a08:	30 0b       	mov	r11,0
80019a0a:	fe 7c 28 00 	mov	r12,-55296
80019a0e:	fe b0 c8 77 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019a12:	30 9c       	mov	r12,9
80019a14:	fe b0 c6 82 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019a18:	31 0b       	mov	r11,16
80019a1a:	fe 7c 28 00 	mov	r12,-55296
80019a1e:	fe b0 c9 04 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019a22:	30 0b       	mov	r11,0
80019a24:	fe 7c 28 00 	mov	r12,-55296
80019a28:	fe b0 c8 92 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019a2c:	30 0b       	mov	r11,0
80019a2e:	fe 7c 28 00 	mov	r12,-55296
80019a32:	fe b0 c8 65 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019a36:	30 9c       	mov	r12,9
80019a38:	fe b0 c6 70 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019a3c:	e0 6b 00 be 	mov	r11,190
80019a40:	fe 7c 28 00 	mov	r12,-55296
80019a44:	fe b0 c8 f1 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019a48:	30 0b       	mov	r11,0
80019a4a:	fe 7c 28 00 	mov	r12,-55296
80019a4e:	fe b0 c8 7f 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019a52:	30 0b       	mov	r11,0
80019a54:	fe 7c 28 00 	mov	r12,-55296
80019a58:	fe b0 c8 52 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019a5c:	30 9c       	mov	r12,9
80019a5e:	fe b0 c6 5d 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019a62:	31 cb       	mov	r11,28
80019a64:	fe 7c 28 00 	mov	r12,-55296
80019a68:	fe b0 c8 df 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019a6c:	30 0b       	mov	r11,0
80019a6e:	fe 7c 28 00 	mov	r12,-55296
80019a72:	fe b0 c8 6d 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019a76:	30 0b       	mov	r11,0
80019a78:	fe 7c 28 00 	mov	r12,-55296
80019a7c:	fe b0 c8 40 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019a80:	30 9c       	mov	r12,9
80019a82:	fe b0 c6 4b 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019a86:	e0 6b 00 ad 	mov	r11,173
80019a8a:	fe 7c 28 00 	mov	r12,-55296
80019a8e:	fe b0 c8 cc 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019a92:	30 0b       	mov	r11,0
80019a94:	fe 7c 28 00 	mov	r12,-55296
80019a98:	fe b0 c8 5a 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019a9c:	30 0b       	mov	r11,0
80019a9e:	fe 7c 28 00 	mov	r12,-55296
80019aa2:	fe b0 c8 2d 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019aa6:	30 9c       	mov	r12,9
80019aa8:	fe b0 c6 38 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019aac:	30 2b       	mov	r11,2
80019aae:	fe 7c 28 00 	mov	r12,-55296
80019ab2:	fe b0 c8 ba 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019ab6:	30 0b       	mov	r11,0
80019ab8:	fe 7c 28 00 	mov	r12,-55296
80019abc:	fe b0 c8 48 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019ac0:	30 0b       	mov	r11,0
80019ac2:	fe 7c 28 00 	mov	r12,-55296
80019ac6:	fe b0 c8 1b 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019aca:	30 9c       	mov	r12,9
80019acc:	fe b0 c6 26 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019ad0:	e0 6b 00 a0 	mov	r11,160
80019ad4:	fe 7c 28 00 	mov	r12,-55296
80019ad8:	fe b0 c8 a7 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019adc:	30 0b       	mov	r11,0
80019ade:	fe 7c 28 00 	mov	r12,-55296
80019ae2:	fe b0 c8 35 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019ae6:	30 0b       	mov	r11,0
80019ae8:	fe 7c 28 00 	mov	r12,-55296
80019aec:	fe b0 c8 08 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019af0:	30 9c       	mov	r12,9
80019af2:	fe b0 c6 13 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019af6:	35 0b       	mov	r11,80
80019af8:	fe 7c 28 00 	mov	r12,-55296
80019afc:	fe b0 c8 95 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019b00:	30 0b       	mov	r11,0
80019b02:	fe 7c 28 00 	mov	r12,-55296
80019b06:	fe b0 c8 23 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019b0a:	30 0b       	mov	r11,0
80019b0c:	fe 7c 28 00 	mov	r12,-55296
80019b10:	fe b0 c7 f6 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019b14:	30 9c       	mov	r12,9
80019b16:	fe b0 c6 01 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019b1a:	e0 6b 00 a1 	mov	r11,161
80019b1e:	fe 7c 28 00 	mov	r12,-55296
80019b22:	fe b0 c8 82 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019b26:	30 0b       	mov	r11,0
80019b28:	fe 7c 28 00 	mov	r12,-55296
80019b2c:	fe b0 c8 10 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019b30:	30 0b       	mov	r11,0
80019b32:	fe 7c 28 00 	mov	r12,-55296
80019b36:	fe b0 c7 e3 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019b3a:	30 9c       	mov	r12,9
80019b3c:	fe b0 c5 ee 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019b40:	30 0b       	mov	r11,0
80019b42:	fe 7c 28 00 	mov	r12,-55296
80019b46:	fe b0 c8 70 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019b4a:	30 0b       	mov	r11,0
80019b4c:	fe 7c 28 00 	mov	r12,-55296
80019b50:	fe b0 c7 fe 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019b54:	30 0b       	mov	r11,0
80019b56:	fe 7c 28 00 	mov	r12,-55296
80019b5a:	fe b0 c7 d1 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019b5e:	30 9c       	mov	r12,9
80019b60:	fe b0 c5 dc 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019b64:	e0 6b 00 a2 	mov	r11,162
80019b68:	fe 7c 28 00 	mov	r12,-55296
80019b6c:	fe b0 c8 5d 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019b70:	30 0b       	mov	r11,0
80019b72:	fe 7c 28 00 	mov	r12,-55296
80019b76:	fe b0 c7 eb 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019b7a:	30 0b       	mov	r11,0
80019b7c:	fe 7c 28 00 	mov	r12,-55296
80019b80:	fe b0 c7 be 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019b84:	30 9c       	mov	r12,9
80019b86:	fe b0 c5 c9 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019b8a:	34 cb       	mov	r11,76
80019b8c:	fe 7c 28 00 	mov	r12,-55296
80019b90:	fe b0 c8 4b 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019b94:	30 0b       	mov	r11,0
80019b96:	fe 7c 28 00 	mov	r12,-55296
80019b9a:	fe b0 c7 d9 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019b9e:	30 0b       	mov	r11,0
80019ba0:	fe 7c 28 00 	mov	r12,-55296
80019ba4:	fe b0 c7 ac 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019ba8:	30 9c       	mov	r12,9
80019baa:	fe b0 c5 b7 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019bae:	e0 6b 00 b1 	mov	r11,177
80019bb2:	fe 7c 28 00 	mov	r12,-55296
80019bb6:	fe b0 c8 38 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019bba:	30 0b       	mov	r11,0
80019bbc:	fe 7c 28 00 	mov	r12,-55296
80019bc0:	fe b0 c7 c6 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019bc4:	30 0b       	mov	r11,0
80019bc6:	fe 7c 28 00 	mov	r12,-55296
80019bca:	fe b0 c7 99 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019bce:	30 9c       	mov	r12,9
80019bd0:	fe b0 c5 a4 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019bd4:	35 5b       	mov	r11,85
80019bd6:	fe 7c 28 00 	mov	r12,-55296
80019bda:	fe b0 c8 26 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019bde:	30 0b       	mov	r11,0
80019be0:	fe 7c 28 00 	mov	r12,-55296
80019be4:	fe b0 c7 b4 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019be8:	30 0b       	mov	r11,0
80019bea:	fe 7c 28 00 	mov	r12,-55296
80019bee:	fe b0 c7 87 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019bf2:	30 9c       	mov	r12,9
80019bf4:	fe b0 c5 92 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019bf8:	e0 6b 00 b4 	mov	r11,180
80019bfc:	fe 7c 28 00 	mov	r12,-55296
80019c00:	fe b0 c8 13 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019c04:	30 0b       	mov	r11,0
80019c06:	fe 7c 28 00 	mov	r12,-55296
80019c0a:	fe b0 c7 a1 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019c0e:	30 0b       	mov	r11,0
80019c10:	fe 7c 28 00 	mov	r12,-55296
80019c14:	fe b0 c7 74 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019c18:	30 9c       	mov	r12,9
80019c1a:	fe b0 c5 7f 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019c1e:	30 2b       	mov	r11,2
80019c20:	fe 7c 28 00 	mov	r12,-55296
80019c24:	fe b0 c8 01 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019c28:	30 0b       	mov	r11,0
80019c2a:	fe 7c 28 00 	mov	r12,-55296
80019c2e:	fe b0 c7 8f 	rcall	80012b4c <spi_unselectChip>
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019c32:	30 0b       	mov	r11,0
80019c34:	fe 7c 28 00 	mov	r12,-55296
80019c38:	fe b0 c7 62 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019c3c:	30 9c       	mov	r12,9
80019c3e:	fe b0 c5 6d 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80019c42:	e0 6b 00 b0 	mov	r11,176
80019c46:	fe 7c 28 00 	mov	r12,-55296
80019c4a:	fe b0 c7 ee 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019c4e:	30 0b       	mov	r11,0
80019c50:	fe 7c 28 00 	mov	r12,-55296
80019c54:	fe b0 c7 7c 	rcall	80012b4c <spi_unselectChip>
  write_command(0xB1);	// set phase
  write_command(0x55);
  write_command(0xB4);	// precharge
  write_command(0x02);
  write_command(0xB0);	// precharge
  write_command(0x28);
80019c58:	32 8c       	mov	r12,40
80019c5a:	fe b0 fc 6b 	rcall	80019530 <write_command>
  write_command(0xBF);	// vsl
80019c5e:	e0 6c 00 bf 	mov	r12,191
80019c62:	fe b0 fc 67 	rcall	80019530 <write_command>
  write_command(0x0F);
80019c66:	30 fc       	mov	r12,15
80019c68:	fe b0 fc 64 	rcall	80019530 <write_command>
  write_command(0xA4);	// normal display
80019c6c:	e0 6c 00 a4 	mov	r12,164
80019c70:	fe b0 fc 60 	rcall	80019530 <write_command>
  write_command(0xB8);	// greyscale table
80019c74:	e0 6c 00 b8 	mov	r12,184
80019c78:	fe b0 fc 5c 	rcall	80019530 <write_command>
  write_command(0x01);
80019c7c:	30 1c       	mov	r12,1
80019c7e:	fe b0 fc 59 	rcall	80019530 <write_command>
  write_command(0x11);
80019c82:	31 1c       	mov	r12,17
80019c84:	fe b0 fc 56 	rcall	80019530 <write_command>
  write_command(0x22);
80019c88:	32 2c       	mov	r12,34
80019c8a:	fe b0 fc 53 	rcall	80019530 <write_command>
  write_command(0x32);
80019c8e:	33 2c       	mov	r12,50
80019c90:	fe b0 fc 50 	rcall	80019530 <write_command>
  write_command(0x43);
80019c94:	34 3c       	mov	r12,67
80019c96:	fe b0 fc 4d 	rcall	80019530 <write_command>
  write_command(0x54);
80019c9a:	35 4c       	mov	r12,84
80019c9c:	fe b0 fc 4a 	rcall	80019530 <write_command>
  write_command(0x65);
80019ca0:	36 5c       	mov	r12,101
80019ca2:	fe b0 fc 47 	rcall	80019530 <write_command>
  write_command(0x76);	
80019ca6:	37 6c       	mov	r12,118
80019ca8:	fe b0 fc 44 	rcall	80019530 <write_command>
		
  // set update box (to full screen)
  write_command(0x15);
80019cac:	31 5c       	mov	r12,21
80019cae:	fe b0 fc 41 	rcall	80019530 <write_command>
  write_command(0);
80019cb2:	30 0c       	mov	r12,0
80019cb4:	fe b0 fc 3e 	rcall	80019530 <write_command>
  write_command(63);
80019cb8:	33 fc       	mov	r12,63
80019cba:	fe b0 fc 3b 	rcall	80019530 <write_command>
  write_command(0x75);
80019cbe:	37 5c       	mov	r12,117
80019cc0:	fe b0 fc 38 	rcall	80019530 <write_command>
  write_command(0);
80019cc4:	30 0c       	mov	r12,0
80019cc6:	fe b0 fc 35 	rcall	80019530 <write_command>
  write_command(63); // ???
80019cca:	33 fc       	mov	r12,63
80019ccc:	fe b0 fc 32 	rcall	80019530 <write_command>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

 // clear OLED RAM and local screenbuffer
void screen_clear(void) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019cd0:	30 0b       	mov	r11,0
80019cd2:	fe 7c 28 00 	mov	r12,-55296
80019cd6:	fe b0 c7 13 	rcall	80012afc <spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80019cda:	30 9c       	mov	r12,9
80019cdc:	fe b0 c5 11 	rcall	800126fe <gpio_set_gpio_pin>
  for(i=0; i<GRAM_BYTES; i++) { 
80019ce0:	30 09       	mov	r9,0
80019ce2:	e0 67 0c 20 	mov	r7,3104
80019ce6:	12 98       	mov	r8,r9
80019ce8:	8f 09       	st.w	r7[0x0],r9
    screenBuf[i] = 0;
80019cea:	e0 65 0c 28 	mov	r5,3112
80019cee:	12 96       	mov	r6,r9
    spi_write(OLED_SPI, 0);
80019cf0:	ea 08 0b 06 	st.b	r5[r8],r6
80019cf4:	30 0b       	mov	r11,0
80019cf6:	fe 7c 28 00 	mov	r12,-55296
 // clear OLED RAM and local screenbuffer
void screen_clear(void) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  for(i=0; i<GRAM_BYTES; i++) { 
80019cfa:	fe b0 c7 96 	rcall	80012c26 <spi_write>
80019cfe:	6e 08       	ld.w	r8,r7[0x0]
80019d00:	2f f8       	sub	r8,-1
80019d02:	8f 08       	st.w	r7[0x0],r8
80019d04:	e0 48 0f ff 	cp.w	r8,4095
    screenBuf[i] = 0;
    spi_write(OLED_SPI, 0);
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019d08:	fe 98 ff f4 	brls	80019cf0 <init_oled+0x584>
80019d0c:	30 0b       	mov	r11,0
80019d0e:	fe 7c 28 00 	mov	r12,-55296
  write_command(0);
  write_command(63); // ???

  screen_clear();
  
  write_command(0xAF);	// on
80019d12:	fe b0 c7 1d 	rcall	80012b4c <spi_unselectChip>
80019d16:	e0 6c 00 af 	mov	r12,175
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80019d1a:	fe b0 fc 0b 	rcall	80019530 <write_command>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80019d1e:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019d22:	f2 04 00 04 	add	r4,r9,r4
80019d26:	e1 b8 00 42 	mfsr	r8,0x108
80019d2a:	08 39       	cp.w	r9,r4
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80019d2c:	e0 8b 00 26 	brhi	80019d78 <init_oled+0x60c>
80019d30:	10 39       	cp.w	r9,r8
80019d32:	e0 8b 00 04 	brhi	80019d3a <init_oled+0x5ce>
  delay_ms(10) ;
  //  cpu_irq_enable();
  Enable_global_interrupt();
80019d36:	10 34       	cp.w	r4,r8
}
80019d38:	c3 32       	brcc	80019d9e <init_oled+0x632>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019d3a:	d5 03       	csrf	0x10
80019d3c:	d8 22       	popm	r4-r7,pc
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019d3e:	e1 b8 00 42 	mfsr	r8,0x108
80019d42:	10 39       	cp.w	r9,r8
80019d44:	fe 98 ff fd 	brls	80019d3e <init_oled+0x5d2>
80019d48:	10 3a       	cp.w	r10,r8
80019d4a:	fe 93 fd 35 	brlo	800197b4 <init_oled+0x48>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019d4e:	cf 8b       	rjmp	80019d3e <init_oled+0x5d2>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019d50:	e1 b9 00 42 	mfsr	r9,0x108
80019d54:	10 39       	cp.w	r9,r8
80019d56:	cf d2       	brcc	80019d50 <init_oled+0x5e4>
80019d58:	0a 39       	cp.w	r9,r5
80019d5a:	fe 9b fd 3f 	brhi	800197d8 <init_oled+0x6c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019d5e:	cf 9b       	rjmp	80019d50 <init_oled+0x5e4>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019d60:	e1 b9 00 42 	mfsr	r9,0x108
80019d64:	10 39       	cp.w	r9,r8
80019d66:	cf d2       	brcc	80019d60 <init_oled+0x5f4>
80019d68:	14 39       	cp.w	r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019d6a:	fe 9b fd 5c 	brhi	80019822 <init_oled+0xb6>
80019d6e:	e1 b9 00 42 	mfsr	r9,0x108
80019d72:	cf 9b       	rjmp	80019d64 <init_oled+0x5f8>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80019d74:	e1 b8 00 42 	mfsr	r8,0x108
80019d78:	12 38       	cp.w	r8,r9
80019d7a:	cf d2       	brcc	80019d74 <init_oled+0x608>
80019d7c:	08 38       	cp.w	r8,r4
  screen_clear();
  
  write_command(0xAF);	// on
  delay_ms(10) ;
  //  cpu_irq_enable();
  Enable_global_interrupt();
80019d7e:	fe 98 ff fb 	brls	80019d74 <init_oled+0x608>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80019d82:	d5 03       	csrf	0x10
80019d84:	d8 22       	popm	r4-r7,pc
80019d86:	e1 b8 00 42 	mfsr	r8,0x108
80019d8a:	fe 9f fd 0f 	bral	800197a8 <init_oled+0x3c>
80019d8e:	e1 b9 00 42 	mfsr	r9,0x108
80019d92:	fe 9f fd 1d 	bral	800197cc <init_oled+0x60>
80019d96:	e1 b9 00 42 	mfsr	r9,0x108
80019d9a:	fe 9f fd 3e 	bral	80019816 <init_oled+0xaa>
80019d9e:	e1 b8 00 42 	mfsr	r8,0x108
80019da2:	cc 7b       	rjmp	80019d30 <init_oled+0x5c4>

80019da4 <screen_startup>:
80019da4:	d4 31       	pushm	r0-r7,lr
80019da6:	20 2d       	sub	sp,8
80019da8:	e0 68 0c 28 	mov	r8,3112
80019dac:	fe f9 02 f8 	ld.w	r9,pc[760]
80019db0:	f0 c6 f0 00 	sub	r6,r8,-4096
80019db4:	10 a9       	st.w	r8++,r9
80019db6:	0c 38       	cp.w	r8,r6
80019db8:	cf e1       	brne	80019db4 <screen_startup+0x10>
80019dba:	fe fc 02 d2 	ld.w	r12,pc[722]
80019dbe:	fe b0 c8 ef 	rcall	80012f9c <print_dbg>
80019dc2:	30 0b       	mov	r11,0
  }

  print_dbg("\r\n screen_startup");

    // send screenbuffer
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019dc4:	fe 7c 28 00 	mov	r12,-55296
80019dc8:	fe b0 c6 9a 	rcall	80012afc <spi_selectChip>
  // register select high for data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80019dcc:	30 9c       	mov	r12,9
80019dce:	fe b0 c4 98 	rcall	800126fe <gpio_set_gpio_pin>
80019dd2:	e0 67 0c 28 	mov	r7,3112
  // send data
  for(i=0; i<GRAM_BYTES; i++) {
    spi_write(OLED_SPI, screenBuf[i]);
80019dd6:	0f 3b       	ld.ub	r11,r7++
80019dd8:	fe 7c 28 00 	mov	r12,-55296
80019ddc:	fe b0 c7 25 	rcall	80012c26 <spi_write>
    // send screenbuffer
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // register select high for data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  // send data
  for(i=0; i<GRAM_BYTES; i++) {
80019de0:	0e 36       	cp.w	r6,r7
80019de2:	cf a1       	brne	80019dd6 <screen_startup+0x32>
    spi_write(OLED_SPI, screenBuf[i]);
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS); 
80019de4:	30 0b       	mov	r11,0
80019de6:	fe 7c 28 00 	mov	r12,-55296
80019dea:	fe b0 c6 b1 	rcall	80012b4c <spi_unselectChip>
  //  static u32 off; // offset from end of screenbuffer
  // 1 row address = 2 horizontal pixels
  //  u32 wb = w >> 1;
  w >>= 1;
  x >>= 1;
  nb = w * h;
80019dee:	e0 68 01 80 	mov	r8,384
80019df2:	e0 67 1c 2c 	mov	r7,7212

  print_dbg("\r\n screen_draw_region: w:");
80019df6:	fe fc 02 9a 	ld.w	r12,pc[666]
  //  static u32 off; // offset from end of screenbuffer
  // 1 row address = 2 horizontal pixels
  //  u32 wb = w >> 1;
  w >>= 1;
  x >>= 1;
  nb = w * h;
80019dfa:	8f 08       	st.w	r7[0x0],r8

  print_dbg("\r\n screen_draw_region: w:");
80019dfc:	fe b0 c8 d0 	rcall	80012f9c <print_dbg>
  // print_dbg("\r\n bytes in row: "); */
  print_dbg_ulong(w); 
80019e00:	30 cc       	mov	r12,12
80019e02:	fe b0 c8 d3 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , x:"); 
80019e06:	fe fc 02 8e 	ld.w	r12,pc[654]
80019e0a:	fe b0 c8 c9 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(x); 
80019e0e:	33 3c       	mov	r12,51
80019e10:	fe b0 c8 cc 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , h:");
80019e14:	fe fc 02 84 	ld.w	r12,pc[644]
80019e18:	fe b0 c8 c2 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(h);
80019e1c:	32 0c       	mov	r12,32
80019e1e:	fe b0 c8 c5 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , y:");
80019e22:	fe fc 02 7a 	ld.w	r12,pc[634]
80019e26:	fe b0 c8 bb 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(y);
80019e2a:	31 fc       	mov	r12,31
80019e2c:	fe b0 c8 be 	rcall	80012fa8 <print_dbg_ulong>




// startup screen (FIXME: just grey at the moment)
void screen_startup(void) {
80019e30:	fe f9 02 70 	ld.w	r9,pc[624]
  print_dbg_ulong(y);

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
80019e34:	6e 0a       	ld.w	r10,r7[0x0]




// startup screen (FIXME: just grey at the moment)
void screen_startup(void) {
80019e36:	12 98       	mov	r8,r9
  print_dbg_ulong(y);

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
80019e38:	20 1a       	sub	r10,1




// startup screen (FIXME: just grey at the moment)
void screen_startup(void) {
80019e3a:	f2 c9 fd 00 	sub	r9,r9,-768
  print_dbg_ulong(y);

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
80019e3e:	e0 6b 0c 28 	mov	r11,3112




// startup screen (FIXME: just grey at the moment)
void screen_startup(void) {
80019e42:	50 09       	stdsp	sp[0x0],r9
  print_dbg_ulong(y);

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
80019e44:	14 0b       	add	r11,r10
80019e46:	16 99       	mov	r9,r11
80019e48:	16 92       	mov	r2,r11
80019e4a:	16 93       	mov	r3,r11
80019e4c:	16 94       	mov	r4,r11
80019e4e:	16 95       	mov	r5,r11
80019e50:	16 96       	mov	r6,r11
80019e52:	16 9e       	mov	lr,r11
80019e54:	16 9c       	mov	r12,r11
80019e56:	50 1b       	stdsp	sp[0x4],r11
80019e58:	12 9a       	mov	r10,r9
80019e5a:	20 12       	sub	r2,1
80019e5c:	20 23       	sub	r3,2
80019e5e:	20 34       	sub	r4,3
80019e60:	20 45       	sub	r5,4
80019e62:	20 56       	sub	r6,5
80019e64:	20 6e       	sub	lr,6
80019e66:	20 7c       	sub	r12,7
80019e68:	20 8b       	sub	r11,8
80019e6a:	20 9a       	sub	r10,9
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019e6c:	11 80       	ld.ub	r0,r8[0x0]
      data++;
      *pScr |= ((*data) & 0xf);
80019e6e:	11 91       	ld.ub	r1,r8[0x1]
80019e70:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019e74:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019e78:	b2 81       	st.b	r9[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019e7a:	11 a0       	ld.ub	r0,r8[0x2]
      data++;
      *pScr |= ((*data) & 0xf);
80019e7c:	11 b1       	ld.ub	r1,r8[0x3]
80019e7e:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019e82:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019e86:	a4 81       	st.b	r2[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019e88:	11 c0       	ld.ub	r0,r8[0x4]
      data++;
      *pScr |= ((*data) & 0xf);
80019e8a:	11 d1       	ld.ub	r1,r8[0x5]
80019e8c:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019e90:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019e94:	a6 81       	st.b	r3[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019e96:	11 e0       	ld.ub	r0,r8[0x6]
      data++;
      *pScr |= ((*data) & 0xf);
80019e98:	11 f1       	ld.ub	r1,r8[0x7]
80019e9a:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019e9e:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019ea2:	a8 81       	st.b	r4[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019ea4:	f1 30 00 08 	ld.ub	r0,r8[8]
      data++;
      *pScr |= ((*data) & 0xf);
80019ea8:	f1 31 00 09 	ld.ub	r1,r8[9]
80019eac:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019eb0:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019eb4:	aa 81       	st.b	r5[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019eb6:	f1 30 00 0a 	ld.ub	r0,r8[10]
      data++;
      *pScr |= ((*data) & 0xf);
80019eba:	f1 31 00 0b 	ld.ub	r1,r8[11]
80019ebe:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019ec2:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019ec6:	ac 81       	st.b	r6[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019ec8:	f1 30 00 0c 	ld.ub	r0,r8[12]
      data++;
      *pScr |= ((*data) & 0xf);
80019ecc:	f1 31 00 0d 	ld.ub	r1,r8[13]
80019ed0:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019ed4:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019ed8:	bc 81       	st.b	lr[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019eda:	f1 30 00 0e 	ld.ub	r0,r8[14]
      data++;
      *pScr |= ((*data) & 0xf);
80019ede:	f1 31 00 0f 	ld.ub	r1,r8[15]
80019ee2:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019ee6:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019eea:	b8 81       	st.b	r12[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019eec:	f1 30 00 10 	ld.ub	r0,r8[16]
      data++;
      *pScr |= ((*data) & 0xf);
80019ef0:	f1 31 00 11 	ld.ub	r1,r8[17]
80019ef4:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019ef8:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019efc:	b6 81       	st.b	r11[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019efe:	f1 30 00 12 	ld.ub	r0,r8[18]
      data++;
      *pScr |= ((*data) & 0xf);
80019f02:	f1 31 00 13 	ld.ub	r1,r8[19]
80019f06:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019f0a:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019f0e:	b4 81       	st.b	r10[0x0],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019f10:	f1 30 00 14 	ld.ub	r0,r8[20]
      data++;
      *pScr |= ((*data) & 0xf);
80019f14:	f1 31 00 15 	ld.ub	r1,r8[21]
80019f18:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019f1c:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019f20:	f3 61 ff f6 	st.b	r9[-10],r1
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      *pScr = (0xf0 & ((*data) << 4) );
80019f24:	f1 30 00 16 	ld.ub	r0,r8[22]
      data++;
      *pScr |= ((*data) & 0xf);
80019f28:	f1 31 00 17 	ld.ub	r1,r8[23]
80019f2c:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80019f30:	e3 e0 10 41 	or	r1,r1,r0<<0x4
80019f34:	20 c2       	sub	r2,12
80019f36:	f3 61 ff f5 	st.b	r9[-11],r1
80019f3a:	20 c3       	sub	r3,12
80019f3c:	20 c4       	sub	r4,12
80019f3e:	20 c5       	sub	r5,12
80019f40:	20 c6       	sub	r6,12
80019f42:	20 ce       	sub	lr,12
80019f44:	20 cc       	sub	r12,12
80019f46:	20 cb       	sub	r11,12
80019f48:	20 ca       	sub	r10,12
80019f4a:	2e 88       	sub	r8,-24
80019f4c:	20 c9       	sub	r9,12

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
80019f4e:	40 01       	lddsp	r1,sp[0x0]
80019f50:	02 38       	cp.w	r8,r1
80019f52:	c8 d1       	brne	80019e6c <screen_startup+0xc8>
80019f54:	e0 68 1c 28 	mov	r8,7208
80019f58:	40 1b       	lddsp	r11,sp[0x4]
80019f5a:	f6 c9 01 80 	sub	r9,r11,384
80019f5e:	91 09       	st.w	r8[0x0],r9
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019f60:	e0 68 0c 24 	mov	r8,3108

  /// the screen is mounted upside down!'
  // copy, pack, and reverse into the top of the screen buffer
  // 2 bytes input -> 1 byte output
    pScr = (u8*)screenBuf + nb - 1;
  for(j=0; j<h; j++) {
80019f64:	30 0b       	mov	r11,0
80019f66:	e0 66 0c 20 	mov	r6,3104
80019f6a:	30 c4       	mov	r4,12
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019f6c:	32 05       	mov	r5,32
80019f6e:	8d 04       	st.w	r6[0x0],r4
80019f70:	91 05       	st.w	r8[0x0],r5
80019f72:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019f76:	fe b0 c5 c3 	rcall	80012afc <spi_selectChip>
  spi_write(OLED_SPI, c);
80019f7a:	30 9c       	mov	r12,9
80019f7c:	fe b0 c3 ce 	rcall	80012718 <gpio_clr_gpio_pin>
80019f80:	31 5b       	mov	r11,21
80019f82:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019f86:	fe b0 c6 50 	rcall	80012c26 <spi_write>
80019f8a:	30 0b       	mov	r11,0
80019f8c:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019f90:	fe b0 c5 de 	rcall	80012b4c <spi_unselectChip>
80019f94:	30 0b       	mov	r11,0
80019f96:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019f9a:	fe b0 c5 b1 	rcall	80012afc <spi_selectChip>
  spi_write(OLED_SPI, c);
80019f9e:	30 9c       	mov	r12,9
80019fa0:	fe b0 c3 bc 	rcall	80012718 <gpio_clr_gpio_pin>
80019fa4:	30 1b       	mov	r11,1
80019fa6:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019faa:	fe b0 c6 3e 	rcall	80012c26 <spi_write>
80019fae:	30 0b       	mov	r11,0
80019fb0:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019fb4:	fe b0 c5 cc 	rcall	80012b4c <spi_unselectChip>
80019fb8:	30 0b       	mov	r11,0
80019fba:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019fbe:	fe b0 c5 9f 	rcall	80012afc <spi_selectChip>
  spi_write(OLED_SPI, c);
80019fc2:	30 9c       	mov	r12,9
80019fc4:	fe b0 c3 aa 	rcall	80012718 <gpio_clr_gpio_pin>
80019fc8:	08 9b       	mov	r11,r4
80019fca:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019fce:	fe b0 c6 2c 	rcall	80012c26 <spi_write>
80019fd2:	30 0b       	mov	r11,0
80019fd4:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019fd8:	fe b0 c5 ba 	rcall	80012b4c <spi_unselectChip>
80019fdc:	30 0b       	mov	r11,0
80019fde:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80019fe2:	fe b0 c5 8d 	rcall	80012afc <spi_selectChip>
  spi_write(OLED_SPI, c);
80019fe6:	30 9c       	mov	r12,9
80019fe8:	fe b0 c3 98 	rcall	80012718 <gpio_clr_gpio_pin>
80019fec:	37 5b       	mov	r11,117
80019fee:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80019ff2:	fe b0 c6 1a 	rcall	80012c26 <spi_write>
80019ff6:	30 0b       	mov	r11,0
80019ff8:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80019ffc:	fe b0 c5 a8 	rcall	80012b4c <spi_unselectChip>
8001a000:	30 0b       	mov	r11,0
8001a002:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001a006:	fe b0 c5 7b 	rcall	80012afc <spi_selectChip>
  spi_write(OLED_SPI, c);
8001a00a:	30 9c       	mov	r12,9
8001a00c:	fe b0 c3 86 	rcall	80012718 <gpio_clr_gpio_pin>
8001a010:	30 1b       	mov	r11,1
8001a012:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001a016:	fe b0 c6 08 	rcall	80012c26 <spi_write>
8001a01a:	30 0b       	mov	r11,0
8001a01c:	fe 7c 28 00 	mov	r12,-55296
// fixed-point text buffer
//static char buf[FIX_DIG_TOTAL];

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001a020:	fe b0 c5 96 	rcall	80012b4c <spi_unselectChip>
8001a024:	30 0b       	mov	r11,0
8001a026:	fe 7c 28 00 	mov	r12,-55296
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001a02a:	fe b0 c5 69 	rcall	80012afc <spi_selectChip>
  spi_write(OLED_SPI, c);
8001a02e:	30 9c       	mov	r12,9
8001a030:	fe b0 c3 74 	rcall	80012718 <gpio_clr_gpio_pin>
8001a034:	0a 9b       	mov	r11,r5
8001a036:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001a03a:	fe b0 c5 f6 	rcall	80012c26 <spi_write>
8001a03e:	30 0b       	mov	r11,0
8001a040:	fe 7c 28 00 	mov	r12,-55296
  y = SCREEN_COL_BYTES - y - h;
  
  // set drawing region
  screen_set_rect(x, y, w, h);
  // select chip for data
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001a044:	fe b0 c5 84 	rcall	80012b4c <spi_unselectChip>
8001a048:	30 0b       	mov	r11,0
8001a04a:	fe 7c 28 00 	mov	r12,-55296
  // register select high for data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
8001a04e:	fe b0 c5 57 	rcall	80012afc <spi_selectChip>
  // send data
  for(i=0; i<(nb); i++) {
8001a052:	30 9c       	mov	r12,9
8001a054:	fe b0 c3 55 	rcall	800126fe <gpio_set_gpio_pin>
8001a058:	30 08       	mov	r8,0
8001a05a:	8d 08       	st.w	r6[0x0],r8
    spi_write(OLED_SPI, screenBuf[i]);
8001a05c:	6e 09       	ld.w	r9,r7[0x0]
8001a05e:	58 09       	cp.w	r9,0
8001a060:	c0 f0       	breq	8001a07e <screen_startup+0x2da>
8001a062:	e0 6a 0c 28 	mov	r10,3112
8001a066:	fe 7c 28 00 	mov	r12,-55296
  // select chip for data
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // register select high for data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  // send data
  for(i=0; i<(nb); i++) {
8001a06a:	f4 08 07 0b 	ld.ub	r11,r10[r8]
8001a06e:	fe b0 c5 dc 	rcall	80012c26 <spi_write>
8001a072:	6c 08       	ld.w	r8,r6[0x0]
8001a074:	2f f8       	sub	r8,-1
    spi_write(OLED_SPI, screenBuf[i]);
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001a076:	8d 08       	st.w	r6[0x0],r8
8001a078:	6e 09       	ld.w	r9,r7[0x0]
8001a07a:	12 38       	cp.w	r8,r9
8001a07c:	cf 33       	brcs	8001a062 <screen_startup+0x2be>
8001a07e:	30 0b       	mov	r11,0
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS); 

  /// draw the glyph
  screen_draw_region(128-24 - 1, 64-32 - 1, 24, 32, (u8*)aleph_hebrew_glyph);
}
8001a080:	fe 7c 28 00 	mov	r12,-55296
8001a084:	fe b0 c5 64 	rcall	80012b4c <spi_unselectChip>
8001a088:	2f ed       	sub	sp,-8
8001a08a:	d8 32       	popm	r0-r7,pc
8001a08c:	80 02       	ld.sh	r2,r0[0x0]
8001a08e:	4a 04       	lddpc	r4,8001a10c <process_timers+0x34>
8001a090:	80 02       	ld.sh	r2,r0[0x0]
8001a092:	49 d0       	lddpc	r0,8001a104 <process_timers+0x2c>
8001a094:	80 02       	ld.sh	r2,r0[0x0]
8001a096:	49 ec       	lddpc	r12,8001a10c <process_timers+0x34>
8001a098:	80 02       	ld.sh	r2,r0[0x0]
8001a09a:	49 f4       	lddpc	r4,8001a114 <process_timers+0x3c>
8001a09c:	80 02       	ld.sh	r2,r0[0x0]
8001a09e:	49 fc       	lddpc	r12,8001a118 <process_timers+0x40>
8001a0a0:	80 02       	ld.sh	r2,r0[0x0]
8001a0a2:	4a 18       	lddpc	r8,8001a124 <process_timers+0x4c>
8001a0a4:	ff ff ff ff 	st.bal	pc[0x1ff],pc

8001a0a8 <process_sw>:
  kEventSwitch7,
};


// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
8001a0a8:	eb cd 40 80 	pushm	r7,lr
  static event_t e;   
  e.eventType = kSwitchEvents[swIdx];
8001a0ac:	48 98       	lddpc	r8,8001a0d0 <process_sw+0x28>
8001a0ae:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
8001a0b2:	e0 67 1c 30 	mov	r7,7216
  e.eventData = gpio_get_pin_value(kSwitchPins[swIdx]);
8001a0b6:	8f 08       	st.w	r7[0x0],r8
8001a0b8:	48 78       	lddpc	r8,8001a0d4 <process_sw+0x2c>
8001a0ba:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
8001a0be:	fe b0 c3 15 	rcall	800126e8 <gpio_get_pin_value>
  post_event(&e);
8001a0c2:	8f 1c       	st.w	r7[0x4],r12
8001a0c4:	0e 9c       	mov	r12,r7
8001a0c6:	fe b0 e9 a5 	rcall	80017410 <post_event>
}
8001a0ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8001a0ce:	d7 03       	nop
8001a0d0:	80 02       	ld.sh	r2,r0[0x0]
8001a0d2:	4d 18       	lddpc	r8,8001a214 <process_timers+0x13c>
8001a0d4:	80 02       	ld.sh	r2,r0[0x0]
8001a0d6:	4d 38       	lddpc	r8,8001a220 <process_timers+0x148>

8001a0d8 <process_timers>:


// process the list of timers.
// called from tc interrupt
/// FIXME: this is overly generalized for our purpose, i think.
void process_timers( void ) {
8001a0d8:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a0dc:	e0 67 1c 38 	mov	r7,7224
8001a0e0:	6e 06       	ld.w	r6,r7[0x0]
    if ( t == 0 ) { continue; }
8001a0e2:	58 06       	cp.w	r6,0
8001a0e4:	c0 90       	breq	8001a0f6 <process_timers+0x1e>

    if ( t->timeout > 0 ) {
8001a0e6:	6c 28       	ld.w	r8,r6[0x8]
8001a0e8:	58 08       	cp.w	r8,0
8001a0ea:	e0 8a 00 06 	brle	8001a0f6 <process_timers+0x1e>
      // time remaining, decrement tick counter
      t->timeout--;
8001a0ee:	20 18       	sub	r8,1
8001a0f0:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a0f2:	e0 80 00 89 	breq	8001a204 <process_timers+0x12c>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a0f6:	6e 16       	ld.w	r6,r7[0x4]
    if ( t == 0 ) { continue; }
8001a0f8:	58 06       	cp.w	r6,0
8001a0fa:	c0 90       	breq	8001a10c <process_timers+0x34>

    if ( t->timeout > 0 ) {
8001a0fc:	6c 28       	ld.w	r8,r6[0x8]
8001a0fe:	58 08       	cp.w	r8,0
8001a100:	e0 8a 00 06 	brle	8001a10c <process_timers+0x34>
      // time remaining, decrement tick counter
      t->timeout--;
8001a104:	20 18       	sub	r8,1
8001a106:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a108:	e0 80 00 8c 	breq	8001a220 <process_timers+0x148>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a10c:	6e 26       	ld.w	r6,r7[0x8]
    if ( t == 0 ) { continue; }
8001a10e:	58 06       	cp.w	r6,0
8001a110:	c0 90       	breq	8001a122 <process_timers+0x4a>

    if ( t->timeout > 0 ) {
8001a112:	6c 28       	ld.w	r8,r6[0x8]
8001a114:	58 08       	cp.w	r8,0
8001a116:	e0 8a 00 06 	brle	8001a122 <process_timers+0x4a>
      // time remaining, decrement tick counter
      t->timeout--;
8001a11a:	20 18       	sub	r8,1
8001a11c:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a11e:	e0 80 00 8f 	breq	8001a23c <process_timers+0x164>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a122:	6e 36       	ld.w	r6,r7[0xc]
    if ( t == 0 ) { continue; }
8001a124:	58 06       	cp.w	r6,0
8001a126:	c0 90       	breq	8001a138 <process_timers+0x60>

    if ( t->timeout > 0 ) {
8001a128:	6c 28       	ld.w	r8,r6[0x8]
8001a12a:	58 08       	cp.w	r8,0
8001a12c:	e0 8a 00 06 	brle	8001a138 <process_timers+0x60>
      // time remaining, decrement tick counter
      t->timeout--;
8001a130:	20 18       	sub	r8,1
8001a132:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a134:	e0 80 00 92 	breq	8001a258 <process_timers+0x180>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a138:	6e 46       	ld.w	r6,r7[0x10]
    if ( t == 0 ) { continue; }
8001a13a:	58 06       	cp.w	r6,0
8001a13c:	c0 90       	breq	8001a14e <process_timers+0x76>

    if ( t->timeout > 0 ) {
8001a13e:	6c 28       	ld.w	r8,r6[0x8]
8001a140:	58 08       	cp.w	r8,0
8001a142:	e0 8a 00 06 	brle	8001a14e <process_timers+0x76>
      // time remaining, decrement tick counter
      t->timeout--;
8001a146:	20 18       	sub	r8,1
8001a148:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a14a:	e0 80 00 95 	breq	8001a274 <process_timers+0x19c>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a14e:	6e 56       	ld.w	r6,r7[0x14]
    if ( t == 0 ) { continue; }
8001a150:	58 06       	cp.w	r6,0
8001a152:	c0 90       	breq	8001a164 <process_timers+0x8c>

    if ( t->timeout > 0 ) {
8001a154:	6c 28       	ld.w	r8,r6[0x8]
8001a156:	58 08       	cp.w	r8,0
8001a158:	e0 8a 00 06 	brle	8001a164 <process_timers+0x8c>
      // time remaining, decrement tick counter
      t->timeout--;
8001a15c:	20 18       	sub	r8,1
8001a15e:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a160:	e0 80 00 98 	breq	8001a290 <process_timers+0x1b8>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a164:	6e 66       	ld.w	r6,r7[0x18]
    if ( t == 0 ) { continue; }
8001a166:	58 06       	cp.w	r6,0
8001a168:	c0 90       	breq	8001a17a <process_timers+0xa2>

    if ( t->timeout > 0 ) {
8001a16a:	6c 28       	ld.w	r8,r6[0x8]
8001a16c:	58 08       	cp.w	r8,0
8001a16e:	e0 8a 00 06 	brle	8001a17a <process_timers+0xa2>
      // time remaining, decrement tick counter
      t->timeout--;
8001a172:	20 18       	sub	r8,1
8001a174:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a176:	e0 80 00 9b 	breq	8001a2ac <process_timers+0x1d4>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a17a:	6e 76       	ld.w	r6,r7[0x1c]
    if ( t == 0 ) { continue; }
8001a17c:	58 06       	cp.w	r6,0
8001a17e:	c0 90       	breq	8001a190 <process_timers+0xb8>

    if ( t->timeout > 0 ) {
8001a180:	6c 28       	ld.w	r8,r6[0x8]
8001a182:	58 08       	cp.w	r8,0
8001a184:	e0 8a 00 06 	brle	8001a190 <process_timers+0xb8>
      // time remaining, decrement tick counter
      t->timeout--;
8001a188:	20 18       	sub	r8,1
8001a18a:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a18c:	e0 80 00 9e 	breq	8001a2c8 <process_timers+0x1f0>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a190:	6e 86       	ld.w	r6,r7[0x20]
    if ( t == 0 ) { continue; }
8001a192:	58 06       	cp.w	r6,0
8001a194:	c0 90       	breq	8001a1a6 <process_timers+0xce>

    if ( t->timeout > 0 ) {
8001a196:	6c 28       	ld.w	r8,r6[0x8]
8001a198:	58 08       	cp.w	r8,0
8001a19a:	e0 8a 00 06 	brle	8001a1a6 <process_timers+0xce>
      // time remaining, decrement tick counter
      t->timeout--;
8001a19e:	20 18       	sub	r8,1
8001a1a0:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a1a2:	e0 80 00 a1 	breq	8001a2e4 <process_timers+0x20c>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a1a6:	6e 96       	ld.w	r6,r7[0x24]
    if ( t == 0 ) { continue; }
8001a1a8:	58 06       	cp.w	r6,0
8001a1aa:	c0 90       	breq	8001a1bc <process_timers+0xe4>

    if ( t->timeout > 0 ) {
8001a1ac:	6c 28       	ld.w	r8,r6[0x8]
8001a1ae:	58 08       	cp.w	r8,0
8001a1b0:	e0 8a 00 06 	brle	8001a1bc <process_timers+0xe4>
      // time remaining, decrement tick counter
      t->timeout--;
8001a1b4:	20 18       	sub	r8,1
8001a1b6:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a1b8:	e0 80 00 a4 	breq	8001a300 <process_timers+0x228>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a1bc:	6e a6       	ld.w	r6,r7[0x28]
    if ( t == 0 ) { continue; }
8001a1be:	58 06       	cp.w	r6,0
8001a1c0:	c0 90       	breq	8001a1d2 <process_timers+0xfa>

    if ( t->timeout > 0 ) {
8001a1c2:	6c 28       	ld.w	r8,r6[0x8]
8001a1c4:	58 08       	cp.w	r8,0
8001a1c6:	e0 8a 00 06 	brle	8001a1d2 <process_timers+0xfa>
      // time remaining, decrement tick counter
      t->timeout--;
8001a1ca:	20 18       	sub	r8,1
8001a1cc:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a1ce:	e0 80 00 a7 	breq	8001a31c <process_timers+0x244>
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8001a1d2:	6e b6       	ld.w	r6,r7[0x2c]
    if ( t == 0 ) { continue; }
8001a1d4:	58 06       	cp.w	r6,0
8001a1d6:	c0 80       	breq	8001a1e6 <process_timers+0x10e>

    if ( t->timeout > 0 ) {
8001a1d8:	6c 28       	ld.w	r8,r6[0x8]
8001a1da:	58 08       	cp.w	r8,0
8001a1dc:	e0 8a 00 05 	brle	8001a1e6 <process_timers+0x10e>
      // time remaining, decrement tick counter
      t->timeout--;
8001a1e0:	20 18       	sub	r8,1
8001a1e2:	8d 28       	st.w	r6[0x8],r8

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8001a1e4:	c0 30       	breq	8001a1ea <process_timers+0x112>
8001a1e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
8001a1ea:	6c 48       	ld.w	r8,r6[0x10]
8001a1ec:	58 08       	cp.w	r8,0
8001a1ee:	c0 30       	breq	8001a1f4 <process_timers+0x11c>
	  (*t->callback)( t->tag );
8001a1f0:	6c 1c       	ld.w	r12,r6[0x4]
8001a1f2:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a1f4:	6c 08       	ld.w	r8,r6[0x0]
8001a1f6:	58 08       	cp.w	r8,0
8001a1f8:	e0 80 00 a0 	breq	8001a338 <process_timers+0x260>
	  t->timeout = t->timeoutReload;
8001a1fc:	6c 38       	ld.w	r8,r6[0xc]
8001a1fe:	8d 28       	st.w	r6[0x8],r8
8001a200:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a204:	6c 48       	ld.w	r8,r6[0x10]
8001a206:	58 08       	cp.w	r8,0
8001a208:	c0 30       	breq	8001a20e <process_timers+0x136>
	  (*t->callback)( t->tag );
8001a20a:	6c 1c       	ld.w	r12,r6[0x4]
8001a20c:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a20e:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a210:	58 08       	cp.w	r8,0
8001a212:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a216:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a21a:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a21e:	c6 cb       	rjmp	8001a0f6 <process_timers+0x1e>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a220:	6c 48       	ld.w	r8,r6[0x10]
8001a222:	58 08       	cp.w	r8,0
8001a224:	c0 30       	breq	8001a22a <process_timers+0x152>
	  (*t->callback)( t->tag );
8001a226:	6c 1c       	ld.w	r12,r6[0x4]
8001a228:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a22a:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a22c:	58 08       	cp.w	r8,0
8001a22e:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a232:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a236:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a23a:	c6 9b       	rjmp	8001a10c <process_timers+0x34>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a23c:	6c 48       	ld.w	r8,r6[0x10]
8001a23e:	58 08       	cp.w	r8,0
8001a240:	c0 30       	breq	8001a246 <process_timers+0x16e>
	  (*t->callback)( t->tag );
8001a242:	6c 1c       	ld.w	r12,r6[0x4]
8001a244:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a246:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a248:	58 08       	cp.w	r8,0
8001a24a:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a24e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a252:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a256:	c6 6b       	rjmp	8001a122 <process_timers+0x4a>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a258:	6c 48       	ld.w	r8,r6[0x10]
8001a25a:	58 08       	cp.w	r8,0
8001a25c:	c0 30       	breq	8001a262 <process_timers+0x18a>
	  (*t->callback)( t->tag );
8001a25e:	6c 1c       	ld.w	r12,r6[0x4]
8001a260:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a262:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a264:	58 08       	cp.w	r8,0
8001a266:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a26a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a26e:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a272:	c6 3b       	rjmp	8001a138 <process_timers+0x60>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a274:	6c 48       	ld.w	r8,r6[0x10]
8001a276:	58 08       	cp.w	r8,0
8001a278:	c0 30       	breq	8001a27e <process_timers+0x1a6>
	  (*t->callback)( t->tag );
8001a27a:	6c 1c       	ld.w	r12,r6[0x4]
8001a27c:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a27e:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a280:	58 08       	cp.w	r8,0
8001a282:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a286:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a28a:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a28e:	c6 0b       	rjmp	8001a14e <process_timers+0x76>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a290:	6c 48       	ld.w	r8,r6[0x10]
8001a292:	58 08       	cp.w	r8,0
8001a294:	c0 30       	breq	8001a29a <process_timers+0x1c2>
	  (*t->callback)( t->tag );
8001a296:	6c 1c       	ld.w	r12,r6[0x4]
8001a298:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a29a:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a29c:	58 08       	cp.w	r8,0
8001a29e:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a2a2:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a2a6:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a2aa:	c5 db       	rjmp	8001a164 <process_timers+0x8c>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a2ac:	6c 48       	ld.w	r8,r6[0x10]
8001a2ae:	58 08       	cp.w	r8,0
8001a2b0:	c0 30       	breq	8001a2b6 <process_timers+0x1de>
	  (*t->callback)( t->tag );
8001a2b2:	6c 1c       	ld.w	r12,r6[0x4]
8001a2b4:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a2b6:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a2b8:	58 08       	cp.w	r8,0
8001a2ba:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a2be:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a2c2:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a2c6:	c5 ab       	rjmp	8001a17a <process_timers+0xa2>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a2c8:	6c 48       	ld.w	r8,r6[0x10]
8001a2ca:	58 08       	cp.w	r8,0
8001a2cc:	c0 30       	breq	8001a2d2 <process_timers+0x1fa>
	  (*t->callback)( t->tag );
8001a2ce:	6c 1c       	ld.w	r12,r6[0x4]
8001a2d0:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a2d2:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a2d4:	58 08       	cp.w	r8,0
8001a2d6:	ef f8 0a 07 	st.weq	r7[0x1c],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a2da:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a2de:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a2e2:	c5 7b       	rjmp	8001a190 <process_timers+0xb8>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a2e4:	6c 48       	ld.w	r8,r6[0x10]
8001a2e6:	58 08       	cp.w	r8,0
8001a2e8:	c0 30       	breq	8001a2ee <process_timers+0x216>
	  (*t->callback)( t->tag );
8001a2ea:	6c 1c       	ld.w	r12,r6[0x4]
8001a2ec:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a2ee:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a2f0:	58 08       	cp.w	r8,0
8001a2f2:	ef f8 0a 08 	st.weq	r7[0x20],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a2f6:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a2fa:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a2fe:	c5 4b       	rjmp	8001a1a6 <process_timers+0xce>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a300:	6c 48       	ld.w	r8,r6[0x10]
8001a302:	58 08       	cp.w	r8,0
8001a304:	c0 30       	breq	8001a30a <process_timers+0x232>
	  (*t->callback)( t->tag );
8001a306:	6c 1c       	ld.w	r12,r6[0x4]
8001a308:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a30a:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a30c:	58 08       	cp.w	r8,0
8001a30e:	ef f8 0a 09 	st.weq	r7[0x24],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a312:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a316:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a31a:	c5 1b       	rjmp	8001a1bc <process_timers+0xe4>
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8001a31c:	6c 48       	ld.w	r8,r6[0x10]
8001a31e:	58 08       	cp.w	r8,0
8001a320:	c0 30       	breq	8001a326 <process_timers+0x24e>
	  (*t->callback)( t->tag );
8001a322:	6c 1c       	ld.w	r12,r6[0x4]
8001a324:	5d 18       	icall	r8
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8001a326:	6c 08       	ld.w	r8,r6[0x0]
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a328:	58 08       	cp.w	r8,0
8001a32a:	ef f8 0a 0a 	st.weq	r7[0x28],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8001a32e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8001a332:	ed f8 1a 02 	st.wne	r6[0x8],r8
8001a336:	c4 eb       	rjmp	8001a1d2 <process_timers+0xfa>
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8001a338:	8f b8       	st.w	r7[0x2c],r8
8001a33a:	c5 6b       	rjmp	8001a1e6 <process_timers+0x10e>

8001a33c <set_timer>:
8001a33c:	eb cd 40 c0 	pushm	r6-r7,lr
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
8001a340:	58 09       	cp.w	r9,0
8001a342:	c7 e0       	breq	8001a43e <set_timer+0x102>
  int k;
  swTimer_t* t;

  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
8001a344:	d3 43       	ssrf	0x14

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a346:	e0 6e 1c 38 	mov	lr,7224
    if ( t == NULL ) {
8001a34a:	7c 07       	ld.w	r7,lr[0x0]
8001a34c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a34e:	c0 40       	breq	8001a356 <set_timer+0x1a>
8001a350:	6e 16       	ld.w	r6,r7[0x4]
8001a352:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a354:	c7 80       	breq	8001a444 <set_timer+0x108>
    if ( t == NULL ) {
8001a356:	7c 17       	ld.w	r7,lr[0x4]
8001a358:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a35a:	c0 40       	breq	8001a362 <set_timer+0x26>
8001a35c:	6e 16       	ld.w	r6,r7[0x4]
8001a35e:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a360:	c7 80       	breq	8001a450 <set_timer+0x114>
    if ( t == NULL ) {
8001a362:	7c 27       	ld.w	r7,lr[0x8]
8001a364:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a366:	c0 40       	breq	8001a36e <set_timer+0x32>
8001a368:	6e 16       	ld.w	r6,r7[0x4]
8001a36a:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a36c:	c7 60       	breq	8001a458 <set_timer+0x11c>
    if ( t == NULL ) {
8001a36e:	7c 37       	ld.w	r7,lr[0xc]
8001a370:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a372:	c0 40       	breq	8001a37a <set_timer+0x3e>
8001a374:	6e 16       	ld.w	r6,r7[0x4]
8001a376:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a378:	c7 40       	breq	8001a460 <set_timer+0x124>
    if ( t == NULL ) {
8001a37a:	7c 47       	ld.w	r7,lr[0x10]
8001a37c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a37e:	c0 40       	breq	8001a386 <set_timer+0x4a>
8001a380:	6e 16       	ld.w	r6,r7[0x4]
8001a382:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a384:	c7 20       	breq	8001a468 <set_timer+0x12c>
    if ( t == NULL ) {
8001a386:	7c 57       	ld.w	r7,lr[0x14]
8001a388:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a38a:	c0 40       	breq	8001a392 <set_timer+0x56>
8001a38c:	6e 16       	ld.w	r6,r7[0x4]
8001a38e:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a390:	c7 00       	breq	8001a470 <set_timer+0x134>
    if ( t == NULL ) {
8001a392:	7c 67       	ld.w	r7,lr[0x18]
8001a394:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a396:	c0 40       	breq	8001a39e <set_timer+0x62>
8001a398:	6e 16       	ld.w	r6,r7[0x4]
8001a39a:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a39c:	c6 e0       	breq	8001a478 <set_timer+0x13c>
    if ( t == NULL ) {
8001a39e:	7c 77       	ld.w	r7,lr[0x1c]
8001a3a0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a3a2:	c0 40       	breq	8001a3aa <set_timer+0x6e>
8001a3a4:	6e 16       	ld.w	r6,r7[0x4]
8001a3a6:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a3a8:	c6 c0       	breq	8001a480 <set_timer+0x144>
    if ( t == NULL ) {
8001a3aa:	7c 87       	ld.w	r7,lr[0x20]
8001a3ac:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a3ae:	c0 40       	breq	8001a3b6 <set_timer+0x7a>
8001a3b0:	6e 16       	ld.w	r6,r7[0x4]
8001a3b2:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a3b4:	c6 a0       	breq	8001a488 <set_timer+0x14c>
    if ( t == NULL ) {
8001a3b6:	7c 97       	ld.w	r7,lr[0x24]
8001a3b8:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a3ba:	c0 40       	breq	8001a3c2 <set_timer+0x86>
8001a3bc:	6e 16       	ld.w	r6,r7[0x4]
8001a3be:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a3c0:	c6 80       	breq	8001a490 <set_timer+0x154>
    if ( t == NULL ) {
8001a3c2:	7c a7       	ld.w	r7,lr[0x28]
8001a3c4:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a3c6:	c0 40       	breq	8001a3ce <set_timer+0x92>
8001a3c8:	6e 16       	ld.w	r6,r7[0x4]
8001a3ca:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8001a3cc:	c6 60       	breq	8001a498 <set_timer+0x15c>
    if ( t == NULL ) {
8001a3ce:	7c b7       	ld.w	r7,lr[0x2c]
8001a3d0:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8001a3d2:	c0 40       	breq	8001a3da <set_timer+0x9e>
8001a3d4:	6e 16       	ld.w	r6,r7[0x4]
8001a3d6:	0c 3b       	cp.w	r11,r6
      return t;
	//      }
    }
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8001a3d8:	c6 40       	breq	8001a4a0 <set_timer+0x164>
  // dont add if callback appears in the list
  if ( find_timer( callback, tag ) != NULL ) {
    return false;
  }

  t->callback = callback;
8001a3da:	d5 43       	csrf	0x14
  t->tag = tag;
8001a3dc:	99 49       	st.w	r12[0x10],r9
  t->timeout = ticks;
  t->fperiodic = fPeriodic;
8001a3de:	99 1b       	st.w	r12[0x4],r11
  t->timeoutReload = ticks;
8001a3e0:	99 08       	st.w	r12[0x0],r8
    return false;
  }

  t->callback = callback;
  t->tag = tag;
  t->timeout = ticks;
8001a3e2:	99 3a       	st.w	r12[0xc],r10
// Add timer to pointer array. Finds first empty slot.
static bool add_timer( swTimer_t* newTimer) {
  int k;
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
8001a3e4:	99 2a       	st.w	r12[0x8],r10
  
  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8001a3e6:	d3 43       	ssrf	0x14
8001a3e8:	e0 68 1c 38 	mov	r8,7224
8001a3ec:	7c 09       	ld.w	r9,lr[0x0]
8001a3ee:	58 09       	cp.w	r9,0
8001a3f0:	c5 d0       	breq	8001a4aa <set_timer+0x16e>
8001a3f2:	70 19       	ld.w	r9,r8[0x4]
8001a3f4:	58 09       	cp.w	r9,0
8001a3f6:	c5 f0       	breq	8001a4b4 <set_timer+0x178>
8001a3f8:	70 29       	ld.w	r9,r8[0x8]
8001a3fa:	58 09       	cp.w	r9,0
8001a3fc:	c5 e0       	breq	8001a4b8 <set_timer+0x17c>
8001a3fe:	70 39       	ld.w	r9,r8[0xc]
8001a400:	58 09       	cp.w	r9,0
8001a402:	c5 d0       	breq	8001a4bc <set_timer+0x180>
8001a404:	70 49       	ld.w	r9,r8[0x10]
8001a406:	58 09       	cp.w	r9,0
8001a408:	c5 00       	breq	8001a4a8 <set_timer+0x16c>
8001a40a:	70 59       	ld.w	r9,r8[0x14]
8001a40c:	58 09       	cp.w	r9,0
8001a40e:	c5 90       	breq	8001a4c0 <set_timer+0x184>
8001a410:	70 69       	ld.w	r9,r8[0x18]
8001a412:	58 09       	cp.w	r9,0
8001a414:	c5 80       	breq	8001a4c4 <set_timer+0x188>
8001a416:	70 79       	ld.w	r9,r8[0x1c]
8001a418:	58 09       	cp.w	r9,0
8001a41a:	c5 70       	breq	8001a4c8 <set_timer+0x18c>
8001a41c:	70 89       	ld.w	r9,r8[0x20]
8001a41e:	58 09       	cp.w	r9,0
8001a420:	c5 60       	breq	8001a4cc <set_timer+0x190>
8001a422:	70 98       	ld.w	r8,r8[0x24]
8001a424:	58 08       	cp.w	r8,0
8001a426:	c5 50       	breq	8001a4d0 <set_timer+0x194>
8001a428:	7c a8       	ld.w	r8,lr[0x28]
8001a42a:	58 08       	cp.w	r8,0
8001a42c:	c5 40       	breq	8001a4d4 <set_timer+0x198>
8001a42e:	e0 68 1c 38 	mov	r8,7224
      //      Enable_interrupt_level( TIMER_INT_LEVEL );
      return true;
    }
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8001a432:	70 b8       	ld.w	r8,r8[0x2c]
8001a434:	58 08       	cp.w	r8,0
8001a436:	c5 10       	breq	8001a4d8 <set_timer+0x19c>
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
8001a438:	d5 43       	csrf	0x14
8001a43a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
8001a43e:	12 9c       	mov	r12,r9
8001a440:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	  // tag and callback both specified and matched
	  //	  if (fReenableInterrupts)
	  //	    Enable_interrupt_level( TIMER_INT_LEVEL );
	  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8001a444:	6e 47       	ld.w	r7,r7[0x10]
8001a446:	0e 39       	cp.w	r9,r7
8001a448:	c8 71       	brne	8001a356 <set_timer+0x1a>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
8001a44a:	d5 43       	csrf	0x14
8001a44c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8001a450:	6e 47       	ld.w	r7,r7[0x10]
8001a452:	0e 39       	cp.w	r9,r7
8001a454:	c8 71       	brne	8001a362 <set_timer+0x26>
8001a456:	cf ab       	rjmp	8001a44a <set_timer+0x10e>
8001a458:	6e 47       	ld.w	r7,r7[0x10]
8001a45a:	0e 39       	cp.w	r9,r7
8001a45c:	c8 91       	brne	8001a36e <set_timer+0x32>
8001a45e:	cf 6b       	rjmp	8001a44a <set_timer+0x10e>
8001a460:	6e 47       	ld.w	r7,r7[0x10]
8001a462:	0e 39       	cp.w	r9,r7
8001a464:	c8 b1       	brne	8001a37a <set_timer+0x3e>
8001a466:	cf 2b       	rjmp	8001a44a <set_timer+0x10e>
8001a468:	6e 47       	ld.w	r7,r7[0x10]
8001a46a:	0e 39       	cp.w	r9,r7
8001a46c:	c8 d1       	brne	8001a386 <set_timer+0x4a>
8001a46e:	ce eb       	rjmp	8001a44a <set_timer+0x10e>
8001a470:	6e 47       	ld.w	r7,r7[0x10]
8001a472:	0e 39       	cp.w	r9,r7
8001a474:	c8 f1       	brne	8001a392 <set_timer+0x56>
8001a476:	ce ab       	rjmp	8001a44a <set_timer+0x10e>
8001a478:	6e 47       	ld.w	r7,r7[0x10]
8001a47a:	0e 39       	cp.w	r9,r7
8001a47c:	c9 11       	brne	8001a39e <set_timer+0x62>
8001a47e:	ce 6b       	rjmp	8001a44a <set_timer+0x10e>
8001a480:	6e 47       	ld.w	r7,r7[0x10]
8001a482:	0e 39       	cp.w	r9,r7
8001a484:	c9 31       	brne	8001a3aa <set_timer+0x6e>
8001a486:	ce 2b       	rjmp	8001a44a <set_timer+0x10e>
8001a488:	6e 47       	ld.w	r7,r7[0x10]
8001a48a:	0e 39       	cp.w	r9,r7
8001a48c:	c9 51       	brne	8001a3b6 <set_timer+0x7a>
8001a48e:	cd eb       	rjmp	8001a44a <set_timer+0x10e>
8001a490:	6e 47       	ld.w	r7,r7[0x10]
8001a492:	0e 39       	cp.w	r9,r7
8001a494:	c9 71       	brne	8001a3c2 <set_timer+0x86>
8001a496:	cd ab       	rjmp	8001a44a <set_timer+0x10e>
8001a498:	6e 47       	ld.w	r7,r7[0x10]
8001a49a:	0e 39       	cp.w	r9,r7
8001a49c:	c9 91       	brne	8001a3ce <set_timer+0x92>
8001a49e:	cd 6b       	rjmp	8001a44a <set_timer+0x10e>
8001a4a0:	6e 47       	ld.w	r7,r7[0x10]
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8001a4a2:	0e 39       	cp.w	r9,r7
      timers[k] = newTimer;
8001a4a4:	c9 b1       	brne	8001a3da <set_timer+0x9e>
8001a4a6:	cd 2b       	rjmp	8001a44a <set_timer+0x10e>
      cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8001a4a8:	30 49       	mov	r9,4
8001a4aa:	fc 09 09 2c 	st.w	lr[r9<<0x2],r12
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8001a4ae:	d5 43       	csrf	0x14
8001a4b0:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
8001a4b4:	30 19       	mov	r9,1
8001a4b6:	cf ab       	rjmp	8001a4aa <set_timer+0x16e>
8001a4b8:	30 29       	mov	r9,2
8001a4ba:	cf 8b       	rjmp	8001a4aa <set_timer+0x16e>
8001a4bc:	30 39       	mov	r9,3
8001a4be:	cf 6b       	rjmp	8001a4aa <set_timer+0x16e>
8001a4c0:	30 59       	mov	r9,5
8001a4c2:	cf 4b       	rjmp	8001a4aa <set_timer+0x16e>
8001a4c4:	30 69       	mov	r9,6
8001a4c6:	cf 2b       	rjmp	8001a4aa <set_timer+0x16e>
8001a4c8:	30 79       	mov	r9,7
8001a4ca:	cf 0b       	rjmp	8001a4aa <set_timer+0x16e>
8001a4cc:	30 89       	mov	r9,8
8001a4ce:	ce eb       	rjmp	8001a4aa <set_timer+0x16e>
8001a4d0:	30 99       	mov	r9,9
8001a4d2:	ce cb       	rjmp	8001a4aa <set_timer+0x16e>
8001a4d4:	30 a9       	mov	r9,10
8001a4d6:	ce ab       	rjmp	8001a4aa <set_timer+0x16e>
8001a4d8:	30 b9       	mov	r9,11
8001a4da:	ce 8b       	rjmp	8001a4aa <set_timer+0x16e>

8001a4dc <main>:
  } // got event
}

//int main(void) {
////main function
int main (void) {
8001a4dc:	d4 31       	pushm	r0-r7,lr
// top-level peripheral init
static void init_avr32(void) {
  volatile avr32_tc_t *tc = APP_TC;
  // clocks
  // setup clocks
  sysclk_init();
8001a4de:	fe b0 dc c5 	rcall	80015e68 <sysclk_init>

  // not sure why but when need to explictly enable clock for static mem ctlr
  sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
8001a4e2:	30 4c       	mov	r12,4
8001a4e4:	fe b0 dc 2a 	rcall	80015d38 <sysclk_enable_pbb_module>
  flashc_set_bus_freq(FCPU_HZ);
8001a4e8:	e0 6c 14 80 	mov	r12,5248
8001a4ec:	ea 1c 03 ef 	orh	r12,0x3ef
8001a4f0:	fe b0 bd e5 	rcall	800120ba <flashc_set_bus_freq>
  flashc_set_wait_state(1);
8001a4f4:	30 1c       	mov	r12,1
8001a4f6:	fe b0 bd db 	rcall	800120ac <flashc_set_wait_state>

  /// interrupts
  irq_initialize_vectors();
8001a4fa:	fe b0 c1 e3 	rcall	800128c0 <INTC_init_interrupts>
  // disable all interrupts for now
  cpu_irq_disable();
8001a4fe:	d3 03       	ssrf	0x10

  // serial usb
  init_ftdi_usart();
8001a500:	fe b0 ed 20 	rcall	80017f40 <init_ftdi_usart>
  // external sram
  smc_init(FHSB_HZ);
8001a504:	e0 6c 14 80 	mov	r12,5248
8001a508:	ea 1c 03 ef 	orh	r12,0x3ef
8001a50c:	fe b0 bd 84 	rcall	80012014 <smc_init>
  // initialize spi1: OLED, ADC, SD/MMC
  init_spi1();
8001a510:	fe b0 ec a6 	rcall	80017e5c <init_spi1>
  // initialize PDCA controller
  init_local_pdca();
8001a514:	fe b0 ec 76 	rcall	80017e00 <init_local_pdca>
  // initialize blackfin resources
  init_bfin_resources();
8001a518:	fe b0 ec 40 	rcall	80017d98 <init_bfin_resources>
  // initialize application timer
  init_tc(tc);
8001a51c:	fe 7c 38 00 	mov	r12,-51200
8001a520:	fe b0 ed 24 	rcall	80017f68 <init_tc>
  // initialize other GPIO
  init_gpio();
8001a524:	fe b0 ed 3e 	rcall	80017fa0 <init_gpio>
  // register interrupts
  register_interrupts();
8001a528:	fe b0 ed 5c 	rcall	80017fe0 <register_interrupts>
  // initialize the OLED screen
  init_oled();
8001a52c:	fe b0 f9 20 	rcall	8001976c <init_oled>

  // enable interrupts
  cpu_irq_enable();
8001a530:	d5 03       	csrf	0x10

  // usb host controller
  init_usb_host();
8001a532:	fe b0 ec 2f 	rcall	80017d90 <init_usb_host>
  // initialize usb classes
  init_monome();
8001a536:	fe b0 ef 27 	rcall	80018384 <init_monome>
  //  init_midi();
  //  init_hid();

  print_dbg("\r\n avr32 init done ");
8001a53a:	4e dc       	lddpc	r12,8001a6ec <main+0x210>
8001a53c:	fe b0 c5 30 	rcall	80012f9c <print_dbg>

  // set up avr32 hardware and peripherals
  init_avr32();

  //memory manager
  init_mem();  
8001a540:	fe b0 ee fc 	rcall	80018338 <init_mem>
  print_dbg("\r\n init_mem");
8001a544:	4e bc       	lddpc	r12,8001a6f0 <main+0x214>
8001a546:	fe b0 c5 2b 	rcall	80012f9c <print_dbg>

  // intialize the FAT filesystem
  fat_init();
8001a54a:	fe b0 e8 37 	rcall	800175b8 <fat_init>
  print_dbg("\r\n init fat");
8001a54e:	4e ac       	lddpc	r12,8001a6f4 <main+0x218>
8001a550:	fe b0 c5 26 	rcall	80012f9c <print_dbg>
}

// control / network / logic init
static void init_ctl(void) {
  // disable interrupts
  cpu_irq_disable();
8001a554:	d3 03       	ssrf	0x10

  // intialize the event queue
  init_events();
8001a556:	fe b0 e7 4b 	rcall	800173ec <init_events>
  print_dbg("\r\n init_events");
8001a55a:	4e 8c       	lddpc	r12,8001a6f8 <main+0x21c>
8001a55c:	fe b0 c5 20 	rcall	80012f9c <print_dbg>

  // intialize encoders
  init_encoders();
8001a560:	fe b0 e7 ce 	rcall	800174fc <init_encoders>
  print_dbg("\r\n init_encoders");
8001a564:	4e 6c       	lddpc	r12,8001a6fc <main+0x220>
8001a566:	fe b0 c5 1b 	rcall	80012f9c <print_dbg>

  // send ADC config
  init_adc();
8001a56a:	fe b0 e0 f1 	rcall	8001674c <init_adc>
  print_dbg("\r\n init_adc");
8001a56e:	4e 5c       	lddpc	r12,8001a700 <main+0x224>
8001a570:	fe b0 c5 16 	rcall	80012f9c <print_dbg>

  // start timers
  init_sys_timers();
8001a574:	fe b0 e1 64 	rcall	8001683c <init_sys_timers>
  init_app_timers();
8001a578:	e0 a0 24 2a 	rcall	8001edcc <init_app_timers>
  print_dbg("\r\n init_timers");
8001a57c:	4e 2c       	lddpc	r12,8001a704 <main+0x228>
8001a57e:	fe b0 c5 0f 	rcall	80012f9c <print_dbg>

  // enable interrupts
  cpu_irq_enable();
8001a582:	d5 03       	csrf	0x10
  fat_init();
  print_dbg("\r\n init fat");

  // setup control logic
  init_ctl();
  print_dbg("\r\n init ctl");
8001a584:	4e 1c       	lddpc	r12,8001a708 <main+0x22c>
8001a586:	fe b0 c5 0b 	rcall	80012f9c <print_dbg>

  // initialize the application
  app_init();
8001a58a:	e0 a0 24 17 	rcall	8001edb8 <app_init>
  print_dbg("\r\n init app");
8001a58e:	4e 0c       	lddpc	r12,8001a70c <main+0x230>
8001a590:	fe b0 c5 06 	rcall	80012f9c <print_dbg>

  // initialize flash
  firstrun = init_flash();
8001a594:	fe b0 e9 58 	rcall	80017844 <init_flash>
8001a598:	e0 66 1c 70 	mov	r6,7280
  print_dbg("r\n init flash, firstrun: ");
8001a59c:	ac 8c       	st.b	r6[0x0],r12
8001a59e:	4d dc       	lddpc	r12,8001a710 <main+0x234>
8001a5a0:	fe b0 c4 fe 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(firstrun);
8001a5a4:	0d 8c       	ld.ub	r12,r6[0x0]
8001a5a6:	fe b0 c5 01 	rcall	80012fa8 <print_dbg_ulong>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8001a5aa:	30 09       	mov	r9,0
8001a5ac:	e0 68 03 e8 	mov	r8,1000
8001a5b0:	e0 6a 05 e7 	mov	r10,1511
8001a5b4:	ea 1a 89 64 	orh	r10,0x8964
8001a5b8:	30 1b       	mov	r11,1
8001a5ba:	e0 a0 43 b2 	rcall	80022d1e <__avr32_udiv64>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001a5be:	14 97       	mov	r7,r10
8001a5c0:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001a5c4:	f2 0a 00 0a 	add	r10,r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001a5c8:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8001a5cc:	14 39       	cp.w	r9,r10
8001a5ce:	e0 88 00 8a 	brls	8001a6e2 <main+0x206>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001a5d2:	10 39       	cp.w	r9,r8
8001a5d4:	fe 98 ff fa 	brls	8001a5c8 <main+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001a5d8:	10 3a       	cp.w	r10,r8

  delay_ms(100);
  // notify 
  screen_startup();
8001a5da:	cf 72       	brcc	8001a5c8 <main+0xec>
8001a5dc:	fe b0 fb e4 	rcall	80019da4 <screen_startup>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001a5e0:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001a5e4:	f2 07 00 07 	add	r7,r9,r7
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001a5e8:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8001a5ec:	0e 39       	cp.w	r9,r7
8001a5ee:	e0 88 00 08 	brls	8001a5fe <main+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001a5f2:	10 39       	cp.w	r9,r8
8001a5f4:	e0 8b 00 08 	brhi	8001a604 <main+0x128>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001a5f8:	e1 b8 00 42 	mfsr	r8,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001a5fc:	cf 8b       	rjmp	8001a5ec <main+0x110>
8001a5fe:	10 39       	cp.w	r9,r8
8001a600:	e0 8b 00 04 	brhi	8001a608 <main+0x12c>
8001a604:	10 37       	cp.w	r7,r8

  delay_ms(100);

  print_dbg("\r\n starting event loop.\r\n");
8001a606:	cf 92       	brcc	8001a5f8 <main+0x11c>
8001a608:	4c 3c       	lddpc	r12,8001a714 <main+0x238>
8001a60a:	fe b0 c4 c9 	rcall	80012f9c <print_dbg>
8001a60e:	e0 68 03 e8 	mov	r8,1000
8001a612:	31 c7       	mov	r7,28
8001a614:	30 09       	mov	r9,0
8001a616:	e0 6a d0 e7 	mov	r10,53479
8001a61a:	ea 1a 27 56 	orh	r10,0x2756
8001a61e:	30 0b       	mov	r11,0
8001a620:	30 c0       	mov	r0,12
8001a622:	e0 a0 43 7e 	rcall	80022d1e <__avr32_udiv64>
8001a626:	e0 61 32 1c 	mov	r1,12828
  /* print_dbg("\r\n handling event, type: "); */
  /* print_dbg_hex(e.eventType); */
  /* print_dbg("\r\n , data: "); */
  /* print_dbg_hex(e.eventData); */

    if(startup) {
8001a62a:	14 92       	mov	r2,r10
8001a62c:	e0 64 1c 68 	mov	r4,7272
// app event loop
static void check_events(void) {
  static event_t e;
  u8 launch = 0;
  //  print_dbg("\r\n checking events...");
  if( get_next_event(&e) ) {
8001a630:	0e 93       	mov	r3,r7
8001a632:	30 05       	mov	r5,0
8001a634:	e0 6c 1c 68 	mov	r12,7272
  /* print_dbg("\r\n handling event, type: "); */
  /* print_dbg_hex(e.eventType); */
  /* print_dbg("\r\n , data: "); */
  /* print_dbg_hex(e.eventData); */

    if(startup) {
8001a638:	fe b0 e7 14 	rcall	80017460 <get_next_event>
8001a63c:	cf c0       	breq	8001a634 <main+0x158>
      if( e.eventType == kEventSwitch0
8001a63e:	0f 88       	ld.ub	r8,r7[0x0]
8001a640:	ea 08 18 00 	cp.b	r8,r5
8001a644:	c3 30       	breq	8001a6aa <main+0x1ce>
8001a646:	68 08       	ld.w	r8,r4[0x0]
	  || e.eventType == kEventSwitch1
	  || e.eventType == kEventSwitch2
	  || e.eventType == kEventSwitch3
	  || e.eventType == kEventSwitch4
	  ) {
	startup = 0;
8001a648:	20 d8       	sub	r8,13
	print_dbg("\r\n key pressed, launching ");
8001a64a:	58 48       	cp.w	r8,4
8001a64c:	fe 9b ff f4 	brhi	8001a634 <main+0x158>
	// return 1 if app completed firstrun tasks
	launch = app_launch(firstrun);
8001a650:	a6 85       	st.b	r3[0x0],r5
8001a652:	4b 2c       	lddpc	r12,8001a718 <main+0x23c>
8001a654:	fe b0 c4 a4 	rcall	80012f9c <print_dbg>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001a658:	0d 8c       	ld.ub	r12,r6[0x0]
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001a65a:	e0 a0 22 eb 	rcall	8001ec30 <app_launch>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001a65e:	e1 b9 00 42 	mfsr	r9,0x108
8001a662:	f2 02 00 0a 	add	r10,r9,r2
8001a666:	e1 b8 00 42 	mfsr	r8,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001a66a:	14 39       	cp.w	r9,r10
8001a66c:	e0 8b 00 14 	brhi	8001a694 <main+0x1b8>
8001a670:	12 38       	cp.w	r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001a672:	c0 83       	brcs	8001a682 <main+0x1a6>
8001a674:	14 38       	cp.w	r8,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001a676:	e0 8b 00 06 	brhi	8001a682 <main+0x1a6>
	delay_ms(10);
	if( firstrun) {
8001a67a:	e1 b8 00 42 	mfsr	r8,0x108
8001a67e:	12 38       	cp.w	r8,r9
8001a680:	cf a2       	brcc	8001a674 <main+0x198>
	  if(launch) {
8001a682:	0d 88       	ld.ub	r8,r6[0x0]
8001a684:	ea 08 18 00 	cp.b	r8,r5
	    // successfully launched on firstrun, so write magic number to flash
	    flash_write_firstrun();
8001a688:	cd 60       	breq	8001a634 <main+0x158>
8001a68a:	58 0c       	cp.w	r12,0
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001a68c:	c2 80       	breq	8001a6dc <main+0x200>
8001a68e:	fe b0 e8 55 	rcall	80017738 <flash_write_firstrun>
8001a692:	cd 1b       	rjmp	8001a634 <main+0x158>
8001a694:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001a696:	e0 88 00 04 	brls	8001a69e <main+0x1c2>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001a69a:	10 3a       	cp.w	r10,r8
8001a69c:	cf 33       	brcs	8001a682 <main+0x1a6>
8001a69e:	e1 b8 00 42 	mfsr	r8,0x108
	    flash_clear_firstrun();
	  } 
	}
      }
    } else {
      switch(e.eventType) {
8001a6a2:	10 39       	cp.w	r9,r8
8001a6a4:	fe 98 ff fd 	brls	8001a69e <main+0x1c2>
8001a6a8:	cf 9b       	rjmp	8001a69a <main+0x1be>
8001a6aa:	68 08       	ld.w	r8,r4[0x0]
8001a6ac:	58 58       	cp.w	r8,5
8001a6ae:	c1 40       	breq	8001a6d6 <main+0x1fa>
	// perform setup tasks for new ftdi device connection. 
	// won't work if called from an interrupt.
	ftdi_setup();
	break;
      default:
	(*appEventHandler)(&e);
8001a6b0:	e0 8b 00 09 	brhi	8001a6c2 <main+0x1e6>
8001a6b4:	58 48       	cp.w	r8,4
8001a6b6:	cb f0       	breq	8001a634 <main+0x158>
	    flash_clear_firstrun();
	  } 
	}
      }
    } else {
      switch(e.eventType) {
8001a6b8:	62 08       	ld.w	r8,r1[0x0]
8001a6ba:	e0 6c 1c 68 	mov	r12,7272
8001a6be:	5d 18       	icall	r8
	break;
	//--------------------------------------
      case kEventFtdiConnect:
	// perform setup tasks for new ftdi device connection. 
	// won't work if called from an interrupt.
	ftdi_setup();
8001a6c0:	cb ab       	rjmp	8001a634 <main+0x158>
8001a6c2:	58 68       	cp.w	r8,6
8001a6c4:	c0 60       	breq	8001a6d0 <main+0x1f4>
	// poll monome serial input and spawn relevant events
	monome_read_serial();
	break;
      case kEventMonomeRefresh :
	// refresh monome device from led state buffer
	monome_grid_refresh();
8001a6c6:	58 78       	cp.w	r8,7
8001a6c8:	cf 81       	brne	8001a6b8 <main+0x1dc>
8001a6ca:	e0 a0 03 03 	rcall	8001acd0 <ftdi_setup>
	// refresh the screen hardware
	//	screen_refresh();
	break;
      case kEventMonomePoll :
	// poll monome serial input and spawn relevant events
	monome_read_serial();
8001a6ce:	cb 3b       	rjmp	8001a634 <main+0x158>
8001a6d0:	fe b0 ee 6a 	rcall	800183a4 <monome_grid_refresh>
	    // successfully launched on firstrun, so write magic number to flash
	    flash_write_firstrun();
	    return;
	  } else {
	    // firstrun, but app launch failed, so clear magic number to try again
	    flash_clear_firstrun();
8001a6d4:	cb 0b       	rjmp	8001a634 <main+0x158>
8001a6d6:	60 08       	ld.w	r8,r0[0x0]
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001a6d8:	5d 18       	icall	r8
8001a6da:	ca db       	rjmp	8001a634 <main+0x158>
8001a6dc:	fe b0 e8 24 	rcall	80017724 <flash_clear_firstrun>
8001a6e0:	ca ab       	rjmp	8001a634 <main+0x158>
8001a6e2:	10 39       	cp.w	r9,r8
8001a6e4:	fe 9b ff 7c 	brhi	8001a5dc <main+0x100>
8001a6e8:	c7 8b       	rjmp	8001a5d8 <main+0xfc>
8001a6ea:	d7 03       	nop
8001a6ec:	80 02       	ld.sh	r2,r0[0x0]
8001a6ee:	4d 40       	lddpc	r0,8001a83c <uhi_hid_gamepad_install+0x60>
8001a6f0:	80 02       	ld.sh	r2,r0[0x0]
8001a6f2:	4d 54       	lddpc	r4,8001a844 <uhi_hid_gamepad_install+0x68>
8001a6f4:	80 02       	ld.sh	r2,r0[0x0]
8001a6f6:	4d 60       	lddpc	r0,8001a84c <uhi_hid_gamepad_install+0x70>
8001a6f8:	80 02       	ld.sh	r2,r0[0x0]
8001a6fa:	4d 6c       	lddpc	r12,8001a850 <uhi_hid_gamepad_install+0x74>
8001a6fc:	80 02       	ld.sh	r2,r0[0x0]
8001a6fe:	4d 7c       	lddpc	r12,8001a858 <uhi_hid_gamepad_install+0x7c>
8001a700:	80 02       	ld.sh	r2,r0[0x0]
8001a702:	4d 90       	lddpc	r0,8001a864 <uhi_hid_gamepad_install+0x88>
8001a704:	80 02       	ld.sh	r2,r0[0x0]
8001a706:	4d 9c       	lddpc	r12,8001a868 <uhi_hid_gamepad_install+0x8c>
8001a708:	80 02       	ld.sh	r2,r0[0x0]
8001a70a:	4d ac       	lddpc	r12,8001a870 <uhi_hid_gamepad_install+0x94>
8001a70c:	80 02       	ld.sh	r2,r0[0x0]
8001a70e:	4d b8       	lddpc	r8,8001a878 <uhi_hid_gamepad_install+0x9c>
8001a710:	80 02       	ld.sh	r2,r0[0x0]
8001a712:	4d c4       	lddpc	r4,8001a880 <uhi_hid_gamepad_install+0xa4>
8001a714:	80 02       	ld.sh	r2,r0[0x0]
8001a716:	4d fc       	lddpc	r12,8001a890 <uhi_hid_gamepad_install+0xb4>
8001a718:	80 02       	ld.sh	r2,r0[0x0]
8001a71a:	4d e0       	lddpc	r0,8001a890 <uhi_hid_gamepad_install+0xb4>

8001a71c <usb_mode_change>:
#include "usb.h"

// usb mode change callback
void usb_mode_change(bool b_host_mode) {
  // print_dbg("\r\n mode change (ignore) ");
}
8001a71c:	5e fc       	retal	r12

8001a71e <usb_vbus_change>:
 
// usb Vbus change callback
void usb_vbus_change(bool b_vbus_present) {
  // print_dbg("\r\n usb vbus change, new status: ");
  // print_dbg_ulong(b_vbus_present);
}
8001a71e:	5e fc       	retal	r12

8001a720 <usb_vbus_error>:

// usb vbus error callback
void usb_vbus_error(void) {
  // print_dbg("\r\n usb vbus error: ");

}
8001a720:	5e fc       	retal	r12

8001a722 <usb_connection>:
void usb_connection(uhc_device_t *dev, bool b_present) {
    // print_dbg("\r\n usb device connection: ");
    // print_dbg_hex(dev);
    // print_dbg(" , ");
    // print_dbg_ulong(b_present);
}
8001a722:	5e fc       	retal	r12

8001a724 <usb_wakeup>:

// usb wakeup callback
void usb_wakeup(void) {
    // print_dbg("\r\n usb wakeup");
}
8001a724:	5e fc       	retal	r12

8001a726 <usb_sof>:

// usb start-of-frame callback
void usb_sof(void) {
  //    // print_dbg("\r\n usb sof");
}
8001a726:	5e fc       	retal	r12

8001a728 <usb_enum>:
  // print_dbg("\r\n usb enumerated: ");
  // print_dbg_hex(dev);
  // print_dbg(" , ");
  // print_dbg_hex(status);

}
8001a728:	5e fc       	retal	r12
8001a72a:	d7 03       	nop

8001a72c <uhi_hid_gamepad_uninstall>:
  //uhi_hid_gamepad_dev.report_btn_prev = 0;
  uhi_hid_gamepad_start_trans_report(dev->address);
  UHI_HID_GAMEPAD_CHANGE(dev, true);
}

void uhi_hid_gamepad_uninstall(uhc_device_t* dev) {
8001a72c:	d4 01       	pushm	lr
  if (uhi_hid_gamepad_dev.dev != dev) {
8001a72e:	e0 68 1c 74 	mov	r8,7284
8001a732:	70 09       	ld.w	r9,r8[0x0]
8001a734:	18 39       	cp.w	r9,r12
8001a736:	c0 20       	breq	8001a73a <uhi_hid_gamepad_uninstall+0xe>
    return; // Device not enabled in this interface
  }
  uhi_hid_gamepad_dev.dev = NULL;
8001a738:	d8 02       	popm	pc
  Assert(uhi_hid_gamepad_dev.report!=NULL);
  free(uhi_hid_gamepad_dev.report);
8001a73a:	30 09       	mov	r9,0

void uhi_hid_gamepad_uninstall(uhc_device_t* dev) {
  if (uhi_hid_gamepad_dev.dev != dev) {
    return; // Device not enabled in this interface
  }
  uhi_hid_gamepad_dev.dev = NULL;
8001a73c:	70 2c       	ld.w	r12,r8[0x8]
  Assert(uhi_hid_gamepad_dev.report!=NULL);
  free(uhi_hid_gamepad_dev.report);
8001a73e:	91 09       	st.w	r8[0x0],r9
8001a740:	e0 a0 44 3e 	rcall	80022fbc <free>
8001a744:	d8 02       	popm	pc
8001a746:	d7 03       	nop

8001a748 <uhi_hid_gamepad_enable>:
8001a748:	d4 01       	pushm	lr
8001a74a:	e0 69 1c 74 	mov	r9,7284
  //////////
  ////////////


void uhi_hid_gamepad_enable(uhc_device_t* dev) {
  if (uhi_hid_gamepad_dev.dev != dev) {
8001a74e:	72 08       	ld.w	r8,r9[0x0]
8001a750:	18 38       	cp.w	r8,r12
8001a752:	c0 20       	breq	8001a756 <uhi_hid_gamepad_enable+0xe>
 *
 * \param add   USB address to use
 */
static void uhi_hid_gamepad_start_trans_report(usb_add_t add) {
  // Start transfer on interrupt endpoint IN
  uhd_ep_run(add, uhi_hid_gamepad_dev.ep_in, true, uhi_hid_gamepad_dev.report,
8001a754:	d8 02       	popm	pc
8001a756:	fe ca ff e2 	sub	r10,pc,-30
8001a75a:	13 cb       	ld.ub	r11,r9[0x4]
8001a75c:	1a da       	st.w	--sp,r10
8001a75e:	30 0a       	mov	r10,0
8001a760:	1a da       	st.w	--sp,r10
8001a762:	30 1a       	mov	r10,1
8001a764:	f1 3c 00 12 	ld.ub	r12,r8[18]
8001a768:	13 d8       	ld.ub	r8,r9[0x5]
8001a76a:	72 29       	ld.w	r9,r9[0x8]
8001a76c:	fe b0 d3 bc 	rcall	80014ee4 <uhd_ep_run>
8001a770:	2f ed       	sub	sp,-8
8001a772:	d8 02       	popm	pc

8001a774 <uhi_hid_gamepad_report_reception>:
8001a774:	eb cd 40 e0 	pushm	r5-r7,lr
8001a778:	58 0a       	cp.w	r10,0
8001a77a:	5f 18       	srne	r8

  int i;

  UNUSED(ep);

  if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
8001a77c:	58 39       	cp.w	r9,3
8001a77e:	5f 89       	srls	r9
static void uhi_hid_gamepad_report_reception(
					   usb_add_t add,
					   usb_ep_t ep,
					   uhd_trans_status_t status,
					   iram_size_t nb_transfered)
{
8001a780:	18 96       	mov	r6,r12

  int i;

  UNUSED(ep);

  if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
8001a782:	f3 e8 10 08 	or	r8,r9,r8
8001a786:	c0 30       	breq	8001a78c <uhi_hid_gamepad_report_reception+0x18>
8001a788:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    return; // HID gamepad transfer aborted
  }

  print_dbg("\r\n gamepad_report: ");
8001a78c:	49 2c       	lddpc	r12,8001a7d4 <uhi_hid_gamepad_report_reception+0x60>
8001a78e:	fe b0 c4 07 	rcall	80012f9c <print_dbg>
  for (i=0; i<uhi_hid_gamepad_dev.report_size; i++) {
8001a792:	e0 67 1c 74 	mov	r7,7284
8001a796:	0f d8       	ld.ub	r8,r7[0x5]
8001a798:	58 08       	cp.w	r8,0
8001a79a:	c0 f0       	breq	8001a7b8 <uhi_hid_gamepad_report_reception+0x44>
    print_dbg(" ");
8001a79c:	30 05       	mov	r5,0
8001a79e:	48 fc       	lddpc	r12,8001a7d8 <uhi_hid_gamepad_report_reception+0x64>
8001a7a0:	fe b0 c3 fe 	rcall	80012f9c <print_dbg>
    print_dbg_hex((unsigned long int) uhi_hid_gamepad_dev.report[i]);
8001a7a4:	6e 28       	ld.w	r8,r7[0x8]
8001a7a6:	f0 05 07 0c 	ld.ub	r12,r8[r5]
8001a7aa:	fe b0 c4 21 	rcall	80012fec <print_dbg_hex>
  if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
    return; // HID gamepad transfer aborted
  }

  print_dbg("\r\n gamepad_report: ");
  for (i=0; i<uhi_hid_gamepad_dev.report_size; i++) {
8001a7ae:	2f f5       	sub	r5,-1
8001a7b0:	0f d8       	ld.ub	r8,r7[0x5]
8001a7b2:	0a 38       	cp.w	r8,r5
8001a7b4:	fe 99 ff f5 	brgt	8001a79e <uhi_hid_gamepad_report_reception+0x2a>
 *
 * \param add   USB address to use
 */
static void uhi_hid_gamepad_start_trans_report(usb_add_t add) {
  // Start transfer on interrupt endpoint IN
  uhd_ep_run(add, uhi_hid_gamepad_dev.ep_in, true, uhi_hid_gamepad_dev.report,
8001a7b8:	fe c9 00 44 	sub	r9,pc,68
8001a7bc:	0f cb       	ld.ub	r11,r7[0x4]
8001a7be:	1a d9       	st.w	--sp,r9
8001a7c0:	30 09       	mov	r9,0
8001a7c2:	0c 9c       	mov	r12,r6
8001a7c4:	1a d9       	st.w	--sp,r9
8001a7c6:	30 1a       	mov	r10,1
8001a7c8:	6e 29       	ld.w	r9,r7[0x8]
8001a7ca:	fe b0 d3 8d 	rcall	80014ee4 <uhd_ep_run>
8001a7ce:	2f ed       	sub	sp,-8
8001a7d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001a7d4:	80 02       	ld.sh	r2,r0[0x0]
8001a7d6:	4e 18       	lddpc	r8,8001a958 <uhi_ftdi_in_run+0x18>
8001a7d8:	80 02       	ld.sh	r2,r0[0x0]
8001a7da:	56 1c       	stdsp	sp[0x184],r12

8001a7dc <uhi_hid_gamepad_install>:
8001a7dc:	d4 21       	pushm	r4-r7,lr
8001a7de:	e0 66 1c 74 	mov	r6,7284
8001a7e2:	18 95       	mov	r5,r12
8001a7e4:	6c 08       	ld.w	r8,r6[0x0]
8001a7e6:	58 08       	cp.w	r8,0
8001a7e8:	c0 30       	breq	8001a7ee <uhi_hid_gamepad_install+0x12>
8001a7ea:	30 5c       	mov	r12,5
  usb_iface_desc_t *ptr_iface;

  if (uhi_hid_gamepad_dev.dev != NULL) {
    return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  }
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
8001a7ec:	d8 22       	popm	r4-r7,pc
8001a7ee:	78 67       	ld.w	r7,r12[0x18]
8001a7f0:	0f a4       	ld.ub	r4,r7[0x2]
8001a7f2:	0f b9       	ld.ub	r9,r7[0x3]
8001a7f4:	f3 e4 10 84 	or	r4,r9,r4<<0x8
8001a7f8:	5c c4       	swap.bh	r4
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  //  return UHC_ENUM_UNSUPPORTED; // No interface supported

  while(conf_desc_lgt) {
8001a7fa:	5c 84       	casts.h	r4

  if (uhi_hid_gamepad_dev.dev != NULL) {
    return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  }
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
8001a7fc:	c6 60       	breq	8001a8c8 <uhi_hid_gamepad_install+0xec>
8001a7fe:	10 9a       	mov	r10,r8
  b_iface_supported = false;

  //  return UHC_ENUM_UNSUPPORTED; // No interface supported

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
8001a800:	c0 a8       	rjmp	8001a814 <uhi_hid_gamepad_install+0x38>
8001a802:	30 59       	mov	r9,5
8001a804:	f2 08 18 00 	cp.b	r8,r9
    default:
      // Ignore descriptor
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
8001a808:	c5 60       	breq	8001a8b4 <uhi_hid_gamepad_install+0xd8>
8001a80a:	0f 88       	ld.ub	r8,r7[0x0]
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001a80c:	10 14       	sub	r4,r8
    default:
      // Ignore descriptor
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
8001a80e:	10 07       	add	r7,r8
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  //  return UHC_ENUM_UNSUPPORTED; // No interface supported

  while(conf_desc_lgt) {
8001a810:	5c 84       	casts.h	r4
    switch (ptr_iface->bDescriptorType) {
8001a812:	c5 b0       	breq	8001a8c8 <uhi_hid_gamepad_install+0xec>
8001a814:	0f 98       	ld.ub	r8,r7[0x1]
8001a816:	30 49       	mov	r9,4
8001a818:	f2 08 18 00 	cp.b	r8,r9
    case USB_DT_INTERFACE:

      /////////////////
      ///////////////  
      //#if 1
      print_dbg("\r\n\r\n");
8001a81c:	cf 31       	brne	8001a802 <uhi_hid_gamepad_install+0x26>
8001a81e:	4b 3c       	lddpc	r12,8001a8e8 <uhi_hid_gamepad_install+0x10c>
8001a820:	fe b0 c3 be 	rcall	80012f9c <print_dbg>
      print_dbg("\r\n iface_desc -> bLength : ");
8001a824:	4b 2c       	lddpc	r12,8001a8ec <uhi_hid_gamepad_install+0x110>
8001a826:	fe b0 c3 bb 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bLength);
8001a82a:	0f 8c       	ld.ub	r12,r7[0x0]
8001a82c:	fe b0 c3 e0 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bDescriptorType : ");
8001a830:	4b 0c       	lddpc	r12,8001a8f0 <uhi_hid_gamepad_install+0x114>
8001a832:	fe b0 c3 b5 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bDescriptorType);
8001a836:	0f 9c       	ld.ub	r12,r7[0x1]
8001a838:	fe b0 c3 da 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceNumber : ");
8001a83c:	4a ec       	lddpc	r12,8001a8f4 <uhi_hid_gamepad_install+0x118>
8001a83e:	fe b0 c3 af 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceNumber);
8001a842:	0f ac       	ld.ub	r12,r7[0x2]
8001a844:	fe b0 c3 d4 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bAlternateSetting : ");
8001a848:	4a cc       	lddpc	r12,8001a8f8 <uhi_hid_gamepad_install+0x11c>
8001a84a:	fe b0 c3 a9 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bAlternateSetting);
8001a84e:	0f bc       	ld.ub	r12,r7[0x3]
8001a850:	fe b0 c3 ce 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bNumEndpoints : ");
8001a854:	4a ac       	lddpc	r12,8001a8fc <uhi_hid_gamepad_install+0x120>
8001a856:	fe b0 c3 a3 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bNumEndpoints);
8001a85a:	0f cc       	ld.ub	r12,r7[0x4]
8001a85c:	fe b0 c3 c8 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceClass : ");
8001a860:	4a 8c       	lddpc	r12,8001a900 <uhi_hid_gamepad_install+0x124>
8001a862:	fe b0 c3 9d 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceClass);
8001a866:	0f dc       	ld.ub	r12,r7[0x5]
8001a868:	fe b0 c3 c2 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceSubClass : ");
8001a86c:	4a 6c       	lddpc	r12,8001a904 <uhi_hid_gamepad_install+0x128>
8001a86e:	fe b0 c3 97 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceSubClass);
8001a872:	0f ec       	ld.ub	r12,r7[0x6]
8001a874:	fe b0 c3 bc 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceProtocol : ");
8001a878:	4a 4c       	lddpc	r12,8001a908 <uhi_hid_gamepad_install+0x12c>
8001a87a:	fe b0 c3 91 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceProtocol);
8001a87e:	0f fc       	ld.ub	r12,r7[0x7]
8001a880:	fe b0 c3 b6 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n iface_desc -> iInterface : ");
8001a884:	4a 2c       	lddpc	r12,8001a90c <uhi_hid_gamepad_install+0x130>
8001a886:	fe b0 c3 8b 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->iInterface);
8001a88a:	ef 3c 00 08 	ld.ub	r12,r7[8]
8001a88e:	fe b0 c3 af 	rcall	80012fec <print_dbg_hex>
      print_dbg("\r\n\r\n");
8001a892:	49 6c       	lddpc	r12,8001a8e8 <uhi_hid_gamepad_install+0x10c>
8001a894:	fe b0 c3 84 	rcall	80012f9c <print_dbg>
      ////////////
      /////////
      if ((ptr_iface->bInterfaceClass   == HID_CLASS)
8001a898:	0f d9       	ld.ub	r9,r7[0x5]
8001a89a:	30 38       	mov	r8,3
8001a89c:	f0 09 18 00 	cp.b	r9,r8
	Assert(false);
	return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
      }
      uhi_hid_gamepad_dev.dev = dev;
      // All endpoints of all interfaces supported allocated
      return UHC_ENUM_SUCCESS;
8001a8a0:	c0 30       	breq	8001a8a6 <uhi_hid_gamepad_install+0xca>
8001a8a2:	30 0a       	mov	r10,0
      print_dbg_hex(ptr_iface->iInterface);
      print_dbg("\r\n\r\n");
      ////////////
      /////////
      if ((ptr_iface->bInterfaceClass   == HID_CLASS)
	  && (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) {
8001a8a4:	cb 3b       	rjmp	8001a80a <uhi_hid_gamepad_install+0x2e>
8001a8a6:	0f f9       	ld.ub	r9,r7[0x7]
8001a8a8:	30 08       	mov	r8,0
8001a8aa:	f0 09 18 00 	cp.b	r9,r8
8001a8ae:	cf a1       	brne	8001a8a2 <uhi_hid_gamepad_install+0xc6>
8001a8b0:	30 1a       	mov	r10,1
      }
      break;

    case USB_DT_ENDPOINT:
      //  Allocation of the endpoint
      if (!b_iface_supported) {
8001a8b2:	ca cb       	rjmp	8001a80a <uhi_hid_gamepad_install+0x2e>
8001a8b4:	58 0a       	cp.w	r10,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
8001a8b6:	ca a0       	breq	8001a80a <uhi_hid_gamepad_install+0x2e>
8001a8b8:	0e 9b       	mov	r11,r7
8001a8ba:	eb 3c 00 12 	ld.ub	r12,r5[18]
8001a8be:	fe b0 cd a5 	rcall	80014408 <uhd_ep_alloc>
8001a8c2:	c0 41       	brne	8001a8ca <uhi_hid_gamepad_install+0xee>
8001a8c4:	30 4c       	mov	r12,4
      // Ignore descriptor
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001a8c6:	d8 22       	popm	r4-r7,pc
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
	return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
      }
      Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
      uhi_hid_gamepad_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001a8c8:	da 2a       	popm	r4-r7,pc,r12=1
8001a8ca:	0f a8       	ld.ub	r8,r7[0x2]
      uhi_hid_gamepad_dev.report_size =
8001a8cc:	ac c8       	st.b	r6[0x4],r8
8001a8ce:	0f cc       	ld.ub	r12,r7[0x4]
	le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
      uhi_hid_gamepad_dev.report = malloc(uhi_hid_gamepad_dev.report_size);
8001a8d0:	ac dc       	st.b	r6[0x5],r12
8001a8d2:	e0 a0 43 7d 	rcall	80022fcc <malloc>
      if (uhi_hid_gamepad_dev.report == NULL) {
8001a8d6:	8d 2c       	st.w	r6[0x8],r12
	Assert(false);
	return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
      }
      uhi_hid_gamepad_dev.dev = dev;
8001a8d8:	c0 60       	breq	8001a8e4 <uhi_hid_gamepad_install+0x108>
8001a8da:	e0 68 1c 74 	mov	r8,7284
      // All endpoints of all interfaces supported allocated
      return UHC_ENUM_SUCCESS;
8001a8de:	30 0c       	mov	r12,0
      Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
      uhi_hid_gamepad_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
      uhi_hid_gamepad_dev.report_size =
	le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
      uhi_hid_gamepad_dev.report = malloc(uhi_hid_gamepad_dev.report_size);
      if (uhi_hid_gamepad_dev.report == NULL) {
8001a8e0:	91 05       	st.w	r8[0x0],r5
8001a8e2:	d8 22       	popm	r4-r7,pc
8001a8e4:	30 6c       	mov	r12,6
8001a8e6:	d8 22       	popm	r4-r7,pc
8001a8e8:	80 02       	ld.sh	r2,r0[0x0]
8001a8ea:	3e a0       	mov	r0,-22
8001a8ec:	80 02       	ld.sh	r2,r0[0x0]
8001a8ee:	4e 2c       	lddpc	r12,8001aa74 <ftdi_get_strings>
8001a8f0:	80 02       	ld.sh	r2,r0[0x0]
8001a8f2:	4e 48       	lddpc	r8,8001aa80 <ftdi_get_strings+0xc>
8001a8f4:	80 02       	ld.sh	r2,r0[0x0]
8001a8f6:	4e 6c       	lddpc	r12,8001aa8c <ftdi_get_strings+0x18>
8001a8f8:	80 02       	ld.sh	r2,r0[0x0]
8001a8fa:	4e 94       	lddpc	r4,8001aa9c <ftdi_get_strings+0x28>
8001a8fc:	80 02       	ld.sh	r2,r0[0x0]
8001a8fe:	4e bc       	lddpc	r12,8001aaa8 <ftdi_get_strings+0x34>
8001a900:	80 02       	ld.sh	r2,r0[0x0]
8001a902:	4e e0       	lddpc	r0,8001aab8 <ftdi_get_strings+0x44>
8001a904:	80 02       	ld.sh	r2,r0[0x0]
8001a906:	4f 04       	lddpc	r4,8001aac4 <ftdi_get_strings+0x50>
8001a908:	80 02       	ld.sh	r2,r0[0x0]
8001a90a:	4f 2c       	lddpc	r12,8001aad0 <ftdi_get_strings+0x5c>
8001a90c:	80 02       	ld.sh	r2,r0[0x0]
8001a90e:	4f 54       	lddpc	r4,8001aae0 <ftdi_get_strings+0x6c>

8001a910 <ctl_req_end>:
		uhd_trans_status_t status,
		uint16_t payload_trans) {
  // last transfer ok?
  //  print_dbg("\r\n ctl request end, status: ");
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
8001a910:	30 09       	mov	r9,0
8001a912:	e0 68 1c 88 	mov	r8,7304
}
8001a916:	b0 89       	st.b	r8[0x0],r9
8001a918:	5e fc       	retal	r12
8001a91a:	d7 03       	nop

8001a91c <uhi_ftdi_out_run>:
		    UHI_FTDI_TIMEOUT, callback);
}

// run the output endpoint (bulk)
bool uhi_ftdi_out_run(uint8_t * buf, iram_size_t buf_size,
		      uhd_callback_trans_t callback) {
8001a91c:	d4 01       	pushm	lr
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
8001a91e:	1a da       	st.w	--sp,r10
8001a920:	16 98       	mov	r8,r11
8001a922:	18 99       	mov	r9,r12
8001a924:	e0 6a 1c 80 	mov	r10,7296
8001a928:	e0 6c 4e 20 	mov	r12,20000
8001a92c:	15 db       	ld.ub	r11,r10[0x5]
8001a92e:	74 0a       	ld.w	r10,r10[0x0]
8001a930:	1a dc       	st.w	--sp,r12
8001a932:	f5 3c 00 12 	ld.ub	r12,r10[18]
8001a936:	30 1a       	mov	r10,1
8001a938:	fe b0 d2 d6 	rcall	80014ee4 <uhd_ep_run>
		    uhi_ftdi_dev.ep_out, true, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
8001a93c:	2f ed       	sub	sp,-8
8001a93e:	d8 02       	popm	pc

8001a940 <uhi_ftdi_in_run>:
8001a940:	d4 01       	pushm	lr
8001a942:	1a da       	st.w	--sp,r10
8001a944:	16 98       	mov	r8,r11
8001a946:	18 99       	mov	r9,r12
}

// run the input endpoint (bulk)
bool uhi_ftdi_in_run(uint8_t * buf, iram_size_t buf_size,
		     uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
8001a948:	e0 6a 1c 80 	mov	r10,7296
8001a94c:	e0 6c 4e 20 	mov	r12,20000
8001a950:	15 cb       	ld.ub	r11,r10[0x4]
8001a952:	74 0a       	ld.w	r10,r10[0x0]
8001a954:	1a dc       	st.w	--sp,r12
8001a956:	f5 3c 00 12 	ld.ub	r12,r10[18]
8001a95a:	30 0a       	mov	r10,0
8001a95c:	fe b0 d2 c4 	rcall	80014ee4 <uhd_ep_run>
		    uhi_ftdi_dev.ep_in, false, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
8001a960:	2f ed       	sub	sp,-8
8001a962:	d8 02       	popm	pc

8001a964 <uhi_ftdi_uninstall>:
8001a964:	d4 01       	pushm	lr
8001a966:	e0 68 1c 80 	mov	r8,7296
8001a96a:	70 0a       	ld.w	r10,r8[0x0]

  ftdi_change(dev, true);  
}

void uhi_ftdi_uninstall(uhc_device_t* dev) {
  if (uhi_ftdi_dev.dev != dev) {
8001a96c:	18 3a       	cp.w	r10,r12
8001a96e:	c0 20       	breq	8001a972 <uhi_ftdi_uninstall+0xe>
    return; // Device not enabled in this interface
  }
  uhi_ftdi_dev.dev = NULL;
8001a970:	d8 02       	popm	pc
8001a972:	30 0b       	mov	r11,0
  Assert(uhi_ftdi_dev.report!=NULL);
  ftdi_change(dev, false);  
8001a974:	91 0b       	st.w	r8[0x0],r11
8001a976:	cc 5d       	rcall	8001ad00 <ftdi_change>
8001a978:	d8 02       	popm	pc
8001a97a:	d7 03       	nop

8001a97c <uhi_ftdi_install>:
8001a97c:	d4 31       	pushm	r0-r7,lr
8001a97e:	e0 65 1c 80 	mov	r5,7296
8001a982:	18 94       	mov	r4,r12
uhc_enum_status_t uhi_ftdi_install(uhc_device_t* dev) {
  bool b_iface_supported;
  uint16_t conf_desc_lgt, vid, pid;
  usb_iface_desc_t *ptr_iface;

  if (uhi_ftdi_dev.dev != NULL) {
8001a984:	6a 02       	ld.w	r2,r5[0x0]
8001a986:	58 02       	cp.w	r2,0
8001a988:	c0 30       	breq	8001a98e <uhi_ftdi_install+0x12>
8001a98a:	30 5c       	mov	r12,5
    return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  }

  // check vid/pid
  vid = le16_to_cpu(dev->dev_desc.idVendor);
8001a98c:	d8 32       	popm	r0-r7,pc
8001a98e:	98 48       	ld.sh	r8,r12[0x8]
8001a990:	10 9b       	mov	r11,r8
  pid = le16_to_cpu(dev->dev_desc.idProduct);
8001a992:	5c cb       	swap.bh	r11
8001a994:	98 58       	ld.sh	r8,r12[0xa]

  if( (vid == FTDI_VID) && (pid == FTDI_PID) ) {
8001a996:	5c c8       	swap.bh	r8
8001a998:	e0 69 60 01 	mov	r9,24577
8001a99c:	e0 6a 04 03 	mov	r10,1027
8001a9a0:	f2 08 19 00 	cp.h	r8,r9
8001a9a4:	5f 09       	sreq	r9
8001a9a6:	f4 0b 19 00 	cp.h	r11,r10
8001a9aa:	5f 08       	sreq	r8
8001a9ac:	10 69       	and	r9,r8
8001a9ae:	e4 09 18 00 	cp.b	r9,r2
  }

  if (b_iface_supported) {
    uhi_ftdi_dev.dev = dev;
    print_dbg("\r\n completed FTDI device install");
    return UHC_ENUM_SUCCESS;
8001a9b2:	c0 21       	brne	8001a9b6 <uhi_ftdi_install+0x3a>
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
8001a9b4:	da 3a       	popm	r0-r7,pc,r12=1
8001a9b6:	78 67       	ld.w	r7,r12[0x18]
8001a9b8:	0f a6       	ld.ub	r6,r7[0x2]
8001a9ba:	0f b8       	ld.ub	r8,r7[0x3]
8001a9bc:	f1 e6 10 86 	or	r6,r8,r6<<0x8
8001a9c0:	5c c6       	swap.bh	r6
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
8001a9c2:	5c 86       	casts.h	r6
    switch (ptr_iface->bDescriptorType) {
8001a9c4:	cf 80       	breq	8001a9b4 <uhi_ftdi_install+0x38>

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
8001a9c6:	30 43       	mov	r3,4
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
8001a9c8:	3f f0       	mov	r0,-1
8001a9ca:	30 51       	mov	r1,5
8001a9cc:	c0 c8       	rjmp	8001a9e4 <uhi_ftdi_install+0x68>
8001a9ce:	e2 08 18 00 	cp.b	r8,r1
	print_dbg("\r\n unhandled endpoint in ftdi device enumeration");
	break;
      }
      break;
    default:
      print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
8001a9d2:	c1 f0       	breq	8001aa10 <uhi_ftdi_install+0x94>
8001a9d4:	4a 3c       	lddpc	r12,8001aa60 <uhi_ftdi_install+0xe4>
8001a9d6:	fe b0 c2 e3 	rcall	80012f9c <print_dbg>
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
8001a9da:	0f 88       	ld.ub	r8,r7[0x0]
8001a9dc:	10 16       	sub	r6,r8

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
8001a9de:	5c 86       	casts.h	r6
      print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001a9e0:	c3 20       	breq	8001aa44 <uhi_ftdi_install+0xc8>
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
8001a9e2:	10 07       	add	r7,r8
8001a9e4:	0f 98       	ld.ub	r8,r7[0x1]
8001a9e6:	e6 08 18 00 	cp.b	r8,r3

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
8001a9ea:	cf 21       	brne	8001a9ce <uhi_ftdi_install+0x52>
8001a9ec:	0f d8       	ld.ub	r8,r7[0x5]
8001a9ee:	e0 08 18 00 	cp.b	r8,r0
	print_dbg("\r\n unhandled endpoint in ftdi device enumeration");
	break;
      }
      break;
    default:
      print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
8001a9f2:	c0 30       	breq	8001a9f8 <uhi_ftdi_install+0x7c>
8001a9f4:	30 02       	mov	r2,0
  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
8001a9f6:	cf 2b       	rjmp	8001a9da <uhi_ftdi_install+0x5e>
8001a9f8:	0f f8       	ld.ub	r8,r7[0x7]
8001a9fa:	e0 08 18 00 	cp.b	r8,r0
	print_dbg("\r\n class/protocol matches FTDI. ");
8001a9fe:	cf b1       	brne	8001a9f4 <uhi_ftdi_install+0x78>
8001aa00:	49 9c       	lddpc	r12,8001aa64 <uhi_ftdi_install+0xe8>
8001aa02:	fe b0 c2 cd 	rcall	80012f9c <print_dbg>
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
	uhi_ftdi_dev.ep_out = 0;
8001aa06:	30 09       	mov	r9,0
    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
	print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
8001aa08:	30 12       	mov	r2,1
	uhi_ftdi_dev.ep_out = 0;
8001aa0a:	aa c9       	st.b	r5[0x4],r9

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
8001aa0c:	aa d9       	st.b	r5[0x5],r9
	b_iface_supported = false;
      }
      break;

    case USB_DT_ENDPOINT:
      if (!b_iface_supported) {
8001aa0e:	ce 6b       	rjmp	8001a9da <uhi_ftdi_install+0x5e>
8001aa10:	58 02       	cp.w	r2,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
8001aa12:	ce 40       	breq	8001a9da <uhi_ftdi_install+0x5e>
8001aa14:	0e 9b       	mov	r11,r7
8001aa16:	e9 3c 00 12 	ld.ub	r12,r4[18]
8001aa1a:	fe b0 cc f7 	rcall	80014408 <uhd_ep_alloc>
	print_dbg("\r\n endpoint allocation failed");
	return UHC_ENUM_HARDWARE_LIMIT;
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
8001aa1e:	c1 b0       	breq	8001aa54 <uhi_ftdi_install+0xd8>
8001aa20:	0f b8       	ld.ub	r8,r7[0x3]
8001aa22:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001aa26:	58 28       	cp.w	r8,2
	} else {
	  uhi_ftdi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
	}
	break;
      default:
	print_dbg("\r\n unhandled endpoint in ftdi device enumeration");
8001aa28:	c0 50       	breq	8001aa32 <uhi_ftdi_install+0xb6>
8001aa2a:	49 0c       	lddpc	r12,8001aa68 <uhi_ftdi_install+0xec>
8001aa2c:	fe b0 c2 b8 	rcall	80012f9c <print_dbg>
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
      case USB_EP_TYPE_BULK:
	//	print_dbg("\r\n allocating bulk endpoint: ");
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
8001aa30:	cd 5b       	rjmp	8001a9da <uhi_ftdi_install+0x5e>
8001aa32:	0f a8       	ld.ub	r8,r7[0x2]
	  uhi_ftdi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001aa34:	30 09       	mov	r9,0
8001aa36:	f2 08 18 00 	cp.b	r8,r9
8001aa3a:	eb f8 5e 04 	st.blt	r5[0x4],r8
	} else {
	  uhi_ftdi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001aa3e:	eb f8 4e 05 	st.bge	r5[0x5],r8
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (b_iface_supported) {
8001aa42:	cc cb       	rjmp	8001a9da <uhi_ftdi_install+0x5e>
8001aa44:	58 02       	cp.w	r2,0
    uhi_ftdi_dev.dev = dev;
    print_dbg("\r\n completed FTDI device install");
8001aa46:	cb 70       	breq	8001a9b4 <uhi_ftdi_install+0x38>
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (b_iface_supported) {
    uhi_ftdi_dev.dev = dev;
8001aa48:	48 9c       	lddpc	r12,8001aa6c <uhi_ftdi_install+0xf0>
    print_dbg("\r\n completed FTDI device install");
8001aa4a:	8b 04       	st.w	r5[0x0],r4
8001aa4c:	fe b0 c2 a8 	rcall	80012f9c <print_dbg>
    return UHC_ENUM_SUCCESS;
8001aa50:	0c 9c       	mov	r12,r6
    case USB_DT_ENDPOINT:
      if (!b_iface_supported) {
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
	print_dbg("\r\n endpoint allocation failed");
8001aa52:	d8 32       	popm	r0-r7,pc
8001aa54:	48 7c       	lddpc	r12,8001aa70 <uhi_ftdi_install+0xf4>
8001aa56:	fe b0 c2 a3 	rcall	80012f9c <print_dbg>
	return UHC_ENUM_HARDWARE_LIMIT;
8001aa5a:	30 4c       	mov	r12,4
8001aa5c:	d8 32       	popm	r0-r7,pc
8001aa5e:	d7 03       	nop
8001aa60:	80 02       	ld.sh	r2,r0[0x0]
8001aa62:	4f ec       	lddpc	r12,8001ac58 <uhi_ftdi_enable+0xd4>
8001aa64:	80 02       	ld.sh	r2,r0[0x0]
8001aa66:	4f 74       	lddpc	r4,8001ac40 <uhi_ftdi_enable+0xbc>
8001aa68:	80 02       	ld.sh	r2,r0[0x0]
8001aa6a:	4f b8       	lddpc	r8,8001ac54 <uhi_ftdi_enable+0xd0>
8001aa6c:	80 02       	ld.sh	r2,r0[0x0]
8001aa6e:	50 20       	stdsp	sp[0x8],r0
8001aa70:	80 02       	ld.sh	r2,r0[0x0]
8001aa72:	4f 98       	lddpc	r8,8001ac54 <uhi_ftdi_enable+0xd0>

8001aa74 <ftdi_get_strings>:
8001aa74:	d4 31       	pushm	r0-r7,lr
8001aa76:	20 3d       	sub	sp,12
8001aa78:	30 18       	mov	r8,1
8001aa7a:	50 0a       	stdsp	sp[0x0],r10

// read eeprom
void ftdi_get_strings(char** pManufacturer, char** pProduct, char** pSerial) {

  // get manufacturer string
  ctlReadBusy = 1;
8001aa7c:	e0 67 1c 88 	mov	r7,7304
8001aa80:	e0 66 1c 80 	mov	r6,7296
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
8001aa84:	ae 88       	st.b	r7[0x0],r8
8001aa86:	6c 09       	ld.w	r9,r6[0x0]
8001aa88:	f3 38 00 0e 	ld.ub	r8,r9[14]
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001aa8c:	e8 18 03 00 	orl	r8,0x300
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
8001aa90:	38 0a       	mov	r10,-128
8001aa92:	ba 38       	st.h	sp[0x6],r8
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001aa94:	e0 68 04 09 	mov	r8,1033
  req.bRequest = reqnum;
8001aa98:	ba ca       	st.b	sp[0x4],r10
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
8001aa9a:	ba 48       	st.h	sp[0x8],r8
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
8001aa9c:	30 6a       	mov	r10,6
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
8001aa9e:	34 08       	mov	r8,64
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001aaa0:	ba da       	st.b	sp[0x5],r10
8001aaa2:	ba 58       	st.h	sp[0xa],r8
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
}

// read eeprom
void ftdi_get_strings(char** pManufacturer, char** pProduct, char** pSerial) {
8001aaa4:	fa c5 ff fc 	sub	r5,sp,-4
  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001aaa8:	18 91       	mov	r1,r12
8001aaaa:	16 90       	mov	r0,r11
8001aaac:	e0 63 32 20 	mov	r3,12832
8001aab0:	fe c4 01 a0 	sub	r4,pc,416
8001aab4:	30 08       	mov	r8,0
8001aab6:	1a d4       	st.w	--sp,r4
8001aab8:	06 9a       	mov	r10,r3
8001aaba:	f3 3c 00 12 	ld.ub	r12,r9[18]

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
8001aabe:	0a 9b       	mov	r11,r5
8001aac0:	34 09       	mov	r9,64
8001aac2:	fe b0 cf 99 	rcall	800149f4 <uhd_setup_request>
       )) {
    print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
8001aac6:	2f fd       	sub	sp,-4
8001aac8:	58 0c       	cp.w	r12,0

  // get product string
  ctlReadBusy = 1;
8001aaca:	c5 50       	breq	8001ab74 <ftdi_get_strings+0x100>
			/* size */
			FTDI_STRING_MAX_LEN,
			/*idx*/
			FTDI_STRING_DESC_LANGID,
			/*val*/
			(USB_DT_STRING << 8) | uhi_ftdi_dev.dev->dev_desc.iProduct,
8001aacc:	0f 88       	ld.ub	r8,r7[0x0]
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 

  // get product string
  ctlReadBusy = 1;
8001aace:	58 08       	cp.w	r8,0
8001aad0:	cf e1       	brne	8001aacc <ftdi_get_strings+0x58>
  //  print_dbg("\r\n sending ctl request for product string, index : ");
  //  print_dbg_ulong( uhi_ftdi_dev.dev->dev_desc.iProduct);
  if(!(send_ctl_request(
8001aad2:	e0 69 1c 88 	mov	r9,7304
8001aad6:	6c 0a       	ld.w	r10,r6[0x0]
8001aad8:	30 1b       	mov	r11,1
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
8001aada:	b2 8b       	st.b	r9[0x0],r11
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
8001aadc:	f5 39 00 0f 	ld.ub	r9,r10[15]
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001aae0:	e8 19 03 00 	orl	r9,0x300
  req.bRequest = reqnum;
8001aae4:	ba 39       	st.h	sp[0x6],r9
8001aae6:	30 69       	mov	r9,6
  req.wValue = (val);
  req.wIndex = (index);
8001aae8:	38 0b       	mov	r11,-128
8001aaea:	ba cb       	st.b	sp[0x4],r11
8001aaec:	1a d4       	st.w	--sp,r4
  req.wLength = (size);
8001aaee:	fb 69 00 09 	st.b	sp[9],r9
8001aaf2:	e0 69 04 09 	mov	r9,1033
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001aaf6:	ba 69       	st.h	sp[0xc],r9
8001aaf8:	34 09       	mov	r9,64
8001aafa:	e0 62 32 a0 	mov	r2,12960
8001aafe:	ba 79       	st.h	sp[0xe],r9
8001ab00:	0a 9b       	mov	r11,r5

  // get product string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for product string, index : ");
  //  print_dbg_ulong( uhi_ftdi_dev.dev->dev_desc.iProduct);
  if(!(send_ctl_request(
8001ab02:	f5 3c 00 12 	ld.ub	r12,r10[18]
8001ab06:	34 09       	mov	r9,64
       )) {
    print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
8001ab08:	04 9a       	mov	r10,r2
8001ab0a:	fe b0 cf 75 	rcall	800149f4 <uhd_setup_request>

  // get serial string
  ctlReadBusy = 1;
8001ab0e:	2f fd       	sub	sp,-4
			/* size */
			FTDI_STRING_MAX_LEN,
			/*idx*/
			FTDI_STRING_DESC_LANGID,
			/*val*/
			(USB_DT_STRING << 8) | uhi_ftdi_dev.dev->dev_desc.iSerialNumber,
8001ab10:	58 0c       	cp.w	r12,0
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 

  // get serial string
  ctlReadBusy = 1;
8001ab12:	c3 10       	breq	8001ab74 <ftdi_get_strings+0x100>
8001ab14:	0f 88       	ld.ub	r8,r7[0x0]
  // print_dbg("\r\n sending ctl request for serial string : ");
  if(!(send_ctl_request(
8001ab16:	58 08       	cp.w	r8,0
8001ab18:	cf e1       	brne	8001ab14 <ftdi_get_strings+0xa0>
8001ab1a:	e0 69 1c 88 	mov	r9,7304
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001ab1e:	6c 0a       	ld.w	r10,r6[0x0]
8001ab20:	30 1c       	mov	r12,1
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001ab22:	b2 8c       	st.b	r9[0x0],r12
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
8001ab24:	f5 39 00 10 	ld.ub	r9,r10[16]
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
8001ab28:	e8 19 03 00 	orl	r9,0x300
  req.wValue = (val);
  req.wIndex = (index);
8001ab2c:	38 0c       	mov	r12,-128
8001ab2e:	ba cc       	st.b	sp[0x4],r12
8001ab30:	1a d4       	st.w	--sp,r4
  req.wLength = (size);
8001ab32:	ba 59       	st.h	sp[0xa],r9
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001ab34:	30 69       	mov	r9,6

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
8001ab36:	fb 69 00 09 	st.b	sp[9],r9
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001ab3a:	e0 69 04 09 	mov	r9,1033
8001ab3e:	ba 69       	st.h	sp[0xc],r9
8001ab40:	34 09       	mov	r9,64
8001ab42:	0a 9b       	mov	r11,r5
8001ab44:	ba 79       	st.h	sp[0xe],r9
  while(ctlReadBusy) { ;; } 

  // get serial string
  ctlReadBusy = 1;
  // print_dbg("\r\n sending ctl request for serial string : ");
  if(!(send_ctl_request(
8001ab46:	e0 66 32 60 	mov	r6,12896
8001ab4a:	f5 3c 00 12 	ld.ub	r12,r10[18]
       )) {
    print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; }
8001ab4e:	34 09       	mov	r9,64
8001ab50:	0c 9a       	mov	r10,r6
  //  print_dbg("\r\n requested all string descriptors.");
  *pManufacturer = manufacturer_string + FTDI_STRING_DESC_OFFSET;
8001ab52:	fe b0 cf 51 	rcall	800149f4 <uhd_setup_request>
  *pProduct = product_string + FTDI_STRING_DESC_OFFSET;
8001ab56:	2f fd       	sub	sp,-4
8001ab58:	58 0c       	cp.w	r12,0
  *pSerial = serial_string + FTDI_STRING_DESC_OFFSET;
8001ab5a:	c0 d0       	breq	8001ab74 <ftdi_get_strings+0x100>
8001ab5c:	0f 88       	ld.ub	r8,r7[0x0]
8001ab5e:	58 08       	cp.w	r8,0
  
}
8001ab60:	cf e1       	brne	8001ab5c <ftdi_get_strings+0xe8>
8001ab62:	2f e3       	sub	r3,-2
			(USB_DT_STRING << 8) | uhi_ftdi_dev.dev->dev_desc.iSerialNumber,
			// end-transfer callback
			&ctl_req_end )
       
       )) {
    print_dbg("\r\n control request for string descriptor failed");
8001ab64:	83 03       	st.w	r1[0x0],r3
8001ab66:	2f e2       	sub	r2,-2
8001ab68:	81 02       	st.w	r0[0x0],r2
  //  print_dbg("\r\n requested all string descriptors.");
  *pManufacturer = manufacturer_string + FTDI_STRING_DESC_OFFSET;
  *pProduct = product_string + FTDI_STRING_DESC_OFFSET;
  *pSerial = serial_string + FTDI_STRING_DESC_OFFSET;
  
}
8001ab6a:	2f e6       	sub	r6,-2
8001ab6c:	40 08       	lddsp	r8,sp[0x0]
8001ab6e:	91 06       	st.w	r8[0x0],r6
8001ab70:	2f dd       	sub	sp,-12
8001ab72:	d8 32       	popm	r0-r7,pc
8001ab74:	48 3c       	lddpc	r12,8001ab80 <ftdi_get_strings+0x10c>
8001ab76:	fe b0 c2 13 	rcall	80012f9c <print_dbg>
8001ab7a:	2f dd       	sub	sp,-12
8001ab7c:	d8 32       	popm	r0-r7,pc
8001ab7e:	d7 03       	nop
8001ab80:	80 02       	ld.sh	r2,r0[0x0]
8001ab82:	50 44       	stdsp	sp[0x10],r4

8001ab84 <uhi_ftdi_enable>:
8001ab84:	eb cd 40 fe 	pushm	r1-r7,lr
8001ab88:	20 2d       	sub	sp,8
8001ab8a:	e0 66 1c 80 	mov	r6,7296
8001ab8e:	6c 07       	ld.w	r7,r6[0x0]
8001ab90:	18 37       	cp.w	r7,r12
8001ab92:	c0 40       	breq	8001ab9a <uhi_ftdi_enable+0x16>
		   NULL);

  delay_ms(200);

  ftdi_change(dev, true);  
}
8001ab94:	2f ed       	sub	sp,-8
8001ab96:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001ab9a:	30 bc       	mov	r12,11
8001ab9c:	30 05       	mov	r5,0
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
8001ab9e:	1a d5       	st.w	--sp,r5
  req.wValue = (val);
8001aba0:	ba dc       	st.b	sp[0x5],r12
8001aba2:	e0 6c 00 ff 	mov	r12,255
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001aba6:	fa c2 ff fc 	sub	r2,sp,-4
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001abaa:	ba 3c       	st.h	sp[0x6],r12
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
8001abac:	34 04       	mov	r4,64
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001abae:	30 03       	mov	r3,0
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
8001abb0:	ba c4       	st.b	sp[0x4],r4
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
8001abb2:	ba 53       	st.h	sp[0xa],r3
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001abb4:	30 11       	mov	r1,1
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
8001abb6:	0a 98       	mov	r8,r5
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001abb8:	ba 41       	st.h	sp[0x8],r1
8001abba:	0a 99       	mov	r9,r5
8001abbc:	0a 9a       	mov	r10,r5
8001abbe:	04 9b       	mov	r11,r2
8001abc0:	ef 3c 00 12 	ld.ub	r12,r7[18]
8001abc4:	fe b0 cf 18 	rcall	800149f4 <uhd_setup_request>
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
8001abc8:	30 4c       	mov	r12,4
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001abca:	ba 41       	st.h	sp[0x8],r1
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
8001abcc:	1a d5       	st.w	--sp,r5
8001abce:	fb 6c 00 09 	st.b	sp[9],r12
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001abd2:	30 8c       	mov	r12,8
8001abd4:	fb 64 00 08 	st.b	sp[8],r4
  req.bRequest = reqnum;
  req.wValue = (val);
8001abd8:	ba 75       	st.h	sp[0xe],r5
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001abda:	ba 5c       	st.h	sp[0xa],r12
8001abdc:	6c 01       	ld.w	r1,r6[0x0]
8001abde:	0a 98       	mov	r8,r5
8001abe0:	0a 99       	mov	r9,r5
8001abe2:	0a 9a       	mov	r10,r5
8001abe4:	04 9b       	mov	r11,r2
8001abe6:	e3 3c 00 12 	ld.ub	r12,r1[18]
8001abea:	fe b0 cf 05 	rcall	800149f4 <uhd_setup_request>
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8001abee:	30 3c       	mov	r12,3
8001abf0:	fb 64 00 08 	st.b	sp[8],r4
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001abf4:	ba 73       	st.h	sp[0xe],r3
8001abf6:	6c 09       	ld.w	r9,r6[0x0]
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
8001abf8:	1a d5       	st.w	--sp,r5
8001abfa:	fb 6c 00 0d 	st.b	sp[13],r12
  req.wValue = (val);
8001abfe:	fe 7c c0 36 	mov	r12,-16330
  req.wIndex = (index);
8001ac02:	0a 98       	mov	r8,r5
8001ac04:	fb 53 00 10 	st.h	sp[16],r3
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001ac08:	04 9b       	mov	r11,r2
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
8001ac0a:	0a 9a       	mov	r10,r5
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(uhi_ftdi_dev.dev->address,
8001ac0c:	ba 7c       	st.h	sp[0xe],r12
8001ac0e:	f3 3c 00 12 	ld.ub	r12,r9[18]
8001ac12:	0a 99       	mov	r9,r5
8001ac14:	fe b0 ce f0 	rcall	800149f4 <uhd_setup_request>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8001ac18:	30 09       	mov	r9,0
8001ac1a:	e0 68 03 e8 	mov	r8,1000
8001ac1e:	e0 6a 07 e7 	mov	r10,2023
8001ac22:	ea 1a 12 c8 	orh	r10,0x12c8
8001ac26:	30 3b       	mov	r11,3
8001ac28:	e0 a0 40 7b 	rcall	80022d1e <__avr32_udiv64>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001ac2c:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001ac30:	f2 0a 00 0a 	add	r10,r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ac34:	e1 b8 00 42 	mfsr	r8,0x108
8001ac38:	2f dd       	sub	sp,-12
8001ac3a:	14 39       	cp.w	r9,r10
8001ac3c:	e0 8b 00 0f 	brhi	8001ac5a <uhi_ftdi_enable+0xd6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001ac40:	10 39       	cp.w	r9,r8
8001ac42:	e0 8b 00 04 	brhi	8001ac4a <uhi_ftdi_enable+0xc6>
8001ac46:	10 3a       	cp.w	r10,r8
		   0, 49206,
		   NULL);

  delay_ms(200);

  ftdi_change(dev, true);  
8001ac48:	c0 f2       	brcc	8001ac66 <uhi_ftdi_enable+0xe2>
8001ac4a:	0e 9c       	mov	r12,r7
8001ac4c:	30 1b       	mov	r11,1
8001ac4e:	c5 9c       	rcall	8001ad00 <ftdi_change>
}
8001ac50:	2f ed       	sub	sp,-8
8001ac52:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ac56:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001ac5a:	10 39       	cp.w	r9,r8
8001ac5c:	fe 98 ff fd 	brls	8001ac56 <uhi_ftdi_enable+0xd2>
8001ac60:	10 3a       	cp.w	r10,r8
8001ac62:	cf a2       	brcc	8001ac56 <uhi_ftdi_enable+0xd2>
8001ac64:	cf 3b       	rjmp	8001ac4a <uhi_ftdi_enable+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ac66:	e1 b8 00 42 	mfsr	r8,0x108
8001ac6a:	ce bb       	rjmp	8001ac40 <uhi_ftdi_enable+0xbc>

8001ac6c <ftdi_rx_done>:
//------- static functions

static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
8001ac6c:	d4 01       	pushm	lr
  status = stat;
8001ac6e:	e0 68 1c dc 	mov	r8,7388
  rxBusy = 0;
8001ac72:	91 0a       	st.w	r8[0x0],r10
  rxBytes = nb - FTDI_STATUS_BYTES;
8001ac74:	e0 68 1c cc 	mov	r8,7372
static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
  status = stat;
  rxBusy = 0;
8001ac78:	20 29       	sub	r9,2
  rxBytes = nb - FTDI_STATUS_BYTES;
8001ac7a:	30 0a       	mov	r10,0
8001ac7c:	b0 8a       	st.b	r8[0x0],r10
  /* print_dbg_ulong(nb); */
  /* print_dbg(" ; status bytes: 0x"); */
  /* print_dbg_hex(rxBuf[0]); */
  /* print_dbg(" 0x"); */
  /* print_dbg_hex(rxBuf[1]); */			    
  if(rxBytes) {
8001ac7e:	e0 68 1c d0 	mov	r8,7376
    // check for monome events
    //    if(monome_read_serial != NULL) { 
      (*monome_read_serial)(); 
8001ac82:	91 09       	st.w	r8[0x0],r9
8001ac84:	58 09       	cp.w	r9,0
8001ac86:	c0 40       	breq	8001ac8e <ftdi_rx_done+0x22>
8001ac88:	30 c8       	mov	r8,12
8001ac8a:	70 08       	ld.w	r8,r8[0x0]
8001ac8c:	5d 18       	icall	r8
8001ac8e:	d8 02       	popm	pc

8001ac90 <ftdi_rx_buf>:
8001ac90:	e0 6c 1c 8c 	mov	r12,7308
8001ac94:	2f ec       	sub	r12,-2
8001ac96:	5e fc       	retal	r12

8001ac98 <ftdi_rx_bytes>:
8001ac98:	e0 68 1c d0 	mov	r8,7376
}

// number of bytes from last rx trasnfer
extern volatile u8 ftdi_rx_bytes() {
  return rxBytes;
}
8001ac9c:	11 bc       	ld.ub	r12,r8[0x3]
8001ac9e:	5e fc       	retal	r12

8001aca0 <ftdi_rx_busy>:
8001aca0:	e0 68 1c cc 	mov	r8,7372

// busy flags
extern volatile u8 ftdi_rx_busy() {
  return rxBusy;
}
8001aca4:	11 8c       	ld.ub	r12,r8[0x0]
8001aca6:	5e fc       	retal	r12

8001aca8 <ftdi_tx_busy>:
8001aca8:	e0 68 1c 89 	mov	r8,7305

extern volatile u8 ftdi_tx_busy() {
  return txBusy;
}
8001acac:	11 8c       	ld.ub	r12,r8[0x0]
8001acae:	5e fc       	retal	r12

8001acb0 <ftdi_tx_done>:
8001acb0:	d4 01       	pushm	lr
8001acb2:	e0 68 1c dc 	mov	r8,7388
static void ftdi_tx_done(
			       usb_add_t add,
			       usb_ep_t ep,
			       uhd_trans_status_t stat,
			       iram_size_t nb) {
  status = stat;
8001acb6:	30 09       	mov	r9,0
  txBusy = 0;
8001acb8:	91 0a       	st.w	r8[0x0],r10
8001acba:	e0 68 1c 89 	mov	r8,7305
  /* print_dbg("\r\n ftdi tx transfer callback. status: 0x"); */
  /* print_dbg_hex((u32)status); */
  if (status != UHD_TRANS_NOERROR) {
8001acbe:	b0 89       	st.b	r8[0x0],r9
    print_dbg("\r\n ftdi tx error");
8001acc0:	58 0a       	cp.w	r10,0
8001acc2:	c0 40       	breq	8001acca <ftdi_tx_done+0x1a>
8001acc4:	48 2c       	lddpc	r12,8001accc <ftdi_tx_done+0x1c>
8001acc6:	fe b0 c1 6b 	rcall	80012f9c <print_dbg>
8001acca:	d8 02       	popm	pc
8001accc:	80 02       	ld.sh	r2,r0[0x0]
8001acce:	50 74       	stdsp	sp[0x1c],r4

8001acd0 <ftdi_setup>:
8001acd0:	d4 01       	pushm	lr
8001acd2:	20 3d       	sub	sp,12
8001acd4:	48 ac       	lddpc	r12,8001acfc <ftdi_setup+0x2c>
8001acd6:	fe b0 c1 63 	rcall	80012f9c <print_dbg>
  char * prodstr;
  char * serstr;
  print_dbg("\r\n FTDI setup routine");

  // get string data...
  ftdi_get_strings(&manstr, &prodstr, &serstr);  
8001acda:	1a 9a       	mov	r10,sp
8001acdc:	fa cb ff fc 	sub	r11,sp,-4
8001ace0:	fa cc ff f8 	sub	r12,sp,-8
8001ace4:	cc 8e       	rcall	8001aa74 <ftdi_get_strings>
8001ace6:	40 0a       	lddsp	r10,sp[0x0]
  // print the strings
  // print_unicode_string(manstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(prodstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(serstr, FTDI_STRING_MAX_LEN);
  //// query if this is a monome device
  check_monome_device_desc(manstr, prodstr, serstr);
8001ace8:	40 1b       	lddsp	r11,sp[0x4]
8001acea:	40 2c       	lddsp	r12,sp[0x8]
8001acec:	fe b0 f1 de 	rcall	800190a8 <check_monome_device_desc>
8001acf0:	30 19       	mov	r9,1
  //// TODO: other protocols??

  // set connection flag
  ftdiConnect = 1;
8001acf2:	e0 68 1c 8a 	mov	r8,7306
8001acf6:	b0 89       	st.b	r8[0x0],r9
}
8001acf8:	2f dd       	sub	sp,-12
8001acfa:	d8 02       	popm	pc
8001acfc:	80 02       	ld.sh	r2,r0[0x0]
8001acfe:	50 88       	stdsp	sp[0x20],r8

8001ad00 <ftdi_change>:
8001ad00:	eb cd 40 80 	pushm	r7,lr
8001ad04:	48 bc       	lddpc	r12,8001ad30 <ftdi_change+0x30>
8001ad06:	16 97       	mov	r7,r11
8001ad08:	fe b0 c1 4a 	rcall	80012f9c <print_dbg>
8001ad0c:	58 07       	cp.w	r7,0
8001ad0e:	c0 b1       	brne	8001ad24 <ftdi_change+0x24>
void ftdi_change(uhc_device_t* dev, u8 plug) {
  print_dbg("\r\n changed FTDI connection status");
  if(plug) { 
    e.eventType = kEventFtdiConnect; 
  } else {
    e.eventType = kEventFtdiDisconnect;
8001ad10:	e0 68 1c d4 	mov	r8,7380
8001ad14:	30 89       	mov	r9,8
  }
  // posting an event so the main loop can respond
  post_event(&e); 
8001ad16:	91 09       	st.w	r8[0x0],r9
8001ad18:	e0 6c 1c d4 	mov	r12,7380
}
8001ad1c:	fe b0 e3 7a 	rcall	80017410 <post_event>
// respond to connection or disconnection of ftdi device.
// may be called from an interrupt
void ftdi_change(uhc_device_t* dev, u8 plug) {
  print_dbg("\r\n changed FTDI connection status");
  if(plug) { 
    e.eventType = kEventFtdiConnect; 
8001ad20:	e3 cd 80 80 	ldm	sp++,r7,pc
8001ad24:	e0 68 1c d4 	mov	r8,7380
8001ad28:	30 79       	mov	r9,7
8001ad2a:	91 09       	st.w	r8[0x0],r9
8001ad2c:	cf 6b       	rjmp	8001ad18 <ftdi_change+0x18>
8001ad2e:	d7 03       	nop
8001ad30:	80 02       	ld.sh	r2,r0[0x0]
8001ad32:	50 a0       	stdsp	sp[0x28],r0

8001ad34 <ftdi_read>:
8001ad34:	d4 01       	pushm	lr
8001ad36:	30 09       	mov	r9,0
    print_dbg("\r\n error requesting ftdi output pipe");
  }
}
    
void ftdi_read(void) {
  rxBytes = 0;
8001ad38:	e0 68 1c d0 	mov	r8,7376
  rxBusy = true;
8001ad3c:	91 09       	st.w	r8[0x0],r9
8001ad3e:	30 19       	mov	r9,1
  if (!uhi_ftdi_in_run((u8*)rxBuf,
8001ad40:	e0 68 1c cc 	mov	r8,7372
8001ad44:	fe ca 00 d8 	sub	r10,pc,216
8001ad48:	b0 89       	st.b	r8[0x0],r9
8001ad4a:	34 0b       	mov	r11,64
8001ad4c:	e0 6c 1c 8c 	mov	r12,7308
		       FTDI_RX_BUF_SIZE, &ftdi_rx_done)) {
    print_dbg("\r\n ftdi rx transfer error");
8001ad50:	fe b0 fd f8 	rcall	8001a940 <uhi_ftdi_in_run>
8001ad54:	c0 41       	brne	8001ad5c <ftdi_read+0x28>
8001ad56:	48 3c       	lddpc	r12,8001ad60 <ftdi_read+0x2c>
8001ad58:	fe b0 c1 22 	rcall	80012f9c <print_dbg>
8001ad5c:	d8 02       	popm	pc
8001ad5e:	d7 03       	nop
8001ad60:	80 02       	ld.sh	r2,r0[0x0]
8001ad62:	50 c4       	stdsp	sp[0x30],r4

8001ad64 <ftdi_write>:
8001ad64:	d4 01       	pushm	lr
8001ad66:	30 19       	mov	r9,1
8001ad68:	e0 68 1c 89 	mov	r8,7305
8001ad6c:	fe ca 00 bc 	sub	r10,pc,188
8001ad70:	b0 89       	st.b	r8[0x0],r9
8001ad72:	fe b0 fd d5 	rcall	8001a91c <uhi_ftdi_out_run>
//-------- extern functions
void ftdi_write(u8* data, u32 bytes) {
  txBusy = 1;
  if(!uhi_ftdi_out_run(data, bytes, &ftdi_tx_done)) {

    print_dbg("\r\n error requesting ftdi output pipe");
8001ad76:	c0 41       	brne	8001ad7e <ftdi_write+0x1a>
8001ad78:	48 2c       	lddpc	r12,8001ad80 <ftdi_write+0x1c>
8001ad7a:	fe b0 c1 11 	rcall	80012f9c <print_dbg>
8001ad7e:	d8 02       	popm	pc
8001ad80:	80 02       	ld.sh	r2,r0[0x0]
8001ad82:	50 e0       	stdsp	sp[0x38],r0

8001ad84 <uhi_midi_uninstall>:
  //  UHI_MIDI_CHANGE(dev, true);
  midi_change(dev, true);  
  print_dbg("\r\n finished uhi_midi_enable");
}

void uhi_midi_uninstall(uhc_device_t* dev) {
8001ad84:	d4 01       	pushm	lr
  if (uhi_midi_dev.dev != dev) {
8001ad86:	32 08       	mov	r8,32
8001ad88:	70 0a       	ld.w	r10,r8[0x0]
8001ad8a:	18 3a       	cp.w	r10,r12
8001ad8c:	c0 20       	breq	8001ad90 <uhi_midi_uninstall+0xc>
8001ad8e:	d8 02       	popm	pc
    return; // Device not enabled in this interface
  }
  uhi_midi_dev.dev = NULL;
8001ad90:	30 0b       	mov	r11,0
8001ad92:	91 0b       	st.w	r8[0x0],r11
  Assert(uhi_midi_dev.report!=NULL);
  midi_change(dev, false);  
8001ad94:	c9 2c       	rcall	8001aeb8 <midi_change>
8001ad96:	d8 02       	popm	pc

8001ad98 <uhi_midi_enable>:
8001ad98:	d4 01       	pushm	lr
8001ad9a:	32 08       	mov	r8,32
8001ad9c:	70 09       	ld.w	r9,r8[0x0]
8001ad9e:	18 39       	cp.w	r9,r12
8001ada0:	c0 20       	breq	8001ada4 <uhi_midi_enable+0xc>
8001ada2:	d8 02       	popm	pc
  ////  TODO: ??? any setup requests necessary?
  /* 		   1, 0xff,  */
  /* 		   NULL); */
  
  //  UHI_MIDI_CHANGE(dev, true);
  midi_change(dev, true);  
8001ada4:	30 1b       	mov	r11,1
8001ada6:	c8 9c       	rcall	8001aeb8 <midi_change>
8001ada8:	48 2c       	lddpc	r12,8001adb0 <uhi_midi_enable+0x18>
  print_dbg("\r\n finished uhi_midi_enable");
8001adaa:	fe b0 c0 f9 	rcall	80012f9c <print_dbg>
8001adae:	d8 02       	popm	pc
8001adb0:	80 02       	ld.sh	r2,r0[0x0]
8001adb2:	51 08       	stdsp	sp[0x40],r8

8001adb4 <uhi_midi_install>:
8001adb4:	d4 31       	pushm	r0-r7,lr
8001adb6:	20 1d       	sub	sp,4
8001adb8:	32 05       	mov	r5,32
8001adba:	18 92       	mov	r2,r12
8001adbc:	6a 03       	ld.w	r3,r5[0x0]
8001adbe:	58 03       	cp.w	r3,0
8001adc0:	c0 40       	breq	8001adc8 <uhi_midi_install+0x14>
8001adc2:	30 5c       	mov	r12,5
    uhi_midi_dev.dev = dev;
    print_dbg("\r\n completed MIDI device install");
    return UHC_ENUM_SUCCESS;
  }
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}
8001adc4:	2f fd       	sub	sp,-4
8001adc6:	d8 32       	popm	r0-r7,pc

  if (uhi_midi_dev.dev != NULL) {
    return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
8001adc8:	78 67       	ld.w	r7,r12[0x18]
8001adca:	0f a6       	ld.ub	r6,r7[0x2]
8001adcc:	0f b8       	ld.ub	r8,r7[0x3]
8001adce:	f1 e6 10 86 	or	r6,r8,r6<<0x8
8001add2:	5c c6       	swap.bh	r6
8001add4:	5c 86       	casts.h	r6
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  iface_supported = false;

  while(conf_desc_lgt) {
8001add6:	c5 00       	breq	8001ae76 <uhi_midi_install+0xc2>
    switch (ptr_iface->bDescriptorType) {
8001add8:	30 44       	mov	r4,4

      print_dbg("\r\n\r\n\r\n");
#endif
      

      if ( ( ptr_iface->bInterfaceClass == USB_AUDIO_IFACE_CLASS ) 
8001adda:	30 11       	mov	r1,1
	   && (ptr_iface->bInterfaceSubClass == USB_MIDI_IFACE_SUBCLASS) ) {
8001addc:	30 30       	mov	r0,3
8001adde:	c1 08       	rjmp	8001adfe <uhi_midi_install+0x4a>
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
8001ade0:	30 59       	mov	r9,5
8001ade2:	f2 08 18 00 	cp.b	r8,r9
8001ade6:	c1 f0       	breq	8001ae24 <uhi_midi_install+0x70>
	;; // ignore endpoint (shouldn't get here)
	break;
      }
      break;
    default:
      print_dbg("\r\n uhi_midi_install ignoring descriptor; type: 0x");
8001ade8:	4a dc       	lddpc	r12,8001ae9c <uhi_midi_install+0xe8>
8001adea:	fe b0 c0 d9 	rcall	80012f9c <print_dbg>
      print_dbg_hex(ptr_iface->bDescriptorType );
8001adee:	0f 9c       	ld.ub	r12,r7[0x1]
8001adf0:	fe b0 c0 fe 	rcall	80012fec <print_dbg_hex>
      break;
      
    }
      
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
8001adf4:	0f 88       	ld.ub	r8,r7[0x0]
8001adf6:	10 16       	sub	r6,r8
8001adf8:	5c 86       	casts.h	r6

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  iface_supported = false;

  while(conf_desc_lgt) {
8001adfa:	c3 c0       	breq	8001ae72 <uhi_midi_install+0xbe>
      
    }
      
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001adfc:	10 07       	add	r7,r8
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
8001adfe:	0f 98       	ld.ub	r8,r7[0x1]
8001ae00:	e8 08 18 00 	cp.b	r8,r4
8001ae04:	ce e1       	brne	8001ade0 <uhi_midi_install+0x2c>

      print_dbg("\r\n\r\n\r\n");
#endif
      

      if ( ( ptr_iface->bInterfaceClass == USB_AUDIO_IFACE_CLASS ) 
8001ae06:	0f d8       	ld.ub	r8,r7[0x5]
8001ae08:	e2 08 18 00 	cp.b	r8,r1
8001ae0c:	c0 30       	breq	8001ae12 <uhi_midi_install+0x5e>
	break;
      }
      break;
    default:
      print_dbg("\r\n uhi_midi_install ignoring descriptor; type: 0x");
      print_dbg_hex(ptr_iface->bDescriptorType );
8001ae0e:	30 03       	mov	r3,0
8001ae10:	cf 2b       	rjmp	8001adf4 <uhi_midi_install+0x40>
      print_dbg("\r\n\r\n\r\n");
#endif
      

      if ( ( ptr_iface->bInterfaceClass == USB_AUDIO_IFACE_CLASS ) 
	   && (ptr_iface->bInterfaceSubClass == USB_MIDI_IFACE_SUBCLASS) ) {
8001ae12:	0f e8       	ld.ub	r8,r7[0x6]
8001ae14:	e0 08 18 00 	cp.b	r8,r0
8001ae18:	cf b1       	brne	8001ae0e <uhi_midi_install+0x5a>

#if UHI_MIDI_PRINT_DBG
	print_dbg("\r\n class/subclass matches audio/MIDI. ");
#endif
	iface_supported = true;
	uhi_midi_dev.ep_in = 0;
8001ae1a:	30 08       	mov	r8,0
	uhi_midi_dev.ep_out = 0;
8001ae1c:	30 13       	mov	r3,1
8001ae1e:	aa d8       	st.b	r5[0x5],r8

#if UHI_MIDI_PRINT_DBG
	print_dbg("\r\n class/subclass matches audio/MIDI. ");
#endif
	iface_supported = true;
	uhi_midi_dev.ep_in = 0;
8001ae20:	aa c8       	st.b	r5[0x4],r8

      print_dbg("\r\n\r\n\r\n");
#endif
      

      if ( ( ptr_iface->bInterfaceClass == USB_AUDIO_IFACE_CLASS ) 
8001ae22:	ce 9b       	rjmp	8001adf4 <uhi_midi_install+0x40>
	iface_supported = false;
      }
      break;

    case USB_DT_ENDPOINT:
      if (!iface_supported) {
8001ae24:	58 03       	cp.w	r3,0
8001ae26:	ce 70       	breq	8001adf4 <uhi_midi_install+0x40>
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
8001ae28:	0e 9b       	mov	r11,r7
8001ae2a:	e5 3c 00 12 	ld.ub	r12,r2[18]
8001ae2e:	fe b0 ca ed 	rcall	80014408 <uhd_ep_alloc>
8001ae32:	c2 c0       	breq	8001ae8a <uhi_midi_install+0xd6>
	print_dbg("\r\n endpoint allocation failed");
	return UHC_ENUM_HARDWARE_LIMIT;
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
8001ae34:	0f b8       	ld.ub	r8,r7[0x3]
8001ae36:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001ae3a:	58 28       	cp.w	r8,2
8001ae3c:	cd c1       	brne	8001adf4 <uhi_midi_install+0x40>
      case USB_EP_TYPE_BULK:
       	print_dbg("\r\n allocating bulk endpoint ( ");
8001ae3e:	49 9c       	lddpc	r12,8001aea0 <uhi_midi_install+0xec>
8001ae40:	fe b0 c0 ae 	rcall	80012f9c <print_dbg>
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
8001ae44:	30 08       	mov	r8,0
8001ae46:	0f a9       	ld.ub	r9,r7[0x2]
8001ae48:	f0 09 18 00 	cp.b	r9,r8
8001ae4c:	c1 d5       	brlt	8001ae86 <uhi_midi_install+0xd2>
	  /* print_dbg("\r\n ( previous input : 0x"); */
	  /* print_dbg_hex((u32)uhi_midi_dev.ep_in); */
	  /* if(uhi_midi_dev.ep_in != 0) { print_dbg("\r\n reallocating midi input endpoint"); } */
	  uhi_midi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
	} else {
	  print_dbg(" output )");
8001ae4e:	50 08       	stdsp	sp[0x0],r8
8001ae50:	49 5c       	lddpc	r12,8001aea4 <uhi_midi_install+0xf0>
8001ae52:	fe b0 c0 a5 	rcall	80012f9c <print_dbg>
	  print_dbg("\r\n ( previous output : 0x");
8001ae56:	49 5c       	lddpc	r12,8001aea8 <uhi_midi_install+0xf4>
8001ae58:	fe b0 c0 a2 	rcall	80012f9c <print_dbg>
	  print_dbg_hex((u32)uhi_midi_dev.ep_out);
8001ae5c:	0b dc       	ld.ub	r12,r5[0x5]
8001ae5e:	fe b0 c0 c7 	rcall	80012fec <print_dbg_hex>
	  if(uhi_midi_dev.ep_out != 0) { print_dbg("\r\n reallocating midi output endpoint"); }
8001ae62:	0b d9       	ld.ub	r9,r5[0x5]
8001ae64:	40 08       	lddsp	r8,sp[0x0]
8001ae66:	f0 09 18 00 	cp.b	r9,r8
8001ae6a:	c1 51       	brne	8001ae94 <uhi_midi_install+0xe0>
	  uhi_midi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001ae6c:	0f a8       	ld.ub	r8,r7[0x2]
8001ae6e:	aa d8       	st.b	r5[0x5],r8
8001ae70:	cc 2b       	rjmp	8001adf4 <uhi_midi_install+0x40>
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (iface_supported) {
8001ae72:	58 03       	cp.w	r3,0
8001ae74:	c0 31       	brne	8001ae7a <uhi_midi_install+0xc6>
    uhi_midi_dev.dev = dev;
    print_dbg("\r\n completed MIDI device install");
    return UHC_ENUM_SUCCESS;
8001ae76:	30 1c       	mov	r12,1
8001ae78:	ca 6b       	rjmp	8001adc4 <uhi_midi_install+0x10>
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (iface_supported) {
    uhi_midi_dev.dev = dev;
    print_dbg("\r\n completed MIDI device install");
8001ae7a:	48 dc       	lddpc	r12,8001aeac <uhi_midi_install+0xf8>
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (iface_supported) {
    uhi_midi_dev.dev = dev;
8001ae7c:	8b 02       	st.w	r5[0x0],r2
    print_dbg("\r\n completed MIDI device install");
8001ae7e:	fe b0 c0 8f 	rcall	80012f9c <print_dbg>
8001ae82:	0c 9c       	mov	r12,r6
    return UHC_ENUM_SUCCESS;
8001ae84:	ca 0b       	rjmp	8001adc4 <uhi_midi_install+0x10>
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
	  /* print_dbg(" input )"); */
	  /* print_dbg("\r\n ( previous input : 0x"); */
	  /* print_dbg_hex((u32)uhi_midi_dev.ep_in); */
	  /* if(uhi_midi_dev.ep_in != 0) { print_dbg("\r\n reallocating midi input endpoint"); } */
	  uhi_midi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001ae86:	aa c9       	st.b	r5[0x4],r9
8001ae88:	cb 6b       	rjmp	8001adf4 <uhi_midi_install+0x40>
    case USB_DT_ENDPOINT:
      if (!iface_supported) {
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
	print_dbg("\r\n endpoint allocation failed");
8001ae8a:	48 ac       	lddpc	r12,8001aeb0 <uhi_midi_install+0xfc>
8001ae8c:	fe b0 c0 88 	rcall	80012f9c <print_dbg>
8001ae90:	30 4c       	mov	r12,4
	return UHC_ENUM_HARDWARE_LIMIT;
8001ae92:	c9 9b       	rjmp	8001adc4 <uhi_midi_install+0x10>
	  uhi_midi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
	} else {
	  print_dbg(" output )");
	  print_dbg("\r\n ( previous output : 0x");
	  print_dbg_hex((u32)uhi_midi_dev.ep_out);
	  if(uhi_midi_dev.ep_out != 0) { print_dbg("\r\n reallocating midi output endpoint"); }
8001ae94:	48 8c       	lddpc	r12,8001aeb4 <uhi_midi_install+0x100>
8001ae96:	fe b0 c0 83 	rcall	80012f9c <print_dbg>
8001ae9a:	ce 9b       	rjmp	8001ae6c <uhi_midi_install+0xb8>
8001ae9c:	80 02       	ld.sh	r2,r0[0x0]
8001ae9e:	51 94       	stdsp	sp[0x64],r4
8001aea0:	80 02       	ld.sh	r2,r0[0x0]
8001aea2:	51 24       	stdsp	sp[0x48],r4
8001aea4:	80 02       	ld.sh	r2,r0[0x0]
8001aea6:	51 44       	stdsp	sp[0x50],r4
8001aea8:	80 02       	ld.sh	r2,r0[0x0]
8001aeaa:	51 50       	stdsp	sp[0x54],r0
8001aeac:	80 02       	ld.sh	r2,r0[0x0]
8001aeae:	51 c8       	stdsp	sp[0x70],r8
8001aeb0:	80 02       	ld.sh	r2,r0[0x0]
8001aeb2:	4f 98       	lddpc	r8,8001b094 <uhi_hid_mouse_install+0x40>
8001aeb4:	80 02       	ld.sh	r2,r0[0x0]
8001aeb6:	51 6c       	stdsp	sp[0x58],r12

8001aeb8 <midi_change>:
  return;
}

// MIDI device was plugged or unplugged
extern void midi_change(uhc_device_t* dev, u8 plug) {
  midiConnect = plug;
8001aeb8:	e0 68 1c e0 	mov	r8,7392
}
8001aebc:	b0 8b       	st.b	r8[0x0],r11
8001aebe:	5e fc       	retal	r12

8001aec0 <hid_mouse_move>:
void hid_mouse_btn_middle(bool b_state) {
  print_dbg("\r\n usb mid mouse button: ");
  print_dbg_ulong(b_state);
}

void hid_mouse_move(int8_t x, int8_t y, int8_t scroll) {
8001aec0:	eb cd 40 e0 	pushm	r5-r7,lr
8001aec4:	16 97       	mov	r7,r11
8001aec6:	14 96       	mov	r6,r10
8001aec8:	18 95       	mov	r5,r12
  print_dbg("\r\n usb mouse move; x: ");
8001aeca:	48 cc       	lddpc	r12,8001aef8 <hid_mouse_move+0x38>
8001aecc:	fe b0 c0 68 	rcall	80012f9c <print_dbg>
  print_dbg_hex(x);
8001aed0:	f9 d5 b0 08 	bfexts	r12,r5,0x0,0x8
8001aed4:	fe b0 c0 8c 	rcall	80012fec <print_dbg_hex>
  print_dbg(", y: ");
8001aed8:	48 9c       	lddpc	r12,8001aefc <hid_mouse_move+0x3c>
8001aeda:	fe b0 c0 61 	rcall	80012f9c <print_dbg>
  print_dbg_hex(y);
8001aede:	0e 9c       	mov	r12,r7
8001aee0:	5c 6c       	casts.b	r12
8001aee2:	fe b0 c0 85 	rcall	80012fec <print_dbg_hex>
  print_dbg(", scroll: ");
8001aee6:	48 7c       	lddpc	r12,8001af00 <hid_mouse_move+0x40>
8001aee8:	fe b0 c0 5a 	rcall	80012f9c <print_dbg>
  print_dbg_hex(scroll);
8001aeec:	f9 d6 b0 08 	bfexts	r12,r6,0x0,0x8
8001aef0:	fe b0 c0 7e 	rcall	80012fec <print_dbg_hex>
}
8001aef4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001aef8:	80 02       	ld.sh	r2,r0[0x0]
8001aefa:	51 ec       	stdsp	sp[0x78],r12
8001aefc:	80 02       	ld.sh	r2,r0[0x0]
8001aefe:	52 04       	stdsp	sp[0x80],r4
8001af00:	80 02       	ld.sh	r2,r0[0x0]
8001af02:	52 0c       	stdsp	sp[0x80],r12

8001af04 <hid_mouse_btn_middle>:
8001af04:	eb cd 40 80 	pushm	r7,lr
8001af08:	18 97       	mov	r7,r12
8001af0a:	48 5c       	lddpc	r12,8001af1c <hid_mouse_btn_middle+0x18>
  print_dbg("\r\n usb right mouse button: ");
  print_dbg_ulong(b_state);
}

void hid_mouse_btn_middle(bool b_state) {
  print_dbg("\r\n usb mid mouse button: ");
8001af0c:	fe b0 c0 48 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(b_state);
8001af10:	0e 9c       	mov	r12,r7
8001af12:	fe b0 c0 4b 	rcall	80012fa8 <print_dbg_ulong>
}
8001af16:	e3 cd 80 80 	ldm	sp++,r7,pc
8001af1a:	d7 03       	nop
8001af1c:	80 02       	ld.sh	r2,r0[0x0]
8001af1e:	52 18       	stdsp	sp[0x84],r8

8001af20 <hid_mouse_btn_right>:
8001af20:	eb cd 40 80 	pushm	r7,lr
8001af24:	18 97       	mov	r7,r12
8001af26:	48 5c       	lddpc	r12,8001af38 <hid_mouse_btn_right+0x18>
  
  //gpio_tgl_gpio_pin(LED_MODE_PIN);
}

void hid_mouse_btn_right(bool b_state) {
  print_dbg("\r\n usb right mouse button: ");
8001af28:	fe b0 c0 3a 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(b_state);
8001af2c:	0e 9c       	mov	r12,r7
8001af2e:	fe b0 c0 3d 	rcall	80012fa8 <print_dbg_ulong>
}
8001af32:	e3 cd 80 80 	ldm	sp++,r7,pc
8001af36:	d7 03       	nop
8001af38:	80 02       	ld.sh	r2,r0[0x0]
8001af3a:	52 34       	stdsp	sp[0x8c],r4

8001af3c <hid_mouse_btn_left>:
8001af3c:	eb cd 40 80 	pushm	r7,lr
8001af40:	18 97       	mov	r7,r12
8001af42:	48 5c       	lddpc	r12,8001af54 <hid_mouse_btn_left+0x18>

#include "hid_mouse.h"

// mouse event callbacks
void hid_mouse_btn_left(bool b_state) {
  print_dbg("\r\n usb left mouse button: ");
8001af44:	fe b0 c0 2c 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(b_state);
8001af48:	0e 9c       	mov	r12,r7
8001af4a:	fe b0 c0 2f 	rcall	80012fa8 <print_dbg_ulong>
  
  //gpio_tgl_gpio_pin(LED_MODE_PIN);
}
8001af4e:	e3 cd 80 80 	ldm	sp++,r7,pc
8001af52:	d7 03       	nop
8001af54:	80 02       	ld.sh	r2,r0[0x0]
8001af56:	52 50       	stdsp	sp[0x94],r0

8001af58 <uhi_hid_mouse_uninstall>:
	uhi_hid_mouse_start_trans_report(dev->address);
	UHI_HID_MOUSE_CHANGE(dev, true);
}

void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
8001af58:	d4 01       	pushm	lr
	if (uhi_hid_mouse_dev.dev != dev) {
8001af5a:	e0 68 1c e4 	mov	r8,7396
8001af5e:	70 09       	ld.w	r9,r8[0x0]
8001af60:	18 39       	cp.w	r9,r12
8001af62:	c0 20       	breq	8001af66 <uhi_hid_mouse_uninstall+0xe>
		return; // Device not enabled in this interface
	}
	uhi_hid_mouse_dev.dev = NULL;
8001af64:	d8 02       	popm	pc
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
8001af66:	30 09       	mov	r9,0
void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
	if (uhi_hid_mouse_dev.dev != dev) {
		return; // Device not enabled in this interface
	}
	uhi_hid_mouse_dev.dev = NULL;
8001af68:	70 2c       	ld.w	r12,r8[0x8]
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
8001af6a:	91 09       	st.w	r8[0x0],r9
8001af6c:	e0 a0 40 28 	rcall	80022fbc <free>
8001af70:	d8 02       	popm	pc
8001af72:	d7 03       	nop

8001af74 <uhi_hid_mouse_enable>:
8001af74:	d4 01       	pushm	lr
8001af76:	e0 69 1c e4 	mov	r9,7396
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_hid_mouse_enable(uhc_device_t* dev)
{
	if (uhi_hid_mouse_dev.dev != dev) {
8001af7a:	72 08       	ld.w	r8,r9[0x0]
8001af7c:	18 38       	cp.w	r8,r12
8001af7e:	c0 20       	breq	8001af82 <uhi_hid_mouse_enable+0xe>
		return;  // No interface to enable
	}

	// Init value
	uhi_hid_mouse_dev.report_btn_prev = 0;
8001af80:	d8 02       	popm	pc
8001af82:	30 0a       	mov	r10,0
8001af84:	f3 6a 00 0c 	st.b	r9[12],r10
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
8001af88:	fe ca ff e0 	sub	r10,pc,-32
8001af8c:	13 cb       	ld.ub	r11,r9[0x4]
8001af8e:	1a da       	st.w	--sp,r10
8001af90:	30 0a       	mov	r10,0
8001af92:	1a da       	st.w	--sp,r10
8001af94:	30 1a       	mov	r10,1
8001af96:	f1 3c 00 12 	ld.ub	r12,r8[18]
8001af9a:	13 d8       	ld.ub	r8,r9[0x5]
8001af9c:	72 29       	ld.w	r9,r9[0x8]
8001af9e:	fe b0 cf a3 	rcall	80014ee4 <uhd_ep_run>
8001afa2:	2f ed       	sub	sp,-8
8001afa4:	d8 02       	popm	pc
8001afa6:	d7 03       	nop

8001afa8 <uhi_hid_mouse_report_reception>:
8001afa8:	d4 21       	pushm	r4-r7,lr
8001afaa:	58 0a       	cp.w	r10,0
8001afac:	5f 18       	srne	r8
8001afae:	58 39       	cp.w	r9,3
{
	uint8_t state_prev;
	uint8_t state_new;
	UNUSED(ep);

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
8001afb0:	5f 89       	srls	r9
static void uhi_hid_mouse_report_reception(
		usb_add_t add,
		usb_ep_t ep,
		uhd_trans_status_t status,
		iram_size_t nb_transfered)
{
8001afb2:	18 96       	mov	r6,r12
	uint8_t state_prev;
	uint8_t state_new;
	UNUSED(ep);

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
8001afb4:	f3 e8 10 08 	or	r8,r9,r8
8001afb8:	c2 d1       	brne	8001b012 <uhi_hid_mouse_report_reception+0x6a>
		return; // HID mouse transfer aborted
	}

	// Decode buttons
	state_prev = uhi_hid_mouse_dev.report_btn_prev;
	state_new = uhi_hid_mouse_dev.report[UHI_HID_MOUSE_BTN];
8001afba:	e0 67 1c e4 	mov	r7,7396
	if ((state_prev & 0x01) != (state_new & 0x01)) {
8001afbe:	6e 28       	ld.w	r8,r7[0x8]
8001afc0:	ef 35 00 0c 	ld.ub	r5,r7[12]
8001afc4:	11 84       	ld.ub	r4,r8[0x0]
8001afc6:	e9 e5 20 05 	eor	r5,r4,r5
8001afca:	ed b5 00 00 	bld	r5,0x0
		UHI_HID_MOUSE_EVENT_BTN_LEFT((state_new & 0x01) ? true : false);
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
8001afce:	c3 40       	breq	8001b036 <uhi_hid_mouse_report_reception+0x8e>
8001afd0:	ed b5 00 01 	bld	r5,0x1
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
8001afd4:	c3 70       	breq	8001b042 <uhi_hid_mouse_report_reception+0x9a>
8001afd6:	e2 15 00 04 	andl	r5,0x4,COH
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;
8001afda:	c2 41       	brne	8001b022 <uhi_hid_mouse_report_reception+0x7a>
8001afdc:	ef 64 00 0c 	st.b	r7[12],r4

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
8001afe0:	6e 29       	ld.w	r9,r7[0x8]
8001afe2:	13 9c       	ld.ub	r12,r9[0x1]
8001afe4:	58 0c       	cp.w	r12,0
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_Y] != 0)
8001afe6:	c1 b1       	brne	8001b01c <uhi_hid_mouse_report_reception+0x74>
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
8001afe8:	13 ab       	ld.ub	r11,r9[0x2]
8001afea:	58 0b       	cp.w	r11,0
8001afec:	c1 40       	breq	8001b014 <uhi_hid_mouse_report_reception+0x6c>
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_Y] != 0)
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_SCROLL] != 0)) {
		UHI_HID_MOUSE_EVENT_MOUVE(
8001afee:	13 ba       	ld.ub	r10,r9[0x3]
8001aff0:	5c 6a       	casts.b	r10
8001aff2:	5c 6b       	casts.b	r11
8001aff4:	5c 6c       	casts.b	r12
8001aff6:	c6 5f       	rcall	8001aec0 <hid_mouse_move>
8001aff8:	6e 29       	ld.w	r9,r7[0x8]
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
8001affa:	fe c8 00 52 	sub	r8,pc,82
8001affe:	0f cb       	ld.ub	r11,r7[0x4]
8001b000:	1a d8       	st.w	--sp,r8
8001b002:	30 08       	mov	r8,0
8001b004:	0c 9c       	mov	r12,r6
8001b006:	1a d8       	st.w	--sp,r8
8001b008:	30 1a       	mov	r10,1
8001b00a:	0f d8       	ld.ub	r8,r7[0x5]
8001b00c:	fe b0 cf 6c 	rcall	80014ee4 <uhd_ep_run>
8001b010:	2f ed       	sub	sp,-8
	uhi_hid_mouse_dev.report_btn_prev = state_new;

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_Y] != 0)
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_SCROLL] != 0)) {
8001b012:	d8 22       	popm	r4-r7,pc
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
8001b014:	13 ba       	ld.ub	r10,r9[0x3]
8001b016:	58 0a       	cp.w	r10,0
8001b018:	cf 10       	breq	8001affa <uhi_hid_mouse_report_reception+0x52>
8001b01a:	ce bb       	rjmp	8001aff0 <uhi_hid_mouse_report_reception+0x48>
8001b01c:	13 ba       	ld.ub	r10,r9[0x3]
8001b01e:	13 ab       	ld.ub	r11,r9[0x2]
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
8001b020:	ce 8b       	rjmp	8001aff0 <uhi_hid_mouse_report_reception+0x48>
8001b022:	f9 d4 c0 41 	bfextu	r12,r4,0x2,0x1
8001b026:	c6 ff       	rcall	8001af04 <hid_mouse_btn_middle>
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;
8001b028:	ef 64 00 0c 	st.b	r7[12],r4

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
8001b02c:	6e 29       	ld.w	r9,r7[0x8]
8001b02e:	13 9c       	ld.ub	r12,r9[0x1]
8001b030:	58 0c       	cp.w	r12,0
8001b032:	cd b0       	breq	8001afe8 <uhi_hid_mouse_report_reception+0x40>
8001b034:	cf 4b       	rjmp	8001b01c <uhi_hid_mouse_report_reception+0x74>

	// Decode buttons
	state_prev = uhi_hid_mouse_dev.report_btn_prev;
	state_new = uhi_hid_mouse_dev.report[UHI_HID_MOUSE_BTN];
	if ((state_prev & 0x01) != (state_new & 0x01)) {
		UHI_HID_MOUSE_EVENT_BTN_LEFT((state_new & 0x01) ? true : false);
8001b036:	f9 d4 c0 01 	bfextu	r12,r4,0x0,0x1
8001b03a:	c8 1f       	rcall	8001af3c <hid_mouse_btn_left>
8001b03c:	ed b5 00 01 	bld	r5,0x1
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
8001b040:	cc b1       	brne	8001afd6 <uhi_hid_mouse_report_reception+0x2e>
8001b042:	f9 d4 c0 21 	bfextu	r12,r4,0x1,0x1
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
8001b046:	e2 15 00 04 	andl	r5,0x4,COH
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
8001b04a:	c6 bf       	rcall	8001af20 <hid_mouse_btn_right>
	state_new = uhi_hid_mouse_dev.report[UHI_HID_MOUSE_BTN];
	if ((state_prev & 0x01) != (state_new & 0x01)) {
		UHI_HID_MOUSE_EVENT_BTN_LEFT((state_new & 0x01) ? true : false);
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
8001b04c:	58 05       	cp.w	r5,0
8001b04e:	cc 70       	breq	8001afdc <uhi_hid_mouse_report_reception+0x34>
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
8001b050:	ce 9b       	rjmp	8001b022 <uhi_hid_mouse_report_reception+0x7a>
8001b052:	d7 03       	nop

8001b054 <uhi_hid_mouse_install>:
8001b054:	d4 21       	pushm	r4-r7,lr
8001b056:	e0 66 1c e4 	mov	r6,7396
8001b05a:	18 95       	mov	r5,r12
8001b05c:	6c 09       	ld.w	r9,r6[0x0]
8001b05e:	58 09       	cp.w	r9,0
8001b060:	c0 30       	breq	8001b066 <uhi_hid_mouse_install+0x12>
8001b062:	30 5c       	mov	r12,5
8001b064:	d8 22       	popm	r4-r7,pc
8001b066:	78 67       	ld.w	r7,r12[0x18]
8001b068:	0f aa       	ld.ub	r10,r7[0x2]
8001b06a:	0f b8       	ld.ub	r8,r7[0x3]
8001b06c:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8001b070:	5c c8       	swap.bh	r8
8001b072:	5c 88       	casts.h	r8

	if (uhi_hid_mouse_dev.dev != NULL) {
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
8001b074:	c2 80       	breq	8001b0c4 <uhi_hid_mouse_install+0x70>
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
8001b076:	12 9c       	mov	r12,r9

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass   == HID_CLASS)
8001b078:	30 4a       	mov	r10,4
/**
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_hid_mouse_install(uhc_device_t* dev)
8001b07a:	30 3e       	mov	lr,3
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
8001b07c:	30 24       	mov	r4,2
8001b07e:	30 5b       	mov	r11,5
8001b080:	c0 98       	rjmp	8001b092 <uhi_hid_mouse_install+0x3e>
8001b082:	f6 09 18 00 	cp.b	r9,r11
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
8001b086:	c1 00       	breq	8001b0a6 <uhi_hid_mouse_install+0x52>
8001b088:	0f 89       	ld.ub	r9,r7[0x0]
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001b08a:	12 18       	sub	r8,r9
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
8001b08c:	12 07       	add	r7,r9
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
8001b08e:	5c 88       	casts.h	r8
		switch (ptr_iface->bDescriptorType) {
8001b090:	c1 a0       	breq	8001b0c4 <uhi_hid_mouse_install+0x70>
8001b092:	0f 99       	ld.ub	r9,r7[0x1]
8001b094:	f4 09 18 00 	cp.b	r9,r10

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass   == HID_CLASS)
8001b098:	cf 51       	brne	8001b082 <uhi_hid_mouse_install+0x2e>
8001b09a:	0f d9       	ld.ub	r9,r7[0x5]
8001b09c:	fc 09 18 00 	cp.b	r9,lr
				Assert(false);
				return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
			}
			uhi_hid_mouse_dev.dev = dev;
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
8001b0a0:	c0 d0       	breq	8001b0ba <uhi_hid_mouse_install+0x66>
8001b0a2:	30 0c       	mov	r12,0
			}
			break;

		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (!b_iface_supported) {
8001b0a4:	cf 2b       	rjmp	8001b088 <uhi_hid_mouse_install+0x34>
8001b0a6:	58 0c       	cp.w	r12,0
				break;
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
8001b0a8:	cf 00       	breq	8001b088 <uhi_hid_mouse_install+0x34>
8001b0aa:	0e 9b       	mov	r11,r7
8001b0ac:	eb 3c 00 12 	ld.ub	r12,r5[18]
8001b0b0:	fe b0 c9 ac 	rcall	80014408 <uhd_ep_alloc>
8001b0b4:	c0 91       	brne	8001b0c6 <uhi_hid_mouse_install+0x72>
8001b0b6:	30 4c       	mov	r12,4
/**
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_hid_mouse_install(uhc_device_t* dev)
8001b0b8:	d8 22       	popm	r4-r7,pc
8001b0ba:	0f f9       	ld.ub	r9,r7[0x7]
8001b0bc:	e8 09 18 00 	cp.b	r9,r4
8001b0c0:	5f 0c       	sreq	r12
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001b0c2:	ce 3b       	rjmp	8001b088 <uhi_hid_mouse_install+0x34>
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
			}
			Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
			uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001b0c4:	da 2a       	popm	r4-r7,pc,r12=1
8001b0c6:	0f a8       	ld.ub	r8,r7[0x2]
			uhi_hid_mouse_dev.report_size =
8001b0c8:	ac c8       	st.b	r6[0x4],r8
8001b0ca:	0f cc       	ld.ub	r12,r7[0x4]
					le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
			uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
8001b0cc:	ac dc       	st.b	r6[0x5],r12
8001b0ce:	e0 a0 3f 7f 	rcall	80022fcc <malloc>
			if (uhi_hid_mouse_dev.report == NULL) {
8001b0d2:	8d 2c       	st.w	r6[0x8],r12
				Assert(false);
				return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
			}
			uhi_hid_mouse_dev.dev = dev;
8001b0d4:	c0 60       	breq	8001b0e0 <uhi_hid_mouse_install+0x8c>
8001b0d6:	e0 68 1c e4 	mov	r8,7396
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
8001b0da:	30 0c       	mov	r12,0
			Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
			uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
			uhi_hid_mouse_dev.report_size =
					le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
			uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
			if (uhi_hid_mouse_dev.report == NULL) {
8001b0dc:	91 05       	st.w	r8[0x0],r5
8001b0de:	d8 22       	popm	r4-r7,pc
8001b0e0:	30 6c       	mov	r12,6
8001b0e2:	d8 22       	popm	r4-r7,pc

8001b0e4 <fatfs_lba_of_cluster>:
// fatfs_lba_of_cluster: This function converts a cluster number into a sector / 
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
8001b0e4:	78 c8       	ld.w	r8,r12[0x30]
8001b0e6:	58 08       	cp.w	r8,0
8001b0e8:	c0 80       	breq	8001b0f8 <fatfs_lba_of_cluster+0x14>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
8001b0ea:	78 18       	ld.w	r8,r12[0x4]
8001b0ec:	20 2b       	sub	r11,2
8001b0ee:	19 89       	ld.ub	r9,r12[0x0]
8001b0f0:	f6 09 02 4c 	mul	r12,r11,r9
8001b0f4:	10 0c       	add	r12,r8
}
8001b0f6:	5e fc       	retal	r12
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
8001b0f8:	19 88       	ld.ub	r8,r12[0x0]
8001b0fa:	f9 19 00 28 	ld.uh	r9,r12[40]
8001b0fe:	20 2b       	sub	r11,2
8001b100:	a5 49       	asr	r9,0x4
8001b102:	b1 3b       	mul	r11,r8
8001b104:	78 18       	ld.w	r8,r12[0x4]
8001b106:	f2 08 00 0c 	add	r12,r9,r8
8001b10a:	16 0c       	add	r12,r11
8001b10c:	5e fc       	retal	r12

8001b10e <fatfs_sector_read>:
}
//-----------------------------------------------------------------------------
// fatfs_sector_read: 
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
8001b10e:	d4 01       	pushm	lr
8001b110:	16 9e       	mov	lr,r11
    return fs->disk_io.read_media(lba, target, count);
8001b112:	78 d8       	ld.w	r8,r12[0x34]
}
//-----------------------------------------------------------------------------
// fatfs_sector_read: 
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
8001b114:	14 9b       	mov	r11,r10
    return fs->disk_io.read_media(lba, target, count);
8001b116:	1c 9c       	mov	r12,lr
8001b118:	12 9a       	mov	r10,r9
8001b11a:	5d 18       	icall	r8
}
8001b11c:	d8 02       	popm	pc

8001b11e <fatfs_sector_write>:
//-----------------------------------------------------------------------------
// fatfs_sector_write: 
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
8001b11e:	d4 01       	pushm	lr
8001b120:	16 9e       	mov	lr,r11
    return fs->disk_io.write_media(lba, target, count);
8001b122:	78 e8       	ld.w	r8,r12[0x38]
}
//-----------------------------------------------------------------------------
// fatfs_sector_write: 
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
8001b124:	14 9b       	mov	r11,r10
    return fs->disk_io.write_media(lba, target, count);
8001b126:	1c 9c       	mov	r12,lr
8001b128:	12 9a       	mov	r10,r9
8001b12a:	5d 18       	icall	r8
}
8001b12c:	d8 02       	popm	pc

8001b12e <fatfs_get_root_cluster>:
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
}
8001b12e:	78 2c       	ld.w	r12,r12[0x8]
8001b130:	5e fc       	retal	r12
8001b132:	d7 03       	nop

8001b134 <fatfs_init>:

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
8001b134:	eb cd 40 f8 	pushm	r3-r7,lr
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
8001b138:	3f f8       	mov	r8,-1

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
8001b13a:	18 97       	mov	r7,r12
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;
8001b13c:	30 06       	mov	r6,0
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
8001b13e:	f9 48 02 44 	st.w	r12[580],r8
    fs->currentsector.dirty = 0;
8001b142:	f9 46 02 48 	st.w	r12[584],r6

    fs->next_free_cluster = 0; // Invalid
8001b146:	99 96       	st.w	r12[0x24],r6

    fatfs_fat_init(fs);
8001b148:	e0 a0 13 a2 	rcall	8001d88c <fatfs_fat_init>

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
8001b14c:	6e d8       	ld.w	r8,r7[0x34]
8001b14e:	58 08       	cp.w	r8,0
8001b150:	c0 31       	brne	8001b156 <fatfs_init+0x22>
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
8001b152:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
8001b156:	0c 9c       	mov	r12,r6
8001b158:	30 1a       	mov	r10,1
8001b15a:	ee c6 ff bc 	sub	r6,r7,-68
8001b15e:	0c 9b       	mov	r11,r6
8001b160:	5d 18       	icall	r8
8001b162:	cf 80       	breq	8001b152 <fatfs_init+0x1e>
    ///////////////////


    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
8001b164:	ef 18 02 42 	ld.uh	r8,r7[578]
8001b168:	e0 48 55 aa 	cp.w	r8,21930
8001b16c:	c0 40       	breq	8001b174 <fatfs_init+0x40>
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
8001b16e:	3f dc       	mov	r12,-3
8001b170:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
        return FAT_INIT_INVALID_SIGNATURE;

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE) 
8001b174:	ef 39 02 43 	ld.ub	r9,r7[579]
8001b178:	ef 38 02 42 	ld.ub	r8,r7[578]
8001b17c:	a9 69       	lsl	r9,0x8
8001b17e:	f2 08 00 08 	add	r8,r9,r8
8001b182:	e0 48 aa 55 	cp.w	r8,43605
8001b186:	c0 40       	breq	8001b18e <fatfs_init+0x5a>
8001b188:	3f cc       	mov	r12,-4
8001b18a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    	   
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
8001b18e:	ef 38 02 06 	ld.ub	r8,r7[518]
8001b192:	30 f9       	mov	r9,15
8001b194:	f2 08 18 00 	cp.b	r8,r9
8001b198:	e0 8b 00 0c 	brhi	8001b1b0 <fatfs_init+0x7c>
8001b19c:	30 19       	mov	r9,1
8001b19e:	f2 08 09 49 	lsl	r9,r9,r8
8001b1a2:	12 9a       	mov	r10,r9
8001b1a4:	e2 1a d8 60 	andl	r10,0xd860,COH
8001b1a8:	c0 91       	brne	8001b1ba <fatfs_init+0x86>
8001b1aa:	ed b9 00 00 	bld	r9,0x0
8001b1ae:	c2 70       	breq	8001b1fc <fatfs_init+0xc8>
        break;
        case 0x00:
            valid_partition = 0;
            break;
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
8001b1b0:	30 69       	mov	r9,6
8001b1b2:	f2 08 18 00 	cp.b	r8,r9
8001b1b6:	e0 8b 00 23 	brhi	8001b1fc <fatfs_init+0xc8>
        break;
    }

    // Read LBA Begin for the file system
    if (valid_partition)        
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
8001b1ba:	ef 38 02 0c 	ld.ub	r8,r7[524]
8001b1be:	b1 68       	lsl	r8,0x10
8001b1c0:	ef 3c 02 0d 	ld.ub	r12,r7[525]
8001b1c4:	b9 6c       	lsl	r12,0x18
8001b1c6:	10 0c       	add	r12,r8
8001b1c8:	ef 38 02 0a 	ld.ub	r8,r7[522]
8001b1cc:	10 0c       	add	r12,r8
8001b1ce:	ef 38 02 0b 	ld.ub	r8,r7[523]
8001b1d2:	a9 68       	lsl	r8,0x8
8001b1d4:	10 0c       	add	r12,r8
8001b1d6:	8f 7c       	st.w	r7[0x1c],r12
    else
        fs->lba_begin = 0;

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
8001b1d8:	0c 9b       	mov	r11,r6
8001b1da:	6e d8       	ld.w	r8,r7[0x34]
8001b1dc:	30 1a       	mov	r10,1
8001b1de:	5d 18       	icall	r8
8001b1e0:	cb 90       	breq	8001b152 <fatfs_init+0x1e>
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
8001b1e2:	ef 36 00 50 	ld.ub	r6,r7[80]
8001b1e6:	ef 3a 00 4f 	ld.ub	r10,r7[79]
8001b1ea:	ec 08 15 08 	lsl	r8,r6,0x8
8001b1ee:	14 08       	add	r8,r10
8001b1f0:	e0 48 02 00 	cp.w	r8,512
8001b1f4:	c0 70       	breq	8001b202 <fatfs_init+0xce>
8001b1f6:	3f ec       	mov	r12,-2
8001b1f8:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    // Read LBA Begin for the file system
    if (valid_partition)        
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
8001b1fc:	30 0c       	mov	r12,0
8001b1fe:	8f 7c       	st.w	r7[0x1c],r12
8001b200:	ce cb       	rjmp	8001b1d8 <fatfs_init+0xa4>
    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
8001b202:	ef 38 00 51 	ld.ub	r8,r7[81]
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
8001b206:	ef 39 00 55 	ld.ub	r9,r7[85]
    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
8001b20a:	ae 88       	st.b	r7[0x0],r8
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
8001b20c:	ef 38 00 56 	ld.ub	r8,r7[86]
8001b210:	a9 68       	lsl	r8,0x8
8001b212:	f2 08 00 08 	add	r8,r9,r8
8001b216:	ef 58 00 28 	st.h	r7[40],r8

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
8001b21a:	ef 39 00 5b 	ld.ub	r9,r7[91]
8001b21e:	ef 38 00 5a 	ld.ub	r8,r7[90]
8001b222:	f2 05 15 08 	lsl	r5,r9,0x8
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
8001b226:	ef 3c 00 53 	ld.ub	r12,r7[83]
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
8001b22a:	10 05       	add	r5,r8
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
8001b22c:	ef 3b 00 52 	ld.ub	r11,r7[82]
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
8001b230:	ef 3e 00 54 	ld.ub	lr,r7[84]
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
8001b234:	c1 01       	brne	8001b254 <fatfs_init+0x120>
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
8001b236:	ef 35 00 6a 	ld.ub	r5,r7[106]
8001b23a:	b1 65       	lsl	r5,0x10
8001b23c:	ef 34 00 6b 	ld.ub	r4,r7[107]
8001b240:	b9 64       	lsl	r4,0x18
8001b242:	0a 04       	add	r4,r5
8001b244:	ef 35 00 68 	ld.ub	r5,r7[104]
8001b248:	0a 04       	add	r4,r5
8001b24a:	ef 35 00 69 	ld.ub	r5,r7[105]
8001b24e:	a9 65       	lsl	r5,0x8
8001b250:	e8 05 00 05 	add	r5,r4,r5
8001b254:	8f 85       	st.w	r7[0x20],r5
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
8001b256:	ef 35 00 72 	ld.ub	r5,r7[114]
8001b25a:	b1 65       	lsl	r5,0x10
8001b25c:	ef 34 00 73 	ld.ub	r4,r7[115]
8001b260:	b9 64       	lsl	r4,0x18
8001b262:	0a 04       	add	r4,r5
8001b264:	ef 35 00 70 	ld.ub	r5,r7[112]
8001b268:	0a 04       	add	r4,r5
8001b26a:	ef 35 00 71 	ld.ub	r5,r7[113]
8001b26e:	a9 65       	lsl	r5,0x8
8001b270:	e8 05 00 05 	add	r5,r4,r5
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001b274:	ef 13 00 28 	ld.uh	r3,r7[40]
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001b278:	ef 34 00 74 	ld.ub	r4,r7[116]
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
8001b27c:	8f 25       	st.w	r7[0x8],r5
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001b27e:	a5 73       	lsl	r3,0x5
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001b280:	ef 35 00 75 	ld.ub	r5,r7[117]

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001b284:	e6 c3 fe 01 	sub	r3,r3,-511
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001b288:	a9 65       	lsl	r5,0x8

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001b28a:	a9 53       	asr	r3,0x9
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001b28c:	e8 05 00 05 	add	r5,r4,r5

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001b290:	8f 43       	st.w	r7[0x10],r3
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001b292:	ef 55 00 18 	st.h	r7[24],r5

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
8001b296:	6e 84       	ld.w	r4,r7[0x20]
8001b298:	f8 05 15 08 	lsl	r5,r12,0x8
8001b29c:	fc 04 02 44 	mul	r4,lr,r4
8001b2a0:	16 05       	add	r5,r11
8001b2a2:	5c 75       	castu.h	r5
8001b2a4:	ea 04 00 03 	add	r3,r5,r4
8001b2a8:	8f 33       	st.w	r7[0xc],r3
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
8001b2aa:	6e 73       	ld.w	r3,r7[0x1c]
8001b2ac:	06 05       	add	r5,r3

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
8001b2ae:	ea 04 00 04 	add	r4,r5,r4
    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
8001b2b2:	8f 55       	st.w	r7[0x14],r5

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
8001b2b4:	8f 14       	st.w	r7[0x4],r4

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
8001b2b6:	ef 35 02 42 	ld.ub	r5,r7[578]
8001b2ba:	ef 34 02 43 	ld.ub	r4,r7[579]
8001b2be:	a9 64       	lsl	r4,0x8
8001b2c0:	e8 05 00 05 	add	r5,r4,r5
8001b2c4:	e0 45 aa 55 	cp.w	r5,43605
8001b2c8:	fe 91 ff 53 	brne	8001b16e <fatfs_init+0x3a>
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
8001b2cc:	a9 69       	lsl	r9,0x8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
8001b2ce:	ef 33 00 56 	ld.ub	r3,r7[86]
    
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
8001b2d2:	f2 08 00 05 	add	r5,r9,r8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
8001b2d6:	ef 34 00 55 	ld.ub	r4,r7[85]
    
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
8001b2da:	c0 f1       	brne	8001b2f8 <fatfs_init+0x1c4>
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);  
8001b2dc:	ef 38 00 6a 	ld.ub	r8,r7[106]
8001b2e0:	b1 68       	lsl	r8,0x10
8001b2e2:	ef 35 00 6b 	ld.ub	r5,r7[107]
8001b2e6:	b9 65       	lsl	r5,0x18
8001b2e8:	10 05       	add	r5,r8
8001b2ea:	ef 38 00 68 	ld.ub	r8,r7[104]
8001b2ee:	10 05       	add	r5,r8
8001b2f0:	ef 38 00 69 	ld.ub	r8,r7[105]
8001b2f4:	a9 68       	lsl	r8,0x8
8001b2f6:	10 05       	add	r5,r8

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
8001b2f8:	ef 39 00 58 	ld.ub	r9,r7[88]
8001b2fc:	ef 38 00 57 	ld.ub	r8,r7[87]
8001b300:	a9 69       	lsl	r9,0x8
8001b302:	10 09       	add	r9,r8
8001b304:	c0 f1       	brne	8001b322 <fatfs_init+0x1ee>
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
8001b306:	ef 38 00 66 	ld.ub	r8,r7[102]
8001b30a:	b1 68       	lsl	r8,0x10
8001b30c:	ef 39 00 67 	ld.ub	r9,r7[103]
8001b310:	b9 69       	lsl	r9,0x18
8001b312:	10 09       	add	r9,r8
8001b314:	ef 38 00 64 	ld.ub	r8,r7[100]
8001b318:	10 09       	add	r9,r8
8001b31a:	ef 38 00 65 	ld.ub	r8,r7[101]
8001b31e:	a9 68       	lsl	r8,0x8
8001b320:	10 09       	add	r9,r8

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
8001b322:	0f 88       	ld.ub	r8,r7[0x0]
8001b324:	58 08       	cp.w	r8,0
8001b326:	c0 41       	brne	8001b32e <fatfs_init+0x1fa>
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
8001b328:	3f bc       	mov	r12,-5
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;    
}
8001b32a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
8001b32e:	a9 6c       	lsl	r12,0x8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
8001b330:	a9 66       	lsl	r6,0x8
    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
8001b332:	a9 63       	lsl	r3,0x8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
8001b334:	ec 0a 00 0a 	add	r10,r6,r10
    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
8001b338:	e6 04 00 04 	add	r4,r3,r4
8001b33c:	ea 0e 02 4e 	mul	lr,r5,lr
8001b340:	f8 0b 00 0b 	add	r11,r12,r11
8001b344:	f4 c5 00 01 	sub	r5,r10,1
8001b348:	e8 0c 15 05 	lsl	r12,r4,0x5
8001b34c:	18 05       	add	r5,r12
8001b34e:	ea 0a 0c 04 	divs	r4,r5,r10
8001b352:	e8 0a 11 00 	rsub	r10,r4,0
8001b356:	16 1a       	sub	r10,r11
8001b358:	1c 1a       	sub	r10,lr
8001b35a:	f4 09 00 09 	add	r9,r10,r9
8001b35e:	f2 08 0d 08 	divu	r8,r9,r8

        if(count_of_clusters < 4085) 
8001b362:	e0 48 0f f4 	cp.w	r8,4084
8001b366:	fe 98 ff e1 	brls	8001b328 <fatfs_init+0x1f4>
            // Volume is FAT12 
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525) 
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
8001b36a:	e0 48 ff f4 	cp.w	r8,65524
8001b36e:	f9 bc 08 00 	movls	r12,0

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
8001b372:	ef fc 8a 0c 	st.wls	r7[0x30],r12
            // Volume is FAT12 
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525) 
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
8001b376:	ef fc 8a 02 	st.wls	r7[0x8],r12
            return FAT_INIT_OK;
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
8001b37a:	f9 b8 0b 01 	movhi	r8,1
8001b37e:	ef f8 ba 0c 	st.whi	r7[0x30],r8
8001b382:	f9 bc 0b 00 	movhi	r12,0
            return FAT_INIT_OK;
8001b386:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8001b38a:	d7 03       	nop

8001b38c <T.41>:
8001b38c:	eb cd 40 f8 	pushm	r3-r7,lr
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001b390:	58 0b       	cp.w	r11,0
8001b392:	5f 09       	sreq	r9
8001b394:	78 c8       	ld.w	r8,r12[0x30]
}
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
8001b396:	18 97       	mov	r7,r12
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001b398:	58 08       	cp.w	r8,0
8001b39a:	5f 08       	sreq	r8
}
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
8001b39c:	14 94       	mov	r4,r10
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001b39e:	f3 e8 00 08 	and	r8,r9,r8
8001b3a2:	c0 f0       	breq	8001b3c0 <T.41+0x34>
    {
        if (offset < fs->rootdir_sectors)
8001b3a4:	78 48       	ld.w	r8,r12[0x10]
8001b3a6:	14 38       	cp.w	r8,r10
8001b3a8:	e0 88 00 1d 	brls	8001b3e2 <T.41+0x56>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
8001b3ac:	6e 78       	ld.w	r8,r7[0x1c]
8001b3ae:	78 3c       	ld.w	r12,r12[0xc]
8001b3b0:	10 0c       	add	r12,r8

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001b3b2:	ee f8 02 44 	ld.w	r8,r7[580]

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
8001b3b6:	14 0c       	add	r12,r10

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001b3b8:	10 3c       	cp.w	r12,r8
8001b3ba:	c2 01       	brne	8001b3fa <T.41+0x6e>
8001b3bc:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
8001b3c0:	19 83       	ld.ub	r3,r12[0x0]
8001b3c2:	f4 03 0d 08 	divu	r8,r10,r3
8001b3c6:	10 95       	mov	r5,r8
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001b3c8:	58 08       	cp.w	r8,0
8001b3ca:	c0 a0       	breq	8001b3de <T.41+0x52>
8001b3cc:	30 06       	mov	r6,0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
8001b3ce:	0e 9c       	mov	r12,r7
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001b3d0:	2f f6       	sub	r6,-1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
8001b3d2:	e0 a0 12 a7 	rcall	8001d920 <fatfs_find_next_cluster>
8001b3d6:	18 9b       	mov	r11,r12
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001b3d8:	0c 35       	cp.w	r5,r6
8001b3da:	fe 9b ff fa 	brhi	8001b3ce <T.41+0x42>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
8001b3de:	5b fb       	cp.w	r11,-1
8001b3e0:	c0 31       	brne	8001b3e6 <T.41+0x5a>
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
    {
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001b3e2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
8001b3e6:	0e 9c       	mov	r12,r7
8001b3e8:	c7 ee       	rcall	8001b0e4 <fatfs_lba_of_cluster>
8001b3ea:	a7 35       	mul	r5,r3
8001b3ec:	ee f8 02 44 	ld.w	r8,r7[580]

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001b3f0:	0a 14       	sub	r4,r5
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
8001b3f2:	e8 0c 00 0c 	add	r12,r4,r12
8001b3f6:	10 3c       	cp.w	r12,r8

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001b3f8:	ce 20       	breq	8001b3bc <T.41+0x30>
8001b3fa:	ef 4c 02 44 	st.w	r7[580],r12
    {
        fs->currentsector.address = lba;
8001b3fe:	ee cb ff bc 	sub	r11,r7,-68
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001b402:	6e d8       	ld.w	r8,r7[0x34]
8001b404:	30 1a       	mov	r10,1
8001b406:	5d 18       	icall	r8
8001b408:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

8001b40c <fatfs_get_file_entry>:
8001b40c:	d4 31       	pushm	r0-r7,lr
8001b40e:	fa cd 01 28 	sub	sp,sp,296
8001b412:	18 97       	mov	r7,r12
8001b414:	50 1b       	stdsp	sp[0x4],r11
8001b416:	14 96       	mov	r6,r10
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
8001b418:	30 1b       	mov	r11,1
}
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
8001b41a:	50 39       	stdsp	sp[0xc],r9
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
8001b41c:	fa c5 ff ee 	sub	r5,sp,-18
8001b420:	0a 9c       	mov	r12,r5
8001b422:	e0 a0 0c bc 	rcall	8001cd9a <fatfs_lfn_cache_init>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b426:	ee cb ff bc 	sub	r11,r7,-68
8001b42a:	30 04       	mov	r4,0
8001b42c:	50 2b       	stdsp	sp[0x8],r11
8001b42e:	08 9a       	mov	r10,r4

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
8001b430:	40 1b       	lddsp	r11,sp[0x4]
8001b432:	2f f4       	sub	r4,-1
8001b434:	0e 9c       	mov	r12,r7
8001b436:	ca bf       	rcall	8001b38c <T.41>
8001b438:	e0 80 00 90 	breq	8001b558 <fatfs_get_file_entry+0x14c>
8001b43c:	40 23       	lddsp	r3,sp[0x8]
8001b43e:	30 02       	mov	r2,0
8001b440:	32 01       	mov	r1,32
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
8001b442:	32 e0       	mov	r0,46

                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
8001b444:	c0 d8       	rjmp	8001b45e <fatfs_get_file_entry+0x52>
8001b446:	e4 cb ff bc 	sub	r11,r2,-68
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
8001b44a:	0a 9c       	mov	r12,r5
8001b44c:	ee 0b 00 0b 	add	r11,r7,r11
8001b450:	e0 a0 0a d8 	rcall	8001ca00 <fatfs_lfn_cache_entry>
8001b454:	2e 03       	sub	r3,-32
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
                        return 1;
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
8001b456:	2e 02       	sub	r2,-32
8001b458:	e0 42 02 00 	cp.w	r2,512
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
8001b45c:	ce 90       	breq	8001b42e <fatfs_get_file_entry+0x22>
8001b45e:	06 9c       	mov	r12,r3
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b460:	e0 a0 0b b7 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b464:	18 9b       	mov	r11,r12
8001b466:	cf 01       	brne	8001b446 <fatfs_get_file_entry+0x3a>
8001b468:	50 0b       	stdsp	sp[0x0],r11
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b46a:	06 9c       	mov	r12,r3
8001b46c:	e0 a0 0b b8 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b470:	40 0b       	lddsp	r11,sp[0x0]
8001b472:	c6 01       	brne	8001b532 <fatfs_get_file_entry+0x126>
8001b474:	06 9b       	mov	r11,r3
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists 
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) ) 
8001b476:	0a 9c       	mov	r12,r5
8001b478:	e0 a0 0b cb 	rcall	8001cc0e <fatfs_entry_lfn_exists>
8001b47c:	18 98       	mov	r8,r12
8001b47e:	c0 d0       	breq	8001b498 <fatfs_get_file_entry+0x8c>
8001b480:	0a 9c       	mov	r12,r5
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
8001b482:	e0 a0 0b 8f 	rcall	8001cba0 <fatfs_lfn_cache_get>
8001b486:	0c 9b       	mov	r11,r6

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find)) 
8001b488:	e0 a0 0f c0 	rcall	8001d408 <fatfs_compare_names>
8001b48c:	c6 01       	brne	8001b54c <fatfs_get_file_entry+0x140>
8001b48e:	18 9b       	mov	r11,r12
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
                        return 1;
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
8001b490:	0a 9c       	mov	r12,r5
8001b492:	e0 a0 0c 84 	rcall	8001cd9a <fatfs_lfn_cache_init>
8001b496:	cd fb       	rjmp	8001b454 <fatfs_get_file_entry+0x48>
8001b498:	50 08       	stdsp	sp[0x0],r8
                }                 
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b49a:	06 9c       	mov	r12,r3
8001b49c:	e0 a0 0b d4 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b4a0:	40 08       	lddsp	r8,sp[0x0]
8001b4a2:	cd 90       	breq	8001b454 <fatfs_get_file_entry+0x48>
8001b4a4:	30 0a       	mov	r10,0
                {
                    memset(short_filename, 0, sizeof(short_filename));
8001b4a6:	30 0b       	mov	r11,0
8001b4a8:	fa eb 01 18 	st.d	sp[280],r10
8001b4ac:	54 88       	stdsp	sp[0x120],r8
8001b4ae:	fb 68 01 24 	st.b	sp[292],r8
8001b4b2:	07 88       	ld.ub	r8,r3[0x0]

                    // Copy name to string
                    for (i=0; i<8; i++) 
                        short_filename[i] = directoryEntry->Name[i];
8001b4b4:	fb 68 01 18 	st.b	sp[280],r8
8001b4b8:	07 99       	ld.ub	r9,r3[0x1]
8001b4ba:	fb 69 01 19 	st.b	sp[281],r9
8001b4be:	07 a9       	ld.ub	r9,r3[0x2]
8001b4c0:	fb 69 01 1a 	st.b	sp[282],r9
8001b4c4:	07 b9       	ld.ub	r9,r3[0x3]
8001b4c6:	fb 69 01 1b 	st.b	sp[283],r9
8001b4ca:	07 c9       	ld.ub	r9,r3[0x4]
8001b4cc:	fb 69 01 1c 	st.b	sp[284],r9
8001b4d0:	07 d9       	ld.ub	r9,r3[0x5]
8001b4d2:	fb 69 01 1d 	st.b	sp[285],r9
8001b4d6:	07 e9       	ld.ub	r9,r3[0x6]
8001b4d8:	fb 69 01 1e 	st.b	sp[286],r9
8001b4dc:	07 f9       	ld.ub	r9,r3[0x7]
8001b4de:	fb 69 01 1f 	st.b	sp[287],r9
8001b4e2:	e7 39 00 08 	ld.ub	r9,r3[8]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
8001b4e6:	fb 69 01 21 	st.b	sp[289],r9
8001b4ea:	e7 39 00 09 	ld.ub	r9,r3[9]
8001b4ee:	e7 3a 00 08 	ld.ub	r10,r3[8]
                        if (directoryEntry->Name[i] != ' ')
8001b4f2:	fb 69 01 22 	st.b	sp[290],r9

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
8001b4f6:	e7 39 00 09 	ld.ub	r9,r3[9]
                        if (directoryEntry->Name[i] != ' ')
8001b4fa:	e2 09 18 00 	cp.b	r9,r1
8001b4fe:	c1 e0       	breq	8001b53a <fatfs_get_file_entry+0x12e>
8001b500:	30 1b       	mov	r11,1
8001b502:	e7 39 00 0a 	ld.ub	r9,r3[10]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
8001b506:	fb 69 01 23 	st.b	sp[291],r9
8001b50a:	e7 39 00 0a 	ld.ub	r9,r3[10]
                        if (directoryEntry->Name[i] != ' ')
8001b50e:	e2 09 18 00 	cp.b	r9,r1
8001b512:	c1 80       	breq	8001b542 <fatfs_get_file_entry+0x136>
8001b514:	f0 00 18 00 	cp.b	r0,r8
                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
8001b518:	e2 09 17 00 	moveq	r9,r1
8001b51c:	e0 09 17 10 	movne	r9,r0
8001b520:	fb 69 01 20 	st.b	sp[288],r9
8001b524:	0c 9b       	mov	r11,r6
                    }
                    else
                        short_filename[8] = ' ';
                    
                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find)) 
8001b526:	fa cc fe e8 	sub	r12,sp,-280
8001b52a:	e0 a0 0f 6f 	rcall	8001d408 <fatfs_compare_names>
8001b52e:	c0 f1       	brne	8001b54c <fatfs_get_file_entry+0x140>
8001b530:	18 9b       	mov	r11,r12
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
                        return 1;
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
8001b532:	0a 9c       	mov	r12,r5
8001b534:	e0 a0 0c 33 	rcall	8001cd9a <fatfs_lfn_cache_init>
8001b538:	c8 eb       	rjmp	8001b454 <fatfs_get_file_entry+0x48>
8001b53a:	e2 0a 18 00 	cp.b	r10,r1
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
8001b53e:	5f 1b       	srne	r11
8001b540:	ce 1b       	rjmp	8001b502 <fatfs_get_file_entry+0xf6>
8001b542:	58 0b       	cp.w	r11,0
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
8001b544:	ce 81       	brne	8001b514 <fatfs_get_file_entry+0x108>
8001b546:	fb 69 01 20 	st.b	sp[288],r9
                            short_filename[8] = '.';
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
8001b54a:	ce db       	rjmp	8001b524 <fatfs_get_file_entry+0x118>
8001b54c:	06 9b       	mov	r11,r3
                    
                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find)) 
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
8001b54e:	40 3c       	lddsp	r12,sp[0xc]
8001b550:	32 0a       	mov	r10,32
8001b552:	e0 a0 3f 5d 	rcall	8002340c <memcpy>
8001b556:	30 1c       	mov	r12,1
8001b558:	2b 6d       	sub	sp,-296
        else
            break;
    } // End of while loop

    return 0;
}
8001b55a:	d8 32       	popm	r0-r7,pc

8001b55c <fatfs_sfn_exists>:
8001b55c:	d4 31       	pushm	r0-r7,lr
8001b55e:	20 6d       	sub	sp,24
8001b560:	f8 c8 fe fc 	sub	r8,r12,-260
8001b564:	50 18       	stdsp	sp[0x4],r8
8001b566:	f8 c8 fe dc 	sub	r8,r12,-292
8001b56a:	18 95       	mov	r5,r12
8001b56c:	50 28       	stdsp	sp[0x8],r8
8001b56e:	50 4b       	stdsp	sp[0x10],r11
8001b570:	f8 c8 fe bc 	sub	r8,r12,-324
8001b574:	50 5a       	stdsp	sp[0x14],r10
8001b576:	f8 c7 ff bc 	sub	r7,r12,-68
8001b57a:	30 06       	mov	r6,0
8001b57c:	f8 c2 ff 9c 	sub	r2,r12,-100
8001b580:	f8 c3 ff 7c 	sub	r3,r12,-132
8001b584:	f8 c4 ff 5c 	sub	r4,r12,-164
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b588:	f8 c1 ff 3c 	sub	r1,r12,-196
8001b58c:	f8 c0 ff 1c 	sub	r0,r12,-228
8001b590:	50 38       	stdsp	sp[0xc],r8
8001b592:	0c 9a       	mov	r10,r6

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
8001b594:	40 4b       	lddsp	r11,sp[0x10]
8001b596:	2f f6       	sub	r6,-1
8001b598:	0a 9c       	mov	r12,r5
8001b59a:	cf 9e       	rcall	8001b38c <T.41>
8001b59c:	c7 10       	breq	8001b67e <fatfs_sfn_exists+0x122>
8001b59e:	0e 9c       	mov	r12,r7
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b5a0:	e0 a0 0b 17 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5a4:	e0 80 00 fd 	breq	8001b79e <fatfs_sfn_exists+0x242>
8001b5a8:	04 9c       	mov	r12,r2
8001b5aa:	e0 a0 0b 12 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5ae:	e0 80 00 e5 	breq	8001b778 <fatfs_sfn_exists+0x21c>
8001b5b2:	06 9c       	mov	r12,r3
8001b5b4:	e0 a0 0b 0d 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5b8:	e0 80 00 cd 	breq	8001b752 <fatfs_sfn_exists+0x1f6>
8001b5bc:	08 9c       	mov	r12,r4
8001b5be:	e0 a0 0b 08 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5c2:	e0 80 00 b5 	breq	8001b72c <fatfs_sfn_exists+0x1d0>
8001b5c6:	02 9c       	mov	r12,r1
8001b5c8:	e0 a0 0b 03 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5cc:	e0 80 00 9d 	breq	8001b706 <fatfs_sfn_exists+0x1aa>
8001b5d0:	00 9c       	mov	r12,r0
8001b5d2:	e0 a0 0a fe 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5d6:	e0 80 00 85 	breq	8001b6e0 <fatfs_sfn_exists+0x184>
8001b5da:	40 1c       	lddsp	r12,sp[0x4]
8001b5dc:	e0 a0 0a f9 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5e0:	c7 00       	breq	8001b6c0 <fatfs_sfn_exists+0x164>
8001b5e2:	40 2c       	lddsp	r12,sp[0x8]
8001b5e4:	e0 a0 0a f5 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5e8:	c5 c0       	breq	8001b6a0 <fatfs_sfn_exists+0x144>
8001b5ea:	40 3c       	lddsp	r12,sp[0xc]
8001b5ec:	e0 a0 0a f1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5f0:	c4 90       	breq	8001b682 <fatfs_sfn_exists+0x126>
8001b5f2:	ee c8 fe e0 	sub	r8,r7,-288
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b5f6:	50 08       	stdsp	sp[0x0],r8
8001b5f8:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b5fa:	e0 a0 0a ea 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b5fe:	e0 80 00 f5 	breq	8001b7e8 <fatfs_sfn_exists+0x28c>
8001b602:	ee c8 fe c0 	sub	r8,r7,-320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b606:	50 08       	stdsp	sp[0x0],r8
8001b608:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b60a:	e0 a0 0a e2 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b60e:	e0 80 00 db 	breq	8001b7c4 <fatfs_sfn_exists+0x268>
8001b612:	ee c8 fe a0 	sub	r8,r7,-352
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b616:	50 08       	stdsp	sp[0x0],r8
8001b618:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b61a:	e0 a0 0a da 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b61e:	e0 80 01 31 	breq	8001b880 <fatfs_sfn_exists+0x324>
8001b622:	ee c8 fe 80 	sub	r8,r7,-384
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b626:	50 08       	stdsp	sp[0x0],r8
8001b628:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b62a:	e0 a0 0a d2 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b62e:	e0 80 01 16 	breq	8001b85a <fatfs_sfn_exists+0x2fe>
8001b632:	ee c8 fe 60 	sub	r8,r7,-416
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b636:	50 08       	stdsp	sp[0x0],r8
8001b638:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b63a:	e0 a0 0a ca 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b63e:	e0 80 00 fb 	breq	8001b834 <fatfs_sfn_exists+0x2d8>
8001b642:	ee c8 fe 40 	sub	r8,r7,-448
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b646:	50 08       	stdsp	sp[0x0],r8
8001b648:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b64a:	e0 a0 0a c2 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b64e:	e0 80 00 e0 	breq	8001b80e <fatfs_sfn_exists+0x2b2>
8001b652:	ee c8 fe 20 	sub	r8,r7,-480
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b656:	50 08       	stdsp	sp[0x0],r8
8001b658:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b65a:	e0 a0 0a ba 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b65e:	c9 a1       	brne	8001b592 <fatfs_sfn_exists+0x36>
8001b660:	40 0c       	lddsp	r12,sp[0x0]
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b662:	e0 a0 0a bd 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b666:	c9 61       	brne	8001b592 <fatfs_sfn_exists+0x36>
8001b668:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b66a:	e0 a0 0a ed 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b66e:	c9 20       	breq	8001b592 <fatfs_sfn_exists+0x36>
8001b670:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b672:	30 ba       	mov	r10,11
8001b674:	40 5b       	lddsp	r11,sp[0x14]
8001b676:	e0 a0 3f e8 	rcall	80023646 <strncmp>
8001b67a:	c8 c1       	brne	8001b592 <fatfs_sfn_exists+0x36>
8001b67c:	30 1c       	mov	r12,1
8001b67e:	2f ad       	sub	sp,-24
        else
            break;
    } // End of while loop

    return 0;
}
8001b680:	d8 32       	popm	r0-r7,pc
8001b682:	40 3c       	lddsp	r12,sp[0xc]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b684:	e0 a0 0a ac 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b688:	cb 51       	brne	8001b5f2 <fatfs_sfn_exists+0x96>
8001b68a:	40 3c       	lddsp	r12,sp[0xc]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b68c:	e0 a0 0a dc 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b690:	cb 10       	breq	8001b5f2 <fatfs_sfn_exists+0x96>
8001b692:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b694:	40 5b       	lddsp	r11,sp[0x14]
8001b696:	40 3c       	lddsp	r12,sp[0xc]
8001b698:	e0 a0 3f d7 	rcall	80023646 <strncmp>
8001b69c:	ca b1       	brne	8001b5f2 <fatfs_sfn_exists+0x96>
8001b69e:	ce fb       	rjmp	8001b67c <fatfs_sfn_exists+0x120>
8001b6a0:	40 2c       	lddsp	r12,sp[0x8]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b6a2:	e0 a0 0a 9d 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b6a6:	ca 21       	brne	8001b5ea <fatfs_sfn_exists+0x8e>
8001b6a8:	40 2c       	lddsp	r12,sp[0x8]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b6aa:	e0 a0 0a cd 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b6ae:	c9 e0       	breq	8001b5ea <fatfs_sfn_exists+0x8e>
8001b6b0:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b6b2:	40 5b       	lddsp	r11,sp[0x14]
8001b6b4:	40 2c       	lddsp	r12,sp[0x8]
8001b6b6:	e0 a0 3f c8 	rcall	80023646 <strncmp>
8001b6ba:	c9 81       	brne	8001b5ea <fatfs_sfn_exists+0x8e>
8001b6bc:	30 1c       	mov	r12,1
8001b6be:	ce 0b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b6c0:	40 1c       	lddsp	r12,sp[0x4]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b6c2:	e0 a0 0a 8d 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b6c6:	c8 e1       	brne	8001b5e2 <fatfs_sfn_exists+0x86>
8001b6c8:	40 1c       	lddsp	r12,sp[0x4]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b6ca:	e0 a0 0a bd 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b6ce:	c8 a0       	breq	8001b5e2 <fatfs_sfn_exists+0x86>
8001b6d0:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b6d2:	40 5b       	lddsp	r11,sp[0x14]
8001b6d4:	40 1c       	lddsp	r12,sp[0x4]
8001b6d6:	e0 a0 3f b8 	rcall	80023646 <strncmp>
8001b6da:	c8 41       	brne	8001b5e2 <fatfs_sfn_exists+0x86>
8001b6dc:	30 1c       	mov	r12,1
8001b6de:	cd 0b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b6e0:	00 9c       	mov	r12,r0
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b6e2:	e0 a0 0a 7d 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b6e6:	fe 91 ff 7a 	brne	8001b5da <fatfs_sfn_exists+0x7e>
8001b6ea:	00 9c       	mov	r12,r0
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b6ec:	e0 a0 0a ac 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b6f0:	fe 90 ff 75 	breq	8001b5da <fatfs_sfn_exists+0x7e>
8001b6f4:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b6f6:	40 5b       	lddsp	r11,sp[0x14]
8001b6f8:	00 9c       	mov	r12,r0
8001b6fa:	e0 a0 3f a6 	rcall	80023646 <strncmp>
8001b6fe:	fe 91 ff 6e 	brne	8001b5da <fatfs_sfn_exists+0x7e>
8001b702:	30 1c       	mov	r12,1
8001b704:	cb db       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b706:	02 9c       	mov	r12,r1
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b708:	e0 a0 0a 6a 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b70c:	fe 91 ff 62 	brne	8001b5d0 <fatfs_sfn_exists+0x74>
8001b710:	02 9c       	mov	r12,r1
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b712:	e0 a0 0a 99 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b716:	fe 90 ff 5d 	breq	8001b5d0 <fatfs_sfn_exists+0x74>
8001b71a:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b71c:	40 5b       	lddsp	r11,sp[0x14]
8001b71e:	02 9c       	mov	r12,r1
8001b720:	e0 a0 3f 93 	rcall	80023646 <strncmp>
8001b724:	fe 91 ff 56 	brne	8001b5d0 <fatfs_sfn_exists+0x74>
8001b728:	30 1c       	mov	r12,1
8001b72a:	ca ab       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b72c:	08 9c       	mov	r12,r4
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b72e:	e0 a0 0a 57 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b732:	fe 91 ff 4a 	brne	8001b5c6 <fatfs_sfn_exists+0x6a>
8001b736:	08 9c       	mov	r12,r4
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b738:	e0 a0 0a 86 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b73c:	fe 90 ff 45 	breq	8001b5c6 <fatfs_sfn_exists+0x6a>
8001b740:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b742:	40 5b       	lddsp	r11,sp[0x14]
8001b744:	08 9c       	mov	r12,r4
8001b746:	e0 a0 3f 80 	rcall	80023646 <strncmp>
8001b74a:	fe 91 ff 3e 	brne	8001b5c6 <fatfs_sfn_exists+0x6a>
8001b74e:	30 1c       	mov	r12,1
8001b750:	c9 7b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b752:	06 9c       	mov	r12,r3
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b754:	e0 a0 0a 44 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b758:	fe 91 ff 32 	brne	8001b5bc <fatfs_sfn_exists+0x60>
8001b75c:	06 9c       	mov	r12,r3
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b75e:	e0 a0 0a 73 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b762:	fe 90 ff 2d 	breq	8001b5bc <fatfs_sfn_exists+0x60>
8001b766:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b768:	40 5b       	lddsp	r11,sp[0x14]
8001b76a:	06 9c       	mov	r12,r3
8001b76c:	e0 a0 3f 6d 	rcall	80023646 <strncmp>
8001b770:	fe 91 ff 26 	brne	8001b5bc <fatfs_sfn_exists+0x60>
8001b774:	30 1c       	mov	r12,1
8001b776:	c8 4b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b778:	04 9c       	mov	r12,r2
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b77a:	e0 a0 0a 31 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b77e:	fe 91 ff 1a 	brne	8001b5b2 <fatfs_sfn_exists+0x56>
8001b782:	04 9c       	mov	r12,r2
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b784:	e0 a0 0a 60 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b788:	fe 90 ff 15 	breq	8001b5b2 <fatfs_sfn_exists+0x56>
8001b78c:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b78e:	40 5b       	lddsp	r11,sp[0x14]
8001b790:	04 9c       	mov	r12,r2
8001b792:	e0 a0 3f 5a 	rcall	80023646 <strncmp>
8001b796:	fe 91 ff 0e 	brne	8001b5b2 <fatfs_sfn_exists+0x56>
8001b79a:	30 1c       	mov	r12,1
8001b79c:	c7 1b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b79e:	0e 9c       	mov	r12,r7
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b7a0:	e0 a0 0a 1e 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b7a4:	fe 91 ff 02 	brne	8001b5a8 <fatfs_sfn_exists+0x4c>
8001b7a8:	0e 9c       	mov	r12,r7
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b7aa:	e0 a0 0a 4d 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b7ae:	fe 90 fe fd 	breq	8001b5a8 <fatfs_sfn_exists+0x4c>
8001b7b2:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b7b4:	40 5b       	lddsp	r11,sp[0x14]
8001b7b6:	0e 9c       	mov	r12,r7
8001b7b8:	e0 a0 3f 47 	rcall	80023646 <strncmp>
8001b7bc:	fe 91 fe f6 	brne	8001b5a8 <fatfs_sfn_exists+0x4c>
8001b7c0:	30 1c       	mov	r12,1
8001b7c2:	c5 eb       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b7c4:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b7c6:	e0 a0 0a 0b 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b7ca:	fe 91 ff 24 	brne	8001b612 <fatfs_sfn_exists+0xb6>
8001b7ce:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b7d0:	e0 a0 0a 3a 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b7d4:	fe 90 ff 1f 	breq	8001b612 <fatfs_sfn_exists+0xb6>
8001b7d8:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b7da:	30 ba       	mov	r10,11
8001b7dc:	40 5b       	lddsp	r11,sp[0x14]
8001b7de:	e0 a0 3f 34 	rcall	80023646 <strncmp>
8001b7e2:	fe 91 ff 18 	brne	8001b612 <fatfs_sfn_exists+0xb6>
8001b7e6:	c4 bb       	rjmp	8001b67c <fatfs_sfn_exists+0x120>
8001b7e8:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b7ea:	e0 a0 09 f9 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b7ee:	fe 91 ff 0a 	brne	8001b602 <fatfs_sfn_exists+0xa6>
8001b7f2:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b7f4:	e0 a0 0a 28 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b7f8:	fe 90 ff 05 	breq	8001b602 <fatfs_sfn_exists+0xa6>
8001b7fc:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b7fe:	30 ba       	mov	r10,11
8001b800:	40 5b       	lddsp	r11,sp[0x14]
8001b802:	e0 a0 3f 22 	rcall	80023646 <strncmp>
8001b806:	fe 91 fe fe 	brne	8001b602 <fatfs_sfn_exists+0xa6>
8001b80a:	30 1c       	mov	r12,1
8001b80c:	c3 9b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b80e:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b810:	e0 a0 09 e6 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b814:	fe 91 ff 1f 	brne	8001b652 <fatfs_sfn_exists+0xf6>
8001b818:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b81a:	e0 a0 0a 15 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b81e:	fe 90 ff 1a 	breq	8001b652 <fatfs_sfn_exists+0xf6>
8001b822:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b824:	30 ba       	mov	r10,11
8001b826:	40 5b       	lddsp	r11,sp[0x14]
8001b828:	e0 a0 3f 0f 	rcall	80023646 <strncmp>
8001b82c:	fe 91 ff 13 	brne	8001b652 <fatfs_sfn_exists+0xf6>
8001b830:	30 1c       	mov	r12,1
8001b832:	c2 6b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b834:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b836:	e0 a0 09 d3 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b83a:	fe 91 ff 04 	brne	8001b642 <fatfs_sfn_exists+0xe6>
8001b83e:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b840:	e0 a0 0a 02 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b844:	fe 90 fe ff 	breq	8001b642 <fatfs_sfn_exists+0xe6>
8001b848:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b84a:	30 ba       	mov	r10,11
8001b84c:	40 5b       	lddsp	r11,sp[0x14]
8001b84e:	e0 a0 3e fc 	rcall	80023646 <strncmp>
8001b852:	fe 91 fe f8 	brne	8001b642 <fatfs_sfn_exists+0xe6>
8001b856:	30 1c       	mov	r12,1
8001b858:	c1 3b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b85a:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b85c:	e0 a0 09 c0 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b860:	fe 91 fe e9 	brne	8001b632 <fatfs_sfn_exists+0xd6>
8001b864:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b866:	e0 a0 09 ef 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b86a:	fe 90 fe e4 	breq	8001b632 <fatfs_sfn_exists+0xd6>
8001b86e:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b870:	30 ba       	mov	r10,11
8001b872:	40 5b       	lddsp	r11,sp[0x14]
8001b874:	e0 a0 3e e9 	rcall	80023646 <strncmp>
8001b878:	fe 91 fe dd 	brne	8001b632 <fatfs_sfn_exists+0xd6>
8001b87c:	30 1c       	mov	r12,1
8001b87e:	c0 0b       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b880:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b882:	e0 a0 09 ad 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b886:	fe 91 fe ce 	brne	8001b622 <fatfs_sfn_exists+0xc6>
8001b88a:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b88c:	e0 a0 09 dc 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b890:	fe 90 fe c9 	breq	8001b622 <fatfs_sfn_exists+0xc6>
8001b894:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b896:	30 ba       	mov	r10,11
8001b898:	40 5b       	lddsp	r11,sp[0x14]
8001b89a:	e0 a0 3e d6 	rcall	80023646 <strncmp>
8001b89e:	fe 91 fe c2 	brne	8001b622 <fatfs_sfn_exists+0xc6>
8001b8a2:	30 1c       	mov	r12,1
8001b8a4:	ce da       	rjmp	8001b67e <fatfs_sfn_exists+0x122>
8001b8a6:	d7 03       	nop

8001b8a8 <fatfs_update_file_length>:
8001b8a8:	d4 31       	pushm	r0-r7,lr
8001b8aa:	20 8d       	sub	sp,32
8001b8ac:	50 4b       	stdsp	sp[0x10],r11
8001b8ae:	50 5a       	stdsp	sp[0x14],r10
8001b8b0:	50 79       	stdsp	sp[0x1c],r9
8001b8b2:	18 97       	mov	r7,r12
8001b8b4:	78 e8       	ld.w	r8,r12[0x38]
8001b8b6:	58 08       	cp.w	r8,0
8001b8b8:	e0 80 01 f4 	breq	8001bca0 <fatfs_update_file_length+0x3f8>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b8bc:	f8 ce ff 1c 	sub	lr,r12,-228
8001b8c0:	f8 c6 ff bc 	sub	r6,r12,-68
8001b8c4:	50 0e       	stdsp	sp[0x0],lr
8001b8c6:	f8 c9 fe fc 	sub	r9,r12,-260
8001b8ca:	f8 c8 fe dc 	sub	r8,r12,-292
8001b8ce:	f8 ce fe bc 	sub	lr,r12,-324
8001b8d2:	30 05       	mov	r5,0
8001b8d4:	50 66       	stdsp	sp[0x18],r6
8001b8d6:	f8 c2 ff 9c 	sub	r2,r12,-100
8001b8da:	f8 c3 ff 7c 	sub	r3,r12,-132
8001b8de:	f8 c1 ff 5c 	sub	r1,r12,-164
8001b8e2:	f8 c0 ff 3c 	sub	r0,r12,-196
8001b8e6:	50 19       	stdsp	sp[0x4],r9
8001b8e8:	50 28       	stdsp	sp[0x8],r8
8001b8ea:	50 3e       	stdsp	sp[0xc],lr
8001b8ec:	0a 9a       	mov	r10,r5

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
8001b8ee:	40 4b       	lddsp	r11,sp[0x10]
8001b8f0:	2f f5       	sub	r5,-1
8001b8f2:	0e 9c       	mov	r12,r7
8001b8f4:	fe b0 fd 4c 	rcall	8001b38c <T.41>
8001b8f8:	e0 80 01 d4 	breq	8001bca0 <fatfs_update_file_length+0x3f8>
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b8fc:	0c 9c       	mov	r12,r6
8001b8fe:	e0 a0 09 68 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b902:	e0 80 01 3c 	breq	8001bb7a <fatfs_update_file_length+0x2d2>
8001b906:	04 9c       	mov	r12,r2
8001b908:	e0 a0 09 63 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b90c:	e0 80 01 23 	breq	8001bb52 <fatfs_update_file_length+0x2aa>
8001b910:	06 9c       	mov	r12,r3
8001b912:	e0 a0 09 5e 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b916:	e0 80 01 0a 	breq	8001bb2a <fatfs_update_file_length+0x282>
8001b91a:	02 9c       	mov	r12,r1
8001b91c:	e0 a0 09 59 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b920:	e0 80 00 f1 	breq	8001bb02 <fatfs_update_file_length+0x25a>
8001b924:	00 9c       	mov	r12,r0
8001b926:	e0 a0 09 54 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b92a:	e0 80 00 d7 	breq	8001bad8 <fatfs_update_file_length+0x230>
8001b92e:	40 0c       	lddsp	r12,sp[0x0]
8001b930:	e0 a0 09 4f 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b934:	e0 80 00 bc 	breq	8001baac <fatfs_update_file_length+0x204>
8001b938:	40 1c       	lddsp	r12,sp[0x4]
8001b93a:	e0 a0 09 4a 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b93e:	e0 80 00 a1 	breq	8001ba80 <fatfs_update_file_length+0x1d8>
8001b942:	40 2c       	lddsp	r12,sp[0x8]
8001b944:	e0 a0 09 45 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b948:	e0 80 00 86 	breq	8001ba54 <fatfs_update_file_length+0x1ac>
8001b94c:	40 3c       	lddsp	r12,sp[0xc]
8001b94e:	e0 a0 09 40 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b952:	c6 e0       	breq	8001ba2e <fatfs_update_file_length+0x186>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b954:	ec c4 fe e0 	sub	r4,r6,-288

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b958:	08 9c       	mov	r12,r4
8001b95a:	e0 a0 09 3a 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b95e:	e0 80 01 35 	breq	8001bbc8 <fatfs_update_file_length+0x320>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b962:	ec c4 fe c0 	sub	r4,r6,-320

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b966:	08 9c       	mov	r12,r4
8001b968:	e0 a0 09 33 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b96c:	e0 80 01 19 	breq	8001bb9e <fatfs_update_file_length+0x2f6>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b970:	ec c4 fe a0 	sub	r4,r6,-352

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b974:	08 9c       	mov	r12,r4
8001b976:	e0 a0 09 2c 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b97a:	e0 80 01 7d 	breq	8001bc74 <fatfs_update_file_length+0x3cc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b97e:	ec c4 fe 80 	sub	r4,r6,-384

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b982:	08 9c       	mov	r12,r4
8001b984:	e0 a0 09 25 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b988:	e0 80 01 60 	breq	8001bc48 <fatfs_update_file_length+0x3a0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b98c:	ec c4 fe 60 	sub	r4,r6,-416

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b990:	08 9c       	mov	r12,r4
8001b992:	e0 a0 09 1e 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b996:	e0 80 01 43 	breq	8001bc1c <fatfs_update_file_length+0x374>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b99a:	ec c4 fe 40 	sub	r4,r6,-448

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b99e:	08 9c       	mov	r12,r4
8001b9a0:	e0 a0 09 17 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b9a4:	e0 80 01 27 	breq	8001bbf2 <fatfs_update_file_length+0x34a>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001b9a8:	ec c4 fe 20 	sub	r4,r6,-480

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001b9ac:	08 9c       	mov	r12,r4
8001b9ae:	e0 a0 09 10 	rcall	8001cbce <fatfs_entry_lfn_text>
8001b9b2:	c9 d1       	brne	8001b8ec <fatfs_update_file_length+0x44>
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001b9b4:	08 9c       	mov	r12,r4
8001b9b6:	e0 a0 09 13 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001b9ba:	c9 91       	brne	8001b8ec <fatfs_update_file_length+0x44>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001b9bc:	08 9c       	mov	r12,r4
8001b9be:	e0 a0 09 43 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001b9c2:	c9 50       	breq	8001b8ec <fatfs_update_file_length+0x44>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001b9c4:	30 ba       	mov	r10,11
8001b9c6:	40 5b       	lddsp	r11,sp[0x14]
8001b9c8:	08 9c       	mov	r12,r4
8001b9ca:	e0 a0 3e 3e 	rcall	80023646 <strncmp>
8001b9ce:	c8 f1       	brne	8001b8ec <fatfs_update_file_length+0x44>
8001b9d0:	50 64       	stdsp	sp[0x18],r4
8001b9d2:	e0 6c 01 e0 	mov	r12,480
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001b9d6:	40 79       	lddsp	r9,sp[0x1c]
8001b9d8:	e6 19 00 ff 	andh	r9,0xff,COH
8001b9dc:	40 7e       	lddsp	lr,sp[0x1c]
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001b9de:	40 6b       	lddsp	r11,sp[0x18]
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001b9e0:	40 78       	lddsp	r8,sp[0x1c]
8001b9e2:	1c 95       	mov	r5,lr
8001b9e4:	b9 68       	lsl	r8,0x18
8001b9e6:	e2 15 ff 00 	andl	r5,0xff00,COH
8001b9ea:	f1 ee 13 88 	or	r8,r8,lr>>0x18
8001b9ee:	f1 e5 10 88 	or	r8,r8,r5<<0x8
8001b9f2:	f1 e9 12 88 	or	r8,r8,r9>>0x8
8001b9f6:	f7 68 00 1f 	st.b	r11[31],r8
8001b9fa:	f0 09 16 18 	lsr	r9,r8,0x18
8001b9fe:	40 6e       	lddsp	lr,sp[0x18]
8001ba00:	fd 69 00 1c 	st.b	lr[28],r9
8001ba04:	f3 d8 c2 08 	bfextu	r9,r8,0x10,0x8
8001ba08:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001ba0c:	ec 0c 00 0c 	add	r12,r6,r12
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001ba10:	fd 68 00 1e 	st.b	lr[30],r8
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001ba14:	32 0a       	mov	r10,32
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001ba16:	fd 69 00 1d 	st.b	lr[29],r9
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001ba1a:	e0 a0 3c f9 	rcall	8002340c <memcpy>

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001ba1e:	0c 9b       	mov	r11,r6
8001ba20:	ee fc 02 44 	ld.w	r12,r7[580]
8001ba24:	6e e8       	ld.w	r8,r7[0x38]
8001ba26:	30 1a       	mov	r10,1
8001ba28:	5d 18       	icall	r8
        else
            break;
    } // End of while loop

    return 0;
}
8001ba2a:	2f 8d       	sub	sp,-32
8001ba2c:	d8 32       	popm	r0-r7,pc
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001ba2e:	40 3c       	lddsp	r12,sp[0xc]
8001ba30:	e0 a0 08 d6 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001ba34:	c9 01       	brne	8001b954 <fatfs_update_file_length+0xac>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001ba36:	40 3c       	lddsp	r12,sp[0xc]
8001ba38:	e0 a0 09 06 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001ba3c:	c8 c0       	breq	8001b954 <fatfs_update_file_length+0xac>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001ba3e:	30 ba       	mov	r10,11
8001ba40:	40 5b       	lddsp	r11,sp[0x14]
8001ba42:	40 3c       	lddsp	r12,sp[0xc]
8001ba44:	e0 a0 3e 01 	rcall	80023646 <strncmp>
8001ba48:	c8 61       	brne	8001b954 <fatfs_update_file_length+0xac>
8001ba4a:	40 39       	lddsp	r9,sp[0xc]
8001ba4c:	e0 6c 01 00 	mov	r12,256
8001ba50:	50 69       	stdsp	sp[0x18],r9
8001ba52:	cc 2b       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001ba54:	40 2c       	lddsp	r12,sp[0x8]
8001ba56:	e0 a0 08 c3 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001ba5a:	fe 91 ff 79 	brne	8001b94c <fatfs_update_file_length+0xa4>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001ba5e:	40 2c       	lddsp	r12,sp[0x8]
8001ba60:	e0 a0 08 f2 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001ba64:	fe 90 ff 74 	breq	8001b94c <fatfs_update_file_length+0xa4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001ba68:	30 ba       	mov	r10,11
8001ba6a:	40 5b       	lddsp	r11,sp[0x14]
8001ba6c:	40 2c       	lddsp	r12,sp[0x8]
8001ba6e:	e0 a0 3d ec 	rcall	80023646 <strncmp>
8001ba72:	fe 91 ff 6d 	brne	8001b94c <fatfs_update_file_length+0xa4>
8001ba76:	40 2e       	lddsp	lr,sp[0x8]
8001ba78:	e0 6c 00 e0 	mov	r12,224
8001ba7c:	50 6e       	stdsp	sp[0x18],lr
8001ba7e:	ca cb       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001ba80:	40 1c       	lddsp	r12,sp[0x4]
8001ba82:	e0 a0 08 ad 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001ba86:	fe 91 ff 5e 	brne	8001b942 <fatfs_update_file_length+0x9a>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001ba8a:	40 1c       	lddsp	r12,sp[0x4]
8001ba8c:	e0 a0 08 dc 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001ba90:	fe 90 ff 59 	breq	8001b942 <fatfs_update_file_length+0x9a>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001ba94:	30 ba       	mov	r10,11
8001ba96:	40 5b       	lddsp	r11,sp[0x14]
8001ba98:	40 1c       	lddsp	r12,sp[0x4]
8001ba9a:	e0 a0 3d d6 	rcall	80023646 <strncmp>
8001ba9e:	fe 91 ff 52 	brne	8001b942 <fatfs_update_file_length+0x9a>
8001baa2:	40 18       	lddsp	r8,sp[0x4]
8001baa4:	e0 6c 00 c0 	mov	r12,192
8001baa8:	50 68       	stdsp	sp[0x18],r8
8001baaa:	c9 6b       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001baac:	40 0c       	lddsp	r12,sp[0x0]
8001baae:	e0 a0 08 97 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bab2:	fe 91 ff 43 	brne	8001b938 <fatfs_update_file_length+0x90>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bab6:	40 0c       	lddsp	r12,sp[0x0]
8001bab8:	e0 a0 08 c6 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001babc:	fe 90 ff 3e 	breq	8001b938 <fatfs_update_file_length+0x90>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bac0:	30 ba       	mov	r10,11
8001bac2:	40 5b       	lddsp	r11,sp[0x14]
8001bac4:	40 0c       	lddsp	r12,sp[0x0]
8001bac6:	e0 a0 3d c0 	rcall	80023646 <strncmp>
8001baca:	fe 91 ff 37 	brne	8001b938 <fatfs_update_file_length+0x90>
8001bace:	40 09       	lddsp	r9,sp[0x0]
8001bad0:	e0 6c 00 a0 	mov	r12,160
8001bad4:	50 69       	stdsp	sp[0x18],r9
8001bad6:	c8 0b       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bad8:	00 9c       	mov	r12,r0
8001bada:	e0 a0 08 81 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bade:	fe 91 ff 28 	brne	8001b92e <fatfs_update_file_length+0x86>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bae2:	00 9c       	mov	r12,r0
8001bae4:	e0 a0 08 b0 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bae8:	fe 90 ff 23 	breq	8001b92e <fatfs_update_file_length+0x86>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001baec:	30 ba       	mov	r10,11
8001baee:	40 5b       	lddsp	r11,sp[0x14]
8001baf0:	00 9c       	mov	r12,r0
8001baf2:	e0 a0 3d aa 	rcall	80023646 <strncmp>
8001baf6:	fe 91 ff 1c 	brne	8001b92e <fatfs_update_file_length+0x86>
8001bafa:	50 60       	stdsp	sp[0x18],r0
8001bafc:	e0 6c 00 80 	mov	r12,128
8001bb00:	c6 bb       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bb02:	02 9c       	mov	r12,r1
8001bb04:	e0 a0 08 6c 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bb08:	fe 91 ff 0e 	brne	8001b924 <fatfs_update_file_length+0x7c>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bb0c:	02 9c       	mov	r12,r1
8001bb0e:	e0 a0 08 9b 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bb12:	fe 90 ff 09 	breq	8001b924 <fatfs_update_file_length+0x7c>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bb16:	30 ba       	mov	r10,11
8001bb18:	40 5b       	lddsp	r11,sp[0x14]
8001bb1a:	02 9c       	mov	r12,r1
8001bb1c:	e0 a0 3d 95 	rcall	80023646 <strncmp>
8001bb20:	fe 91 ff 02 	brne	8001b924 <fatfs_update_file_length+0x7c>
8001bb24:	50 61       	stdsp	sp[0x18],r1
8001bb26:	36 0c       	mov	r12,96
8001bb28:	c5 7b       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bb2a:	06 9c       	mov	r12,r3
8001bb2c:	e0 a0 08 58 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bb30:	fe 91 fe f5 	brne	8001b91a <fatfs_update_file_length+0x72>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bb34:	06 9c       	mov	r12,r3
8001bb36:	e0 a0 08 87 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bb3a:	fe 90 fe f0 	breq	8001b91a <fatfs_update_file_length+0x72>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bb3e:	30 ba       	mov	r10,11
8001bb40:	40 5b       	lddsp	r11,sp[0x14]
8001bb42:	06 9c       	mov	r12,r3
8001bb44:	e0 a0 3d 81 	rcall	80023646 <strncmp>
8001bb48:	fe 91 fe e9 	brne	8001b91a <fatfs_update_file_length+0x72>
8001bb4c:	50 63       	stdsp	sp[0x18],r3
8001bb4e:	34 0c       	mov	r12,64
8001bb50:	c4 3b       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bb52:	04 9c       	mov	r12,r2
8001bb54:	e0 a0 08 44 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bb58:	fe 91 fe dc 	brne	8001b910 <fatfs_update_file_length+0x68>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bb5c:	04 9c       	mov	r12,r2
8001bb5e:	e0 a0 08 73 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bb62:	fe 90 fe d7 	breq	8001b910 <fatfs_update_file_length+0x68>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bb66:	30 ba       	mov	r10,11
8001bb68:	40 5b       	lddsp	r11,sp[0x14]
8001bb6a:	04 9c       	mov	r12,r2
8001bb6c:	e0 a0 3d 6d 	rcall	80023646 <strncmp>
8001bb70:	fe 91 fe d0 	brne	8001b910 <fatfs_update_file_length+0x68>
8001bb74:	50 62       	stdsp	sp[0x18],r2
8001bb76:	32 0c       	mov	r12,32
8001bb78:	c2 fb       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bb7a:	0c 9c       	mov	r12,r6
8001bb7c:	e0 a0 08 30 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bb80:	fe 91 fe c3 	brne	8001b906 <fatfs_update_file_length+0x5e>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bb84:	0c 9c       	mov	r12,r6
8001bb86:	e0 a0 08 5f 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bb8a:	fe 90 fe be 	breq	8001b906 <fatfs_update_file_length+0x5e>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bb8e:	30 ba       	mov	r10,11
8001bb90:	40 5b       	lddsp	r11,sp[0x14]
8001bb92:	0c 9c       	mov	r12,r6
8001bb94:	e0 a0 3d 59 	rcall	80023646 <strncmp>
8001bb98:	fe 91 fe b7 	brne	8001b906 <fatfs_update_file_length+0x5e>
8001bb9c:	c1 db       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bb9e:	08 9c       	mov	r12,r4
8001bba0:	e0 a0 08 1e 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bba4:	fe 91 fe e6 	brne	8001b970 <fatfs_update_file_length+0xc8>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bba8:	08 9c       	mov	r12,r4
8001bbaa:	e0 a0 08 4d 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bbae:	fe 90 fe e1 	breq	8001b970 <fatfs_update_file_length+0xc8>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bbb2:	30 ba       	mov	r10,11
8001bbb4:	40 5b       	lddsp	r11,sp[0x14]
8001bbb6:	08 9c       	mov	r12,r4
8001bbb8:	e0 a0 3d 47 	rcall	80023646 <strncmp>
8001bbbc:	fe 91 fe da 	brne	8001b970 <fatfs_update_file_length+0xc8>
8001bbc0:	50 64       	stdsp	sp[0x18],r4
8001bbc2:	e0 6c 01 40 	mov	r12,320
8001bbc6:	c0 8b       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bbc8:	08 9c       	mov	r12,r4
8001bbca:	e0 a0 08 09 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bbce:	fe 91 fe ca 	brne	8001b962 <fatfs_update_file_length+0xba>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bbd2:	08 9c       	mov	r12,r4
8001bbd4:	e0 a0 08 38 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bbd8:	fe 90 fe c5 	breq	8001b962 <fatfs_update_file_length+0xba>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bbdc:	30 ba       	mov	r10,11
8001bbde:	40 5b       	lddsp	r11,sp[0x14]
8001bbe0:	08 9c       	mov	r12,r4
8001bbe2:	e0 a0 3d 32 	rcall	80023646 <strncmp>
8001bbe6:	fe 91 fe be 	brne	8001b962 <fatfs_update_file_length+0xba>
8001bbea:	50 64       	stdsp	sp[0x18],r4
8001bbec:	e0 6c 01 20 	mov	r12,288
8001bbf0:	cf 3a       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bbf2:	08 9c       	mov	r12,r4
8001bbf4:	e0 a0 07 f4 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bbf8:	fe 91 fe d8 	brne	8001b9a8 <fatfs_update_file_length+0x100>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bbfc:	08 9c       	mov	r12,r4
8001bbfe:	e0 a0 08 23 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bc02:	fe 90 fe d3 	breq	8001b9a8 <fatfs_update_file_length+0x100>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bc06:	30 ba       	mov	r10,11
8001bc08:	40 5b       	lddsp	r11,sp[0x14]
8001bc0a:	08 9c       	mov	r12,r4
8001bc0c:	e0 a0 3d 1d 	rcall	80023646 <strncmp>
8001bc10:	fe 91 fe cc 	brne	8001b9a8 <fatfs_update_file_length+0x100>
8001bc14:	50 64       	stdsp	sp[0x18],r4
8001bc16:	e0 6c 01 c0 	mov	r12,448
8001bc1a:	cd ea       	rjmp	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bc1c:	08 9c       	mov	r12,r4
8001bc1e:	e0 a0 07 df 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bc22:	fe 91 fe bc 	brne	8001b99a <fatfs_update_file_length+0xf2>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bc26:	08 9c       	mov	r12,r4
8001bc28:	e0 a0 08 0e 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bc2c:	fe 90 fe b7 	breq	8001b99a <fatfs_update_file_length+0xf2>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bc30:	30 ba       	mov	r10,11
8001bc32:	40 5b       	lddsp	r11,sp[0x14]
8001bc34:	08 9c       	mov	r12,r4
8001bc36:	e0 a0 3d 08 	rcall	80023646 <strncmp>
8001bc3a:	fe 91 fe b0 	brne	8001b99a <fatfs_update_file_length+0xf2>
8001bc3e:	50 64       	stdsp	sp[0x18],r4
8001bc40:	e0 6c 01 a0 	mov	r12,416
8001bc44:	fe 9f fe c9 	bral	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bc48:	08 9c       	mov	r12,r4
8001bc4a:	e0 a0 07 c9 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bc4e:	fe 91 fe 9f 	brne	8001b98c <fatfs_update_file_length+0xe4>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bc52:	08 9c       	mov	r12,r4
8001bc54:	e0 a0 07 f8 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bc58:	fe 90 fe 9a 	breq	8001b98c <fatfs_update_file_length+0xe4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bc5c:	30 ba       	mov	r10,11
8001bc5e:	40 5b       	lddsp	r11,sp[0x14]
8001bc60:	08 9c       	mov	r12,r4
8001bc62:	e0 a0 3c f2 	rcall	80023646 <strncmp>
8001bc66:	fe 91 fe 93 	brne	8001b98c <fatfs_update_file_length+0xe4>
8001bc6a:	50 64       	stdsp	sp[0x18],r4
8001bc6c:	e0 6c 01 80 	mov	r12,384
8001bc70:	fe 9f fe b3 	bral	8001b9d6 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001bc74:	08 9c       	mov	r12,r4
8001bc76:	e0 a0 07 b3 	rcall	8001cbdc <fatfs_entry_lfn_invalid>
8001bc7a:	fe 91 fe 82 	brne	8001b97e <fatfs_update_file_length+0xd6>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001bc7e:	08 9c       	mov	r12,r4
8001bc80:	e0 a0 07 e2 	rcall	8001cc44 <fatfs_entry_sfn_only>
8001bc84:	fe 90 fe 7d 	breq	8001b97e <fatfs_update_file_length+0xd6>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001bc88:	30 ba       	mov	r10,11
8001bc8a:	40 5b       	lddsp	r11,sp[0x14]
8001bc8c:	08 9c       	mov	r12,r4
8001bc8e:	e0 a0 3c dc 	rcall	80023646 <strncmp>
8001bc92:	fe 91 fe 76 	brne	8001b97e <fatfs_update_file_length+0xd6>
8001bc96:	50 64       	stdsp	sp[0x18],r4
8001bc98:	e0 6c 01 60 	mov	r12,352
8001bc9c:	fe 9f fe 9d 	bral	8001b9d6 <fatfs_update_file_length+0x12e>

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bca0:	2f 8d       	sub	sp,-32
8001bca2:	d8 3a       	popm	r0-r7,pc,r12=0

8001bca4 <fatfs_write_sector>:
8001bca4:	eb cd 40 e0 	pushm	r5-r7,lr
8001bca8:	20 1d       	sub	sp,4
8001bcaa:	18 96       	mov	r6,r12
8001bcac:	16 98       	mov	r8,r11
8001bcae:	78 e7       	ld.w	r7,r12[0x38]
8001bcb0:	58 07       	cp.w	r7,0
8001bcb2:	c2 50       	breq	8001bcfc <fatfs_write_sector+0x58>
8001bcb4:	58 0b       	cp.w	r11,0
8001bcb6:	5f 05       	sreq	r5
8001bcb8:	78 ce       	ld.w	lr,r12[0x30]
8001bcba:	58 0e       	cp.w	lr,0
    // No write access?
    if (!fs->disk_io.write_media)
        return 0;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
8001bcbc:	5f 0e       	sreq	lr
8001bcbe:	fd e5 00 05 	and	r5,lr,r5
8001bcc2:	c1 10       	breq	8001bce4 <fatfs_write_sector+0x40>
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
8001bcc4:	78 48       	ld.w	r8,r12[0x10]
8001bcc6:	14 38       	cp.w	r8,r10
8001bcc8:	e0 88 00 1a 	brls	8001bcfc <fatfs_write_sector+0x58>
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
8001bccc:	78 3c       	ld.w	r12,r12[0xc]
8001bcce:	6c 78       	ld.w	r8,r6[0x1c]
8001bcd0:	10 0c       	add	r12,r8
8001bcd2:	14 0c       	add	r12,r10
        else
            return 0;

        // User target buffer passed in
        if (target)
8001bcd4:	58 09       	cp.w	r9,0
8001bcd6:	c2 d0       	breq	8001bd30 <fatfs_write_sector+0x8c>
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
8001bcd8:	12 9b       	mov	r11,r9
8001bcda:	30 1a       	mov	r10,1
8001bcdc:	5d 17       	icall	r7

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
        }
    }
}
8001bcde:	2f fd       	sub	sp,-4
8001bce0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
8001bce4:	58 09       	cp.w	r9,0
8001bce6:	c1 90       	breq	8001bd18 <fatfs_write_sector+0x74>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector / 
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
8001bce8:	58 0e       	cp.w	lr,0
8001bcea:	c0 c1       	brne	8001bd02 <fatfs_write_sector+0x5e>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
8001bcec:	78 1b       	ld.w	r11,r12[0x4]
8001bcee:	20 28       	sub	r8,2
8001bcf0:	19 8c       	ld.ub	r12,r12[0x0]
8001bcf2:	f0 0c 02 4c 	mul	r12,r8,r12
8001bcf6:	16 0c       	add	r12,r11
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
8001bcf8:	14 0c       	add	r12,r10
8001bcfa:	ce fb       	rjmp	8001bcd8 <fatfs_write_sector+0x34>
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bcfc:	2f fd       	sub	sp,-4
8001bcfe:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
8001bd02:	19 8b       	ld.ub	r11,r12[0x0]
8001bd04:	20 28       	sub	r8,2
8001bd06:	f9 1c 00 28 	ld.uh	r12,r12[40]
8001bd0a:	b7 38       	mul	r8,r11
8001bd0c:	a5 4c       	asr	r12,0x4
8001bd0e:	6c 1b       	ld.w	r11,r6[0x4]
8001bd10:	16 0c       	add	r12,r11
8001bd12:	10 0c       	add	r12,r8
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
8001bd14:	14 0c       	add	r12,r10
8001bd16:	ce 1b       	rjmp	8001bcd8 <fatfs_write_sector+0x34>
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
8001bd18:	50 0a       	stdsp	sp[0x0],r10
8001bd1a:	fe b0 f9 e5 	rcall	8001b0e4 <fatfs_lba_of_cluster>
8001bd1e:	40 0a       	lddsp	r10,sp[0x0]

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bd20:	ec cb ff bc 	sub	r11,r6,-68
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
8001bd24:	14 0c       	add	r12,r10

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bd26:	30 1a       	mov	r10,1
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
8001bd28:	ed 4c 02 44 	st.w	r6[580],r12

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bd2c:	5d 17       	icall	r7
8001bd2e:	cd 8b       	rjmp	8001bcde <fatfs_write_sector+0x3a>
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
8001bd30:	ed 4c 02 44 	st.w	r6[580],r12

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bd34:	ec cb ff bc 	sub	r11,r6,-68
8001bd38:	30 1a       	mov	r10,1
8001bd3a:	5d 17       	icall	r7
8001bd3c:	cd 1b       	rjmp	8001bcde <fatfs_write_sector+0x3a>
8001bd3e:	d7 03       	nop

8001bd40 <fatfs_sector_reader>:
8001bd40:	eb cd 40 fc 	pushm	r2-r7,lr
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001bd44:	58 0b       	cp.w	r11,0
8001bd46:	5f 08       	sreq	r8
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
8001bd48:	12 93       	mov	r3,r9
8001bd4a:	18 97       	mov	r7,r12
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001bd4c:	78 c9       	ld.w	r9,r12[0x30]
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
8001bd4e:	14 96       	mov	r6,r10
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001bd50:	58 09       	cp.w	r9,0
8001bd52:	5f 09       	sreq	r9
8001bd54:	12 68       	and	r8,r9
8001bd56:	c1 10       	breq	8001bd78 <fatfs_sector_reader+0x38>
    {
        if (offset < fs->rootdir_sectors)
8001bd58:	78 48       	ld.w	r8,r12[0x10]
8001bd5a:	14 38       	cp.w	r8,r10
8001bd5c:	e0 88 00 3b 	brls	8001bdd2 <fatfs_sector_reader+0x92>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
8001bd60:	78 3c       	ld.w	r12,r12[0xc]
8001bd62:	6e 78       	ld.w	r8,r7[0x1c]
8001bd64:	10 0c       	add	r12,r8
8001bd66:	14 0c       	add	r12,r10
        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
    }

    // User provided target array
    if (target)
8001bd68:	58 03       	cp.w	r3,0
8001bd6a:	c2 70       	breq	8001bdb8 <fatfs_sector_reader+0x78>
        return fs->disk_io.read_media(lba, target, 1);
8001bd6c:	6e d8       	ld.w	r8,r7[0x34]
8001bd6e:	06 9b       	mov	r11,r3
8001bd70:	30 1a       	mov	r10,1
8001bd72:	5d 18       	icall	r8
8001bd74:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
8001bd78:	19 82       	ld.ub	r2,r12[0x0]
8001bd7a:	f4 02 0d 08 	divu	r8,r10,r2
8001bd7e:	10 94       	mov	r4,r8
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001bd80:	58 08       	cp.w	r8,0
8001bd82:	c0 a0       	breq	8001bd96 <fatfs_sector_reader+0x56>
8001bd84:	30 05       	mov	r5,0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
8001bd86:	0e 9c       	mov	r12,r7
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001bd88:	2f f5       	sub	r5,-1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
8001bd8a:	e0 a0 0d cb 	rcall	8001d920 <fatfs_find_next_cluster>
8001bd8e:	18 9b       	mov	r11,r12
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001bd90:	0a 34       	cp.w	r4,r5
8001bd92:	fe 9b ff fa 	brhi	8001bd86 <fatfs_sector_reader+0x46>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
8001bd96:	5b fb       	cp.w	r11,-1
8001bd98:	c1 d0       	breq	8001bdd2 <fatfs_sector_reader+0x92>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector / 
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
8001bd9a:	6e c8       	ld.w	r8,r7[0x30]
8001bd9c:	58 08       	cp.w	r8,0
8001bd9e:	c1 c0       	breq	8001bdd6 <fatfs_sector_reader+0x96>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
8001bda0:	0f 88       	ld.ub	r8,r7[0x0]
8001bda2:	20 2b       	sub	r11,2
8001bda4:	b1 3b       	mul	r11,r8
8001bda6:	6e 18       	ld.w	r8,r7[0x4]
8001bda8:	f6 08 00 08 	add	r8,r11,r8
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
8001bdac:	a5 34       	mul	r4,r2
8001bdae:	08 16       	sub	r6,r4
8001bdb0:	ec 08 00 0c 	add	r12,r6,r8
    }

    // User provided target array
    if (target)
8001bdb4:	58 03       	cp.w	r3,0
8001bdb6:	cd b1       	brne	8001bd6c <fatfs_sector_reader+0x2c>
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001bdb8:	ee f8 02 44 	ld.w	r8,r7[580]
8001bdbc:	18 38       	cp.w	r8,r12
8001bdbe:	c1 70       	breq	8001bdec <fatfs_sector_reader+0xac>
    {
        fs->currentsector.address = lba;
8001bdc0:	ef 4c 02 44 	st.w	r7[580],r12
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001bdc4:	ee cb ff bc 	sub	r11,r7,-68
8001bdc8:	6e d8       	ld.w	r8,r7[0x34]
8001bdca:	30 1a       	mov	r10,1
8001bdcc:	5d 18       	icall	r8
8001bdce:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001bdd2:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
8001bdd6:	ef 19 00 28 	ld.uh	r9,r7[40]
8001bdda:	a5 49       	asr	r9,0x4
8001bddc:	20 2b       	sub	r11,2
8001bdde:	6e 18       	ld.w	r8,r7[0x4]
8001bde0:	f2 08 00 08 	add	r8,r9,r8
8001bde4:	0f 89       	ld.ub	r9,r7[0x0]
8001bde6:	f6 09 03 48 	mac	r8,r11,r9
8001bdea:	ce 1b       	rjmp	8001bdac <fatfs_sector_reader+0x6c>

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001bdec:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1

8001bdf0 <fatfs_cache_init>:
        file->cluster_cache_data[i] = 0; 
    }
#endif
    
    return 1;
}
8001bdf0:	5e ff       	retal	1

8001bdf2 <fatfs_cache_get_next_cluster>:
        return 1;
    }
#endif
    
    return 0;
}
8001bdf2:	5e fd       	retal	0

8001bdf4 <fatfs_cache_set_next_cluster>:
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
}
8001bdf4:	5e ff       	retal	1
8001bdf6:	d7 03       	nop

8001bdf8 <_free_file>:
inline void fat_list_remove(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
8001bdf8:	f8 f8 04 3c 	ld.w	r8,r12[1084]
8001bdfc:	58 08       	cp.w	r8,0
8001bdfe:	c1 f0       	breq	8001be3c <_free_file+0x44>
        list->head = node->next;
    else
        node->previous->next = node->next;
8001be00:	f8 f9 04 40 	ld.w	r9,r12[1088]
8001be04:	91 19       	st.w	r8[0x4],r9
8001be06:	f8 f8 04 40 	ld.w	r8,r12[1088]
8001be0a:	f8 f9 04 3c 	ld.w	r9,r12[1084]

    if(!node->next)
8001be0e:	58 08       	cp.w	r8,0
8001be10:	c1 e0       	breq	8001be4c <_free_file+0x54>
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
8001be12:	91 09       	st.w	r8[0x0],r9
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001be14:	e0 6b 29 f4 	mov	r11,10740
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
8001be18:	f8 c9 fb c4 	sub	r9,r12,-1084
8001be1c:	76 18       	ld.w	r8,r11[0x4]
8001be1e:	58 08       	cp.w	r8,0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001be20:	c1 a0       	breq	8001be54 <_free_file+0x5c>
8001be22:	f9 48 04 3c 	st.w	r12[1084],r8
    new_node->next = node->next;
8001be26:	70 1a       	ld.w	r10,r8[0x4]
8001be28:	f9 4a 04 40 	st.w	r12[1088],r10
    if (!node->next)
        list->tail = new_node;
8001be2c:	70 1a       	ld.w	r10,r8[0x4]
8001be2e:	58 0a       	cp.w	r10,0
8001be30:	f7 f9 0a 01 	st.weq	r11[0x4],r9
    else
        node->next->previous = new_node;
8001be34:	f5 f9 1a 00 	st.wne	r10[0x0],r9
    node->next = new_node;
8001be38:	91 19       	st.w	r8[0x4],r9
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001be3a:	5e fc       	retal	r12
8001be3c:	10 99       	mov	r9,r8
8001be3e:	e0 6a 1c f4 	mov	r10,7412
8001be42:	f8 f8 04 40 	ld.w	r8,r12[1088]
    else
        node->previous->next = node->next;

    if(!node->next)
8001be46:	95 08       	st.w	r10[0x0],r8
        list->tail = node->previous;
8001be48:	58 08       	cp.w	r8,0
8001be4a:	ce 41       	brne	8001be12 <_free_file+0x1a>
8001be4c:	e0 68 1c f4 	mov	r8,7412
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001be50:	91 19       	st.w	r8[0x4],r9
8001be52:	ce 1b       	rjmp	8001be14 <_free_file+0x1c>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001be54:	76 08       	ld.w	r8,r11[0x0]
    new_node->next = node;
8001be56:	58 08       	cp.w	r8,0
8001be58:	c0 e0       	breq	8001be74 <_free_file+0x7c>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001be5a:	70 0a       	ld.w	r10,r8[0x0]
8001be5c:	f9 48 04 40 	st.w	r12[1088],r8
    new_node->next = node;
    if (!node->previous)
        list->head = new_node;
8001be60:	f9 4a 04 3c 	st.w	r12[1084],r10
8001be64:	70 0a       	ld.w	r10,r8[0x0]
    else
        node->previous->next = new_node;
8001be66:	58 0a       	cp.w	r10,0
8001be68:	f7 f9 0a 00 	st.weq	r11[0x0],r9
    node->previous = new_node;
8001be6c:	f5 f9 1a 01 	st.wne	r10[0x4],r9
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001be70:	91 09       	st.w	r8[0x0],r9
        list->tail = node;
        node->previous = 0;
        node->next = 0;
8001be72:	5e fc       	retal	r12
8001be74:	97 19       	st.w	r11[0x4],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001be76:	97 09       	st.w	r11[0x0],r9
8001be78:	f9 48 04 40 	st.w	r12[1088],r8
8001be7c:	f9 48 04 3c 	st.w	r12[1084],r8
8001be80:	5e fc       	retal	r12
8001be82:	d7 03       	nop

8001be84 <fl_init>:
8001be84:	e0 68 21 68 	mov	r8,8552
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001be88:	30 09       	mov	r9,0
8001be8a:	f1 49 08 84 	st.w	r8[2180],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001be8e:	f1 49 04 3c 	st.w	r8[1084],r9
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001be92:	e0 6a 1c f4 	mov	r10,7412
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001be96:	95 09       	st.w	r10[0x0],r9
8001be98:	95 19       	st.w	r10[0x4],r9
    new_node->next = node->next;
    if (!node->next)
8001be9a:	f0 c9 fb c4 	sub	r9,r8,-1084
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001be9e:	f0 ca f7 80 	sub	r10,r8,-2176
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001bea2:	f1 49 08 80 	st.w	r8[2176],r9
8001bea6:	f1 4a 04 40 	st.w	r8[1088],r10
8001beaa:	e0 68 29 f4 	mov	r8,10740

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001beae:	91 09       	st.w	r8[0x0],r9
8001beb0:	91 1a       	st.w	r8[0x4],r10
}
8001beb2:	30 19       	mov	r9,1
8001beb4:	e0 68 29 f0 	mov	r8,10736
8001beb8:	91 09       	st.w	r8[0x0],r9
8001beba:	5e fc       	retal	r12

8001bebc <_open_directory>:
8001bebc:	eb cd 40 fe 	pushm	r1-r7,lr
8001bec0:	fa cd 01 24 	sub	sp,sp,292
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
8001bec4:	18 93       	mov	r3,r12
8001bec6:	16 91       	mov	r1,r11
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
8001bec8:	e0 6c 1d 00 	mov	r12,7424
8001becc:	fe b0 f9 31 	rcall	8001b12e <fatfs_get_root_cluster>

    // Find number of levels
    levels = fatfs_total_path_levels(path);
8001bed0:	18 95       	mov	r5,r12
8001bed2:	06 9c       	mov	r12,r3
8001bed4:	e0 a0 0a 6c 	rcall	8001d3ac <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++) 
8001bed8:	18 92       	mov	r2,r12
8001beda:	c3 35       	brlt	8001bf40 <_open_directory+0x84>
8001bedc:	30 07       	mov	r7,0
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder) 
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
8001bede:	1a 96       	mov	r6,sp
8001bee0:	fa c4 fe fc 	sub	r4,sp,-260
8001bee4:	c2 18       	rjmp	8001bf26 <_open_directory+0x6a>
8001bee6:	0a 9b       	mov	r11,r5
8001bee8:	08 99       	mov	r9,r4
8001beea:	1a 9a       	mov	r10,sp
8001beec:	e0 6c 1d 00 	mov	r12,7424
8001bef0:	fe b0 fa 8e 	rcall	8001b40c <fatfs_get_file_entry>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
8001bef4:	c2 30       	breq	8001bf3a <_open_directory+0x7e>
8001bef6:	08 9c       	mov	r12,r4
8001bef8:	e0 a0 06 bc 	rcall	8001cc70 <fatfs_entry_is_dir>
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
8001befc:	c1 f0       	breq	8001bf3a <_open_directory+0x7e>
8001befe:	fb 19 01 18 	ld.uh	r9,sp[280]
8001bf02:	fb 18 01 1e 	ld.uh	r8,sp[286]
8001bf06:	f2 05 15 08 	lsl	r5,r9,0x8
8001bf0a:	eb d5 c0 10 	bfextu	r5,r5,0x0,0x10
8001bf0e:	eb e9 12 85 	or	r5,r5,r9>>0x8
8001bf12:	f0 09 15 08 	lsl	r9,r8,0x8
8001bf16:	b1 65       	lsl	r5,0x10
8001bf18:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8001bf1c:	f3 e8 12 88 	or	r8,r9,r8>>0x8

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++) 
8001bf20:	10 05       	add	r5,r8
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
8001bf22:	0e 32       	cp.w	r2,r7
8001bf24:	c0 e5       	brlt	8001bf40 <_open_directory+0x84>
8001bf26:	0e 9b       	mov	r11,r7

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++) 
8001bf28:	e0 69 01 04 	mov	r9,260
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
8001bf2c:	2f f7       	sub	r7,-1
8001bf2e:	1a 9a       	mov	r10,sp
8001bf30:	06 9c       	mov	r12,r3
8001bf32:	e0 a0 0b 63 	rcall	8001d5f8 <fatfs_get_substring>
        else
            return 0;
    }

    *pathCluster = startcluster;
    return 1;
8001bf36:	5b fc       	cp.w	r12,-1
8001bf38:	cd 71       	brne	8001bee6 <_open_directory+0x2a>
8001bf3a:	2b 7d       	sub	sp,-292
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
8001bf3c:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8001bf40:	83 05       	st.w	r1[0x0],r5
8001bf42:	2b 7d       	sub	sp,-292
8001bf44:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

8001bf48 <_write_sectors>:
8001bf48:	d4 31       	pushm	r0-r7,lr
8001bf4a:	20 3d       	sub	sp,12
8001bf4c:	3f f8       	mov	r8,-1
8001bf4e:	12 90       	mov	r0,r9
8001bf50:	50 28       	stdsp	sp[0x8],r8
8001bf52:	e0 69 1d 00 	mov	r9,7424
8001bf56:	50 0a       	stdsp	sp[0x0],r10
8001bf58:	13 88       	ld.ub	r8,r9[0x0]
8001bf5a:	f6 08 0d 06 	divu	r6,r11,r8
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
8001bf5e:	18 95       	mov	r5,r12
8001bf60:	ec 08 02 42 	mul	r2,r6,r8
8001bf64:	0c 94       	mov	r4,r6
8001bf66:	f6 02 01 02 	sub	r2,r11,r2
    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001bf6a:	f8 f7 02 28 	ld.w	r7,r12[552]
    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
8001bf6e:	e4 00 00 09 	add	r9,r2,r0
8001bf72:	12 38       	cp.w	r8,r9
8001bf74:	e0 01 17 20 	movhs	r1,r0
        count = _fs.sectors_per_cluster - SectorNumber;
8001bf78:	f1 d2 e3 11 	subcs	r1,r8,r2

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001bf7c:	0c 37       	cp.w	r7,r6
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001bf7e:	c5 b0       	breq	8001c034 <_write_sectors+0xec>
8001bf80:	58 06       	cp.w	r6,0
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
8001bf82:	c4 e1       	brne	8001c01e <_write_sectors+0xd6>
8001bf84:	6a 16       	ld.w	r6,r5[0x4]
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001bf86:	30 07       	mov	r7,0
8001bf88:	0e 34       	cp.w	r4,r7
8001bf8a:	e0 88 00 58 	brls	8001c03a <_write_sectors+0xf2>
8001bf8e:	fa c3 ff fc 	sub	r3,sp,-4

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            LastCluster = Cluster;
8001bf92:	c0 98       	rjmp	8001bfa4 <_write_sectors+0x5c>
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001bf94:	50 26       	stdsp	sp[0x8],r6
                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            LastCluster = Cluster;
            Cluster = nextCluster;
8001bf96:	2f f7       	sub	r7,-1

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
8001bf98:	40 16       	lddsp	r6,sp[0x4]
8001bf9a:	5b f6       	cp.w	r6,-1
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001bf9c:	c1 c0       	breq	8001bfd4 <_write_sectors+0x8c>
8001bf9e:	0e 34       	cp.w	r4,r7
8001bfa0:	e0 88 00 2a 	brls	8001bff4 <_write_sectors+0xac>
        {
            uint32 nextCluster;
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
8001bfa4:	0e 9a       	mov	r10,r7
8001bfa6:	06 99       	mov	r9,r3
8001bfa8:	0a 9b       	mov	r11,r5
8001bfaa:	e0 6c 1d 00 	mov	r12,7424
8001bfae:	c2 2f       	rcall	8001bdf2 <fatfs_cache_get_next_cluster>
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001bfb0:	cf 21       	brne	8001bf94 <_write_sectors+0x4c>
8001bfb2:	0c 9b       	mov	r11,r6
8001bfb4:	e0 6c 1d 00 	mov	r12,7424

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001bfb8:	e0 a0 0c b4 	rcall	8001d920 <fatfs_find_next_cluster>
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001bfbc:	0e 9a       	mov	r10,r7

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001bfbe:	18 99       	mov	r9,r12
8001bfc0:	50 1c       	stdsp	sp[0x4],r12
8001bfc2:	0a 9b       	mov	r11,r5
8001bfc4:	e0 6c 1d 00 	mov	r12,7424
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001bfc8:	c1 6f       	rcall	8001bdf4 <fatfs_cache_set_next_cluster>
                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            LastCluster = Cluster;
            Cluster = nextCluster;
8001bfca:	50 26       	stdsp	sp[0x8],r6

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
8001bfcc:	2f f7       	sub	r7,-1
8001bfce:	40 16       	lddsp	r6,sp[0x4]
8001bfd0:	5b f6       	cp.w	r6,-1
8001bfd2:	ce 61       	brne	8001bf9e <_write_sectors+0x56>

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
8001bfd4:	e0 69 1d 00 	mov	r9,7424
8001bfd8:	13 88       	ld.ub	r8,r9[0x0]
8001bfda:	e0 cb 00 01 	sub	r11,r0,1
8001bfde:	10 0b       	add	r11,r8
8001bfe0:	f6 08 0d 0a 	divu	r10,r11,r8
8001bfe4:	fa cb ff f8 	sub	r11,sp,-8
8001bfe8:	e0 6c 1d 00 	mov	r12,7424
            Cluster = LastCluster;
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
8001bfec:	e0 a0 15 38 	rcall	8001ea5c <fatfs_add_free_space>

            Cluster = LastCluster;
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
8001bff0:	c1 e0       	breq	8001c02c <_write_sectors+0xe4>
8001bff2:	40 26       	lddsp	r6,sp[0x8]
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
8001bff4:	eb 44 02 28 	st.w	r5[552],r4
8001bff8:	eb 46 02 2c 	st.w	r5[556],r6

    if (fatfs_sector_write(&_fs, lba, buf, count))
8001bffc:	0c 9b       	mov	r11,r6
8001bffe:	e0 6c 1d 00 	mov	r12,7424
8001c002:	fe b0 f8 71 	rcall	8001b0e4 <fatfs_lba_of_cluster>
8001c006:	02 99       	mov	r9,r1
8001c008:	f8 02 00 0b 	add	r11,r12,r2
        return count;
    else
        return 0;
}
8001c00c:	40 0a       	lddsp	r10,sp[0x0]
8001c00e:	e0 6c 1d 00 	mov	r12,7424
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001c012:	fe b0 f8 86 	rcall	8001b11e <fatfs_sector_write>
8001c016:	c0 b0       	breq	8001c02c <_write_sectors+0xe4>
8001c018:	02 9c       	mov	r12,r1
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
8001c01a:	2f dd       	sub	sp,-12
8001c01c:	d8 32       	popm	r0-r7,pc
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001c01e:	ee c9 ff ff 	sub	r9,r7,-1

    if (fatfs_sector_write(&_fs, lba, buf, count))
        return count;
    else
        return 0;
}
8001c022:	0c 39       	cp.w	r9,r6
8001c024:	cb 01       	brne	8001bf84 <_write_sectors+0x3c>
8001c026:	f8 f6 02 2c 	ld.w	r6,r12[556]
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
        Cluster = file->last_fat_lookup.CurrentCluster;
8001c02a:	ca fb       	rjmp	8001bf88 <_write_sectors+0x40>
8001c02c:	30 01       	mov	r1,0
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
8001c02e:	02 9c       	mov	r12,r1
8001c030:	2f dd       	sub	sp,-12
8001c032:	d8 32       	popm	r0-r7,pc
8001c034:	f8 f6 02 2c 	ld.w	r6,r12[556]
8001c038:	ce 2b       	rjmp	8001bffc <_write_sectors+0xb4>
8001c03a:	5b f6       	cp.w	r6,-1
8001c03c:	cd c1       	brne	8001bff4 <_write_sectors+0xac>
8001c03e:	cc eb       	rjmp	8001bfda <_write_sectors+0x92>

8001c040 <_read_sectors>:
8001c040:	d4 31       	pushm	r0-r7,lr
8001c042:	20 1d       	sub	sp,4
8001c044:	12 92       	mov	r2,r9
8001c046:	e0 68 1d 00 	mov	r8,7424
8001c04a:	18 96       	mov	r6,r12
8001c04c:	11 88       	ld.ub	r8,r8[0x0]
8001c04e:	14 90       	mov	r0,r10
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
8001c050:	f6 08 0d 04 	divu	r4,r11,r8
    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - Sector;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001c054:	f8 f7 02 28 	ld.w	r7,r12[552]
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
8001c058:	e8 08 02 41 	mul	r1,r4,r8
8001c05c:	08 95       	mov	r5,r4
8001c05e:	f6 01 01 01 	sub	r1,r11,r1

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
8001c062:	e2 09 00 09 	add	r9,r1,r9
        count = _fs.sectors_per_cluster - Sector;
8001c066:	12 38       	cp.w	r8,r9
8001c068:	f1 d1 e3 12 	subcs	r2,r8,r1

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001c06c:	08 37       	cp.w	r7,r4
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001c06e:	c3 e0       	breq	8001c0ea <_read_sectors+0xaa>
8001c070:	58 04       	cp.w	r4,0
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;                    
8001c072:	c4 41       	brne	8001c0fa <_read_sectors+0xba>
8001c074:	6c 14       	ld.w	r4,r6[0x4]
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001c076:	30 07       	mov	r7,0
8001c078:	0e 35       	cp.w	r5,r7
8001c07a:	e0 88 00 21 	brls	8001c0bc <_read_sectors+0x7c>
8001c07e:	1a 93       	mov	r3,sp
8001c080:	c0 68       	rjmp	8001c08c <_read_sectors+0x4c>

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            Cluster = nextCluster;
8001c082:	2f f7       	sub	r7,-1
            i = 0;
            Cluster = file->startcluster;                    
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001c084:	40 04       	lddsp	r4,sp[0x0]
8001c086:	0e 35       	cp.w	r5,r7
8001c088:	e0 88 00 1a 	brls	8001c0bc <_read_sectors+0x7c>
        {
            uint32 nextCluster;
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
8001c08c:	0e 9a       	mov	r10,r7
8001c08e:	1a 99       	mov	r9,sp
8001c090:	0c 9b       	mov	r11,r6
8001c092:	e0 6c 1d 00 	mov	r12,7424
8001c096:	ca ee       	rcall	8001bdf2 <fatfs_cache_get_next_cluster>
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001c098:	cf 51       	brne	8001c082 <_read_sectors+0x42>
8001c09a:	08 9b       	mov	r11,r4
8001c09c:	e0 6c 1d 00 	mov	r12,7424

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001c0a0:	e0 a0 0c 40 	rcall	8001d920 <fatfs_find_next_cluster>
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001c0a4:	0e 9a       	mov	r10,r7

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001c0a6:	18 99       	mov	r9,r12
8001c0a8:	50 0c       	stdsp	sp[0x0],r12
8001c0aa:	0c 9b       	mov	r11,r6
8001c0ac:	e0 6c 1d 00 	mov	r12,7424
            }            

            Cluster = nextCluster;
8001c0b0:	ca 2e       	rcall	8001bdf4 <fatfs_cache_set_next_cluster>
            i = 0;
            Cluster = file->startcluster;                    
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001c0b2:	2f f7       	sub	r7,-1
8001c0b4:	40 04       	lddsp	r4,sp[0x0]
8001c0b6:	0e 35       	cp.w	r5,r7

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
8001c0b8:	fe 9b ff ea 	brhi	8001c08c <_read_sectors+0x4c>
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
8001c0bc:	5b f4       	cp.w	r4,-1
8001c0be:	c1 a0       	breq	8001c0f2 <_read_sectors+0xb2>
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
8001c0c0:	ed 45 02 28 	st.w	r6[552],r5
    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER) 
        return 0;

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
8001c0c4:	ed 44 02 2c 	st.w	r6[556],r4
8001c0c8:	08 9b       	mov	r11,r4
8001c0ca:	e0 6c 1d 00 	mov	r12,7424

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
8001c0ce:	fe b0 f8 0b 	rcall	8001b0e4 <fatfs_lba_of_cluster>
8001c0d2:	04 99       	mov	r9,r2
8001c0d4:	f8 01 00 0b 	add	r11,r12,r1
8001c0d8:	00 9a       	mov	r10,r0
8001c0da:	e0 6c 1d 00 	mov	r12,7424
        return count;
    else
        return 0;
}
8001c0de:	fe b0 f8 18 	rcall	8001b10e <fatfs_sector_read>
    if ((Sector + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - Sector;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
        Cluster = file->last_fat_lookup.CurrentCluster;
8001c0e2:	c0 80       	breq	8001c0f2 <_read_sectors+0xb2>
8001c0e4:	04 9c       	mov	r12,r2
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER) 
8001c0e6:	2f fd       	sub	sp,-4
8001c0e8:	d8 32       	popm	r0-r7,pc

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
8001c0ea:	f8 f4 02 2c 	ld.w	r4,r12[556]
        return count;
    else
        return 0;
}
8001c0ee:	5b f4       	cp.w	r4,-1
8001c0f0:	ce c1       	brne	8001c0c8 <_read_sectors+0x88>
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001c0f2:	30 02       	mov	r2,0
8001c0f4:	04 9c       	mov	r12,r2
8001c0f6:	2f fd       	sub	sp,-4
8001c0f8:	d8 32       	popm	r0-r7,pc
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
8001c0fa:	ee c8 ff ff 	sub	r8,r7,-1
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001c0fe:	08 38       	cp.w	r8,r4
8001c100:	cb a1       	brne	8001c074 <_read_sectors+0x34>
8001c102:	f8 f4 02 2c 	ld.w	r4,r12[556]
8001c106:	cb 9b       	rjmp	8001c078 <_read_sectors+0x38>

8001c108 <_create_file>:
8001c108:	eb cd 40 fc 	pushm	r2-r7,lr
8001c10c:	20 bd       	sub	sp,44
8001c10e:	e0 68 1d 00 	mov	r8,7424
8001c112:	18 93       	mov	r3,r12
8001c114:	70 e8       	ld.w	r8,r8[0x38]
8001c116:	58 08       	cp.w	r8,0
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
8001c118:	c0 61       	brne	8001c124 <_create_file+0x1c>

    fatfs_cache_init(&_fs, file);
    
    fatfs_fat_purge(&_fs);

    return file;
8001c11a:	30 07       	mov	r7,0
}
8001c11c:	0e 9c       	mov	r12,r7
8001c11e:	2f 5d       	sub	sp,-44
8001c120:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
8001c124:	e0 69 29 f4 	mov	r9,10740
    if (node)
8001c128:	72 05       	ld.w	r5,r9[0x0]
8001c12a:	58 05       	cp.w	r5,0
inline void fat_list_remove(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
8001c12c:	cf 70       	breq	8001c11a <_create_file+0x12>
        list->head = node->next;
8001c12e:	6a 08       	ld.w	r8,r5[0x0]
8001c130:	58 08       	cp.w	r8,0
8001c132:	f0 0a 17 00 	moveq	r10,r8
8001c136:	eb f8 00 01 	ld.weq	r8,r5[0x4]
8001c13a:	f3 f8 0a 00 	st.weq	r9[0x0],r8
    else
        node->previous->next = node->next;
8001c13e:	eb fa 10 01 	ld.wne	r10,r5[0x4]
8001c142:	f1 fa 1a 01 	st.wne	r8[0x4],r10
8001c146:	eb f8 10 01 	ld.wne	r8,r5[0x4]
8001c14a:	eb fa 10 00 	ld.wne	r10,r5[0x0]

    if(!node->next)
        list->tail = node->previous;
8001c14e:	f3 fa 0a 01 	st.weq	r9[0x4],r10
    else
        node->next->previous = node->previous;
8001c152:	f1 fa 1a 00 	st.wne	r8[0x0],r10
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001c156:	e0 64 1c f4 	mov	r4,7412
8001c15a:	68 18       	ld.w	r8,r4[0x4]
8001c15c:	58 08       	cp.w	r8,0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c15e:	e0 80 00 b9 	breq	8001c2d0 <_create_file+0x1c8>
    new_node->next = node->next;
8001c162:	8b 08       	st.w	r5[0x0],r8
    if (!node->next)
8001c164:	70 19       	ld.w	r9,r8[0x4]
        list->tail = new_node;
8001c166:	8b 19       	st.w	r5[0x4],r9
8001c168:	70 19       	ld.w	r9,r8[0x4]
8001c16a:	58 09       	cp.w	r9,0
    else
        node->next->previous = new_node;
8001c16c:	e9 f5 0a 01 	st.weq	r4[0x4],r5
    node->next = new_node;
8001c170:	f3 f5 1a 00 	st.wne	r9[0x0],r5

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
8001c174:	91 15       	st.w	r8[0x4],r5
    if (!_fs.disk_io.write_media)
        return NULL;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
8001c176:	ea c7 04 3c 	sub	r7,r5,1084
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
8001c17a:	cd 10       	breq	8001c11c <_create_file+0x14>
8001c17c:	ea c6 04 28 	sub	r6,r5,1064
8001c180:	e0 6a 01 04 	mov	r10,260
8001c184:	30 0b       	mov	r11,0
8001c186:	0c 9c       	mov	r12,r6
    memset(file->filename, '\0', sizeof(file->filename));
8001c188:	e0 a0 39 e6 	rcall	80023554 <memset>
8001c18c:	ea c5 03 24 	sub	r5,r5,804
8001c190:	e0 6a 01 04 	mov	r10,260
8001c194:	30 0b       	mov	r11,0
8001c196:	0a 9c       	mov	r12,r5

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
8001c198:	e0 a0 39 de 	rcall	80023554 <memset>
8001c19c:	e0 68 01 04 	mov	r8,260
8001c1a0:	06 9c       	mov	r12,r3
8001c1a2:	0a 99       	mov	r9,r5
8001c1a4:	10 9a       	mov	r10,r8
8001c1a6:	0c 9b       	mov	r11,r6
8001c1a8:	e0 a0 0a 80 	rcall	8001d6a8 <fatfs_split_path>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;
    
    // Compare open files
    fat_list_for_each(&_open_file_list, node)
8001c1ac:	5b fc       	cp.w	r12,-1
8001c1ae:	c1 80       	breq	8001c1de <_create_file+0xd6>
8001c1b0:	68 04       	ld.w	r4,r4[0x0]
8001c1b2:	58 04       	cp.w	r4,0
8001c1b4:	c0 51       	brne	8001c1be <_create_file+0xb6>
8001c1b6:	c1 88       	rjmp	8001c1e6 <_create_file+0xde>
8001c1b8:	68 14       	ld.w	r4,r4[0x4]
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
8001c1ba:	58 04       	cp.w	r4,0
8001c1bc:	c1 50       	breq	8001c1e6 <_create_file+0xde>

        // If not the current file 
        if (openFile != file)
8001c1be:	e8 c8 04 3c 	sub	r8,r4,1084
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
8001c1c2:	10 37       	cp.w	r7,r8
8001c1c4:	cf a0       	breq	8001c1b8 <_create_file+0xb0>
8001c1c6:	0c 9b       	mov	r11,r6
8001c1c8:	e8 cc 04 28 	sub	r12,r4,1064
8001c1cc:	e0 a0 09 1e 	rcall	8001d408 <fatfs_compare_names>
8001c1d0:	cf 40       	breq	8001c1b8 <_create_file+0xb0>
8001c1d2:	e8 cc 03 24 	sub	r12,r4,804
8001c1d6:	0a 9b       	mov	r11,r5
8001c1d8:	e0 a0 09 18 	rcall	8001d408 <fatfs_compare_names>
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
8001c1dc:	ce e0       	breq	8001c1b8 <_create_file+0xb0>
8001c1de:	0e 9c       	mov	r12,r7
8001c1e0:	c0 ce       	rcall	8001bdf8 <_free_file>
        return NULL;
8001c1e2:	30 07       	mov	r7,0
        _free_file(file);
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0] == 0)
8001c1e4:	c9 cb       	rjmp	8001c11c <_create_file+0x14>
8001c1e6:	ef 39 00 14 	ld.ub	r9,r7[20]
8001c1ea:	30 08       	mov	r8,0
8001c1ec:	f0 09 18 00 	cp.b	r9,r8
        file->parentcluster = fatfs_get_root_cluster(&_fs);
8001c1f0:	c6 81       	brne	8001c2c0 <_create_file+0x1b8>
8001c1f2:	e0 6c 1d 00 	mov	r12,7424
8001c1f6:	fe b0 f7 9c 	rcall	8001b12e <fatfs_get_root_cluster>
            return NULL;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
8001c1fa:	18 9b       	mov	r11,r12
8001c1fc:	8f 0c       	st.w	r7[0x0],r12
8001c1fe:	1a 99       	mov	r9,sp
8001c200:	0a 9a       	mov	r10,r5
8001c202:	e0 6c 1d 00 	mov	r12,7424
8001c206:	fe b0 f9 03 	rcall	8001b40c <fatfs_get_file_entry>
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
8001c20a:	58 1c       	cp.w	r12,1

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
8001c20c:	ce 90       	breq	8001c1de <_create_file+0xd6>
8001c20e:	30 19       	mov	r9,1
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
8001c210:	30 06       	mov	r6,0

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
8001c212:	ee ca ff fc 	sub	r10,r7,-4
8001c216:	8f 16       	st.w	r7[0x4],r6
8001c218:	12 9b       	mov	r11,r9
8001c21a:	e0 6c 1d 00 	mov	r12,7424
        // If second hit or more, generate a ~n tail        
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
8001c21e:	e0 a0 14 53 	rcall	8001eac4 <fatfs_allocate_free_space>
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);

        // If second hit or more, generate a ~n tail        
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
8001c222:	18 98       	mov	r8,r12
8001c224:	c6 e0       	breq	8001c300 <_create_file+0x1f8>
8001c226:	0c 94       	mov	r4,r6
8001c228:	ee c3 fd e4 	sub	r3,r7,-540
8001c22c:	fa c2 ff e0 	sub	r2,sp,-32
8001c230:	c1 28       	rjmp	8001c254 <_create_file+0x14c>
8001c232:	08 9a       	mov	r10,r4
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
8001c234:	04 9b       	mov	r11,r2
8001c236:	06 9c       	mov	r12,r3
8001c238:	e0 a0 05 cc 	rcall	8001cdd0 <fatfs_lfn_generate_tail>
8001c23c:	06 9a       	mov	r10,r3
8001c23e:	6e 0b       	ld.w	r11,r7[0x0]
8001c240:	e0 6c 1d 00 	mov	r12,7424
            break;

        tailNum++;
    }
    while (tailNum < 9999);
8001c244:	fe b0 f9 8c 	rcall	8001b55c <fatfs_sfn_exists>
8001c248:	18 96       	mov	r6,r12
    // Generate a short filename & tail
    tailNum = 0;
    do 
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
8001c24a:	c1 10       	breq	8001c26c <_create_file+0x164>
8001c24c:	2f f4       	sub	r4,-1
8001c24e:	e0 44 27 0f 	cp.w	r4,9999

        // If second hit or more, generate a ~n tail        
        if (tailNum != 0)
8001c252:	c5 c0       	breq	8001c30a <_create_file+0x202>
8001c254:	0a 9b       	mov	r11,r5
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
8001c256:	04 9c       	mov	r12,r2
8001c258:	e0 a0 06 1e 	rcall	8001ce94 <fatfs_lfn_create_sfn>
8001c25c:	58 04       	cp.w	r4,0
8001c25e:	ce a1       	brne	8001c232 <_create_file+0x12a>
8001c260:	30 ba       	mov	r10,11
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
8001c262:	04 9b       	mov	r11,r2
8001c264:	06 9c       	mov	r12,r3
8001c266:	e0 a0 38 d3 	rcall	8002340c <memcpy>
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
8001c26a:	ce 9b       	rjmp	8001c23c <_create_file+0x134>
8001c26c:	e0 44 27 0f 	cp.w	r4,9999
8001c270:	c4 d0       	breq	8001c30a <_create_file+0x202>
8001c272:	1a dc       	st.w	--sp,r12
8001c274:	0a 9a       	mov	r10,r5
8001c276:	1a dc       	st.w	--sp,r12
8001c278:	06 99       	mov	r9,r3
8001c27a:	6e 18       	ld.w	r8,r7[0x4]
8001c27c:	6e 0b       	ld.w	r11,r7[0x0]
8001c27e:	e0 6c 1d 00 	mov	r12,7424
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
8001c282:	e0 a0 0f 35 	rcall	8001e0ec <fatfs_add_file_entry>
    file->file_data_dirty = 0;
    file->filelength_changed = 0;

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
8001c286:	2f ed       	sub	sp,-8
8001c288:	18 95       	mov	r5,r12
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
8001c28a:	58 0c       	cp.w	r12,0
8001c28c:	c3 00       	breq	8001c2ec <_create_file+0x1e4>
    file->file_data_dirty = 0;
    file->filelength_changed = 0;

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
8001c28e:	3f f8       	mov	r8,-1
8001c290:	0e 9b       	mov	r11,r7
    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
    file->file_data_dirty = 0;
    file->filelength_changed = 0;
8001c292:	ef 48 02 2c 	st.w	r7[556],r8
        return NULL;
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
8001c296:	ef 48 04 30 	st.w	r7[1072],r8
    file->file_data_address = 0xFFFFFFFF;
    file->file_data_dirty = 0;
8001c29a:	ef 48 02 28 	st.w	r7[552],r8

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_cache_init(&_fs, file);
8001c29e:	8f 46       	st.w	r7[0x10],r6
8001c2a0:	8f 36       	st.w	r7[0xc],r6
    
    fatfs_fat_purge(&_fs);
8001c2a2:	8f 26       	st.w	r7[0x8],r6
8001c2a4:	ef 46 04 34 	st.w	r7[1076],r6

    return file;
}
8001c2a8:	e0 6c 1d 00 	mov	r12,7424
8001c2ac:	fe b0 fd a2 	rcall	8001bdf0 <fatfs_cache_init>
    if (file->path[0] == 0)
        file->parentcluster = fatfs_get_root_cluster(&_fs);
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
8001c2b0:	e0 6c 1d 00 	mov	r12,7424
8001c2b4:	e0 a0 0b 0a 	rcall	8001d8c8 <fatfs_fat_purge>
8001c2b8:	0e 9c       	mov	r12,r7
8001c2ba:	2f 5d       	sub	sp,-44
        {
            _free_file(file);
            return NULL;
8001c2bc:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001c2c0:	0c 9c       	mov	r12,r6
8001c2c2:	0e 9b       	mov	r11,r7
8001c2c4:	fe b0 fd fc 	rcall	8001bebc <_open_directory>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
    new_node->next = node;
8001c2c8:	18 98       	mov	r8,r12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001c2ca:	c1 b0       	breq	8001c300 <_create_file+0x1f8>
    new_node->next = node;
    if (!node->previous)
8001c2cc:	6e 0b       	ld.w	r11,r7[0x0]
        list->head = new_node;
8001c2ce:	c9 8b       	rjmp	8001c1fe <_create_file+0xf6>
8001c2d0:	68 08       	ld.w	r8,r4[0x0]
8001c2d2:	58 08       	cp.w	r8,0
    else
        node->previous->next = new_node;
8001c2d4:	c2 10       	breq	8001c316 <_create_file+0x20e>
8001c2d6:	70 09       	ld.w	r9,r8[0x0]
    node->previous = new_node;
8001c2d8:	8b 18       	st.w	r5[0x4],r8
8001c2da:	8b 09       	st.w	r5[0x0],r9

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
8001c2dc:	70 09       	ld.w	r9,r8[0x0]
8001c2de:	58 09       	cp.w	r9,0
8001c2e0:	e9 f5 0a 00 	st.weq	r4[0x0],r5

        _free_file(file);
8001c2e4:	f3 f5 1a 01 	st.wne	r9[0x4],r5
8001c2e8:	91 05       	st.w	r8[0x0],r5
8001c2ea:	c4 6b       	rjmp	8001c176 <_create_file+0x6e>
        return NULL;
8001c2ec:	6e 1b       	ld.w	r11,r7[0x4]
    file->startcluster = 0;

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
    {
        _free_file(file);
8001c2ee:	e0 6c 1d 00 	mov	r12,7424
8001c2f2:	e0 a0 0c f1 	rcall	8001dcd4 <fatfs_free_cluster_chain>
        return NULL;
8001c2f6:	0e 9c       	mov	r12,r7

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
8001c2f8:	0a 97       	mov	r7,r5
8001c2fa:	fe b0 fd 7f 	rcall	8001bdf8 <_free_file>
8001c2fe:	c0 fb       	rjmp	8001c11c <_create_file+0x14>
8001c300:	0e 9c       	mov	r12,r7
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001c302:	10 97       	mov	r7,r8
        list->tail = node;
8001c304:	fe b0 fd 7a 	rcall	8001bdf8 <_free_file>
        node->previous = 0;
8001c308:	c0 ab       	rjmp	8001c11c <_create_file+0x14>
8001c30a:	6e 1b       	ld.w	r11,r7[0x4]
8001c30c:	e0 6c 1d 00 	mov	r12,7424
8001c310:	e0 a0 0c e2 	rcall	8001dcd4 <fatfs_free_cluster_chain>
8001c314:	c6 5b       	rjmp	8001c1de <_create_file+0xd6>
8001c316:	89 05       	st.w	r4[0x0],r5
8001c318:	89 15       	st.w	r4[0x4],r5
8001c31a:	8b 18       	st.w	r5[0x4],r8
8001c31c:	8b 08       	st.w	r5[0x0],r8
8001c31e:	c2 cb       	rjmp	8001c176 <_create_file+0x6e>

8001c320 <fl_fflush>:
8001c320:	eb cd 40 c0 	pushm	r6-r7,lr
8001c324:	e0 69 29 f0 	mov	r9,10736
8001c328:	18 97       	mov	r7,r12
8001c32a:	72 08       	ld.w	r8,r9[0x0]
8001c32c:	58 08       	cp.w	r8,0
8001c32e:	c1 30       	breq	8001c354 <fl_fflush+0x34>
8001c330:	58 07       	cp.w	r7,0
8001c332:	c0 f0       	breq	8001c350 <fl_fflush+0x30>
8001c334:	e0 66 1d 00 	mov	r6,7424
8001c338:	6c f8       	ld.w	r8,r6[0x3c]
8001c33a:	58 08       	cp.w	r8,0
8001c33c:	c0 20       	breq	8001c340 <fl_fflush+0x20>
8001c33e:	5d 18       	icall	r8
8001c340:	ee f8 04 34 	ld.w	r8,r7[1076]
8001c344:	58 08       	cp.w	r8,0
8001c346:	c2 01       	brne	8001c386 <fl_fflush+0x66>
8001c348:	6d 08       	ld.w	r8,r6[0x40]
8001c34a:	58 08       	cp.w	r8,0
8001c34c:	c0 20       	breq	8001c350 <fl_fflush+0x30>
8001c34e:	5d 18       	icall	r8
8001c350:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8001c354:	e0 6a 21 68 	mov	r10,8552
8001c358:	f5 48 08 84 	st.w	r10[2180],r8
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001c35c:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001c360:	e0 6b 1c f4 	mov	r11,7412
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c364:	97 08       	st.w	r11[0x0],r8
8001c366:	97 18       	st.w	r11[0x4],r8
8001c368:	f4 cc f7 80 	sub	r12,r10,-2176
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c36c:	e0 68 29 f4 	mov	r8,10740
8001c370:	f5 4c 04 40 	st.w	r10[1088],r12
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c374:	f4 cb fb c4 	sub	r11,r10,-1084

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001c378:	f5 4b 08 80 	st.w	r10[2176],r11

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
8001c37c:	91 1c       	st.w	r8[0x4],r12
8001c37e:	91 0b       	st.w	r8[0x0],r11
8001c380:	30 18       	mov	r8,1
8001c382:	93 08       	st.w	r9[0x0],r8
8001c384:	cd 6b       	rjmp	8001c330 <fl_fflush+0x10>
8001c386:	30 19       	mov	r9,1
8001c388:	ee ca fd d0 	sub	r10,r7,-560
                file->file_data_dirty = 0;
8001c38c:	ee fb 04 30 	ld.w	r11,r7[1072]
8001c390:	0e 9c       	mov	r12,r7
8001c392:	fe b0 fd db 	rcall	8001bf48 <_write_sectors>
8001c396:	f9 b8 01 00 	movne	r8,0
8001c39a:	ef f8 1b 0d 	st.wne	r7[0x434],r8
8001c39e:	cd 5b       	rjmp	8001c348 <fl_fflush+0x28>

8001c3a0 <T.96>:
8001c3a0:	eb cd 40 fe 	pushm	r1-r7,lr
8001c3a4:	e0 68 29 f0 	mov	r8,10736
8001c3a8:	18 95       	mov	r5,r12
8001c3aa:	16 97       	mov	r7,r11
8001c3ac:	70 08       	ld.w	r8,r8[0x0]
8001c3ae:	58 08       	cp.w	r8,0
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (buffer==NULL || file==NULL)
8001c3b0:	c0 c0       	breq	8001c3c8 <T.96+0x28>
8001c3b2:	58 07       	cp.w	r7,0
8001c3b4:	5f 09       	sreq	r9
8001c3b6:	58 05       	cp.w	r5,0
8001c3b8:	5f 08       	sreq	r8
8001c3ba:	f3 e8 10 08 	or	r8,r9,r8
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001c3be:	c0 80       	breq	8001c3ce <T.96+0x2e>
        // Increment file pointer
        file->bytenum += copyCount;
    }    

    return bytesRead;
}
8001c3c0:	3f f6       	mov	r6,-1
8001c3c2:	0c 9c       	mov	r12,r6
8001c3c4:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
    int bytesRead = 0;    

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
8001c3c8:	fe b0 fd 5e 	rcall	8001be84 <fl_init>

    if (buffer==NULL || file==NULL)
        return -1;

    // No read permissions
    if (!(file->flags & FILE_READ))
8001c3cc:	cf 3b       	rjmp	8001c3b2 <T.96+0x12>
8001c3ce:	ef 38 04 38 	ld.ub	r8,r7[1080]
8001c3d2:	ed b8 00 00 	bld	r8,0x0
    // Nothing to be done
    if (!count)
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
8001c3d6:	cf 51       	brne	8001c3c0 <T.96+0x20>
8001c3d8:	6e 24       	ld.w	r4,r7[0x8]
8001c3da:	6e 32       	ld.w	r2,r7[0xc]
8001c3dc:	04 34       	cp.w	r4,r2
        return -1;

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
8001c3de:	cf 12       	brcc	8001c3c0 <T.96+0x20>
8001c3e0:	e8 c8 ff ff 	sub	r8,r4,-1
8001c3e4:	10 32       	cp.w	r2,r8
        count = file->filelength - file->bytenum;
8001c3e6:	c4 d2       	brcc	8001c480 <T.96+0xe0>
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001c3e8:	08 12       	sub	r2,r4
8001c3ea:	58 02       	cp.w	r2,0
8001c3ec:	e0 8a 00 4f 	brle	8001c48a <T.96+0xea>

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
8001c3f0:	e7 d4 c0 09 	bfextu	r3,r4,0x0,0x9
                // Flush un-written data to file
                if (file->file_data_dirty)
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
8001c3f4:	a9 94       	lsr	r4,0x9
8001c3f6:	ee c1 fd d0 	sub	r1,r7,-560
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
    {        
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
8001c3fa:	30 06       	mov	r6,0
8001c3fc:	58 03       	cp.w	r3,0
8001c3fe:	c2 a1       	brne	8001c452 <T.96+0xb2>
                // Flush un-written data to file
                if (file->file_data_dirty)
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
8001c400:	c2 38       	rjmp	8001c446 <T.96+0xa6>
8001c402:	30 19       	mov	r9,1
8001c404:	02 9a       	mov	r10,r1
8001c406:	08 9b       	mov	r11,r4
8001c408:	0e 9c       	mov	r12,r7
8001c40a:	c1 be       	rcall	8001c040 <_read_sectors>
8001c40c:	cd b0       	breq	8001c3c2 <T.96+0x22>
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
                file->file_data_dirty = 0;
8001c40e:	30 08       	mov	r8,0
                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
8001c410:	ef 44 04 30 	st.w	r7[1072],r4
                file->file_data_dirty = 0;
8001c414:	ef 48 04 34 	st.w	r7[1076],r8
            }
        
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
8001c418:	e0 68 02 00 	mov	r8,512
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
8001c41c:	e2 03 00 0b 	add	r11,r1,r3
                file->file_data_address = sector;
                file->file_data_dirty = 0;
            }
        
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
8001c420:	f0 03 01 03 	sub	r3,r8,r3
8001c424:	e4 06 01 08 	sub	r8,r2,r6

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);

            // Move onto next sector and reset copy offset
            sector++;
8001c428:	2f f4       	sub	r4,-1
                file->file_data_address = sector;
                file->file_data_dirty = 0;
            }
        
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
8001c42a:	e6 08 0d 43 	min	r3,r3,r8
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
8001c42e:	ea 06 00 0c 	add	r12,r5,r6
8001c432:	06 9a       	mov	r10,r3
8001c434:	e0 a0 37 ec 	rcall	8002340c <memcpy>
    
        // Increase total read count 
        bytesRead += copyCount;

        // Increment file pointer
        file->bytenum += copyCount;
8001c438:	6e 28       	ld.w	r8,r7[0x8]
8001c43a:	06 08       	add	r8,r3
8001c43c:	8f 28       	st.w	r7[0x8],r8
            sector++;
            offset = 0;
        }
    
        // Increase total read count 
        bytesRead += copyCount;
8001c43e:	06 06       	add	r6,r3

        // Increment file pointer
        file->bytenum += copyCount;
8001c440:	30 03       	mov	r3,0
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001c442:	04 36       	cp.w	r6,r2
8001c444:	cb f4       	brge	8001c3c2 <T.96+0x22>
    {        
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
8001c446:	e4 06 01 09 	sub	r9,r2,r6
8001c44a:	e0 49 01 ff 	cp.w	r9,511
8001c44e:	e0 89 00 0d 	brgt	8001c468 <T.96+0xc8>
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
8001c452:	ee f8 04 30 	ld.w	r8,r7[1072]
8001c456:	10 34       	cp.w	r4,r8
8001c458:	ce 00       	breq	8001c418 <T.96+0x78>
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
8001c45a:	ee f8 04 34 	ld.w	r8,r7[1076]
8001c45e:	58 08       	cp.w	r8,0
8001c460:	cd 10       	breq	8001c402 <T.96+0x62>
                    fl_fflush(file);
8001c462:	0e 9c       	mov	r12,r7
8001c464:	c5 ef       	rcall	8001c320 <fl_fflush>
8001c466:	cc eb       	rjmp	8001c402 <T.96+0x62>
8001c468:	a9 59       	asr	r9,0x9
    {        
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);        
8001c46a:	ea 06 00 0a 	add	r10,r5,r6
8001c46e:	08 9b       	mov	r11,r4
8001c470:	0e 9c       	mov	r12,r7
8001c472:	fe b0 fd e7 	rcall	8001c040 <_read_sectors>
8001c476:	ca 60       	breq	8001c3c2 <T.96+0x22>
            if (sectorsRead)
8001c478:	18 04       	add	r4,r12
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
8001c47a:	f8 03 15 09 	lsl	r3,r12,0x9
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);        
            if (sectorsRead)
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
8001c47e:	cd db       	rjmp	8001c438 <T.96+0x98>
8001c480:	e7 d4 c0 09 	bfextu	r3,r4,0x0,0x9

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
8001c484:	30 12       	mov	r2,1
8001c486:	a9 94       	lsr	r4,0x9
    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
        count = file->filelength - file->bytenum;

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
8001c488:	cb 7b       	rjmp	8001c3f6 <T.96+0x56>
8001c48a:	30 06       	mov	r6,0

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001c48c:	c9 bb       	rjmp	8001c3c2 <T.96+0x22>
8001c48e:	d7 03       	nop

8001c490 <fl_fgetc>:
8001c490:	d4 01       	pushm	lr
8001c492:	20 1d       	sub	sp,4
8001c494:	30 08       	mov	r8,0
8001c496:	18 9b       	mov	r11,r12
8001c498:	fa cc ff fc 	sub	r12,sp,-4
8001c49c:	18 f8       	st.b	--r12,r8
8001c49e:	c8 1f       	rcall	8001c3a0 <T.96>
8001c4a0:	58 1c       	cp.w	r12,1
8001c4a2:	fb fc 08 03 	ld.ubeq	r12,sp[0x3]
    int res;
    uint8 data = 0;
    
    res = fl_fread(&data, 1, 1, f);
    if (res == 1)
        return (int)data;
8001c4a6:	2f fd       	sub	sp,-4
    else
        return res;
}
8001c4a8:	d8 02       	popm	pc
8001c4aa:	d7 03       	nop

8001c4ac <fl_fclose>:
8001c4ac:	eb cd 40 c0 	pushm	r6-r7,lr
void fl_fclose(void *f)
{
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
8001c4b0:	e0 69 29 f0 	mov	r9,10736
8001c4b4:	18 97       	mov	r7,r12
8001c4b6:	72 08       	ld.w	r8,r9[0x0]
8001c4b8:	58 08       	cp.w	r8,0

    if (file)
8001c4ba:	c4 30       	breq	8001c540 <fl_fclose+0x94>
8001c4bc:	58 07       	cp.w	r7,0
    {
        FL_LOCK(&_fs);
8001c4be:	c3 f0       	breq	8001c53c <fl_fclose+0x90>
8001c4c0:	e0 66 1d 00 	mov	r6,7424
8001c4c4:	6c f8       	ld.w	r8,r6[0x3c]
8001c4c6:	58 08       	cp.w	r8,0

        // Flush un-written data to file
        fl_fflush(f);
8001c4c8:	c0 20       	breq	8001c4cc <fl_fclose+0x20>
8001c4ca:	5d 18       	icall	r8
8001c4cc:	0e 9c       	mov	r12,r7

        // File size changed?
        if (file->filelength_changed)
8001c4ce:	c2 9f       	rcall	8001c320 <fl_fflush>
8001c4d0:	6e 48       	ld.w	r8,r7[0x10]
8001c4d2:	58 08       	cp.w	r8,0
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
8001c4d4:	c4 f1       	brne	8001c572 <fl_fclose+0xc6>
        file->filelength = 0;
        file->startcluster = 0;
        file->file_data_address = 0xFFFFFFFF;
        file->file_data_dirty = 0;
        file->filelength_changed = 0;
8001c4d6:	30 08       	mov	r8,0
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
8001c4d8:	8f 48       	st.w	r7[0x10],r8
        file->filelength = 0;
8001c4da:	8f 28       	st.w	r7[0x8],r8
        file->startcluster = 0;
8001c4dc:	8f 38       	st.w	r7[0xc],r8
        file->file_data_address = 0xFFFFFFFF;
        file->file_data_dirty = 0;
8001c4de:	8f 18       	st.w	r7[0x4],r8
8001c4e0:	ef 48 04 34 	st.w	r7[1076],r8
        }

        file->bytenum = 0;
        file->filelength = 0;
        file->startcluster = 0;
        file->file_data_address = 0xFFFFFFFF;
8001c4e4:	3f f8       	mov	r8,-1
8001c4e6:	ef 48 04 30 	st.w	r7[1072],r8
inline void fat_list_remove(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
8001c4ea:	ee f8 04 3c 	ld.w	r8,r7[1084]
8001c4ee:	58 08       	cp.w	r8,0
        list->head = node->next;
    else
        node->previous->next = node->next;
8001c4f0:	c4 c0       	breq	8001c588 <fl_fclose+0xdc>
8001c4f2:	ee f9 04 40 	ld.w	r9,r7[1088]
8001c4f6:	91 19       	st.w	r8[0x4],r9
8001c4f8:	ee f9 04 40 	ld.w	r9,r7[1088]
8001c4fc:	ee f8 04 3c 	ld.w	r8,r7[1084]

    if(!node->next)
8001c500:	58 09       	cp.w	r9,0
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
8001c502:	c4 a0       	breq	8001c596 <fl_fclose+0xea>
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001c504:	93 08       	st.w	r9[0x0],r8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
8001c506:	e0 6b 29 f4 	mov	r11,10740
8001c50a:	ee c9 fb c4 	sub	r9,r7,-1084
8001c50e:	76 18       	ld.w	r8,r11[0x4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c510:	58 08       	cp.w	r8,0
8001c512:	c4 60       	breq	8001c59e <fl_fclose+0xf2>
    new_node->next = node->next;
8001c514:	ef 48 04 3c 	st.w	r7[1084],r8
8001c518:	70 1a       	ld.w	r10,r8[0x4]
    if (!node->next)
8001c51a:	ef 4a 04 40 	st.w	r7[1088],r10
        list->tail = new_node;
8001c51e:	70 1a       	ld.w	r10,r8[0x4]
8001c520:	58 0a       	cp.w	r10,0
    else
        node->next->previous = new_node;
8001c522:	f7 f9 0a 01 	st.weq	r11[0x4],r9
    node->next = new_node;
8001c526:	f5 f9 1a 00 	st.wne	r10[0x0],r9
        file->filelength_changed = 0;

        // Free file handle
        _free_file(file);

        fatfs_fat_purge(&_fs);
8001c52a:	91 19       	st.w	r8[0x4],r9
8001c52c:	e0 6c 1d 00 	mov	r12,7424

        FL_UNLOCK(&_fs);
8001c530:	e0 a0 09 cc 	rcall	8001d8c8 <fatfs_fat_purge>
8001c534:	6d 08       	ld.w	r8,r6[0x40]
8001c536:	58 08       	cp.w	r8,0
8001c538:	c0 20       	breq	8001c53c <fl_fclose+0x90>

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001c53a:	5d 18       	icall	r8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001c53c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001c540:	e0 6a 21 68 	mov	r10,8552
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001c544:	f5 48 08 84 	st.w	r10[2180],r8
8001c548:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001c54c:	e0 6b 1c f4 	mov	r11,7412
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c550:	97 08       	st.w	r11[0x0],r8
8001c552:	97 18       	st.w	r11[0x4],r8
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c554:	f4 cc f7 80 	sub	r12,r10,-2176
8001c558:	e0 68 29 f4 	mov	r8,10740
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c55c:	f5 4c 04 40 	st.w	r10[1088],r12

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001c560:	f4 cb fb c4 	sub	r11,r10,-1084
8001c564:	f5 4b 08 80 	st.w	r10[2176],r11
        // File size changed?
        if (file->filelength_changed)
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
8001c568:	91 1c       	st.w	r8[0x4],r12
8001c56a:	91 0b       	st.w	r8[0x0],r11
8001c56c:	30 18       	mov	r8,1
8001c56e:	93 08       	st.w	r9[0x0],r8
8001c570:	ca 6b       	rjmp	8001c4bc <fl_fclose+0x10>
8001c572:	6e 39       	ld.w	r9,r7[0xc]
#endif
            file->filelength_changed = 0;
8001c574:	ee ca fd e4 	sub	r10,r7,-540
8001c578:	6e 0b       	ld.w	r11,r7[0x0]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001c57a:	e0 6c 1d 00 	mov	r12,7424
8001c57e:	fe b0 f9 95 	rcall	8001b8a8 <fatfs_update_file_length>
    else
        node->previous->next = node->next;

    if(!node->next)
8001c582:	30 08       	mov	r8,0
8001c584:	8f 48       	st.w	r7[0x10],r8
        list->tail = node->previous;
8001c586:	ca 8b       	rjmp	8001c4d6 <fl_fclose+0x2a>
8001c588:	ee f9 04 40 	ld.w	r9,r7[1088]
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001c58c:	e0 6a 1c f4 	mov	r10,7412
8001c590:	95 09       	st.w	r10[0x0],r9
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001c592:	58 09       	cp.w	r9,0
    new_node->next = node;
8001c594:	cb 81       	brne	8001c504 <fl_fclose+0x58>
8001c596:	e0 69 1c f4 	mov	r9,7412
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001c59a:	93 18       	st.w	r9[0x4],r8
    new_node->next = node;
    if (!node->previous)
8001c59c:	cb 5b       	rjmp	8001c506 <fl_fclose+0x5a>
        list->head = new_node;
8001c59e:	76 08       	ld.w	r8,r11[0x0]
8001c5a0:	58 08       	cp.w	r8,0
8001c5a2:	c0 e0       	breq	8001c5be <fl_fclose+0x112>
    else
        node->previous->next = new_node;
8001c5a4:	70 0a       	ld.w	r10,r8[0x0]
8001c5a6:	ef 48 04 40 	st.w	r7[1088],r8
    node->previous = new_node;
8001c5aa:	ef 4a 04 3c 	st.w	r7[1084],r10
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001c5ae:	70 0a       	ld.w	r10,r8[0x0]
        list->tail = node;
        node->previous = 0;
        node->next = 0;
8001c5b0:	58 0a       	cp.w	r10,0
8001c5b2:	f7 f9 0a 00 	st.weq	r11[0x0],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001c5b6:	f5 f9 1a 01 	st.wne	r10[0x4],r9
8001c5ba:	91 09       	st.w	r8[0x0],r9
8001c5bc:	cb 8b       	rjmp	8001c52c <fl_fclose+0x80>
8001c5be:	97 19       	st.w	r11[0x4],r9
8001c5c0:	97 09       	st.w	r11[0x0],r9
8001c5c2:	ef 48 04 40 	st.w	r7[1088],r8
8001c5c6:	ef 48 04 3c 	st.w	r7[1084],r8
8001c5ca:	cb 1b       	rjmp	8001c52c <fl_fclose+0x80>

8001c5cc <fl_attach_media>:
8001c5cc:	eb cd 40 80 	pushm	r7,lr
8001c5d0:	e0 6a 29 f0 	mov	r10,10736
8001c5d4:	18 98       	mov	r8,r12
8001c5d6:	74 09       	ld.w	r9,r10[0x0]
8001c5d8:	58 09       	cp.w	r9,0
8001c5da:	c1 00       	breq	8001c5fa <fl_attach_media+0x2e>
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();

    _fs.disk_io.read_media = rd;
8001c5dc:	e0 6c 1d 00 	mov	r12,7424
    _fs.disk_io.write_media = wr;

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
8001c5e0:	99 d8       	st.w	r12[0x34],r8
8001c5e2:	99 eb       	st.w	r12[0x38],r11
8001c5e4:	fe b0 f5 a8 	rcall	8001b134 <fatfs_init>
	    print_dbg_hex(res);
	    print_dbg("\r\n");
        return res;
    }

    _filelib_valid = 1;
8001c5e8:	18 97       	mov	r7,r12
8001c5ea:	c2 11       	brne	8001c62c <fl_attach_media+0x60>
    return FAT_INIT_OK;
}
8001c5ec:	30 19       	mov	r9,1
	    print_dbg_hex(res);
	    print_dbg("\r\n");
        return res;
    }

    _filelib_valid = 1;
8001c5ee:	e0 68 1c fc 	mov	r8,7420
    return FAT_INIT_OK;
}
8001c5f2:	0e 9c       	mov	r12,r7
8001c5f4:	91 09       	st.w	r8[0x0],r9
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001c5f6:	e3 cd 80 80 	ldm	sp++,r7,pc

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001c5fa:	e0 6c 21 68 	mov	r12,8552
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001c5fe:	f9 49 08 84 	st.w	r12[2180],r9
8001c602:	f9 49 04 3c 	st.w	r12[1084],r9
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c606:	e0 6e 1c f4 	mov	lr,7412
8001c60a:	9d 09       	st.w	lr[0x0],r9
8001c60c:	9d 19       	st.w	lr[0x4],r9
    new_node->next = node->next;
    if (!node->next)
8001c60e:	f8 c7 fb c4 	sub	r7,r12,-1084
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c612:	e0 69 29 f4 	mov	r9,10740
8001c616:	f9 47 08 80 	st.w	r12[2176],r7

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001c61a:	f8 ce f7 80 	sub	lr,r12,-2176
8001c61e:	f9 4e 04 40 	st.w	r12[1088],lr

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
    {
      //        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
            print_dbg("FAT_FS: Error could not load FAT details!\r\n");
8001c622:	93 1e       	st.w	r9[0x4],lr
8001c624:	93 07       	st.w	r9[0x0],r7
	    print_dbg("error number: ");
8001c626:	30 19       	mov	r9,1
8001c628:	95 09       	st.w	r10[0x0],r9
8001c62a:	cd 9b       	rjmp	8001c5dc <fl_attach_media+0x10>
	    print_dbg_hex(res);
8001c62c:	48 8c       	lddpc	r12,8001c64c <fl_attach_media+0x80>
8001c62e:	fe b0 b4 b7 	rcall	80012f9c <print_dbg>
	    print_dbg("\r\n");
8001c632:	48 8c       	lddpc	r12,8001c650 <fl_attach_media+0x84>
8001c634:	fe b0 b4 b4 	rcall	80012f9c <print_dbg>
        return res;
    }

    _filelib_valid = 1;
    return FAT_INIT_OK;
}
8001c638:	0e 9c       	mov	r12,r7
8001c63a:	fe b0 b4 d9 	rcall	80012fec <print_dbg_hex>
8001c63e:	48 6c       	lddpc	r12,8001c654 <fl_attach_media+0x88>
8001c640:	fe b0 b4 ae 	rcall	80012f9c <print_dbg>
8001c644:	0e 9c       	mov	r12,r7
8001c646:	e3 cd 80 80 	ldm	sp++,r7,pc
8001c64a:	d7 03       	nop
8001c64c:	80 02       	ld.sh	r2,r0[0x0]
8001c64e:	53 a0       	stdsp	sp[0xe8],r0
8001c650:	80 02       	ld.sh	r2,r0[0x0]
8001c652:	53 cc       	stdsp	sp[0xf0],r12
8001c654:	80 02       	ld.sh	r2,r0[0x0]
8001c656:	53 dc       	stdsp	sp[0xf4],r12

8001c658 <_open_file>:
8001c658:	eb cd 40 fe 	pushm	r1-r7,lr
8001c65c:	20 8d       	sub	sp,32
8001c65e:	e0 61 29 f4 	mov	r1,10740
8001c662:	18 92       	mov	r2,r12
8001c664:	62 06       	ld.w	r6,r1[0x0]
8001c666:	58 06       	cp.w	r6,0
8001c668:	e0 80 00 f0 	breq	8001c848 <_open_file+0x1f0>
8001c66c:	6c 08       	ld.w	r8,r6[0x0]
8001c66e:	58 08       	cp.w	r8,0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001c670:	f0 09 17 00 	moveq	r9,r8
8001c674:	ed f8 00 01 	ld.weq	r8,r6[0x4]
8001c678:	e3 f8 0a 00 	st.weq	r1[0x0],r8
    else
        node->previous->next = node->next;
8001c67c:	ed f9 10 01 	ld.wne	r9,r6[0x4]
8001c680:	f1 f9 1a 01 	st.wne	r8[0x4],r9
8001c684:	ed f8 10 01 	ld.wne	r8,r6[0x4]
8001c688:	ed f9 10 00 	ld.wne	r9,r6[0x0]

    if(!node->next)
        list->tail = node->previous;
8001c68c:	e3 f9 0a 01 	st.weq	r1[0x4],r9
    else
        node->next->previous = node->previous;
8001c690:	f1 f9 1a 00 	st.wne	r8[0x0],r9
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001c694:	e0 63 1c f4 	mov	r3,7412
8001c698:	66 18       	ld.w	r8,r3[0x4]
8001c69a:	58 08       	cp.w	r8,0
8001c69c:	e0 80 00 db 	breq	8001c852 <_open_file+0x1fa>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c6a0:	8d 08       	st.w	r6[0x0],r8
    new_node->next = node->next;
8001c6a2:	70 19       	ld.w	r9,r8[0x4]
8001c6a4:	8d 19       	st.w	r6[0x4],r9
    if (!node->next)
8001c6a6:	70 19       	ld.w	r9,r8[0x4]
        list->tail = new_node;
8001c6a8:	58 09       	cp.w	r9,0
8001c6aa:	e7 f6 0a 01 	st.weq	r3[0x4],r6
    else
        node->next->previous = new_node;
8001c6ae:	f3 f6 1a 00 	st.wne	r9[0x0],r6
    node->next = new_node;
8001c6b2:	91 16       	st.w	r8[0x4],r6

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
8001c6b4:	ec c7 04 3c 	sub	r7,r6,1084
    FL_FILE* file; 
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
8001c6b8:	c3 60       	breq	8001c724 <_open_file+0xcc>
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
8001c6ba:	ec c5 04 28 	sub	r5,r6,1064
8001c6be:	e0 6a 01 04 	mov	r10,260
8001c6c2:	30 0b       	mov	r11,0
8001c6c4:	0a 9c       	mov	r12,r5
8001c6c6:	e0 a0 37 47 	rcall	80023554 <memset>
    memset(file->filename, '\0', sizeof(file->filename));
8001c6ca:	ec c4 03 24 	sub	r4,r6,804
8001c6ce:	e0 6a 01 04 	mov	r10,260
8001c6d2:	30 0b       	mov	r11,0
8001c6d4:	08 9c       	mov	r12,r4
8001c6d6:	e0 a0 37 3f 	rcall	80023554 <memset>

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
8001c6da:	e0 68 01 04 	mov	r8,260
8001c6de:	04 9c       	mov	r12,r2
8001c6e0:	08 99       	mov	r9,r4
8001c6e2:	10 9a       	mov	r10,r8
8001c6e4:	0a 9b       	mov	r11,r5
8001c6e6:	e0 a0 07 e1 	rcall	8001d6a8 <fatfs_split_path>
8001c6ea:	5b fc       	cp.w	r12,-1
8001c6ec:	c1 80       	breq	8001c71c <_open_file+0xc4>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;
    
    // Compare open files
    fat_list_for_each(&_open_file_list, node)
8001c6ee:	66 02       	ld.w	r2,r3[0x0]
8001c6f0:	58 02       	cp.w	r2,0
8001c6f2:	c0 51       	brne	8001c6fc <_open_file+0xa4>
8001c6f4:	c1 c8       	rjmp	8001c72c <_open_file+0xd4>
8001c6f6:	64 12       	ld.w	r2,r2[0x4]
8001c6f8:	58 02       	cp.w	r2,0
8001c6fa:	c1 90       	breq	8001c72c <_open_file+0xd4>
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
8001c6fc:	e4 c8 04 3c 	sub	r8,r2,1084

        // If not the current file 
        if (openFile != file)
8001c700:	10 37       	cp.w	r7,r8
8001c702:	cf a0       	breq	8001c6f6 <_open_file+0x9e>
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
8001c704:	0a 9b       	mov	r11,r5
8001c706:	e4 cc 04 28 	sub	r12,r2,1064
8001c70a:	e0 a0 06 7f 	rcall	8001d408 <fatfs_compare_names>
8001c70e:	cf 40       	breq	8001c6f6 <_open_file+0x9e>
8001c710:	e4 cc 03 24 	sub	r12,r2,804
8001c714:	08 9b       	mov	r11,r4
8001c716:	e0 a0 06 79 	rcall	8001d408 <fatfs_compare_names>
8001c71a:	ce e0       	breq	8001c6f6 <_open_file+0x9e>
    }

    // Check if file already open
    if (_check_file_open(file))
    {
        _free_file(file);
8001c71c:	0e 9c       	mov	r12,r7
8001c71e:	fe b0 fb 6d 	rcall	8001bdf8 <_free_file>
8001c722:	30 07       	mov	r7,0
            return file;
        }

    _free_file(file);
    return NULL;
}
8001c724:	0e 9c       	mov	r12,r7
8001c726:	2f 8d       	sub	sp,-32
8001c728:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
        _free_file(file);
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0]==0)
8001c72c:	ef 39 00 14 	ld.ub	r9,r7[20]
8001c730:	30 08       	mov	r8,0
8001c732:	f0 09 18 00 	cp.b	r9,r8
8001c736:	c5 70       	breq	8001c7e4 <_open_file+0x18c>
        file->parentcluster = fatfs_get_root_cluster(&_fs);
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
8001c738:	0a 9c       	mov	r12,r5
8001c73a:	0e 9b       	mov	r11,r7
8001c73c:	fe b0 fb c0 	rcall	8001bebc <_open_directory>
8001c740:	18 98       	mov	r8,r12
8001c742:	e0 80 00 ab 	breq	8001c898 <_open_file+0x240>
        {
            _free_file(file);
            return NULL;
8001c746:	6e 0b       	ld.w	r11,r7[0x0]
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
8001c748:	08 9a       	mov	r10,r4
8001c74a:	1a 95       	mov	r5,sp
8001c74c:	e0 6c 1d 00 	mov	r12,7424
8001c750:	1a 99       	mov	r9,sp
8001c752:	fe b0 f6 5d 	rcall	8001b40c <fatfs_get_file_entry>
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
8001c756:	c4 e0       	breq	8001c7f2 <_open_file+0x19a>
8001c758:	1a 9c       	mov	r12,sp
8001c75a:	e0 a0 02 90 	rcall	8001cc7a <fatfs_entry_is_file>
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
8001c75e:	c4 a0       	breq	8001c7f2 <_open_file+0x19a>
8001c760:	1a 9b       	mov	r11,sp
8001c762:	30 ba       	mov	r10,11
8001c764:	ee cc fd e4 	sub	r12,r7,-540
8001c768:	e0 a0 36 52 	rcall	8002340c <memcpy>
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
8001c76c:	40 7a       	lddsp	r10,sp[0x1c]
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
8001c76e:	3f f8       	mov	r8,-1
8001c770:	14 9c       	mov	r12,r10
8001c772:	f4 06 15 18 	lsl	r6,r10,0x18
8001c776:	e6 1c 00 ff 	andh	r12,0xff,COH
8001c77a:	ed ea 13 86 	or	r6,r6,r10>>0x18
8001c77e:	e2 1a ff 00 	andl	r10,0xff00,COH
8001c782:	ed ea 10 8a 	or	r10,r6,r10<<0x8
8001c786:	f5 ec 12 8a 	or	r10,r10,r12>>0x8
8001c78a:	30 09       	mov	r9,0
            file->bytenum = 0;
8001c78c:	8f 3a       	st.w	r7[0xc],r10
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
8001c78e:	8f 29       	st.w	r7[0x8],r9
8001c790:	fb 16 00 14 	ld.uh	r6,sp[20]
8001c794:	fb 1a 00 1a 	ld.uh	r10,sp[26]
            file->file_data_dirty = 0;
            file->filelength_changed = 0;

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
8001c798:	ef 48 02 2c 	st.w	r7[556],r8
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
8001c79c:	ef 48 04 30 	st.w	r7[1072],r8
            file->file_data_dirty = 0;
            file->filelength_changed = 0;

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
8001c7a0:	ef 48 02 28 	st.w	r7[552],r8
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
8001c7a4:	ec 08 15 08 	lsl	r8,r6,0x8
8001c7a8:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8001c7ac:	f1 e6 12 86 	or	r6,r8,r6>>0x8
8001c7b0:	f4 08 15 08 	lsl	r8,r10,0x8
8001c7b4:	b1 66       	lsl	r6,0x10
8001c7b6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8001c7ba:	f1 ea 12 8a 	or	r10,r8,r10>>0x8
8001c7be:	ec 0a 00 0a 	add	r10,r6,r10
            file->file_data_address = 0xFFFFFFFF;
            file->file_data_dirty = 0;
            file->filelength_changed = 0;
8001c7c2:	0e 9b       	mov	r11,r7
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
            file->file_data_dirty = 0;
8001c7c4:	8f 49       	st.w	r7[0x10],r9
8001c7c6:	ef 49 04 34 	st.w	r7[1076],r9

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

            fatfs_cache_init(&_fs, file);
8001c7ca:	8f 1a       	st.w	r7[0x4],r10
8001c7cc:	e0 6c 1d 00 	mov	r12,7424

            fatfs_fat_purge(&_fs);
8001c7d0:	fe b0 fb 10 	rcall	8001bdf0 <fatfs_cache_init>
8001c7d4:	e0 6c 1d 00 	mov	r12,7424
            return file;
        }

    _free_file(file);
    return NULL;
}
8001c7d8:	e0 a0 08 78 	rcall	8001d8c8 <fatfs_fat_purge>
8001c7dc:	0e 9c       	mov	r12,r7
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0]==0)
        file->parentcluster = fatfs_get_root_cluster(&_fs);
8001c7de:	2f 8d       	sub	sp,-32
8001c7e0:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8001c7e4:	e0 6c 1d 00 	mov	r12,7424
8001c7e8:	fe b0 f4 a3 	rcall	8001b12e <fatfs_get_root_cluster>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001c7ec:	18 9b       	mov	r11,r12
8001c7ee:	8f 0c       	st.w	r7[0x0],r12
8001c7f0:	ca cb       	rjmp	8001c748 <_open_file+0xf0>
8001c7f2:	6c 08       	ld.w	r8,r6[0x0]
8001c7f4:	58 08       	cp.w	r8,0
8001c7f6:	f0 09 17 00 	moveq	r9,r8
    else
        node->previous->next = node->next;
8001c7fa:	ef f8 01 10 	ld.weq	r8,r7[0x440]
8001c7fe:	e7 f8 0a 00 	st.weq	r3[0x0],r8
8001c802:	ef f9 11 10 	ld.wne	r9,r7[0x440]
8001c806:	f1 f9 1a 01 	st.wne	r8[0x4],r9

    if(!node->next)
        list->tail = node->previous;
8001c80a:	ef f8 11 10 	ld.wne	r8,r7[0x440]
    else
        node->next->previous = node->previous;
8001c80e:	ed f9 10 00 	ld.wne	r9,r6[0x0]
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001c812:	e7 f9 0a 01 	st.weq	r3[0x4],r9
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
8001c816:	f1 f9 1a 00 	st.wne	r8[0x0],r9
8001c81a:	e0 6b 29 f4 	mov	r11,10740
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c81e:	62 18       	ld.w	r8,r1[0x4]
    new_node->next = node->next;
8001c820:	ee c9 fb c4 	sub	r9,r7,-1084
8001c824:	58 08       	cp.w	r8,0
    if (!node->next)
8001c826:	c2 40       	breq	8001c86e <_open_file+0x216>
        list->tail = new_node;
8001c828:	8d 08       	st.w	r6[0x0],r8
8001c82a:	70 1a       	ld.w	r10,r8[0x4]
8001c82c:	ef 4a 04 40 	st.w	r7[1088],r10
    else
        node->next->previous = new_node;
8001c830:	70 1a       	ld.w	r10,r8[0x4]
    node->next = new_node;
8001c832:	58 0a       	cp.w	r10,0
8001c834:	f7 f9 0a 01 	st.weq	r11[0x4],r9
            return file;
        }

    _free_file(file);
    return NULL;
}
8001c838:	f5 f9 1a 00 	st.wne	r10[0x0],r9
8001c83c:	30 07       	mov	r7,0
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
    if (node)
8001c83e:	91 19       	st.w	r8[0x4],r9
8001c840:	0e 9c       	mov	r12,r7
8001c842:	2f 8d       	sub	sp,-32
8001c844:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001c848:	0c 97       	mov	r7,r6
8001c84a:	0e 9c       	mov	r12,r7
8001c84c:	2f 8d       	sub	sp,-32
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001c84e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8001c852:	66 08       	ld.w	r8,r3[0x0]
    new_node->next = node;
    if (!node->previous)
8001c854:	58 08       	cp.w	r8,0
        list->head = new_node;
8001c856:	c1 c0       	breq	8001c88e <_open_file+0x236>
8001c858:	70 09       	ld.w	r9,r8[0x0]
8001c85a:	8d 18       	st.w	r6[0x4],r8
    else
        node->previous->next = new_node;
8001c85c:	8d 09       	st.w	r6[0x0],r9
8001c85e:	70 09       	ld.w	r9,r8[0x0]
    node->previous = new_node;
8001c860:	58 09       	cp.w	r9,0
8001c862:	e7 f6 0a 00 	st.weq	r3[0x0],r6
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001c866:	f3 f6 1a 01 	st.wne	r9[0x4],r6
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001c86a:	91 06       	st.w	r8[0x0],r6
8001c86c:	c2 4b       	rjmp	8001c6b4 <_open_file+0x5c>
    new_node->next = node;
8001c86e:	76 08       	ld.w	r8,r11[0x0]
8001c870:	58 08       	cp.w	r8,0
    if (!node->previous)
8001c872:	c1 80       	breq	8001c8a2 <_open_file+0x24a>
        list->head = new_node;
8001c874:	70 0a       	ld.w	r10,r8[0x0]
8001c876:	8d 0a       	st.w	r6[0x0],r10
8001c878:	ef 48 04 40 	st.w	r7[1088],r8
    else
        node->previous->next = new_node;
8001c87c:	70 0a       	ld.w	r10,r8[0x0]
    node->previous = new_node;
8001c87e:	58 0a       	cp.w	r10,0
8001c880:	f7 f9 0a 00 	st.weq	r11[0x0],r9
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001c884:	f5 f9 1a 01 	st.wne	r10[0x4],r9
        list->tail = node;
        node->previous = 0;
        node->next = 0;
8001c888:	91 09       	st.w	r8[0x0],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001c88a:	30 07       	mov	r7,0
8001c88c:	c4 cb       	rjmp	8001c724 <_open_file+0xcc>
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
        {
            _free_file(file);
8001c88e:	87 06       	st.w	r3[0x0],r6
8001c890:	87 16       	st.w	r3[0x4],r6
8001c892:	8d 18       	st.w	r6[0x4],r8
8001c894:	8d 08       	st.w	r6[0x0],r8
            return NULL;
8001c896:	c0 fb       	rjmp	8001c6b4 <_open_file+0x5c>
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
8001c898:	0e 9c       	mov	r12,r7
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001c89a:	10 97       	mov	r7,r8
        list->tail = node;
        node->previous = 0;
8001c89c:	fe b0 fa ae 	rcall	8001bdf8 <_free_file>
        node->next = 0;
8001c8a0:	c4 2b       	rjmp	8001c724 <_open_file+0xcc>
8001c8a2:	97 19       	st.w	r11[0x4],r9
8001c8a4:	97 09       	st.w	r11[0x0],r9
8001c8a6:	8d 08       	st.w	r6[0x0],r8
8001c8a8:	ef 48 04 40 	st.w	r7[1088],r8
8001c8ac:	10 97       	mov	r7,r8
8001c8ae:	c3 bb       	rjmp	8001c724 <_open_file+0xcc>

8001c8b0 <fl_fopen>:
8001c8b0:	eb cd 40 fc 	pushm	r2-r7,lr
8001c8b4:	20 1d       	sub	sp,4
8001c8b6:	e0 69 29 f0 	mov	r9,10736
8001c8ba:	18 97       	mov	r7,r12
8001c8bc:	72 08       	ld.w	r8,r9[0x0]
8001c8be:	58 08       	cp.w	r8,0
8001c8c0:	c0 a0       	breq	8001c8d4 <fl_fopen+0x24>
8001c8c2:	e0 68 1c fc 	mov	r8,7420
8001c8c6:	70 08       	ld.w	r8,r8[0x0]
8001c8c8:	58 08       	cp.w	r8,0
8001c8ca:	c2 21       	brne	8001c90e <fl_fopen+0x5e>
8001c8cc:	30 0c       	mov	r12,0
8001c8ce:	2f fd       	sub	sp,-4
8001c8d0:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001c8d4:	e0 6a 21 68 	mov	r10,8552
8001c8d8:	f5 48 08 84 	st.w	r10[2180],r8
8001c8dc:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001c8e0:	e0 6c 1c f4 	mov	r12,7412
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c8e4:	99 08       	st.w	r12[0x0],r8
8001c8e6:	99 18       	st.w	r12[0x4],r8
8001c8e8:	f4 c6 f7 80 	sub	r6,r10,-2176
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001c8ec:	e0 68 29 f4 	mov	r8,10740
8001c8f0:	f5 46 04 40 	st.w	r10[1088],r6
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001c8f4:	f4 cc fb c4 	sub	r12,r10,-1084

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001c8f8:	f5 4c 08 80 	st.w	r10[2176],r12
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!_filelib_valid)
8001c8fc:	91 16       	st.w	r8[0x4],r6
8001c8fe:	91 0c       	st.w	r8[0x0],r12
8001c900:	30 18       	mov	r8,1
        return NULL;

    if (!path || !mode)
8001c902:	93 08       	st.w	r9[0x0],r8
8001c904:	e0 68 1c fc 	mov	r8,7420
8001c908:	70 08       	ld.w	r8,r8[0x0]
8001c90a:	58 08       	cp.w	r8,0
8001c90c:	ce 00       	breq	8001c8cc <fl_fopen+0x1c>
8001c90e:	58 0b       	cp.w	r11,0
    FL_UNLOCK(&_fs);
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
8001c910:	5f 09       	sreq	r9
8001c912:	58 07       	cp.w	r7,0
8001c914:	5f 08       	sreq	r8
8001c916:	f3 e8 10 08 	or	r8,r9,r8
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
    {
        switch (mode[i])
8001c91a:	cd 91       	brne	8001c8cc <fl_fopen+0x1c>
    FL_UNLOCK(&_fs);
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
8001c91c:	16 9c       	mov	r12,r11
8001c91e:	50 0b       	stdsp	sp[0x0],r11
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c920:	e0 a0 36 88 	rcall	80023630 <strlen>
    {
        switch (mode[i])
8001c924:	30 06       	mov	r6,0
8001c926:	4b 6a       	lddpc	r10,8001c9fc <fl_fopen+0x14c>
8001c928:	0c 98       	mov	r8,r6
8001c92a:	40 0b       	lddsp	r11,sp[0x0]
8001c92c:	18 38       	cp.w	r8,r12
8001c92e:	c1 e4       	brge	8001c96a <fl_fopen+0xba>
8001c930:	f6 08 07 09 	ld.ub	r9,r11[r8]
8001c934:	22 b9       	sub	r9,43
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
8001c936:	e0 49 00 4c 	cp.w	r9,76
8001c93a:	e0 8b 00 08 	brhi	8001c94a <fl_fopen+0x9a>
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c93e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
            break;
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
            flags |= FILE_ERASE;
            flags |= FILE_CREATE;
8001c942:	ed b6 00 00 	bld	r6,0x0
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c946:	c3 81       	brne	8001c9b6 <fl_fopen+0x106>
8001c948:	a1 b6       	sbr	r6,0x1
    {
        switch (mode[i])
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
8001c94a:	2f f8       	sub	r8,-1
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c94c:	cf 0b       	rjmp	8001c92c <fl_fopen+0x7c>
8001c94e:	e8 16 00 32 	orl	r6,0x32
8001c952:	2f f8       	sub	r8,-1
8001c954:	ce cb       	rjmp	8001c92c <fl_fopen+0x7c>
            break;
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
8001c956:	a1 a6       	sbr	r6,0x0
8001c958:	2f f8       	sub	r8,-1
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c95a:	ce 9b       	rjmp	8001c92c <fl_fopen+0x7c>
8001c95c:	a3 b6       	sbr	r6,0x3
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
8001c95e:	2f f8       	sub	r8,-1
8001c960:	ce 6b       	rjmp	8001c92c <fl_fopen+0x7c>
8001c962:	e8 16 00 26 	orl	r6,0x26
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);

    FL_LOCK(&_fs);
8001c966:	2f f8       	sub	r8,-1
8001c968:	ce 2b       	rjmp	8001c92c <fl_fopen+0x7c>
8001c96a:	e0 65 1d 00 	mov	r5,7424

    // Read
    if (flags & FILE_READ)
8001c96e:	6a e8       	ld.w	r8,r5[0x38]
8001c970:	58 08       	cp.w	r8,0
8001c972:	c3 d0       	breq	8001c9ec <fl_fopen+0x13c>
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
8001c974:	6a f8       	ld.w	r8,r5[0x3c]
8001c976:	58 08       	cp.w	r8,0
8001c978:	c0 20       	breq	8001c97c <fl_fopen+0xcc>
8001c97a:	5d 18       	icall	r8
8001c97c:	e9 d6 c0 01 	bfextu	r4,r6,0x0,0x1
        file = _create_file(path);
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
8001c980:	c2 91       	brne	8001c9d2 <fl_fopen+0x122>
        if ((flags & FILE_CREATE) && !file)
8001c982:	0c 93       	mov	r3,r6
8001c984:	e2 13 00 20 	andl	r3,0x20,COH
8001c988:	c3 51       	brne	8001c9f2 <fl_fopen+0x142>
8001c98a:	06 92       	mov	r2,r3
8001c98c:	58 04       	cp.w	r4,0
8001c98e:	c2 c1       	brne	8001c9e6 <fl_fopen+0x136>
8001c990:	58 03       	cp.w	r3,0
            if (flags & (FILE_WRITE | FILE_APPEND))
8001c992:	5f 18       	srne	r8
8001c994:	58 02       	cp.w	r2,0
8001c996:	5f 09       	sreq	r9
8001c998:	10 69       	and	r9,r8
8001c99a:	e8 09 18 00 	cp.b	r9,r4
                file = _open_file(path);

    if (file)
        file->flags = flags;

    FL_UNLOCK(&_fs);
8001c99e:	c2 40       	breq	8001c9e6 <fl_fopen+0x136>
8001c9a0:	0c 98       	mov	r8,r6
8001c9a2:	e2 18 00 06 	andl	r8,0x6,COH
8001c9a6:	c1 d1       	brne	8001c9e0 <fl_fopen+0x130>
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
8001c9a8:	08 92       	mov	r2,r4
8001c9aa:	6b 08       	ld.w	r8,r5[0x40]
8001c9ac:	58 08       	cp.w	r8,0
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
8001c9ae:	c0 20       	breq	8001c9b2 <fl_fopen+0x102>
8001c9b0:	5d 18       	icall	r8
8001c9b2:	04 9c       	mov	r12,r2
            {
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
8001c9b4:	c8 db       	rjmp	8001c8ce <fl_fopen+0x1e>
8001c9b6:	ed b6 00 01 	bld	r6,0x1
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c9ba:	c0 80       	breq	8001c9ca <fl_fopen+0x11a>
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
8001c9bc:	ed b6 00 02 	bld	r6,0x2
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001c9c0:	cc 51       	brne	8001c94a <fl_fopen+0x9a>
8001c9c2:	e8 16 00 27 	orl	r6,0x27

    FL_LOCK(&_fs);

    // Read
    if (flags & FILE_READ)
        file = _open_file(path);
8001c9c6:	2f f8       	sub	r8,-1
8001c9c8:	cb 2b       	rjmp	8001c92c <fl_fopen+0x7c>
8001c9ca:	e8 16 00 31 	orl	r6,0x31
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);

    if (file)
        file->flags = flags;
8001c9ce:	2f f8       	sub	r8,-1
8001c9d0:	ca eb       	rjmp	8001c92c <fl_fopen+0x7c>
8001c9d2:	0e 9c       	mov	r12,r7

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);
8001c9d4:	c4 2e       	rcall	8001c658 <_open_file>
8001c9d6:	18 92       	mov	r2,r12
8001c9d8:	cd 50       	breq	8001c982 <fl_fopen+0xd2>
8001c9da:	e5 66 04 38 	st.b	r2[1080],r6

    if (file)
8001c9de:	ce 6b       	rjmp	8001c9aa <fl_fopen+0xfa>
8001c9e0:	0e 9c       	mov	r12,r7
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
8001c9e2:	c3 be       	rcall	8001c658 <_open_file>
8001c9e4:	18 92       	mov	r2,r12
8001c9e6:	58 02       	cp.w	r2,0
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
        file = _create_file(path);
8001c9e8:	cf 91       	brne	8001c9da <fl_fopen+0x12a>
8001c9ea:	ce 0b       	rjmp	8001c9aa <fl_fopen+0xfa>
8001c9ec:	e2 16 00 d9 	andl	r6,0xd9,COH
8001c9f0:	cc 2b       	rjmp	8001c974 <fl_fopen+0xc4>
8001c9f2:	0e 9c       	mov	r12,r7
8001c9f4:	fe b0 fb 8a 	rcall	8001c108 <_create_file>
8001c9f8:	18 92       	mov	r2,r12
8001c9fa:	cc 9b       	rjmp	8001c98c <fl_fopen+0xdc>
8001c9fc:	80 02       	ld.sh	r2,r0[0x0]
8001c9fe:	52 6c       	stdsp	sp[0x98],r12

8001ca00 <fatfs_lfn_cache_entry>:
// fatfs_lfn_cache_entry - Function extracts long file name text from sector 
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
8001ca00:	d4 01       	pushm	lr
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
8001ca02:	31 48       	mov	r8,20
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
8001ca04:	17 89       	ld.ub	r9,r11[0x0]
8001ca06:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
8001ca0a:	f0 09 18 00 	cp.b	r9,r8
8001ca0e:	e0 8b 00 c8 	brhi	8001cb9e <fatfs_lfn_cache_entry+0x19e>
        return ;

    // This is an error condition
    if (LFNIndex == 0)
8001ca12:	58 09       	cp.w	r9,0
8001ca14:	e0 80 00 c5 	breq	8001cb9e <fatfs_lfn_cache_entry+0x19e>
        return ;

    if (lfn->no_of_strings == 0) 
8001ca18:	30 08       	mov	r8,0
8001ca1a:	f9 3a 01 05 	ld.ub	r10,r12[261]
        lfn->no_of_strings = LFNIndex;
8001ca1e:	f0 0a 18 00 	cp.b	r10,r8
8001ca22:	f9 f9 0f 05 	st.beq	r12[0x105],r9

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
8001ca26:	20 19       	sub	r9,1
8001ca28:	f2 09 00 18 	add	r8,r9,r9<<0x1
8001ca2c:	17 9e       	ld.ub	lr,r11[0x1]
8001ca2e:	f2 08 00 29 	add	r9,r9,r8<<0x2
8001ca32:	f8 09 00 08 	add	r8,r12,r9
8001ca36:	10 9a       	mov	r10,r8
8001ca38:	14 ce       	st.b	r10++,lr
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
8001ca3a:	17 be       	ld.ub	lr,r11[0x3]
8001ca3c:	b4 8e       	st.b	r10[0x0],lr
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
8001ca3e:	17 da       	ld.ub	r10,r11[0x5]
8001ca40:	b0 aa       	st.b	r8[0x2],r10
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
8001ca42:	17 fa       	ld.ub	r10,r11[0x7]
8001ca44:	b0 ba       	st.b	r8[0x3],r10
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
8001ca46:	f7 3a 00 09 	ld.ub	r10,r11[9]
8001ca4a:	b0 ca       	st.b	r8[0x4],r10
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
8001ca4c:	f7 3a 00 0e 	ld.ub	r10,r11[14]
8001ca50:	b0 da       	st.b	r8[0x5],r10
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
8001ca52:	f7 3a 00 10 	ld.ub	r10,r11[16]
8001ca56:	b0 ea       	st.b	r8[0x6],r10
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
8001ca58:	f7 3a 00 12 	ld.ub	r10,r11[18]
8001ca5c:	b0 fa       	st.b	r8[0x7],r10
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
8001ca5e:	f7 3a 00 14 	ld.ub	r10,r11[20]
8001ca62:	f1 6a 00 08 	st.b	r8[8],r10
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
8001ca66:	f7 3a 00 16 	ld.ub	r10,r11[22]
8001ca6a:	f1 6a 00 09 	st.b	r8[9],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
8001ca6e:	f7 3a 00 18 	ld.ub	r10,r11[24]
8001ca72:	f1 6a 00 0a 	st.b	r8[10],r10
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
8001ca76:	f7 3a 00 1c 	ld.ub	r10,r11[28]
8001ca7a:	f1 6a 00 0b 	st.b	r8[11],r10
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
8001ca7e:	f7 3a 00 1e 	ld.ub	r10,r11[30]

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001ca82:	11 8b       	ld.ub	r11,r8[0x0]
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
8001ca84:	f1 6a 00 0c 	st.b	r8[12],r10

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001ca88:	3f fa       	mov	r10,-1
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001ca8a:	f4 0b 18 00 	cp.b	r11,r10
8001ca8e:	f9 ba 00 20 	moveq	r10,32
8001ca92:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001ca96:	f8 09 00 08 	add	r8,r12,r9
8001ca9a:	3f fa       	mov	r10,-1
8001ca9c:	2f f8       	sub	r8,-1
8001ca9e:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001caa0:	f4 0b 18 00 	cp.b	r11,r10
8001caa4:	f9 ba 00 20 	moveq	r10,32
8001caa8:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001caac:	f8 09 00 08 	add	r8,r12,r9
8001cab0:	3f fa       	mov	r10,-1
8001cab2:	2f e8       	sub	r8,-2
8001cab4:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cab6:	f4 0b 18 00 	cp.b	r11,r10
8001caba:	f9 ba 00 20 	moveq	r10,32
8001cabe:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cac2:	f8 09 00 08 	add	r8,r12,r9
8001cac6:	3f fa       	mov	r10,-1
8001cac8:	2f d8       	sub	r8,-3
8001caca:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cacc:	f4 0b 18 00 	cp.b	r11,r10
8001cad0:	f9 ba 00 20 	moveq	r10,32
8001cad4:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cad8:	f8 09 00 08 	add	r8,r12,r9
8001cadc:	3f fa       	mov	r10,-1
8001cade:	2f c8       	sub	r8,-4
8001cae0:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cae2:	f4 0b 18 00 	cp.b	r11,r10
8001cae6:	f9 ba 00 20 	moveq	r10,32
8001caea:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001caee:	f8 09 00 08 	add	r8,r12,r9
8001caf2:	3f fa       	mov	r10,-1
8001caf4:	2f b8       	sub	r8,-5
8001caf6:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001caf8:	f4 0b 18 00 	cp.b	r11,r10
8001cafc:	f9 ba 00 20 	moveq	r10,32
8001cb00:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb04:	f8 09 00 08 	add	r8,r12,r9
8001cb08:	3f fa       	mov	r10,-1
8001cb0a:	2f a8       	sub	r8,-6
8001cb0c:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb0e:	f4 0b 18 00 	cp.b	r11,r10
8001cb12:	f9 ba 00 20 	moveq	r10,32
8001cb16:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb1a:	f8 09 00 08 	add	r8,r12,r9
8001cb1e:	3f fa       	mov	r10,-1
8001cb20:	2f 98       	sub	r8,-7
8001cb22:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb24:	f4 0b 18 00 	cp.b	r11,r10
8001cb28:	f9 ba 00 20 	moveq	r10,32
8001cb2c:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb30:	f8 09 00 08 	add	r8,r12,r9
8001cb34:	3f fa       	mov	r10,-1
8001cb36:	2f 88       	sub	r8,-8
8001cb38:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb3a:	f4 0b 18 00 	cp.b	r11,r10
8001cb3e:	f9 ba 00 20 	moveq	r10,32
8001cb42:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb46:	f8 09 00 08 	add	r8,r12,r9
8001cb4a:	3f fa       	mov	r10,-1
8001cb4c:	2f 78       	sub	r8,-9
8001cb4e:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb50:	f4 0b 18 00 	cp.b	r11,r10
8001cb54:	f9 ba 00 20 	moveq	r10,32
8001cb58:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb5c:	f8 09 00 08 	add	r8,r12,r9
8001cb60:	3f fa       	mov	r10,-1
8001cb62:	2f 68       	sub	r8,-10
8001cb64:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb66:	f4 0b 18 00 	cp.b	r11,r10
8001cb6a:	f9 ba 00 20 	moveq	r10,32
8001cb6e:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb72:	f8 09 00 08 	add	r8,r12,r9
8001cb76:	3f fa       	mov	r10,-1
8001cb78:	2f 58       	sub	r8,-11
8001cb7a:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb7c:	f4 0b 18 00 	cp.b	r11,r10
8001cb80:	f9 ba 00 20 	moveq	r10,32
8001cb84:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001cb88:	f8 09 00 09 	add	r9,r12,r9
8001cb8c:	3f f8       	mov	r8,-1
8001cb8e:	2f 49       	sub	r9,-12
8001cb90:	13 8a       	ld.ub	r10,r9[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001cb92:	f0 0a 18 00 	cp.b	r10,r8
8001cb96:	f9 b8 00 20 	moveq	r8,32
8001cb9a:	f3 f8 0e 00 	st.beq	r9[0x0],r8
8001cb9e:	d8 02       	popm	pc

8001cba0 <fatfs_lfn_cache_get>:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
8001cba0:	f9 38 01 05 	ld.ub	r8,r12[261]
8001cba4:	31 49       	mov	r9,20
8001cba6:	f2 08 18 00 	cp.b	r8,r9
8001cbaa:	c0 e0       	breq	8001cbc6 <fatfs_lfn_cache_get+0x26>
        lfn->Null = '\0';
    else if (lfn->no_of_strings)
8001cbac:	58 08       	cp.w	r8,0
8001cbae:	c0 31       	brne	8001cbb4 <fatfs_lfn_cache_get+0x14>
        lfn->String[lfn->no_of_strings][0] = '\0';
    else
        lfn->String[0][0] = '\0';
8001cbb0:	b8 88       	st.b	r12[0x0],r8

    return (char*)&lfn->String[0][0];
}
8001cbb2:	5e fc       	retal	r12
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
        lfn->Null = '\0';
    else if (lfn->no_of_strings)
        lfn->String[lfn->no_of_strings][0] = '\0';
8001cbb4:	f0 08 00 19 	add	r9,r8,r8<<0x1
8001cbb8:	f0 09 00 28 	add	r8,r8,r9<<0x2
8001cbbc:	30 09       	mov	r9,0
8001cbbe:	f8 08 00 08 	add	r8,r12,r8
8001cbc2:	b0 89       	st.b	r8[0x0],r9
8001cbc4:	5e fc       	retal	r12
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
        lfn->Null = '\0';
8001cbc6:	30 08       	mov	r8,0
8001cbc8:	f9 68 01 04 	st.b	r12[260],r8
8001cbcc:	5e fc       	retal	r12

8001cbce <fatfs_entry_lfn_text>:
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
8001cbce:	f9 38 00 0b 	ld.ub	r8,r12[11]
8001cbd2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8001cbd6:	58 f8       	cp.w	r8,15
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT) 
        return 1;
    else 
        return 0;
}
8001cbd8:	5f 0c       	sreq	r12
8001cbda:	5e fc       	retal	r12

8001cbdc <fatfs_entry_lfn_invalid>:
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  || 
8001cbdc:	3e 58       	mov	r8,-27
8001cbde:	19 89       	ld.ub	r9,r12[0x0]
8001cbe0:	f0 09 18 00 	cp.b	r9,r8
8001cbe4:	5f 0a       	sreq	r10
8001cbe6:	30 08       	mov	r8,0
8001cbe8:	f0 09 18 00 	cp.b	r9,r8
8001cbec:	5f 09       	sreq	r9
8001cbee:	f5 e9 10 09 	or	r9,r10,r9
8001cbf2:	f0 09 18 00 	cp.b	r9,r8
8001cbf6:	c0 b1       	brne	8001cc0c <fatfs_entry_lfn_invalid+0x30>
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) || 
8001cbf8:	f9 38 00 0b 	ld.ub	r8,r12[11]
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  || 
8001cbfc:	30 89       	mov	r9,8
8001cbfe:	f2 08 18 00 	cp.b	r8,r9
8001cc02:	c0 50       	breq	8001cc0c <fatfs_entry_lfn_invalid+0x30>
8001cc04:	e2 18 00 06 	andl	r8,0x6,COH
8001cc08:	5f 1c       	srne	r12
8001cc0a:	5e fc       	retal	r12
8001cc0c:	5e ff       	retal	1

8001cc0e <fatfs_entry_lfn_exists>:
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001cc0e:	f7 38 00 0b 	ld.ub	r8,r11[11]
8001cc12:	30 f9       	mov	r9,15
8001cc14:	f2 08 18 00 	cp.b	r8,r9
8001cc18:	c1 50       	breq	8001cc42 <fatfs_entry_lfn_exists+0x34>
         (entry->Name[0]!=FILE_HEADER_BLANK) && 
8001cc1a:	17 89       	ld.ub	r9,r11[0x0]
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001cc1c:	58 09       	cp.w	r9,0
8001cc1e:	c1 20       	breq	8001cc42 <fatfs_entry_lfn_exists+0x34>
8001cc20:	3e 5a       	mov	r10,-27
8001cc22:	f4 09 18 00 	cp.b	r9,r10
8001cc26:	c0 e0       	breq	8001cc42 <fatfs_entry_lfn_exists+0x34>
8001cc28:	30 89       	mov	r9,8
8001cc2a:	f2 08 18 00 	cp.b	r8,r9
8001cc2e:	c0 a0       	breq	8001cc42 <fatfs_entry_lfn_exists+0x34>
8001cc30:	e2 18 00 06 	andl	r8,0x6,COH
8001cc34:	c0 71       	brne	8001cc42 <fatfs_entry_lfn_exists+0x34>
8001cc36:	f9 39 01 05 	ld.ub	r9,r12[261]
8001cc3a:	f0 09 18 00 	cp.b	r9,r8
8001cc3e:	5f 1c       	srne	r12
8001cc40:	5e fc       	retal	r12
8001cc42:	5e fd       	retal	0

8001cc44 <fatfs_entry_sfn_only>:
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001cc44:	f9 38 00 0b 	ld.ub	r8,r12[11]
8001cc48:	30 f9       	mov	r9,15
8001cc4a:	f2 08 18 00 	cp.b	r8,r9
8001cc4e:	c1 00       	breq	8001cc6e <fatfs_entry_sfn_only+0x2a>
         (entry->Name[0]!=FILE_HEADER_BLANK) && 
8001cc50:	19 89       	ld.ub	r9,r12[0x0]
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001cc52:	58 09       	cp.w	r9,0
8001cc54:	c0 d0       	breq	8001cc6e <fatfs_entry_sfn_only+0x2a>
8001cc56:	3e 5a       	mov	r10,-27
8001cc58:	f4 09 18 00 	cp.b	r9,r10
8001cc5c:	c0 90       	breq	8001cc6e <fatfs_entry_sfn_only+0x2a>
8001cc5e:	30 89       	mov	r9,8
8001cc60:	f2 08 18 00 	cp.b	r8,r9
8001cc64:	c0 50       	breq	8001cc6e <fatfs_entry_sfn_only+0x2a>
8001cc66:	e2 18 00 06 	andl	r8,0x6,COH
8001cc6a:	5f 0c       	sreq	r12
8001cc6c:	5e fc       	retal	r12
8001cc6e:	5e fd       	retal	0

8001cc70 <fatfs_entry_is_dir>:
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
8001cc70:	f9 3c 00 0b 	ld.ub	r12,r12[11]
    if (entry->Attr & FILE_TYPE_DIR) 
        return 1;
    else 
        return 0;
}
8001cc74:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8001cc78:	5e fc       	retal	r12

8001cc7a <fatfs_entry_is_file>:
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
8001cc7a:	f9 3c 00 0b 	ld.ub	r12,r12[11]
    if (entry->Attr & FILE_TYPE_FILE) 
        return 1;
    else 
        return 0;
}
8001cc7e:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1
8001cc82:	5e fc       	retal	r12

8001cc84 <fatfs_sfn_create_entry>:
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
8001cc84:	eb cd 40 e0 	pushm	r5-r7,lr
#endif
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
8001cc88:	f8 c7 ff fc 	sub	r7,r12,-4
8001cc8c:	0e 39       	cp.w	r9,r7
8001cc8e:	5f b5       	srhi	r5
8001cc90:	f2 ce ff fc 	sub	lr,r9,-4
8001cc94:	1c 3c       	cp.w	r12,lr
8001cc96:	5f b6       	srhi	r6
8001cc98:	eb e6 10 06 	or	r6,r5,r6
8001cc9c:	f3 ec 10 05 	or	r5,r9,r12
8001cca0:	eb d5 c0 02 	bfextu	r5,r5,0x0,0x2
8001cca4:	5f 05       	sreq	r5
8001cca6:	eb e6 00 06 	and	r6,r5,r6
8001ccaa:	c6 70       	breq	8001cd78 <fatfs_sfn_create_entry+0xf4>
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];
8001ccac:	78 06       	ld.w	r6,r12[0x0]
8001ccae:	93 06       	st.w	r9[0x0],r6
8001ccb0:	6e 07       	ld.w	r7,r7[0x0]
8001ccb2:	9d 07       	st.w	lr[0x0],r7
8001ccb4:	f9 3e 00 08 	ld.ub	lr,r12[8]
8001ccb8:	f3 6e 00 08 	st.b	r9[8],lr
8001ccbc:	f9 3e 00 09 	ld.ub	lr,r12[9]
8001ccc0:	f3 6e 00 09 	st.b	r9[9],lr
8001ccc4:	f9 3c 00 0a 	ld.ub	r12,r12[10]
8001ccc8:	f3 6c 00 0a 	st.b	r9[10],r12

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
8001cccc:	30 0c       	mov	r12,0
    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;
8001ccce:	30 0e       	mov	lr,0
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
    entry->LstAccDate[1] = 0x00;
    entry->LstAccDate[0] = 0x20;
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
8001ccd0:	f3 6c 00 19 	st.b	r9[25],r12
    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
8001ccd4:	f3 6c 00 0d 	st.b	r9[13],r12
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
8001ccd8:	f3 6c 00 0e 	st.b	r9[14],r12
8001ccdc:	f3 6c 00 0f 	st.b	r9[15],r12
    entry->CrtDate[1] = 0x00;
8001cce0:	f3 6c 00 11 	st.b	r9[17],r12
    entry->CrtDate[0] = 0x20;
    entry->LstAccDate[1] = 0x00;
8001cce4:	f3 6c 00 13 	st.b	r9[19],r12
    entry->LstAccDate[0] = 0x20;
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
8001cce8:	f3 6c 00 16 	st.b	r9[22],r12
8001ccec:	f3 6c 00 17 	st.b	r9[23],r12

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
8001ccf0:	32 0c       	mov	r12,32
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;    

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
8001ccf2:	58 08       	cp.w	r8,0
8001ccf4:	f3 fc 0e 0b 	st.beq	r9[0xb],r12
    else
        entry->Attr = FILE_TYPE_DIR;
8001ccf8:	f9 b8 01 10 	movne	r8,16
8001ccfc:	f3 f8 1e 0b 	st.bne	r9[0xb],r8

    entry->NTRes = 0x00;
8001cd00:	f3 6e 00 0c 	st.b	r9[12],lr

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
8001cd04:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
8001cd08:	b1 8a       	lsr	r10,0x10
8001cd0a:	f4 0e 16 08 	lsr	lr,r10,0x8
8001cd0e:	fd ea 10 8a 	or	r10,lr,r10<<0x8
8001cd12:	5c 7a       	castu.h	r10
8001cd14:	f3 6a 00 15 	st.b	r9[21],r10
8001cd18:	a9 8a       	lsr	r10,0x8
8001cd1a:	f3 6a 00 14 	st.b	r9[20],r10
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
8001cd1e:	f0 0a 16 08 	lsr	r10,r8,0x8
8001cd22:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8001cd26:	5c 78       	castu.h	r8
8001cd28:	f3 68 00 1b 	st.b	r9[27],r8
8001cd2c:	a9 88       	lsr	r8,0x8
8001cd2e:	f3 68 00 1a 	st.b	r9[26],r8
    entry->FileSize = FAT_HTONL(size);
8001cd32:	f6 08 15 18 	lsl	r8,r11,0x18
8001cd36:	f1 eb 13 88 	or	r8,r8,r11>>0x18

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
8001cd3a:	f3 6c 00 10 	st.b	r9[16],r12
    entry->LstAccDate[1] = 0x00;
    entry->LstAccDate[0] = 0x20;
8001cd3e:	f3 6c 00 12 	st.b	r9[18],r12
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;    
8001cd42:	f3 6c 00 18 	st.b	r9[24],r12

    entry->NTRes = 0x00;

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
    entry->FileSize = FAT_HTONL(size);
8001cd46:	16 9c       	mov	r12,r11
8001cd48:	e2 1b ff 00 	andl	r11,0xff00,COH
8001cd4c:	e6 1c 00 ff 	andh	r12,0xff,COH
8001cd50:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
8001cd54:	f7 ec 12 8b 	or	r11,r11,r12>>0x8
8001cd58:	f6 08 16 18 	lsr	r8,r11,0x18
8001cd5c:	f3 6b 00 1f 	st.b	r9[31],r11
8001cd60:	f3 68 00 1c 	st.b	r9[28],r8
8001cd64:	f1 db c2 08 	bfextu	r8,r11,0x10,0x8
8001cd68:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
8001cd6c:	f3 68 00 1d 	st.b	r9[29],r8
8001cd70:	f3 6b 00 1e 	st.b	r9[30],r11
}
8001cd74:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];
8001cd78:	19 8e       	ld.ub	lr,r12[0x0]
8001cd7a:	b2 8e       	st.b	r9[0x0],lr
8001cd7c:	19 9e       	ld.ub	lr,r12[0x1]
8001cd7e:	b2 9e       	st.b	r9[0x1],lr
8001cd80:	19 ae       	ld.ub	lr,r12[0x2]
8001cd82:	b2 ae       	st.b	r9[0x2],lr
8001cd84:	19 be       	ld.ub	lr,r12[0x3]
8001cd86:	b2 be       	st.b	r9[0x3],lr
8001cd88:	19 ce       	ld.ub	lr,r12[0x4]
8001cd8a:	b2 ce       	st.b	r9[0x4],lr
8001cd8c:	19 de       	ld.ub	lr,r12[0x5]
8001cd8e:	b2 de       	st.b	r9[0x5],lr
8001cd90:	19 ee       	ld.ub	lr,r12[0x6]
8001cd92:	b2 ee       	st.b	r9[0x6],lr
8001cd94:	19 fe       	ld.ub	lr,r12[0x7]
8001cd96:	b2 fe       	st.b	r9[0x7],lr
8001cd98:	c8 eb       	rjmp	8001ccb4 <fatfs_sfn_create_entry+0x30>

8001cd9a <fatfs_lfn_cache_init>:
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
    int i = 0;

    lfn->no_of_strings = 0;
8001cd9a:	30 08       	mov	r8,0
8001cd9c:	f9 68 01 05 	st.b	r12[261],r8

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
8001cda0:	58 0b       	cp.w	r11,0
8001cda2:	5e 0c       	reteq	r12
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
8001cda4:	30 0a       	mov	r10,0
8001cda6:	14 99       	mov	r9,r10
8001cda8:	f8 0a 00 08 	add	r8,r12,r10
8001cdac:	10 c9       	st.b	r8++,r9
8001cdae:	10 c9       	st.b	r8++,r9
8001cdb0:	10 c9       	st.b	r8++,r9
8001cdb2:	10 c9       	st.b	r8++,r9
8001cdb4:	10 c9       	st.b	r8++,r9
8001cdb6:	10 c9       	st.b	r8++,r9
8001cdb8:	10 c9       	st.b	r8++,r9
8001cdba:	10 c9       	st.b	r8++,r9
8001cdbc:	10 c9       	st.b	r8++,r9
8001cdbe:	10 c9       	st.b	r8++,r9
8001cdc0:	10 c9       	st.b	r8++,r9
8001cdc2:	10 c9       	st.b	r8++,r9
8001cdc4:	b0 89       	st.b	r8[0x0],r9
8001cdc6:	2f 3a       	sub	r10,-13

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
8001cdc8:	e0 4a 01 04 	cp.w	r10,260
8001cdcc:	ce e1       	brne	8001cda8 <fatfs_lfn_cache_init+0xe>
8001cdce:	5e fc       	retal	r12

8001cdd0 <fatfs_lfn_generate_tail>:
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
8001cdd0:	eb cd 40 fc 	pushm	r2-r7,lr
8001cdd4:	20 bd       	sub	sp,44
8001cdd6:	18 96       	mov	r6,r12
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
8001cdd8:	e0 5a 86 9f 	cp.w	r10,99999
8001cddc:	e0 88 00 05 	brls	8001cde6 <fatfs_lfn_generate_tail+0x16>
8001cde0:	2f 5d       	sub	sp,-44
8001cde2:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str)); 
8001cde6:	30 09       	mov	r9,0
8001cde8:	fa c7 ff e0 	sub	r7,sp,-32
8001cdec:	30 08       	mov	r8,0
8001cdee:	ee e9 00 00 	st.d	r7[0],r8
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
8001cdf2:	4a 89       	lddpc	r9,8001ce90 <fatfs_lfn_generate_tail+0xc0>
8001cdf4:	f3 3c 00 10 	ld.ub	r12,r9[16]
8001cdf8:	fb 6c 00 10 	st.b	sp[16],r12

    if (tailNum > 99999)
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str)); 
8001cdfc:	30 0c       	mov	r12,0
8001cdfe:	8f 2c       	st.w	r7[0x8],r12
    tail_str[0] = '~';
8001ce00:	37 ec       	mov	r12,126
8001ce02:	fb 6c 00 20 	st.b	sp[32],r12
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
8001ce06:	f2 e4 00 00 	ld.d	r4,r9[0]
8001ce0a:	fa e5 00 00 	st.d	sp[0],r4
8001ce0e:	f2 e4 00 08 	ld.d	r4,r9[8]
8001ce12:	fa e5 00 08 	st.d	sp[8],r4
8001ce16:	fa c5 ff ec 	sub	r5,sp,-20
   
    // Build string backwards
    cp = outbuf;
    do 
    {
        *cp++ = digits[(int)(num % 10)];
8001ce1a:	e0 64 cc cd 	mov	r4,52429
8001ce1e:	ea 14 cc cc 	orh	r4,0xcccc
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
8001ce22:	0a 99       	mov	r9,r5
8001ce24:	c0 28       	rjmp	8001ce28 <fatfs_lfn_generate_tail+0x58>
    cp = outbuf;
    do 
    {
        *cp++ = digits[(int)(num % 10)];
    } 
    while ((num /= 10) > 0);
8001ce26:	10 99       	mov	r9,r8
   
    // Build string backwards
    cp = outbuf;
    do 
    {
        *cp++ = digits[(int)(num % 10)];
8001ce28:	f4 04 06 42 	mulu.d	r2,r10,r4
8001ce2c:	e6 0c 16 03 	lsr	r12,r3,0x3
8001ce30:	f8 0c 00 2e 	add	lr,r12,r12<<0x2
8001ce34:	12 98       	mov	r8,r9
8001ce36:	f4 0e 01 1a 	sub	r10,r10,lr<<0x1
8001ce3a:	fa ce ff d4 	sub	lr,sp,-44
8001ce3e:	fc 0a 00 0a 	add	r10,lr,r10
8001ce42:	f5 3a ff d4 	ld.ub	r10,r10[-44]
8001ce46:	10 ca       	st.b	r8++,r10
    } 
    while ((num /= 10) > 0);
8001ce48:	18 9a       	mov	r10,r12
8001ce4a:	58 0c       	cp.w	r12,0
8001ce4c:	ce d1       	brne	8001ce26 <fatfs_lfn_generate_tail+0x56>
    
    *cp-- = 0;
8001ce4e:	b0 8c       	st.b	r8[0x0],r12

    // Copy in forwards
    while (cp >= outbuf)
8001ce50:	0a 39       	cp.w	r9,r5
8001ce52:	c1 c3       	brcs	8001ce8a <fatfs_lfn_generate_tail+0xba>
8001ce54:	fa c8 ff df 	sub	r8,sp,-33
        *s++ = *cp--;
8001ce58:	13 8a       	ld.ub	r10,r9[0x0]
8001ce5a:	10 ca       	st.b	r8++,r10
8001ce5c:	20 19       	sub	r9,1
    while ((num /= 10) > 0);
    
    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
8001ce5e:	0a 39       	cp.w	r9,r5
8001ce60:	cf c2       	brcc	8001ce58 <fatfs_lfn_generate_tail+0x88>
        *s++ = *cp--;

    *s = 0;
8001ce62:	30 09       	mov	r9,0
    memset(tail_str, 0x00, sizeof(tail_str)); 
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);
    
    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
8001ce64:	30 ba       	mov	r10,11

    // Copy in forwards
    while (cp >= outbuf)
        *s++ = *cp--;

    *s = 0;
8001ce66:	b0 89       	st.b	r8[0x0],r9
    memset(tail_str, 0x00, sizeof(tail_str)); 
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);
    
    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
8001ce68:	0c 9c       	mov	r12,r6
8001ce6a:	e0 a0 32 d1 	rcall	8002340c <memcpy>
       
    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
8001ce6e:	0e 9c       	mov	r12,r7
8001ce70:	e0 a0 33 e0 	rcall	80023630 <strlen>
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
8001ce74:	0e 9b       	mov	r11,r7
8001ce76:	18 9a       	mov	r10,r12
8001ce78:	f8 0c 11 08 	rsub	r12,r12,8
8001ce7c:	ec 0c 00 0c 	add	r12,r6,r12
8001ce80:	e0 a0 32 c6 	rcall	8002340c <memcpy>
8001ce84:	2f 5d       	sub	sp,-44
8001ce86:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
    while ((num /= 10) > 0);
    
    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
8001ce8a:	fa c8 ff df 	sub	r8,sp,-33
8001ce8e:	ce ab       	rjmp	8001ce62 <fatfs_lfn_generate_tail+0x92>
8001ce90:	80 02       	ld.sh	r2,r0[0x0]
8001ce92:	53 e0       	stdsp	sp[0xf8],r0

8001ce94 <fatfs_lfn_create_sfn>:
8001ce94:	eb cd 40 fc 	pushm	r2-r7,lr
8001ce98:	20 1d       	sub	sp,4
8001ce9a:	16 97       	mov	r7,r11
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN 
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
8001ce9c:	18 94       	mov	r4,r12
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
8001ce9e:	16 9c       	mov	r12,r11
8001cea0:	e0 a0 33 c8 	rcall	80023630 <strlen>

    // Invalid to start with .
    if (filename[0]=='.')
8001cea4:	32 e3       	mov	r3,46
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
8001cea6:	18 96       	mov	r6,r12

    // Invalid to start with .
    if (filename[0]=='.')
8001cea8:	0f 88       	ld.ub	r8,r7[0x0]
8001ceaa:	e6 08 18 00 	cp.b	r8,r3
8001ceae:	e0 80 00 98 	breq	8001cfde <fatfs_lfn_create_sfn+0x14a>
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
8001ceb2:	30 ba       	mov	r10,11
8001ceb4:	32 0b       	mov	r11,32
8001ceb6:	08 9c       	mov	r12,r4
8001ceb8:	e0 a0 33 4e 	rcall	80023554 <memset>
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
8001cebc:	0c 95       	mov	r5,r6
    // Invalid to start with .
    if (filename[0]=='.')
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);
8001cebe:	30 3a       	mov	r10,3
8001cec0:	32 0b       	mov	r11,32
8001cec2:	1a 9c       	mov	r12,sp
8001cec4:	e0 a0 33 48 	rcall	80023554 <memset>

    // Find dot seperator
    for (i = 0; i< len; i++)
8001cec8:	58 06       	cp.w	r6,0
8001ceca:	e0 8a 00 62 	brle	8001cf8e <fatfs_lfn_create_sfn+0xfa>
8001cece:	3f f9       	mov	r9,-1
8001ced0:	30 08       	mov	r8,0
8001ced2:	ee 08 07 0a 	ld.ub	r10,r7[r8]
8001ced6:	e6 0a 18 00 	cp.b	r10,r3
8001ceda:	f0 09 17 00 	moveq	r9,r8
8001cede:	2f f8       	sub	r8,-1
8001cee0:	10 36       	cp.w	r6,r8
8001cee2:	cf 81       	brne	8001ced2 <fatfs_lfn_create_sfn+0x3e>
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
8001cee4:	5b f9       	cp.w	r9,-1
8001cee6:	c2 b0       	breq	8001cf3c <fatfs_lfn_create_sfn+0xa8>
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
8001cee8:	f2 c8 ff ff 	sub	r8,r9,-1
            if (i<len)
8001ceec:	10 36       	cp.w	r6,r8
8001ceee:	e0 8a 00 0a 	brle	8001cf02 <fatfs_lfn_create_sfn+0x6e>
                ext[i-(dotPos+1)] = filename[i];
8001cef2:	fa ca ff fc 	sub	r10,sp,-4
8001cef6:	ee 08 07 0b 	ld.ub	r11,r7[r8]
8001cefa:	10 0a       	add	r10,r8
8001cefc:	12 1a       	sub	r10,r9
8001cefe:	f5 6b ff fb 	st.b	r10[-5],r11

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
8001cf02:	2f f8       	sub	r8,-1
            if (i<len)
8001cf04:	10 36       	cp.w	r6,r8
8001cf06:	e0 8a 00 0a 	brle	8001cf1a <fatfs_lfn_create_sfn+0x86>
                ext[i-(dotPos+1)] = filename[i];
8001cf0a:	fa ca ff fc 	sub	r10,sp,-4
8001cf0e:	ee 08 07 0b 	ld.ub	r11,r7[r8]
8001cf12:	10 0a       	add	r10,r8
8001cf14:	12 1a       	sub	r10,r9
8001cf16:	f5 6b ff fb 	st.b	r10[-5],r11

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
8001cf1a:	2f f8       	sub	r8,-1
            if (i<len)
8001cf1c:	10 36       	cp.w	r6,r8
8001cf1e:	e0 8a 00 0b 	brle	8001cf34 <fatfs_lfn_create_sfn+0xa0>
                ext[i-(dotPos+1)] = filename[i];
8001cf22:	ee 08 07 0a 	ld.ub	r10,r7[r8]
8001cf26:	fa cb ff fc 	sub	r11,sp,-4
8001cf2a:	f6 08 00 08 	add	r8,r11,r8
8001cf2e:	12 18       	sub	r8,r9
8001cf30:	f1 6a ff fb 	st.b	r8[-5],r10
        len = dotPos;
    }

    // Add filename part
    pos = 0; 
    for (i=0;i<len;i++)
8001cf34:	58 09       	cp.w	r9,0
8001cf36:	e0 8a 00 2c 	brle	8001cf8e <fatfs_lfn_create_sfn+0xfa>
8001cf3a:	12 95       	mov	r5,r9
8001cf3c:	30 0a       	mov	r10,0
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
8001cf3e:	32 ee       	mov	lr,46
        len = dotPos;
    }

    // Add filename part
    pos = 0; 
    for (i=0;i<len;i++)
8001cf40:	14 99       	mov	r9,r10
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
8001cf42:	32 03       	mov	r3,32
8001cf44:	14 96       	mov	r6,r10
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
8001cf46:	31 92       	mov	r2,25
8001cf48:	c0 98       	rjmp	8001cf5a <fatfs_lfn_create_sfn+0xc6>
                sfn_output[pos++] = filename[i] - 'a' + 'A';
8001cf4a:	e8 0a 0b 0c 	st.b	r4[r10],r12
8001cf4e:	2f fa       	sub	r10,-1
            else
                sfn_output[pos++] = filename[i];
        }
        
        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
8001cf50:	58 8a       	cp.w	r10,8
8001cf52:	c1 e0       	breq	8001cf8e <fatfs_lfn_create_sfn+0xfa>
        len = dotPos;
    }

    // Add filename part
    pos = 0; 
    for (i=0;i<len;i++)
8001cf54:	2f f9       	sub	r9,-1
8001cf56:	0a 39       	cp.w	r9,r5
8001cf58:	c1 b4       	brge	8001cf8e <fatfs_lfn_create_sfn+0xfa>
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
8001cf5a:	ee 09 07 08 	ld.ub	r8,r7[r9]
8001cf5e:	fc 08 18 00 	cp.b	r8,lr
8001cf62:	5f 1c       	srne	r12
8001cf64:	e6 08 18 00 	cp.b	r8,r3
8001cf68:	5f 1b       	srne	r11
8001cf6a:	f9 eb 00 0b 	and	r11,r12,r11
8001cf6e:	ec 0b 18 00 	cp.b	r11,r6
8001cf72:	ce f0       	breq	8001cf50 <fatfs_lfn_create_sfn+0xbc>
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
                sfn_output[pos++] = filename[i] - 'a' + 'A';
8001cf74:	f0 cc 00 20 	sub	r12,r8,32
    pos = 0; 
    for (i=0;i<len;i++)
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
8001cf78:	f0 cb 00 61 	sub	r11,r8,97
8001cf7c:	e4 0b 18 00 	cp.b	r11,r2
8001cf80:	fe 98 ff e5 	brls	8001cf4a <fatfs_lfn_create_sfn+0xb6>
                sfn_output[pos++] = filename[i] - 'a' + 'A';
            else
                sfn_output[pos++] = filename[i];
8001cf84:	e8 0a 0b 08 	st.b	r4[r10],r8
8001cf88:	2f fa       	sub	r10,-1
        }
        
        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
8001cf8a:	58 8a       	cp.w	r10,8
8001cf8c:	ce 41       	brne	8001cf54 <fatfs_lfn_create_sfn+0xc0>
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001cf8e:	1b 88       	ld.ub	r8,sp[0x0]
8001cf90:	31 99       	mov	r9,25
8001cf92:	f0 ca 00 61 	sub	r10,r8,97
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001cf96:	f2 0a 18 00 	cp.b	r10,r9
8001cf9a:	f7 b8 08 20 	subls	r8,32
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001cf9e:	31 99       	mov	r9,25
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001cfa0:	e9 68 00 08 	st.b	r4[8],r8
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001cfa4:	1b 98       	ld.ub	r8,sp[0x1]
8001cfa6:	f0 ca 00 61 	sub	r10,r8,97
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001cfaa:	f2 0a 18 00 	cp.b	r10,r9
8001cfae:	f7 b8 08 20 	subls	r8,32
8001cfb2:	e9 68 00 09 	st.b	r4[9],r8
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001cfb6:	31 99       	mov	r9,25
8001cfb8:	1b a8       	ld.ub	r8,sp[0x2]
8001cfba:	f0 ca 00 61 	sub	r10,r8,97
8001cfbe:	f2 0a 18 00 	cp.b	r10,r9
8001cfc2:	e0 88 00 07 	brls	8001cfd0 <fatfs_lfn_create_sfn+0x13c>
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
8001cfc6:	e9 68 00 0a 	st.b	r4[10],r8
8001cfca:	2f fd       	sub	sp,-4
8001cfcc:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001cfd0:	22 08       	sub	r8,32
8001cfd2:	30 1c       	mov	r12,1
8001cfd4:	e9 68 00 0a 	st.b	r4[10],r8
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
}
8001cfd8:	2f fd       	sub	sp,-4
8001cfda:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    char ext[3];
    int pos;
    int len = (int)strlen(filename);

    // Invalid to start with .
    if (filename[0]=='.')
8001cfde:	2f fd       	sub	sp,-4
8001cfe0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

8001cfe4 <fatfs_lfn_entries_required>:
8001cfe4:	d4 01       	pushm	lr
8001cfe6:	e0 a0 33 25 	rcall	80023630 <strlen>
8001cfea:	c0 e0       	breq	8001d006 <fatfs_lfn_entries_required+0x22>
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;    
8001cfec:	f8 c8 ff f4 	sub	r8,r12,-12
8001cff0:	e0 6b ec 4f 	mov	r11,60495
8001cff4:	ea 1b 4e c4 	orh	r11,0x4ec4
8001cff8:	f0 09 14 1f 	asr	r9,r8,0x1f
8001cffc:	f0 0b 04 4a 	muls.d	r10,r8,r11
8001d000:	f6 0c 14 02 	asr	r12,r11,0x2
8001d004:	12 1c       	sub	r12,r9
    else
        return 0;
}
8001d006:	d8 02       	popm	pc

8001d008 <fatfs_filename_to_lfn>:
8001d008:	eb cd 40 fe 	pushm	r1-r7,lr
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
8001d00c:	20 dd       	sub	sp,52
8001d00e:	14 96       	mov	r6,r10
8001d010:	12 91       	mov	r1,r9
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
8001d012:	fe f9 03 96 	ld.w	r9,pc[918]
8001d016:	72 ca       	ld.w	r10,r9[0x30]
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
8001d018:	16 97       	mov	r7,r11
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
8001d01a:	50 ca       	stdsp	sp[0x30],r10
8001d01c:	f2 ea 00 00 	ld.d	r10,r9[0]
8001d020:	fa eb 00 00 	st.d	sp[0],r10
8001d024:	f2 ea 00 08 	ld.d	r10,r9[8]
8001d028:	fa eb 00 08 	st.d	sp[8],r10
8001d02c:	f2 ea 00 10 	ld.d	r10,r9[16]
8001d030:	fa eb 00 10 	st.d	sp[16],r10
8001d034:	f2 ea 00 18 	ld.d	r10,r9[24]
8001d038:	fa eb 00 18 	st.d	sp[24],r10
8001d03c:	f2 ea 00 20 	ld.d	r10,r9[32]
8001d040:	fa eb 00 20 	st.d	sp[32],r10
8001d044:	f2 ea 00 28 	ld.d	r10,r9[40]
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
8001d048:	18 93       	mov	r3,r12
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
8001d04a:	fa eb 00 28 	st.d	sp[40],r10

    // 13 characters entries
    int length = (int)strlen(filename);
8001d04e:	e0 a0 32 f1 	rcall	80023630 <strlen>
8001d052:	18 95       	mov	r5,r12
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
8001d054:	e0 80 01 60 	breq	8001d314 <fatfs_filename_to_lfn+0x30c>
8001d058:	f8 c8 ff f4 	sub	r8,r12,-12
8001d05c:	e0 6b ec 4f 	mov	r11,60495
8001d060:	ea 1b 4e c4 	orh	r11,0x4ec4
8001d064:	f0 09 14 1f 	asr	r9,r8,0x1f
8001d068:	f0 0b 04 4a 	muls.d	r10,r8,r11
8001d06c:	f6 02 14 02 	asr	r2,r11,0x2
8001d070:	12 12       	sub	r2,r9
8001d072:	20 12       	sub	r2,1
    // 13 characters entries
    int length = (int)strlen(filename);
    int entriesRequired = fatfs_lfn_entries_required(filename);

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
8001d074:	ec 06 00 14 	add	r4,r6,r6<<0x1

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
8001d078:	32 0a       	mov	r10,32
    // 13 characters entries
    int length = (int)strlen(filename);
    int entriesRequired = fatfs_lfn_entries_required(filename);

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
8001d07a:	ec 04 00 24 	add	r4,r6,r4<<0x2

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
8001d07e:	30 0b       	mov	r11,0
8001d080:	0e 9c       	mov	r12,r7
8001d082:	e0 a0 32 69 	rcall	80023554 <memset>

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
8001d086:	0c 32       	cp.w	r2,r6
8001d088:	e0 80 01 48 	breq	8001d318 <fatfs_filename_to_lfn+0x310>
8001d08c:	2f f6       	sub	r6,-1
8001d08e:	5c 56       	castu.b	r6

    // LFN flag
    buffer[11] = 0x0F;
8001d090:	30 f8       	mov	r8,15

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
8001d092:	ae 86       	st.b	r7[0x0],r6

    // LFN flag
    buffer[11] = 0x0F;

    // Checksum of short filename
    buffer[13] = sfnChk;
8001d094:	ef 61 00 0d 	st.b	r7[13],r1

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));

    // LFN flag
    buffer[11] = 0x0F;
8001d098:	ef 68 00 0b 	st.b	r7[11],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d09c:	08 35       	cp.w	r5,r4
8001d09e:	e0 89 00 9e 	brgt	8001d1da <fatfs_filename_to_lfn+0x1d2>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d0a2:	e0 80 01 40 	breq	8001d322 <fatfs_filename_to_lfn+0x31a>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d0a6:	40 09       	lddsp	r9,sp[0x0]
8001d0a8:	3f f8       	mov	r8,-1
8001d0aa:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d0ae:	ee 09 00 09 	add	r9,r7,r9
8001d0b2:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d0b4:	e8 c8 ff ff 	sub	r8,r4,-1
8001d0b8:	10 35       	cp.w	r5,r8
8001d0ba:	e0 8a 00 9a 	brle	8001d1ee <fatfs_filename_to_lfn+0x1e6>
            buffer[nameIndexes[i]] = filename[start+i];
8001d0be:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d0c2:	40 18       	lddsp	r8,sp[0x4]
8001d0c4:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d0c8:	e8 c8 ff fe 	sub	r8,r4,-2
8001d0cc:	10 35       	cp.w	r5,r8
8001d0ce:	e0 89 00 9f 	brgt	8001d20c <fatfs_filename_to_lfn+0x204>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d0d2:	10 35       	cp.w	r5,r8
8001d0d4:	e0 80 01 65 	breq	8001d39e <fatfs_filename_to_lfn+0x396>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d0d8:	40 29       	lddsp	r9,sp[0x8]
8001d0da:	3f f8       	mov	r8,-1
8001d0dc:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d0e0:	ee 09 00 09 	add	r9,r7,r9
8001d0e4:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d0e6:	e8 c8 ff fd 	sub	r8,r4,-3
8001d0ea:	10 35       	cp.w	r5,r8
8001d0ec:	e0 8a 00 9a 	brle	8001d220 <fatfs_filename_to_lfn+0x218>
            buffer[nameIndexes[i]] = filename[start+i];
8001d0f0:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d0f4:	40 38       	lddsp	r8,sp[0xc]
8001d0f6:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d0fa:	e8 c8 ff fc 	sub	r8,r4,-4
8001d0fe:	10 35       	cp.w	r5,r8
8001d100:	e0 89 00 9f 	brgt	8001d23e <fatfs_filename_to_lfn+0x236>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d104:	10 35       	cp.w	r5,r8
8001d106:	e0 80 01 42 	breq	8001d38a <fatfs_filename_to_lfn+0x382>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d10a:	40 49       	lddsp	r9,sp[0x10]
8001d10c:	3f f8       	mov	r8,-1
8001d10e:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d112:	ee 09 00 09 	add	r9,r7,r9
8001d116:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d118:	e8 c8 ff fb 	sub	r8,r4,-5
8001d11c:	10 35       	cp.w	r5,r8
8001d11e:	e0 8a 00 9a 	brle	8001d252 <fatfs_filename_to_lfn+0x24a>
            buffer[nameIndexes[i]] = filename[start+i];
8001d122:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d126:	40 58       	lddsp	r8,sp[0x14]
8001d128:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d12c:	e8 c8 ff fa 	sub	r8,r4,-6
8001d130:	10 35       	cp.w	r5,r8
8001d132:	e0 89 00 9e 	brgt	8001d26e <fatfs_filename_to_lfn+0x266>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d136:	10 35       	cp.w	r5,r8
8001d138:	e0 80 01 09 	breq	8001d34a <fatfs_filename_to_lfn+0x342>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d13c:	40 69       	lddsp	r9,sp[0x18]
8001d13e:	3f f8       	mov	r8,-1
8001d140:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d144:	ee 09 00 09 	add	r9,r7,r9
8001d148:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d14a:	e8 c8 ff f9 	sub	r8,r4,-7
8001d14e:	10 35       	cp.w	r5,r8
8001d150:	e0 8a 00 99 	brle	8001d282 <fatfs_filename_to_lfn+0x27a>
            buffer[nameIndexes[i]] = filename[start+i];
8001d154:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d158:	40 78       	lddsp	r8,sp[0x1c]
8001d15a:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d15e:	e8 c8 ff f8 	sub	r8,r4,-8
8001d162:	10 35       	cp.w	r5,r8
8001d164:	e0 89 00 9d 	brgt	8001d29e <fatfs_filename_to_lfn+0x296>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d168:	10 35       	cp.w	r5,r8
8001d16a:	e0 80 00 e6 	breq	8001d336 <fatfs_filename_to_lfn+0x32e>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d16e:	40 89       	lddsp	r9,sp[0x20]
8001d170:	3f f8       	mov	r8,-1
8001d172:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d176:	ee 09 00 09 	add	r9,r7,r9
8001d17a:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d17c:	e8 c8 ff f7 	sub	r8,r4,-9
8001d180:	10 35       	cp.w	r5,r8
8001d182:	e0 8a 00 98 	brle	8001d2b2 <fatfs_filename_to_lfn+0x2aa>
            buffer[nameIndexes[i]] = filename[start+i];
8001d186:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d18a:	40 98       	lddsp	r8,sp[0x24]
8001d18c:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d190:	e8 c8 ff f6 	sub	r8,r4,-10
8001d194:	10 35       	cp.w	r5,r8
8001d196:	e0 89 00 9c 	brgt	8001d2ce <fatfs_filename_to_lfn+0x2c6>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d19a:	10 35       	cp.w	r5,r8
8001d19c:	e0 80 00 ed 	breq	8001d376 <fatfs_filename_to_lfn+0x36e>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d1a0:	40 a9       	lddsp	r9,sp[0x28]
8001d1a2:	3f f8       	mov	r8,-1
8001d1a4:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d1a8:	ee 09 00 09 	add	r9,r7,r9
8001d1ac:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d1ae:	e8 c8 ff f5 	sub	r8,r4,-11
8001d1b2:	10 35       	cp.w	r5,r8
8001d1b4:	e0 8a 00 97 	brle	8001d2e2 <fatfs_filename_to_lfn+0x2da>
            buffer[nameIndexes[i]] = filename[start+i];
8001d1b8:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d1bc:	40 b8       	lddsp	r8,sp[0x2c]
8001d1be:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d1c2:	2f 44       	sub	r4,-12
8001d1c4:	08 35       	cp.w	r5,r4
8001d1c6:	e0 8a 00 9b 	brle	8001d2fc <fatfs_filename_to_lfn+0x2f4>
            buffer[nameIndexes[i]] = filename[start+i];
8001d1ca:	e6 04 07 09 	ld.ub	r9,r3[r4]
8001d1ce:	40 c8       	lddsp	r8,sp[0x30]
8001d1d0:	ee 08 0b 09 	st.b	r7[r8],r9
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
8001d1d4:	2f 3d       	sub	sp,-52
8001d1d6:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
8001d1da:	e6 04 07 09 	ld.ub	r9,r3[r4]
8001d1de:	40 08       	lddsp	r8,sp[0x0]
8001d1e0:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d1e4:	e8 c8 ff ff 	sub	r8,r4,-1
8001d1e8:	10 35       	cp.w	r5,r8
8001d1ea:	fe 99 ff 6a 	brgt	8001d0be <fatfs_filename_to_lfn+0xb6>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d1ee:	10 35       	cp.w	r5,r8
8001d1f0:	e0 80 00 d2 	breq	8001d394 <fatfs_filename_to_lfn+0x38c>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d1f4:	40 19       	lddsp	r9,sp[0x4]
8001d1f6:	3f f8       	mov	r8,-1
8001d1f8:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d1fc:	ee 09 00 09 	add	r9,r7,r9
8001d200:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d202:	e8 c8 ff fe 	sub	r8,r4,-2
8001d206:	10 35       	cp.w	r5,r8
8001d208:	fe 9a ff 65 	brle	8001d0d2 <fatfs_filename_to_lfn+0xca>
            buffer[nameIndexes[i]] = filename[start+i];
8001d20c:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d210:	40 28       	lddsp	r8,sp[0x8]
8001d212:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d216:	e8 c8 ff fd 	sub	r8,r4,-3
8001d21a:	10 35       	cp.w	r5,r8
8001d21c:	fe 99 ff 6a 	brgt	8001d0f0 <fatfs_filename_to_lfn+0xe8>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d220:	10 35       	cp.w	r5,r8
8001d222:	e0 80 00 af 	breq	8001d380 <fatfs_filename_to_lfn+0x378>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d226:	40 39       	lddsp	r9,sp[0xc]
8001d228:	3f f8       	mov	r8,-1
8001d22a:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d22e:	ee 09 00 09 	add	r9,r7,r9
8001d232:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d234:	e8 c8 ff fc 	sub	r8,r4,-4
8001d238:	10 35       	cp.w	r5,r8
8001d23a:	fe 9a ff 65 	brle	8001d104 <fatfs_filename_to_lfn+0xfc>
            buffer[nameIndexes[i]] = filename[start+i];
8001d23e:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d242:	40 48       	lddsp	r8,sp[0x10]
8001d244:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d248:	e8 c8 ff fb 	sub	r8,r4,-5
8001d24c:	10 35       	cp.w	r5,r8
8001d24e:	fe 99 ff 6a 	brgt	8001d122 <fatfs_filename_to_lfn+0x11a>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d252:	10 35       	cp.w	r5,r8
8001d254:	c7 60       	breq	8001d340 <fatfs_filename_to_lfn+0x338>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d256:	40 59       	lddsp	r9,sp[0x14]
8001d258:	3f f8       	mov	r8,-1
8001d25a:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d25e:	ee 09 00 09 	add	r9,r7,r9
8001d262:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d264:	e8 c8 ff fa 	sub	r8,r4,-6
8001d268:	10 35       	cp.w	r5,r8
8001d26a:	fe 9a ff 66 	brle	8001d136 <fatfs_filename_to_lfn+0x12e>
            buffer[nameIndexes[i]] = filename[start+i];
8001d26e:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d272:	40 68       	lddsp	r8,sp[0x18]
8001d274:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d278:	e8 c8 ff f9 	sub	r8,r4,-7
8001d27c:	10 35       	cp.w	r5,r8
8001d27e:	fe 99 ff 6b 	brgt	8001d154 <fatfs_filename_to_lfn+0x14c>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d282:	10 35       	cp.w	r5,r8
8001d284:	c5 40       	breq	8001d32c <fatfs_filename_to_lfn+0x324>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d286:	40 79       	lddsp	r9,sp[0x1c]
8001d288:	3f f8       	mov	r8,-1
8001d28a:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d28e:	ee 09 00 09 	add	r9,r7,r9
8001d292:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d294:	e8 c8 ff f8 	sub	r8,r4,-8
8001d298:	10 35       	cp.w	r5,r8
8001d29a:	fe 9a ff 67 	brle	8001d168 <fatfs_filename_to_lfn+0x160>
            buffer[nameIndexes[i]] = filename[start+i];
8001d29e:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d2a2:	40 88       	lddsp	r8,sp[0x20]
8001d2a4:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d2a8:	e8 c8 ff f7 	sub	r8,r4,-9
8001d2ac:	10 35       	cp.w	r5,r8
8001d2ae:	fe 99 ff 6c 	brgt	8001d186 <fatfs_filename_to_lfn+0x17e>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d2b2:	10 35       	cp.w	r5,r8
8001d2b4:	c5 c0       	breq	8001d36c <fatfs_filename_to_lfn+0x364>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d2b6:	40 99       	lddsp	r9,sp[0x24]
8001d2b8:	3f f8       	mov	r8,-1
8001d2ba:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d2be:	ee 09 00 09 	add	r9,r7,r9
8001d2c2:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d2c4:	e8 c8 ff f6 	sub	r8,r4,-10
8001d2c8:	10 35       	cp.w	r5,r8
8001d2ca:	fe 9a ff 68 	brle	8001d19a <fatfs_filename_to_lfn+0x192>
            buffer[nameIndexes[i]] = filename[start+i];
8001d2ce:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001d2d2:	40 a8       	lddsp	r8,sp[0x28]
8001d2d4:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d2d8:	e8 c8 ff f5 	sub	r8,r4,-11
8001d2dc:	10 35       	cp.w	r5,r8
8001d2de:	fe 99 ff 6d 	brgt	8001d1b8 <fatfs_filename_to_lfn+0x1b0>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d2e2:	10 35       	cp.w	r5,r8
8001d2e4:	c3 80       	breq	8001d354 <fatfs_filename_to_lfn+0x34c>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d2e6:	40 b9       	lddsp	r9,sp[0x2c]
8001d2e8:	3f f8       	mov	r8,-1
8001d2ea:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d2ee:	ee 09 00 09 	add	r9,r7,r9
8001d2f2:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001d2f4:	2f 44       	sub	r4,-12
8001d2f6:	08 35       	cp.w	r5,r4
8001d2f8:	fe 99 ff 69 	brgt	8001d1ca <fatfs_filename_to_lfn+0x1c2>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001d2fc:	08 35       	cp.w	r5,r4
8001d2fe:	c3 00       	breq	8001d35e <fatfs_filename_to_lfn+0x356>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001d300:	40 c9       	lddsp	r9,sp[0x30]
8001d302:	3f f8       	mov	r8,-1
8001d304:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001d308:	ee 09 00 09 	add	r9,r7,r9
8001d30c:	b2 98       	st.b	r9[0x1],r8
        }
    }
}
8001d30e:	2f 3d       	sub	sp,-52
8001d310:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
8001d314:	3f f2       	mov	r2,-1
8001d316:	ca fa       	rjmp	8001d074 <fatfs_filename_to_lfn+0x6c>

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
8001d318:	e4 c6 ff ff 	sub	r6,r2,-1
8001d31c:	a7 a6       	sbr	r6,0x6
8001d31e:	5c 56       	castu.b	r6
8001d320:	cb 8a       	rjmp	8001d090 <fatfs_filename_to_lfn+0x88>
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
8001d322:	30 09       	mov	r9,0
8001d324:	40 08       	lddsp	r8,sp[0x0]
8001d326:	ee 08 0b 09 	st.b	r7[r8],r9
8001d32a:	c5 db       	rjmp	8001d1e4 <fatfs_filename_to_lfn+0x1dc>
8001d32c:	30 09       	mov	r9,0
8001d32e:	40 78       	lddsp	r8,sp[0x1c]
8001d330:	ee 08 0b 09 	st.b	r7[r8],r9
8001d334:	c1 5b       	rjmp	8001d15e <fatfs_filename_to_lfn+0x156>
8001d336:	30 09       	mov	r9,0
8001d338:	40 88       	lddsp	r8,sp[0x20]
8001d33a:	ee 08 0b 09 	st.b	r7[r8],r9
8001d33e:	cb 5b       	rjmp	8001d2a8 <fatfs_filename_to_lfn+0x2a0>
8001d340:	30 09       	mov	r9,0
8001d342:	40 58       	lddsp	r8,sp[0x14]
8001d344:	ee 08 0b 09 	st.b	r7[r8],r9
8001d348:	cf 2a       	rjmp	8001d12c <fatfs_filename_to_lfn+0x124>
8001d34a:	30 09       	mov	r9,0
8001d34c:	40 68       	lddsp	r8,sp[0x18]
8001d34e:	ee 08 0b 09 	st.b	r7[r8],r9
8001d352:	c9 3b       	rjmp	8001d278 <fatfs_filename_to_lfn+0x270>
8001d354:	30 09       	mov	r9,0
8001d356:	40 b8       	lddsp	r8,sp[0x2c]
8001d358:	ee 08 0b 09 	st.b	r7[r8],r9
8001d35c:	c3 3b       	rjmp	8001d1c2 <fatfs_filename_to_lfn+0x1ba>
8001d35e:	30 09       	mov	r9,0
8001d360:	40 c8       	lddsp	r8,sp[0x30]
8001d362:	ee 08 0b 09 	st.b	r7[r8],r9
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
8001d366:	2f 3d       	sub	sp,-52
8001d368:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
8001d36c:	30 09       	mov	r9,0
8001d36e:	40 98       	lddsp	r8,sp[0x24]
8001d370:	ee 08 0b 09 	st.b	r7[r8],r9
8001d374:	c0 eb       	rjmp	8001d190 <fatfs_filename_to_lfn+0x188>
8001d376:	30 09       	mov	r9,0
8001d378:	40 a8       	lddsp	r8,sp[0x28]
8001d37a:	ee 08 0b 09 	st.b	r7[r8],r9
8001d37e:	ca db       	rjmp	8001d2d8 <fatfs_filename_to_lfn+0x2d0>
8001d380:	30 09       	mov	r9,0
8001d382:	40 38       	lddsp	r8,sp[0xc]
8001d384:	ee 08 0b 09 	st.b	r7[r8],r9
8001d388:	cb 9a       	rjmp	8001d0fa <fatfs_filename_to_lfn+0xf2>
8001d38a:	30 09       	mov	r9,0
8001d38c:	40 48       	lddsp	r8,sp[0x10]
8001d38e:	ee 08 0b 09 	st.b	r7[r8],r9
8001d392:	c5 bb       	rjmp	8001d248 <fatfs_filename_to_lfn+0x240>
8001d394:	30 09       	mov	r9,0
8001d396:	40 18       	lddsp	r8,sp[0x4]
8001d398:	ee 08 0b 09 	st.b	r7[r8],r9
8001d39c:	c9 6a       	rjmp	8001d0c8 <fatfs_filename_to_lfn+0xc0>
8001d39e:	30 09       	mov	r9,0
8001d3a0:	40 28       	lddsp	r8,sp[0x8]
8001d3a2:	ee 08 0b 09 	st.b	r7[r8],r9
8001d3a6:	c3 8b       	rjmp	8001d216 <fatfs_filename_to_lfn+0x20e>
8001d3a8:	80 02       	ld.sh	r2,r0[0x0]
8001d3aa:	53 f4       	stdsp	sp[0xfc],r4

8001d3ac <fatfs_total_path_levels>:
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
8001d3ac:	58 0c       	cp.w	r12,0
8001d3ae:	c2 b0       	breq	8001d404 <fatfs_total_path_levels+0x58>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
8001d3b0:	19 89       	ld.ub	r9,r12[0x0]
8001d3b2:	32 f8       	mov	r8,47
8001d3b4:	f0 09 18 00 	cp.b	r9,r8
8001d3b8:	c1 d0       	breq	8001d3f2 <fatfs_total_path_levels+0x46>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001d3ba:	19 99       	ld.ub	r9,r12[0x1]
8001d3bc:	33 a8       	mov	r8,58
8001d3be:	f0 09 18 00 	cp.b	r9,r8
8001d3c2:	c1 c1       	brne	8001d3fa <fatfs_total_path_levels+0x4e>
    {
        expectedchar = '\\';
        path += 3;
8001d3c4:	f8 c8 ff fd 	sub	r8,r12,-3
8001d3c8:	35 ca       	mov	r10,92
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001d3ca:	11 89       	ld.ub	r9,r8[0x0]
8001d3cc:	58 09       	cp.w	r9,0
8001d3ce:	c1 c0       	breq	8001d406 <fatfs_total_path_levels+0x5a>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001d3d0:	30 0c       	mov	r12,0
8001d3d2:	c0 58       	rjmp	8001d3dc <fatfs_total_path_levels+0x30>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
            path++;
8001d3d4:	2f f8       	sub	r8,-1

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001d3d6:	11 89       	ld.ub	r9,r8[0x0]
8001d3d8:	58 09       	cp.w	r9,0
8001d3da:	c0 b0       	breq	8001d3f0 <fatfs_total_path_levels+0x44>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
8001d3dc:	f2 0a 18 00 	cp.b	r10,r9
8001d3e0:	cf a1       	brne	8001d3d4 <fatfs_total_path_levels+0x28>
8001d3e2:	2f f8       	sub	r8,-1
            path++;
        }
    
        // Increase number of subdirs founds
        levels++;
8001d3e4:	2f fc       	sub	r12,-1
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001d3e6:	11 89       	ld.ub	r9,r8[0x0]
8001d3e8:	58 09       	cp.w	r9,0
8001d3ea:	cf 91       	brne	8001d3dc <fatfs_total_path_levels+0x30>
8001d3ec:	20 1c       	sub	r12,1
8001d3ee:	5e fc       	retal	r12
8001d3f0:	5e fc       	retal	r12
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
8001d3f2:	f8 c8 ff ff 	sub	r8,r12,-1
8001d3f6:	32 fa       	mov	r10,47
8001d3f8:	ce 9b       	rjmp	8001d3ca <fatfs_total_path_levels+0x1e>
    }
    else if (path[1] == ':' || path[2] == '\\')
8001d3fa:	19 a9       	ld.ub	r9,r12[0x2]
8001d3fc:	35 c8       	mov	r8,92
8001d3fe:	f0 09 18 00 	cp.b	r9,r8
8001d402:	ce 10       	breq	8001d3c4 <fatfs_total_path_levels+0x18>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
8001d404:	5e fe       	retal	-1
8001d406:	5e fe       	retal	-1

8001d408 <fatfs_compare_names>:
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
8001d408:	d4 31       	pushm	r0-r7,lr
8001d40a:	20 4d       	sub	sp,16
8001d40c:	18 97       	mov	r7,r12
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001d40e:	19 84       	ld.ub	r4,r12[0x0]
8001d410:	58 04       	cp.w	r4,0
8001d412:	e0 80 00 e9 	breq	8001d5e4 <fatfs_compare_names+0x1dc>
8001d416:	18 99       	mov	r9,r12
8001d418:	08 9a       	mov	r10,r4
8001d41a:	30 08       	mov	r8,0
8001d41c:	3f f6       	mov	r6,-1
    {
        if (*strSrc=='.')
8001d41e:	32 ec       	mov	r12,46
8001d420:	f4 0c 18 00 	cp.b	r12,r10
8001d424:	f0 06 17 00 	moveq	r6,r8
            dotPos = (int)(strSrc-str);

        strSrc++;
8001d428:	2f f9       	sub	r9,-1
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001d42a:	2f f8       	sub	r8,-1
8001d42c:	13 8a       	ld.ub	r10,r9[0x0]
8001d42e:	58 0a       	cp.w	r10,0
8001d430:	cf 81       	brne	8001d420 <fatfs_compare_names+0x18>
8001d432:	17 83       	ld.ub	r3,r11[0x0]
8001d434:	58 03       	cp.w	r3,0
8001d436:	e0 80 00 d9 	breq	8001d5e8 <fatfs_compare_names+0x1e0>
8001d43a:	06 98       	mov	r8,r3
8001d43c:	16 9a       	mov	r10,r11
8001d43e:	30 09       	mov	r9,0
8001d440:	3f f5       	mov	r5,-1
    {
        if (*strSrc=='.')
8001d442:	32 ec       	mov	r12,46
8001d444:	f0 0c 18 00 	cp.b	r12,r8
8001d448:	f2 05 17 00 	moveq	r5,r9
            dotPos = (int)(strSrc-str);

        strSrc++;
8001d44c:	2f fa       	sub	r10,-1
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001d44e:	2f f9       	sub	r9,-1
8001d450:	15 88       	ld.ub	r8,r10[0x0]
8001d452:	58 08       	cp.w	r8,0
8001d454:	cf 81       	brne	8001d444 <fatfs_compare_names+0x3c>
    ext2Pos = FileString_GetExtension(strB);

    // NOTE: Extension position can be different for matching 
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
8001d456:	5b f5       	cp.w	r5,-1
8001d458:	5f 1a       	srne	r10
8001d45a:	5b f6       	cp.w	r6,-1
8001d45c:	5f 09       	sreq	r9
8001d45e:	f5 e9 00 09 	and	r9,r10,r9
8001d462:	f0 09 18 00 	cp.b	r9,r8
8001d466:	c1 e1       	brne	8001d4a2 <fatfs_compare_names+0x9a>
8001d468:	5b f5       	cp.w	r5,-1
8001d46a:	5f 09       	sreq	r9
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
8001d46c:	5b f6       	cp.w	r6,-1
8001d46e:	5f 18       	srne	r8
8001d470:	10 69       	and	r9,r8
8001d472:	c1 81       	brne	8001d4a2 <fatfs_compare_names+0x9a>
        return 0;

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
8001d474:	58 08       	cp.w	r8,0
8001d476:	c4 c0       	breq	8001d50e <fatfs_compare_names+0x106>
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;
8001d478:	ea c8 ff ff 	sub	r8,r5,-1

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
8001d47c:	50 0b       	stdsp	sp[0x0],r11
    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;
8001d47e:	f6 08 00 00 	add	r0,r11,r8

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
8001d482:	ec c1 ff ff 	sub	r1,r6,-1
8001d486:	50 26       	stdsp	sp[0x8],r6
8001d488:	ee 01 00 01 	add	r1,r7,r1
        ext2 = strB+ext2Pos+1;
8001d48c:	50 15       	stdsp	sp[0x4],r5

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
8001d48e:	02 9c       	mov	r12,r1
8001d490:	e0 a0 30 d0 	rcall	80023630 <strlen>
8001d494:	18 92       	mov	r2,r12
8001d496:	00 9c       	mov	r12,r0
8001d498:	e0 a0 30 cc 	rcall	80023630 <strlen>
8001d49c:	40 0b       	lddsp	r11,sp[0x0]
8001d49e:	18 32       	cp.w	r2,r12
8001d4a0:	c0 40       	breq	8001d4a8 <fatfs_compare_names+0xa0>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001d4a2:	30 0c       	mov	r12,0
    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
        return 0;
    else
        return 1;
}
8001d4a4:	2f cd       	sub	sp,-16
8001d4a6:	d8 32       	popm	r0-r7,pc
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001d4a8:	58 02       	cp.w	r2,0
8001d4aa:	e0 80 00 a3 	breq	8001d5f0 <fatfs_compare_names+0x1e8>
8001d4ae:	30 08       	mov	r8,0
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001d4b0:	31 9c       	mov	r12,25
8001d4b2:	50 34       	stdsp	sp[0xc],r4
8001d4b4:	c1 68       	rjmp	8001d4e0 <fatfs_compare_names+0xd8>
8001d4b6:	12 94       	mov	r4,r9
            a+= 32;
        if ((b>='A') && (b<='Z'))
8001d4b8:	f4 ce 00 41 	sub	lr,r10,65
8001d4bc:	f8 0e 18 00 	cp.b	lr,r12
8001d4c0:	e0 88 00 23 	brls	8001d506 <fatfs_compare_names+0xfe>
8001d4c4:	14 9e       	mov	lr,r10
            b+= 32;

        diff = a - b;
8001d4c6:	e8 0e 01 0e 	sub	lr,r4,lr

        // If different
        if (diff)
8001d4ca:	ce c1       	brne	8001d4a2 <fatfs_compare_names+0x9a>
            return diff;
        
        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
8001d4cc:	58 09       	cp.w	r9,0
8001d4ce:	e0 80 00 90 	breq	8001d5ee <fatfs_compare_names+0x1e6>
8001d4d2:	58 0a       	cp.w	r10,0
8001d4d4:	e0 80 00 8d 	breq	8001d5ee <fatfs_compare_names+0x1e6>
8001d4d8:	2f f8       	sub	r8,-1
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001d4da:	10 32       	cp.w	r2,r8
8001d4dc:	e0 80 00 89 	breq	8001d5ee <fatfs_compare_names+0x1e6>
    {
        a = *s1;
8001d4e0:	e2 08 07 09 	ld.ub	r9,r1[r8]
        b = *s2;
8001d4e4:	e0 08 07 0a 	ld.ub	r10,r0[r8]

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001d4e8:	f2 ce 00 41 	sub	lr,r9,65
8001d4ec:	f8 0e 18 00 	cp.b	lr,r12
8001d4f0:	fe 9b ff e3 	brhi	8001d4b6 <fatfs_compare_names+0xae>
            a+= 32;
8001d4f4:	f2 c4 ff e0 	sub	r4,r9,-32
        if ((b>='A') && (b<='Z'))
8001d4f8:	f4 ce 00 41 	sub	lr,r10,65
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
8001d4fc:	5c 54       	castu.b	r4
        if ((b>='A') && (b<='Z'))
8001d4fe:	f8 0e 18 00 	cp.b	lr,r12
8001d502:	fe 9b ff e1 	brhi	8001d4c4 <fatfs_compare_names+0xbc>
            b+= 32;
8001d506:	f4 ce ff e0 	sub	lr,r10,-32
8001d50a:	5c 5e       	castu.b	lr
8001d50c:	cd db       	rjmp	8001d4c6 <fatfs_compare_names+0xbe>
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
8001d50e:	50 0b       	stdsp	sp[0x0],r11
8001d510:	0e 9c       	mov	r12,r7
8001d512:	e0 a0 30 8f 	rcall	80023630 <strlen>
        file2Len = (int)strlen(strB);
8001d516:	40 0b       	lddsp	r11,sp[0x0]
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
8001d518:	18 96       	mov	r6,r12
        file2Len = (int)strlen(strB);
8001d51a:	16 9c       	mov	r12,r11
8001d51c:	50 26       	stdsp	sp[0x8],r6
8001d51e:	e0 a0 30 89 	rcall	80023630 <strlen>
8001d522:	40 0b       	lddsp	r11,sp[0x0]
8001d524:	50 1c       	stdsp	sp[0x4],r12
{
    int length = strLen;
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
8001d526:	58 06       	cp.w	r6,0
8001d528:	c1 60       	breq	8001d554 <fatfs_compare_names+0x14c>
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001d52a:	40 29       	lddsp	r9,sp[0x8]
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d52c:	32 08       	mov	r8,32
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001d52e:	20 19       	sub	r9,1
8001d530:	ee 09 00 09 	add	r9,r7,r9
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d534:	13 85       	ld.ub	r5,r9[0x0]
8001d536:	f0 05 18 00 	cp.b	r5,r8
8001d53a:	c0 d1       	brne	8001d554 <fatfs_compare_names+0x14c>
8001d53c:	f2 07 01 08 	sub	r8,r9,r7
8001d540:	c0 68       	rjmp	8001d54c <fatfs_compare_names+0x144>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
8001d542:	20 18       	sub	r8,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d544:	13 7a       	ld.ub	r10,--r9
8001d546:	ea 0a 18 00 	cp.b	r10,r5
8001d54a:	c0 41       	brne	8001d552 <fatfs_compare_names+0x14a>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
        strLen--;
8001d54c:	20 16       	sub	r6,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d54e:	10 9e       	mov	lr,r8
{
    int length = strLen;
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
8001d550:	cf 91       	brne	8001d542 <fatfs_compare_names+0x13a>
8001d552:	1c 96       	mov	r6,lr
8001d554:	58 0c       	cp.w	r12,0
8001d556:	c1 60       	breq	8001d582 <fatfs_compare_names+0x17a>
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001d558:	40 19       	lddsp	r9,sp[0x4]
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d55a:	32 08       	mov	r8,32
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001d55c:	20 19       	sub	r9,1
8001d55e:	f6 09 00 09 	add	r9,r11,r9
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d562:	13 85       	ld.ub	r5,r9[0x0]
8001d564:	f0 05 18 00 	cp.b	r5,r8
8001d568:	c0 d1       	brne	8001d582 <fatfs_compare_names+0x17a>
8001d56a:	f2 0b 01 08 	sub	r8,r9,r11
8001d56e:	c0 68       	rjmp	8001d57a <fatfs_compare_names+0x172>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
8001d570:	20 18       	sub	r8,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d572:	13 7a       	ld.ub	r10,--r9
8001d574:	ea 0a 18 00 	cp.b	r10,r5
8001d578:	c0 41       	brne	8001d580 <fatfs_compare_names+0x178>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
        strLen--;
8001d57a:	20 1c       	sub	r12,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001d57c:	10 9e       	mov	lr,r8
{
    int length = strLen;
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
8001d57e:	cf 91       	brne	8001d570 <fatfs_compare_names+0x168>
8001d580:	1c 9c       	mov	r12,lr
    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
8001d582:	18 36       	cp.w	r6,r12
8001d584:	c8 f1       	brne	8001d4a2 <fatfs_compare_names+0x9a>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001d586:	58 06       	cp.w	r6,0
8001d588:	c3 60       	breq	8001d5f4 <fatfs_compare_names+0x1ec>
8001d58a:	30 08       	mov	r8,0
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001d58c:	31 99       	mov	r9,25
8001d58e:	c1 88       	rjmp	8001d5be <fatfs_compare_names+0x1b6>
8001d590:	08 9c       	mov	r12,r4
            a+= 32;
        if ((b>='A') && (b<='Z'))
8001d592:	e6 ca 00 41 	sub	r10,r3,65
8001d596:	f2 0a 18 00 	cp.b	r10,r9
8001d59a:	e0 88 00 21 	brls	8001d5dc <fatfs_compare_names+0x1d4>
8001d59e:	06 9a       	mov	r10,r3
            b+= 32;

        diff = a - b;

        // If different
        if (diff)
8001d5a0:	f4 0c 18 00 	cp.b	r12,r10
8001d5a4:	fe 91 ff 7f 	brne	8001d4a2 <fatfs_compare_names+0x9a>
            return diff;
        
        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
8001d5a8:	58 04       	cp.w	r4,0
8001d5aa:	c2 50       	breq	8001d5f4 <fatfs_compare_names+0x1ec>
8001d5ac:	58 03       	cp.w	r3,0
8001d5ae:	c2 30       	breq	8001d5f4 <fatfs_compare_names+0x1ec>
8001d5b0:	2f f8       	sub	r8,-1
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001d5b2:	10 36       	cp.w	r6,r8
8001d5b4:	c2 00       	breq	8001d5f4 <fatfs_compare_names+0x1ec>
8001d5b6:	ee 08 07 04 	ld.ub	r4,r7[r8]
8001d5ba:	f6 08 07 03 	ld.ub	r3,r11[r8]
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001d5be:	08 9a       	mov	r10,r4
8001d5c0:	24 1a       	sub	r10,65
8001d5c2:	f2 0a 18 00 	cp.b	r10,r9
8001d5c6:	fe 9b ff e5 	brhi	8001d590 <fatfs_compare_names+0x188>
            a+= 32;
8001d5ca:	08 9c       	mov	r12,r4
        if ((b>='A') && (b<='Z'))
8001d5cc:	e6 ca 00 41 	sub	r10,r3,65
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
8001d5d0:	2e 0c       	sub	r12,-32
8001d5d2:	5c 5c       	castu.b	r12
        if ((b>='A') && (b<='Z'))
8001d5d4:	f2 0a 18 00 	cp.b	r10,r9
8001d5d8:	fe 9b ff e3 	brhi	8001d59e <fatfs_compare_names+0x196>
            b+= 32;
8001d5dc:	e6 ca ff e0 	sub	r10,r3,-32
8001d5e0:	5c 5a       	castu.b	r10
8001d5e2:	cd fb       	rjmp	8001d5a0 <fatfs_compare_names+0x198>
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001d5e4:	3f f6       	mov	r6,-1
8001d5e6:	c2 6b       	rjmp	8001d432 <fatfs_compare_names+0x2a>
8001d5e8:	30 19       	mov	r9,1
8001d5ea:	3f f5       	mov	r5,-1
8001d5ec:	c4 0b       	rjmp	8001d46c <fatfs_compare_names+0x64>
8001d5ee:	40 34       	lddsp	r4,sp[0xc]
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
        file2Len = (int)strlen(strB);
8001d5f0:	0a 9c       	mov	r12,r5
8001d5f2:	c9 ab       	rjmp	8001d526 <fatfs_compare_names+0x11e>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001d5f4:	30 1c       	mov	r12,1
8001d5f6:	c5 7b       	rjmp	8001d4a4 <fatfs_compare_names+0x9c>

8001d5f8 <fatfs_get_substring>:
8001d5f8:	eb cd 40 f8 	pushm	r3-r7,lr
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
8001d5fc:	20 3d       	sub	sp,12
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
8001d5fe:	58 0c       	cp.w	r12,0
8001d600:	5f 08       	sreq	r8
8001d602:	58 09       	cp.w	r9,0
8001d604:	5f a7       	srle	r7
8001d606:	ef e8 10 08 	or	r8,r7,r8
8001d60a:	c4 61       	brne	8001d696 <fatfs_get_substring+0x9e>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
8001d60c:	19 8e       	ld.ub	lr,r12[0x0]
8001d60e:	32 f8       	mov	r8,47
8001d610:	f0 0e 18 00 	cp.b	lr,r8
8001d614:	c4 40       	breq	8001d69c <fatfs_get_substring+0xa4>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001d616:	19 9e       	ld.ub	lr,r12[0x1]
8001d618:	33 a8       	mov	r8,58
8001d61a:	f0 0e 18 00 	cp.b	lr,r8
8001d61e:	c3 71       	brne	8001d68c <fatfs_get_substring+0x94>
    {
        expectedchar = '\\';
        path += 3;
8001d620:	f8 c6 ff fd 	sub	r6,r12,-3
8001d624:	35 c7       	mov	r7,92
    }
    else
        return -1;

    // Get string length of path
    pathlen = (int)strlen (path);
8001d626:	50 2b       	stdsp	sp[0x8],r11
8001d628:	50 1a       	stdsp	sp[0x4],r10
8001d62a:	50 09       	stdsp	sp[0x0],r9
8001d62c:	0c 9c       	mov	r12,r6
8001d62e:	e0 a0 30 01 	rcall	80023630 <strlen>

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001d632:	40 2b       	lddsp	r11,sp[0x8]
8001d634:	40 1a       	lddsp	r10,sp[0x4]
8001d636:	40 09       	lddsp	r9,sp[0x0]
8001d638:	e0 8a 00 36 	brle	8001d6a4 <fatfs_get_substring+0xac>
8001d63c:	30 04       	mov	r4,0
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1))) 
8001d63e:	20 19       	sub	r9,1

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001d640:	08 95       	mov	r5,r4
8001d642:	08 98       	mov	r8,r4
8001d644:	c0 48       	rjmp	8001d64c <fatfs_get_substring+0x54>
8001d646:	2f f8       	sub	r8,-1
8001d648:	10 3c       	cp.w	r12,r8
8001d64a:	c1 70       	breq	8001d678 <fatfs_get_substring+0x80>
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
8001d64c:	ec 08 07 0e 	ld.ub	lr,r6[r8]
8001d650:	0e 93       	mov	r3,r7
8001d652:	ee 0e 18 00 	cp.b	lr,r7
8001d656:	f7 b5 00 ff 	subeq	r5,-1

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1))) 
8001d65a:	16 35       	cp.w	r5,r11
8001d65c:	cf 51       	brne	8001d646 <fatfs_get_substring+0x4e>
8001d65e:	0e 93       	mov	r3,r7
8001d660:	fc 07 18 00 	cp.b	r7,lr
8001d664:	cf 10       	breq	8001d646 <fatfs_get_substring+0x4e>
8001d666:	08 39       	cp.w	r9,r4
8001d668:	fe 9a ff ef 	brle	8001d646 <fatfs_get_substring+0x4e>
            output[copypnt++] = *path;
8001d66c:	f4 04 0b 0e 	st.b	r10[r4],lr

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001d670:	2f f8       	sub	r8,-1
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1))) 
            output[copypnt++] = *path;
8001d672:	2f f4       	sub	r4,-1

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001d674:	10 3c       	cp.w	r12,r8
8001d676:	ce b1       	brne	8001d64c <fatfs_get_substring+0x54>
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
8001d678:	30 08       	mov	r8,0
8001d67a:	f4 04 0b 08 	st.b	r10[r4],r8

    // If a string was copied return 0 else return 1
    if (output[0] != '\0') 
8001d67e:	15 89       	ld.ub	r9,r10[0x0]
8001d680:	f0 09 18 00 	cp.b	r9,r8
8001d684:	c0 90       	breq	8001d696 <fatfs_get_substring+0x9e>
8001d686:	2f dd       	sub	sp,-12
8001d688:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001d68c:	19 ae       	ld.ub	lr,r12[0x2]
8001d68e:	35 c8       	mov	r8,92
8001d690:	f0 0e 18 00 	cp.b	lr,r8
8001d694:	cc 60       	breq	8001d620 <fatfs_get_substring+0x28>

    // Null Terminate
    output[copypnt] = '\0';

    // If a string was copied return 0 else return 1
    if (output[0] != '\0') 
8001d696:	2f dd       	sub	sp,-12
8001d698:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
8001d69c:	f8 c6 ff ff 	sub	r6,r12,-1
8001d6a0:	32 f7       	mov	r7,47
8001d6a2:	cc 2b       	rjmp	8001d626 <fatfs_get_substring+0x2e>

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001d6a4:	30 04       	mov	r4,0
8001d6a6:	ce 9b       	rjmp	8001d678 <fatfs_get_substring+0x80>

8001d6a8 <fatfs_split_path>:
8001d6a8:	eb cd 40 fc 	pushm	r2-r7,lr
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
8001d6ac:	18 97       	mov	r7,r12
8001d6ae:	16 95       	mov	r5,r11
8001d6b0:	14 93       	mov	r3,r10
8001d6b2:	12 96       	mov	r6,r9
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
8001d6b4:	58 0c       	cp.w	r12,0
8001d6b6:	c4 60       	breq	8001d742 <fatfs_split_path+0x9a>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
8001d6b8:	19 8b       	ld.ub	r11,r12[0x0]
8001d6ba:	32 fa       	mov	r10,47
8001d6bc:	f4 0b 18 00 	cp.b	r11,r10
8001d6c0:	c4 30       	breq	8001d746 <fatfs_split_path+0x9e>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001d6c2:	19 9a       	ld.ub	r10,r12[0x1]
8001d6c4:	33 a9       	mov	r9,58
8001d6c6:	f2 0a 18 00 	cp.b	r10,r9
8001d6ca:	c3 71       	brne	8001d738 <fatfs_split_path+0x90>
    {
        expectedchar = '\\';
        path += 3;
8001d6cc:	ee ca ff fd 	sub	r10,r7,-3
8001d6d0:	35 cc       	mov	r12,92
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001d6d2:	15 8b       	ld.ub	r11,r10[0x0]
8001d6d4:	58 0b       	cp.w	r11,0
8001d6d6:	c3 60       	breq	8001d742 <fatfs_split_path+0x9a>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001d6d8:	30 04       	mov	r4,0
8001d6da:	c0 58       	rjmp	8001d6e4 <fatfs_split_path+0x3c>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
            path++;
8001d6dc:	2f fa       	sub	r10,-1

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001d6de:	15 8b       	ld.ub	r11,r10[0x0]
8001d6e0:	58 0b       	cp.w	r11,0
8001d6e2:	c0 a0       	breq	8001d6f6 <fatfs_split_path+0x4e>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
8001d6e4:	f8 0b 18 00 	cp.b	r11,r12
8001d6e8:	cf a1       	brne	8001d6dc <fatfs_split_path+0x34>
8001d6ea:	2f fa       	sub	r10,-1
            path++;
        }
    
        // Increase number of subdirs founds
        levels++;
8001d6ec:	2f f4       	sub	r4,-1
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001d6ee:	15 8b       	ld.ub	r11,r10[0x0]
8001d6f0:	58 0b       	cp.w	r11,0
8001d6f2:	cf 91       	brne	8001d6e4 <fatfs_split_path+0x3c>
8001d6f4:	c0 28       	rjmp	8001d6f8 <fatfs_split_path+0x50>
            if (*path == expectedchar) { path++; break; }
            path++;
        }
    
        // Increase number of subdirs founds
        levels++;
8001d6f6:	2f f4       	sub	r4,-1
    }
    
    // Subtract the file itself
    return levels-1;
8001d6f8:	20 14       	sub	r4,1
    int levels = fatfs_total_path_levels(full_path);
    if (levels == -1)
        return -1;

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
8001d6fa:	10 99       	mov	r9,r8
8001d6fc:	0c 9a       	mov	r10,r6
8001d6fe:	08 9b       	mov	r11,r4
8001d700:	0e 9c       	mov	r12,r7
8001d702:	c7 bf       	rcall	8001d5f8 <fatfs_get_substring>
8001d704:	18 92       	mov	r2,r12
8001d706:	c1 e1       	brne	8001d742 <fatfs_split_path+0x9a>
8001d708:	58 04       	cp.w	r4,0
        return -1;

    // If root file
    if (levels == 0)
8001d70a:	c2 20       	breq	8001d74e <fatfs_split_path+0xa6>
8001d70c:	0e 9c       	mov	r12,r7
        path[0] = '\0';
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
8001d70e:	e0 a0 2f 91 	rcall	80023630 <strlen>
8001d712:	18 94       	mov	r4,r12
8001d714:	0c 9c       	mov	r12,r6
8001d716:	e0 a0 2f 8d 	rcall	80023630 <strlen>
8001d71a:	e8 0c 01 0c 	sub	r12,r4,r12
8001d71e:	0e 9b       	mov	r11,r7
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
8001d720:	f8 03 0d 43 	min	r3,r12,r3
8001d724:	0a 9c       	mov	r12,r5
8001d726:	06 9a       	mov	r10,r3
8001d728:	e0 a0 2e 72 	rcall	8002340c <memcpy>
8001d72c:	06 05       	add	r5,r3
        path[strindex-1] = '\0';
8001d72e:	04 9c       	mov	r12,r2
8001d730:	eb 62 ff ff 	st.b	r5[-1],r2
8001d734:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001d738:	19 aa       	ld.ub	r10,r12[0x2]
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001d73a:	35 c9       	mov	r9,92
8001d73c:	f2 0a 18 00 	cp.b	r10,r9
8001d740:	cc 60       	breq	8001d6cc <fatfs_split_path+0x24>
8001d742:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
        strindex = (int)strlen(full_path) - (int)strlen(filename);
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
        path[strindex-1] = '\0';
8001d746:	f8 ca ff ff 	sub	r10,r12,-1
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
8001d74a:	32 fc       	mov	r12,47
8001d74c:	cc 3b       	rjmp	8001d6d2 <fatfs_split_path+0x2a>
8001d74e:	aa 84       	st.b	r5[0x0],r4
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
        return -1;

    // If root file
    if (levels == 0)
        path[0] = '\0';
8001d750:	08 9c       	mov	r12,r4
8001d752:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001d756:	d7 03       	nop

8001d758 <fatfs_fat_writeback>:
}
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
8001d758:	eb cd 40 80 	pushm	r7,lr
8001d75c:	16 97       	mov	r7,r11
    if (pcur)
8001d75e:	58 0b       	cp.w	r11,0
8001d760:	c1 e0       	breq	8001d79c <fatfs_fat_writeback+0x44>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
8001d762:	f6 f8 02 04 	ld.w	r8,r11[516]
8001d766:	58 08       	cp.w	r8,0
8001d768:	c1 80       	breq	8001d798 <fatfs_fat_writeback+0x40>
        {
            if (fs->disk_io.write_media)
8001d76a:	78 e8       	ld.w	r8,r12[0x38]
8001d76c:	58 08       	cp.w	r8,0
8001d76e:	c1 20       	breq	8001d792 <fatfs_fat_writeback+0x3a>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001d770:	78 8b       	ld.w	r11,r12[0x20]
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001d772:	ee f9 02 00 	ld.w	r9,r7[512]
8001d776:	78 5a       	ld.w	r10,r12[0x14]
8001d778:	f2 0a 01 0a 	sub	r10,r9,r10

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001d77c:	f4 cc ff ff 	sub	r12,r10,-1
8001d780:	16 3c       	cp.w	r12,r11
8001d782:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001d786:	f7 da eb 1a 	subhi	r10,r11,r10

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001d78a:	12 9c       	mov	r12,r9
8001d78c:	0e 9b       	mov	r11,r7
8001d78e:	5d 18       	icall	r8
8001d790:	c0 60       	breq	8001d79c <fatfs_fat_writeback+0x44>
                    return 0;
            }
                
            pcur->dirty = 0;
8001d792:	30 08       	mov	r8,0
8001d794:	ef 48 02 04 	st.w	r7[516],r8
8001d798:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8001d79c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

8001d7a0 <fatfs_set_fs_info_next_free_cluster>:
} 
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
8001d7a0:	d4 21       	pushm	r4-r7,lr
8001d7a2:	18 96       	mov	r6,r12
8001d7a4:	16 95       	mov	r5,r11
    if (fs->fat_type == FAT_TYPE_16)
8001d7a6:	78 c8       	ld.w	r8,r12[0x30]
8001d7a8:	58 08       	cp.w	r8,0
8001d7aa:	c0 21       	brne	8001d7ae <fatfs_set_fs_info_next_free_cluster+0xe>
8001d7ac:	d8 22       	popm	r4-r7,pc
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
8001d7ae:	f9 14 00 18 	ld.uh	r4,r12[24]
8001d7b2:	78 78       	ld.w	r8,r12[0x1c]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001d7b4:	f8 f7 02 54 	ld.w	r7,r12[596]
    if (fs->fat_type == FAT_TYPE_16)
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
8001d7b8:	10 04       	add	r4,r8
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001d7ba:	58 07       	cp.w	r7,0
8001d7bc:	c6 00       	breq	8001d87c <fatfs_set_fs_info_next_free_cluster+0xdc>
8001d7be:	30 09       	mov	r9,0
8001d7c0:	c0 38       	rjmp	8001d7c6 <fatfs_set_fs_info_next_free_cluster+0x26>
8001d7c2:	0e 99       	mov	r9,r7
8001d7c4:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001d7c6:	ee f8 02 00 	ld.w	r8,r7[512]
8001d7ca:	10 34       	cp.w	r4,r8
8001d7cc:	c0 53       	brcs	8001d7d6 <fatfs_set_fs_info_next_free_cluster+0x36>
8001d7ce:	f0 ca ff ff 	sub	r10,r8,-1
8001d7d2:	14 34       	cp.w	r4,r10
8001d7d4:	c4 93       	brcs	8001d866 <fatfs_set_fs_info_next_free_cluster+0xc6>
            break;

        // End of list?
        if (pcur->next == NULL)
8001d7d6:	ee f8 02 0c 	ld.w	r8,r7[524]
8001d7da:	58 08       	cp.w	r8,0
8001d7dc:	cf 31       	brne	8001d7c2 <fatfs_set_fs_info_next_free_cluster+0x22>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001d7de:	58 09       	cp.w	r9,0
8001d7e0:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001d7e4:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001d7e8:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001d7ec:	58 08       	cp.w	r8,0
8001d7ee:	ce a1       	brne	8001d7c2 <fatfs_set_fs_info_next_free_cluster+0x22>
8001d7f0:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001d7f4:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001d7f8:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001d7fc:	ee f8 02 04 	ld.w	r8,r7[516]
8001d800:	58 08       	cp.w	r8,0
8001d802:	c3 f1       	brne	8001d880 <fatfs_set_fs_info_next_free_cluster+0xe0>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001d804:	ef 44 02 00 	st.w	r7[512],r4

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001d808:	08 9c       	mov	r12,r4
8001d80a:	6c d8       	ld.w	r8,r6[0x34]
8001d80c:	0e 94       	mov	r4,r7
8001d80e:	30 1a       	mov	r10,1
8001d810:	0e 9b       	mov	r11,r7
8001d812:	5d 18       	icall	r8
8001d814:	c3 00       	breq	8001d874 <fatfs_set_fs_info_next_free_cluster+0xd4>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001d816:	ef 47 02 08 	st.w	r7[520],r7
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;

        // Change 
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
8001d81a:	e9 65 01 ec 	st.b	r4[492],r5
8001d81e:	ea 09 16 08 	lsr	r9,r5,0x8
8001d822:	ee f8 02 08 	ld.w	r8,r7[520]
8001d826:	f1 69 01 ed 	st.b	r8[493],r9
8001d82a:	ea 09 16 10 	lsr	r9,r5,0x10
8001d82e:	ee f8 02 08 	ld.w	r8,r7[520]
8001d832:	f1 69 01 ee 	st.b	r8[494],r9
8001d836:	ea 09 16 18 	lsr	r9,r5,0x18
8001d83a:	ee f8 02 08 	ld.w	r8,r7[520]
8001d83e:	f1 69 01 ef 	st.b	r8[495],r9
8001d842:	30 1a       	mov	r10,1
8001d844:	ef 4a 02 04 	st.w	r7[516],r10
        fs->next_free_cluster = newValue;
8001d848:	8d 95       	st.w	r6[0x24],r5

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
8001d84a:	6c e8       	ld.w	r8,r6[0x38]
8001d84c:	58 08       	cp.w	r8,0
8001d84e:	c0 50       	breq	8001d858 <fatfs_set_fs_info_next_free_cluster+0xb8>
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);    
8001d850:	0e 9b       	mov	r11,r7
8001d852:	ee fc 02 00 	ld.w	r12,r7[512]
8001d856:	5d 18       	icall	r8

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
8001d858:	3f f8       	mov	r8,-1
8001d85a:	ef 48 02 00 	st.w	r7[512],r8
        pbuf->dirty = 0;
8001d85e:	30 08       	mov	r8,0
8001d860:	ef 48 02 04 	st.w	r7[516],r8
8001d864:	d8 22       	popm	r4-r7,pc
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001d866:	10 14       	sub	r4,r8
8001d868:	a9 74       	lsl	r4,0x9
8001d86a:	ee 04 00 04 	add	r4,r7,r4
8001d86e:	ef 44 02 08 	st.w	r7[520],r4
8001d872:	cd 4b       	rjmp	8001d81a <fatfs_set_fs_info_next_free_cluster+0x7a>

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001d874:	3f f8       	mov	r8,-1
8001d876:	ef 48 02 00 	st.w	r7[512],r8
8001d87a:	d8 22       	popm	r4-r7,pc
        if (fs->disk_io.write_media)
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);    

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
8001d87c:	0e 98       	mov	r8,r7
8001d87e:	cb bb       	rjmp	8001d7f4 <fatfs_set_fs_info_next_free_cluster+0x54>
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
8001d880:	0e 9b       	mov	r11,r7
8001d882:	0c 9c       	mov	r12,r6
8001d884:	c6 af       	rcall	8001d758 <fatfs_fat_writeback>
8001d886:	cb f1       	brne	8001d804 <fatfs_set_fs_info_next_free_cluster+0x64>
8001d888:	c9 2b       	rjmp	8001d7ac <fatfs_set_fs_info_next_free_cluster+0xc>
8001d88a:	d7 03       	nop

8001d88c <fatfs_fat_init>:
8001d88c:	eb cd 40 e0 	pushm	r5-r7,lr
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
8001d890:	3f f8       	mov	r8,-1

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
8001d892:	18 97       	mov	r7,r12
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
8001d894:	30 06       	mov	r6,0

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
8001d896:	f9 48 04 58 	st.w	r12[1112],r8
void fatfs_fat_init(struct fatfs *fs)
{
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
8001d89a:	f9 46 02 54 	st.w	r12[596],r6

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
8001d89e:	f9 46 04 5c 	st.w	r12[1116],r6
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
8001d8a2:	f8 c5 fd a8 	sub	r5,r12,-600
8001d8a6:	e0 6a 02 00 	mov	r10,512
8001d8aa:	0c 9b       	mov	r11,r6
8001d8ac:	0a 9c       	mov	r12,r5
8001d8ae:	e0 a0 2e 53 	rcall	80023554 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
8001d8b2:	ee f8 02 54 	ld.w	r8,r7[596]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
8001d8b6:	ef 46 04 60 	st.w	r7[1120],r6

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
8001d8ba:	ef 45 02 54 	st.w	r7[596],r5
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
8001d8be:	ef 48 04 64 	st.w	r7[1124],r8
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
8001d8c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001d8c6:	d7 03       	nop

8001d8c8 <fatfs_fat_purge>:
8001d8c8:	eb cd 40 e0 	pushm	r5-r7,lr
}
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
8001d8cc:	18 96       	mov	r6,r12
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001d8ce:	f8 f7 02 54 	ld.w	r7,r12[596]

    // Itterate through sector buffer list
    while (pcur)
8001d8d2:	58 07       	cp.w	r7,0
8001d8d4:	c2 30       	breq	8001d91a <fatfs_fat_purge+0x52>

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
                    return 0;
            }
                
            pcur->dirty = 0;
8001d8d6:	30 05       	mov	r5,0
8001d8d8:	c0 58       	rjmp	8001d8e2 <fatfs_fat_purge+0x1a>
        // Writeback sector if changed
        if (pcur->dirty) 
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;
        
        pcur = pcur->next;
8001d8da:	ee f7 02 0c 	ld.w	r7,r7[524]
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001d8de:	58 07       	cp.w	r7,0
8001d8e0:	c1 d0       	breq	8001d91a <fatfs_fat_purge+0x52>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
8001d8e2:	ee f8 02 04 	ld.w	r8,r7[516]
8001d8e6:	58 08       	cp.w	r8,0
8001d8e8:	cf 90       	breq	8001d8da <fatfs_fat_purge+0x12>
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001d8ea:	6c e8       	ld.w	r8,r6[0x38]
8001d8ec:	58 08       	cp.w	r8,0
8001d8ee:	c1 00       	breq	8001d90e <fatfs_fat_purge+0x46>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001d8f0:	6c 89       	ld.w	r9,r6[0x20]
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001d8f2:	ee fc 02 00 	ld.w	r12,r7[512]
8001d8f6:	6c 5b       	ld.w	r11,r6[0x14]
8001d8f8:	f8 0b 01 0b 	sub	r11,r12,r11

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001d8fc:	f2 0b 01 0a 	sub	r10,r9,r11
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001d900:	2f fb       	sub	r11,-1
8001d902:	12 3b       	cp.w	r11,r9
8001d904:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001d908:	0e 9b       	mov	r11,r7
8001d90a:	5d 18       	icall	r8
8001d90c:	c0 80       	breq	8001d91c <fatfs_fat_purge+0x54>
                    return 0;
            }
                
            pcur->dirty = 0;
8001d90e:	ef 45 02 04 	st.w	r7[516],r5
        // Writeback sector if changed
        if (pcur->dirty) 
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;
        
        pcur = pcur->next;
8001d912:	ee f7 02 0c 	ld.w	r7,r7[524]
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001d916:	58 07       	cp.w	r7,0
8001d918:	ce 51       	brne	8001d8e2 <fatfs_fat_purge+0x1a>
8001d91a:	30 1c       	mov	r12,1
        
        pcur = pcur->next;
    }

    return 1;
}
8001d91c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001d920 <fatfs_find_next_cluster>:
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by 
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
8001d920:	eb cd 40 f8 	pushm	r3-r7,lr
8001d924:	18 96       	mov	r6,r12
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
8001d926:	58 0b       	cp.w	r11,0
8001d928:	f6 03 17 10 	movne	r3,r11
8001d92c:	f9 b3 00 02 	moveq	r3,2
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001d930:	78 c8       	ld.w	r8,r12[0x30]
8001d932:	58 08       	cp.w	r8,0
8001d934:	c5 a1       	brne	8001d9e8 <fatfs_find_next_cluster+0xc8>
        fat_sector_offset = current_cluster / 256;
8001d936:	e6 04 16 08 	lsr	r4,r3,0x8
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001d93a:	6c 55       	ld.w	r5,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001d93c:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001d940:	e8 05 00 05 	add	r5,r4,r5
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001d944:	58 07       	cp.w	r7,0
8001d946:	c7 80       	breq	8001da36 <fatfs_find_next_cluster+0x116>
8001d948:	30 09       	mov	r9,0
8001d94a:	c0 38       	rjmp	8001d950 <fatfs_find_next_cluster+0x30>
8001d94c:	0e 99       	mov	r9,r7
8001d94e:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001d950:	ee f8 02 00 	ld.w	r8,r7[512]
8001d954:	10 35       	cp.w	r5,r8
8001d956:	c0 53       	brcs	8001d960 <fatfs_find_next_cluster+0x40>
8001d958:	f0 ca ff ff 	sub	r10,r8,-1
8001d95c:	14 35       	cp.w	r5,r10
8001d95e:	c4 83       	brcs	8001d9ee <fatfs_find_next_cluster+0xce>
            break;

        // End of list?
        if (pcur->next == NULL)
8001d960:	ee f8 02 0c 	ld.w	r8,r7[524]
8001d964:	58 08       	cp.w	r8,0
8001d966:	cf 31       	brne	8001d94c <fatfs_find_next_cluster+0x2c>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001d968:	58 09       	cp.w	r9,0
8001d96a:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001d96e:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001d972:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001d976:	58 08       	cp.w	r8,0
8001d978:	ce a1       	brne	8001d94c <fatfs_find_next_cluster+0x2c>
8001d97a:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001d97e:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001d982:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001d986:	ee f8 02 04 	ld.w	r8,r7[516]
8001d98a:	58 08       	cp.w	r8,0
8001d98c:	c5 71       	brne	8001da3a <fatfs_find_next_cluster+0x11a>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001d98e:	ef 45 02 00 	st.w	r7[512],r5

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001d992:	0a 9c       	mov	r12,r5
8001d994:	6c d8       	ld.w	r8,r6[0x34]
8001d996:	0e 95       	mov	r5,r7
8001d998:	30 1a       	mov	r10,1
8001d99a:	0e 9b       	mov	r11,r7
8001d99c:	5d 18       	icall	r8
8001d99e:	c4 70       	breq	8001da2c <fatfs_find_next_cluster+0x10c>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001d9a0:	eb 47 02 08 	st.w	r5[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001d9a4:	6c c8       	ld.w	r8,r6[0x30]
8001d9a6:	58 08       	cp.w	r8,0
8001d9a8:	c2 c0       	breq	8001da00 <fatfs_find_next_cluster+0xe0>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 128)) * 4; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001d9aa:	e8 08 15 07 	lsl	r8,r4,0x7
8001d9ae:	e6 08 01 08 	sub	r8,r3,r8
8001d9b2:	a3 68       	lsl	r8,0x2
8001d9b4:	5c 78       	castu.h	r8
8001d9b6:	ea 08 07 09 	ld.ub	r9,r5[r8]
8001d9ba:	10 05       	add	r5,r8
8001d9bc:	0b 98       	ld.ub	r8,r5[0x1]
8001d9be:	a9 68       	lsl	r8,0x8
8001d9c0:	0b bc       	ld.ub	r12,r5[0x3]
8001d9c2:	0b aa       	ld.ub	r10,r5[0x2]
8001d9c4:	b9 6c       	lsl	r12,0x18
8001d9c6:	b1 6a       	lsl	r10,0x10
8001d9c8:	14 0c       	add	r12,r10
8001d9ca:	12 0c       	add	r12,r9
8001d9cc:	10 0c       	add	r12,r8

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001d9ce:	30 88       	mov	r8,8
8001d9d0:	ea 18 f0 00 	orh	r8,0xf000

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001d9d4:	f9 dc c0 1c 	bfextu	r12,r12,0x0,0x1c

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001d9d8:	f8 08 00 08 	add	r8,r12,r8
8001d9dc:	58 78       	cp.w	r8,7
8001d9de:	e0 8b 00 25 	brhi	8001da28 <fatfs_find_next_cluster+0x108>
8001d9e2:	3f fc       	mov	r12,-1
            return (FAT32_LAST_CLUSTER); 
    }

    // Else return next cluster
    return (nextcluster);                         
} 
8001d9e4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;
8001d9e8:	e6 04 16 07 	lsr	r4,r3,0x7
8001d9ec:	ca 7b       	rjmp	8001d93a <fatfs_find_next_cluster+0x1a>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001d9ee:	10 15       	sub	r5,r8
8001d9f0:	a9 75       	lsl	r5,0x9
8001d9f2:	ee 05 00 05 	add	r5,r7,r5
8001d9f6:	ef 45 02 08 	st.w	r7[520],r5
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001d9fa:	6c c8       	ld.w	r8,r6[0x30]
8001d9fc:	58 08       	cp.w	r8,0
8001d9fe:	cd 61       	brne	8001d9aa <fatfs_find_next_cluster+0x8a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001da00:	e8 08 15 08 	lsl	r8,r4,0x8
8001da04:	e6 08 01 08 	sub	r8,r3,r8
8001da08:	a1 78       	lsl	r8,0x1
8001da0a:	5c 78       	castu.h	r8
8001da0c:	ea 08 07 09 	ld.ub	r9,r5[r8]
8001da10:	ea 08 00 08 	add	r8,r5,r8
8001da14:	11 9c       	ld.ub	r12,r8[0x1]
8001da16:	a9 6c       	lsl	r12,0x8
8001da18:	12 0c       	add	r12,r9

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF) 
8001da1a:	fe 79 00 08 	mov	r9,-65528
8001da1e:	f8 09 00 08 	add	r8,r12,r9
8001da22:	58 78       	cp.w	r8,7
8001da24:	fe 98 ff df 	brls	8001d9e2 <fatfs_find_next_cluster+0xc2>
            return (FAT32_LAST_CLUSTER); 
    }

    // Else return next cluster
    return (nextcluster);                         
} 
8001da28:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001da2c:	3f fc       	mov	r12,-1
8001da2e:	ef 4c 02 00 	st.w	r7[512],r12
8001da32:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001da36:	0e 98       	mov	r8,r7
8001da38:	ca 3b       	rjmp	8001d97e <fatfs_find_next_cluster+0x5e>
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
8001da3a:	0e 9b       	mov	r11,r7
8001da3c:	0c 9c       	mov	r12,r6
8001da3e:	c8 de       	rcall	8001d758 <fatfs_fat_writeback>
8001da40:	ca 71       	brne	8001d98e <fatfs_find_next_cluster+0x6e>
8001da42:	3f fc       	mov	r12,-1

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001da44:	cd 0b       	rjmp	8001d9e4 <fatfs_find_next_cluster+0xc4>
8001da46:	d7 03       	nop

8001da48 <fatfs_fat_set_cluster>:
8001da48:	eb cd 40 fc 	pushm	r2-r7,lr
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
8001da4c:	18 96       	mov	r6,r12
8001da4e:	16 93       	mov	r3,r11
8001da50:	14 95       	mov	r5,r10
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001da52:	78 c8       	ld.w	r8,r12[0x30]
8001da54:	58 08       	cp.w	r8,0
8001da56:	c4 f1       	brne	8001daf4 <fatfs_fat_set_cluster+0xac>
        fat_sector_offset = cluster / 256;
8001da58:	f6 04 16 08 	lsr	r4,r11,0x8
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001da5c:	6c 52       	ld.w	r2,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001da5e:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001da62:	e8 02 00 02 	add	r2,r4,r2
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001da66:	58 07       	cp.w	r7,0
8001da68:	c7 70       	breq	8001db56 <fatfs_fat_set_cluster+0x10e>
8001da6a:	30 09       	mov	r9,0
8001da6c:	c0 38       	rjmp	8001da72 <fatfs_fat_set_cluster+0x2a>
8001da6e:	0e 99       	mov	r9,r7
8001da70:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001da72:	ee f8 02 00 	ld.w	r8,r7[512]
8001da76:	10 32       	cp.w	r2,r8
8001da78:	c0 53       	brcs	8001da82 <fatfs_fat_set_cluster+0x3a>
8001da7a:	f0 ca ff ff 	sub	r10,r8,-1
8001da7e:	14 32       	cp.w	r2,r10
8001da80:	c3 d3       	brcs	8001dafa <fatfs_fat_set_cluster+0xb2>
            break;

        // End of list?
        if (pcur->next == NULL)
8001da82:	ee f8 02 0c 	ld.w	r8,r7[524]
8001da86:	58 08       	cp.w	r8,0
8001da88:	cf 31       	brne	8001da6e <fatfs_fat_set_cluster+0x26>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001da8a:	58 09       	cp.w	r9,0
8001da8c:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001da90:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001da94:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001da98:	58 08       	cp.w	r8,0
8001da9a:	ce a1       	brne	8001da6e <fatfs_fat_set_cluster+0x26>
8001da9c:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001daa0:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001daa4:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001daa8:	ee f8 02 04 	ld.w	r8,r7[516]
8001daac:	58 08       	cp.w	r8,0
8001daae:	c5 61       	brne	8001db5a <fatfs_fat_set_cluster+0x112>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001dab0:	ef 42 02 00 	st.w	r7[512],r2

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001dab4:	04 9c       	mov	r12,r2
8001dab6:	6c d8       	ld.w	r8,r6[0x34]
8001dab8:	30 1a       	mov	r10,1
8001daba:	0e 9b       	mov	r11,r7
8001dabc:	5d 18       	icall	r8
8001dabe:	0e 99       	mov	r9,r7
8001dac0:	c4 60       	breq	8001db4c <fatfs_fat_set_cluster+0x104>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001dac2:	ef 47 02 08 	st.w	r7[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
8001dac6:	6c c8       	ld.w	r8,r6[0x30]
8001dac8:	58 08       	cp.w	r8,0
8001daca:	c2 21       	brne	8001db0e <fatfs_fat_set_cluster+0xc6>
    {
        // Find 16 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 256)) * 2; 

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));     
8001dacc:	e8 08 15 08 	lsl	r8,r4,0x8
8001dad0:	e6 08 01 08 	sub	r8,r3,r8
8001dad4:	a1 78       	lsl	r8,0x1
8001dad6:	5c 78       	castu.h	r8
8001dad8:	f2 08 0b 05 	st.b	r9[r8],r5
8001dadc:	eb d5 c1 08 	bfextu	r5,r5,0x8,0x8
8001dae0:	ee f9 02 08 	ld.w	r9,r7[520]
8001dae4:	f2 08 00 08 	add	r8,r9,r8
8001dae8:	b0 95       	st.b	r8[0x1],r5
8001daea:	30 1c       	mov	r12,1
8001daec:	ef 4c 02 04 	st.w	r7[516],r12
8001daf0:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;
8001daf4:	f6 04 16 07 	lsr	r4,r11,0x7
8001daf8:	cb 2b       	rjmp	8001da5c <fatfs_fat_set_cluster+0x14>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001dafa:	e4 08 01 09 	sub	r9,r2,r8
8001dafe:	a9 79       	lsl	r9,0x9
8001db00:	ee 09 00 09 	add	r9,r7,r9
8001db04:	ef 49 02 08 	st.w	r7[520],r9
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
8001db08:	6c c8       	ld.w	r8,r6[0x30]
8001db0a:	58 08       	cp.w	r8,0
8001db0c:	ce 00       	breq	8001dacc <fatfs_fat_set_cluster+0x84>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001db0e:	ea 0a 16 08 	lsr	r10,r5,0x8
8001db12:	e8 08 15 07 	lsl	r8,r4,0x7
8001db16:	e6 08 01 08 	sub	r8,r3,r8
8001db1a:	a3 68       	lsl	r8,0x2
8001db1c:	5c 78       	castu.h	r8
8001db1e:	f2 08 0b 05 	st.b	r9[r8],r5
8001db22:	ee f9 02 08 	ld.w	r9,r7[520]
8001db26:	10 09       	add	r9,r8
8001db28:	b2 9a       	st.b	r9[0x1],r10
8001db2a:	ea 0a 16 10 	lsr	r10,r5,0x10
8001db2e:	ee f9 02 08 	ld.w	r9,r7[520]
8001db32:	10 09       	add	r9,r8
8001db34:	b2 aa       	st.b	r9[0x2],r10
8001db36:	b9 85       	lsr	r5,0x18
8001db38:	ee f9 02 08 	ld.w	r9,r7[520]
8001db3c:	f2 08 00 08 	add	r8,r9,r8
8001db40:	b0 b5       	st.b	r8[0x3],r5
8001db42:	30 1c       	mov	r12,1
8001db44:	ef 4c 02 04 	st.w	r7[516],r12
    }

    return 1;                     
} 
8001db48:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001db4c:	3f f8       	mov	r8,-1
8001db4e:	ef 48 02 00 	st.w	r7[512],r8
8001db52:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001db56:	0e 98       	mov	r8,r7
8001db58:	ca 4b       	rjmp	8001daa0 <fatfs_fat_set_cluster+0x58>
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
8001db5a:	0e 9b       	mov	r11,r7
8001db5c:	0c 9c       	mov	r12,r6
8001db5e:	fe b0 fd fd 	rcall	8001d758 <fatfs_fat_writeback>
8001db62:	ca 71       	brne	8001dab0 <fatfs_fat_set_cluster+0x68>
8001db64:	cf 2b       	rjmp	8001db48 <fatfs_fat_set_cluster+0x100>
8001db66:	d7 03       	nop

8001db68 <fatfs_fat_add_cluster_to_chain>:
8001db68:	d4 31       	pushm	r0-r7,lr
8001db6a:	18 96       	mov	r6,r12
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
8001db6c:	14 90       	mov	r0,r10
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
8001db6e:	5b fb       	cp.w	r11,-1
8001db70:	e0 80 00 a5 	breq	8001dcba <fatfs_fat_add_cluster_to_chain+0x152>
8001db74:	16 92       	mov	r2,r11
8001db76:	78 c8       	ld.w	r8,r12[0x30]

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001db78:	30 81       	mov	r1,8
8001db7a:	ea 11 f0 00 	orh	r1,0xf000
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
8001db7e:	58 02       	cp.w	r2,0
8001db80:	e4 03 17 10 	movne	r3,r2
8001db84:	f9 b3 00 02 	moveq	r3,2
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001db88:	58 08       	cp.w	r8,0
8001db8a:	c5 c1       	brne	8001dc42 <fatfs_fat_add_cluster_to_chain+0xda>
        fat_sector_offset = current_cluster / 256;
8001db8c:	e6 04 16 08 	lsr	r4,r3,0x8
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001db90:	6c 55       	ld.w	r5,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001db92:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001db96:	e8 05 00 05 	add	r5,r4,r5
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001db9a:	58 07       	cp.w	r7,0
8001db9c:	c5 c0       	breq	8001dc54 <fatfs_fat_add_cluster_to_chain+0xec>
8001db9e:	30 09       	mov	r9,0
8001dba0:	c0 38       	rjmp	8001dba6 <fatfs_fat_add_cluster_to_chain+0x3e>
8001dba2:	0e 99       	mov	r9,r7
8001dba4:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001dba6:	ee f8 02 00 	ld.w	r8,r7[512]
8001dbaa:	10 35       	cp.w	r5,r8
8001dbac:	c0 63       	brcs	8001dbb8 <fatfs_fat_add_cluster_to_chain+0x50>
8001dbae:	f0 ca ff ff 	sub	r10,r8,-1
8001dbb2:	14 35       	cp.w	r5,r10
8001dbb4:	e0 83 00 84 	brlo	8001dcbc <fatfs_fat_add_cluster_to_chain+0x154>
            break;

        // End of list?
        if (pcur->next == NULL)
8001dbb8:	ee f8 02 0c 	ld.w	r8,r7[524]
8001dbbc:	58 08       	cp.w	r8,0
8001dbbe:	cf 21       	brne	8001dba2 <fatfs_fat_add_cluster_to_chain+0x3a>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001dbc0:	58 09       	cp.w	r9,0
8001dbc2:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001dbc6:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001dbca:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dbce:	58 08       	cp.w	r8,0
8001dbd0:	ce 91       	brne	8001dba2 <fatfs_fat_add_cluster_to_chain+0x3a>
8001dbd2:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001dbd6:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001dbda:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001dbde:	ee f8 02 04 	ld.w	r8,r7[516]
8001dbe2:	58 08       	cp.w	r8,0
8001dbe4:	c4 11       	brne	8001dc66 <fatfs_fat_add_cluster_to_chain+0xfe>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001dbe6:	ef 45 02 00 	st.w	r7[512],r5

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001dbea:	0a 9c       	mov	r12,r5
8001dbec:	6c d8       	ld.w	r8,r6[0x34]
8001dbee:	0e 95       	mov	r5,r7
8001dbf0:	30 1a       	mov	r10,1
8001dbf2:	0e 9b       	mov	r11,r7
8001dbf4:	5d 18       	icall	r8
8001dbf6:	c6 a0       	breq	8001dcca <fatfs_fat_add_cluster_to_chain+0x162>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001dbf8:	ef 47 02 08 	st.w	r7[520],r7
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
8001dbfc:	58 07       	cp.w	r7,0
8001dbfe:	c3 90       	breq	8001dc70 <fatfs_fat_add_cluster_to_chain+0x108>
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001dc00:	6c c8       	ld.w	r8,r6[0x30]
8001dc02:	58 08       	cp.w	r8,0
8001dc04:	c3 f1       	brne	8001dc82 <fatfs_fat_add_cluster_to_chain+0x11a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001dc06:	e8 0a 15 08 	lsl	r10,r4,0x8
8001dc0a:	e6 0a 01 0a 	sub	r10,r3,r10
8001dc0e:	a1 7a       	lsl	r10,0x1
8001dc10:	5c 7a       	castu.h	r10
8001dc12:	ea 0a 07 0b 	ld.ub	r11,r5[r10]
8001dc16:	ea 0a 00 0a 	add	r10,r5,r10
8001dc1a:	15 99       	ld.ub	r9,r10[0x1]
8001dc1c:	a9 69       	lsl	r9,0x8
8001dc1e:	16 09       	add	r9,r11

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF) 
8001dc20:	fe 7b 00 08 	mov	r11,-65528
8001dc24:	f2 0b 00 0a 	add	r10,r9,r11
8001dc28:	58 7a       	cp.w	r10,7
8001dc2a:	e0 88 00 23 	brls	8001dc70 <fatfs_fat_add_cluster_to_chain+0x108>
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
        if (!next_cluster)
8001dc2e:	58 09       	cp.w	r9,0
8001dc30:	c4 50       	breq	8001dcba <fatfs_fat_add_cluster_to_chain+0x152>

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;
    
    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
8001dc32:	12 92       	mov	r2,r9
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
8001dc34:	58 02       	cp.w	r2,0
8001dc36:	e4 03 17 10 	movne	r3,r2
8001dc3a:	f9 b3 00 02 	moveq	r3,2
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001dc3e:	58 08       	cp.w	r8,0
8001dc40:	ca 60       	breq	8001db8c <fatfs_fat_add_cluster_to_chain+0x24>
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;
8001dc42:	e6 04 16 07 	lsr	r4,r3,0x7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dc46:	6c 55       	ld.w	r5,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001dc48:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dc4c:	e8 05 00 05 	add	r5,r4,r5
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dc50:	58 07       	cp.w	r7,0
8001dc52:	ca 61       	brne	8001db9e <fatfs_fat_add_cluster_to_chain+0x36>
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);

    return 1;
8001dc54:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001dc56:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001dc5a:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001dc5e:	ee f8 02 04 	ld.w	r8,r7[516]
8001dc62:	58 08       	cp.w	r8,0
8001dc64:	cc 10       	breq	8001dbe6 <fatfs_fat_add_cluster_to_chain+0x7e>
        if (!fatfs_fat_writeback(fs, pcur))
8001dc66:	0e 9b       	mov	r11,r7
8001dc68:	0c 9c       	mov	r12,r6
8001dc6a:	fe b0 fd 77 	rcall	8001d758 <fatfs_fat_writeback>
8001dc6e:	cb c1       	brne	8001dbe6 <fatfs_fat_add_cluster_to_chain+0x7e>
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
8001dc70:	04 9b       	mov	r11,r2
8001dc72:	00 9a       	mov	r10,r0
8001dc74:	0c 9c       	mov	r12,r6
8001dc76:	ce 9e       	rcall	8001da48 <fatfs_fat_set_cluster>
8001dc78:	00 9b       	mov	r11,r0

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
8001dc7a:	0c 9c       	mov	r12,r6
8001dc7c:	3f fa       	mov	r10,-1
8001dc7e:	ce 5e       	rcall	8001da48 <fatfs_fat_set_cluster>
8001dc80:	da 3a       	popm	r0-r7,pc,r12=1
8001dc82:	e8 09 15 07 	lsl	r9,r4,0x7
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 128)) * 4; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001dc86:	e6 09 01 09 	sub	r9,r3,r9
8001dc8a:	a3 69       	lsl	r9,0x2
8001dc8c:	5c 79       	castu.h	r9
8001dc8e:	ea 09 07 0b 	ld.ub	r11,r5[r9]

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001dc92:	12 05       	add	r5,r9
8001dc94:	0b 9a       	ld.ub	r10,r5[0x1]
8001dc96:	a9 6a       	lsl	r10,0x8
8001dc98:	0b bc       	ld.ub	r12,r5[0x3]
8001dc9a:	0b a9       	ld.ub	r9,r5[0x2]
8001dc9c:	b9 6c       	lsl	r12,0x18
8001dc9e:	b1 69       	lsl	r9,0x10
8001dca0:	f8 09 00 09 	add	r9,r12,r9
8001dca4:	16 09       	add	r9,r11
8001dca6:	14 09       	add	r9,r10
8001dca8:	f3 d9 c0 1c 	bfextu	r9,r9,0x0,0x1c
8001dcac:	f2 01 00 0a 	add	r10,r9,r1

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001dcb0:	58 7a       	cp.w	r10,7
8001dcb2:	fe 98 ff df 	brls	8001dc70 <fatfs_fat_add_cluster_to_chain+0x108>
8001dcb6:	58 09       	cp.w	r9,0
8001dcb8:	cb d1       	brne	8001dc32 <fatfs_fat_add_cluster_to_chain+0xca>
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
        if (!next_cluster)
8001dcba:	d8 3a       	popm	r0-r7,pc,r12=0
8001dcbc:	10 15       	sub	r5,r8
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);

    return 1;
8001dcbe:	a9 75       	lsl	r5,0x9
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001dcc0:	ee 05 00 05 	add	r5,r7,r5
8001dcc4:	ef 45 02 08 	st.w	r7[520],r5
8001dcc8:	c9 cb       	rjmp	8001dc00 <fatfs_fat_add_cluster_to_chain+0x98>
8001dcca:	3f f8       	mov	r8,-1
8001dccc:	ef 48 02 00 	st.w	r7[512],r8

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001dcd0:	cd 0b       	rjmp	8001dc70 <fatfs_fat_add_cluster_to_chain+0x108>
8001dcd2:	d7 03       	nop

8001dcd4 <fatfs_free_cluster_chain>:
8001dcd4:	d4 31       	pushm	r0-r7,lr
8001dcd6:	30 10       	mov	r0,1
8001dcd8:	16 94       	mov	r4,r11
8001dcda:	18 95       	mov	r5,r12
8001dcdc:	30 01       	mov	r1,0
8001dcde:	e8 c8 00 01 	sub	r8,r4,1
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
    
    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
8001dce2:	5b d8       	cp.w	r8,-3
8001dce4:	e0 8b 00 b5 	brhi	8001de4e <fatfs_free_cluster_chain+0x17a>
    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001dce8:	6a c8       	ld.w	r8,r5[0x30]
8001dcea:	58 08       	cp.w	r8,0
8001dcec:	e0 81 00 b2 	brne	8001de50 <fatfs_free_cluster_chain+0x17c>
        fat_sector_offset = current_cluster / 256;
8001dcf0:	e8 03 16 08 	lsr	r3,r4,0x8
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dcf4:	6a 56       	ld.w	r6,r5[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001dcf6:	ea f7 02 54 	ld.w	r7,r5[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dcfa:	e6 06 00 06 	add	r6,r3,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dcfe:	58 07       	cp.w	r7,0
8001dd00:	e0 80 00 b2 	breq	8001de64 <fatfs_free_cluster_chain+0x190>
8001dd04:	30 09       	mov	r9,0
8001dd06:	c0 38       	rjmp	8001dd0c <fatfs_free_cluster_chain+0x38>
8001dd08:	0e 99       	mov	r9,r7
8001dd0a:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001dd0c:	ee f8 02 00 	ld.w	r8,r7[512]
8001dd10:	10 36       	cp.w	r6,r8
8001dd12:	c0 63       	brcs	8001dd1e <fatfs_free_cluster_chain+0x4a>
8001dd14:	f0 ca ff ff 	sub	r10,r8,-1
8001dd18:	14 36       	cp.w	r6,r10
8001dd1a:	e0 83 01 2a 	brlo	8001df6e <fatfs_free_cluster_chain+0x29a>
            break;

        // End of list?
        if (pcur->next == NULL)
8001dd1e:	ee f8 02 0c 	ld.w	r8,r7[524]
8001dd22:	58 08       	cp.w	r8,0
8001dd24:	cf 21       	brne	8001dd08 <fatfs_free_cluster_chain+0x34>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001dd26:	58 09       	cp.w	r9,0
8001dd28:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001dd2c:	eb f9 0a 95 	st.weq	r5[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001dd30:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dd34:	58 08       	cp.w	r8,0
8001dd36:	ce 91       	brne	8001dd08 <fatfs_free_cluster_chain+0x34>
8001dd38:	ea f8 02 54 	ld.w	r8,r5[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001dd3c:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001dd40:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001dd44:	ee f8 02 04 	ld.w	r8,r7[516]
8001dd48:	58 08       	cp.w	r8,0
8001dd4a:	e0 81 00 97 	brne	8001de78 <fatfs_free_cluster_chain+0x1a4>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001dd4e:	ef 46 02 00 	st.w	r7[512],r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001dd52:	0c 9c       	mov	r12,r6
8001dd54:	6a d8       	ld.w	r8,r5[0x34]
8001dd56:	0e 96       	mov	r6,r7
8001dd58:	30 1a       	mov	r10,1
8001dd5a:	0e 9b       	mov	r11,r7
8001dd5c:	5d 18       	icall	r8
8001dd5e:	e0 80 01 14 	breq	8001df86 <fatfs_free_cluster_chain+0x2b2>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001dd62:	ef 47 02 08 	st.w	r7[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001dd66:	6a c8       	ld.w	r8,r5[0x30]
8001dd68:	58 08       	cp.w	r8,0
8001dd6a:	e0 81 00 a1 	brne	8001deac <fatfs_free_cluster_chain+0x1d8>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001dd6e:	e6 08 15 08 	lsl	r8,r3,0x8
8001dd72:	e8 08 01 08 	sub	r8,r4,r8
8001dd76:	a1 78       	lsl	r8,0x1
8001dd78:	5c 78       	castu.h	r8
8001dd7a:	ec 08 07 09 	ld.ub	r9,r6[r8]
8001dd7e:	ec 08 00 08 	add	r8,r6,r8
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001dd82:	ea f7 02 54 	ld.w	r7,r5[596]
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001dd86:	11 93       	ld.ub	r3,r8[0x1]
8001dd88:	a9 63       	lsl	r3,0x8
8001dd8a:	12 03       	add	r3,r9

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF) 
8001dd8c:	fe 79 00 08 	mov	r9,-65528
8001dd90:	e6 09 00 08 	add	r8,r3,r9
8001dd94:	58 78       	cp.w	r8,7
8001dd96:	f9 b3 08 ff 	movls	r3,-1
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
8001dd9a:	e8 02 16 08 	lsr	r2,r4,0x8
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dd9e:	6a 56       	ld.w	r6,r5[0x14]
8001dda0:	e4 06 00 06 	add	r6,r2,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dda4:	58 07       	cp.w	r7,0
8001dda6:	e0 80 00 a9 	breq	8001def8 <fatfs_free_cluster_chain+0x224>
8001ddaa:	30 09       	mov	r9,0
8001ddac:	c0 38       	rjmp	8001ddb2 <fatfs_free_cluster_chain+0xde>
8001ddae:	0e 99       	mov	r9,r7
8001ddb0:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001ddb2:	ee f8 02 00 	ld.w	r8,r7[512]
8001ddb6:	10 36       	cp.w	r6,r8
8001ddb8:	c0 63       	brcs	8001ddc4 <fatfs_free_cluster_chain+0xf0>
8001ddba:	f0 ca ff ff 	sub	r10,r8,-1
8001ddbe:	14 36       	cp.w	r6,r10
8001ddc0:	e0 83 00 d0 	brlo	8001df60 <fatfs_free_cluster_chain+0x28c>
            break;

        // End of list?
        if (pcur->next == NULL)
8001ddc4:	ee f8 02 0c 	ld.w	r8,r7[524]
8001ddc8:	58 08       	cp.w	r8,0
8001ddca:	cf 21       	brne	8001ddae <fatfs_free_cluster_chain+0xda>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001ddcc:	58 09       	cp.w	r9,0
8001ddce:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001ddd2:	eb f9 0a 95 	st.weq	r5[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001ddd6:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001ddda:	58 08       	cp.w	r8,0
8001dddc:	ce 91       	brne	8001ddae <fatfs_free_cluster_chain+0xda>
8001ddde:	ea f8 02 54 	ld.w	r8,r5[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001dde2:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001dde6:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001ddea:	ee f8 02 04 	ld.w	r8,r7[516]
8001ddee:	58 08       	cp.w	r8,0
8001ddf0:	e0 81 00 8e 	brne	8001df0c <fatfs_free_cluster_chain+0x238>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001ddf4:	ef 46 02 00 	st.w	r7[512],r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001ddf8:	0c 9c       	mov	r12,r6
8001ddfa:	6a d8       	ld.w	r8,r5[0x34]
8001ddfc:	0e 96       	mov	r6,r7
8001ddfe:	30 1a       	mov	r10,1
8001de00:	0e 9b       	mov	r11,r7
8001de02:	5d 18       	icall	r8
8001de04:	e0 80 00 bc 	breq	8001df7c <fatfs_free_cluster_chain+0x2a8>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001de08:	ef 47 02 08 	st.w	r7[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
8001de0c:	6a c8       	ld.w	r8,r5[0x30]
8001de0e:	58 08       	cp.w	r8,0
8001de10:	e0 80 00 97 	breq	8001df3e <fatfs_free_cluster_chain+0x26a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001de14:	e4 08 15 07 	lsl	r8,r2,0x7
8001de18:	e8 08 01 08 	sub	r8,r4,r8
8001de1c:	a3 68       	lsl	r8,0x2
8001de1e:	5c 78       	castu.h	r8
8001de20:	ec 08 0b 01 	st.b	r6[r8],r1
8001de24:	ee f9 02 08 	ld.w	r9,r7[520]
8001de28:	10 09       	add	r9,r8
8001de2a:	b2 91       	st.b	r9[0x1],r1
8001de2c:	ee f9 02 08 	ld.w	r9,r7[520]
8001de30:	10 09       	add	r9,r8
8001de32:	b2 a1       	st.b	r9[0x2],r1
8001de34:	ee f9 02 08 	ld.w	r9,r7[520]
8001de38:	f2 08 00 08 	add	r8,r9,r8
8001de3c:	b0 b1       	st.b	r8[0x3],r1
8001de3e:	ef 40 02 04 	st.w	r7[516],r0
8001de42:	06 94       	mov	r4,r3
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
    
    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
8001de44:	e8 c8 00 01 	sub	r8,r4,1
8001de48:	5b d8       	cp.w	r8,-3
8001de4a:	fe 98 ff 4f 	brls	8001dce8 <fatfs_free_cluster_chain+0x14>
        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
} 
8001de4e:	da 3a       	popm	r0-r7,pc,r12=1

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;
8001de50:	e8 03 16 07 	lsr	r3,r4,0x7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001de54:	6a 56       	ld.w	r6,r5[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001de56:	ea f7 02 54 	ld.w	r7,r5[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001de5a:	e6 06 00 06 	add	r6,r3,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001de5e:	58 07       	cp.w	r7,0
8001de60:	fe 91 ff 52 	brne	8001dd04 <fatfs_free_cluster_chain+0x30>
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
    
    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
8001de64:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001de66:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001de6a:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001de6e:	ee f8 02 04 	ld.w	r8,r7[516]
8001de72:	58 08       	cp.w	r8,0
8001de74:	fe 90 ff 6d 	breq	8001dd4e <fatfs_free_cluster_chain+0x7a>
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
8001de78:	58 07       	cp.w	r7,0
8001de7a:	e0 80 00 8b 	breq	8001df90 <fatfs_free_cluster_chain+0x2bc>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001de7e:	6a e8       	ld.w	r8,r5[0x38]
8001de80:	58 08       	cp.w	r8,0
8001de82:	c1 10       	breq	8001dea4 <fatfs_free_cluster_chain+0x1d0>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001de84:	ee fc 02 00 	ld.w	r12,r7[512]
8001de88:	6a 59       	ld.w	r9,r5[0x14]
8001de8a:	f8 09 01 09 	sub	r9,r12,r9

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001de8e:	f2 cb ff ff 	sub	r11,r9,-1
8001de92:	6a 8a       	ld.w	r10,r5[0x20]
8001de94:	14 3b       	cp.w	r11,r10
8001de96:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001de9a:	f5 d9 eb 1a 	subhi	r10,r10,r9

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001de9e:	0e 9b       	mov	r11,r7
8001dea0:	5d 18       	icall	r8
8001dea2:	c7 50       	breq	8001df8c <fatfs_free_cluster_chain+0x2b8>
                    return 0;
            }
                
            pcur->dirty = 0;
8001dea4:	30 09       	mov	r9,0
8001dea6:	ef 49 02 04 	st.w	r7[516],r9
8001deaa:	c5 2b       	rjmp	8001dd4e <fatfs_free_cluster_chain+0x7a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 128)) * 4; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001deac:	e6 08 15 07 	lsl	r8,r3,0x7
8001deb0:	e8 08 01 08 	sub	r8,r4,r8
8001deb4:	a3 68       	lsl	r8,0x2
8001deb6:	5c 78       	castu.h	r8

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001deb8:	ec 08 07 09 	ld.ub	r9,r6[r8]
8001debc:	10 06       	add	r6,r8
8001debe:	0d 98       	ld.ub	r8,r6[0x1]
8001dec0:	a9 68       	lsl	r8,0x8
8001dec2:	0d b3       	ld.ub	r3,r6[0x3]
8001dec4:	0d aa       	ld.ub	r10,r6[0x2]
8001dec6:	b9 63       	lsl	r3,0x18
8001dec8:	b1 6a       	lsl	r10,0x10
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001deca:	ea f7 02 54 	ld.w	r7,r5[596]

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001dece:	14 03       	add	r3,r10
8001ded0:	12 03       	add	r3,r9

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001ded2:	30 89       	mov	r9,8
8001ded4:	ea 19 f0 00 	orh	r9,0xf000

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001ded8:	10 03       	add	r3,r8
8001deda:	e7 d3 c0 1c 	bfextu	r3,r3,0x0,0x1c

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001dede:	e6 09 00 08 	add	r8,r3,r9
8001dee2:	58 78       	cp.w	r8,7
8001dee4:	f9 b3 08 ff 	movls	r3,-1

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;
8001dee8:	e8 02 16 07 	lsr	r2,r4,0x7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001deec:	6a 56       	ld.w	r6,r5[0x14]
8001deee:	e4 06 00 06 	add	r6,r2,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001def2:	58 07       	cp.w	r7,0
8001def4:	fe 91 ff 5b 	brne	8001ddaa <fatfs_free_cluster_chain+0xd6>
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001def8:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001defa:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001defe:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001df02:	ee f8 02 04 	ld.w	r8,r7[516]
8001df06:	58 08       	cp.w	r8,0
8001df08:	fe 90 ff 76 	breq	8001ddf4 <fatfs_free_cluster_chain+0x120>
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
8001df0c:	58 07       	cp.w	r7,0
8001df0e:	c9 a0       	breq	8001de42 <fatfs_free_cluster_chain+0x16e>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001df10:	6a e8       	ld.w	r8,r5[0x38]
8001df12:	58 08       	cp.w	r8,0
8001df14:	c1 10       	breq	8001df36 <fatfs_free_cluster_chain+0x262>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001df16:	ee fc 02 00 	ld.w	r12,r7[512]
8001df1a:	6a 59       	ld.w	r9,r5[0x14]
8001df1c:	f8 09 01 09 	sub	r9,r12,r9

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001df20:	f2 cb ff ff 	sub	r11,r9,-1
8001df24:	6a 8a       	ld.w	r10,r5[0x20]
8001df26:	14 3b       	cp.w	r11,r10
8001df28:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001df2c:	f5 d9 eb 1a 	subhi	r10,r10,r9

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001df30:	0e 9b       	mov	r11,r7
8001df32:	5d 18       	icall	r8
8001df34:	c8 70       	breq	8001de42 <fatfs_free_cluster_chain+0x16e>
                    return 0;
            }
                
            pcur->dirty = 0;
8001df36:	30 08       	mov	r8,0
8001df38:	ef 48 02 04 	st.w	r7[516],r8
8001df3c:	c5 cb       	rjmp	8001ddf4 <fatfs_free_cluster_chain+0x120>
    {
        // Find 16 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 256)) * 2; 

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));     
8001df3e:	e4 09 15 08 	lsl	r9,r2,0x8
8001df42:	e8 09 01 09 	sub	r9,r4,r9
8001df46:	a1 79       	lsl	r9,0x1
8001df48:	5c 79       	castu.h	r9
8001df4a:	ec 09 0b 08 	st.b	r6[r9],r8
8001df4e:	ee fa 02 08 	ld.w	r10,r7[520]
8001df52:	f4 09 00 09 	add	r9,r10,r9
8001df56:	b2 98       	st.b	r9[0x1],r8
8001df58:	ef 40 02 04 	st.w	r7[516],r0
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001df5c:	06 94       	mov	r4,r3
8001df5e:	c7 3b       	rjmp	8001de44 <fatfs_free_cluster_chain+0x170>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001df60:	10 16       	sub	r6,r8
8001df62:	a9 76       	lsl	r6,0x9
8001df64:	ee 06 00 06 	add	r6,r7,r6
8001df68:	ef 46 02 08 	st.w	r7[520],r6
8001df6c:	c5 0b       	rjmp	8001de0c <fatfs_free_cluster_chain+0x138>
8001df6e:	10 16       	sub	r6,r8
8001df70:	a9 76       	lsl	r6,0x9
8001df72:	ee 06 00 06 	add	r6,r7,r6
8001df76:	ef 46 02 08 	st.w	r7[520],r6
8001df7a:	cf 6a       	rjmp	8001dd66 <fatfs_free_cluster_chain+0x92>

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001df7c:	3f f9       	mov	r9,-1
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001df7e:	06 94       	mov	r4,r3

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001df80:	ef 49 02 00 	st.w	r7[512],r9
8001df84:	c6 0b       	rjmp	8001de44 <fatfs_free_cluster_chain+0x170>
8001df86:	3f f8       	mov	r8,-1
8001df88:	ef 48 02 00 	st.w	r7[512],r8
8001df8c:	ea f7 02 54 	ld.w	r7,r5[596]
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001df90:	6a c8       	ld.w	r8,r5[0x30]
8001df92:	58 08       	cp.w	r8,0
8001df94:	c0 31       	brne	8001df9a <fatfs_free_cluster_chain+0x2c6>

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001df96:	3f f3       	mov	r3,-1
8001df98:	c0 1b       	rjmp	8001dd9a <fatfs_free_cluster_chain+0xc6>
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
8001df9a:	3f f3       	mov	r3,-1
8001df9c:	ca 6b       	rjmp	8001dee8 <fatfs_free_cluster_chain+0x214>

8001df9e <fatfs_find_blank_cluster>:
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
8001df9e:	eb cd 40 fe 	pushm	r1-r7,lr

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
                    return 0;
            }
                
            pcur->dirty = 0;
8001dfa2:	30 01       	mov	r1,0
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
8001dfa4:	18 95       	mov	r5,r12
8001dfa6:	14 92       	mov	r2,r10
8001dfa8:	16 93       	mov	r3,r11
8001dfaa:	78 c8       	ld.w	r8,r12[0x30]
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
8001dfac:	58 08       	cp.w	r8,0
8001dfae:	c5 11       	brne	8001e050 <fatfs_find_blank_cluster+0xb2>
            fat_sector_offset = current_cluster / 256;
8001dfb0:	e6 04 16 08 	lsr	r4,r3,0x8
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
8001dfb4:	6a 88       	ld.w	r8,r5[0x20]
8001dfb6:	10 34       	cp.w	r4,r8
8001dfb8:	c5 12       	brcc	8001e05a <fatfs_find_blank_cluster+0xbc>
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dfba:	6a 56       	ld.w	r6,r5[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001dfbc:	ea f7 02 54 	ld.w	r7,r5[596]
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001dfc0:	e8 06 00 06 	add	r6,r4,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dfc4:	58 07       	cp.w	r7,0
8001dfc6:	c6 d0       	breq	8001e0a0 <fatfs_find_blank_cluster+0x102>
8001dfc8:	30 09       	mov	r9,0
8001dfca:	c0 38       	rjmp	8001dfd0 <fatfs_find_blank_cluster+0x32>
8001dfcc:	0e 99       	mov	r9,r7
8001dfce:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001dfd0:	ee f8 02 00 	ld.w	r8,r7[512]
8001dfd4:	10 36       	cp.w	r6,r8
8001dfd6:	c0 53       	brcs	8001dfe0 <fatfs_find_blank_cluster+0x42>
8001dfd8:	f0 ca ff ff 	sub	r10,r8,-1
8001dfdc:	14 36       	cp.w	r6,r10
8001dfde:	c5 93       	brcs	8001e090 <fatfs_find_blank_cluster+0xf2>
            break;

        // End of list?
        if (pcur->next == NULL)
8001dfe0:	ee f8 02 0c 	ld.w	r8,r7[524]
8001dfe4:	58 08       	cp.w	r8,0
8001dfe6:	cf 31       	brne	8001dfcc <fatfs_find_blank_cluster+0x2e>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001dfe8:	58 09       	cp.w	r9,0
8001dfea:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001dfee:	eb f9 0a 95 	st.weq	r5[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001dff2:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001dff6:	58 08       	cp.w	r8,0
8001dff8:	ce a1       	brne	8001dfcc <fatfs_find_blank_cluster+0x2e>
8001dffa:	ea f8 02 54 	ld.w	r8,r5[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001dffe:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001e002:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001e006:	ee f8 02 04 	ld.w	r8,r7[516]
8001e00a:	58 08       	cp.w	r8,0
8001e00c:	c5 31       	brne	8001e0b2 <fatfs_find_blank_cluster+0x114>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001e00e:	ef 46 02 00 	st.w	r7[512],r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001e012:	0c 9c       	mov	r12,r6
8001e014:	6a d8       	ld.w	r8,r5[0x34]
8001e016:	30 1a       	mov	r10,1
8001e018:	0e 9b       	mov	r11,r7
8001e01a:	5d 18       	icall	r8
8001e01c:	0e 99       	mov	r9,r7
8001e01e:	c6 20       	breq	8001e0e2 <fatfs_find_blank_cluster+0x144>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001e020:	ef 47 02 08 	st.w	r7[520],r7

        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
8001e024:	58 07       	cp.w	r7,0
8001e026:	c1 a0       	breq	8001e05a <fatfs_find_blank_cluster+0xbc>
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
8001e028:	6a c8       	ld.w	r8,r5[0x30]
8001e02a:	58 08       	cp.w	r8,0
8001e02c:	c1 c1       	brne	8001e064 <fatfs_find_blank_cluster+0xc6>
            {
                // Find 32 bit entry of current sector relating to cluster number 
                position = (current_cluster - (fat_sector_offset * 256)) * 2; 

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001e02e:	e8 0a 15 08 	lsl	r10,r4,0x8
8001e032:	e6 0a 01 0a 	sub	r10,r3,r10
8001e036:	a1 7a       	lsl	r10,0x1
8001e038:	5c 7a       	castu.h	r10
8001e03a:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8001e03e:	14 09       	add	r9,r10
8001e040:	13 99       	ld.ub	r9,r9[0x1]
8001e042:	a9 69       	lsl	r9,0x8
8001e044:	16 09       	add	r9,r11

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;        
            }

            if (nextcluster !=0 )
8001e046:	58 09       	cp.w	r9,0
8001e048:	c0 b0       	breq	8001e05e <fatfs_find_blank_cluster+0xc0>
                current_cluster++;
8001e04a:	2f f3       	sub	r3,-1
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
8001e04c:	58 08       	cp.w	r8,0
8001e04e:	cb 10       	breq	8001dfb0 <fatfs_find_blank_cluster+0x12>
            fat_sector_offset = current_cluster / 256;
        else
            fat_sector_offset = current_cluster / 128;
8001e050:	e6 04 16 07 	lsr	r4,r3,0x7

        if ( fat_sector_offset < fs->fat_sectors)
8001e054:	6a 88       	ld.w	r8,r5[0x20]
8001e056:	10 34       	cp.w	r4,r8
8001e058:	cb 13       	brcs	8001dfba <fatfs_find_blank_cluster+0x1c>
                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;        
            }

            if (nextcluster !=0 )
                current_cluster++;
8001e05a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
            return 0;
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
8001e05e:	85 03       	st.w	r2[0x0],r3
8001e060:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
            {
                // Find 32 bit entry of current sector relating to cluster number 
                position = (current_cluster - (fat_sector_offset * 128)) * 4; 

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001e064:	e8 0a 15 07 	lsl	r10,r4,0x7
8001e068:	e6 0a 01 0a 	sub	r10,r3,r10
8001e06c:	a3 6a       	lsl	r10,0x2
8001e06e:	5c 7a       	castu.h	r10
8001e070:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8001e074:	14 09       	add	r9,r10
8001e076:	13 9a       	ld.ub	r10,r9[0x1]
8001e078:	13 bc       	ld.ub	r12,r9[0x3]
8001e07a:	a9 6a       	lsl	r10,0x8
8001e07c:	b9 6c       	lsl	r12,0x18
8001e07e:	13 a9       	ld.ub	r9,r9[0x2]
8001e080:	b1 69       	lsl	r9,0x10
8001e082:	f8 09 00 09 	add	r9,r12,r9
8001e086:	16 09       	add	r9,r11
8001e088:	14 09       	add	r9,r10

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;        
8001e08a:	f3 d9 c0 1c 	bfextu	r9,r9,0x0,0x1c
8001e08e:	cd cb       	rjmp	8001e046 <fatfs_find_blank_cluster+0xa8>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001e090:	ec 08 01 09 	sub	r9,r6,r8
8001e094:	a9 79       	lsl	r9,0x9
8001e096:	ee 09 00 09 	add	r9,r7,r9
8001e09a:	ef 49 02 08 	st.w	r7[520],r9
8001e09e:	cc 5b       	rjmp	8001e028 <fatfs_find_blank_cluster+0x8a>
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
    return 1;
8001e0a0:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001e0a2:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001e0a6:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001e0aa:	ee f8 02 04 	ld.w	r8,r7[516]
8001e0ae:	58 08       	cp.w	r8,0
8001e0b0:	ca f0       	breq	8001e00e <fatfs_find_blank_cluster+0x70>
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
8001e0b2:	58 07       	cp.w	r7,0
8001e0b4:	cd 30       	breq	8001e05a <fatfs_find_blank_cluster+0xbc>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001e0b6:	6a e8       	ld.w	r8,r5[0x38]
8001e0b8:	58 08       	cp.w	r8,0
8001e0ba:	c1 10       	breq	8001e0dc <fatfs_find_blank_cluster+0x13e>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001e0bc:	ee fc 02 00 	ld.w	r12,r7[512]
8001e0c0:	6a 59       	ld.w	r9,r5[0x14]
8001e0c2:	f8 09 01 09 	sub	r9,r12,r9

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001e0c6:	f2 cb ff ff 	sub	r11,r9,-1
8001e0ca:	6a 8a       	ld.w	r10,r5[0x20]
8001e0cc:	14 3b       	cp.w	r11,r10
8001e0ce:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001e0d2:	f5 d9 eb 1a 	subhi	r10,r10,r9

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001e0d6:	0e 9b       	mov	r11,r7
8001e0d8:	5d 18       	icall	r8
8001e0da:	cc 00       	breq	8001e05a <fatfs_find_blank_cluster+0xbc>
                    return 0;
            }
                
            pcur->dirty = 0;
8001e0dc:	ef 41 02 04 	st.w	r7[516],r1
8001e0e0:	c9 7b       	rjmp	8001e00e <fatfs_find_blank_cluster+0x70>

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001e0e2:	3f f8       	mov	r8,-1
8001e0e4:	ef 48 02 00 	st.w	r7[512],r8
8001e0e8:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

8001e0ec <fatfs_add_file_entry>:
}
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
8001e0ec:	d4 31       	pushm	r0-r7,lr
8001e0ee:	fa cd 00 88 	sub	sp,sp,136
8001e0f2:	50 2b       	stdsp	sp[0x8],r11
8001e0f4:	50 4a       	stdsp	sp[0x10],r10
8001e0f6:	51 49       	stdsp	sp[0x50],r9
8001e0f8:	51 58       	stdsp	sp[0x54],r8
8001e0fa:	fa c4 ff 54 	sub	r4,sp,-172
8001e0fe:	68 19       	ld.w	r9,r4[0x4]
8001e100:	51 79       	stdsp	sp[0x5c],r9
8001e102:	68 04       	ld.w	r4,r4[0x0]
8001e104:	51 64       	stdsp	sp[0x58],r4
8001e106:	18 93       	mov	r3,r12

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
8001e108:	78 e8       	ld.w	r8,r12[0x38]
8001e10a:	58 08       	cp.w	r8,0
8001e10c:	c0 60       	breq	8001e118 <fatfs_add_file_entry+0x2c>
        return 0;

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
8001e10e:	14 9c       	mov	r12,r10
8001e110:	fe b0 f7 6a 	rcall	8001cfe4 <fatfs_lfn_entries_required>
8001e114:	18 94       	mov	r4,r12
    if (!entryCount)
8001e116:	c0 31       	brne	8001e11c <fatfs_add_file_entry+0x30>
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001e118:	2d ed       	sub	sp,-136
8001e11a:	d8 3a       	popm	r0-r7,pc,r12=0
    entryCount = 0;    
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
8001e11c:	f8 c8 ff ff 	sub	r8,r12,-1
    int x=0;
    int possible_spaces = 0;
    int start_recorded = 0;

    // No entries required?
    if (entryCount == 0)
8001e120:	cf c0       	breq	8001e118 <fatfs_add_file_entry+0x2c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001e122:	e6 c9 ff bc 	sub	r9,r3,-68
8001e126:	50 39       	stdsp	sp[0xc],r9
8001e128:	e6 c9 ff 9c 	sub	r9,r3,-100
8001e12c:	50 59       	stdsp	sp[0x14],r9
8001e12e:	e6 c9 ff 7c 	sub	r9,r3,-132
8001e132:	50 69       	stdsp	sp[0x18],r9
8001e134:	e6 c9 ff 5c 	sub	r9,r3,-164
8001e138:	50 79       	stdsp	sp[0x1c],r9
8001e13a:	e6 c9 ff 3c 	sub	r9,r3,-196
8001e13e:	50 89       	stdsp	sp[0x20],r9
8001e140:	e6 c9 ff 1c 	sub	r9,r3,-228
8001e144:	50 99       	stdsp	sp[0x24],r9
8001e146:	e6 c9 fe fc 	sub	r9,r3,-260
8001e14a:	50 a9       	stdsp	sp[0x28],r9
8001e14c:	e6 c9 fe dc 	sub	r9,r3,-292
8001e150:	50 b9       	stdsp	sp[0x2c],r9
8001e152:	e6 c9 fe bc 	sub	r9,r3,-324
8001e156:	50 c9       	stdsp	sp[0x30],r9
8001e158:	e6 c9 fe 9c 	sub	r9,r3,-356
8001e15c:	50 d9       	stdsp	sp[0x34],r9
8001e15e:	e6 c9 fe 7c 	sub	r9,r3,-388
8001e162:	50 e9       	stdsp	sp[0x38],r9
8001e164:	e6 c9 fe 5c 	sub	r9,r3,-420
8001e168:	50 f9       	stdsp	sp[0x3c],r9
8001e16a:	e6 c9 fe 3c 	sub	r9,r3,-452
8001e16e:	51 19       	stdsp	sp[0x44],r9
8001e170:	e6 c9 fe 1c 	sub	r9,r3,-484
8001e174:	51 09       	stdsp	sp[0x40],r9
8001e176:	e6 c9 fd fc 	sub	r9,r3,-516
8001e17a:	30 06       	mov	r6,0
8001e17c:	51 29       	stdsp	sp[0x48],r9
8001e17e:	0c 95       	mov	r5,r6
8001e180:	e6 c9 fd dc 	sub	r9,r3,-548
8001e184:	0c 97       	mov	r7,r6
8001e186:	51 39       	stdsp	sp[0x4c],r9
8001e188:	0c 90       	mov	r0,r6
8001e18a:	50 16       	stdsp	sp[0x4],r6
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e18c:	3e 51       	mov	r1,-27
8001e18e:	51 8c       	stdsp	sp[0x60],r12
8001e190:	10 94       	mov	r4,r8
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001e192:	40 12       	lddsp	r2,sp[0x4]

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0)) 
8001e194:	04 98       	mov	r8,r2
8001e196:	2f f8       	sub	r8,-1
8001e198:	30 09       	mov	r9,0
8001e19a:	50 18       	stdsp	sp[0x4],r8
8001e19c:	04 9a       	mov	r10,r2
8001e19e:	40 2b       	lddsp	r11,sp[0x8]
8001e1a0:	06 9c       	mov	r12,r3
8001e1a2:	fe b0 ed cf 	rcall	8001bd40 <fatfs_sector_reader>
8001e1a6:	e0 80 03 fd 	breq	8001e9a0 <fatfs_add_file_entry+0x8b4>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e1aa:	40 3c       	lddsp	r12,sp[0xc]
8001e1ac:	fe b0 f5 11 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e1b0:	e0 81 00 fe 	brne	8001e3ac <fatfs_add_file_entry+0x2c0>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e1b4:	e7 38 00 44 	ld.ub	r8,r3[68]
8001e1b8:	e2 08 18 00 	cp.b	r8,r1
8001e1bc:	e0 80 01 89 	breq	8001e4ce <fatfs_add_file_entry+0x3e2>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e1c0:	58 08       	cp.w	r8,0
8001e1c2:	e0 80 01 86 	breq	8001e4ce <fatfs_add_file_entry+0x3e2>
8001e1c6:	18 97       	mov	r7,r12
8001e1c8:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e1ca:	40 5c       	lddsp	r12,sp[0x14]
8001e1cc:	fe b0 f5 01 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e1d0:	e0 81 01 00 	brne	8001e3d0 <fatfs_add_file_entry+0x2e4>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e1d4:	e7 38 00 64 	ld.ub	r8,r3[100]
8001e1d8:	e2 08 18 00 	cp.b	r8,r1
8001e1dc:	e0 80 03 13 	breq	8001e802 <fatfs_add_file_entry+0x716>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e1e0:	58 08       	cp.w	r8,0
8001e1e2:	e0 80 03 10 	breq	8001e802 <fatfs_add_file_entry+0x716>
8001e1e6:	18 97       	mov	r7,r12
8001e1e8:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e1ea:	40 6c       	lddsp	r12,sp[0x18]
8001e1ec:	fe b0 f4 f1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e1f0:	e0 81 00 e7 	brne	8001e3be <fatfs_add_file_entry+0x2d2>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e1f4:	e7 38 00 84 	ld.ub	r8,r3[132]
8001e1f8:	e2 08 18 00 	cp.b	r8,r1
8001e1fc:	e0 80 02 f7 	breq	8001e7ea <fatfs_add_file_entry+0x6fe>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e200:	58 08       	cp.w	r8,0
8001e202:	e0 80 02 f4 	breq	8001e7ea <fatfs_add_file_entry+0x6fe>
8001e206:	18 97       	mov	r7,r12
8001e208:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e20a:	40 7c       	lddsp	r12,sp[0x1c]
8001e20c:	fe b0 f4 e1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e210:	e0 81 00 e9 	brne	8001e3e2 <fatfs_add_file_entry+0x2f6>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e214:	e7 38 00 a4 	ld.ub	r8,r3[164]
8001e218:	e2 08 18 00 	cp.b	r8,r1
8001e21c:	e0 80 03 00 	breq	8001e81c <fatfs_add_file_entry+0x730>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e220:	58 08       	cp.w	r8,0
8001e222:	e0 80 02 fd 	breq	8001e81c <fatfs_add_file_entry+0x730>
8001e226:	18 97       	mov	r7,r12
8001e228:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e22a:	40 8c       	lddsp	r12,sp[0x20]
8001e22c:	fe b0 f4 d1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e230:	e0 81 00 e2 	brne	8001e3f4 <fatfs_add_file_entry+0x308>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e234:	e7 38 00 c4 	ld.ub	r8,r3[196]
8001e238:	e2 08 18 00 	cp.b	r8,r1
8001e23c:	e0 80 02 fd 	breq	8001e836 <fatfs_add_file_entry+0x74a>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e240:	58 08       	cp.w	r8,0
8001e242:	e0 80 02 fa 	breq	8001e836 <fatfs_add_file_entry+0x74a>
8001e246:	18 97       	mov	r7,r12
8001e248:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e24a:	40 9c       	lddsp	r12,sp[0x24]
8001e24c:	fe b0 f4 c1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e250:	e0 81 00 db 	brne	8001e406 <fatfs_add_file_entry+0x31a>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e254:	e7 38 00 e4 	ld.ub	r8,r3[228]
8001e258:	e2 08 18 00 	cp.b	r8,r1
8001e25c:	e0 80 02 fa 	breq	8001e850 <fatfs_add_file_entry+0x764>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e260:	58 08       	cp.w	r8,0
8001e262:	e0 80 02 f7 	breq	8001e850 <fatfs_add_file_entry+0x764>
8001e266:	18 97       	mov	r7,r12
8001e268:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e26a:	40 ac       	lddsp	r12,sp[0x28]
8001e26c:	fe b0 f4 b1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e270:	e0 81 00 d4 	brne	8001e418 <fatfs_add_file_entry+0x32c>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e274:	e7 38 01 04 	ld.ub	r8,r3[260]
8001e278:	e2 08 18 00 	cp.b	r8,r1
8001e27c:	e0 80 02 f7 	breq	8001e86a <fatfs_add_file_entry+0x77e>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e280:	58 08       	cp.w	r8,0
8001e282:	e0 80 02 f4 	breq	8001e86a <fatfs_add_file_entry+0x77e>
8001e286:	18 97       	mov	r7,r12
8001e288:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e28a:	40 bc       	lddsp	r12,sp[0x2c]
8001e28c:	fe b0 f4 a1 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e290:	e0 81 00 cd 	brne	8001e42a <fatfs_add_file_entry+0x33e>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e294:	e7 38 01 24 	ld.ub	r8,r3[292]
8001e298:	e2 08 18 00 	cp.b	r8,r1
8001e29c:	e0 80 02 f4 	breq	8001e884 <fatfs_add_file_entry+0x798>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e2a0:	58 08       	cp.w	r8,0
8001e2a2:	e0 80 02 f1 	breq	8001e884 <fatfs_add_file_entry+0x798>
8001e2a6:	18 97       	mov	r7,r12
8001e2a8:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e2aa:	40 cc       	lddsp	r12,sp[0x30]
8001e2ac:	fe b0 f4 91 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e2b0:	e0 81 00 c6 	brne	8001e43c <fatfs_add_file_entry+0x350>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e2b4:	e7 38 01 44 	ld.ub	r8,r3[324]
8001e2b8:	e2 08 18 00 	cp.b	r8,r1
8001e2bc:	e0 80 02 f1 	breq	8001e89e <fatfs_add_file_entry+0x7b2>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e2c0:	58 08       	cp.w	r8,0
8001e2c2:	e0 80 02 ee 	breq	8001e89e <fatfs_add_file_entry+0x7b2>
8001e2c6:	18 97       	mov	r7,r12
8001e2c8:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e2ca:	40 dc       	lddsp	r12,sp[0x34]
8001e2cc:	fe b0 f4 81 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e2d0:	e0 81 00 c8 	brne	8001e460 <fatfs_add_file_entry+0x374>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e2d4:	e7 38 01 64 	ld.ub	r8,r3[356]
8001e2d8:	e2 08 18 00 	cp.b	r8,r1
8001e2dc:	e0 80 02 ee 	breq	8001e8b8 <fatfs_add_file_entry+0x7cc>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e2e0:	58 08       	cp.w	r8,0
8001e2e2:	e0 80 02 eb 	breq	8001e8b8 <fatfs_add_file_entry+0x7cc>
8001e2e6:	18 97       	mov	r7,r12
8001e2e8:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e2ea:	40 ec       	lddsp	r12,sp[0x38]
8001e2ec:	fe b0 f4 71 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e2f0:	e0 81 00 af 	brne	8001e44e <fatfs_add_file_entry+0x362>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e2f4:	e7 38 01 84 	ld.ub	r8,r3[388]
8001e2f8:	e2 08 18 00 	cp.b	r8,r1
8001e2fc:	e0 80 02 eb 	breq	8001e8d2 <fatfs_add_file_entry+0x7e6>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e300:	58 08       	cp.w	r8,0
8001e302:	e0 80 02 e8 	breq	8001e8d2 <fatfs_add_file_entry+0x7e6>
8001e306:	18 97       	mov	r7,r12
8001e308:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e30a:	40 fc       	lddsp	r12,sp[0x3c]
8001e30c:	fe b0 f4 61 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e310:	e0 81 00 ba 	brne	8001e484 <fatfs_add_file_entry+0x398>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e314:	e7 38 01 a4 	ld.ub	r8,r3[420]
8001e318:	e2 08 18 00 	cp.b	r8,r1
8001e31c:	e0 80 02 e8 	breq	8001e8ec <fatfs_add_file_entry+0x800>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e320:	58 08       	cp.w	r8,0
8001e322:	e0 80 02 e5 	breq	8001e8ec <fatfs_add_file_entry+0x800>
8001e326:	18 97       	mov	r7,r12
8001e328:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e32a:	41 1c       	lddsp	r12,sp[0x44]
8001e32c:	fe b0 f4 51 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e330:	e0 81 00 a1 	brne	8001e472 <fatfs_add_file_entry+0x386>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e334:	e7 38 01 c4 	ld.ub	r8,r3[452]
8001e338:	e2 08 18 00 	cp.b	r8,r1
8001e33c:	e0 80 02 e5 	breq	8001e906 <fatfs_add_file_entry+0x81a>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e340:	58 08       	cp.w	r8,0
8001e342:	e0 80 02 e2 	breq	8001e906 <fatfs_add_file_entry+0x81a>
8001e346:	18 97       	mov	r7,r12
8001e348:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e34a:	41 0c       	lddsp	r12,sp[0x40]
8001e34c:	fe b0 f4 41 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e350:	e0 81 00 ac 	brne	8001e4a8 <fatfs_add_file_entry+0x3bc>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e354:	e7 38 01 e4 	ld.ub	r8,r3[484]
8001e358:	e2 08 18 00 	cp.b	r8,r1
8001e35c:	e0 80 02 e2 	breq	8001e920 <fatfs_add_file_entry+0x834>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e360:	58 08       	cp.w	r8,0
8001e362:	e0 80 02 df 	breq	8001e920 <fatfs_add_file_entry+0x834>
8001e366:	18 97       	mov	r7,r12
8001e368:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e36a:	41 2c       	lddsp	r12,sp[0x48]
8001e36c:	fe b0 f4 31 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e370:	e0 81 00 93 	brne	8001e496 <fatfs_add_file_entry+0x3aa>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e374:	e7 38 02 04 	ld.ub	r8,r3[516]
8001e378:	e2 08 18 00 	cp.b	r8,r1
8001e37c:	e0 80 02 df 	breq	8001e93a <fatfs_add_file_entry+0x84e>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e380:	58 08       	cp.w	r8,0
8001e382:	e0 80 02 dc 	breq	8001e93a <fatfs_add_file_entry+0x84e>
8001e386:	18 97       	mov	r7,r12
8001e388:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001e38a:	41 3c       	lddsp	r12,sp[0x4c]
8001e38c:	fe b0 f4 21 	rcall	8001cbce <fatfs_entry_lfn_text>
8001e390:	e0 81 00 95 	brne	8001e4ba <fatfs_add_file_entry+0x3ce>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001e394:	e7 38 02 24 	ld.ub	r8,r3[548]
8001e398:	e2 08 18 00 	cp.b	r8,r1
8001e39c:	e0 80 02 dc 	breq	8001e954 <fatfs_add_file_entry+0x868>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001e3a0:	58 08       	cp.w	r8,0
8001e3a2:	e0 80 02 d9 	breq	8001e954 <fatfs_add_file_entry+0x868>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001e3a6:	18 97       	mov	r7,r12
8001e3a8:	18 90       	mov	r0,r12
8001e3aa:	cf 4a       	rjmp	8001e192 <fatfs_add_file_entry+0xa6>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e3ac:	58 00       	cp.w	r0,0
8001e3ae:	e4 05 17 00 	moveq	r5,r2
8001e3b2:	e0 06 17 00 	moveq	r6,r0
8001e3b6:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e3ba:	2f f0       	sub	r0,-1
8001e3bc:	c0 7b       	rjmp	8001e1ca <fatfs_add_file_entry+0xde>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e3be:	58 00       	cp.w	r0,0
8001e3c0:	e4 05 17 00 	moveq	r5,r2
8001e3c4:	f9 b6 00 02 	moveq	r6,2
8001e3c8:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e3cc:	2f f0       	sub	r0,-1
8001e3ce:	c1 eb       	rjmp	8001e20a <fatfs_add_file_entry+0x11e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e3d0:	58 00       	cp.w	r0,0
8001e3d2:	f9 b6 00 01 	moveq	r6,1
8001e3d6:	e4 05 17 00 	moveq	r5,r2
8001e3da:	ec 07 17 00 	moveq	r7,r6
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e3de:	2f f0       	sub	r0,-1
8001e3e0:	c0 5b       	rjmp	8001e1ea <fatfs_add_file_entry+0xfe>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e3e2:	58 00       	cp.w	r0,0
8001e3e4:	e4 05 17 00 	moveq	r5,r2
8001e3e8:	f9 b6 00 03 	moveq	r6,3
8001e3ec:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e3f0:	2f f0       	sub	r0,-1
8001e3f2:	c1 cb       	rjmp	8001e22a <fatfs_add_file_entry+0x13e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e3f4:	58 00       	cp.w	r0,0
8001e3f6:	e4 05 17 00 	moveq	r5,r2
8001e3fa:	f9 b6 00 04 	moveq	r6,4
8001e3fe:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e402:	2f f0       	sub	r0,-1
8001e404:	c2 3b       	rjmp	8001e24a <fatfs_add_file_entry+0x15e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e406:	58 00       	cp.w	r0,0
8001e408:	e4 05 17 00 	moveq	r5,r2
8001e40c:	f9 b6 00 05 	moveq	r6,5
8001e410:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e414:	2f f0       	sub	r0,-1
8001e416:	c2 ab       	rjmp	8001e26a <fatfs_add_file_entry+0x17e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e418:	58 00       	cp.w	r0,0
8001e41a:	e4 05 17 00 	moveq	r5,r2
8001e41e:	f9 b6 00 06 	moveq	r6,6
8001e422:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e426:	2f f0       	sub	r0,-1
8001e428:	c3 1b       	rjmp	8001e28a <fatfs_add_file_entry+0x19e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e42a:	58 00       	cp.w	r0,0
8001e42c:	e4 05 17 00 	moveq	r5,r2
8001e430:	f9 b6 00 07 	moveq	r6,7
8001e434:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e438:	2f f0       	sub	r0,-1
8001e43a:	c3 8b       	rjmp	8001e2aa <fatfs_add_file_entry+0x1be>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e43c:	58 00       	cp.w	r0,0
8001e43e:	e4 05 17 00 	moveq	r5,r2
8001e442:	f9 b6 00 08 	moveq	r6,8
8001e446:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e44a:	2f f0       	sub	r0,-1
8001e44c:	c3 fb       	rjmp	8001e2ca <fatfs_add_file_entry+0x1de>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e44e:	58 00       	cp.w	r0,0
8001e450:	e4 05 17 00 	moveq	r5,r2
8001e454:	f9 b6 00 0a 	moveq	r6,10
8001e458:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e45c:	2f f0       	sub	r0,-1
8001e45e:	c5 6b       	rjmp	8001e30a <fatfs_add_file_entry+0x21e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e460:	58 00       	cp.w	r0,0
8001e462:	e4 05 17 00 	moveq	r5,r2
8001e466:	f9 b6 00 09 	moveq	r6,9
8001e46a:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e46e:	2f f0       	sub	r0,-1
8001e470:	c3 db       	rjmp	8001e2ea <fatfs_add_file_entry+0x1fe>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e472:	58 00       	cp.w	r0,0
8001e474:	e4 05 17 00 	moveq	r5,r2
8001e478:	f9 b6 00 0c 	moveq	r6,12
8001e47c:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e480:	2f f0       	sub	r0,-1
8001e482:	c6 4b       	rjmp	8001e34a <fatfs_add_file_entry+0x25e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e484:	58 00       	cp.w	r0,0
8001e486:	e4 05 17 00 	moveq	r5,r2
8001e48a:	f9 b6 00 0b 	moveq	r6,11
8001e48e:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e492:	2f f0       	sub	r0,-1
8001e494:	c4 bb       	rjmp	8001e32a <fatfs_add_file_entry+0x23e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e496:	58 00       	cp.w	r0,0
8001e498:	e4 05 17 00 	moveq	r5,r2
8001e49c:	f9 b6 00 0e 	moveq	r6,14
8001e4a0:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e4a4:	2f f0       	sub	r0,-1
8001e4a6:	c7 2b       	rjmp	8001e38a <fatfs_add_file_entry+0x29e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e4a8:	58 00       	cp.w	r0,0
8001e4aa:	e4 05 17 00 	moveq	r5,r2
8001e4ae:	f9 b6 00 0d 	moveq	r6,13
8001e4b2:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e4b6:	2f f0       	sub	r0,-1
8001e4b8:	c5 9b       	rjmp	8001e36a <fatfs_add_file_entry+0x27e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001e4ba:	58 00       	cp.w	r0,0
8001e4bc:	e4 05 17 00 	moveq	r5,r2
8001e4c0:	f9 b6 00 0f 	moveq	r6,15
8001e4c4:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001e4c8:	2f f0       	sub	r0,-1
8001e4ca:	fe 9f fe 64 	bral	8001e192 <fatfs_add_file_entry+0xa6>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e4ce:	58 00       	cp.w	r0,0
8001e4d0:	e4 05 17 00 	moveq	r5,r2
8001e4d4:	e0 06 17 00 	moveq	r6,r0
8001e4d8:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e4dc:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e4de:	00 34       	cp.w	r4,r0
8001e4e0:	fe 99 fe 75 	brgt	8001e1ca <fatfs_add_file_entry+0xde>
8001e4e4:	41 84       	lddsp	r4,sp[0x60]
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001e4e6:	41 49       	lddsp	r9,sp[0x50]
8001e4e8:	13 3a       	ld.ub	r10,r9++
8001e4ea:	13 3c       	ld.ub	r12,r9++
8001e4ec:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e4f0:	f8 0b 00 0b 	add	r11,r12,r11
8001e4f4:	e0 68 00 80 	mov	r8,128
8001e4f8:	13 3c       	ld.ub	r12,r9++
8001e4fa:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e4fe:	f0 0a 17 10 	movne	r10,r8
8001e502:	f6 0a 00 0a 	add	r10,r11,r10
8001e506:	5c 5a       	castu.b	r10
8001e508:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e50c:	f8 0b 00 0b 	add	r11,r12,r11
8001e510:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e514:	13 3c       	ld.ub	r12,r9++
8001e516:	f0 0a 17 10 	movne	r10,r8
8001e51a:	f6 0a 00 0a 	add	r10,r11,r10
8001e51e:	5c 5a       	castu.b	r10
8001e520:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e524:	f8 0b 00 0b 	add	r11,r12,r11
8001e528:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e52c:	13 3c       	ld.ub	r12,r9++
8001e52e:	f0 0a 17 10 	movne	r10,r8
8001e532:	f6 0a 00 0a 	add	r10,r11,r10
8001e536:	5c 5a       	castu.b	r10
8001e538:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e53c:	f8 0b 00 0b 	add	r11,r12,r11
8001e540:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e544:	13 3c       	ld.ub	r12,r9++
8001e546:	f0 0a 17 10 	movne	r10,r8
8001e54a:	f6 0a 00 0a 	add	r10,r11,r10
8001e54e:	5c 5a       	castu.b	r10
8001e550:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e554:	f8 0b 00 0b 	add	r11,r12,r11
8001e558:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e55c:	13 3c       	ld.ub	r12,r9++
8001e55e:	f0 0a 17 10 	movne	r10,r8
8001e562:	f6 0a 00 0a 	add	r10,r11,r10
8001e566:	5c 5a       	castu.b	r10
8001e568:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e56c:	f8 0b 00 0b 	add	r11,r12,r11
8001e570:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e574:	13 3c       	ld.ub	r12,r9++
8001e576:	f0 0a 17 10 	movne	r10,r8
8001e57a:	f6 0a 00 0a 	add	r10,r11,r10
8001e57e:	5c 5a       	castu.b	r10
8001e580:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e584:	f8 0b 00 0b 	add	r11,r12,r11
8001e588:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e58c:	13 3c       	ld.ub	r12,r9++
8001e58e:	f0 0a 17 10 	movne	r10,r8
8001e592:	f6 0a 00 0a 	add	r10,r11,r10
8001e596:	5c 5a       	castu.b	r10
8001e598:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e59c:	f8 0b 00 0b 	add	r11,r12,r11
8001e5a0:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e5a4:	13 3c       	ld.ub	r12,r9++
8001e5a6:	f0 0a 17 10 	movne	r10,r8
8001e5aa:	f6 0a 00 0a 	add	r10,r11,r10
8001e5ae:	5c 5a       	castu.b	r10
8001e5b0:	f4 0b 16 01 	lsr	r11,r10,0x1
8001e5b4:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001e5b8:	f0 0a 17 10 	movne	r10,r8
8001e5bc:	f8 0b 00 0b 	add	r11,r12,r11
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e5c0:	0a 92       	mov	r2,r5
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001e5c2:	13 8c       	ld.ub	r12,r9[0x0]
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e5c4:	30 01       	mov	r1,0
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001e5c6:	f6 0a 00 09 	add	r9,r11,r10
8001e5ca:	50 15       	stdsp	sp[0x4],r5
8001e5cc:	5c 59       	castu.b	r9
8001e5ce:	0c 95       	mov	r5,r6
8001e5d0:	f2 0a 16 01 	lsr	r10,r9,0x1
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
8001e5d4:	30 10       	mov	r0,1
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001e5d6:	f8 0a 00 0a 	add	r10,r12,r10
8001e5da:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8001e5de:	40 46       	lddsp	r6,sp[0x10]
8001e5e0:	f0 09 17 10 	movne	r9,r8
8001e5e4:	f4 09 00 09 	add	r9,r10,r9
8001e5e8:	ef d9 c0 08 	bfextu	r7,r9,0x0,0x8

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0)) 
8001e5ec:	30 09       	mov	r9,0
8001e5ee:	04 9a       	mov	r10,r2
8001e5f0:	40 2b       	lddsp	r11,sp[0x8]
8001e5f2:	06 9c       	mov	r12,r3
8001e5f4:	fe b0 eb a6 	rcall	8001bd40 <fatfs_sector_reader>
8001e5f8:	fe 90 fd 90 	breq	8001e118 <fatfs_add_file_entry+0x2c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
8001e5fc:	58 01       	cp.w	r1,0
8001e5fe:	c4 b1       	brne	8001e694 <fatfs_add_file_entry+0x5a8>
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
8001e600:	40 19       	lddsp	r9,sp[0x4]
8001e602:	12 32       	cp.w	r2,r9
8001e604:	c0 30       	breq	8001e60a <fatfs_add_file_entry+0x51e>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded) 
8001e606:	2f f2       	sub	r2,-1
8001e608:	cf 2b       	rjmp	8001e5ec <fatfs_add_file_entry+0x500>
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
8001e60a:	58 05       	cp.w	r5,0
8001e60c:	c4 40       	breq	8001e694 <fatfs_add_file_entry+0x5a8>
8001e60e:	e0 05 18 00 	cp.b	r5,r0
8001e612:	c4 b0       	breq	8001e6a8 <fatfs_add_file_entry+0x5bc>
8001e614:	30 28       	mov	r8,2
8001e616:	f0 05 18 00 	cp.b	r5,r8
8001e61a:	c5 10       	breq	8001e6bc <fatfs_add_file_entry+0x5d0>
8001e61c:	30 39       	mov	r9,3
8001e61e:	f2 05 18 00 	cp.b	r5,r9
8001e622:	c5 70       	breq	8001e6d0 <fatfs_add_file_entry+0x5e4>
8001e624:	30 48       	mov	r8,4
8001e626:	f0 05 18 00 	cp.b	r5,r8
8001e62a:	c5 d0       	breq	8001e6e4 <fatfs_add_file_entry+0x5f8>
8001e62c:	30 59       	mov	r9,5
8001e62e:	f2 05 18 00 	cp.b	r5,r9
8001e632:	c6 30       	breq	8001e6f8 <fatfs_add_file_entry+0x60c>
8001e634:	30 68       	mov	r8,6
8001e636:	f0 05 18 00 	cp.b	r5,r8
8001e63a:	c6 90       	breq	8001e70c <fatfs_add_file_entry+0x620>
8001e63c:	30 79       	mov	r9,7
8001e63e:	f2 05 18 00 	cp.b	r5,r9
8001e642:	c6 f0       	breq	8001e720 <fatfs_add_file_entry+0x634>
8001e644:	30 88       	mov	r8,8
8001e646:	f0 05 18 00 	cp.b	r5,r8
8001e64a:	c7 50       	breq	8001e734 <fatfs_add_file_entry+0x648>
8001e64c:	30 98       	mov	r8,9
8001e64e:	f0 05 18 00 	cp.b	r5,r8
8001e652:	c7 b0       	breq	8001e748 <fatfs_add_file_entry+0x65c>
8001e654:	30 a8       	mov	r8,10
8001e656:	f0 05 18 00 	cp.b	r5,r8
8001e65a:	e0 80 00 81 	breq	8001e75c <fatfs_add_file_entry+0x670>
8001e65e:	30 b8       	mov	r8,11
8001e660:	f0 05 18 00 	cp.b	r5,r8
8001e664:	e0 80 00 86 	breq	8001e770 <fatfs_add_file_entry+0x684>
8001e668:	30 c8       	mov	r8,12
8001e66a:	f0 05 18 00 	cp.b	r5,r8
8001e66e:	e0 80 00 8b 	breq	8001e784 <fatfs_add_file_entry+0x698>
8001e672:	30 d8       	mov	r8,13
8001e674:	f0 05 18 00 	cp.b	r5,r8
8001e678:	e0 80 00 90 	breq	8001e798 <fatfs_add_file_entry+0x6ac>
8001e67c:	30 e8       	mov	r8,14
8001e67e:	f0 05 18 00 	cp.b	r5,r8
8001e682:	e0 80 00 95 	breq	8001e7ac <fatfs_add_file_entry+0x6c0>
8001e686:	30 f8       	mov	r8,15
8001e688:	f0 05 18 00 	cp.b	r5,r8
8001e68c:	e0 80 00 9a 	breq	8001e7c0 <fatfs_add_file_entry+0x6d4>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded) 
8001e690:	2f f2       	sub	r2,-1
8001e692:	ca db       	rjmp	8001e5ec <fatfs_add_file_entry+0x500>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e694:	58 04       	cp.w	r4,0
8001e696:	e0 80 01 6e 	breq	8001e972 <fatfs_add_file_entry+0x886>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e69a:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e69c:	0e 99       	mov	r9,r7
8001e69e:	08 9a       	mov	r10,r4
8001e6a0:	40 3b       	lddsp	r11,sp[0xc]
8001e6a2:	0c 9c       	mov	r12,r6
8001e6a4:	fe b0 f4 b2 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e6a8:	58 04       	cp.w	r4,0
8001e6aa:	e0 80 01 b0 	breq	8001ea0a <fatfs_add_file_entry+0x91e>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e6ae:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e6b0:	0e 99       	mov	r9,r7
8001e6b2:	08 9a       	mov	r10,r4
8001e6b4:	40 5b       	lddsp	r11,sp[0x14]
8001e6b6:	0c 9c       	mov	r12,r6
8001e6b8:	fe b0 f4 a8 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e6bc:	58 04       	cp.w	r4,0
8001e6be:	e0 80 01 a4 	breq	8001ea06 <fatfs_add_file_entry+0x91a>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e6c2:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e6c4:	0e 99       	mov	r9,r7
8001e6c6:	08 9a       	mov	r10,r4
8001e6c8:	40 6b       	lddsp	r11,sp[0x18]
8001e6ca:	0c 9c       	mov	r12,r6
8001e6cc:	fe b0 f4 9e 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e6d0:	58 04       	cp.w	r4,0
8001e6d2:	e0 80 01 9e 	breq	8001ea0e <fatfs_add_file_entry+0x922>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e6d6:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e6d8:	0e 99       	mov	r9,r7
8001e6da:	08 9a       	mov	r10,r4
8001e6dc:	40 7b       	lddsp	r11,sp[0x1c]
8001e6de:	0c 9c       	mov	r12,r6
8001e6e0:	fe b0 f4 94 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e6e4:	58 04       	cp.w	r4,0
8001e6e6:	e0 80 01 8d 	breq	8001ea00 <fatfs_add_file_entry+0x914>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e6ea:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e6ec:	0e 99       	mov	r9,r7
8001e6ee:	08 9a       	mov	r10,r4
8001e6f0:	40 8b       	lddsp	r11,sp[0x20]
8001e6f2:	0c 9c       	mov	r12,r6
8001e6f4:	fe b0 f4 8a 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e6f8:	58 04       	cp.w	r4,0
8001e6fa:	e0 80 01 9e 	breq	8001ea36 <fatfs_add_file_entry+0x94a>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e6fe:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e700:	0e 99       	mov	r9,r7
8001e702:	08 9a       	mov	r10,r4
8001e704:	40 9b       	lddsp	r11,sp[0x24]
8001e706:	0c 9c       	mov	r12,r6
8001e708:	fe b0 f4 80 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e70c:	58 04       	cp.w	r4,0
8001e70e:	e0 80 01 91 	breq	8001ea30 <fatfs_add_file_entry+0x944>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e712:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e714:	0e 99       	mov	r9,r7
8001e716:	08 9a       	mov	r10,r4
8001e718:	40 ab       	lddsp	r11,sp[0x28]
8001e71a:	0c 9c       	mov	r12,r6
8001e71c:	fe b0 f4 76 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e720:	58 04       	cp.w	r4,0
8001e722:	e0 80 01 84 	breq	8001ea2a <fatfs_add_file_entry+0x93e>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e726:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e728:	0e 99       	mov	r9,r7
8001e72a:	08 9a       	mov	r10,r4
8001e72c:	40 bb       	lddsp	r11,sp[0x2c]
8001e72e:	0c 9c       	mov	r12,r6
8001e730:	fe b0 f4 6c 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e734:	58 04       	cp.w	r4,0
8001e736:	e0 80 01 77 	breq	8001ea24 <fatfs_add_file_entry+0x938>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e73a:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e73c:	0e 99       	mov	r9,r7
8001e73e:	08 9a       	mov	r10,r4
8001e740:	40 cb       	lddsp	r11,sp[0x30]
8001e742:	0c 9c       	mov	r12,r6
8001e744:	fe b0 f4 62 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e748:	58 04       	cp.w	r4,0
8001e74a:	e0 80 01 6a 	breq	8001ea1e <fatfs_add_file_entry+0x932>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e74e:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e750:	0e 99       	mov	r9,r7
8001e752:	08 9a       	mov	r10,r4
8001e754:	40 db       	lddsp	r11,sp[0x34]
8001e756:	0c 9c       	mov	r12,r6
8001e758:	fe b0 f4 58 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e75c:	58 04       	cp.w	r4,0
8001e75e:	e0 80 01 5d 	breq	8001ea18 <fatfs_add_file_entry+0x92c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e762:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e764:	0e 99       	mov	r9,r7
8001e766:	08 9a       	mov	r10,r4
8001e768:	40 eb       	lddsp	r11,sp[0x38]
8001e76a:	0c 9c       	mov	r12,r6
8001e76c:	fe b0 f4 4e 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e770:	58 04       	cp.w	r4,0
8001e772:	e0 80 01 50 	breq	8001ea12 <fatfs_add_file_entry+0x926>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e776:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e778:	0e 99       	mov	r9,r7
8001e77a:	08 9a       	mov	r10,r4
8001e77c:	40 fb       	lddsp	r11,sp[0x3c]
8001e77e:	0c 9c       	mov	r12,r6
8001e780:	fe b0 f4 44 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e784:	58 04       	cp.w	r4,0
8001e786:	e0 80 01 5b 	breq	8001ea3c <fatfs_add_file_entry+0x950>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e78a:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e78c:	0e 99       	mov	r9,r7
8001e78e:	08 9a       	mov	r10,r4
8001e790:	41 1b       	lddsp	r11,sp[0x44]
8001e792:	0c 9c       	mov	r12,r6
8001e794:	fe b0 f4 3a 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e798:	58 04       	cp.w	r4,0
8001e79a:	e0 80 01 57 	breq	8001ea48 <fatfs_add_file_entry+0x95c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e79e:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e7a0:	0e 99       	mov	r9,r7
8001e7a2:	08 9a       	mov	r10,r4
8001e7a4:	41 0b       	lddsp	r11,sp[0x40]
8001e7a6:	0c 9c       	mov	r12,r6
8001e7a8:	fe b0 f4 30 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e7ac:	58 04       	cp.w	r4,0
8001e7ae:	e0 80 01 4a 	breq	8001ea42 <fatfs_add_file_entry+0x956>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e7b2:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e7b4:	0e 99       	mov	r9,r7
8001e7b6:	08 9a       	mov	r10,r4
8001e7b8:	41 2b       	lddsp	r11,sp[0x48]
8001e7ba:	0c 9c       	mov	r12,r6
8001e7bc:	fe b0 f4 26 	rcall	8001d008 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001e7c0:	58 04       	cp.w	r4,0
8001e7c2:	e0 80 00 d6 	breq	8001e96e <fatfs_add_file_entry+0x882>
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e7c6:	41 3b       	lddsp	r11,sp[0x4c]
8001e7c8:	0c 9c       	mov	r12,r6
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001e7ca:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001e7cc:	0e 99       	mov	r9,r7
8001e7ce:	08 9a       	mov	r10,r4
8001e7d0:	fe b0 f4 1c 	rcall	8001d008 <fatfs_filename_to_lfn>
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
8001e7d4:	30 1a       	mov	r10,1
8001e7d6:	66 e8       	ld.w	r8,r3[0x38]
8001e7d8:	40 3b       	lddsp	r11,sp[0xc]
8001e7da:	e6 fc 02 44 	ld.w	r12,r3[580]
8001e7de:	5d 18       	icall	r8
8001e7e0:	fe 90 fc 9c 	breq	8001e118 <fatfs_add_file_entry+0x2c>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded) 
8001e7e4:	30 11       	mov	r1,1
8001e7e6:	2f f2       	sub	r2,-1
8001e7e8:	c0 2b       	rjmp	8001e5ec <fatfs_add_file_entry+0x500>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e7ea:	58 00       	cp.w	r0,0
8001e7ec:	e4 05 17 00 	moveq	r5,r2
8001e7f0:	f9 b6 00 02 	moveq	r6,2
8001e7f4:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e7f8:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e7fa:	00 34       	cp.w	r4,r0
8001e7fc:	fe 99 fd 07 	brgt	8001e20a <fatfs_add_file_entry+0x11e>
8001e800:	c7 2a       	rjmp	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e802:	58 00       	cp.w	r0,0
8001e804:	f9 b6 00 01 	moveq	r6,1
8001e808:	e4 05 17 00 	moveq	r5,r2
8001e80c:	ec 07 17 00 	moveq	r7,r6
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e810:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e812:	00 34       	cp.w	r4,r0
8001e814:	fe 99 fc eb 	brgt	8001e1ea <fatfs_add_file_entry+0xfe>
8001e818:	fe 9f fe 66 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e81c:	58 00       	cp.w	r0,0
8001e81e:	e4 05 17 00 	moveq	r5,r2
8001e822:	f9 b6 00 03 	moveq	r6,3
8001e826:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e82a:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e82c:	00 34       	cp.w	r4,r0
8001e82e:	fe 99 fc fe 	brgt	8001e22a <fatfs_add_file_entry+0x13e>
8001e832:	fe 9f fe 59 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e836:	58 00       	cp.w	r0,0
8001e838:	e4 05 17 00 	moveq	r5,r2
8001e83c:	f9 b6 00 04 	moveq	r6,4
8001e840:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e844:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e846:	00 34       	cp.w	r4,r0
8001e848:	fe 99 fd 01 	brgt	8001e24a <fatfs_add_file_entry+0x15e>
8001e84c:	fe 9f fe 4c 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e850:	58 00       	cp.w	r0,0
8001e852:	e4 05 17 00 	moveq	r5,r2
8001e856:	f9 b6 00 05 	moveq	r6,5
8001e85a:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e85e:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e860:	00 34       	cp.w	r4,r0
8001e862:	fe 99 fd 04 	brgt	8001e26a <fatfs_add_file_entry+0x17e>
8001e866:	fe 9f fe 3f 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e86a:	58 00       	cp.w	r0,0
8001e86c:	e4 05 17 00 	moveq	r5,r2
8001e870:	f9 b6 00 06 	moveq	r6,6
8001e874:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e878:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e87a:	00 34       	cp.w	r4,r0
8001e87c:	fe 99 fd 07 	brgt	8001e28a <fatfs_add_file_entry+0x19e>
8001e880:	fe 9f fe 32 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e884:	58 00       	cp.w	r0,0
8001e886:	e4 05 17 00 	moveq	r5,r2
8001e88a:	f9 b6 00 07 	moveq	r6,7
8001e88e:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e892:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e894:	00 34       	cp.w	r4,r0
8001e896:	fe 99 fd 0a 	brgt	8001e2aa <fatfs_add_file_entry+0x1be>
8001e89a:	fe 9f fe 25 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e89e:	58 00       	cp.w	r0,0
8001e8a0:	e4 05 17 00 	moveq	r5,r2
8001e8a4:	f9 b6 00 08 	moveq	r6,8
8001e8a8:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e8ac:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e8ae:	00 34       	cp.w	r4,r0
8001e8b0:	fe 99 fd 0d 	brgt	8001e2ca <fatfs_add_file_entry+0x1de>
8001e8b4:	fe 9f fe 18 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e8b8:	58 00       	cp.w	r0,0
8001e8ba:	e4 05 17 00 	moveq	r5,r2
8001e8be:	f9 b6 00 09 	moveq	r6,9
8001e8c2:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e8c6:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e8c8:	00 34       	cp.w	r4,r0
8001e8ca:	fe 99 fd 10 	brgt	8001e2ea <fatfs_add_file_entry+0x1fe>
8001e8ce:	fe 9f fe 0b 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e8d2:	58 00       	cp.w	r0,0
8001e8d4:	e4 05 17 00 	moveq	r5,r2
8001e8d8:	f9 b6 00 0a 	moveq	r6,10
8001e8dc:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e8e0:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e8e2:	00 34       	cp.w	r4,r0
8001e8e4:	fe 99 fd 13 	brgt	8001e30a <fatfs_add_file_entry+0x21e>
8001e8e8:	fe 9f fd fe 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e8ec:	58 00       	cp.w	r0,0
8001e8ee:	e4 05 17 00 	moveq	r5,r2
8001e8f2:	f9 b6 00 0b 	moveq	r6,11
8001e8f6:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e8fa:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e8fc:	00 34       	cp.w	r4,r0
8001e8fe:	fe 99 fd 16 	brgt	8001e32a <fatfs_add_file_entry+0x23e>
8001e902:	fe 9f fd f1 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e906:	58 00       	cp.w	r0,0
8001e908:	e4 05 17 00 	moveq	r5,r2
8001e90c:	f9 b6 00 0c 	moveq	r6,12
8001e910:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e914:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e916:	00 34       	cp.w	r4,r0
8001e918:	fe 99 fd 19 	brgt	8001e34a <fatfs_add_file_entry+0x25e>
8001e91c:	fe 9f fd e4 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e920:	58 00       	cp.w	r0,0
8001e922:	e4 05 17 00 	moveq	r5,r2
8001e926:	f9 b6 00 0d 	moveq	r6,13
8001e92a:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e92e:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e930:	00 34       	cp.w	r4,r0
8001e932:	fe 99 fd 1c 	brgt	8001e36a <fatfs_add_file_entry+0x27e>
8001e936:	fe 9f fd d7 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e93a:	58 00       	cp.w	r0,0
8001e93c:	e4 05 17 00 	moveq	r5,r2
8001e940:	f9 b6 00 0e 	moveq	r6,14
8001e944:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e948:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e94a:	00 34       	cp.w	r4,r0
8001e94c:	fe 99 fd 1f 	brgt	8001e38a <fatfs_add_file_entry+0x29e>
8001e950:	fe 9f fd ca 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001e954:	58 00       	cp.w	r0,0
8001e956:	e4 05 17 00 	moveq	r5,r2
8001e95a:	f9 b6 00 0f 	moveq	r6,15
8001e95e:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001e962:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001e964:	00 34       	cp.w	r4,r0
8001e966:	fe 99 fc 16 	brgt	8001e192 <fatfs_add_file_entry+0xa6>
8001e96a:	fe 9f fd bd 	bral	8001e4e4 <fatfs_add_file_entry+0x3f8>
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
8001e96e:	e0 64 01 e0 	mov	r4,480
                if (foundEnd)
                {                
                    if (entryCount==0)
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
8001e972:	fa c7 ff 9c 	sub	r7,sp,-100
8001e976:	41 78       	lddsp	r8,sp[0x5c]
8001e978:	41 5a       	lddsp	r10,sp[0x54]
8001e97a:	41 6b       	lddsp	r11,sp[0x58]
8001e97c:	41 4c       	lddsp	r12,sp[0x50]
8001e97e:	0e 99       	mov	r9,r7
8001e980:	fe b0 f1 82 	rcall	8001cc84 <fatfs_sfn_create_entry>
                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
8001e984:	0e 9b       	mov	r11,r7
8001e986:	40 3c       	lddsp	r12,sp[0xc]
8001e988:	32 0a       	mov	r10,32
8001e98a:	08 0c       	add	r12,r4
8001e98c:	e0 a0 25 40 	rcall	8002340c <memcpy>

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001e990:	40 3b       	lddsp	r11,sp[0xc]
8001e992:	e6 fc 02 44 	ld.w	r12,r3[580]
8001e996:	66 e8       	ld.w	r8,r3[0x38]
8001e998:	30 1a       	mov	r10,1
8001e99a:	5d 18       	icall	r8
        else
            return 0;
    } // End of while loop

    return 0;
}
8001e99c:	2d ed       	sub	sp,-136
8001e99e:	d8 32       	popm	r0-r7,pc
8001e9a0:	18 98       	mov	r8,r12
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
8001e9a2:	66 2b       	ld.w	r11,r3[0x8]
8001e9a4:	41 84       	lddsp	r4,sp[0x60]
8001e9a6:	fa ca ff 7c 	sub	r10,sp,-132
8001e9aa:	06 9c       	mov	r12,r3
8001e9ac:	50 08       	stdsp	sp[0x0],r8
8001e9ae:	fe b0 fa f8 	rcall	8001df9e <fatfs_find_blank_cluster>
8001e9b2:	fe 90 fb b3 	breq	8001e118 <fatfs_add_file_entry+0x2c>
                return 0;

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
8001e9b6:	42 1a       	lddsp	r10,sp[0x84]
8001e9b8:	40 2b       	lddsp	r11,sp[0x8]
8001e9ba:	06 9c       	mov	r12,r3
8001e9bc:	fe b0 f8 d6 	rcall	8001db68 <fatfs_fat_add_cluster_to_chain>
8001e9c0:	40 08       	lddsp	r8,sp[0x0]
8001e9c2:	fe 90 fb ab 	breq	8001e118 <fatfs_add_file_entry+0x2c>
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
8001e9c6:	e0 6a 02 00 	mov	r10,512
8001e9ca:	10 9b       	mov	r11,r8
8001e9cc:	40 3c       	lddsp	r12,sp[0xc]
8001e9ce:	e0 a0 25 c3 	rcall	80023554 <memset>
            for (i=0;i<fs->sectors_per_cluster;i++)
8001e9d2:	07 8a       	ld.ub	r10,r3[0x0]
8001e9d4:	40 08       	lddsp	r8,sp[0x0]
8001e9d6:	f0 0a 18 00 	cp.b	r10,r8
8001e9da:	c3 a0       	breq	8001ea4e <fatfs_add_file_entry+0x962>
8001e9dc:	10 91       	mov	r1,r8
8001e9de:	c0 88       	rjmp	8001e9ee <fatfs_add_file_entry+0x902>
8001e9e0:	2f f1       	sub	r1,-1
8001e9e2:	07 88       	ld.ub	r8,r3[0x0]
8001e9e4:	5c 51       	castu.b	r1
8001e9e6:	e2 08 18 00 	cp.b	r8,r1
8001e9ea:	e0 88 00 32 	brls	8001ea4e <fatfs_add_file_entry+0x962>
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
8001e9ee:	02 9a       	mov	r10,r1
8001e9f0:	30 09       	mov	r9,0
8001e9f2:	42 1b       	lddsp	r11,sp[0x84]
8001e9f4:	06 9c       	mov	r12,r3
8001e9f6:	fe b0 e9 57 	rcall	8001bca4 <fatfs_write_sector>
8001e9fa:	cf 31       	brne	8001e9e0 <fatfs_add_file_entry+0x8f4>
8001e9fc:	fe 9f fb 8e 	bral	8001e118 <fatfs_add_file_entry+0x2c>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001ea00:	e0 64 00 80 	mov	r4,128
8001ea04:	cb 7b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea06:	34 04       	mov	r4,64
8001ea08:	cb 5b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea0a:	32 04       	mov	r4,32
8001ea0c:	cb 3b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea0e:	36 04       	mov	r4,96
8001ea10:	cb 1b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea12:	e0 64 01 60 	mov	r4,352
8001ea16:	ca eb       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea18:	e0 64 01 40 	mov	r4,320
8001ea1c:	ca bb       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea1e:	e0 64 01 20 	mov	r4,288
8001ea22:	ca 8b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea24:	e0 64 01 00 	mov	r4,256
8001ea28:	ca 5b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea2a:	e0 64 00 e0 	mov	r4,224
8001ea2e:	ca 2b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea30:	e0 64 00 c0 	mov	r4,192
8001ea34:	c9 fb       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea36:	e0 64 00 a0 	mov	r4,160
8001ea3a:	c9 cb       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea3c:	e0 64 01 80 	mov	r4,384
8001ea40:	c9 9b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea42:	e0 64 01 c0 	mov	r4,448
8001ea46:	c9 6b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
8001ea48:	e0 64 01 a0 	mov	r4,416
8001ea4c:	c9 3b       	rjmp	8001e972 <fatfs_add_file_entry+0x886>
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001ea4e:	58 07       	cp.w	r7,0
8001ea50:	e4 05 17 00 	moveq	r5,r2
8001ea54:	ee 06 17 00 	moveq	r6,r7
8001ea58:	fe 9f fd 47 	bral	8001e4e6 <fatfs_add_file_entry+0x3fa>

8001ea5c <fatfs_add_free_space>:
8001ea5c:	eb cd 40 fc 	pushm	r2-r7,lr
8001ea60:	20 1d       	sub	sp,4
8001ea62:	16 92       	mov	r2,r11
8001ea64:	14 94       	mov	r4,r10
8001ea66:	18 97       	mov	r7,r12
8001ea68:	76 05       	ld.w	r5,r11[0x0]
8001ea6a:	78 98       	ld.w	r8,r12[0x24]
8001ea6c:	5b f8       	cp.w	r8,-1
8001ea6e:	c0 40       	breq	8001ea76 <fatfs_add_free_space+0x1a>
8001ea70:	3f fb       	mov	r11,-1
8001ea72:	fe b0 f6 97 	rcall	8001d7a0 <fatfs_set_fs_info_next_free_cluster>
8001ea76:	58 04       	cp.w	r4,0
8001ea78:	c2 20       	breq	8001eabc <fatfs_add_free_space+0x60>
8001ea7a:	30 06       	mov	r6,0
8001ea7c:	1a 93       	mov	r3,sp
8001ea7e:	c1 18       	rjmp	8001eaa0 <fatfs_add_free_space+0x44>
8001ea80:	40 0a       	lddsp	r10,sp[0x0]
8001ea82:	fe b0 f7 e3 	rcall	8001da48 <fatfs_fat_set_cluster>
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
            
            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
8001ea86:	3f fa       	mov	r10,-1
8001ea88:	40 0b       	lddsp	r11,sp[0x0]
8001ea8a:	0e 9c       	mov	r12,r7
8001ea8c:	fe b0 f7 de 	rcall	8001da48 <fatfs_fat_set_cluster>

            // Adjust argument reference
            start = nextcluster;
8001ea90:	40 05       	lddsp	r5,sp[0x0]
            if (i == 0)
                *startCluster = nextcluster;
8001ea92:	58 06       	cp.w	r6,0
8001ea94:	e5 f5 0a 00 	st.weq	r2[0x0],r5

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001ea98:	2f f6       	sub	r6,-1
8001ea9a:	0c 34       	cp.w	r4,r6
8001ea9c:	e0 88 00 10 	brls	8001eabc <fatfs_add_free_space+0x60>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001eaa0:	6e 2b       	ld.w	r11,r7[0x8]
8001eaa2:	1a 9a       	mov	r10,sp
8001eaa4:	0e 9c       	mov	r12,r7
8001eaa6:	fe b0 fa 7c 	rcall	8001df9e <fatfs_find_blank_cluster>
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001eaaa:	0a 9b       	mov	r11,r5
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001eaac:	18 98       	mov	r8,r12
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001eaae:	0e 9c       	mov	r12,r7
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001eab0:	58 08       	cp.w	r8,0
8001eab2:	ce 71       	brne	8001ea80 <fatfs_add_free_space+0x24>
8001eab4:	10 9c       	mov	r12,r8
        else
            return 0;
    }

    return 1;
}
8001eab6:	2f fd       	sub	sp,-4
8001eab8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001eabc:	2f fd       	sub	sp,-4
8001eabe:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8001eac2:	d7 03       	nop

8001eac4 <fatfs_allocate_free_space>:
8001eac4:	eb cd 40 f8 	pushm	r3-r7,lr
8001eac8:	20 3d       	sub	sp,12
8001eaca:	16 97       	mov	r7,r11
8001eacc:	14 96       	mov	r6,r10
8001eace:	18 95       	mov	r5,r12
{
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
8001ead0:	58 09       	cp.w	r9,0
8001ead2:	c3 c0       	breq	8001eb4a <fatfs_allocate_free_space+0x86>
        return 0;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
8001ead4:	78 98       	ld.w	r8,r12[0x24]
8001ead6:	5b f8       	cp.w	r8,-1
8001ead8:	c0 60       	breq	8001eae4 <fatfs_allocate_free_space+0x20>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 
8001eada:	50 09       	stdsp	sp[0x0],r9
8001eadc:	3f fb       	mov	r11,-1
8001eade:	fe b0 f6 61 	rcall	8001d7a0 <fatfs_set_fs_info_next_free_cluster>
8001eae2:	40 09       	lddsp	r9,sp[0x0]

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
8001eae4:	0b 88       	ld.ub	r8,r5[0x0]
8001eae6:	a9 78       	lsl	r8,0x9
    clusterCount = (size / clusterSize);
8001eae8:	f2 08 0d 0a 	divu	r10,r9,r8
8001eaec:	14 94       	mov	r4,r10

    // If any left over
    if (size-(clusterSize*clusterCount))
8001eaee:	f4 08 02 48 	mul	r8,r10,r8
        clusterCount++;
8001eaf2:	12 38       	cp.w	r8,r9
8001eaf4:	f7 b4 01 ff 	subne	r4,-1

    // Allocated first link in the chain if a new file
    if (newFile)
8001eaf8:	58 07       	cp.w	r7,0
8001eafa:	c2 f1       	brne	8001eb58 <fatfs_allocate_free_space+0x94>
            return 1;
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
8001eafc:	6c 06       	ld.w	r6,r6[0x0]
8001eafe:	50 26       	stdsp	sp[0x8],r6
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
8001eb00:	6a 98       	ld.w	r8,r5[0x24]
8001eb02:	5b f8       	cp.w	r8,-1
8001eb04:	c0 50       	breq	8001eb0e <fatfs_allocate_free_space+0x4a>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 
8001eb06:	3f fb       	mov	r11,-1
8001eb08:	0a 9c       	mov	r12,r5
8001eb0a:	fe b0 f6 4b 	rcall	8001d7a0 <fatfs_set_fs_info_next_free_cluster>

    for (i=0;i<clusters;i++)
8001eb0e:	58 04       	cp.w	r4,0
8001eb10:	c2 10       	breq	8001eb52 <fatfs_allocate_free_space+0x8e>
8001eb12:	30 07       	mov	r7,0
8001eb14:	fa c3 ff fc 	sub	r3,sp,-4
8001eb18:	c1 28       	rjmp	8001eb3c <fatfs_allocate_free_space+0x78>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001eb1a:	40 1a       	lddsp	r10,sp[0x4]
8001eb1c:	0a 9c       	mov	r12,r5
8001eb1e:	fe b0 f7 95 	rcall	8001da48 <fatfs_fat_set_cluster>
            
            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
8001eb22:	3f fa       	mov	r10,-1
8001eb24:	40 1b       	lddsp	r11,sp[0x4]
8001eb26:	0a 9c       	mov	r12,r5
8001eb28:	fe b0 f7 90 	rcall	8001da48 <fatfs_fat_set_cluster>

            // Adjust argument reference
            start = nextcluster;
8001eb2c:	40 16       	lddsp	r6,sp[0x4]
            if (i == 0)
                *startCluster = nextcluster;
8001eb2e:	58 07       	cp.w	r7,0
8001eb30:	fb f6 0a 02 	st.weq	sp[0x8],r6

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001eb34:	2f f7       	sub	r7,-1
8001eb36:	0e 34       	cp.w	r4,r7
8001eb38:	e0 88 00 0d 	brls	8001eb52 <fatfs_allocate_free_space+0x8e>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001eb3c:	6a 2b       	ld.w	r11,r5[0x8]
8001eb3e:	06 9a       	mov	r10,r3
8001eb40:	0a 9c       	mov	r12,r5
8001eb42:	fe b0 fa 2e 	rcall	8001df9e <fatfs_find_blank_cluster>
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001eb46:	0c 9b       	mov	r11,r6
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001eb48:	ce 91       	brne	8001eb1a <fatfs_allocate_free_space+0x56>

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001eb4a:	30 0c       	mov	r12,0

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
            return 0;

    return 1;
}
8001eb4c:	2f dd       	sub	sp,-12
8001eb4e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001eb52:	2f dd       	sub	sp,-12
8001eb54:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
        clusterCount++;

    // Allocated first link in the chain if a new file
    if (newFile)
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001eb58:	fa ca ff f8 	sub	r10,sp,-8
8001eb5c:	6a 2b       	ld.w	r11,r5[0x8]
8001eb5e:	0a 9c       	mov	r12,r5
8001eb60:	fe b0 fa 1f 	rcall	8001df9e <fatfs_find_blank_cluster>
8001eb64:	cf 30       	breq	8001eb4a <fatfs_allocate_free_space+0x86>
            return 0;

        // If this is all that is needed then all done
        if (clusterCount==1)
8001eb66:	58 14       	cp.w	r4,1
8001eb68:	c0 30       	breq	8001eb6e <fatfs_allocate_free_space+0xaa>
8001eb6a:	40 26       	lddsp	r6,sp[0x8]
8001eb6c:	cc ab       	rjmp	8001eb00 <fatfs_allocate_free_space+0x3c>
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
8001eb6e:	0a 9c       	mov	r12,r5
8001eb70:	3f fa       	mov	r10,-1
8001eb72:	40 2b       	lddsp	r11,sp[0x8]
8001eb74:	fe b0 f7 6a 	rcall	8001da48 <fatfs_fat_set_cluster>
            *startCluster = nextcluster;
8001eb78:	40 28       	lddsp	r8,sp[0x8]
8001eb7a:	08 9c       	mov	r12,r4
8001eb7c:	8d 08       	st.w	r6[0x0],r8
            return 1;
8001eb7e:	ce 7b       	rjmp	8001eb4c <fatfs_allocate_free_space+0x88>

8001eb80 <itoa_whole>:
    *p = bufLo[i] ? bufLo[i] : ' '; 
    i++; p++;
  }
}
// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
8001eb80:	eb cd 40 fe 	pushm	r1-r7,lr
  static char* p;
  p = buf + len - 1; // right justify; start at end
8001eb84:	e0 69 2a 00 	mov	r9,10752
8001eb88:	f4 c8 00 01 	sub	r8,r10,1
8001eb8c:	f6 08 00 08 	add	r8,r11,r8
  if(val == 0) {
8001eb90:	93 08       	st.w	r9[0x0],r8
8001eb92:	58 0c       	cp.w	r12,0
    *p = '0'; p--;
8001eb94:	c2 11       	brne	8001ebd6 <itoa_whole+0x56>
8001eb96:	33 0a       	mov	r10,48
8001eb98:	b0 8a       	st.b	r8[0x0],r10
8001eb9a:	f0 ce 00 01 	sub	lr,r8,1
    while(p >= buf) {
8001eb9e:	93 0e       	st.w	r9[0x0],lr
8001eba0:	1c 3b       	cp.w	r11,lr
8001eba2:	e0 8b 00 18 	brhi	8001ebd2 <itoa_whole+0x52>
      *p = ' ';
8001eba6:	1c 9a       	mov	r10,lr
8001eba8:	32 0c       	mov	r12,32
8001ebaa:	b4 8c       	st.b	r10[0x0],r12
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
  if(val == 0) {
    *p = '0'; p--;
    while(p >= buf) {
8001ebac:	20 1a       	sub	r10,1
8001ebae:	14 3b       	cp.w	r11,r10
8001ebb0:	fe 98 ff fd 	brls	8001ebaa <itoa_whole+0x2a>
8001ebb4:	10 1b       	sub	r11,r8
8001ebb6:	16 0e       	add	lr,r11
8001ebb8:	93 0e       	st.w	r9[0x0],lr
8001ebba:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;

  while(p >= buf) {
8001ebbe:	f6 c8 00 01 	sub	r8,r11,1
8001ebc2:	83 0a       	st.w	r1[0x0],r10
8001ebc4:	85 0c       	st.w	r2[0x0],r12
      *p = ' '; 
    }
    p--;

  }
  if(sign) { *buf = '-'; }
8001ebc6:	93 08       	st.w	r9[0x0],r8
8001ebc8:	58 03       	cp.w	r3,0
8001ebca:	f9 b8 01 2d 	movne	r8,45
8001ebce:	f7 f8 1e 00 	st.bne	r11[0x0],r8
8001ebd2:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
      *p = ' ';
      p--;
    }
    return;
  }
  sign = BIT_SIGN(val);
8001ebd6:	18 93       	mov	r3,r12
8001ebd8:	e0 6a 2a 08 	mov	r10,10760
  if ( sign ) {
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001ebdc:	e6 13 80 00 	andh	r3,0x8000,COH
    }
    return;
  }
  sign = BIT_SIGN(val);

  if ( sign ) {
8001ebe0:	e0 62 29 fc 	mov	r2,10748
      *p = ' ';
      p--;
    }
    return;
  }
  sign = BIT_SIGN(val);
8001ebe4:	58 03       	cp.w	r3,0
  if ( sign ) {
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001ebe6:	fb bc 01 01 	rsubne	r12,1

  while(p >= buf) {
8001ebea:	95 03       	st.w	r10[0x0],r3
8001ebec:	85 0c       	st.w	r2[0x0],r12
8001ebee:	10 3b       	cp.w	r11,r8
    if (u > 0) {
      a = u % 10;
      u /= 10;
      *p = '0' + a;
    } else {
      *p = ' '; 
8001ebf0:	fe 9b ff ec 	brhi	8001ebc8 <itoa_whole+0x48>

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001ebf4:	e0 61 2a 04 	mov	r1,10756
8001ebf8:	32 04       	mov	r4,32
8001ebfa:	62 0a       	ld.w	r10,r1[0x0]
8001ebfc:	e0 65 cc cd 	mov	r5,52429
8001ec00:	ea 15 cc cc 	orh	r5,0xcccc
8001ec04:	c1 08       	rjmp	8001ec24 <itoa_whole+0xa4>
8001ec06:	0e 9a       	mov	r10,r7
8001ec08:	a3 9a       	lsr	r10,0x3
8001ec0a:	14 9e       	mov	lr,r10
      u /= 10;
8001ec0c:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
      *p = '0' + a;
8001ec10:	f8 0a 01 1a 	sub	r10,r12,r10<<0x1
    } else {
      *p = ' '; 
8001ec14:	1c 9c       	mov	r12,lr
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;

  while(p >= buf) {
8001ec16:	f4 ce ff d0 	sub	lr,r10,-48
8001ec1a:	b0 8e       	st.b	r8[0x0],lr
    if (u > 0) {
      a = u % 10;
8001ec1c:	20 18       	sub	r8,1
8001ec1e:	10 3b       	cp.w	r11,r8
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001ec20:	fe 9b ff cf 	brhi	8001ebbe <itoa_whole+0x3e>
      a = u % 10;
      u /= 10;
      *p = '0' + a;
    } else {
      *p = ' '; 
8001ec24:	f8 05 06 46 	mulu.d	r6,r12,r5
8001ec28:	58 0c       	cp.w	r12,0
8001ec2a:	ce e1       	brne	8001ec06 <itoa_whole+0x86>
8001ec2c:	b0 84       	st.b	r8[0x0],r4
8001ec2e:	cf 7b       	rjmp	8001ec1c <itoa_whole+0x9c>

8001ec30 <app_launch>:
  render_init();
}

// this is called from the event queue to start the app 
// return >0 if there is an error doing firstrun init
u8 app_launch(u8 firstrun) {
8001ec30:	eb cd 40 80 	pushm	r7,lr
8001ec34:	20 1d       	sub	sp,4
8001ec36:	18 97       	mov	r7,r12
  u32 waitForCard;

  print_dbg("\r\n app launch");
8001ec38:	fe cc 98 10 	sub	r12,pc,-26608
8001ec3c:	fe b0 a1 b0 	rcall	80012f9c <print_dbg>
  print_dbg("\r\n firstrun: ");
8001ec40:	fe cc 98 08 	sub	r12,pc,-26616
  print_dbg_ulong(firstrun);
8001ec44:	fe b0 a1 ac 	rcall	80012f9c <print_dbg>
8001ec48:	0e 9c       	mov	r12,r7

  if(firstrun) {
8001ec4a:	fe b0 a1 af 	rcall	80012fa8 <print_dbg_ulong>
8001ec4e:	58 07       	cp.w	r7,0
    // it is the first run.
    // need to copy audio module binary from sdcard to internal flash.
    render_status("first run. waiting for SDcard...");
8001ec50:	e0 80 00 91 	breq	8001ed72 <app_launch+0x142>
8001ec54:	fe cc 98 0c 	sub	r12,pc,-26612
    render_update();
8001ec58:	e0 a0 06 34 	rcall	8001f8c0 <render_status>
  
    print_dbg("\r\n SD check... ");
8001ec5c:	e0 a0 06 54 	rcall	8001f904 <render_update>
    while (!sd_mmc_spi_mem_check()) {
8001ec60:	fe cc 97 f4 	sub	r12,pc,-26636
8001ec64:	fe b0 a1 9c 	rcall	80012f9c <print_dbg>
      waitForCard++;
    }
    print_dbg("\r\nfound SD card. ");
8001ec68:	fe b0 aa 06 	rcall	80014074 <sd_mmc_spi_mem_check>

    render_status("found sdcard.. reading DSP...");
8001ec6c:	cf e0       	breq	8001ec68 <app_launch+0x38>
8001ec6e:	fe cc 97 f2 	sub	r12,pc,-26638
    render_update();
8001ec72:	fe b0 a1 95 	rcall	80012f9c <print_dbg>

    // search for our dsp and load it
    // return success (0 == fail)
    if( files_search_dsp() ) {
8001ec76:	fe cc 97 e6 	sub	r12,pc,-26650
8001ec7a:	e0 a0 06 23 	rcall	8001f8c0 <render_status>
    render_update();
    // reboot DSP from RAM
    bfin_load_buf();
  }

  render_status("waiting for bfin init...      ");
8001ec7e:	e0 a0 06 43 	rcall	8001f904 <render_update>
8001ec82:	cc 3c       	rcall	8001ee08 <files_search_dsp>
  render_update();
8001ec84:	e0 80 00 92 	breq	8001eda8 <app_launch+0x178>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001ec88:	fe cc 97 a4 	sub	r12,pc,-26716
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001ec8c:	e0 a0 06 1a 	rcall	8001f8c0 <render_status>
8001ec90:	e0 a0 06 3a 	rcall	8001f904 <render_update>
8001ec94:	e1 b7 00 42 	mfsr	r7,0x108
8001ec98:	e0 68 03 e8 	mov	r8,1000
8001ec9c:	30 09       	mov	r9,0
8001ec9e:	e0 6a 17 e7 	mov	r10,6119
8001eca2:	ea 1a 5d e8 	orh	r10,0x5de8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001eca6:	30 fb       	mov	r11,15
8001eca8:	e0 a0 20 3b 	rcall	80022d1e <__avr32_udiv64>
8001ecac:	ee 0a 00 0a 	add	r10,r7,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001ecb0:	e1 b8 00 42 	mfsr	r8,0x108
8001ecb4:	14 37       	cp.w	r7,r10
8001ecb6:	e0 8b 00 48 	brhi	8001ed46 <app_launch+0x116>

  // this is retarded, we need the GPIO for bfin to signal when init done
  delay_ms(1000);

  // report parameters
  render_status("reporting bfin params...       ");
8001ecba:	10 37       	cp.w	r7,r8
8001ecbc:	e0 8b 00 04 	brhi	8001ecc4 <app_launch+0x94>
  render_update();
8001ecc0:	10 3a       	cp.w	r10,r8
  if( ctl_report_params() ) {
8001ecc2:	c5 22       	brcc	8001ed66 <app_launch+0x136>
8001ecc4:	fe cc 97 60 	sub	r12,pc,-26784
8001ecc8:	e0 a0 05 fc 	rcall	8001f8c0 <render_status>
    render_status("param report failed!           ");
    render_update();
    return 0;
  }

  render_status("setting initial parameters...  ");
8001eccc:	e0 a0 06 1c 	rcall	8001f904 <render_update>
  render_update();
8001ecd0:	cb 0d       	rcall	8001f030 <ctl_report_params>
8001ecd2:	18 97       	mov	r7,r12

  ctl_init_params();
8001ecd4:	c6 00       	breq	8001ed94 <app_launch+0x164>
8001ecd6:	fe cc 97 b2 	sub	r12,pc,-26702

  render_status("initializing input scalers...");
8001ecda:	e0 a0 05 f3 	rcall	8001f8c0 <render_status>
  render_update();
8001ecde:	e0 a0 06 13 	rcall	8001f904 <render_update>
  
  inputs_init();
8001ece2:	c9 5d       	rcall	8001f00c <ctl_init_params>
8001ece4:	fe cc 97 a0 	sub	r12,pc,-26720
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001ece8:	e0 a0 05 ec 	rcall	8001f8c0 <render_status>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001ecec:	e0 a0 06 0c 	rcall	8001f904 <render_update>
8001ecf0:	e0 a0 02 62 	rcall	8001f1b4 <inputs_init>
8001ecf4:	e1 b7 00 42 	mfsr	r7,0x108
8001ecf8:	e0 68 03 e8 	mov	r8,1000
8001ecfc:	30 09       	mov	r9,0
8001ecfe:	e0 6a 9d e7 	mov	r10,40423
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ed02:	ea 1a 4e ad 	orh	r10,0x4ead
8001ed06:	30 0b       	mov	r11,0
8001ed08:	e0 a0 20 0b 	rcall	80022d1e <__avr32_udiv64>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001ed0c:	ee 0a 00 0a 	add	r10,r7,r10
8001ed10:	e1 b8 00 42 	mfsr	r8,0x108
8001ed14:	14 37       	cp.w	r7,r10

  delay_ms(20);

  // enable audio
  render_status("run                       ");
8001ed16:	e0 8b 00 20 	brhi	8001ed56 <app_launch+0x126>
8001ed1a:	10 37       	cp.w	r7,r8
  render_update();
8001ed1c:	e0 8b 00 04 	brhi	8001ed24 <app_launch+0xf4>

  bfin_enable();
8001ed20:	10 3a       	cp.w	r10,r8
8001ed22:	c2 52       	brcc	8001ed6c <app_launch+0x13c>

  render_startup();
8001ed24:	fe cc 97 a0 	sub	r12,pc,-26720
  render_update();
8001ed28:	e0 a0 05 cc 	rcall	8001f8c0 <render_status>
8001ed2c:	e0 a0 05 ec 	rcall	8001f904 <render_update>
8001ed30:	fe b0 bd da 	rcall	800168e4 <bfin_enable>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ed34:	e0 a0 05 b0 	rcall	8001f894 <render_startup>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001ed38:	e0 a0 05 e6 	rcall	8001f904 <render_update>
8001ed3c:	2f fd       	sub	sp,-4
8001ed3e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ed42:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001ed46:	10 37       	cp.w	r7,r8
8001ed48:	fe 98 ff fd 	brls	8001ed42 <app_launch+0x112>
8001ed4c:	10 3a       	cp.w	r10,r8
8001ed4e:	cb b3       	brcs	8001ecc4 <app_launch+0x94>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001ed50:	cf 9b       	rjmp	8001ed42 <app_launch+0x112>
8001ed52:	e1 b8 00 42 	mfsr	r8,0x108
8001ed56:	10 37       	cp.w	r7,r8
8001ed58:	fe 98 ff fd 	brls	8001ed52 <app_launch+0x122>
8001ed5c:	10 3a       	cp.w	r10,r8
8001ed5e:	ce 33       	brcs	8001ed24 <app_launch+0xf4>
8001ed60:	e1 b8 00 42 	mfsr	r8,0x108

  } else {

    // firstrun pattern was set, so there should be a blackfin executable in flash.
    // read from flash to RAM
    render_status("loading flash to RAM...");
8001ed64:	cf 9b       	rjmp	8001ed56 <app_launch+0x126>
8001ed66:	e1 b8 00 42 	mfsr	r8,0x108
    render_update();
8001ed6a:	ca 8b       	rjmp	8001ecba <app_launch+0x8a>
    flash_read_ldr();
8001ed6c:	e1 b8 00 42 	mfsr	r8,0x108
    
    render_status( "booting DSP from flash...");
8001ed70:	cd 5b       	rjmp	8001ed1a <app_launch+0xea>
8001ed72:	fe cc 98 c2 	sub	r12,pc,-26430
    render_update();
8001ed76:	e0 a0 05 a5 	rcall	8001f8c0 <render_status>
    // reboot DSP from RAM
    bfin_load_buf();
8001ed7a:	e0 a0 05 c5 	rcall	8001f904 <render_update>
8001ed7e:	fe b0 c5 47 	rcall	8001780c <flash_read_ldr>
  render_status("reporting bfin params...       ");
  render_update();
  if( ctl_report_params() ) {
    ;;
  } else {
    render_status("param report failed!           ");
8001ed82:	fe cc 98 ba 	sub	r12,pc,-26438
    render_update();
8001ed86:	e0 a0 05 9d 	rcall	8001f8c0 <render_status>
8001ed8a:	e0 a0 05 bd 	rcall	8001f904 <render_update>

  render_startup();
  render_update();
  
  return 1;
}
8001ed8e:	fe b0 c1 ef 	rcall	8001716c <bfin_load_buf>
    // search for our dsp and load it
    // return success (0 == fail)
    if( files_search_dsp() ) {
      ;;
    } else {
      screen_clear();
8001ed92:	c7 bb       	rjmp	8001ec88 <app_launch+0x58>
8001ed94:	fe cc 98 90 	sub	r12,pc,-26480
8001ed98:	e0 a0 05 94 	rcall	8001f8c0 <render_status>

  render_startup();
  render_update();
  
  return 1;
}
8001ed9c:	e0 a0 05 b4 	rcall	8001f904 <render_update>
8001eda0:	0e 9c       	mov	r12,r7
8001eda2:	2f fd       	sub	sp,-4
8001eda4:	e3 cd 80 80 	ldm	sp++,r7,pc
8001eda8:	50 0c       	stdsp	sp[0x0],r12
8001edaa:	fe b0 d3 9b 	rcall	800194e0 <screen_clear>
8001edae:	40 0c       	lddsp	r12,sp[0x0]
8001edb0:	2f fd       	sub	sp,-4
8001edb2:	e3 cd 80 80 	ldm	sp++,r7,pc
8001edb6:	d7 03       	nop

8001edb8 <app_init>:
8001edb8:	d4 01       	pushm	lr
8001edba:	fe c9 fe e2 	sub	r9,pc,-286
8001edbe:	e0 68 32 1c 	mov	r8,12828
8001edc2:	91 09       	st.w	r8[0x0],r9
8001edc4:	e0 a0 06 20 	rcall	8001fa04 <render_init>
8001edc8:	d8 02       	popm	pc
8001edca:	d7 03       	nop

8001edcc <init_app_timers>:
/*   } */
/* } */


//====== external
void init_app_timers(void) {
8001edcc:	d4 01       	pushm	lr
  set_timer(&screenTimer,        eScreenTimerTag,        20,  &screen_timer_callback,  1);
8001edce:	30 18       	mov	r8,1
8001edd0:	fe c9 ff d0 	sub	r9,pc,-48
8001edd4:	31 4a       	mov	r10,20
8001edd6:	30 2b       	mov	r11,2
8001edd8:	e0 6c 2a 0c 	mov	r12,10764
  //  set_timer(&adcTimer,           eAdcTimerTag,           5,   &adc_timer_callback,     1);
  //  set_timer(&monomePollTimer,    eMonomePollTimerTag,    20,  &monome_poll_timer_callback,    1);
  //  set_timer(&monomeRefreshTimer, eMonomeRefreshTimerTag, 20,  &monome_refresh_timer_callback, 1);
  //  set_timer(&midiPollTimer,      eMidiPollTimerTag,      5,  &midi_poll_timer_callback, 1);
  set_timer(&metroTimer,        eMetroTimerTag,        100,  &metro_timer_callback,  1);
8001eddc:	fe b0 da b0 	rcall	8001a33c <set_timer>
8001ede0:	30 18       	mov	r8,1
8001ede2:	fe c9 ff ee 	sub	r9,pc,-18
8001ede6:	36 4a       	mov	r10,100
8001ede8:	30 3b       	mov	r11,3

}
8001edea:	e0 6c 2a 20 	mov	r12,10784
8001edee:	fe b0 da a7 	rcall	8001a33c <set_timer>
8001edf2:	d8 02       	popm	pc

8001edf4 <metro_timer_callback>:
8001edf4:	d4 01       	pushm	lr
8001edf6:	fe cc 98 56 	sub	r12,pc,-26538
8001edfa:	fe b0 a0 d1 	rcall	80012f9c <print_dbg>
8001edfe:	d8 02       	popm	pc

8001ee00 <screen_timer_callback>:
}

// metronome timer callback
static void metro_timer_callback(int tag) {
  print_dbg(">");
}
8001ee00:	d4 01       	pushm	lr
8001ee02:	e0 a0 05 81 	rcall	8001f904 <render_update>
8001ee06:	d8 02       	popm	pc

8001ee08 <files_search_dsp>:
    n++;
    dst++;
  }
}

u8 files_search_dsp(void) {
8001ee08:	eb cd 40 f8 	pushm	r3-r7,lr
  void* fp;
  //  FL_DIR dirstat;
  u32 size;
  // open file pointer
  print_dbg("\r\n opening dsp file at path: ");
8001ee0c:	fe cc 98 68 	sub	r12,pc,-26520
8001ee10:	fe b0 a0 c6 	rcall	80012f9c <print_dbg>
  print_dbg(LDR_PATH);
8001ee14:	fe cc 98 50 	sub	r12,pc,-26544

  // we don't want to be handling UI interrupts while working with the filesystem
  app_pause();
8001ee18:	fe b0 a0 c2 	rcall	80012f9c <print_dbg>

  fp = fl_fopen(LDR_PATH, "r");
8001ee1c:	fe b0 bc e4 	rcall	800167e4 <app_pause>
8001ee20:	fe cb 9d 44 	sub	r11,pc,-25276
8001ee24:	fe cc 98 60 	sub	r12,pc,-26528
  if( fp != NULL) {
    size = ((FL_FILE*)(fp))->filelength;
8001ee28:	fe b0 ed 44 	rcall	8001c8b0 <fl_fopen>
    print_dbg("\r\n opened file, size: ");
8001ee2c:	18 95       	mov	r5,r12
8001ee2e:	c4 c0       	breq	8001eec6 <files_search_dsp+0xbe>
    print_dbg_ulong(size);
8001ee30:	78 34       	ld.w	r4,r12[0xc]
8001ee32:	fe cc 98 5a 	sub	r12,pc,-26534
    print_dbg(" ; pointer: ");
8001ee36:	fe b0 a0 b3 	rcall	80012f9c <print_dbg>
8001ee3a:	08 9c       	mov	r12,r4
    print_dbg_hex((u32)fp);
8001ee3c:	fe b0 a0 b6 	rcall	80012fa8 <print_dbg_ulong>
8001ee40:	fe cc 98 50 	sub	r12,pc,-26544

    render_status("loading sdcard -> RAM...     ");
8001ee44:	fe b0 a0 ac 	rcall	80012f9c <print_dbg>
    render_update();
8001ee48:	0a 9c       	mov	r12,r5
8001ee4a:	fe b0 a0 d1 	rcall	80012fec <print_dbg_hex>

    // read .ldr data to RAM buffer
    //    fl_fread((void*)bfinLdrData, 1, size, fp);
    fake_fread((void*)bfinLdrData, size, fp);
8001ee4e:	fe cc 98 4e 	sub	r12,pc,-26546

// fread: no size arg
static void fake_fread(volatile u8* dst, u32 size, void* fp) {
  u32 n = 0;
  //  print_dbg("\r\n\r\n read: \r\n");
  while(n < size) {
8001ee52:	e0 a0 05 37 	rcall	8001f8c0 <render_status>
    n++;
    dst++;
  }
}

u8 files_search_dsp(void) {
8001ee56:	e0 a0 05 57 	rcall	8001f904 <render_update>
// fread: no size arg
static void fake_fread(volatile u8* dst, u32 size, void* fp) {
  u32 n = 0;
  //  print_dbg("\r\n\r\n read: \r\n");
  while(n < size) {
    *dst = fl_fgetc(fp);
8001ee5a:	e0 68 31 08 	mov	r8,12552
8001ee5e:	70 03       	ld.w	r3,r8[0x0]
8001ee60:	58 04       	cp.w	r4,0
    /* print_dbg_ulong(n); */
    /* print_dbg(","); */
    /* print_dbg_hex( ((u32)dst) & 0xff ); */
    /* print_dbg(" \r\n"); */
    n++;
8001ee62:	c0 c0       	breq	8001ee7a <files_search_dsp+0x72>

// fread: no size arg
static void fake_fread(volatile u8* dst, u32 size, void* fp) {
  u32 n = 0;
  //  print_dbg("\r\n\r\n read: \r\n");
  while(n < size) {
8001ee64:	30 07       	mov	r7,0
8001ee66:	e6 07 00 06 	add	r6,r3,r7

    // read .ldr data to RAM buffer
    //    fl_fread((void*)bfinLdrData, 1, size, fp);
    fake_fread((void*)bfinLdrData, size, fp);

    fl_fclose(fp);
8001ee6a:	0a 9c       	mov	r12,r5
8001ee6c:	fe b0 eb 12 	rcall	8001c490 <fl_fgetc>

    print_dbg("\r\n finished reading .ldr file to RAM");
8001ee70:	ac 8c       	st.b	r6[0x0],r12
8001ee72:	2f f7       	sub	r7,-1
8001ee74:	0e 34       	cp.w	r4,r7
    bfinLdrSize = size;
8001ee76:	fe 9b ff f8 	brhi	8001ee66 <files_search_dsp+0x5e>
8001ee7a:	0a 9c       	mov	r12,r5


    render_status("writing RAM -> flash...     ");
8001ee7c:	fe b0 eb 18 	rcall	8001c4ac <fl_fclose>
    render_update();
8001ee80:	fe cc 98 60 	sub	r12,pc,-26528

    // write buf to flash
    flash_write_ldr();
8001ee84:	fe b0 a0 8c 	rcall	80012f9c <print_dbg>
    print_dbg("\r\n finished writing .ldr file to flash");
8001ee88:	e0 68 0b 90 	mov	r8,2960
8001ee8c:	fe cc 98 44 	sub	r12,pc,-26556
    // reboot the DSP from RAM
    print_dbg("\r\n booting DSP from RAM");
8001ee90:	91 04       	st.w	r8[0x0],r4
8001ee92:	e0 a0 05 17 	rcall	8001f8c0 <render_status>


    render_status("booting DSP from RAM...     ");
8001ee96:	e0 a0 05 37 	rcall	8001f904 <render_update>
    render_update();
8001ee9a:	fe b0 c4 5d 	rcall	80017754 <flash_write_ldr>

    bfin_load_buf();
8001ee9e:	fe cc 98 36 	sub	r12,pc,-26570
    app_resume();
8001eea2:	fe b0 a0 7d 	rcall	80012f9c <print_dbg>
8001eea6:	fe cc 98 16 	sub	r12,pc,-26602

    return 1; // ok
  } else {
    print_dbg("\r\n encountered an error opening .ldr file.");
8001eeaa:	fe b0 a0 79 	rcall	80012f9c <print_dbg>
8001eeae:	fe cc 98 06 	sub	r12,pc,-26618

    app_resume();
8001eeb2:	e0 a0 05 07 	rcall	8001f8c0 <render_status>
    return 0; // error opening
  }
}
8001eeb6:	e0 a0 05 27 	rcall	8001f904 <render_update>
8001eeba:	fe b0 c1 59 	rcall	8001716c <bfin_load_buf>
8001eebe:	fe b0 bc 8f 	rcall	800167dc <app_resume>
8001eec2:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
8001eec6:	fe cc 97 fe 	sub	r12,pc,-26626
8001eeca:	fe b0 a0 69 	rcall	80012f9c <print_dbg>
8001eece:	fe b0 bc 87 	rcall	800167dc <app_resume>
8001eed2:	0a 9c       	mov	r12,r5
8001eed4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

8001eed8 <flry_handler>:

//---------------------------------------
//---- external funcs

// handle key presses
extern void flry_handler(event_t* ev) {
8001eed8:	d4 01       	pushm	lr
    switch (ev->eventType) {
8001eeda:	78 08       	ld.w	r8,r12[0x0]
8001eedc:	58 b8       	cp.w	r8,11
8001eede:	c5 e0       	breq	8001ef9a <flry_handler+0xc2>
8001eee0:	e0 88 00 07 	brls	8001eeee <flry_handler+0x16>
8001eee4:	58 c8       	cp.w	r8,12
8001eee6:	c2 80       	breq	8001ef36 <flry_handler+0x5e>
8001eee8:	58 d8       	cp.w	r8,13
8001eeea:	c1 f0       	breq	8001ef28 <flry_handler+0x50>
8001eeec:	d8 02       	popm	pc
8001eeee:	58 98       	cp.w	r8,9
8001eef0:	c3 c0       	breq	8001ef68 <flry_handler+0x90>
8001eef2:	58 a8       	cp.w	r8,10
8001eef4:	cf c1       	brne	8001eeec <flry_handler+0x14>
    
  case kEventEncoder0:
    ctl_inc_dac(0, scale_knob_value(ev->eventData));
    break;
  case kEventEncoder1:
    ctl_inc_dac(1, scale_knob_value(ev->eventData));
8001eef6:	78 1b       	ld.w	r11,r12[0x4]
/*   return ret; */
/* } */

// return param increment given encoder ticks (knob acceleration)
static fix16 scale_knob_value(const s32 v) {
  s32 vabs = BIT_ABS(v);
8001eef8:	16 98       	mov	r8,r11
8001eefa:	5c 48       	abs	r8
  //  print_dbg("\r\n knob acc, val: ");
  //  print_dbg_hex((u32)v);
  if(vabs < 4) {
8001eefc:	58 38       	cp.w	r8,3
8001eefe:	e0 8a 00 12 	brle	8001ef22 <flry_handler+0x4a>
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 8) {
8001ef02:	58 78       	cp.w	r8,7
8001ef04:	e0 8a 00 72 	brle	8001efe8 <flry_handler+0x110>
    //    print_dbg("\r\n knob acc 1");
    return v << 2;
  } else if (vabs < 12) {
8001ef08:	58 b8       	cp.w	r8,11
8001ef0a:	e0 8a 00 67 	brle	8001efd8 <flry_handler+0x100>
    //    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
8001ef0e:	59 28       	cp.w	r8,18
8001ef10:	e0 8a 00 72 	brle	8001eff4 <flry_handler+0x11c>
    //    print_dbg("\r\n knob acc 3");
    return v << 5;
  } else if (vabs < 25) {
8001ef14:	59 88       	cp.w	r8,24
8001ef16:	e0 8a 00 73 	brle	8001effc <flry_handler+0x124>
    //    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
8001ef1a:	59 f8       	cp.w	r8,31
8001ef1c:	e0 8a 00 70 	brle	8001effc <flry_handler+0x124>
    //    print_dbg("\r\n knob acc 4");
    return v << 6;
  } else {
    //    print_dbg("\r\n knob acc max");
    return v << 12;
8001ef20:	ad 6b       	lsl	r11,0xc
    
  case kEventEncoder0:
    ctl_inc_dac(0, scale_knob_value(ev->eventData));
    break;
  case kEventEncoder1:
    ctl_inc_dac(1, scale_knob_value(ev->eventData));
8001ef22:	30 1c       	mov	r12,1
8001ef24:	c2 2d       	rcall	8001f168 <ctl_inc_dac>
8001ef26:	d8 02       	popm	pc
    break;
8001ef28:	78 18       	ld.w	r8,r12[0x4]
// handle key presses
extern void flry_handler(event_t* ev) {
    switch (ev->eventType) {
  case kEventSwitch0:
    // display
    render_sw_on(3, ev->eventData > 0);
8001ef2a:	30 3c       	mov	r12,3
8001ef2c:	58 08       	cp.w	r8,0
8001ef2e:	5f 9b       	srgt	r11
8001ef30:	e0 a0 04 76 	rcall	8001f81c <render_sw_on>
8001ef34:	d8 02       	popm	pc
    break;
8001ef36:	78 1b       	ld.w	r11,r12[0x4]
    break;
  case kEventEncoder2:
    ctl_inc_dac(2, scale_knob_value(ev->eventData));
    break;
  case kEventEncoder3:
    ctl_inc_dac(3, scale_knob_value(ev->eventData));
8001ef38:	16 98       	mov	r8,r11
/*   return ret; */
/* } */

// return param increment given encoder ticks (knob acceleration)
static fix16 scale_knob_value(const s32 v) {
  s32 vabs = BIT_ABS(v);
8001ef3a:	5c 48       	abs	r8
8001ef3c:	58 38       	cp.w	r8,3
  //  print_dbg("\r\n knob acc, val: ");
  //  print_dbg_hex((u32)v);
  if(vabs < 4) {
8001ef3e:	e0 8a 00 12 	brle	8001ef62 <flry_handler+0x8a>
8001ef42:	58 78       	cp.w	r8,7
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 8) {
8001ef44:	e0 8a 00 4c 	brle	8001efdc <flry_handler+0x104>
8001ef48:	58 b8       	cp.w	r8,11
    //    print_dbg("\r\n knob acc 1");
    return v << 2;
  } else if (vabs < 12) {
8001ef4a:	e0 8a 00 41 	brle	8001efcc <flry_handler+0xf4>
8001ef4e:	59 28       	cp.w	r8,18
    //    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
8001ef50:	e0 8a 00 50 	brle	8001eff0 <flry_handler+0x118>
8001ef54:	59 88       	cp.w	r8,24
    //    print_dbg("\r\n knob acc 3");
    return v << 5;
  } else if (vabs < 25) {
8001ef56:	e0 8a 00 59 	brle	8001f008 <flry_handler+0x130>
8001ef5a:	59 f8       	cp.w	r8,31
    //    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
8001ef5c:	e0 8a 00 56 	brle	8001f008 <flry_handler+0x130>
8001ef60:	ad 6b       	lsl	r11,0xc
    //    print_dbg("\r\n knob acc 4");
    return v << 6;
  } else {
    //    print_dbg("\r\n knob acc max");
    return v << 12;
8001ef62:	30 3c       	mov	r12,3
    break;
  case kEventEncoder2:
    ctl_inc_dac(2, scale_knob_value(ev->eventData));
    break;
  case kEventEncoder3:
    ctl_inc_dac(3, scale_knob_value(ev->eventData));
8001ef64:	c0 2d       	rcall	8001f168 <ctl_inc_dac>
8001ef66:	d8 02       	popm	pc
8001ef68:	78 1b       	ld.w	r11,r12[0x4]
8001ef6a:	16 98       	mov	r8,r11
    
  case kEventSwitch7:
    break;
    
  case kEventEncoder0:
    ctl_inc_dac(0, scale_knob_value(ev->eventData));
8001ef6c:	5c 48       	abs	r8
/*   return ret; */
/* } */

// return param increment given encoder ticks (knob acceleration)
static fix16 scale_knob_value(const s32 v) {
  s32 vabs = BIT_ABS(v);
8001ef6e:	58 38       	cp.w	r8,3
8001ef70:	e0 8a 00 12 	brle	8001ef94 <flry_handler+0xbc>
  //  print_dbg("\r\n knob acc, val: ");
  //  print_dbg_hex((u32)v);
  if(vabs < 4) {
8001ef74:	58 78       	cp.w	r8,7
8001ef76:	e0 8a 00 37 	brle	8001efe4 <flry_handler+0x10c>
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 8) {
8001ef7a:	58 b8       	cp.w	r8,11
8001ef7c:	e0 8a 00 2c 	brle	8001efd4 <flry_handler+0xfc>
    //    print_dbg("\r\n knob acc 1");
    return v << 2;
  } else if (vabs < 12) {
8001ef80:	59 28       	cp.w	r8,18
8001ef82:	e0 8a 00 3b 	brle	8001eff8 <flry_handler+0x120>
    //    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
8001ef86:	59 88       	cp.w	r8,24
8001ef88:	e0 8a 00 3c 	brle	8001f000 <flry_handler+0x128>
    //    print_dbg("\r\n knob acc 3");
    return v << 5;
  } else if (vabs < 25) {
8001ef8c:	59 f8       	cp.w	r8,31
8001ef8e:	e0 8a 00 39 	brle	8001f000 <flry_handler+0x128>
    //    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
8001ef92:	ad 6b       	lsl	r11,0xc
8001ef94:	30 0c       	mov	r12,0
    //    print_dbg("\r\n knob acc 4");
    return v << 6;
  } else {
    //    print_dbg("\r\n knob acc max");
    return v << 12;
8001ef96:	ce 9c       	rcall	8001f168 <ctl_inc_dac>
    
  case kEventSwitch7:
    break;
    
  case kEventEncoder0:
    ctl_inc_dac(0, scale_knob_value(ev->eventData));
8001ef98:	d8 02       	popm	pc
8001ef9a:	78 1b       	ld.w	r11,r12[0x4]
8001ef9c:	16 98       	mov	r8,r11
    break;
8001ef9e:	5c 48       	abs	r8
  case kEventEncoder1:
    ctl_inc_dac(1, scale_knob_value(ev->eventData));
    break;
  case kEventEncoder2:
    ctl_inc_dac(2, scale_knob_value(ev->eventData));
8001efa0:	58 38       	cp.w	r8,3
/*   return ret; */
/* } */

// return param increment given encoder ticks (knob acceleration)
static fix16 scale_knob_value(const s32 v) {
  s32 vabs = BIT_ABS(v);
8001efa2:	e0 8a 00 12 	brle	8001efc6 <flry_handler+0xee>
  //  print_dbg("\r\n knob acc, val: ");
  //  print_dbg_hex((u32)v);
  if(vabs < 4) {
8001efa6:	58 78       	cp.w	r8,7
8001efa8:	e0 8a 00 1c 	brle	8001efe0 <flry_handler+0x108>
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 8) {
8001efac:	58 b8       	cp.w	r8,11
8001efae:	e0 8a 00 11 	brle	8001efd0 <flry_handler+0xf8>
    //    print_dbg("\r\n knob acc 1");
    return v << 2;
  } else if (vabs < 12) {
8001efb2:	59 28       	cp.w	r8,18
8001efb4:	e0 8a 00 1c 	brle	8001efec <flry_handler+0x114>
    //    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
8001efb8:	59 88       	cp.w	r8,24
8001efba:	e0 8a 00 25 	brle	8001f004 <flry_handler+0x12c>
    //    print_dbg("\r\n knob acc 3");
    return v << 5;
  } else if (vabs < 25) {
8001efbe:	59 f8       	cp.w	r8,31
8001efc0:	e0 8a 00 22 	brle	8001f004 <flry_handler+0x12c>
    //    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
8001efc4:	ad 6b       	lsl	r11,0xc
8001efc6:	30 2c       	mov	r12,2
8001efc8:	cd 0c       	rcall	8001f168 <ctl_inc_dac>
    //    print_dbg("\r\n knob acc 4");
    return v << 6;
  } else {
    //    print_dbg("\r\n knob acc max");
    return v << 12;
8001efca:	d8 02       	popm	pc
    break;
  case kEventEncoder1:
    ctl_inc_dac(1, scale_knob_value(ev->eventData));
    break;
  case kEventEncoder2:
    ctl_inc_dac(2, scale_knob_value(ev->eventData));
8001efcc:	a5 6b       	lsl	r11,0x4
8001efce:	cc ab       	rjmp	8001ef62 <flry_handler+0x8a>
8001efd0:	a5 6b       	lsl	r11,0x4
    break;
8001efd2:	cf ab       	rjmp	8001efc6 <flry_handler+0xee>
  } else if (vabs < 8) {
    //    print_dbg("\r\n knob acc 1");
    return v << 2;
  } else if (vabs < 12) {
    //    print_dbg("\r\n knob acc 2");
    return v << 4;
8001efd4:	a5 6b       	lsl	r11,0x4
8001efd6:	cd fb       	rjmp	8001ef94 <flry_handler+0xbc>
8001efd8:	a5 6b       	lsl	r11,0x4
8001efda:	ca 4b       	rjmp	8001ef22 <flry_handler+0x4a>
8001efdc:	a3 6b       	lsl	r11,0x2
8001efde:	cc 2b       	rjmp	8001ef62 <flry_handler+0x8a>
8001efe0:	a3 6b       	lsl	r11,0x2
8001efe2:	cf 2b       	rjmp	8001efc6 <flry_handler+0xee>
  if(vabs < 4) {
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 8) {
    //    print_dbg("\r\n knob acc 1");
    return v << 2;
8001efe4:	a3 6b       	lsl	r11,0x2
8001efe6:	cd 7b       	rjmp	8001ef94 <flry_handler+0xbc>
8001efe8:	a3 6b       	lsl	r11,0x2
8001efea:	c9 cb       	rjmp	8001ef22 <flry_handler+0x4a>
8001efec:	a5 7b       	lsl	r11,0x5
8001efee:	ce cb       	rjmp	8001efc6 <flry_handler+0xee>
8001eff0:	a5 7b       	lsl	r11,0x5
8001eff2:	cb 8b       	rjmp	8001ef62 <flry_handler+0x8a>
  } else if (vabs < 12) {
    //    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
    //    print_dbg("\r\n knob acc 3");
    return v << 5;
8001eff4:	a5 7b       	lsl	r11,0x5
8001eff6:	c9 6b       	rjmp	8001ef22 <flry_handler+0x4a>
8001eff8:	a5 7b       	lsl	r11,0x5
8001effa:	cc db       	rjmp	8001ef94 <flry_handler+0xbc>
8001effc:	a7 6b       	lsl	r11,0x6
8001effe:	c9 2b       	rjmp	8001ef22 <flry_handler+0x4a>
8001f000:	a7 6b       	lsl	r11,0x6
8001f002:	cc 9b       	rjmp	8001ef94 <flry_handler+0xbc>
  } else if (vabs < 25) {
    //    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
    //    print_dbg("\r\n knob acc 4");
    return v << 6;
8001f004:	a7 6b       	lsl	r11,0x6
8001f006:	ce 0b       	rjmp	8001efc6 <flry_handler+0xee>
8001f008:	a7 6b       	lsl	r11,0x6
8001f00a:	ca cb       	rjmp	8001ef62 <flry_handler+0x8a>

8001f00c <ctl_init_params>:
    return 1;
  }
}

// set initial parameters
void ctl_init_params(void) {
8001f00c:	d4 01       	pushm	lr
  // dacs at 0
  ctl_param_change(eParam_dac0, 0);
8001f00e:	30 0b       	mov	r11,0
8001f010:	16 9c       	mov	r12,r11
8001f012:	fe b0 c1 91 	rcall	80017334 <ctl_param_change>
  ctl_param_change(eParam_dac1, 0);
8001f016:	30 0b       	mov	r11,0
8001f018:	30 1c       	mov	r12,1
8001f01a:	fe b0 c1 8d 	rcall	80017334 <ctl_param_change>
  ctl_param_change(eParam_dac2, 0);
8001f01e:	30 0b       	mov	r11,0
8001f020:	30 2c       	mov	r12,2
8001f022:	fe b0 c1 89 	rcall	80017334 <ctl_param_change>
  ctl_param_change(eParam_dac3, 0);
8001f026:	30 0b       	mov	r11,0
8001f028:	30 3c       	mov	r12,3
8001f02a:	fe b0 c1 85 	rcall	80017334 <ctl_param_change>

}
8001f02e:	d8 02       	popm	pc

8001f030 <ctl_report_params>:
8001f030:	eb cd 40 c0 	pushm	r6-r7,lr

//-------------------------------------
//------ extern functions

// get parameter report from DSP
u8 ctl_report_params(void) {
8001f034:	21 ad       	sub	sp,104
  volatile char buf[64];
  volatile ParamDesc pdesc;
  u32 numParams;
  u8 i;
 
  bfin_get_num_params(&numParams);
8001f036:	fa cc ff 9c 	sub	r12,sp,-100
8001f03a:	fe b0 bf e9 	rcall	8001700c <bfin_get_num_params>
  print_dbg("\r\nnumparams: ");
8001f03e:	fe cc 99 4a 	sub	r12,pc,-26294
8001f042:	fe b0 9f ad 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(numParams);
8001f046:	41 9c       	lddsp	r12,sp[0x64]
8001f048:	fe b0 9f b0 	rcall	80012fa8 <print_dbg_ulong>

  if(numParams == 255) {
8001f04c:	41 97       	lddsp	r7,sp[0x64]
8001f04e:	e0 47 00 ff 	cp.w	r7,255
8001f052:	e0 80 00 85 	breq	8001f15c <ctl_report_params+0x12c>
    print_dbg("\r\n report_params fail (too many)");
    return 0;
  }

  if(numParams > 0) {
8001f056:	58 07       	cp.w	r7,0
8001f058:	c7 a0       	breq	8001f14c <ctl_report_params+0x11c>
8001f05a:	fa c6 ff bd 	sub	r6,sp,-67
    for(i=0; i<numParams; i++) {
      bfin_get_param_desc(i, &pdesc);
8001f05e:	30 07       	mov	r7,0
8001f060:	0c 9b       	mov	r11,r6
8001f062:	0e 9c       	mov	r12,r7
8001f064:	fe b0 bc 88 	rcall	80016974 <bfin_get_param_desc>
      
      print_dbg("\r\n got pdesc : ");
8001f068:	fe cc 99 40 	sub	r12,pc,-26304
      print_dbg((const char* )pdesc.label);
8001f06c:	fe b0 9f 98 	rcall	80012f9c <print_dbg>
8001f070:	0c 9c       	mov	r12,r6
    print_dbg("\r\n report_params fail (too many)");
    return 0;
  }

  if(numParams > 0) {
    for(i=0; i<numParams; i++) {
8001f072:	fe b0 9f 95 	rcall	80012f9c <print_dbg>
8001f076:	41 98       	lddsp	r8,sp[0x64]
8001f078:	2f f7       	sub	r7,-1
8001f07a:	5c 57       	castu.b	r7
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001f07c:	10 37       	cp.w	r7,r8
8001f07e:	cf 13       	brcs	8001f060 <ctl_report_params+0x30>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001f080:	e1 b7 00 42 	mfsr	r7,0x108
8001f084:	e0 68 03 e8 	mov	r8,1000
8001f088:	30 09       	mov	r9,0
8001f08a:	e0 6a 05 e7 	mov	r10,1511
8001f08e:	ea 1a 89 64 	orh	r10,0x8964
8001f092:	30 1b       	mov	r11,1
8001f094:	e0 a0 1e 45 	rcall	80022d1e <__avr32_udiv64>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001f098:	ee 0a 00 0a 	add	r10,r7,r10
8001f09c:	e1 b8 00 42 	mfsr	r8,0x108
8001f0a0:	14 37       	cp.w	r7,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001f0a2:	e0 8b 00 3a 	brhi	8001f116 <ctl_report_params+0xe6>
8001f0a6:	0e 38       	cp.w	r8,r7
8001f0a8:	c0 43       	brcs	8001f0b0 <ctl_report_params+0x80>
8001f0aa:	14 38       	cp.w	r8,r10
    return 0;
  }
  
  delay_ms(100);

  print_dbg("\r\n checking module label ");
8001f0ac:	e0 88 00 43 	brls	8001f132 <ctl_report_params+0x102>
8001f0b0:	fe cc 99 28 	sub	r12,pc,-26328
  // check module label
  bfin_get_module_name(buf);
8001f0b4:	fe b0 9f 74 	rcall	80012f9c <print_dbg>
8001f0b8:	1a 9c       	mov	r12,sp
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8001f0ba:	1a 97       	mov	r7,sp
8001f0bc:	fe b0 bc 26 	rcall	80016908 <bfin_get_module_name>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8001f0c0:	e1 b6 00 42 	mfsr	r6,0x108
8001f0c4:	e0 68 03 e8 	mov	r8,1000
8001f0c8:	30 09       	mov	r9,0
8001f0ca:	e0 6a d0 e7 	mov	r10,53479
8001f0ce:	ea 1a 27 56 	orh	r10,0x2756
8001f0d2:	30 0b       	mov	r11,0
8001f0d4:	e0 a0 1e 25 	rcall	80022d1e <__avr32_udiv64>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001f0d8:	ec 0a 00 0a 	add	r10,r6,r10
8001f0dc:	e1 b8 00 42 	mfsr	r8,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8001f0e0:	14 36       	cp.w	r6,r10
8001f0e2:	e0 8b 00 22 	brhi	8001f126 <ctl_report_params+0xf6>
8001f0e6:	10 36       	cp.w	r6,r8
8001f0e8:	e0 8b 00 04 	brhi	8001f0f0 <ctl_report_params+0xc0>

  delay_ms(10);

  print_dbg("\r\n bfin module name: ");
8001f0ec:	10 3a       	cp.w	r10,r8
8001f0ee:	c2 52       	brcc	8001f138 <ctl_report_params+0x108>
  print_dbg((const char*)buf);
8001f0f0:	fe cc 99 4c 	sub	r12,pc,-26292
8001f0f4:	fe b0 9f 54 	rcall	80012f9c <print_dbg>
  if(strcmp((const char*)buf, DSP_STRING)) {
8001f0f8:	1a 9c       	mov	r12,sp
8001f0fa:	fe b0 9f 51 	rcall	80012f9c <print_dbg>
8001f0fe:	1a 9c       	mov	r12,sp
8001f100:	fe cb 99 44 	sub	r11,pc,-26300
    print_dbg( "\r\n report_params fail (module name mismatch)" );
    return 0;
  } else {
    return 1;
  }
}
8001f104:	e0 a0 22 42 	rcall	80023588 <strcmp>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001f108:	c1 b1       	brne	8001f13e <ctl_report_params+0x10e>
8001f10a:	30 1c       	mov	r12,1
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001f10c:	2e 6d       	sub	sp,-104
8001f10e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f112:	e1 b8 00 42 	mfsr	r8,0x108
8001f116:	10 37       	cp.w	r7,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001f118:	fe 98 ff fd 	brls	8001f112 <ctl_report_params+0xe2>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8001f11c:	10 3a       	cp.w	r10,r8
8001f11e:	cc 93       	brcs	8001f0b0 <ctl_report_params+0x80>
8001f120:	cf 9b       	rjmp	8001f112 <ctl_report_params+0xe2>
8001f122:	e1 b8 00 42 	mfsr	r8,0x108
8001f126:	10 36       	cp.w	r6,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8001f128:	fe 98 ff fd 	brls	8001f122 <ctl_report_params+0xf2>
8001f12c:	10 3a       	cp.w	r10,r8
8001f12e:	ce 13       	brcs	8001f0f0 <ctl_report_params+0xc0>
8001f130:	cf 9b       	rjmp	8001f122 <ctl_report_params+0xf2>
8001f132:	e1 b8 00 42 	mfsr	r8,0x108
  delay_ms(10);

  print_dbg("\r\n bfin module name: ");
  print_dbg((const char*)buf);
  if(strcmp((const char*)buf, DSP_STRING)) {
    print_dbg( "\r\n report_params fail (module name mismatch)" );
8001f136:	cb 8b       	rjmp	8001f0a6 <ctl_report_params+0x76>
8001f138:	e1 b8 00 42 	mfsr	r8,0x108
8001f13c:	cd 5b       	rjmp	8001f0e6 <ctl_report_params+0xb6>
8001f13e:	fe cc 99 e6 	sub	r12,pc,-26138
      
      print_dbg("\r\n got pdesc : ");
      print_dbg((const char* )pdesc.label);
    }
  } else {
    print_dbg("\r\n report_params fail (none)");
8001f142:	fe b0 9f 2d 	rcall	80012f9c <print_dbg>
8001f146:	2e 6d       	sub	sp,-104
    print_dbg( "\r\n report_params fail (module name mismatch)" );
    return 0;
  } else {
    return 1;
  }
}
8001f148:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8001f14c:	fe cc 9a 14 	sub	r12,pc,-26092
  bfin_get_num_params(&numParams);
  print_dbg("\r\nnumparams: ");
  print_dbg_ulong(numParams);

  if(numParams == 255) {
    print_dbg("\r\n report_params fail (too many)");
8001f150:	fe b0 9f 26 	rcall	80012f9c <print_dbg>
8001f154:	0e 9c       	mov	r12,r7
    return 0;
8001f156:	2e 6d       	sub	sp,-104
8001f158:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f15c:	fe cc 9a 58 	sub	r12,pc,-26024
8001f160:	fe b0 9f 1e 	rcall	80012f9c <print_dbg>
8001f164:	30 0c       	mov	r12,0
8001f166:	cd 3b       	rjmp	8001f10c <ctl_report_params+0xdc>

8001f168 <ctl_inc_dac>:
8001f168:	eb cd 40 c0 	pushm	r6-r7,lr
8001f16c:	e0 68 32 e0 	mov	r8,13024
8001f170:	18 97       	mov	r7,r12
8001f172:	f0 0c 03 26 	ld.w	r6,r8[r12<<0x2]
8001f176:	f6 06 00 06 	add	r6,r11,r6
8001f17a:	e0 46 ff ff 	cp.w	r6,65535
8001f17e:	e0 89 00 07 	brgt	8001f18c <ctl_inc_dac+0x24>
8001f182:	58 06       	cp.w	r6,0
8001f184:	c1 54       	brge	8001f1ae <ctl_inc_dac+0x46>
8001f186:	58 0b       	cp.w	r11,0
8001f188:	e0 8a 00 10 	brle	8001f1a8 <ctl_inc_dac+0x40>
8001f18c:	e0 6b ff ff 	mov	r11,65535
8001f190:	16 96       	mov	r6,r11
8001f192:	f0 07 09 26 	st.w	r8[r7<<0x2],r6

// set dac value
void  ctl_set_dac(u8 ch, u16 val) {
  // param enum hack...
  dac[ch] = val;
  ctl_param_change(eParam_dac0 + ch, val);
8001f196:	0e 9c       	mov	r12,r7
8001f198:	fe b0 c0 ce 	rcall	80017334 <ctl_param_change>
  render_dac(ch, val);
8001f19c:	0c 9b       	mov	r11,r6
8001f19e:	0e 9c       	mov	r12,r7
8001f1a0:	e0 a0 03 40 	rcall	8001f820 <render_dac>
    } else {
      tmp = PARAM_DAC_MIN;
    }
  }
  ctl_set_dac(ch, tmp);
}
8001f1a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  if(tmp > PARAM_DAC_MAX) {    
    tmp = PARAM_DAC_MAX;
  }

  if(tmp < PARAM_DAC_MIN) {
    if (delta>0) { // overflow
8001f1a8:	30 0b       	mov	r11,0
8001f1aa:	16 96       	mov	r6,r11

  if(tmp > PARAM_DAC_MAX) {    
    tmp = PARAM_DAC_MAX;
  }

  if(tmp < PARAM_DAC_MIN) {
8001f1ac:	cf 3b       	rjmp	8001f192 <ctl_inc_dac+0x2a>
8001f1ae:	5c 76       	castu.h	r6
8001f1b0:	0c 9b       	mov	r11,r6
8001f1b2:	cf 0b       	rjmp	8001f192 <ctl_inc_dac+0x2a>

8001f1b4 <inputs_init>:
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f1b4:	d4 31       	pushm	r0-r7,lr
8001f1b6:	20 3d       	sub	sp,12
  // allocate memory
  tabAmp = (table*)alloc_mem(sizeof(table));
8001f1b8:	e0 6c 20 00 	mov	r12,8192
8001f1bc:	fe b0 c8 92 	rcall	800182e0 <alloc_mem>
8001f1c0:	e0 64 32 f4 	mov	r4,13044
8001f1c4:	89 0c       	st.w	r4[0x0],r12
  tabDb = (table*)alloc_mem(sizeof(table));
8001f1c6:	e0 6c 20 00 	mov	r12,8192
8001f1ca:	fe b0 c8 8b 	rcall	800182e0 <alloc_mem>
8001f1ce:	e0 61 33 00 	mov	r1,13056
8001f1d2:	83 0c       	st.w	r1[0x0],r12
  tabHz = (table*)alloc_mem(sizeof(table));
8001f1d4:	e0 6c 20 00 	mov	r12,8192
8001f1d8:	fe b0 c8 84 	rcall	800182e0 <alloc_mem>
8001f1dc:	e0 69 32 fc 	mov	r9,13052
  tabFreq = (table*)alloc_mem(sizeof(table));
8001f1e0:	30 07       	mov	r7,0
// maybe in aleph/audio
extern void inputs_init(void) {
  // allocate memory
  tabAmp = (table*)alloc_mem(sizeof(table));
  tabDb = (table*)alloc_mem(sizeof(table));
  tabHz = (table*)alloc_mem(sizeof(table));
8001f1e2:	93 0c       	st.w	r9[0x0],r12
  tabFreq = (table*)alloc_mem(sizeof(table));
8001f1e4:	e0 6c 20 00 	mov	r12,8192
8001f1e8:	fe b0 c8 7c 	rcall	800182e0 <alloc_mem>
8001f1ec:	e0 68 32 f0 	mov	r8,13040
8001f1f0:	30 15       	mov	r5,1
8001f1f2:	30 02       	mov	r2,0
8001f1f4:	30 03       	mov	r3,0
8001f1f6:	91 0c       	st.w	r8[0x0],r12
8001f1f8:	0e 96       	mov	r6,r7
8001f1fa:	c1 78       	rjmp	8001f228 <inputs_init+0x74>
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
    /// linear ramp in [0, breakDb]
    if (i == 0) {
      // zero the bottom
      tabAmp->data[i] = 0;
8001f1fc:	68 08       	ld.w	r8,r4[0x0]
8001f1fe:	91 06       	st.w	r8[0x0],r6
      // fix16 lacks '-inf' ...
      tabDb->data[i] = fix16_min;
8001f200:	fc 19 80 00 	movh	r9,0x8000
8001f204:	62 08       	ld.w	r8,r1[0x0]
    /* print_dbg(", db (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" ( "); */
    /* print_dbg_hex(tabDb->data[i]); */
    /* print_dbg(" )"); */
    f += finc;
8001f206:	04 9a       	mov	r10,r2
8001f208:	06 9b       	mov	r11,r3
    /// linear ramp in [0, breakDb]
    if (i == 0) {
      // zero the bottom
      tabAmp->data[i] = 0;
      // fix16 lacks '-inf' ...
      tabDb->data[i] = fix16_min;
8001f20a:	91 09       	st.w	r8[0x0],r9
    /* print_dbg(", db (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" ( "); */
    /* print_dbg_hex(tabDb->data[i]); */
    /* print_dbg(" )"); */
    f += finc;
8001f20c:	e0 68 10 04 	mov	r8,4100
8001f210:	ea 18 00 40 	orh	r8,0x40
8001f214:	e0 69 04 01 	mov	r9,1025
8001f218:	ea 19 3f 50 	orh	r9,0x3f50
extern void inputs_init(void) {
  // allocate memory
  tabAmp = (table*)alloc_mem(sizeof(table));
  tabDb = (table*)alloc_mem(sizeof(table));
  tabHz = (table*)alloc_mem(sizeof(table));
  tabFreq = (table*)alloc_mem(sizeof(table));
8001f21c:	2f f6       	sub	r6,-1
    /* print_dbg(", db (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" ( "); */
    /* print_dbg_hex(tabDb->data[i]); */
    /* print_dbg(" )"); */
    f += finc;
8001f21e:	e0 a0 17 8d 	rcall	80022138 <__avr32_f64_add>
extern void inputs_init(void) {
  // allocate memory
  tabAmp = (table*)alloc_mem(sizeof(table));
  tabDb = (table*)alloc_mem(sizeof(table));
  tabHz = (table*)alloc_mem(sizeof(table));
  tabFreq = (table*)alloc_mem(sizeof(table));
8001f222:	2f f5       	sub	r5,-1
    /* print_dbg(", db (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" ( "); */
    /* print_dbg_hex(tabDb->data[i]); */
    /* print_dbg(" )"); */
    f += finc;
8001f224:	14 92       	mov	r2,r10
8001f226:	16 93       	mov	r3,r11
    const double log10 = log(10.0);
  // fill amp/db tables
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
    /// linear ramp in [0, breakDb]
    if (i == 0) {
8001f228:	58 06       	cp.w	r6,0
8001f22a:	ce 90       	breq	8001f1fc <inputs_init+0x48>
      // zero the bottom
      tabAmp->data[i] = 0;
      // fix16 lacks '-inf' ...
      tabDb->data[i] = fix16_min;
    } else if(f <= ampBreak) {
8001f22c:	04 98       	mov	r8,r2
8001f22e:	06 99       	mov	r9,r3
8001f230:	e0 6a 99 9a 	mov	r10,39322
8001f234:	ea 1a 99 99 	orh	r10,0x9999
8001f238:	e0 6b 99 99 	mov	r11,39321
8001f23c:	ea 1b 3f b9 	orh	r11,0x3fb9
8001f240:	e0 a0 18 9c 	rcall	80022378 <__avr32_f64_cmp_ge>
8001f244:	c4 30       	breq	8001f2ca <inputs_init+0x116>
      tabAmp->data[i] = (s32)((double)(FR32_MAX) * f);
8001f246:	e0 69 ff ff 	mov	r9,65535
8001f24a:	ea 19 41 df 	orh	r9,0x41df
8001f24e:	fc 18 ff c0 	movh	r8,0xffc0
8001f252:	04 9a       	mov	r10,r2
8001f254:	06 9b       	mov	r11,r3
8001f256:	e0 a0 15 b7 	rcall	80021dc4 <__avr32_f64_mul>
8001f25a:	e0 a0 17 f5 	rcall	80022244 <__avr32_f64_to_s32>
8001f25e:	68 08       	ld.w	r8,r4[0x0]
      tabDb->data[i] = fix16_from_float((float)(log(f) / log10 * 20.0));
8001f260:	04 9a       	mov	r10,r2
      // zero the bottom
      tabAmp->data[i] = 0;
      // fix16 lacks '-inf' ...
      tabDb->data[i] = fix16_min;
    } else if(f <= ampBreak) {
      tabAmp->data[i] = (s32)((double)(FR32_MAX) * f);
8001f262:	f0 06 09 2c 	st.w	r8[r6<<0x2],r12
      tabDb->data[i] = fix16_from_float((float)(log(f) / log10 * 20.0));
8001f266:	06 9b       	mov	r11,r3
8001f268:	62 07       	ld.w	r7,r1[0x0]
8001f26a:	e0 a0 06 f1 	rcall	8002004c <log>
#endif
}

static inline fix16_t fix16_from_float(float a)
{
    float temp = a * fix16_one;
8001f26e:	e0 68 55 16 	mov	r8,21782
8001f272:	ea 18 bb b5 	orh	r8,0xbbb5
8001f276:	e0 69 6b b1 	mov	r9,27569
8001f27a:	ea 19 40 02 	orh	r9,0x4002
8001f27e:	e0 a0 19 25 	rcall	800224c8 <__avr32_f64_div>
8001f282:	30 08       	mov	r8,0
8001f284:	fc 19 40 34 	movh	r9,0x4034
8001f288:	e0 a0 15 9e 	rcall	80021dc4 <__avr32_f64_mul>
8001f28c:	e0 a0 1d 04 	rcall	80022c94 <__avr32_f64_to_f32>
8001f290:	fc 1b 47 80 	movh	r11,0x4780
8001f294:	e0 a0 1c 16 	rcall	80022ac0 <__avr32_f32_mul>
#ifndef FIXMATH_NO_ROUNDING
    temp += (temp >= 0) ? 0.5f : -0.5f;
8001f298:	30 0b       	mov	r11,0
#endif
}

static inline fix16_t fix16_from_float(float a)
{
    float temp = a * fix16_one;
8001f29a:	18 90       	mov	r0,r12
#ifndef FIXMATH_NO_ROUNDING
    temp += (temp >= 0) ? 0.5f : -0.5f;
8001f29c:	e0 a0 18 e2 	rcall	80022460 <__avr32_f32_cmp_ge>
8001f2a0:	fc 19 bf 00 	movh	r9,0xbf00
8001f2a4:	fc 1b 3f 00 	movh	r11,0x3f00
8001f2a8:	58 0c       	cp.w	r12,0
8001f2aa:	f2 0b 17 00 	moveq	r11,r9
8001f2ae:	00 9c       	mov	r12,r0
8001f2b0:	e0 a0 1b b2 	rcall	80022a14 <__avr32_f32_add>
8001f2b4:	e0 a0 1c b1 	rcall	80022c16 <__avr32_f32_to_s32>
8001f2b8:	ee 06 09 2c 	st.w	r7[r6<<0x2],r12
  // 1 / (1 - ampBreak)
    const double recip_inv_ampBreak = 1.0 / 0.9;  
    const double log10 = log(10.0);
  // fill amp/db tables
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
8001f2bc:	e0 45 03 ff 	cp.w	r5,1023
8001f2c0:	e0 8b 00 75 	brhi	8001f3aa <inputs_init+0x1f6>
    /* print_dbg(", db (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" ( "); */
    /* print_dbg_hex(tabDb->data[i]); */
    /* print_dbg(" )"); */
    f += finc;
8001f2c4:	04 9a       	mov	r10,r2
8001f2c6:	06 9b       	mov	r11,r3
8001f2c8:	ca 2b       	rjmp	8001f20c <inputs_init+0x58>
      tabAmp->data[i] = (s32)((double)(FR32_MAX) * f);
      tabDb->data[i] = fix16_from_float((float)(log(f) / log10 * 20.0));
    } else {
      //// audio taper in (breakDb, 1]
      // map db linearly to input
      fy = (1.0 - (f - ampBreak) * recip_inv_ampBreak) * dbBreak;
8001f2ca:	e0 68 99 9a 	mov	r8,39322
8001f2ce:	ea 18 99 99 	orh	r8,0x9999
8001f2d2:	e0 69 99 99 	mov	r9,39321
8001f2d6:	ea 19 3f b9 	orh	r9,0x3fb9
8001f2da:	04 9a       	mov	r10,r2
8001f2dc:	06 9b       	mov	r11,r3
8001f2de:	e0 a0 16 5f 	rcall	80021f9c <__avr32_f64_sub>
8001f2e2:	e0 68 1c 72 	mov	r8,7282
8001f2e6:	ea 18 71 c7 	orh	r8,0x71c7
8001f2ea:	e0 69 c7 1c 	mov	r9,50972
8001f2ee:	ea 19 bf f1 	orh	r9,0xbff1
8001f2f2:	e0 a0 15 69 	rcall	80021dc4 <__avr32_f64_mul>
8001f2f6:	30 08       	mov	r8,0
8001f2f8:	fc 19 3f f0 	movh	r9,0x3ff0
8001f2fc:	e0 a0 17 1e 	rcall	80022138 <__avr32_f64_add>
8001f300:	30 08       	mov	r8,0
8001f302:	fc 19 c0 34 	movh	r9,0xc034
8001f306:	e0 a0 15 5f 	rcall	80021dc4 <__avr32_f64_mul>
      // convert to amplitude
      fx = powf(10.0, fy * 0.05);
8001f30a:	e0 68 99 9a 	mov	r8,39322
8001f30e:	ea 18 99 99 	orh	r8,0x9999
8001f312:	e0 69 99 99 	mov	r9,39321
8001f316:	ea 19 3f a9 	orh	r9,0x3fa9
      tabAmp->data[i] = (s32)((double)(FR32_MAX) * f);
      tabDb->data[i] = fix16_from_float((float)(log(f) / log10 * 20.0));
    } else {
      //// audio taper in (breakDb, 1]
      // map db linearly to input
      fy = (1.0 - (f - ampBreak) * recip_inv_ampBreak) * dbBreak;
8001f31a:	fa eb 00 04 	st.d	sp[4],r10
      // convert to amplitude
      fx = powf(10.0, fy * 0.05);
8001f31e:	e0 a0 15 53 	rcall	80021dc4 <__avr32_f64_mul>
8001f322:	e0 a0 1c b9 	rcall	80022c94 <__avr32_f64_to_f32>
8001f326:	18 9b       	mov	r11,r12
8001f328:	fc 1c 41 20 	movh	r12,0x4120
8001f32c:	e0 a0 05 2e 	rcall	8001fd88 <powf>
      // amp in fract32
      tabAmp->data[i] = (s32)((double)(FR32_MAX) * fx);
8001f330:	e0 a0 1c 82 	rcall	80022c34 <__avr32_f32_to_f64>
8001f334:	fc 18 ff c0 	movh	r8,0xffc0
8001f338:	e0 69 ff ff 	mov	r9,65535
8001f33c:	ea 19 41 df 	orh	r9,0x41df
8001f340:	68 07       	ld.w	r7,r4[0x0]
8001f342:	e0 a0 15 41 	rcall	80021dc4 <__avr32_f64_mul>
8001f346:	e0 a0 17 7f 	rcall	80022244 <__avr32_f64_to_s32>
8001f34a:	ee 06 09 2c 	st.w	r7[r6<<0x2],r12
      // check underflow
      if(tabAmp->data[i] < 0) { tabAmp->data[i] = 0; }
8001f34e:	68 08       	ld.w	r8,r4[0x0]
8001f350:	f0 06 03 29 	ld.w	r9,r8[r6<<0x2]
8001f354:	58 09       	cp.w	r9,0
8001f356:	e0 85 01 7d 	brlt	8001f650 <inputs_init+0x49c>
#endif
}

static inline fix16_t fix16_from_float(float a)
{
    float temp = a * fix16_one;
8001f35a:	fa ea 00 04 	ld.d	r10,sp[4]
8001f35e:	e0 a0 1c 9b 	rcall	80022c94 <__avr32_f64_to_f32>
8001f362:	fc 1b 47 80 	movh	r11,0x4780
8001f366:	e0 a0 1b ad 	rcall	80022ac0 <__avr32_f32_mul>
#ifndef FIXMATH_NO_ROUNDING
    temp += (temp >= 0) ? 0.5f : -0.5f;
8001f36a:	30 0b       	mov	r11,0
#endif
}

static inline fix16_t fix16_from_float(float a)
{
    float temp = a * fix16_one;
8001f36c:	18 97       	mov	r7,r12
#ifndef FIXMATH_NO_ROUNDING
    temp += (temp >= 0) ? 0.5f : -0.5f;
8001f36e:	e0 a0 18 79 	rcall	80022460 <__avr32_f32_cmp_ge>
      // clamp to 0db
      tabDb->data[i] = fix16_from_float((float)fy); 
8001f372:	fc 18 bf 00 	movh	r8,0xbf00
8001f376:	fc 1b 3f 00 	movh	r11,0x3f00
8001f37a:	58 0c       	cp.w	r12,0
8001f37c:	f0 0b 17 00 	moveq	r11,r8
8001f380:	0e 9c       	mov	r12,r7
8001f382:	62 07       	ld.w	r7,r1[0x0]
8001f384:	e0 a0 1b 48 	rcall	80022a14 <__avr32_f32_add>
8001f388:	e0 a0 1c 47 	rcall	80022c16 <__avr32_f32_to_s32>
8001f38c:	ee 06 09 2c 	st.w	r7[r6<<0x2],r12
      if(tabDb->data[i] > 0) { tabDb->data[i] = 0; }
8001f390:	62 08       	ld.w	r8,r1[0x0]
8001f392:	f0 06 03 29 	ld.w	r9,r8[r6<<0x2]
8001f396:	58 09       	cp.w	r9,0
8001f398:	fe 9a ff 92 	brle	8001f2bc <inputs_init+0x108>
8001f39c:	30 09       	mov	r9,0
8001f39e:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  // 1 / (1 - ampBreak)
    const double recip_inv_ampBreak = 1.0 / 0.9;  
    const double log10 = log(10.0);
  // fill amp/db tables
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
8001f3a2:	e0 45 03 ff 	cp.w	r5,1023
8001f3a6:	fe 98 ff 8f 	brls	8001f2c4 <inputs_init+0x110>
    /* print_dbg_hex(tabDb->data[i]); */
    /* print_dbg(" )"); */
    f += finc;
  }
  // calculate deltas
  table_calc_deltas(tabAmp);
8001f3aa:	68 03       	ld.w	r3,r4[0x0]
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f3ac:	30 06       	mov	r6,0
8001f3ae:	06 97       	mov	r7,r3
8001f3b0:	0f 05       	ld.w	r5,r7++
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f3b2:	6e 04       	ld.w	r4,r7[0x0]
    tab->delta[i] = (s32)f;
8001f3b4:	e8 05 01 0c 	sub	r12,r4,r5
8001f3b8:	e0 a0 17 5d 	rcall	80022272 <__avr32_s32_to_f64>
8001f3bc:	30 08       	mov	r8,0
8001f3be:	e0 69 80 00 	mov	r9,32768
8001f3c2:	ea 19 40 4f 	orh	r9,0x404f
8001f3c6:	e0 a0 18 81 	rcall	800224c8 <__avr32_f64_div>
8001f3ca:	e0 a0 17 3d 	rcall	80022244 <__avr32_f64_to_s32>
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f3ce:	6e 15       	ld.w	r5,r7[0x4]
    tab->delta[i] = (s32)f;
8001f3d0:	ef 4c 0f fc 	st.w	r7[4092],r12
8001f3d4:	ea 04 01 0c 	sub	r12,r5,r4
8001f3d8:	e0 a0 17 4d 	rcall	80022272 <__avr32_s32_to_f64>
8001f3dc:	30 08       	mov	r8,0
8001f3de:	e0 69 80 00 	mov	r9,32768
8001f3e2:	ea 19 40 4f 	orh	r9,0x404f
8001f3e6:	e0 a0 18 71 	rcall	800224c8 <__avr32_f64_div>
8001f3ea:	e0 a0 17 2d 	rcall	80022244 <__avr32_f64_to_s32>
8001f3ee:	ef 4c 10 00 	st.w	r7[4096],r12
8001f3f2:	2f e6       	sub	r6,-2
8001f3f4:	2f 87       	sub	r7,-8
8001f3f6:	e0 46 03 fe 	cp.w	r6,1022
8001f3fa:	cd c1       	brne	8001f3b2 <inputs_init+0x1fe>
8001f3fc:	e6 f8 0f f8 	ld.w	r8,r3[4088]
8001f400:	e6 fc 0f fc 	ld.w	r12,r3[4092]
8001f404:	10 1c       	sub	r12,r8
8001f406:	e0 a0 17 36 	rcall	80022272 <__avr32_s32_to_f64>
8001f40a:	30 08       	mov	r8,0
8001f40c:	e0 69 80 00 	mov	r9,32768
8001f410:	ea 19 40 4f 	orh	r9,0x404f
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f414:	30 06       	mov	r6,0
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
    tab->delta[i] = (s32)f;
8001f416:	e0 a0 18 59 	rcall	800224c8 <__avr32_f64_div>
8001f41a:	e0 a0 17 15 	rcall	80022244 <__avr32_f64_to_s32>
    /* print_dbg(" = 0x"); */
    /* print_dbg_hex((u32)sdif); */
    /* print_dbg(" ; delta: 0x"); */
    /* print_dbg_hex( tab->delta[i] ); */
  }
  tab->delta[TABLE_MAX] = tab->delta[TABLE_MAX - 1];
8001f41e:	e7 4c 1f fc 	st.w	r3[8188],r12
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
    tab->delta[i] = (s32)f;
8001f422:	e7 4c 1f f8 	st.w	r3[8184],r12
    /* print_dbg(" )"); */
    f += finc;
  }
  // calculate deltas
  table_calc_deltas(tabAmp);
  table_calc_deltas(tabDb);
8001f426:	62 03       	ld.w	r3,r1[0x0]
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f428:	06 97       	mov	r7,r3
8001f42a:	0f 05       	ld.w	r5,r7++
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f42c:	6e 04       	ld.w	r4,r7[0x0]
    tab->delta[i] = (s32)f;
8001f42e:	e8 05 01 0c 	sub	r12,r4,r5
8001f432:	e0 a0 17 20 	rcall	80022272 <__avr32_s32_to_f64>
8001f436:	30 08       	mov	r8,0
8001f438:	e0 69 80 00 	mov	r9,32768
8001f43c:	ea 19 40 4f 	orh	r9,0x404f
8001f440:	e0 a0 18 44 	rcall	800224c8 <__avr32_f64_div>
8001f444:	e0 a0 17 00 	rcall	80022244 <__avr32_f64_to_s32>
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f448:	6e 15       	ld.w	r5,r7[0x4]
    tab->delta[i] = (s32)f;
8001f44a:	ef 4c 0f fc 	st.w	r7[4092],r12
8001f44e:	ea 04 01 0c 	sub	r12,r5,r4
8001f452:	e0 a0 17 10 	rcall	80022272 <__avr32_s32_to_f64>
8001f456:	30 08       	mov	r8,0
8001f458:	e0 69 80 00 	mov	r9,32768
8001f45c:	ea 19 40 4f 	orh	r9,0x404f
8001f460:	e0 a0 18 34 	rcall	800224c8 <__avr32_f64_div>
8001f464:	e0 a0 16 f0 	rcall	80022244 <__avr32_f64_to_s32>
8001f468:	ef 4c 10 00 	st.w	r7[4096],r12
8001f46c:	2f e6       	sub	r6,-2
8001f46e:	2f 87       	sub	r7,-8
8001f470:	e0 46 03 fe 	cp.w	r6,1022
8001f474:	cd c1       	brne	8001f42c <inputs_init+0x278>
8001f476:	e6 f8 0f f8 	ld.w	r8,r3[4088]
8001f47a:	e6 fc 0f fc 	ld.w	r12,r3[4092]
8001f47e:	10 1c       	sub	r12,r8
8001f480:	e0 a0 16 f9 	rcall	80022272 <__avr32_s32_to_f64>
8001f484:	30 08       	mov	r8,0
8001f486:	e0 69 80 00 	mov	r9,32768
8001f48a:	ea 19 40 4f 	orh	r9,0x404f
8001f48e:	e0 a0 18 1d 	rcall	800224c8 <__avr32_f64_div>
8001f492:	e0 a0 16 d9 	rcall	80022244 <__avr32_f64_to_s32>
  double fn;
  s32 itmp;
  // 2 ** (1/12)
  const double tempered = 1.0594630943593;

  noteMin_fix = (u32)noteMin << 16;
8001f496:	fc 19 00 13 	movh	r9,0x13
    /* print_dbg(" = 0x"); */
    /* print_dbg_hex((u32)sdif); */
    /* print_dbg(" ; delta: 0x"); */
    /* print_dbg_hex( tab->delta[i] ); */
  }
  tab->delta[TABLE_MAX] = tab->delta[TABLE_MAX - 1];
8001f49a:	e7 4c 1f fc 	st.w	r3[8188],r12
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
    tab->delta[i] = (s32)f;
8001f49e:	e7 4c 1f f8 	st.w	r3[8184],r12
  double fn;
  s32 itmp;
  // 2 ** (1/12)
  const double tempered = 1.0594630943593;

  noteMin_fix = (u32)noteMin << 16;
8001f4a2:	e0 68 2a 34 	mov	r8,10804
8001f4a6:	91 09       	st.w	r8[0x0],r9
  noteMax_fix = (u32)noteMax << 16;
8001f4a8:	fc 19 00 74 	movh	r9,0x74
8001f4ac:	e0 68 2a 3c 	mov	r8,10812
  noteSpan_fix = noteMax_fix - noteMin_fix;  
8001f4b0:	30 07       	mov	r7,0
  s32 itmp;
  // 2 ** (1/12)
  const double tempered = 1.0594630943593;

  noteMin_fix = (u32)noteMin << 16;
  noteMax_fix = (u32)noteMax << 16;
8001f4b2:	91 09       	st.w	r8[0x0],r9
  noteSpan_fix = noteMax_fix - noteMin_fix;  
8001f4b4:	30 02       	mov	r2,0
8001f4b6:	fc 19 00 61 	movh	r9,0x61
8001f4ba:	e0 68 2a 38 	mov	r8,10808
8001f4be:	30 03       	mov	r3,0
8001f4c0:	91 09       	st.w	r8[0x0],r9
  for(i=0; i<TABLE_SIZE; i++) {
    // note numbers (difference)s
    fn = f * ((double)noteMax - (double)noteMin) - 69.0 + noteMin;
    itmp = (s32)fn;
    // octave multiplier
    fy = powf(2.0, (double)(itmp / 12));
8001f4c2:	e0 66 aa ab 	mov	r6,43691
8001f4c6:	ea 16 2a aa 	orh	r6,0x2aaa
8001f4ca:	c1 e8       	rjmp	8001f506 <inputs_init+0x352>
    tabHz->data[i] = fix16_from_float(fz);     
    // svf coefficient
    // HACK : assume samplerate == 48000 ...
    fx = (double)((double)fz / (double)48000.0);
    // stability limit:
    if(fx > 0.25) { fx = 0.25; }
8001f4cc:	e0 6c ff ff 	mov	r12,65535
8001f4d0:	ea 1c 7f ff 	orh	r12,0x7fff
    fy = (double)sinf(M_PI * fx) * 2.0;
    // store as fract32
    tabFreq->data[i] = (s32)(fy * (double)(FR32_MAX));
8001f4d4:	e0 69 32 f0 	mov	r9,13040
8001f4d8:	72 08       	ld.w	r8,r9[0x0]
8001f4da:	f0 07 09 2c 	st.w	r8[r7<<0x2],r12
    /* print_dbg_ulong((s32)fn + 69); */
    /* print_dbg(", hz (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" coeff : 0x"); */
    /* print_dbg_hex(tabFreq->data[i]); */
    f += finc;
8001f4de:	04 9a       	mov	r10,r2
  noteMax_fix = (u32)noteMax << 16;
  noteSpan_fix = noteMax_fix - noteMin_fix;  

  // fill hz / coeff tables 
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
8001f4e0:	2f f7       	sub	r7,-1
    /* print_dbg_ulong((s32)fn + 69); */
    /* print_dbg(", hz (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" coeff : 0x"); */
    /* print_dbg_hex(tabFreq->data[i]); */
    f += finc;
8001f4e2:	06 9b       	mov	r11,r3
    fx = (double)((double)fz / (double)48000.0);
    // stability limit:
    if(fx > 0.25) { fx = 0.25; }
    fy = (double)sinf(M_PI * fx) * 2.0;
    // store as fract32
    tabFreq->data[i] = (s32)(fy * (double)(FR32_MAX));
8001f4e4:	12 98       	mov	r8,r9
  noteMax_fix = (u32)noteMax << 16;
  noteSpan_fix = noteMax_fix - noteMin_fix;  

  // fill hz / coeff tables 
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
8001f4e6:	e0 47 04 00 	cp.w	r7,1024
8001f4ea:	e0 80 00 b8 	breq	8001f65a <inputs_init+0x4a6>
    /* print_dbg_ulong((s32)fn + 69); */
    /* print_dbg(", hz (fix16) : "); */
    /* print_dbg(strbuf); */
    /* print_dbg(" coeff : 0x"); */
    /* print_dbg_hex(tabFreq->data[i]); */
    f += finc;
8001f4ee:	e0 68 10 04 	mov	r8,4100
8001f4f2:	ea 18 00 40 	orh	r8,0x40
8001f4f6:	e0 69 04 01 	mov	r9,1025
8001f4fa:	ea 19 3f 50 	orh	r9,0x3f50
8001f4fe:	e0 a0 16 1d 	rcall	80022138 <__avr32_f64_add>
8001f502:	14 92       	mov	r2,r10
8001f504:	16 93       	mov	r3,r11

  // fill hz / coeff tables 
  f = 0.0;
  for(i=0; i<TABLE_SIZE; i++) {
    // note numbers (difference)s
    fn = f * ((double)noteMax - (double)noteMin) - 69.0 + noteMin;
8001f506:	30 08       	mov	r8,0
8001f508:	e0 69 40 00 	mov	r9,16384
8001f50c:	ea 19 40 58 	orh	r9,0x4058
8001f510:	04 9a       	mov	r10,r2
8001f512:	06 9b       	mov	r11,r3
8001f514:	e0 a0 14 58 	rcall	80021dc4 <__avr32_f64_mul>
8001f518:	30 08       	mov	r8,0
8001f51a:	e0 69 40 00 	mov	r9,16384
8001f51e:	ea 19 40 51 	orh	r9,0x4051
8001f522:	e0 a0 15 3d 	rcall	80021f9c <__avr32_f64_sub>
8001f526:	fc 19 40 33 	movh	r9,0x4033
8001f52a:	30 08       	mov	r8,0
8001f52c:	e0 a0 16 06 	rcall	80022138 <__avr32_f64_add>
8001f530:	14 94       	mov	r4,r10
8001f532:	16 95       	mov	r5,r11
    itmp = (s32)fn;
    // octave multiplier
    fy = powf(2.0, (double)(itmp / 12));
8001f534:	e0 a0 16 88 	rcall	80022244 <__avr32_f64_to_s32>
8001f538:	f8 08 14 1f 	asr	r8,r12,0x1f
8001f53c:	f8 06 04 4a 	muls.d	r10,r12,r6
8001f540:	f6 0c 14 01 	asr	r12,r11,0x1
8001f544:	10 1c       	sub	r12,r8
8001f546:	e0 a0 16 96 	rcall	80022272 <__avr32_s32_to_f64>
8001f54a:	e0 a0 1b a5 	rcall	80022c94 <__avr32_f64_to_f32>
8001f54e:	18 9b       	mov	r11,r12
8001f550:	fc 1c 40 00 	movh	r12,0x4000
8001f554:	e0 a0 04 1a 	rcall	8001fd88 <powf>
8001f558:	e0 a0 1b 6e 	rcall	80022c34 <__avr32_f32_to_f64>
    // center frequency
    fy *= 440.0;
    // tempered ratio
    fz = fy * powf(tempered, fmod(fn, 12.0));
8001f55c:	30 08       	mov	r8,0
8001f55e:	fc 19 40 28 	movh	r9,0x4028
  for(i=0; i<TABLE_SIZE; i++) {
    // note numbers (difference)s
    fn = f * ((double)noteMax - (double)noteMin) - 69.0 + noteMin;
    itmp = (s32)fn;
    // octave multiplier
    fy = powf(2.0, (double)(itmp / 12));
8001f562:	16 91       	mov	r1,r11
8001f564:	14 90       	mov	r0,r10
    // center frequency
    fy *= 440.0;
    // tempered ratio
    fz = fy * powf(tempered, fmod(fn, 12.0));
8001f566:	0a 9b       	mov	r11,r5
8001f568:	08 9a       	mov	r10,r4
8001f56a:	e0 a0 03 bf 	rcall	8001fce8 <fmod>
8001f56e:	e0 a0 1b 93 	rcall	80022c94 <__avr32_f64_to_f32>
8001f572:	18 9b       	mov	r11,r12
8001f574:	e0 6c 9c 7d 	mov	r12,40061
8001f578:	ea 1c 3f 87 	orh	r12,0x3f87
8001f57c:	e0 a0 04 06 	rcall	8001fd88 <powf>
8001f580:	30 08       	mov	r8,0
8001f582:	e0 69 80 00 	mov	r9,32768
8001f586:	ea 19 40 7b 	orh	r9,0x407b
8001f58a:	02 9b       	mov	r11,r1
8001f58c:	50 0c       	stdsp	sp[0x0],r12
8001f58e:	00 9a       	mov	r10,r0
8001f590:	e0 a0 14 1a 	rcall	80021dc4 <__avr32_f64_mul>
8001f594:	40 0c       	lddsp	r12,sp[0x0]
8001f596:	14 94       	mov	r4,r10
8001f598:	16 95       	mov	r5,r11
8001f59a:	e0 a0 1b 4d 	rcall	80022c34 <__avr32_f32_to_f64>
8001f59e:	14 98       	mov	r8,r10
8001f5a0:	16 99       	mov	r9,r11
8001f5a2:	08 9a       	mov	r10,r4
8001f5a4:	0a 9b       	mov	r11,r5
8001f5a6:	e0 a0 14 0f 	rcall	80021dc4 <__avr32_f64_mul>
8001f5aa:	14 94       	mov	r4,r10
8001f5ac:	16 95       	mov	r5,r11
#endif
}

static inline fix16_t fix16_from_float(float a)
{
    float temp = a * fix16_one;
8001f5ae:	e0 a0 1b 73 	rcall	80022c94 <__avr32_f64_to_f32>
8001f5b2:	fc 1b 47 80 	movh	r11,0x4780
8001f5b6:	e0 a0 1a 85 	rcall	80022ac0 <__avr32_f32_mul>
#ifndef FIXMATH_NO_ROUNDING
    temp += (temp >= 0) ? 0.5f : -0.5f;
8001f5ba:	30 0b       	mov	r11,0
#endif
}

static inline fix16_t fix16_from_float(float a)
{
    float temp = a * fix16_one;
8001f5bc:	18 91       	mov	r1,r12
#ifndef FIXMATH_NO_ROUNDING
    temp += (temp >= 0) ? 0.5f : -0.5f;
8001f5be:	e0 a0 17 51 	rcall	80022460 <__avr32_f32_cmp_ge>
    // store hz
    tabHz->data[i] = fix16_from_float(fz);     
8001f5c2:	fc 19 bf 00 	movh	r9,0xbf00
8001f5c6:	fc 1b 3f 00 	movh	r11,0x3f00
8001f5ca:	58 0c       	cp.w	r12,0
8001f5cc:	f2 0b 17 00 	moveq	r11,r9
8001f5d0:	02 9c       	mov	r12,r1
8001f5d2:	e0 a0 1a 21 	rcall	80022a14 <__avr32_f32_add>
8001f5d6:	e0 a0 1b 20 	rcall	80022c16 <__avr32_f32_to_s32>
8001f5da:	e0 69 32 fc 	mov	r9,13052
8001f5de:	72 08       	ld.w	r8,r9[0x0]
    // svf coefficient
    // HACK : assume samplerate == 48000 ...
    fx = (double)((double)fz / (double)48000.0);
8001f5e0:	08 9a       	mov	r10,r4
    // center frequency
    fy *= 440.0;
    // tempered ratio
    fz = fy * powf(tempered, fmod(fn, 12.0));
    // store hz
    tabHz->data[i] = fix16_from_float(fz);     
8001f5e2:	f0 07 09 2c 	st.w	r8[r7<<0x2],r12
    // svf coefficient
    // HACK : assume samplerate == 48000 ...
    fx = (double)((double)fz / (double)48000.0);
8001f5e6:	0a 9b       	mov	r11,r5
8001f5e8:	30 08       	mov	r8,0
8001f5ea:	e0 69 70 00 	mov	r9,28672
8001f5ee:	ea 19 40 e7 	orh	r9,0x40e7
8001f5f2:	e0 a0 17 6b 	rcall	800224c8 <__avr32_f64_div>
8001f5f6:	16 95       	mov	r5,r11
    // stability limit:
    if(fx > 0.25) { fx = 0.25; }
8001f5f8:	14 98       	mov	r8,r10
    fz = fy * powf(tempered, fmod(fn, 12.0));
    // store hz
    tabHz->data[i] = fix16_from_float(fz);     
    // svf coefficient
    // HACK : assume samplerate == 48000 ...
    fx = (double)((double)fz / (double)48000.0);
8001f5fa:	14 94       	mov	r4,r10
    // stability limit:
    if(fx > 0.25) { fx = 0.25; }
8001f5fc:	0a 99       	mov	r9,r5
8001f5fe:	30 0a       	mov	r10,0
8001f600:	fc 1b 3f d0 	movh	r11,0x3fd0
8001f604:	e0 a0 16 ee 	rcall	800223e0 <__avr32_f64_cmp_lt>
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f608:	08 9a       	mov	r10,r4
8001f60a:	0a 9b       	mov	r11,r5
8001f60c:	e0 68 2d 18 	mov	r8,11544
8001f610:	ea 18 54 44 	orh	r8,0x5444
8001f614:	e0 69 21 fb 	mov	r9,8699
8001f618:	ea 19 40 09 	orh	r9,0x4009
    tabHz->data[i] = fix16_from_float(fz);     
    // svf coefficient
    // HACK : assume samplerate == 48000 ...
    fx = (double)((double)fz / (double)48000.0);
    // stability limit:
    if(fx > 0.25) { fx = 0.25; }
8001f61c:	58 0c       	cp.w	r12,0
8001f61e:	fe 91 ff 57 	brne	8001f4cc <inputs_init+0x318>
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f622:	e0 a0 13 d1 	rcall	80021dc4 <__avr32_f64_mul>
8001f626:	e0 a0 1b 37 	rcall	80022c94 <__avr32_f64_to_f32>
8001f62a:	e0 a0 03 23 	rcall	8001fc70 <sinf>
8001f62e:	e0 a0 1b 03 	rcall	80022c34 <__avr32_f32_to_f64>
8001f632:	14 98       	mov	r8,r10
8001f634:	16 99       	mov	r9,r11
8001f636:	e0 a0 15 81 	rcall	80022138 <__avr32_f64_add>
8001f63a:	fc 18 ff c0 	movh	r8,0xffc0
8001f63e:	e0 69 ff ff 	mov	r9,65535
8001f642:	ea 19 41 df 	orh	r9,0x41df
8001f646:	e0 a0 13 bf 	rcall	80021dc4 <__avr32_f64_mul>
8001f64a:	e0 a0 15 fd 	rcall	80022244 <__avr32_f64_to_s32>
8001f64e:	c4 3b       	rjmp	8001f4d4 <inputs_init+0x320>
      // convert to amplitude
      fx = powf(10.0, fy * 0.05);
      // amp in fract32
      tabAmp->data[i] = (s32)((double)(FR32_MAX) * fx);
      // check underflow
      if(tabAmp->data[i] < 0) { tabAmp->data[i] = 0; }
8001f650:	30 09       	mov	r9,0
8001f652:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
8001f656:	fe 9f fe 82 	bral	8001f35a <inputs_init+0x1a6>
    /* print_dbg(" coeff : 0x"); */
    /* print_dbg_hex(tabFreq->data[i]); */
    f += finc;
  }   
  /// hack the endpoints of freq table
  tabFreq->data[0] = tabFreq->data[1] + (tabFreq->data[1] - tabFreq->data[2]);
8001f65a:	72 09       	ld.w	r9,r9[0x0]
8001f65c:	72 1b       	ld.w	r11,r9[0x4]
8001f65e:	72 2a       	ld.w	r10,r9[0x8]
8001f660:	a1 7b       	lsl	r11,0x1
8001f662:	f6 0a 01 0a 	sub	r10,r11,r10
8001f666:	93 0a       	st.w	r9[0x0],r10
  tabFreq->data[TABLE_SIZE - 1] = tabFreq->data[TABLE_SIZE - 2]
    + (tabFreq->data[TABLE_SIZE - 2] - tabFreq->data[TABLE_SIZE - 3]);
8001f668:	70 08       	ld.w	r8,r8[0x0]
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f66a:	30 06       	mov	r6,0
    f += finc;
  }   
  /// hack the endpoints of freq table
  tabFreq->data[0] = tabFreq->data[1] + (tabFreq->data[1] - tabFreq->data[2]);
  tabFreq->data[TABLE_SIZE - 1] = tabFreq->data[TABLE_SIZE - 2]
    + (tabFreq->data[TABLE_SIZE - 2] - tabFreq->data[TABLE_SIZE - 3]);
8001f66c:	f0 fa 0f f8 	ld.w	r10,r8[4088]
    /* print_dbg_hex(tabFreq->data[i]); */
    f += finc;
  }   
  /// hack the endpoints of freq table
  tabFreq->data[0] = tabFreq->data[1] + (tabFreq->data[1] - tabFreq->data[2]);
  tabFreq->data[TABLE_SIZE - 1] = tabFreq->data[TABLE_SIZE - 2]
8001f670:	f0 f9 0f f4 	ld.w	r9,r8[4084]
8001f674:	a1 7a       	lsl	r10,0x1
8001f676:	f4 09 01 09 	sub	r9,r10,r9
8001f67a:	f1 49 0f fc 	st.w	r8[4092],r9
    + (tabFreq->data[TABLE_SIZE - 2] - tabFreq->data[TABLE_SIZE - 3]);
  /// calculate deltas 
  table_calc_deltas(tabHz);
8001f67e:	e0 68 32 fc 	mov	r8,13052
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f682:	70 03       	ld.w	r3,r8[0x0]
8001f684:	06 97       	mov	r7,r3
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f686:	0f 05       	ld.w	r5,r7++
    tab->delta[i] = (s32)f;
8001f688:	6e 04       	ld.w	r4,r7[0x0]
8001f68a:	e8 05 01 0c 	sub	r12,r4,r5
8001f68e:	e0 a0 15 f2 	rcall	80022272 <__avr32_s32_to_f64>
8001f692:	30 08       	mov	r8,0
8001f694:	e0 69 80 00 	mov	r9,32768
8001f698:	ea 19 40 4f 	orh	r9,0x404f
8001f69c:	e0 a0 17 16 	rcall	800224c8 <__avr32_f64_div>
8001f6a0:	e0 a0 15 d2 	rcall	80022244 <__avr32_f64_to_s32>
8001f6a4:	6e 15       	ld.w	r5,r7[0x4]
8001f6a6:	ef 4c 0f fc 	st.w	r7[4092],r12
8001f6aa:	ea 04 01 0c 	sub	r12,r5,r4
8001f6ae:	e0 a0 15 e2 	rcall	80022272 <__avr32_s32_to_f64>
8001f6b2:	30 08       	mov	r8,0
8001f6b4:	e0 69 80 00 	mov	r9,32768
8001f6b8:	ea 19 40 4f 	orh	r9,0x404f
8001f6bc:	e0 a0 17 06 	rcall	800224c8 <__avr32_f64_div>
8001f6c0:	e0 a0 15 c2 	rcall	80022244 <__avr32_f64_to_s32>
8001f6c4:	ef 4c 10 00 	st.w	r7[4096],r12
8001f6c8:	2f e6       	sub	r6,-2
8001f6ca:	2f 87       	sub	r7,-8
8001f6cc:	e0 46 03 fe 	cp.w	r6,1022
8001f6d0:	cd c1       	brne	8001f688 <inputs_init+0x4d4>
8001f6d2:	e6 f8 0f f8 	ld.w	r8,r3[4088]
8001f6d6:	e6 fc 0f fc 	ld.w	r12,r3[4092]
8001f6da:	10 1c       	sub	r12,r8
8001f6dc:	e0 a0 15 cb 	rcall	80022272 <__avr32_s32_to_f64>
8001f6e0:	e0 69 80 00 	mov	r9,32768
8001f6e4:	ea 19 40 4f 	orh	r9,0x404f
8001f6e8:	30 08       	mov	r8,0
8001f6ea:	e0 a0 16 ef 	rcall	800224c8 <__avr32_f64_div>
8001f6ee:	e0 a0 15 ab 	rcall	80022244 <__avr32_f64_to_s32>
    /* print_dbg(" = 0x"); */
    /* print_dbg_hex((u32)sdif); */
    /* print_dbg(" ; delta: 0x"); */
    /* print_dbg_hex( tab->delta[i] ); */
  }
  tab->delta[TABLE_MAX] = tab->delta[TABLE_MAX - 1];
8001f6f2:	e0 69 32 f0 	mov	r9,13040
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
    tab->delta[i] = (s32)f;
8001f6f6:	e7 4c 1f fc 	st.w	r3[8188],r12
// initialize tables

// FIXME: abstract some of this table stuff
//  and put it somewhere else
// maybe in aleph/audio
extern void inputs_init(void) {
8001f6fa:	e7 4c 1f f8 	st.w	r3[8184],r12
8001f6fe:	30 06       	mov	r6,0
8001f700:	72 03       	ld.w	r3,r9[0x0]
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f702:	06 97       	mov	r7,r3
    tab->delta[i] = (s32)f;
8001f704:	0f 05       	ld.w	r5,r7++
8001f706:	6e 04       	ld.w	r4,r7[0x0]
8001f708:	e8 05 01 0c 	sub	r12,r4,r5
8001f70c:	e0 a0 15 b3 	rcall	80022272 <__avr32_s32_to_f64>
8001f710:	30 08       	mov	r8,0
8001f712:	e0 69 80 00 	mov	r9,32768
8001f716:	ea 19 40 4f 	orh	r9,0x404f
8001f71a:	e0 a0 16 d7 	rcall	800224c8 <__avr32_f64_div>
  double f;
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
8001f71e:	e0 a0 15 93 	rcall	80022244 <__avr32_f64_to_s32>
    tab->delta[i] = (s32)f;
8001f722:	6e 15       	ld.w	r5,r7[0x4]
8001f724:	ef 4c 0f fc 	st.w	r7[4092],r12
8001f728:	ea 04 01 0c 	sub	r12,r5,r4
8001f72c:	e0 a0 15 a3 	rcall	80022272 <__avr32_s32_to_f64>
8001f730:	30 08       	mov	r8,0
8001f732:	e0 69 80 00 	mov	r9,32768
8001f736:	ea 19 40 4f 	orh	r9,0x404f
8001f73a:	e0 a0 16 c7 	rcall	800224c8 <__avr32_f64_div>
8001f73e:	e0 a0 15 83 	rcall	80022244 <__avr32_f64_to_s32>
8001f742:	ef 4c 10 00 	st.w	r7[4096],r12
8001f746:	2f e6       	sub	r6,-2
8001f748:	2f 87       	sub	r7,-8
8001f74a:	e0 46 03 fe 	cp.w	r6,1022
8001f74e:	cd c1       	brne	8001f706 <inputs_init+0x552>
8001f750:	e6 f8 0f f8 	ld.w	r8,r3[4088]
8001f754:	e6 fc 0f fc 	ld.w	r12,r3[4092]
8001f758:	10 1c       	sub	r12,r8
8001f75a:	e0 a0 15 8c 	rcall	80022272 <__avr32_s32_to_f64>
8001f75e:	30 08       	mov	r8,0
8001f760:	e0 69 80 00 	mov	r9,32768
8001f764:	ea 19 40 4f 	orh	r9,0x404f
8001f768:	e0 a0 16 b0 	rcall	800224c8 <__avr32_f64_div>
    /* print_dbg(" = 0x"); */
    /* print_dbg_hex((u32)sdif); */
    /* print_dbg(" ; delta: 0x"); */
    /* print_dbg_hex( tab->delta[i] ); */
  }
  tab->delta[TABLE_MAX] = tab->delta[TABLE_MAX - 1];
8001f76c:	e0 a0 15 6c 	rcall	80022244 <__avr32_f64_to_s32>
  //  print_dbg("\r\n calc_deltas : 0x");
  //  print_dbg_hex((u32)tab);
  for(i=0; i < (TABLE_MAX); i++) {
    sdif = tab->data[i+1] - tab->data[i];
    f = (double)(tab->data[i+1] - tab->data[i]) / (double)TABLE_MASK;
    tab->delta[i] = (s32)f;
8001f770:	e7 4c 1f fc 	st.w	r3[8188],r12
  /// calculate deltas 
  table_calc_deltas(tabHz);
  table_calc_deltas(tabFreq);
  
  // test
  print_dbg("\r\n testing hz lookup: ");
8001f774:	e7 4c 1f f8 	st.w	r3[8184],r12
8001f778:	fe cc 9f b0 	sub	r12,pc,-24656
  u32 eq;
  u32 dec; // count of decreasing 
  s32 last = 0x80000000;
  char strbuf[11] = "           ";
  strbuf[10] = 0;
  print_dbg("\r\n testing table lookup... ");
8001f77c:	fe b0 9c 10 	rcall	80012f9c <print_dbg>
8001f780:	e0 68 32 fc 	mov	r8,13052
8001f784:	fe cc 9f a4 	sub	r12,pc,-24668
8001f788:	70 07       	ld.w	r7,r8[0x0]
8001f78a:	fe b0 9c 09 	rcall	80012f9c <print_dbg>
8001f78e:	30 06       	mov	r6,0
8001f790:	ee fc 10 00 	ld.w	r12,r7[4096]
8001f794:	0c 95       	mov	r5,r6
8001f796:	0c 94       	mov	r4,r6
  for(i=0; i<=IN_MAX; i++) {
    v = table_look(tab, i);
    if (v == last) {
      eq++;
    } else if( v > last) {
      inc++;
8001f798:	fc 1b 80 00 	movh	r11,0x8000
8001f79c:	0c 98       	mov	r8,r6
      last = v;
    } else {
      dec++;
8001f79e:	0c 9a       	mov	r10,r6
8001f7a0:	c1 18       	rjmp	8001f7c2 <inputs_init+0x60e>
  u32 dec; // count of decreasing 
  s32 last = 0x80000000;
  char strbuf[11] = "           ";
  strbuf[10] = 0;
  print_dbg("\r\n testing table lookup... ");
  for(i=0; i<=IN_MAX; i++) {
8001f7a2:	16 39       	cp.w	r9,r11
8001f7a4:	f7 b5 09 ff 	subgt	r5,-1
8001f7a8:	f7 b6 0a ff 	suble	r6,-1
8001f7ac:	2f f8       	sub	r8,-1
8001f7ae:	e0 58 00 00 	cp.w	r8,65536
8001f7b2:	c1 50       	breq	8001f7dc <inputs_init+0x628>
8001f7b4:	12 9b       	mov	r11,r9
8001f7b6:	f0 0a 16 06 	lsr	r10,r8,0x6

// lookup 
static s32 table_look(table* tab, u32 in) {
  u32 idx = in >> TABLE_RSHIFT;
  s32 mul = in & TABLE_MASK;
  s32 val = tab->data[idx] + (mul * tab->delta[idx]);
8001f7ba:	f4 c9 fc 00 	sub	r9,r10,-1024
8001f7be:	ee 09 03 2c 	ld.w	r12,r7[r9<<0x2]
8001f7c2:	ee 0a 03 2a 	ld.w	r10,r7[r10<<0x2]
  char strbuf[11] = "           ";
  strbuf[10] = 0;
  print_dbg("\r\n testing table lookup... ");
  for(i=0; i<=IN_MAX; i++) {
    v = table_look(tab, i);
    if (v == last) {
8001f7c6:	f3 d8 c0 06 	bfextu	r9,r8,0x0,0x6
  u32 dec; // count of decreasing 
  s32 last = 0x80000000;
  char strbuf[11] = "           ";
  strbuf[10] = 0;
  print_dbg("\r\n testing table lookup... ");
  for(i=0; i<=IN_MAX; i++) {
8001f7ca:	b9 39       	mul	r9,r12
8001f7cc:	14 09       	add	r9,r10
8001f7ce:	16 39       	cp.w	r9,r11
8001f7d0:	ce 91       	brne	8001f7a2 <inputs_init+0x5ee>
    /* print_dbg_hex(i); */
    /* print_dbg(" ) : "); */
    /* print_fix16(strbuf, (fix16)v); */
    /* print_dbg(strbuf); */
  }
  print_dbg("\r\n tested ");
8001f7d2:	2f f4       	sub	r4,-1
8001f7d4:	2f f8       	sub	r8,-1
8001f7d6:	e0 58 00 00 	cp.w	r8,65536
  print_dbg_ulong(i - 1);
8001f7da:	ce d1       	brne	8001f7b4 <inputs_init+0x600>
8001f7dc:	fe cc 9f e0 	sub	r12,pc,-24608
  print_dbg(" lookups. inc: ");
8001f7e0:	fe b0 9b de 	rcall	80012f9c <print_dbg>
8001f7e4:	e0 6c ff ff 	mov	r12,65535
  print_dbg_ulong(inc);
8001f7e8:	fe b0 9b e0 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , dec: ");
8001f7ec:	fe cc 9f e4 	sub	r12,pc,-24604
8001f7f0:	fe b0 9b d6 	rcall	80012f9c <print_dbg>
  print_dbg_ulong(dec);  
8001f7f4:	0a 9c       	mov	r12,r5
8001f7f6:	fe b0 9b d9 	rcall	80012fa8 <print_dbg_ulong>
  print_dbg(" , eq: ");
8001f7fa:	fe cc 9f e2 	sub	r12,pc,-24606
  print_dbg_ulong(eq);
8001f7fe:	fe b0 9b cf 	rcall	80012f9c <print_dbg>
8001f802:	0c 9c       	mov	r12,r6
  fill_amp_db_tables();
  fill_hz_freq_tables();

  // fill pan tables
  // ... TODO
}
8001f804:	fe b0 9b d2 	rcall	80012fa8 <print_dbg_ulong>
8001f808:	fe cc 9f e4 	sub	r12,pc,-24604
8001f80c:	fe b0 9b c8 	rcall	80012f9c <print_dbg>
8001f810:	08 9c       	mov	r12,r4
8001f812:	fe b0 9b cb 	rcall	80012fa8 <print_dbg_ulong>
8001f816:	2f dd       	sub	sp,-12
8001f818:	d8 32       	popm	r0-r7,pc
8001f81a:	d7 03       	nop

8001f81c <render_sw_on>:
}


void render_sw_on(u8 sw, u8 on) {
  // highlight the footer
}
8001f81c:	5e fc       	retal	r12
8001f81e:	d7 03       	nop

8001f820 <render_dac>:

void render_dac(u8 ch, s32 val) {
8001f820:	eb cd 40 f8 	pushm	r3-r7,lr
  region_fill(&bigtop, 0x0);
8001f824:	33 85       	mov	r5,56

void render_sw_on(u8 sw, u8 on) {
  // highlight the footer
}

void render_dac(u8 ch, s32 val) {
8001f826:	18 97       	mov	r7,r12
8001f828:	16 93       	mov	r3,r11
  region_fill(&bigtop, 0x0);
8001f82a:	0a 9c       	mov	r12,r5
8001f82c:	30 0b       	mov	r11,0
8001f82e:	fe b0 cd e5 	rcall	800193f8 <region_fill>
  strcpy(numstrbuf, "      :  ");
  itoa_whole(ch, numstrbuf, NUMSTRBUF_LEN);
8001f832:	0e 9c       	mov	r12,r7
  // highlight the footer
}

void render_dac(u8 ch, s32 val) {
  region_fill(&bigtop, 0x0);
  strcpy(numstrbuf, "      :  ");
8001f834:	fe c8 a0 08 	sub	r8,pc,-24568
8001f838:	e0 67 2a 40 	mov	r7,10816
8001f83c:	f1 39 00 09 	ld.ub	r9,r8[9]
8001f840:	ef 69 00 09 	st.b	r7[9],r9
8001f844:	f0 ea 00 00 	ld.d	r10,r8[0]
8001f848:	ee eb 00 00 	st.d	r7[0],r10
  itoa_whole(ch, numstrbuf, NUMSTRBUF_LEN);
8001f84c:	f1 38 00 08 	ld.ub	r8,r8[8]
  // highlight the footer
}

void render_dac(u8 ch, s32 val) {
  region_fill(&bigtop, 0x0);
  strcpy(numstrbuf, "      :  ");
8001f850:	31 0a       	mov	r10,16
  itoa_whole(ch, numstrbuf, NUMSTRBUF_LEN);
8001f852:	ef 68 00 08 	st.b	r7[8],r8
8001f856:	0e 9b       	mov	r11,r7
  region_string(&bigtop, numstrbuf, 0, 0, 0x5, 0x1, 0);
8001f858:	fe b0 f9 94 	rcall	8001eb80 <itoa_whole>
8001f85c:	30 06       	mov	r6,0
8001f85e:	30 58       	mov	r8,5
8001f860:	1a d6       	st.w	--sp,r6
8001f862:	0c 99       	mov	r9,r6
8001f864:	30 14       	mov	r4,1
8001f866:	0c 9a       	mov	r10,r6
8001f868:	1a d4       	st.w	--sp,r4
8001f86a:	0e 9b       	mov	r11,r7
8001f86c:	0a 9c       	mov	r12,r5
  itoa_whole(val, numstrbuf, NUMSTRBUF_LEN);
8001f86e:	fe b0 cd d5 	rcall	80019418 <region_string>
8001f872:	06 9c       	mov	r12,r3
8001f874:	31 0a       	mov	r10,16
8001f876:	0e 9b       	mov	r11,r7
  region_string(&bigtop, numstrbuf, 10, 10, 0xf, 0x0, 1);
8001f878:	fe b0 f9 84 	rcall	8001eb80 <itoa_whole>
8001f87c:	30 a9       	mov	r9,10
8001f87e:	1a d4       	st.w	--sp,r4
8001f880:	0e 9b       	mov	r11,r7
8001f882:	1a d6       	st.w	--sp,r6
8001f884:	0a 9c       	mov	r12,r5
8001f886:	30 f8       	mov	r8,15
8001f888:	12 9a       	mov	r10,r9
8001f88a:	fe b0 cd c7 	rcall	80019418 <region_string>
}
8001f88e:	2f cd       	sub	sp,-16
8001f890:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

8001f894 <render_startup>:
8001f894:	eb cd 40 80 	pushm	r7,lr
8001f898:	33 87       	mov	r7,56
8001f89a:	30 5b       	mov	r11,5
8001f89c:	0e 9c       	mov	r12,r7
8001f89e:	fe b0 cd ad 	rcall	800193f8 <region_fill>
8001f8a2:	30 28       	mov	r8,2
8001f8a4:	1a d8       	st.w	--sp,r8
8001f8a6:	30 08       	mov	r8,0

// fill with initial graphics (id strings)
void render_startup(void) {

  region_fill(&bigtop, 0x5);
  region_string(&bigtop, "FLRY", 40, 12, 0xf, 0x0, 2);
8001f8a8:	0e 9c       	mov	r12,r7
8001f8aa:	1a d8       	st.w	--sp,r8
8001f8ac:	30 c9       	mov	r9,12
8001f8ae:	30 f8       	mov	r8,15
8001f8b0:	32 8a       	mov	r10,40
8001f8b2:	fe cb a0 7a 	sub	r11,pc,-24454
8001f8b6:	fe b0 cd b1 	rcall	80019418 <region_string>
  //  region_string(&(foot[0]), "TAP1", 0, 0, 0xf, 0x0, 0);
  //  region_string(&(foot[1]), "TAP2", 0, 0, 0xf, 0x0, 0);
  //  region_string(&(foot[2]), "REC", 0, 0, 0xf, 0x0, 0);
  //  region_string(&(foot[3]), "PLAY", 0, 0, 0xf, 0x0, 0);
}
8001f8ba:	2f ed       	sub	sp,-8
8001f8bc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f8c0 <render_status>:
8001f8c0:	eb cd 40 80 	pushm	r7,lr
8001f8c4:	e0 68 2a 50 	mov	r8,10832
8001f8c8:	30 09       	mov	r9,0
8001f8ca:	91 09       	st.w	r8[0x0],r9
8001f8cc:	18 9b       	mov	r11,r12
8001f8ce:	32 8a       	mov	r10,40
}

// render text to statusbar
void render_status(const char* str) {
  static u32 i;
  for(i=0; i<(status.len); i++) {
8001f8d0:	74 1c       	ld.w	r12,r10[0x4]
8001f8d2:	58 0c       	cp.w	r12,0
    status.data[i] = 0;
8001f8d4:	c0 b0       	breq	8001f8ea <render_status+0x2a>
8001f8d6:	12 97       	mov	r7,r9
8001f8d8:	74 3e       	ld.w	lr,r10[0xc]
8001f8da:	fc 09 0b 07 	st.b	lr[r9],r7
}

// render text to statusbar
void render_status(const char* str) {
  static u32 i;
  for(i=0; i<(status.len); i++) {
8001f8de:	2f f9       	sub	r9,-1
8001f8e0:	74 1e       	ld.w	lr,r10[0x4]
8001f8e2:	12 3e       	cp.w	lr,r9
8001f8e4:	fe 9b ff fa 	brhi	8001f8d8 <render_status+0x18>
    status.data[i] = 0;
  }
  
  region_string(&status, str, 0, 0, 0xf, 0, 0);
8001f8e8:	91 09       	st.w	r8[0x0],r9
8001f8ea:	30 08       	mov	r8,0
8001f8ec:	32 8c       	mov	r12,40
8001f8ee:	1a d8       	st.w	--sp,r8
8001f8f0:	10 99       	mov	r9,r8
8001f8f2:	1a d8       	st.w	--sp,r8
8001f8f4:	12 9a       	mov	r10,r9
8001f8f6:	30 f8       	mov	r8,15
8001f8f8:	fe b0 cd 90 	rcall	80019418 <region_string>
}
8001f8fc:	2f ed       	sub	sp,-8
8001f8fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8001f902:	d7 03       	nop

8001f904 <render_update>:
8001f904:	eb cd 40 e0 	pushm	r5-r7,lr
8001f908:	fe b0 b7 6e 	rcall	800167e4 <app_pause>
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f90c:	30 06       	mov	r6,0
// array of pointers to all regoins.
// NOTE: regions can overlap,
// but the ordering of this list also determines drawing order.
// later entries will overwrite earlier entries in the esame redraw cycle.
static region * allRegions[] = {
  &status,
8001f90e:	32 87       	mov	r7,40
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f910:	ef 38 00 0a 	ld.ub	r8,r7[10]
8001f914:	ec 08 18 00 	cp.b	r8,r6
8001f918:	c2 a1       	brne	8001f96c <render_update+0x68>
// NOTE: regions can overlap,
// but the ordering of this list also determines drawing order.
// later entries will overwrite earlier entries in the esame redraw cycle.
static region * allRegions[] = {
  &status,
  &bigtop,
8001f91a:	33 87       	mov	r7,56
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f91c:	30 06       	mov	r6,0
8001f91e:	ef 38 00 0a 	ld.ub	r8,r7[10]
8001f922:	ec 08 18 00 	cp.b	r8,r6
8001f926:	c6 21       	brne	8001f9ea <render_update+0xe6>
// but the ordering of this list also determines drawing order.
// later entries will overwrite earlier entries in the esame redraw cycle.
static region * allRegions[] = {
  &status,
  &bigtop,
  &(foot[0]),
8001f928:	34 87       	mov	r7,72
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f92a:	30 06       	mov	r6,0
8001f92c:	ef 38 00 0a 	ld.ub	r8,r7[10]
8001f930:	ec 08 18 00 	cp.b	r8,r6
8001f934:	c4 f1       	brne	8001f9d2 <render_update+0xce>
// later entries will overwrite earlier entries in the esame redraw cycle.
static region * allRegions[] = {
  &status,
  &bigtop,
  &(foot[0]),
  &(foot[1]),
8001f936:	ee c6 ff f0 	sub	r6,r7,-16
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f93a:	30 05       	mov	r5,0
8001f93c:	ed 38 00 0a 	ld.ub	r8,r6[10]
8001f940:	ea 08 18 00 	cp.b	r8,r5
8001f944:	c3 b1       	brne	8001f9ba <render_update+0xb6>
static region * allRegions[] = {
  &status,
  &bigtop,
  &(foot[0]),
  &(foot[1]),
  &(foot[2]),
8001f946:	ee c6 ff e0 	sub	r6,r7,-32
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f94a:	30 05       	mov	r5,0
8001f94c:	ed 38 00 0a 	ld.ub	r8,r6[10]
8001f950:	ea 08 18 00 	cp.b	r8,r5
8001f954:	c2 71       	brne	8001f9a2 <render_update+0x9e>
  &status,
  &bigtop,
  &(foot[0]),
  &(foot[1]),
  &(foot[2]),
  &(foot[3]),
8001f956:	2d 07       	sub	r7,-48
  u8 i;
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
8001f958:	30 06       	mov	r6,0
8001f95a:	ef 38 00 0a 	ld.ub	r8,r7[10]
8001f95e:	ec 08 18 00 	cp.b	r8,r6
8001f962:	c1 11       	brne	8001f984 <render_update+0x80>
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
      r->dirty = 0;
    }
  }
  app_resume();
8001f964:	fe b0 b7 3c 	rcall	800167dc <app_resume>
}
8001f968:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
8001f96c:	6e 38       	ld.w	r8,r7[0xc]
8001f96e:	0f 99       	ld.ub	r9,r7[0x1]
8001f970:	0f 8a       	ld.ub	r10,r7[0x0]
8001f972:	ef 3b 00 09 	ld.ub	r11,r7[9]
8001f976:	ef 3c 00 08 	ld.ub	r12,r7[8]
8001f97a:	fe b0 cd f3 	rcall	80019560 <screen_draw_region>
      r->dirty = 0;
8001f97e:	ef 66 00 0a 	st.b	r7[10],r6
8001f982:	cc cb       	rjmp	8001f91a <render_update+0x16>
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
8001f984:	6e 38       	ld.w	r8,r7[0xc]
8001f986:	0f 99       	ld.ub	r9,r7[0x1]
8001f988:	0f 8a       	ld.ub	r10,r7[0x0]
8001f98a:	ef 3b 00 09 	ld.ub	r11,r7[9]
8001f98e:	ef 3c 00 08 	ld.ub	r12,r7[8]
8001f992:	fe b0 cd e7 	rcall	80019560 <screen_draw_region>
      r->dirty = 0;
8001f996:	ef 66 00 0a 	st.b	r7[10],r6
    }
  }
  app_resume();
8001f99a:	fe b0 b7 21 	rcall	800167dc <app_resume>
}
8001f99e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
8001f9a2:	6c 38       	ld.w	r8,r6[0xc]
8001f9a4:	0d 99       	ld.ub	r9,r6[0x1]
8001f9a6:	0d 8a       	ld.ub	r10,r6[0x0]
8001f9a8:	ed 3b 00 09 	ld.ub	r11,r6[9]
8001f9ac:	ed 3c 00 08 	ld.ub	r12,r6[8]
8001f9b0:	fe b0 cd d8 	rcall	80019560 <screen_draw_region>
      r->dirty = 0;
8001f9b4:	ed 65 00 0a 	st.b	r6[10],r5
8001f9b8:	cc fb       	rjmp	8001f956 <render_update+0x52>
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
8001f9ba:	6c 38       	ld.w	r8,r6[0xc]
8001f9bc:	0d 99       	ld.ub	r9,r6[0x1]
8001f9be:	0d 8a       	ld.ub	r10,r6[0x0]
8001f9c0:	ed 3b 00 09 	ld.ub	r11,r6[9]
8001f9c4:	ed 3c 00 08 	ld.ub	r12,r6[8]
8001f9c8:	fe b0 cd cc 	rcall	80019560 <screen_draw_region>
      r->dirty = 0;
8001f9cc:	ed 65 00 0a 	st.b	r6[10],r5
8001f9d0:	cb bb       	rjmp	8001f946 <render_update+0x42>
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
8001f9d2:	6e 38       	ld.w	r8,r7[0xc]
8001f9d4:	0f 99       	ld.ub	r9,r7[0x1]
8001f9d6:	0f 8a       	ld.ub	r10,r7[0x0]
8001f9d8:	ef 3b 00 09 	ld.ub	r11,r7[9]
8001f9dc:	ef 3c 00 08 	ld.ub	r12,r7[8]
8001f9e0:	fe b0 cd c0 	rcall	80019560 <screen_draw_region>
      r->dirty = 0;
8001f9e4:	ef 66 00 0a 	st.b	r7[10],r6
8001f9e8:	ca 7b       	rjmp	8001f936 <render_update+0x32>
  app_pause();

  for(i = 0; i<numRegions; i++) {
    r = allRegions[i]; 
    if(r->dirty) {
      screen_draw_region(r->x, r->y, r->w, r->h, r->data);
8001f9ea:	6e 38       	ld.w	r8,r7[0xc]
8001f9ec:	0f 99       	ld.ub	r9,r7[0x1]
8001f9ee:	0f 8a       	ld.ub	r10,r7[0x0]
8001f9f0:	ef 3b 00 09 	ld.ub	r11,r7[9]
8001f9f4:	ef 3c 00 08 	ld.ub	r12,r7[8]
8001f9f8:	fe b0 cd b4 	rcall	80019560 <screen_draw_region>
      r->dirty = 0;
8001f9fc:	ef 66 00 0a 	st.b	r7[10],r6
8001fa00:	c9 4b       	rjmp	8001f928 <render_update+0x24>
8001fa02:	d7 03       	nop

8001fa04 <render_init>:
8001fa04:	d4 31       	pushm	r0-r7,lr
8001fa06:	20 1d       	sub	sp,4
8001fa08:	32 8c       	mov	r12,40
8001fa0a:	fe b0 cd 4d 	rcall	800194a4 <region_alloc>
8001fa0e:	33 8c       	mov	r12,56
8001fa10:	fe b0 cd 4a 	rcall	800194a4 <region_alloc>
8001fa14:	34 87       	mov	r7,72
8001fa16:	0e 9c       	mov	r12,r7
8001fa18:	fe b0 cd 46 	rcall	800194a4 <region_alloc>
// initialze renderer
void render_init(void) {
  u32 i;

  for(i = 0; i<numRegions; i++) {
    region_alloc((region*)(allRegions[i]));
8001fa1c:	ee c0 ff f0 	sub	r0,r7,-16
8001fa20:	00 9c       	mov	r12,r0
// later entries will overwrite earlier entries in the esame redraw cycle.
static region * allRegions[] = {
  &status,
  &bigtop,
  &(foot[0]),
  &(foot[1]),
8001fa22:	fe b0 cd 41 	rcall	800194a4 <region_alloc>
// initialze renderer
void render_init(void) {
  u32 i;

  for(i = 0; i<numRegions; i++) {
    region_alloc((region*)(allRegions[i]));
8001fa26:	ee c1 ff e0 	sub	r1,r7,-32
8001fa2a:	02 9c       	mov	r12,r1
static region * allRegions[] = {
  &status,
  &bigtop,
  &(foot[0]),
  &(foot[1]),
  &(foot[2]),
8001fa2c:	fe b0 cd 3c 	rcall	800194a4 <region_alloc>
// initialze renderer
void render_init(void) {
  u32 i;

  for(i = 0; i<numRegions; i++) {
    region_alloc((region*)(allRegions[i]));
8001fa30:	ee c8 ff d0 	sub	r8,r7,-48
8001fa34:	50 08       	stdsp	sp[0x0],r8
  &status,
  &bigtop,
  &(foot[0]),
  &(foot[1]),
  &(foot[2]),
  &(foot[3]),
8001fa36:	10 9c       	mov	r12,r8
8001fa38:	fe b0 cd 36 	rcall	800194a4 <region_alloc>
// initialze renderer
void render_init(void) {
  u32 i;

  for(i = 0; i<numRegions; i++) {
    region_alloc((region*)(allRegions[i]));
8001fa3c:	fe cc a1 fc 	sub	r12,pc,-24068
8001fa40:	fe b0 9a ae 	rcall	80012f9c <print_dbg>
  }

  //  screen_clear();

  // test
  print_dbg("\r\n\r\n regions:");
8001fa44:	fe c2 a1 f4 	sub	r2,pc,-24076
  for(i = 0; i<numRegions; i++) {
    print_dbg("\r\n ( ");
8001fa48:	04 9c       	mov	r12,r2
8001fa4a:	fe b0 9a a9 	rcall	80012f9c <print_dbg>
8001fa4e:	30 0c       	mov	r12,0
    print_dbg_hex(i);
8001fa50:	fe b0 9a ce 	rcall	80012fec <print_dbg_hex>
8001fa54:	fe c3 a1 fc 	sub	r3,pc,-24068
    print_dbg(" ) @ 0x");
8001fa58:	06 9c       	mov	r12,r3
8001fa5a:	fe b0 9a a1 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]));
8001fa5e:	32 8c       	mov	r12,40
8001fa60:	fe b0 9a c6 	rcall	80012fec <print_dbg_hex>
    print_dbg(", data: @ 0x");
8001fa64:	fe c4 a2 04 	sub	r4,pc,-24060
8001fa68:	08 9c       	mov	r12,r4
8001fa6a:	fe b0 9a 99 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]->data));
8001fa6e:	32 88       	mov	r8,40
8001fa70:	70 3c       	ld.w	r12,r8[0xc]
8001fa72:	fe b0 9a bd 	rcall	80012fec <print_dbg_hex>
    print_dbg(", w:");
8001fa76:	fe c5 a2 06 	sub	r5,pc,-24058
8001fa7a:	0a 9c       	mov	r12,r5
    print_dbg_ulong((u32)(allRegions[i]->w));
8001fa7c:	fe b0 9a 90 	rcall	80012f9c <print_dbg>
8001fa80:	32 88       	mov	r8,40
8001fa82:	11 8c       	ld.ub	r12,r8[0x0]
    print_dbg(", h:");
8001fa84:	fe b0 9a 92 	rcall	80012fa8 <print_dbg_ulong>
8001fa88:	fe c6 a2 10 	sub	r6,pc,-24048
    print_dbg_ulong((u32)(allRegions[i]->h));
8001fa8c:	0c 9c       	mov	r12,r6
8001fa8e:	fe b0 9a 87 	rcall	80012f9c <print_dbg>
8001fa92:	32 88       	mov	r8,40
    print_dbg(", len: 0x");
8001fa94:	11 9c       	ld.ub	r12,r8[0x1]
8001fa96:	fe b0 9a 89 	rcall	80012fa8 <print_dbg_ulong>
    print_dbg_hex((u32)(allRegions[i]->len));
8001fa9a:	fe cc a2 1a 	sub	r12,pc,-24038
8001fa9e:	fe b0 9a 7f 	rcall	80012f9c <print_dbg>
  //  screen_clear();

  // test
  print_dbg("\r\n\r\n regions:");
  for(i = 0; i<numRegions; i++) {
    print_dbg("\r\n ( ");
8001faa2:	32 88       	mov	r8,40
8001faa4:	70 1c       	ld.w	r12,r8[0x4]
8001faa6:	fe b0 9a a3 	rcall	80012fec <print_dbg_hex>
    print_dbg_hex(i);
8001faaa:	04 9c       	mov	r12,r2
8001faac:	fe b0 9a 78 	rcall	80012f9c <print_dbg>
    print_dbg(" ) @ 0x");
8001fab0:	30 1c       	mov	r12,1
8001fab2:	fe b0 9a 9d 	rcall	80012fec <print_dbg_hex>
    print_dbg_hex((u32)(allRegions[i]));
8001fab6:	06 9c       	mov	r12,r3
8001fab8:	fe b0 9a 72 	rcall	80012f9c <print_dbg>
    print_dbg(", data: @ 0x");
8001fabc:	33 8c       	mov	r12,56
8001fabe:	fe b0 9a 97 	rcall	80012fec <print_dbg_hex>
    print_dbg_hex((u32)(allRegions[i]->data));
8001fac2:	08 9c       	mov	r12,r4
8001fac4:	fe b0 9a 6c 	rcall	80012f9c <print_dbg>
    print_dbg(", w:");
8001fac8:	33 88       	mov	r8,56
8001faca:	70 3c       	ld.w	r12,r8[0xc]
8001facc:	fe b0 9a 90 	rcall	80012fec <print_dbg_hex>
    print_dbg_ulong((u32)(allRegions[i]->w));
8001fad0:	0a 9c       	mov	r12,r5
8001fad2:	fe b0 9a 65 	rcall	80012f9c <print_dbg>
    print_dbg(", h:");
8001fad6:	33 88       	mov	r8,56
8001fad8:	11 8c       	ld.ub	r12,r8[0x0]
8001fada:	fe b0 9a 67 	rcall	80012fa8 <print_dbg_ulong>
    print_dbg_ulong((u32)(allRegions[i]->h));
8001fade:	0c 9c       	mov	r12,r6
8001fae0:	fe b0 9a 5e 	rcall	80012f9c <print_dbg>
    print_dbg(", len: 0x");
8001fae4:	33 88       	mov	r8,56
8001fae6:	11 9c       	ld.ub	r12,r8[0x1]
8001fae8:	fe b0 9a 60 	rcall	80012fa8 <print_dbg_ulong>
    print_dbg_hex((u32)(allRegions[i]->len));
8001faec:	fe cc a2 6c 	sub	r12,pc,-23956
8001faf0:	fe b0 9a 56 	rcall	80012f9c <print_dbg>
  //  screen_clear();

  // test
  print_dbg("\r\n\r\n regions:");
  for(i = 0; i<numRegions; i++) {
    print_dbg("\r\n ( ");
8001faf4:	33 88       	mov	r8,56
8001faf6:	70 1c       	ld.w	r12,r8[0x4]
    print_dbg_hex(i);
8001faf8:	fe b0 9a 7a 	rcall	80012fec <print_dbg_hex>
8001fafc:	04 9c       	mov	r12,r2
    print_dbg(" ) @ 0x");
8001fafe:	fe b0 9a 4f 	rcall	80012f9c <print_dbg>
8001fb02:	30 2c       	mov	r12,2
    print_dbg_hex((u32)(allRegions[i]));
8001fb04:	fe b0 9a 74 	rcall	80012fec <print_dbg_hex>
8001fb08:	06 9c       	mov	r12,r3
    print_dbg(", data: @ 0x");
8001fb0a:	fe b0 9a 49 	rcall	80012f9c <print_dbg>
8001fb0e:	0e 9c       	mov	r12,r7
    print_dbg_hex((u32)(allRegions[i]->data));
8001fb10:	fe b0 9a 6e 	rcall	80012fec <print_dbg_hex>
8001fb14:	08 9c       	mov	r12,r4
    print_dbg(", w:");
8001fb16:	fe b0 9a 43 	rcall	80012f9c <print_dbg>
8001fb1a:	6e 3c       	ld.w	r12,r7[0xc]
    print_dbg_ulong((u32)(allRegions[i]->w));
8001fb1c:	fe b0 9a 68 	rcall	80012fec <print_dbg_hex>
8001fb20:	0a 9c       	mov	r12,r5
    print_dbg(", h:");
8001fb22:	fe b0 9a 3d 	rcall	80012f9c <print_dbg>
8001fb26:	0f 8c       	ld.ub	r12,r7[0x0]
    print_dbg_ulong((u32)(allRegions[i]->h));
8001fb28:	fe b0 9a 40 	rcall	80012fa8 <print_dbg_ulong>
8001fb2c:	0c 9c       	mov	r12,r6
    print_dbg(", len: 0x");
8001fb2e:	fe b0 9a 37 	rcall	80012f9c <print_dbg>
8001fb32:	0f 9c       	ld.ub	r12,r7[0x1]
    print_dbg_hex((u32)(allRegions[i]->len));
8001fb34:	fe b0 9a 3a 	rcall	80012fa8 <print_dbg_ulong>
8001fb38:	fe cc a2 b8 	sub	r12,pc,-23880
  //  screen_clear();

  // test
  print_dbg("\r\n\r\n regions:");
  for(i = 0; i<numRegions; i++) {
    print_dbg("\r\n ( ");
8001fb3c:	fe b0 9a 30 	rcall	80012f9c <print_dbg>
    print_dbg_hex(i);
8001fb40:	6e 1c       	ld.w	r12,r7[0x4]
8001fb42:	fe b0 9a 55 	rcall	80012fec <print_dbg_hex>
    print_dbg(" ) @ 0x");
8001fb46:	04 9c       	mov	r12,r2
8001fb48:	fe b0 9a 2a 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]));
8001fb4c:	30 3c       	mov	r12,3
8001fb4e:	fe b0 9a 4f 	rcall	80012fec <print_dbg_hex>
    print_dbg(", data: @ 0x");
8001fb52:	06 9c       	mov	r12,r3
8001fb54:	fe b0 9a 24 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]->data));
8001fb58:	00 9c       	mov	r12,r0
8001fb5a:	fe b0 9a 49 	rcall	80012fec <print_dbg_hex>
    print_dbg(", w:");
8001fb5e:	08 9c       	mov	r12,r4
8001fb60:	fe b0 9a 1e 	rcall	80012f9c <print_dbg>
    print_dbg_ulong((u32)(allRegions[i]->w));
8001fb64:	60 3c       	ld.w	r12,r0[0xc]
8001fb66:	fe b0 9a 43 	rcall	80012fec <print_dbg_hex>
    print_dbg(", h:");
8001fb6a:	0a 9c       	mov	r12,r5
8001fb6c:	fe b0 9a 18 	rcall	80012f9c <print_dbg>
    print_dbg_ulong((u32)(allRegions[i]->h));
8001fb70:	01 8c       	ld.ub	r12,r0[0x0]
8001fb72:	fe b0 9a 1b 	rcall	80012fa8 <print_dbg_ulong>
    print_dbg(", len: 0x");
8001fb76:	0c 9c       	mov	r12,r6
8001fb78:	fe b0 9a 12 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]->len));
8001fb7c:	01 9c       	ld.ub	r12,r0[0x1]
8001fb7e:	fe b0 9a 15 	rcall	80012fa8 <print_dbg_ulong>
  //  screen_clear();

  // test
  print_dbg("\r\n\r\n regions:");
  for(i = 0; i<numRegions; i++) {
    print_dbg("\r\n ( ");
8001fb82:	fe cc a3 02 	sub	r12,pc,-23806
8001fb86:	fe b0 9a 0b 	rcall	80012f9c <print_dbg>
    print_dbg_hex(i);
8001fb8a:	60 1c       	ld.w	r12,r0[0x4]
8001fb8c:	fe b0 9a 30 	rcall	80012fec <print_dbg_hex>
    print_dbg(" ) @ 0x");
8001fb90:	04 9c       	mov	r12,r2
8001fb92:	fe b0 9a 05 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]));
8001fb96:	30 4c       	mov	r12,4
8001fb98:	fe b0 9a 2a 	rcall	80012fec <print_dbg_hex>
    print_dbg(", data: @ 0x");
8001fb9c:	06 9c       	mov	r12,r3
8001fb9e:	fe b0 99 ff 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]->data));
8001fba2:	02 9c       	mov	r12,r1
8001fba4:	fe b0 9a 24 	rcall	80012fec <print_dbg_hex>
    print_dbg(", w:");
8001fba8:	08 9c       	mov	r12,r4
8001fbaa:	fe b0 99 f9 	rcall	80012f9c <print_dbg>
    print_dbg_ulong((u32)(allRegions[i]->w));
8001fbae:	62 3c       	ld.w	r12,r1[0xc]
8001fbb0:	fe b0 9a 1e 	rcall	80012fec <print_dbg_hex>
    print_dbg(", h:");
8001fbb4:	0a 9c       	mov	r12,r5
8001fbb6:	fe b0 99 f3 	rcall	80012f9c <print_dbg>
    print_dbg_ulong((u32)(allRegions[i]->h));
8001fbba:	03 8c       	ld.ub	r12,r1[0x0]
8001fbbc:	fe b0 99 f6 	rcall	80012fa8 <print_dbg_ulong>
    print_dbg(", len: 0x");
8001fbc0:	0c 9c       	mov	r12,r6
8001fbc2:	fe b0 99 ed 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]->len));
8001fbc6:	03 9c       	ld.ub	r12,r1[0x1]
8001fbc8:	fe b0 99 f0 	rcall	80012fa8 <print_dbg_ulong>
  //  screen_clear();

  // test
  print_dbg("\r\n\r\n regions:");
  for(i = 0; i<numRegions; i++) {
    print_dbg("\r\n ( ");
8001fbcc:	fe cc a3 4c 	sub	r12,pc,-23732
    print_dbg_hex(i);
8001fbd0:	fe b0 99 e6 	rcall	80012f9c <print_dbg>
8001fbd4:	62 1c       	ld.w	r12,r1[0x4]
    print_dbg(" ) @ 0x");
8001fbd6:	fe b0 9a 0b 	rcall	80012fec <print_dbg_hex>
8001fbda:	04 9c       	mov	r12,r2
    print_dbg_hex((u32)(allRegions[i]));
8001fbdc:	fe b0 99 e0 	rcall	80012f9c <print_dbg>
8001fbe0:	30 5c       	mov	r12,5
    print_dbg(", data: @ 0x");
8001fbe2:	fe b0 9a 05 	rcall	80012fec <print_dbg_hex>
8001fbe6:	06 9c       	mov	r12,r3
    print_dbg_hex((u32)(allRegions[i]->data));
8001fbe8:	fe b0 99 da 	rcall	80012f9c <print_dbg>
8001fbec:	40 0c       	lddsp	r12,sp[0x0]
8001fbee:	fe b0 99 ff 	rcall	80012fec <print_dbg_hex>
    print_dbg(", w:");
8001fbf2:	08 9c       	mov	r12,r4
8001fbf4:	fe b0 99 d4 	rcall	80012f9c <print_dbg>
    print_dbg_ulong((u32)(allRegions[i]->w));
8001fbf8:	40 08       	lddsp	r8,sp[0x0]
8001fbfa:	70 3c       	ld.w	r12,r8[0xc]
8001fbfc:	fe b0 99 f8 	rcall	80012fec <print_dbg_hex>
    print_dbg(", h:");
8001fc00:	0a 9c       	mov	r12,r5
8001fc02:	fe b0 99 cd 	rcall	80012f9c <print_dbg>
    print_dbg_ulong((u32)(allRegions[i]->h));
8001fc06:	40 08       	lddsp	r8,sp[0x0]
8001fc08:	11 8c       	ld.ub	r12,r8[0x0]
8001fc0a:	fe b0 99 cf 	rcall	80012fa8 <print_dbg_ulong>
    print_dbg(", len: 0x");
8001fc0e:	0c 9c       	mov	r12,r6
8001fc10:	fe b0 99 c6 	rcall	80012f9c <print_dbg>
    print_dbg_hex((u32)(allRegions[i]->len));
8001fc14:	40 08       	lddsp	r8,sp[0x0]
8001fc16:	11 9c       	ld.ub	r12,r8[0x1]
8001fc18:	fe b0 99 c8 	rcall	80012fa8 <print_dbg_ulong>
  }
}
8001fc1c:	fe cc a3 9c 	sub	r12,pc,-23652
8001fc20:	fe b0 99 be 	rcall	80012f9c <print_dbg>
8001fc24:	40 08       	lddsp	r8,sp[0x0]
8001fc26:	70 1c       	ld.w	r12,r8[0x4]
8001fc28:	fe b0 99 e2 	rcall	80012fec <print_dbg_hex>
8001fc2c:	2f fd       	sub	sp,-4
8001fc2e:	d8 32       	popm	r0-r7,pc

8001fc30 <_stext>:
8001fc30:	e0 7d 00 00 	mov	sp,65536
8001fc34:	fe c0 c2 34 	sub	r0,pc,-15820
8001fc38:	e3 b0 00 01 	mtsr	0x4,r0
8001fc3c:	d5 53       	csrf	0x15
8001fc3e:	30 80       	mov	r0,8
8001fc40:	e0 61 05 90 	mov	r1,1424
8001fc44:	02 30       	cp.w	r0,r1
8001fc46:	c0 72       	brcc	8001fc54 <idata_load_loop_end>
8001fc48:	fe c2 9f 38 	sub	r2,pc,-24776

8001fc4c <idata_load_loop>:
8001fc4c:	a5 05       	ld.d	r4,r2++
8001fc4e:	a1 24       	st.d	r0++,r4
8001fc50:	02 30       	cp.w	r0,r1
8001fc52:	cf d3       	brcs	8001fc4c <idata_load_loop>

8001fc54 <idata_load_loop_end>:
8001fc54:	e0 60 05 90 	mov	r0,1424
8001fc58:	e0 61 33 08 	mov	r1,13064
8001fc5c:	02 30       	cp.w	r0,r1
8001fc5e:	c0 62       	brcc	8001fc6a <udata_clear_loop_end>
8001fc60:	30 02       	mov	r2,0
8001fc62:	30 03       	mov	r3,0

8001fc64 <udata_clear_loop>:
8001fc64:	a1 22       	st.d	r0++,r2
8001fc66:	02 30       	cp.w	r0,r1
8001fc68:	cf e3       	brcs	8001fc64 <udata_clear_loop>

8001fc6a <udata_clear_loop_end>:
8001fc6a:	fe cf 57 8e 	sub	pc,pc,22414
8001fc6e:	d7 03       	nop

8001fc70 <sinf>:
8001fc70:	d4 01       	pushm	lr
8001fc72:	20 2d       	sub	sp,8
8001fc74:	e0 69 0f d8 	mov	r9,4056
8001fc78:	ea 19 3f 49 	orh	r9,0x3f49
8001fc7c:	18 9b       	mov	r11,r12
8001fc7e:	f1 dc c0 1f 	bfextu	r8,r12,0x0,0x1f
8001fc82:	12 38       	cp.w	r8,r9
8001fc84:	e0 89 00 05 	brgt	8001fc8e <sinf+0x1e>
8001fc88:	30 0a       	mov	r10,0
8001fc8a:	30 0b       	mov	r11,0
8001fc8c:	c1 98       	rjmp	8001fcbe <sinf+0x4e>
8001fc8e:	e0 69 ff ff 	mov	r9,65535
8001fc92:	ea 19 7f 7f 	orh	r9,0x7f7f
8001fc96:	12 38       	cp.w	r8,r9
8001fc98:	e0 8a 00 05 	brle	8001fca2 <sinf+0x32>
8001fc9c:	e0 a0 16 54 	rcall	80022944 <__avr32_f32_sub>
8001fca0:	c2 18       	rjmp	8001fce2 <sinf+0x72>
8001fca2:	1a 9b       	mov	r11,sp
8001fca4:	e0 a0 07 06 	rcall	80020ab0 <__ieee754_rem_pio2f>
8001fca8:	f1 dc c0 02 	bfextu	r8,r12,0x0,0x2
8001fcac:	58 18       	cp.w	r8,1
8001fcae:	c0 b0       	breq	8001fcc4 <sinf+0x54>
8001fcb0:	58 28       	cp.w	r8,2
8001fcb2:	c0 e0       	breq	8001fcce <sinf+0x5e>
8001fcb4:	40 1b       	lddsp	r11,sp[0x4]
8001fcb6:	40 0c       	lddsp	r12,sp[0x0]
8001fcb8:	58 08       	cp.w	r8,0
8001fcba:	c1 01       	brne	8001fcda <sinf+0x6a>
8001fcbc:	30 1a       	mov	r10,1
8001fcbe:	e0 a0 0e 9d 	rcall	800219f8 <__kernel_sinf>
8001fcc2:	c1 08       	rjmp	8001fce2 <sinf+0x72>
8001fcc4:	40 1b       	lddsp	r11,sp[0x4]
8001fcc6:	40 0c       	lddsp	r12,sp[0x0]
8001fcc8:	e0 a0 0b 18 	rcall	800212f8 <__kernel_cosf>
8001fccc:	c0 b8       	rjmp	8001fce2 <sinf+0x72>
8001fcce:	30 1a       	mov	r10,1
8001fcd0:	40 1b       	lddsp	r11,sp[0x4]
8001fcd2:	40 0c       	lddsp	r12,sp[0x0]
8001fcd4:	e0 a0 0e 92 	rcall	800219f8 <__kernel_sinf>
8001fcd8:	c0 38       	rjmp	8001fcde <sinf+0x6e>
8001fcda:	e0 a0 0b 0f 	rcall	800212f8 <__kernel_cosf>
8001fcde:	ee 1c 80 00 	eorh	r12,0x8000
8001fce2:	2f ed       	sub	sp,-8
8001fce4:	d8 02       	popm	pc
8001fce6:	d7 03       	nop

8001fce8 <fmod>:
8001fce8:	d4 31       	pushm	r0-r7,lr
8001fcea:	20 9d       	sub	sp,36
8001fcec:	e0 67 00 88 	mov	r7,136
8001fcf0:	10 94       	mov	r4,r8
8001fcf2:	14 92       	mov	r2,r10
8001fcf4:	16 93       	mov	r3,r11
8001fcf6:	12 95       	mov	r5,r9
8001fcf8:	e0 a0 02 0e 	rcall	80020114 <__ieee754_fmod>
8001fcfc:	6e 08       	ld.w	r8,r7[0x0]
8001fcfe:	14 90       	mov	r0,r10
8001fd00:	16 91       	mov	r1,r11
8001fd02:	5b f8       	cp.w	r8,-1
8001fd04:	c3 e0       	breq	8001fd80 <fmod+0x98>
8001fd06:	08 9a       	mov	r10,r4
8001fd08:	0a 9b       	mov	r11,r5
8001fd0a:	e0 a0 0f b7 	rcall	80021c78 <__isnand>
8001fd0e:	c3 91       	brne	8001fd80 <fmod+0x98>
8001fd10:	04 9a       	mov	r10,r2
8001fd12:	06 9b       	mov	r11,r3
8001fd14:	e0 a0 0f b2 	rcall	80021c78 <__isnand>
8001fd18:	18 96       	mov	r6,r12
8001fd1a:	c3 31       	brne	8001fd80 <fmod+0x98>
8001fd1c:	30 08       	mov	r8,0
8001fd1e:	30 09       	mov	r9,0
8001fd20:	08 9a       	mov	r10,r4
8001fd22:	0a 9b       	mov	r11,r5
8001fd24:	e0 a0 13 17 	rcall	80022352 <__avr32_f64_cmp_eq>
8001fd28:	c2 c0       	breq	8001fd80 <fmod+0x98>
8001fd2a:	30 18       	mov	r8,1
8001fd2c:	fa e5 00 10 	st.d	sp[16],r4
8001fd30:	50 08       	stdsp	sp[0x0],r8
8001fd32:	50 86       	stdsp	sp[0x20],r6
8001fd34:	fe c8 a4 a8 	sub	r8,pc,-23384
8001fd38:	fa e3 00 08 	st.d	sp[8],r2
8001fd3c:	50 18       	stdsp	sp[0x4],r8
8001fd3e:	6e 07       	ld.w	r7,r7[0x0]
8001fd40:	58 07       	cp.w	r7,0
8001fd42:	c0 41       	brne	8001fd4a <fmod+0x62>
8001fd44:	fa e3 00 18 	st.d	sp[24],r2
8001fd48:	c0 b8       	rjmp	8001fd5e <fmod+0x76>
8001fd4a:	30 08       	mov	r8,0
8001fd4c:	30 09       	mov	r9,0
8001fd4e:	10 9a       	mov	r10,r8
8001fd50:	12 9b       	mov	r11,r9
8001fd52:	e0 a0 13 bb 	rcall	800224c8 <__avr32_f64_div>
8001fd56:	fa eb 00 18 	st.d	sp[24],r10
8001fd5a:	58 27       	cp.w	r7,2
8001fd5c:	c0 50       	breq	8001fd66 <fmod+0x7e>
8001fd5e:	1a 9c       	mov	r12,sp
8001fd60:	e0 a0 0f 9a 	rcall	80021c94 <matherr>
8001fd64:	c0 51       	brne	8001fd6e <fmod+0x86>
8001fd66:	e0 a0 19 25 	rcall	80022fb0 <__errno>
8001fd6a:	32 18       	mov	r8,33
8001fd6c:	99 08       	st.w	r12[0x0],r8
8001fd6e:	40 88       	lddsp	r8,sp[0x20]
8001fd70:	58 08       	cp.w	r8,0
8001fd72:	c0 50       	breq	8001fd7c <fmod+0x94>
8001fd74:	e0 a0 19 1e 	rcall	80022fb0 <__errno>
8001fd78:	40 88       	lddsp	r8,sp[0x20]
8001fd7a:	99 08       	st.w	r12[0x0],r8
8001fd7c:	fa e0 00 18 	ld.d	r0,sp[24]
8001fd80:	00 9a       	mov	r10,r0
8001fd82:	02 9b       	mov	r11,r1
8001fd84:	2f 7d       	sub	sp,-36
8001fd86:	d8 32       	popm	r0-r7,pc

8001fd88 <powf>:
8001fd88:	d4 31       	pushm	r0-r7,lr
8001fd8a:	20 bd       	sub	sp,44
8001fd8c:	18 96       	mov	r6,r12
8001fd8e:	16 97       	mov	r7,r11
8001fd90:	e0 a0 02 dc 	rcall	80020348 <__ieee754_powf>
8001fd94:	e0 65 00 88 	mov	r5,136
8001fd98:	18 93       	mov	r3,r12
8001fd9a:	6a 08       	ld.w	r8,r5[0x0]
8001fd9c:	5b f8       	cp.w	r8,-1
8001fd9e:	e0 80 01 53 	breq	80020044 <powf+0x2bc>
8001fda2:	0e 9c       	mov	r12,r7
8001fda4:	e0 a0 0f 06 	rcall	80021bb0 <isnanf>
8001fda8:	18 94       	mov	r4,r12
8001fdaa:	e0 81 01 4d 	brne	80020044 <powf+0x2bc>
8001fdae:	0c 9c       	mov	r12,r6
8001fdb0:	e0 a0 0f 00 	rcall	80021bb0 <isnanf>
8001fdb4:	18 92       	mov	r2,r12
8001fdb6:	c2 70       	breq	8001fe04 <powf+0x7c>
8001fdb8:	30 0b       	mov	r11,0
8001fdba:	0e 9c       	mov	r12,r7
8001fdbc:	e0 a0 13 46 	rcall	80022448 <__avr32_f32_cmp_eq>
8001fdc0:	e0 80 01 42 	breq	80020044 <powf+0x2bc>
8001fdc4:	30 18       	mov	r8,1
8001fdc6:	50 28       	stdsp	sp[0x8],r8
8001fdc8:	fe c8 a5 34 	sub	r8,pc,-23244
8001fdcc:	0c 9c       	mov	r12,r6
8001fdce:	50 38       	stdsp	sp[0xc],r8
8001fdd0:	50 a4       	stdsp	sp[0x28],r4
8001fdd2:	e0 a0 17 31 	rcall	80022c34 <__avr32_f32_to_f64>
8001fdd6:	0e 9c       	mov	r12,r7
8001fdd8:	fa eb 00 10 	st.d	sp[16],r10
8001fddc:	e0 a0 17 2c 	rcall	80022c34 <__avr32_f32_to_f64>
8001fde0:	30 08       	mov	r8,0
8001fde2:	fa eb 00 18 	st.d	sp[24],r10
8001fde6:	fc 19 3f f0 	movh	r9,0x3ff0
8001fdea:	fa e9 00 20 	st.d	sp[32],r8
8001fdee:	6a 0a       	ld.w	r10,r5[0x0]
8001fdf0:	5b fa       	cp.w	r10,-1
8001fdf2:	5f 0b       	sreq	r11
8001fdf4:	58 2a       	cp.w	r10,2
8001fdf6:	5f 0a       	sreq	r10
8001fdf8:	16 4a       	or	r10,r11
8001fdfa:	e8 0a 18 00 	cp.b	r10,r4
8001fdfe:	e0 81 01 17 	brne	8002002c <powf+0x2a4>
8001fe02:	c8 68       	rjmp	8001ff0e <powf+0x186>
8001fe04:	30 0b       	mov	r11,0
8001fe06:	0c 9c       	mov	r12,r6
8001fe08:	e0 a0 13 20 	rcall	80022448 <__avr32_f32_cmp_eq>
8001fe0c:	c4 a0       	breq	8001fea0 <powf+0x118>
8001fe0e:	30 0b       	mov	r11,0
8001fe10:	0e 9c       	mov	r12,r7
8001fe12:	e0 a0 13 1b 	rcall	80022448 <__avr32_f32_cmp_eq>
8001fe16:	c1 e0       	breq	8001fe52 <powf+0xca>
8001fe18:	30 18       	mov	r8,1
8001fe1a:	50 28       	stdsp	sp[0x8],r8
8001fe1c:	fe c8 a5 88 	sub	r8,pc,-23160
8001fe20:	0c 9c       	mov	r12,r6
8001fe22:	50 38       	stdsp	sp[0xc],r8
8001fe24:	50 a2       	stdsp	sp[0x28],r2
8001fe26:	e0 a0 17 07 	rcall	80022c34 <__avr32_f32_to_f64>
8001fe2a:	0e 9c       	mov	r12,r7
8001fe2c:	fa eb 00 10 	st.d	sp[16],r10
8001fe30:	e0 a0 17 02 	rcall	80022c34 <__avr32_f32_to_f64>
8001fe34:	30 08       	mov	r8,0
8001fe36:	30 09       	mov	r9,0
8001fe38:	fa eb 00 18 	st.d	sp[24],r10
8001fe3c:	fa e9 00 20 	st.d	sp[32],r8
8001fe40:	6a 08       	ld.w	r8,r5[0x0]
8001fe42:	58 08       	cp.w	r8,0
8001fe44:	c6 50       	breq	8001ff0e <powf+0x186>
8001fe46:	30 08       	mov	r8,0
8001fe48:	fc 19 3f f0 	movh	r9,0x3ff0
8001fe4c:	fa e9 00 20 	st.d	sp[32],r8
8001fe50:	ce e8       	rjmp	8002002c <powf+0x2a4>
8001fe52:	0e 9c       	mov	r12,r7
8001fe54:	e0 a0 0e 57 	rcall	80021b02 <finitef>
8001fe58:	e0 80 00 f6 	breq	80020044 <powf+0x2bc>
8001fe5c:	30 0b       	mov	r11,0
8001fe5e:	0e 9c       	mov	r12,r7
8001fe60:	e0 a0 13 1a 	rcall	80022494 <__avr32_f32_cmp_lt>
8001fe64:	e0 80 00 f0 	breq	80020044 <powf+0x2bc>
8001fe68:	30 18       	mov	r8,1
8001fe6a:	50 28       	stdsp	sp[0x8],r8
8001fe6c:	fe c8 a5 d8 	sub	r8,pc,-23080
8001fe70:	0c 9c       	mov	r12,r6
8001fe72:	50 38       	stdsp	sp[0xc],r8
8001fe74:	50 a2       	stdsp	sp[0x28],r2
8001fe76:	e0 a0 16 df 	rcall	80022c34 <__avr32_f32_to_f64>
8001fe7a:	0e 9c       	mov	r12,r7
8001fe7c:	fa eb 00 10 	st.d	sp[16],r10
8001fe80:	e0 a0 16 da 	rcall	80022c34 <__avr32_f32_to_f64>
8001fe84:	fa eb 00 18 	st.d	sp[24],r10
8001fe88:	6a 08       	ld.w	r8,r5[0x0]
8001fe8a:	58 08       	cp.w	r8,0
8001fe8c:	c3 20       	breq	8001fef0 <powf+0x168>
8001fe8e:	30 0a       	mov	r10,0
8001fe90:	f0 6b 00 00 	mov	r11,-1048576
8001fe94:	fa eb 00 20 	st.d	sp[32],r10
8001fe98:	58 28       	cp.w	r8,2
8001fe9a:	c4 00       	breq	8001ff1a <powf+0x192>
8001fe9c:	c3 98       	rjmp	8001ff0e <powf+0x186>
8001fe9e:	d7 03       	nop
8001fea0:	06 9c       	mov	r12,r3
8001fea2:	e0 a0 0e 30 	rcall	80021b02 <finitef>
8001fea6:	18 94       	mov	r4,r12
8001fea8:	e0 81 00 92 	brne	8001ffcc <powf+0x244>
8001feac:	0c 9c       	mov	r12,r6
8001feae:	e0 a0 0e 2a 	rcall	80021b02 <finitef>
8001feb2:	e0 80 00 8d 	breq	8001ffcc <powf+0x244>
8001feb6:	0e 9c       	mov	r12,r7
8001feb8:	e0 a0 0e 25 	rcall	80021b02 <finitef>
8001febc:	e0 80 00 88 	breq	8001ffcc <powf+0x244>
8001fec0:	06 9c       	mov	r12,r3
8001fec2:	e0 a0 0e 77 	rcall	80021bb0 <isnanf>
8001fec6:	fe c8 a6 32 	sub	r8,pc,-22990
8001feca:	58 0c       	cp.w	r12,0
8001fecc:	c2 b0       	breq	8001ff22 <powf+0x19a>
8001fece:	50 38       	stdsp	sp[0xc],r8
8001fed0:	30 18       	mov	r8,1
8001fed2:	0c 9c       	mov	r12,r6
8001fed4:	50 28       	stdsp	sp[0x8],r8
8001fed6:	50 a4       	stdsp	sp[0x28],r4
8001fed8:	e0 a0 16 ae 	rcall	80022c34 <__avr32_f32_to_f64>
8001fedc:	0e 9c       	mov	r12,r7
8001fede:	fa eb 00 10 	st.d	sp[16],r10
8001fee2:	e0 a0 16 a9 	rcall	80022c34 <__avr32_f32_to_f64>
8001fee6:	fa eb 00 18 	st.d	sp[24],r10
8001feea:	6a 07       	ld.w	r7,r5[0x0]
8001feec:	58 07       	cp.w	r7,0
8001feee:	c0 61       	brne	8001fefa <powf+0x172>
8001fef0:	30 08       	mov	r8,0
8001fef2:	30 09       	mov	r9,0
8001fef4:	fa e9 00 20 	st.d	sp[32],r8
8001fef8:	c0 b8       	rjmp	8001ff0e <powf+0x186>
8001fefa:	30 08       	mov	r8,0
8001fefc:	30 09       	mov	r9,0
8001fefe:	10 9a       	mov	r10,r8
8001ff00:	12 9b       	mov	r11,r9
8001ff02:	e0 a0 12 e3 	rcall	800224c8 <__avr32_f64_div>
8001ff06:	fa eb 00 20 	st.d	sp[32],r10
8001ff0a:	58 27       	cp.w	r7,2
8001ff0c:	c0 70       	breq	8001ff1a <powf+0x192>
8001ff0e:	fa cc ff f8 	sub	r12,sp,-8
8001ff12:	e0 a0 0e c1 	rcall	80021c94 <matherr>
8001ff16:	e0 81 00 8b 	brne	8002002c <powf+0x2a4>
8001ff1a:	e0 a0 18 4b 	rcall	80022fb0 <__errno>
8001ff1e:	32 18       	mov	r8,33
8001ff20:	c8 58       	rjmp	8002002a <powf+0x2a2>
8001ff22:	50 38       	stdsp	sp[0xc],r8
8001ff24:	30 38       	mov	r8,3
8001ff26:	50 ac       	stdsp	sp[0x28],r12
8001ff28:	50 28       	stdsp	sp[0x8],r8
8001ff2a:	0c 9c       	mov	r12,r6
8001ff2c:	e0 a0 16 84 	rcall	80022c34 <__avr32_f32_to_f64>
8001ff30:	0e 9c       	mov	r12,r7
8001ff32:	fa eb 00 10 	st.d	sp[16],r10
8001ff36:	e0 a0 16 7f 	rcall	80022c34 <__avr32_f32_to_f64>
8001ff3a:	fa eb 00 18 	st.d	sp[24],r10
8001ff3e:	6a 08       	ld.w	r8,r5[0x0]
8001ff40:	58 08       	cp.w	r8,0
8001ff42:	c2 61       	brne	8001ff8e <powf+0x206>
8001ff44:	fc 18 e0 00 	movh	r8,0xe000
8001ff48:	e0 69 ff ff 	mov	r9,65535
8001ff4c:	ea 19 47 ef 	orh	r9,0x47ef
8001ff50:	0c 9c       	mov	r12,r6
8001ff52:	fa e9 00 20 	st.d	sp[32],r8
8001ff56:	30 0b       	mov	r11,0
8001ff58:	e0 a0 12 9e 	rcall	80022494 <__avr32_f32_cmp_lt>
8001ff5c:	c5 a0       	breq	80020010 <powf+0x288>
8001ff5e:	fc 1b 3f 00 	movh	r11,0x3f00
8001ff62:	0e 9c       	mov	r12,r7
8001ff64:	e0 a0 15 ae 	rcall	80022ac0 <__avr32_f32_mul>
8001ff68:	e0 a0 16 66 	rcall	80022c34 <__avr32_f32_to_f64>
8001ff6c:	16 99       	mov	r9,r11
8001ff6e:	50 0a       	stdsp	sp[0x0],r10
8001ff70:	50 19       	stdsp	sp[0x4],r9
8001ff72:	e0 a0 0e 97 	rcall	80021ca0 <rint>
8001ff76:	40 19       	lddsp	r9,sp[0x4]
8001ff78:	40 08       	lddsp	r8,sp[0x0]
8001ff7a:	e0 a0 11 ec 	rcall	80022352 <__avr32_f64_cmp_eq>
8001ff7e:	c4 91       	brne	80020010 <powf+0x288>
8001ff80:	fc 18 e0 00 	movh	r8,0xe000
8001ff84:	e0 69 ff ff 	mov	r9,65535
8001ff88:	ea 19 c7 ef 	orh	r9,0xc7ef
8001ff8c:	c4 08       	rjmp	8002000c <powf+0x284>
8001ff8e:	30 08       	mov	r8,0
8001ff90:	fc 19 7f f0 	movh	r9,0x7ff0
8001ff94:	0c 9c       	mov	r12,r6
8001ff96:	fa e9 00 20 	st.d	sp[32],r8
8001ff9a:	30 0b       	mov	r11,0
8001ff9c:	e0 a0 12 7c 	rcall	80022494 <__avr32_f32_cmp_lt>
8001ffa0:	c3 80       	breq	80020010 <powf+0x288>
8001ffa2:	fc 1b 3f 00 	movh	r11,0x3f00
8001ffa6:	0e 9c       	mov	r12,r7
8001ffa8:	e0 a0 15 8c 	rcall	80022ac0 <__avr32_f32_mul>
8001ffac:	e0 a0 16 44 	rcall	80022c34 <__avr32_f32_to_f64>
8001ffb0:	16 99       	mov	r9,r11
8001ffb2:	50 0a       	stdsp	sp[0x0],r10
8001ffb4:	50 19       	stdsp	sp[0x4],r9
8001ffb6:	e0 a0 0e 75 	rcall	80021ca0 <rint>
8001ffba:	40 19       	lddsp	r9,sp[0x4]
8001ffbc:	40 08       	lddsp	r8,sp[0x0]
8001ffbe:	e0 a0 11 ca 	rcall	80022352 <__avr32_f64_cmp_eq>
8001ffc2:	c2 71       	brne	80020010 <powf+0x288>
8001ffc4:	30 08       	mov	r8,0
8001ffc6:	f0 69 00 00 	mov	r9,-1048576
8001ffca:	c2 18       	rjmp	8002000c <powf+0x284>
8001ffcc:	30 0b       	mov	r11,0
8001ffce:	06 9c       	mov	r12,r3
8001ffd0:	e0 a0 12 3c 	rcall	80022448 <__avr32_f32_cmp_eq>
8001ffd4:	c3 80       	breq	80020044 <powf+0x2bc>
8001ffd6:	0c 9c       	mov	r12,r6
8001ffd8:	e0 a0 0d 95 	rcall	80021b02 <finitef>
8001ffdc:	c3 40       	breq	80020044 <powf+0x2bc>
8001ffde:	0e 9c       	mov	r12,r7
8001ffe0:	e0 a0 0d 91 	rcall	80021b02 <finitef>
8001ffe4:	c3 00       	breq	80020044 <powf+0x2bc>
8001ffe6:	30 48       	mov	r8,4
8001ffe8:	50 28       	stdsp	sp[0x8],r8
8001ffea:	fe c8 a7 56 	sub	r8,pc,-22698
8001ffee:	50 38       	stdsp	sp[0xc],r8
8001fff0:	30 08       	mov	r8,0
8001fff2:	0c 9c       	mov	r12,r6
8001fff4:	50 a8       	stdsp	sp[0x28],r8
8001fff6:	e0 a0 16 1f 	rcall	80022c34 <__avr32_f32_to_f64>
8001fffa:	0e 9c       	mov	r12,r7
8001fffc:	fa eb 00 10 	st.d	sp[16],r10
80020000:	e0 a0 16 1a 	rcall	80022c34 <__avr32_f32_to_f64>
80020004:	30 08       	mov	r8,0
80020006:	fa eb 00 18 	st.d	sp[24],r10
8002000a:	30 09       	mov	r9,0
8002000c:	fa e9 00 20 	st.d	sp[32],r8
80020010:	e0 68 00 88 	mov	r8,136
80020014:	70 08       	ld.w	r8,r8[0x0]
80020016:	58 28       	cp.w	r8,2
80020018:	c0 60       	breq	80020024 <powf+0x29c>
8002001a:	fa cc ff f8 	sub	r12,sp,-8
8002001e:	e0 a0 0e 3b 	rcall	80021c94 <matherr>
80020022:	c0 51       	brne	8002002c <powf+0x2a4>
80020024:	e0 a0 17 c6 	rcall	80022fb0 <__errno>
80020028:	32 28       	mov	r8,34
8002002a:	99 08       	st.w	r12[0x0],r8
8002002c:	40 a8       	lddsp	r8,sp[0x28]
8002002e:	58 08       	cp.w	r8,0
80020030:	c0 50       	breq	8002003a <powf+0x2b2>
80020032:	e0 a0 17 bf 	rcall	80022fb0 <__errno>
80020036:	40 a8       	lddsp	r8,sp[0x28]
80020038:	99 08       	st.w	r12[0x0],r8
8002003a:	fa ea 00 20 	ld.d	r10,sp[32]
8002003e:	e0 a0 16 2b 	rcall	80022c94 <__avr32_f64_to_f32>
80020042:	18 93       	mov	r3,r12
80020044:	06 9c       	mov	r12,r3
80020046:	2f 5d       	sub	sp,-44
80020048:	d8 32       	popm	r0-r7,pc
8002004a:	d7 03       	nop

8002004c <log>:
8002004c:	d4 31       	pushm	r0-r7,lr
8002004e:	20 9d       	sub	sp,36
80020050:	e0 67 00 88 	mov	r7,136
80020054:	14 94       	mov	r4,r10
80020056:	16 95       	mov	r5,r11
80020058:	e0 a0 07 32 	rcall	80020ebc <__ieee754_log>
8002005c:	6e 08       	ld.w	r8,r7[0x0]
8002005e:	14 92       	mov	r2,r10
80020060:	16 93       	mov	r3,r11
80020062:	5b f8       	cp.w	r8,-1
80020064:	c5 40       	breq	8002010c <log+0xc0>
80020066:	08 9a       	mov	r10,r4
80020068:	0a 9b       	mov	r11,r5
8002006a:	e0 a0 0e 07 	rcall	80021c78 <__isnand>
8002006e:	18 96       	mov	r6,r12
80020070:	c4 e1       	brne	8002010c <log+0xc0>
80020072:	08 98       	mov	r8,r4
80020074:	0a 99       	mov	r9,r5
80020076:	30 0a       	mov	r10,0
80020078:	30 0b       	mov	r11,0
8002007a:	e0 a0 11 b3 	rcall	800223e0 <__avr32_f64_cmp_lt>
8002007e:	c4 71       	brne	8002010c <log+0xc0>
80020080:	fe c8 a7 e4 	sub	r8,pc,-22556
80020084:	50 86       	stdsp	sp[0x20],r6
80020086:	fa e5 00 08 	st.d	sp[8],r4
8002008a:	fa e5 00 10 	st.d	sp[16],r4
8002008e:	50 18       	stdsp	sp[0x4],r8
80020090:	6e 07       	ld.w	r7,r7[0x0]
80020092:	58 07       	cp.w	r7,0
80020094:	c0 81       	brne	800200a4 <log+0x58>
80020096:	fc 18 e0 00 	movh	r8,0xe000
8002009a:	e0 69 ff ff 	mov	r9,65535
8002009e:	ea 19 c7 ef 	orh	r9,0xc7ef
800200a2:	c0 48       	rjmp	800200aa <log+0x5e>
800200a4:	30 08       	mov	r8,0
800200a6:	f0 69 00 00 	mov	r9,-1048576
800200aa:	fa e9 00 18 	st.d	sp[24],r8
800200ae:	08 9a       	mov	r10,r4
800200b0:	0a 9b       	mov	r11,r5
800200b2:	30 08       	mov	r8,0
800200b4:	30 09       	mov	r9,0
800200b6:	e0 a0 11 4e 	rcall	80022352 <__avr32_f64_cmp_eq>
800200ba:	c0 e0       	breq	800200d6 <log+0x8a>
800200bc:	30 28       	mov	r8,2
800200be:	50 08       	stdsp	sp[0x0],r8
800200c0:	10 37       	cp.w	r7,r8
800200c2:	c0 50       	breq	800200cc <log+0x80>
800200c4:	1a 9c       	mov	r12,sp
800200c6:	e0 a0 0d e7 	rcall	80021c94 <matherr>
800200ca:	c1 81       	brne	800200fa <log+0xae>
800200cc:	e0 a0 17 72 	rcall	80022fb0 <__errno>
800200d0:	32 28       	mov	r8,34
800200d2:	99 08       	st.w	r12[0x0],r8
800200d4:	c1 38       	rjmp	800200fa <log+0xae>
800200d6:	30 18       	mov	r8,1
800200d8:	50 08       	stdsp	sp[0x0],r8
800200da:	58 27       	cp.w	r7,2
800200dc:	c0 50       	breq	800200e6 <log+0x9a>
800200de:	1a 9c       	mov	r12,sp
800200e0:	e0 a0 0d da 	rcall	80021c94 <matherr>
800200e4:	c0 51       	brne	800200ee <log+0xa2>
800200e6:	e0 a0 17 65 	rcall	80022fb0 <__errno>
800200ea:	32 18       	mov	r8,33
800200ec:	99 08       	st.w	r12[0x0],r8
800200ee:	fe cc c2 4a 	sub	r12,pc,-15798
800200f2:	e0 a0 0d d2 	rcall	80021c96 <nan>
800200f6:	fa eb 00 18 	st.d	sp[24],r10
800200fa:	40 88       	lddsp	r8,sp[0x20]
800200fc:	58 08       	cp.w	r8,0
800200fe:	c0 50       	breq	80020108 <log+0xbc>
80020100:	e0 a0 17 58 	rcall	80022fb0 <__errno>
80020104:	40 88       	lddsp	r8,sp[0x20]
80020106:	99 08       	st.w	r12[0x0],r8
80020108:	fa e2 00 18 	ld.d	r2,sp[24]
8002010c:	04 9a       	mov	r10,r2
8002010e:	06 9b       	mov	r11,r3
80020110:	2f 7d       	sub	sp,-36
80020112:	d8 32       	popm	r0-r7,pc

80020114 <__ieee754_fmod>:
80020114:	d4 31       	pushm	r0-r7,lr
80020116:	e0 6c ff ff 	mov	r12,65535
8002011a:	ea 1c 7f ef 	orh	r12,0x7fef
8002011e:	ef d9 c0 1f 	bfextu	r7,r9,0x0,0x1f
80020122:	ef e8 10 01 	or	r1,r7,r8
80020126:	5f 01       	sreq	r1
80020128:	16 95       	mov	r5,r11
8002012a:	ed db c0 1f 	bfextu	r6,r11,0x0,0x1f
8002012e:	14 94       	mov	r4,r10
80020130:	18 36       	cp.w	r6,r12
80020132:	5f 93       	srgt	r3
80020134:	10 90       	mov	r0,r8
80020136:	e3 e3 10 03 	or	r3,r1,r3
8002013a:	10 9e       	mov	lr,r8
8002013c:	14 9c       	mov	r12,r10
8002013e:	e6 15 80 00 	andh	r5,0x8000,COH
80020142:	30 01       	mov	r1,0
80020144:	e2 03 18 00 	cp.b	r3,r1
80020148:	c0 b1       	brne	8002015e <__ieee754_fmod+0x4a>
8002014a:	f0 01 11 00 	rsub	r1,r8,0
8002014e:	fc 14 7f f0 	movh	r4,0x7ff0
80020152:	10 41       	or	r1,r8
80020154:	ef e1 13 f1 	or	r1,r7,r1>>0x1f
80020158:	08 31       	cp.w	r1,r4
8002015a:	e0 88 00 09 	brls	8002016c <__ieee754_fmod+0x58>
8002015e:	e0 a0 0e 33 	rcall	80021dc4 <__avr32_f64_mul>
80020162:	14 98       	mov	r8,r10
80020164:	16 99       	mov	r9,r11
80020166:	e0 a0 11 b1 	rcall	800224c8 <__avr32_f64_div>
8002016a:	d8 32       	popm	r0-r7,pc
8002016c:	0e 36       	cp.w	r6,r7
8002016e:	e0 89 00 0e 	brgt	8002018a <__ieee754_fmod+0x76>
80020172:	5f 59       	srlt	r9
80020174:	10 3a       	cp.w	r10,r8
80020176:	5f 38       	srlo	r8
80020178:	f3 e8 10 08 	or	r8,r9,r8
8002017c:	e6 08 18 00 	cp.b	r8,r3
80020180:	e0 81 00 e3 	brne	80020346 <__ieee754_fmod+0x232>
80020184:	00 3a       	cp.w	r10,r0
80020186:	e0 80 00 a0 	breq	800202c6 <__ieee754_fmod+0x1b2>
8002018a:	ee 56 ff ff 	cp.w	r6,1048575
8002018e:	e0 89 00 19 	brgt	800201c0 <__ieee754_fmod+0xac>
80020192:	58 06       	cp.w	r6,0
80020194:	c0 b1       	brne	800201aa <__ieee754_fmod+0x96>
80020196:	18 98       	mov	r8,r12
80020198:	fe 7a fb ed 	mov	r10,-1043
8002019c:	c0 38       	rjmp	800201a2 <__ieee754_fmod+0x8e>
8002019e:	20 1a       	sub	r10,1
800201a0:	a1 78       	lsl	r8,0x1
800201a2:	58 08       	cp.w	r8,0
800201a4:	fe 99 ff fd 	brgt	8002019e <__ieee754_fmod+0x8a>
800201a8:	c1 08       	rjmp	800201c8 <__ieee754_fmod+0xb4>
800201aa:	ec 08 15 0b 	lsl	r8,r6,0xb
800201ae:	fe 7a fc 02 	mov	r10,-1022
800201b2:	c0 38       	rjmp	800201b8 <__ieee754_fmod+0xa4>
800201b4:	20 1a       	sub	r10,1
800201b6:	a1 78       	lsl	r8,0x1
800201b8:	58 08       	cp.w	r8,0
800201ba:	fe 99 ff fd 	brgt	800201b4 <__ieee754_fmod+0xa0>
800201be:	c0 58       	rjmp	800201c8 <__ieee754_fmod+0xb4>
800201c0:	ec 0a 14 14 	asr	r10,r6,0x14
800201c4:	f4 ca 03 ff 	sub	r10,r10,1023
800201c8:	ee 57 ff ff 	cp.w	r7,1048575
800201cc:	e0 89 00 19 	brgt	800201fe <__ieee754_fmod+0xea>
800201d0:	58 07       	cp.w	r7,0
800201d2:	c0 b1       	brne	800201e8 <__ieee754_fmod+0xd4>
800201d4:	1c 98       	mov	r8,lr
800201d6:	fe 79 fb ed 	mov	r9,-1043
800201da:	c0 38       	rjmp	800201e0 <__ieee754_fmod+0xcc>
800201dc:	20 19       	sub	r9,1
800201de:	a1 78       	lsl	r8,0x1
800201e0:	58 08       	cp.w	r8,0
800201e2:	fe 99 ff fd 	brgt	800201dc <__ieee754_fmod+0xc8>
800201e6:	c1 08       	rjmp	80020206 <__ieee754_fmod+0xf2>
800201e8:	ee 08 15 0b 	lsl	r8,r7,0xb
800201ec:	fe 79 fc 02 	mov	r9,-1022
800201f0:	c0 38       	rjmp	800201f6 <__ieee754_fmod+0xe2>
800201f2:	20 19       	sub	r9,1
800201f4:	a1 78       	lsl	r8,0x1
800201f6:	58 08       	cp.w	r8,0
800201f8:	fe 99 ff fd 	brgt	800201f2 <__ieee754_fmod+0xde>
800201fc:	c0 58       	rjmp	80020206 <__ieee754_fmod+0xf2>
800201fe:	ee 09 14 14 	asr	r9,r7,0x14
80020202:	f2 c9 03 ff 	sub	r9,r9,1023
80020206:	fe 5a fc 02 	cp.w	r10,-1022
8002020a:	c0 55       	brlt	80020214 <__ieee754_fmod+0x100>
8002020c:	f1 d6 c0 14 	bfextu	r8,r6,0x0,0x14
80020210:	b5 a8       	sbr	r8,0x14
80020212:	c1 48       	rjmp	8002023a <__ieee754_fmod+0x126>
80020214:	fe 7b fc 02 	mov	r11,-1022
80020218:	14 1b       	sub	r11,r10
8002021a:	59 fb       	cp.w	r11,31
8002021c:	e0 89 00 0c 	brgt	80020234 <__ieee754_fmod+0x120>
80020220:	ec 0b 09 46 	lsl	r6,r6,r11
80020224:	f6 08 11 20 	rsub	r8,r11,32
80020228:	f8 08 0a 48 	lsr	r8,r12,r8
8002022c:	f8 0b 09 4c 	lsl	r12,r12,r11
80020230:	0c 48       	or	r8,r6
80020232:	c0 48       	rjmp	8002023a <__ieee754_fmod+0x126>
80020234:	f8 0b 09 48 	lsl	r8,r12,r11
80020238:	30 0c       	mov	r12,0
8002023a:	fe 59 fc 02 	cp.w	r9,-1022
8002023e:	c0 55       	brlt	80020248 <__ieee754_fmod+0x134>
80020240:	ef d7 c0 14 	bfextu	r7,r7,0x0,0x14
80020244:	b5 a7       	sbr	r7,0x14
80020246:	c1 58       	rjmp	80020270 <__ieee754_fmod+0x15c>
80020248:	fe 7b fc 02 	mov	r11,-1022
8002024c:	12 1b       	sub	r11,r9
8002024e:	59 fb       	cp.w	r11,31
80020250:	e0 89 00 0d 	brgt	8002026a <__ieee754_fmod+0x156>
80020254:	ee 0b 09 47 	lsl	r7,r7,r11
80020258:	f6 06 11 20 	rsub	r6,r11,32
8002025c:	fc 06 0a 46 	lsr	r6,lr,r6
80020260:	fc 0b 09 4e 	lsl	lr,lr,r11
80020264:	ed e7 10 07 	or	r7,r6,r7
80020268:	c0 48       	rjmp	80020270 <__ieee754_fmod+0x15c>
8002026a:	fc 0b 09 47 	lsl	r7,lr,r11
8002026e:	30 0e       	mov	lr,0
80020270:	12 1a       	sub	r10,r9
80020272:	c1 88       	rjmp	800202a2 <__ieee754_fmod+0x18e>
80020274:	1c 3c       	cp.w	r12,lr
80020276:	f9 b3 03 ff 	movlo	r3,-1
8002027a:	f7 d3 e3 0b 	addcs	r11,r11,r3
8002027e:	58 0b       	cp.w	r11,0
80020280:	c0 74       	brge	8002028e <__ieee754_fmod+0x17a>
80020282:	f8 0b 16 1f 	lsr	r11,r12,0x1f
80020286:	a1 7c       	lsl	r12,0x1
80020288:	f6 08 00 18 	add	r8,r11,r8<<0x1
8002028c:	c0 a8       	rjmp	800202a0 <__ieee754_fmod+0x18c>
8002028e:	ec 0c 15 01 	lsl	r12,r6,0x1
80020292:	f7 e6 10 08 	or	r8,r11,r6
80020296:	c1 80       	breq	800202c6 <__ieee754_fmod+0x1b2>
80020298:	ec 08 16 1f 	lsr	r8,r6,0x1f
8002029c:	f0 0b 00 18 	add	r8,r8,r11<<0x1
800202a0:	20 1a       	sub	r10,1
800202a2:	f8 0e 01 06 	sub	r6,r12,lr
800202a6:	f0 07 01 0b 	sub	r11,r8,r7
800202aa:	58 0a       	cp.w	r10,0
800202ac:	ce 41       	brne	80020274 <__ieee754_fmod+0x160>
800202ae:	1c 3c       	cp.w	r12,lr
800202b0:	f9 ba 03 ff 	movlo	r10,-1
800202b4:	f7 da e3 0b 	addcs	r11,r11,r10
800202b8:	58 0b       	cp.w	r11,0
800202ba:	c0 35       	brlt	800202c0 <__ieee754_fmod+0x1ac>
800202bc:	1c 1c       	sub	r12,lr
800202be:	16 98       	mov	r8,r11
800202c0:	f1 ec 10 0a 	or	r10,r8,r12
800202c4:	c0 d1       	brne	800202de <__ieee754_fmod+0x1ca>
800202c6:	bf 95       	lsr	r5,0x1f
800202c8:	fe c9 aa 28 	sub	r9,pc,-21976
800202cc:	f2 05 02 3a 	ld.d	r10,r9[r5<<0x3]
800202d0:	d8 32       	popm	r0-r7,pc
800202d2:	f8 0a 16 1f 	lsr	r10,r12,0x1f
800202d6:	20 19       	sub	r9,1
800202d8:	f4 08 00 18 	add	r8,r10,r8<<0x1
800202dc:	a1 7c       	lsl	r12,0x1
800202de:	ee 58 ff ff 	cp.w	r8,1048575
800202e2:	fe 9a ff f8 	brle	800202d2 <__ieee754_fmod+0x1be>
800202e6:	fe 59 fc 02 	cp.w	r9,-1022
800202ea:	c0 c5       	brlt	80020302 <__ieee754_fmod+0x1ee>
800202ec:	f0 6a 00 00 	mov	r10,-1048576
800202f0:	f2 c9 fc 01 	sub	r9,r9,-1023
800202f4:	14 08       	add	r8,r10
800202f6:	18 9a       	mov	r10,r12
800202f8:	f1 e5 10 05 	or	r5,r8,r5
800202fc:	eb e9 11 4b 	or	r11,r5,r9<<0x14
80020300:	d8 32       	popm	r0-r7,pc
80020302:	fe 7a fc 02 	mov	r10,-1022
80020306:	f4 09 01 09 	sub	r9,r10,r9
8002030a:	59 49       	cp.w	r9,20
8002030c:	e0 89 00 0c 	brgt	80020324 <__ieee754_fmod+0x210>
80020310:	f0 09 08 4e 	asr	lr,r8,r9
80020314:	f8 09 0a 4c 	lsr	r12,r12,r9
80020318:	f2 09 11 20 	rsub	r9,r9,32
8002031c:	f0 09 09 48 	lsl	r8,r8,r9
80020320:	18 48       	or	r8,r12
80020322:	c0 f8       	rjmp	80020340 <__ieee754_fmod+0x22c>
80020324:	59 f9       	cp.w	r9,31
80020326:	e0 89 00 0a 	brgt	8002033a <__ieee754_fmod+0x226>
8002032a:	f8 09 0a 4c 	lsr	r12,r12,r9
8002032e:	f2 09 11 20 	rsub	r9,r9,32
80020332:	f0 09 09 48 	lsl	r8,r8,r9
80020336:	18 48       	or	r8,r12
80020338:	c0 38       	rjmp	8002033e <__ieee754_fmod+0x22a>
8002033a:	f0 09 08 48 	asr	r8,r8,r9
8002033e:	0a 9e       	mov	lr,r5
80020340:	fd e5 10 0b 	or	r11,lr,r5
80020344:	10 9a       	mov	r10,r8
80020346:	d8 32       	popm	r0-r7,pc

80020348 <__ieee754_powf>:
80020348:	d4 31       	pushm	r0-r7,lr
8002034a:	20 6d       	sub	sp,24
8002034c:	16 97       	mov	r7,r11
8002034e:	18 9b       	mov	r11,r12
80020350:	0e 96       	mov	r6,r7
80020352:	e5 d7 c0 1f 	bfextu	r2,r7,0x0,0x1f
80020356:	c4 50       	breq	800203e0 <__ieee754_powf+0x98>
80020358:	fc 19 7f 80 	movh	r9,0x7f80
8002035c:	e9 dc c0 1f 	bfextu	r4,r12,0x0,0x1f
80020360:	12 32       	cp.w	r2,r9
80020362:	5f 99       	srgt	r9
80020364:	fc 18 7f 80 	movh	r8,0x7f80
80020368:	18 93       	mov	r3,r12
8002036a:	10 34       	cp.w	r4,r8
8002036c:	5f 98       	srgt	r8
8002036e:	f3 e8 10 08 	or	r8,r9,r8
80020372:	c0 a0       	breq	80020386 <__ieee754_powf+0x3e>
80020374:	fc 19 3f 80 	movh	r9,0x3f80
80020378:	12 34       	cp.w	r4,r9
8002037a:	c3 30       	breq	800203e0 <__ieee754_powf+0x98>
8002037c:	fe cc c4 d8 	sub	r12,pc,-15144
80020380:	e0 a0 0c 1f 	rcall	80021bbe <nanf>
80020384:	c8 48       	rjmp	8002048c <__ieee754_powf+0x144>
80020386:	58 0c       	cp.w	r12,0
80020388:	c2 34       	brge	800203ce <__ieee754_powf+0x86>
8002038a:	e0 68 ff ff 	mov	r8,65535
8002038e:	ea 18 4b 7f 	orh	r8,0x4b7f
80020392:	10 32       	cp.w	r2,r8
80020394:	e0 8a 00 04 	brle	8002039c <__ieee754_powf+0x54>
80020398:	30 25       	mov	r5,2
8002039a:	c1 b8       	rjmp	800203d0 <__ieee754_powf+0x88>
8002039c:	e0 69 ff ff 	mov	r9,65535
800203a0:	ea 19 3f 7f 	orh	r9,0x3f7f
800203a4:	12 32       	cp.w	r2,r9
800203a6:	e0 8a 03 81 	brle	80020aa8 <__ieee754_powf+0x760>
800203aa:	e4 08 14 17 	asr	r8,r2,0x17
800203ae:	e0 69 00 96 	mov	r9,150
800203b2:	f2 08 01 08 	sub	r8,r9,r8
800203b6:	e4 08 08 45 	asr	r5,r2,r8
800203ba:	ea 08 09 48 	lsl	r8,r5,r8
800203be:	04 38       	cp.w	r8,r2
800203c0:	e0 81 03 74 	brne	80020aa8 <__ieee754_powf+0x760>
800203c4:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
800203c8:	ea 05 11 02 	rsub	r5,r5,2
800203cc:	c1 c8       	rjmp	80020404 <__ieee754_powf+0xbc>
800203ce:	30 05       	mov	r5,0
800203d0:	fc 18 7f 80 	movh	r8,0x7f80
800203d4:	10 32       	cp.w	r2,r8
800203d6:	c1 71       	brne	80020404 <__ieee754_powf+0xbc>
800203d8:	fc 19 3f 80 	movh	r9,0x3f80
800203dc:	12 34       	cp.w	r4,r9
800203de:	c0 51       	brne	800203e8 <__ieee754_powf+0xa0>
800203e0:	fc 17 3f 80 	movh	r7,0x3f80
800203e4:	e0 8f 03 5f 	bral	80020aa2 <__ieee754_powf+0x75a>
800203e8:	fc 18 3f 80 	movh	r8,0x3f80
800203ec:	10 34       	cp.w	r4,r8
800203ee:	e0 8a 00 08 	brle	800203fe <__ieee754_powf+0xb6>
800203f2:	30 09       	mov	r9,0
800203f4:	58 06       	cp.w	r6,0
800203f6:	f2 07 17 50 	movlt	r7,r9
800203fa:	e0 8f 03 54 	bral	80020aa2 <__ieee754_powf+0x75a>
800203fe:	58 06       	cp.w	r6,0
80020400:	c7 04       	brge	800204e0 <__ieee754_powf+0x198>
80020402:	c4 c8       	rjmp	8002049a <__ieee754_powf+0x152>
80020404:	fc 18 3f 80 	movh	r8,0x3f80
80020408:	10 32       	cp.w	r2,r8
8002040a:	c0 71       	brne	80020418 <__ieee754_powf+0xd0>
8002040c:	58 06       	cp.w	r6,0
8002040e:	e0 84 03 49 	brge	80020aa0 <__ieee754_powf+0x758>
80020412:	fc 1c 3f 80 	movh	r12,0x3f80
80020416:	c3 98       	rjmp	80020488 <__ieee754_powf+0x140>
80020418:	fc 19 40 00 	movh	r9,0x4000
8002041c:	12 36       	cp.w	r6,r9
8002041e:	c6 80       	breq	800204ee <__ieee754_powf+0x1a6>
80020420:	fc 18 3f 00 	movh	r8,0x3f00
80020424:	10 36       	cp.w	r6,r8
80020426:	c0 71       	brne	80020434 <__ieee754_powf+0xec>
80020428:	58 03       	cp.w	r3,0
8002042a:	c0 55       	brlt	80020434 <__ieee754_powf+0xec>
8002042c:	16 9c       	mov	r12,r11
8002042e:	e0 a0 04 e3 	rcall	80020df4 <__ieee754_sqrtf>
80020432:	c2 d8       	rjmp	8002048c <__ieee754_powf+0x144>
80020434:	16 9c       	mov	r12,r11
80020436:	50 1b       	stdsp	sp[0x4],r11
80020438:	e0 a0 0b 62 	rcall	80021afc <fabsf>
8002043c:	58 04       	cp.w	r4,0
8002043e:	5f 0a       	sreq	r10
80020440:	fc 19 7f 80 	movh	r9,0x7f80
80020444:	18 98       	mov	r8,r12
80020446:	12 34       	cp.w	r4,r9
80020448:	5f 09       	sreq	r9
8002044a:	40 1b       	lddsp	r11,sp[0x4]
8002044c:	f5 e9 10 09 	or	r9,r10,r9
80020450:	c0 51       	brne	8002045a <__ieee754_powf+0x112>
80020452:	fc 19 3f 80 	movh	r9,0x3f80
80020456:	12 34       	cp.w	r4,r9
80020458:	c2 61       	brne	800204a4 <__ieee754_powf+0x15c>
8002045a:	58 06       	cp.w	r6,0
8002045c:	c0 35       	brlt	80020462 <__ieee754_powf+0x11a>
8002045e:	10 9b       	mov	r11,r8
80020460:	c0 78       	rjmp	8002046e <__ieee754_powf+0x126>
80020462:	10 9b       	mov	r11,r8
80020464:	fc 1c 3f 80 	movh	r12,0x3f80
80020468:	e0 a0 11 bc 	rcall	800227e0 <__avr32_f32_div>
8002046c:	18 9b       	mov	r11,r12
8002046e:	58 03       	cp.w	r3,0
80020470:	e0 84 03 18 	brge	80020aa0 <__ieee754_powf+0x758>
80020474:	fc 18 c0 80 	movh	r8,0xc080
80020478:	10 04       	add	r4,r8
8002047a:	eb e4 10 04 	or	r4,r5,r4
8002047e:	c0 a1       	brne	80020492 <__ieee754_powf+0x14a>
80020480:	16 9c       	mov	r12,r11
80020482:	e0 a0 12 61 	rcall	80022944 <__avr32_f32_sub>
80020486:	18 9b       	mov	r11,r12
80020488:	e0 a0 11 ac 	rcall	800227e0 <__avr32_f32_div>
8002048c:	18 97       	mov	r7,r12
8002048e:	e0 8f 03 0a 	bral	80020aa2 <__ieee754_powf+0x75a>
80020492:	58 15       	cp.w	r5,1
80020494:	e0 81 03 06 	brne	80020aa0 <__ieee754_powf+0x758>
80020498:	16 97       	mov	r7,r11
8002049a:	ee 17 80 00 	eorh	r7,0x8000
8002049e:	e0 8f 03 02 	bral	80020aa2 <__ieee754_powf+0x75a>
800204a2:	d7 03       	nop
800204a4:	bf 93       	lsr	r3,0x1f
800204a6:	20 13       	sub	r3,1
800204a8:	50 43       	stdsp	sp[0x10],r3
800204aa:	eb e3 10 08 	or	r8,r5,r3
800204ae:	ce 90       	breq	80020480 <__ieee754_powf+0x138>
800204b0:	fc 18 4d 00 	movh	r8,0x4d00
800204b4:	10 32       	cp.w	r2,r8
800204b6:	e0 8a 00 6a 	brle	8002058a <__ieee754_powf+0x242>
800204ba:	e0 69 ff f7 	mov	r9,65527
800204be:	ea 19 3f 7f 	orh	r9,0x3f7f
800204c2:	12 34       	cp.w	r4,r9
800204c4:	e0 89 00 05 	brgt	800204ce <__ieee754_powf+0x186>
800204c8:	58 06       	cp.w	r6,0
800204ca:	c0 b4       	brge	800204e0 <__ieee754_powf+0x198>
800204cc:	c0 d8       	rjmp	800204e6 <__ieee754_powf+0x19e>
800204ce:	30 78       	mov	r8,7
800204d0:	ea 18 3f 80 	orh	r8,0x3f80
800204d4:	10 34       	cp.w	r4,r8
800204d6:	e0 8a 00 0f 	brle	800204f4 <__ieee754_powf+0x1ac>
800204da:	58 06       	cp.w	r6,0
800204dc:	e0 89 00 05 	brgt	800204e6 <__ieee754_powf+0x19e>
800204e0:	30 07       	mov	r7,0
800204e2:	e0 8f 02 e0 	bral	80020aa2 <__ieee754_powf+0x75a>
800204e6:	e0 6b f2 ca 	mov	r11,62154
800204ea:	ea 1b 71 49 	orh	r11,0x7149
800204ee:	16 9c       	mov	r12,r11
800204f0:	e0 8f 02 d4 	bral	80020a98 <__ieee754_powf+0x750>
800204f4:	fc 1b 3f 80 	movh	r11,0x3f80
800204f8:	e0 a0 12 26 	rcall	80022944 <__avr32_f32_sub>
800204fc:	e0 6b aa 00 	mov	r11,43520
80020500:	ea 1b 3f b8 	orh	r11,0x3fb8
80020504:	18 94       	mov	r4,r12
80020506:	e0 a0 12 dd 	rcall	80022ac0 <__avr32_f32_mul>
8002050a:	e0 6b a5 70 	mov	r11,42352
8002050e:	ea 1b 36 ec 	orh	r11,0x36ec
80020512:	18 93       	mov	r3,r12
80020514:	08 9c       	mov	r12,r4
80020516:	e0 a0 12 d5 	rcall	80022ac0 <__avr32_f32_mul>
8002051a:	08 9b       	mov	r11,r4
8002051c:	18 92       	mov	r2,r12
8002051e:	08 9c       	mov	r12,r4
80020520:	e0 a0 12 d0 	rcall	80022ac0 <__avr32_f32_mul>
80020524:	fc 1b be 80 	movh	r11,0xbe80
80020528:	18 91       	mov	r1,r12
8002052a:	08 9c       	mov	r12,r4
8002052c:	e0 a0 12 ca 	rcall	80022ac0 <__avr32_f32_mul>
80020530:	e0 6b aa ab 	mov	r11,43691
80020534:	ea 1b 3e aa 	orh	r11,0x3eaa
80020538:	e0 a0 12 6e 	rcall	80022a14 <__avr32_f32_add>
8002053c:	18 9b       	mov	r11,r12
8002053e:	08 9c       	mov	r12,r4
80020540:	e0 a0 12 c0 	rcall	80022ac0 <__avr32_f32_mul>
80020544:	18 9b       	mov	r11,r12
80020546:	fc 1c 3f 00 	movh	r12,0x3f00
8002054a:	e0 a0 11 fd 	rcall	80022944 <__avr32_f32_sub>
8002054e:	18 9b       	mov	r11,r12
80020550:	02 9c       	mov	r12,r1
80020552:	e0 a0 12 b7 	rcall	80022ac0 <__avr32_f32_mul>
80020556:	e0 6b aa 3b 	mov	r11,43579
8002055a:	ea 1b bf b8 	orh	r11,0xbfb8
8002055e:	e0 a0 12 b1 	rcall	80022ac0 <__avr32_f32_mul>
80020562:	18 9b       	mov	r11,r12
80020564:	04 9c       	mov	r12,r2
80020566:	e0 a0 12 57 	rcall	80022a14 <__avr32_f32_add>
8002056a:	18 9b       	mov	r11,r12
8002056c:	18 94       	mov	r4,r12
8002056e:	06 9c       	mov	r12,r3
80020570:	e0 a0 12 52 	rcall	80022a14 <__avr32_f32_add>
80020574:	06 9b       	mov	r11,r3
80020576:	18 91       	mov	r1,r12
80020578:	e0 11 f0 00 	andl	r1,0xf000
8002057c:	02 9c       	mov	r12,r1
8002057e:	e0 a0 11 e3 	rcall	80022944 <__avr32_f32_sub>
80020582:	18 9b       	mov	r11,r12
80020584:	08 9c       	mov	r12,r4
80020586:	e0 8f 01 4c 	bral	8002081e <__ieee754_powf+0x4d6>
8002058a:	e0 69 ff ff 	mov	r9,65535
8002058e:	ea 19 00 7f 	orh	r9,0x7f
80020592:	12 34       	cp.w	r4,r9
80020594:	e0 8a 00 04 	brle	8002059c <__ieee754_powf+0x254>
80020598:	30 08       	mov	r8,0
8002059a:	c0 78       	rjmp	800205a8 <__ieee754_powf+0x260>
8002059c:	fc 1b 4b 80 	movh	r11,0x4b80
800205a0:	e0 a0 12 90 	rcall	80022ac0 <__avr32_f32_mul>
800205a4:	3e 88       	mov	r8,-24
800205a6:	18 94       	mov	r4,r12
800205a8:	f0 c9 00 7f 	sub	r9,r8,127
800205ac:	f1 d4 c0 17 	bfextu	r8,r4,0x0,0x17
800205b0:	b7 54       	asr	r4,0x17
800205b2:	f2 04 00 04 	add	r4,r9,r4
800205b6:	50 34       	stdsp	sp[0xc],r4
800205b8:	10 93       	mov	r3,r8
800205ba:	e0 69 c4 71 	mov	r9,50289
800205be:	ea 19 00 1c 	orh	r9,0x1c
800205c2:	ea 13 3f 80 	orh	r3,0x3f80
800205c6:	12 38       	cp.w	r8,r9
800205c8:	e0 8a 00 11 	brle	800205ea <__ieee754_powf+0x2a2>
800205cc:	e0 69 b3 d6 	mov	r9,46038
800205d0:	ea 19 00 5d 	orh	r9,0x5d
800205d4:	12 38       	cp.w	r8,r9
800205d6:	e0 89 00 04 	brgt	800205de <__ieee754_powf+0x296>
800205da:	30 14       	mov	r4,1
800205dc:	c0 88       	rjmp	800205ec <__ieee754_powf+0x2a4>
800205de:	fc 18 ff 80 	movh	r8,0xff80
800205e2:	10 03       	add	r3,r8
800205e4:	40 38       	lddsp	r8,sp[0xc]
800205e6:	2f f8       	sub	r8,-1
800205e8:	50 38       	stdsp	sp[0xc],r8
800205ea:	30 04       	mov	r4,0
800205ec:	fe c8 ad 2c 	sub	r8,pc,-21204
800205f0:	06 9c       	mov	r12,r3
800205f2:	f0 04 03 20 	ld.w	r0,r8[r4<<0x2]
800205f6:	00 9b       	mov	r11,r0
800205f8:	e0 a0 11 a6 	rcall	80022944 <__avr32_f32_sub>
800205fc:	00 9b       	mov	r11,r0
800205fe:	50 2c       	stdsp	sp[0x8],r12
80020600:	06 9c       	mov	r12,r3
80020602:	e0 a0 12 09 	rcall	80022a14 <__avr32_f32_add>
80020606:	18 9b       	mov	r11,r12
80020608:	fc 1c 3f 80 	movh	r12,0x3f80
8002060c:	e0 a0 10 ea 	rcall	800227e0 <__avr32_f32_div>
80020610:	18 98       	mov	r8,r12
80020612:	18 9b       	mov	r11,r12
80020614:	50 08       	stdsp	sp[0x0],r8
80020616:	40 2c       	lddsp	r12,sp[0x8]
80020618:	e0 a0 12 54 	rcall	80022ac0 <__avr32_f32_mul>
8002061c:	e6 09 14 01 	asr	r9,r3,0x1
80020620:	e8 0a 15 15 	lsl	r10,r4,0x15
80020624:	bd b9       	sbr	r9,0x1d
80020626:	fc 2a 00 00 	sub	r10,-262144
8002062a:	f4 09 00 09 	add	r9,r10,r9
8002062e:	18 92       	mov	r2,r12
80020630:	12 9b       	mov	r11,r9
80020632:	06 91       	mov	r1,r3
80020634:	50 19       	stdsp	sp[0x4],r9
80020636:	18 93       	mov	r3,r12
80020638:	e0 13 f0 00 	andl	r3,0xf000
8002063c:	06 9c       	mov	r12,r3
8002063e:	e0 a0 12 41 	rcall	80022ac0 <__avr32_f32_mul>
80020642:	18 9b       	mov	r11,r12
80020644:	40 2c       	lddsp	r12,sp[0x8]
80020646:	e0 a0 11 7f 	rcall	80022944 <__avr32_f32_sub>
8002064a:	40 19       	lddsp	r9,sp[0x4]
8002064c:	18 9a       	mov	r10,r12
8002064e:	00 9b       	mov	r11,r0
80020650:	12 9c       	mov	r12,r9
80020652:	50 1a       	stdsp	sp[0x4],r10
80020654:	e0 a0 11 78 	rcall	80022944 <__avr32_f32_sub>
80020658:	18 9b       	mov	r11,r12
8002065a:	02 9c       	mov	r12,r1
8002065c:	e0 a0 11 74 	rcall	80022944 <__avr32_f32_sub>
80020660:	18 9b       	mov	r11,r12
80020662:	06 9c       	mov	r12,r3
80020664:	e0 a0 12 2e 	rcall	80022ac0 <__avr32_f32_mul>
80020668:	40 1a       	lddsp	r10,sp[0x4]
8002066a:	18 9b       	mov	r11,r12
8002066c:	14 9c       	mov	r12,r10
8002066e:	e0 a0 11 6b 	rcall	80022944 <__avr32_f32_sub>
80020672:	40 08       	lddsp	r8,sp[0x0]
80020674:	18 9b       	mov	r11,r12
80020676:	10 9c       	mov	r12,r8
80020678:	e0 a0 12 24 	rcall	80022ac0 <__avr32_f32_mul>
8002067c:	04 9b       	mov	r11,r2
8002067e:	50 2c       	stdsp	sp[0x8],r12
80020680:	04 9c       	mov	r12,r2
80020682:	e0 a0 12 1f 	rcall	80022ac0 <__avr32_f32_mul>
80020686:	18 91       	mov	r1,r12
80020688:	18 9b       	mov	r11,r12
8002068a:	e0 a0 12 1b 	rcall	80022ac0 <__avr32_f32_mul>
8002068e:	e0 6b f1 42 	mov	r11,61762
80020692:	ea 1b 3e 53 	orh	r11,0x3e53
80020696:	18 90       	mov	r0,r12
80020698:	02 9c       	mov	r12,r1
8002069a:	e0 a0 12 13 	rcall	80022ac0 <__avr32_f32_mul>
8002069e:	e0 6b 32 55 	mov	r11,12885
800206a2:	ea 1b 3e 6c 	orh	r11,0x3e6c
800206a6:	e0 a0 11 b7 	rcall	80022a14 <__avr32_f32_add>
800206aa:	18 9b       	mov	r11,r12
800206ac:	02 9c       	mov	r12,r1
800206ae:	e0 a0 12 09 	rcall	80022ac0 <__avr32_f32_mul>
800206b2:	e0 6b a3 05 	mov	r11,41733
800206b6:	ea 1b 3e 8b 	orh	r11,0x3e8b
800206ba:	e0 a0 11 ad 	rcall	80022a14 <__avr32_f32_add>
800206be:	18 9b       	mov	r11,r12
800206c0:	02 9c       	mov	r12,r1
800206c2:	e0 a0 11 ff 	rcall	80022ac0 <__avr32_f32_mul>
800206c6:	e0 6b aa ab 	mov	r11,43691
800206ca:	ea 1b 3e aa 	orh	r11,0x3eaa
800206ce:	e0 a0 11 a3 	rcall	80022a14 <__avr32_f32_add>
800206d2:	18 9b       	mov	r11,r12
800206d4:	02 9c       	mov	r12,r1
800206d6:	e0 a0 11 f5 	rcall	80022ac0 <__avr32_f32_mul>
800206da:	e0 6b 6d b7 	mov	r11,28087
800206de:	ea 1b 3e db 	orh	r11,0x3edb
800206e2:	e0 a0 11 99 	rcall	80022a14 <__avr32_f32_add>
800206e6:	18 9b       	mov	r11,r12
800206e8:	02 9c       	mov	r12,r1
800206ea:	e0 a0 11 eb 	rcall	80022ac0 <__avr32_f32_mul>
800206ee:	e0 6b 99 9a 	mov	r11,39322
800206f2:	ea 1b 3f 19 	orh	r11,0x3f19
800206f6:	e0 a0 11 8f 	rcall	80022a14 <__avr32_f32_add>
800206fa:	18 9b       	mov	r11,r12
800206fc:	00 9c       	mov	r12,r0
800206fe:	e0 a0 11 e1 	rcall	80022ac0 <__avr32_f32_mul>
80020702:	04 9b       	mov	r11,r2
80020704:	18 91       	mov	r1,r12
80020706:	06 9c       	mov	r12,r3
80020708:	e0 a0 11 86 	rcall	80022a14 <__avr32_f32_add>
8002070c:	18 9b       	mov	r11,r12
8002070e:	40 2c       	lddsp	r12,sp[0x8]
80020710:	e0 a0 11 d8 	rcall	80022ac0 <__avr32_f32_mul>
80020714:	18 9b       	mov	r11,r12
80020716:	02 9c       	mov	r12,r1
80020718:	e0 a0 11 7e 	rcall	80022a14 <__avr32_f32_add>
8002071c:	06 9b       	mov	r11,r3
8002071e:	18 90       	mov	r0,r12
80020720:	06 9c       	mov	r12,r3
80020722:	e0 a0 11 cf 	rcall	80022ac0 <__avr32_f32_mul>
80020726:	c0 18       	rjmp	80020728 <__ieee754_powf+0x3e0>
80020728:	fc 1b 40 40 	movh	r11,0x4040
8002072c:	50 0c       	stdsp	sp[0x0],r12
8002072e:	e0 a0 11 73 	rcall	80022a14 <__avr32_f32_add>
80020732:	00 9b       	mov	r11,r0
80020734:	e0 a0 11 70 	rcall	80022a14 <__avr32_f32_add>
80020738:	18 91       	mov	r1,r12
8002073a:	06 9c       	mov	r12,r3
8002073c:	e0 11 f0 00 	andl	r1,0xf000
80020740:	02 9b       	mov	r11,r1
80020742:	e0 a0 11 bf 	rcall	80022ac0 <__avr32_f32_mul>
80020746:	02 9b       	mov	r11,r1
80020748:	50 5c       	stdsp	sp[0x14],r12
8002074a:	40 2c       	lddsp	r12,sp[0x8]
8002074c:	e0 a0 11 ba 	rcall	80022ac0 <__avr32_f32_mul>
80020750:	fc 1b 40 40 	movh	r11,0x4040
80020754:	18 93       	mov	r3,r12
80020756:	02 9c       	mov	r12,r1
80020758:	e0 a0 10 f6 	rcall	80022944 <__avr32_f32_sub>
8002075c:	40 08       	lddsp	r8,sp[0x0]
8002075e:	10 9b       	mov	r11,r8
80020760:	e0 a0 10 f2 	rcall	80022944 <__avr32_f32_sub>
80020764:	18 9b       	mov	r11,r12
80020766:	00 9c       	mov	r12,r0
80020768:	e0 a0 10 ee 	rcall	80022944 <__avr32_f32_sub>
8002076c:	04 9b       	mov	r11,r2
8002076e:	e0 a0 11 a9 	rcall	80022ac0 <__avr32_f32_mul>
80020772:	18 9b       	mov	r11,r12
80020774:	06 9c       	mov	r12,r3
80020776:	e0 a0 11 4f 	rcall	80022a14 <__avr32_f32_add>
8002077a:	18 91       	mov	r1,r12
8002077c:	18 9b       	mov	r11,r12
8002077e:	40 5c       	lddsp	r12,sp[0x14]
80020780:	e0 a0 11 4a 	rcall	80022a14 <__avr32_f32_add>
80020784:	e0 6b 38 00 	mov	r11,14336
80020788:	ea 1b 3f 76 	orh	r11,0x3f76
8002078c:	18 93       	mov	r3,r12
8002078e:	e0 13 f0 00 	andl	r3,0xf000
80020792:	06 9c       	mov	r12,r3
80020794:	e0 a0 11 96 	rcall	80022ac0 <__avr32_f32_mul>
80020798:	e0 6b c3 a0 	mov	r11,50080
8002079c:	ea 1b 36 9d 	orh	r11,0x369d
800207a0:	18 92       	mov	r2,r12
800207a2:	06 9c       	mov	r12,r3
800207a4:	e0 a0 11 8e 	rcall	80022ac0 <__avr32_f32_mul>
800207a8:	40 5b       	lddsp	r11,sp[0x14]
800207aa:	18 90       	mov	r0,r12
800207ac:	06 9c       	mov	r12,r3
800207ae:	e0 a0 10 cb 	rcall	80022944 <__avr32_f32_sub>
800207b2:	18 9b       	mov	r11,r12
800207b4:	02 9c       	mov	r12,r1
800207b6:	e0 a0 10 c7 	rcall	80022944 <__avr32_f32_sub>
800207ba:	e0 6b 38 4f 	mov	r11,14415
800207be:	ea 1b 3f 76 	orh	r11,0x3f76
800207c2:	e0 a0 11 7f 	rcall	80022ac0 <__avr32_f32_mul>
800207c6:	18 9b       	mov	r11,r12
800207c8:	00 9c       	mov	r12,r0
800207ca:	e0 a0 11 25 	rcall	80022a14 <__avr32_f32_add>
800207ce:	fe c8 af 16 	sub	r8,pc,-20714
800207d2:	f0 04 03 2b 	ld.w	r11,r8[r4<<0x2]
800207d6:	e0 a0 11 1f 	rcall	80022a14 <__avr32_f32_add>
800207da:	18 93       	mov	r3,r12
800207dc:	40 3c       	lddsp	r12,sp[0xc]
800207de:	e0 a0 11 e2 	rcall	80022ba2 <__avr32_s32_to_f32>
800207e2:	fe c8 af 32 	sub	r8,pc,-20686
800207e6:	18 91       	mov	r1,r12
800207e8:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
800207ec:	06 9b       	mov	r11,r3
800207ee:	04 9c       	mov	r12,r2
800207f0:	e0 a0 11 12 	rcall	80022a14 <__avr32_f32_add>
800207f4:	08 9b       	mov	r11,r4
800207f6:	e0 a0 11 0f 	rcall	80022a14 <__avr32_f32_add>
800207fa:	02 9b       	mov	r11,r1
800207fc:	e0 a0 11 0c 	rcall	80022a14 <__avr32_f32_add>
80020800:	02 9b       	mov	r11,r1
80020802:	18 91       	mov	r1,r12
80020804:	e0 11 f0 00 	andl	r1,0xf000
80020808:	02 9c       	mov	r12,r1
8002080a:	e0 a0 10 9d 	rcall	80022944 <__avr32_f32_sub>
8002080e:	08 9b       	mov	r11,r4
80020810:	e0 a0 10 9a 	rcall	80022944 <__avr32_f32_sub>
80020814:	04 9b       	mov	r11,r2
80020816:	e0 a0 10 97 	rcall	80022944 <__avr32_f32_sub>
8002081a:	18 9b       	mov	r11,r12
8002081c:	06 9c       	mov	r12,r3
8002081e:	e0 a0 10 93 	rcall	80022944 <__avr32_f32_sub>
80020822:	40 49       	lddsp	r9,sp[0x10]
80020824:	fc 18 bf 80 	movh	r8,0xbf80
80020828:	20 15       	sub	r5,1
8002082a:	12 45       	or	r5,r9
8002082c:	fc 19 3f 80 	movh	r9,0x3f80
80020830:	18 94       	mov	r4,r12
80020832:	58 05       	cp.w	r5,0
80020834:	f0 05 17 00 	moveq	r5,r8
80020838:	f2 05 17 10 	movne	r5,r9
8002083c:	e0 16 f0 00 	andl	r6,0xf000
80020840:	0e 9c       	mov	r12,r7
80020842:	0c 9b       	mov	r11,r6
80020844:	e0 a0 10 80 	rcall	80022944 <__avr32_f32_sub>
80020848:	02 9b       	mov	r11,r1
8002084a:	e0 a0 11 3b 	rcall	80022ac0 <__avr32_f32_mul>
8002084e:	08 9b       	mov	r11,r4
80020850:	18 93       	mov	r3,r12
80020852:	0e 9c       	mov	r12,r7
80020854:	e0 a0 11 36 	rcall	80022ac0 <__avr32_f32_mul>
80020858:	18 9b       	mov	r11,r12
8002085a:	06 9c       	mov	r12,r3
8002085c:	e0 a0 10 dc 	rcall	80022a14 <__avr32_f32_add>
80020860:	02 9b       	mov	r11,r1
80020862:	18 94       	mov	r4,r12
80020864:	0c 9c       	mov	r12,r6
80020866:	e0 a0 11 2d 	rcall	80022ac0 <__avr32_f32_mul>
8002086a:	18 93       	mov	r3,r12
8002086c:	08 9c       	mov	r12,r4
8002086e:	06 9b       	mov	r11,r3
80020870:	06 91       	mov	r1,r3
80020872:	e0 a0 10 d1 	rcall	80022a14 <__avr32_f32_add>
80020876:	18 96       	mov	r6,r12
80020878:	18 92       	mov	r2,r12
8002087a:	ef dc c0 1f 	bfextu	r7,r12,0x0,0x1f
8002087e:	58 0c       	cp.w	r12,0
80020880:	e0 8a 00 27 	brle	800208ce <__ieee754_powf+0x586>
80020884:	fc 18 43 00 	movh	r8,0x4300
80020888:	10 37       	cp.w	r7,r8
8002088a:	e0 89 00 16 	brgt	800208b6 <__ieee754_powf+0x56e>
8002088e:	fc 19 43 00 	movh	r9,0x4300
80020892:	12 37       	cp.w	r7,r9
80020894:	c3 a1       	brne	80020908 <__ieee754_powf+0x5c0>
80020896:	e0 6b aa 3c 	mov	r11,43580
8002089a:	ea 1b 33 38 	orh	r11,0x3338
8002089e:	08 9c       	mov	r12,r4
800208a0:	e0 a0 10 ba 	rcall	80022a14 <__avr32_f32_add>
800208a4:	06 9b       	mov	r11,r3
800208a6:	18 91       	mov	r1,r12
800208a8:	0c 9c       	mov	r12,r6
800208aa:	e0 a0 10 4d 	rcall	80022944 <__avr32_f32_sub>
800208ae:	02 9b       	mov	r11,r1
800208b0:	e0 a0 0d f2 	rcall	80022494 <__avr32_f32_cmp_lt>
800208b4:	c3 10       	breq	80020916 <__ieee754_powf+0x5ce>
800208b6:	e0 6b f2 ca 	mov	r11,62154
800208ba:	ea 1b 71 49 	orh	r11,0x7149
800208be:	0a 9c       	mov	r12,r5
800208c0:	e0 a0 11 00 	rcall	80022ac0 <__avr32_f32_mul>
800208c4:	e0 6b f2 ca 	mov	r11,62154
800208c8:	ea 1b 71 49 	orh	r11,0x7149
800208cc:	ce 68       	rjmp	80020a98 <__ieee754_powf+0x750>
800208ce:	fc 18 43 16 	movh	r8,0x4316
800208d2:	10 37       	cp.w	r7,r8
800208d4:	e0 89 00 0d 	brgt	800208ee <__ieee754_powf+0x5a6>
800208d8:	fc 19 43 16 	movh	r9,0x4316
800208dc:	12 37       	cp.w	r7,r9
800208de:	c1 51       	brne	80020908 <__ieee754_powf+0x5c0>
800208e0:	06 9b       	mov	r11,r3
800208e2:	e0 a0 10 31 	rcall	80022944 <__avr32_f32_sub>
800208e6:	08 9b       	mov	r11,r4
800208e8:	e0 a0 0d bc 	rcall	80022460 <__avr32_f32_cmp_ge>
800208ec:	c1 50       	breq	80020916 <__ieee754_powf+0x5ce>
800208ee:	e0 6b 42 60 	mov	r11,16992
800208f2:	ea 1b 0d a2 	orh	r11,0xda2
800208f6:	0a 9c       	mov	r12,r5
800208f8:	e0 a0 10 e4 	rcall	80022ac0 <__avr32_f32_mul>
800208fc:	e0 6b 42 60 	mov	r11,16992
80020900:	ea 1b 0d a2 	orh	r11,0xda2
80020904:	cc a8       	rjmp	80020a98 <__ieee754_powf+0x750>
80020906:	d7 03       	nop
80020908:	fc 18 3f 00 	movh	r8,0x3f00
8002090c:	10 37       	cp.w	r7,r8
8002090e:	e0 89 00 04 	brgt	80020916 <__ieee754_powf+0x5ce>
80020912:	30 06       	mov	r6,0
80020914:	c2 28       	rjmp	80020958 <__ieee754_powf+0x610>
80020916:	fc 18 00 80 	movh	r8,0x80
8002091a:	e0 6b ff ff 	mov	r11,65535
8002091e:	ea 1b 00 7f 	orh	r11,0x7f
80020922:	b7 57       	asr	r7,0x17
80020924:	27 e7       	sub	r7,126
80020926:	f0 07 08 47 	asr	r7,r8,r7
8002092a:	04 07       	add	r7,r2
8002092c:	f1 d7 c2 e8 	bfextu	r8,r7,0x17,0x8
80020930:	f3 d7 c0 17 	bfextu	r9,r7,0x0,0x17
80020934:	27 f8       	sub	r8,127
80020936:	b7 b9       	sbr	r9,0x17
80020938:	f0 06 11 17 	rsub	r6,r8,23
8002093c:	f6 08 08 48 	asr	r8,r11,r8
80020940:	f2 06 08 46 	asr	r6,r9,r6
80020944:	f0 0b 11 ff 	rsub	r11,r8,-1
80020948:	06 9c       	mov	r12,r3
8002094a:	0e 6b       	and	r11,r7
8002094c:	58 02       	cp.w	r2,0
8002094e:	fb b6 05 00 	rsublt	r6,0
80020952:	e0 a0 0f f9 	rcall	80022944 <__avr32_f32_sub>
80020956:	18 91       	mov	r1,r12
80020958:	02 9b       	mov	r11,r1
8002095a:	08 9c       	mov	r12,r4
8002095c:	e0 a0 10 5c 	rcall	80022a14 <__avr32_f32_add>
80020960:	e0 6b 72 00 	mov	r11,29184
80020964:	ea 1b 3f 31 	orh	r11,0x3f31
80020968:	18 97       	mov	r7,r12
8002096a:	e0 17 f0 00 	andl	r7,0xf000
8002096e:	0e 9c       	mov	r12,r7
80020970:	e0 a0 10 a8 	rcall	80022ac0 <__avr32_f32_mul>
80020974:	02 9b       	mov	r11,r1
80020976:	18 93       	mov	r3,r12
80020978:	0e 9c       	mov	r12,r7
8002097a:	e0 a0 0f e5 	rcall	80022944 <__avr32_f32_sub>
8002097e:	18 9b       	mov	r11,r12
80020980:	08 9c       	mov	r12,r4
80020982:	e0 a0 0f e1 	rcall	80022944 <__avr32_f32_sub>
80020986:	e0 6b 72 18 	mov	r11,29208
8002098a:	ea 1b 3f 31 	orh	r11,0x3f31
8002098e:	e0 a0 10 99 	rcall	80022ac0 <__avr32_f32_mul>
80020992:	e0 6b be 8c 	mov	r11,48780
80020996:	ea 1b 35 bf 	orh	r11,0x35bf
8002099a:	18 94       	mov	r4,r12
8002099c:	0e 9c       	mov	r12,r7
8002099e:	e0 a0 10 91 	rcall	80022ac0 <__avr32_f32_mul>
800209a2:	18 9b       	mov	r11,r12
800209a4:	08 9c       	mov	r12,r4
800209a6:	e0 a0 10 37 	rcall	80022a14 <__avr32_f32_add>
800209aa:	18 94       	mov	r4,r12
800209ac:	18 9b       	mov	r11,r12
800209ae:	06 9c       	mov	r12,r3
800209b0:	e0 a0 10 32 	rcall	80022a14 <__avr32_f32_add>
800209b4:	06 9b       	mov	r11,r3
800209b6:	18 97       	mov	r7,r12
800209b8:	e0 a0 0f c6 	rcall	80022944 <__avr32_f32_sub>
800209bc:	18 9b       	mov	r11,r12
800209be:	08 9c       	mov	r12,r4
800209c0:	e0 a0 0f c2 	rcall	80022944 <__avr32_f32_sub>
800209c4:	0e 9b       	mov	r11,r7
800209c6:	18 93       	mov	r3,r12
800209c8:	0e 9c       	mov	r12,r7
800209ca:	e0 a0 10 7b 	rcall	80022ac0 <__avr32_f32_mul>
800209ce:	e0 6b bb 4c 	mov	r11,47948
800209d2:	ea 1b 33 31 	orh	r11,0x3331
800209d6:	18 94       	mov	r4,r12
800209d8:	e0 a0 10 74 	rcall	80022ac0 <__avr32_f32_mul>
800209dc:	e0 6b ea 0e 	mov	r11,59918
800209e0:	ea 1b 35 dd 	orh	r11,0x35dd
800209e4:	e0 a0 0f b0 	rcall	80022944 <__avr32_f32_sub>
800209e8:	18 9b       	mov	r11,r12
800209ea:	08 9c       	mov	r12,r4
800209ec:	e0 a0 10 6a 	rcall	80022ac0 <__avr32_f32_mul>
800209f0:	e0 6b b3 55 	mov	r11,45909
800209f4:	ea 1b 38 8a 	orh	r11,0x388a
800209f8:	e0 a0 10 0e 	rcall	80022a14 <__avr32_f32_add>
800209fc:	18 9b       	mov	r11,r12
800209fe:	08 9c       	mov	r12,r4
80020a00:	e0 a0 10 60 	rcall	80022ac0 <__avr32_f32_mul>
80020a04:	e0 6b 0b 61 	mov	r11,2913
80020a08:	ea 1b 3b 36 	orh	r11,0x3b36
80020a0c:	e0 a0 0f 9c 	rcall	80022944 <__avr32_f32_sub>
80020a10:	18 9b       	mov	r11,r12
80020a12:	08 9c       	mov	r12,r4
80020a14:	e0 a0 10 56 	rcall	80022ac0 <__avr32_f32_mul>
80020a18:	e0 6b aa ab 	mov	r11,43691
80020a1c:	ea 1b 3e 2a 	orh	r11,0x3e2a
80020a20:	e0 a0 0f fa 	rcall	80022a14 <__avr32_f32_add>
80020a24:	18 9b       	mov	r11,r12
80020a26:	08 9c       	mov	r12,r4
80020a28:	e0 a0 10 4c 	rcall	80022ac0 <__avr32_f32_mul>
80020a2c:	18 9b       	mov	r11,r12
80020a2e:	0e 9c       	mov	r12,r7
80020a30:	e0 a0 0f 8a 	rcall	80022944 <__avr32_f32_sub>
80020a34:	18 94       	mov	r4,r12
80020a36:	18 9b       	mov	r11,r12
80020a38:	0e 9c       	mov	r12,r7
80020a3a:	e0 a0 10 43 	rcall	80022ac0 <__avr32_f32_mul>
80020a3e:	fc 1b 40 00 	movh	r11,0x4000
80020a42:	18 92       	mov	r2,r12
80020a44:	08 9c       	mov	r12,r4
80020a46:	e0 a0 0f 7f 	rcall	80022944 <__avr32_f32_sub>
80020a4a:	18 9b       	mov	r11,r12
80020a4c:	04 9c       	mov	r12,r2
80020a4e:	e0 a0 0e c9 	rcall	800227e0 <__avr32_f32_div>
80020a52:	06 9b       	mov	r11,r3
80020a54:	18 94       	mov	r4,r12
80020a56:	0e 9c       	mov	r12,r7
80020a58:	e0 a0 10 34 	rcall	80022ac0 <__avr32_f32_mul>
80020a5c:	18 9b       	mov	r11,r12
80020a5e:	06 9c       	mov	r12,r3
80020a60:	e0 a0 0f da 	rcall	80022a14 <__avr32_f32_add>
80020a64:	18 9b       	mov	r11,r12
80020a66:	08 9c       	mov	r12,r4
80020a68:	e0 a0 0f 6e 	rcall	80022944 <__avr32_f32_sub>
80020a6c:	0e 9b       	mov	r11,r7
80020a6e:	e0 a0 0f 6b 	rcall	80022944 <__avr32_f32_sub>
80020a72:	18 9b       	mov	r11,r12
80020a74:	fc 1c 3f 80 	movh	r12,0x3f80
80020a78:	e0 a0 0f 66 	rcall	80022944 <__avr32_f32_sub>
80020a7c:	ec 0b 15 17 	lsl	r11,r6,0x17
80020a80:	f8 0b 00 0b 	add	r11,r12,r11
80020a84:	f6 08 14 17 	asr	r8,r11,0x17
80020a88:	58 08       	cp.w	r8,0
80020a8a:	e0 89 00 06 	brgt	80020a96 <__ieee754_powf+0x74e>
80020a8e:	0c 9b       	mov	r11,r6
80020a90:	e0 a0 08 9a 	rcall	80021bc4 <scalbnf>
80020a94:	18 9b       	mov	r11,r12
80020a96:	0a 9c       	mov	r12,r5
80020a98:	e0 a0 10 14 	rcall	80022ac0 <__avr32_f32_mul>
80020a9c:	fe 9f fc f8 	bral	8002048c <__ieee754_powf+0x144>
80020aa0:	16 97       	mov	r7,r11
80020aa2:	0e 9c       	mov	r12,r7
80020aa4:	2f ad       	sub	sp,-24
80020aa6:	d8 32       	popm	r0-r7,pc
80020aa8:	30 05       	mov	r5,0
80020aaa:	fe 9f fc ad 	bral	80020404 <__ieee754_powf+0xbc>
80020aae:	d7 03       	nop

80020ab0 <__ieee754_rem_pio2f>:
80020ab0:	d4 31       	pushm	r0-r7,lr
80020ab2:	20 3d       	sub	sp,12
80020ab4:	e0 68 0f d8 	mov	r8,4056
80020ab8:	ea 18 3f 49 	orh	r8,0x3f49
80020abc:	16 96       	mov	r6,r11
80020abe:	18 95       	mov	r5,r12
80020ac0:	18 9b       	mov	r11,r12
80020ac2:	e7 dc c0 1f 	bfextu	r3,r12,0x0,0x1f
80020ac6:	10 33       	cp.w	r3,r8
80020ac8:	e0 89 00 08 	brgt	80020ad8 <__ieee754_rem_pio2f+0x28>
80020acc:	30 08       	mov	r8,0
80020ace:	8d 0c       	st.w	r6[0x0],r12
80020ad0:	8d 18       	st.w	r6[0x4],r8
80020ad2:	30 04       	mov	r4,0
80020ad4:	e0 8f 01 8c 	bral	80020dec <__ieee754_rem_pio2f+0x33c>
80020ad8:	e0 68 cb e3 	mov	r8,52195
80020adc:	ea 18 40 16 	orh	r8,0x4016
80020ae0:	10 33       	cp.w	r3,r8
80020ae2:	e0 89 00 7d 	brgt	80020bdc <__ieee754_rem_pio2f+0x12c>
80020ae6:	18 97       	mov	r7,r12
80020ae8:	e4 17 7f ff 	andh	r7,0x7fff
80020aec:	e0 17 ff f0 	andl	r7,0xfff0
80020af0:	58 0c       	cp.w	r12,0
80020af2:	e0 8a 00 3b 	brle	80020b68 <__ieee754_rem_pio2f+0xb8>
80020af6:	e0 6b 0f 80 	mov	r11,3968
80020afa:	ea 1b 3f c9 	orh	r11,0x3fc9
80020afe:	e0 a0 0f 23 	rcall	80022944 <__avr32_f32_sub>
80020b02:	e0 68 0f d0 	mov	r8,4048
80020b06:	ea 18 3f c9 	orh	r8,0x3fc9
80020b0a:	18 95       	mov	r5,r12
80020b0c:	10 37       	cp.w	r7,r8
80020b0e:	c1 20       	breq	80020b32 <__ieee754_rem_pio2f+0x82>
80020b10:	e0 6b 44 43 	mov	r11,17475
80020b14:	ea 1b 37 35 	orh	r11,0x3735
80020b18:	e0 a0 0f 16 	rcall	80022944 <__avr32_f32_sub>
80020b1c:	18 98       	mov	r8,r12
80020b1e:	0a 9c       	mov	r12,r5
80020b20:	10 9b       	mov	r11,r8
80020b22:	8d 08       	st.w	r6[0x0],r8
80020b24:	e0 a0 0f 10 	rcall	80022944 <__avr32_f32_sub>
80020b28:	e0 6b 44 43 	mov	r11,17475
80020b2c:	ea 1b 37 35 	orh	r11,0x3735
80020b30:	c1 88       	rjmp	80020b60 <__ieee754_rem_pio2f+0xb0>
80020b32:	e0 6b 44 00 	mov	r11,17408
80020b36:	ea 1b 37 35 	orh	r11,0x3735
80020b3a:	e0 a0 0f 05 	rcall	80022944 <__avr32_f32_sub>
80020b3e:	e0 6b a3 08 	mov	r11,41736
80020b42:	ea 1b 2e 85 	orh	r11,0x2e85
80020b46:	18 97       	mov	r7,r12
80020b48:	e0 a0 0e fe 	rcall	80022944 <__avr32_f32_sub>
80020b4c:	18 98       	mov	r8,r12
80020b4e:	0e 9c       	mov	r12,r7
80020b50:	10 9b       	mov	r11,r8
80020b52:	8d 08       	st.w	r6[0x0],r8
80020b54:	e0 a0 0e f8 	rcall	80022944 <__avr32_f32_sub>
80020b58:	e0 6b a3 08 	mov	r11,41736
80020b5c:	ea 1b 2e 85 	orh	r11,0x2e85
80020b60:	30 14       	mov	r4,1
80020b62:	e0 a0 0e f1 	rcall	80022944 <__avr32_f32_sub>
80020b66:	c2 18       	rjmp	80020ba8 <__ieee754_rem_pio2f+0xf8>
80020b68:	e0 6b 0f 80 	mov	r11,3968
80020b6c:	ea 1b 3f c9 	orh	r11,0x3fc9
80020b70:	e0 a0 0f 52 	rcall	80022a14 <__avr32_f32_add>
80020b74:	e0 68 0f d0 	mov	r8,4048
80020b78:	ea 18 3f c9 	orh	r8,0x3fc9
80020b7c:	18 95       	mov	r5,r12
80020b7e:	10 37       	cp.w	r7,r8
80020b80:	c1 60       	breq	80020bac <__ieee754_rem_pio2f+0xfc>
80020b82:	e0 6b 44 43 	mov	r11,17475
80020b86:	ea 1b 37 35 	orh	r11,0x3735
80020b8a:	e0 a0 0f 45 	rcall	80022a14 <__avr32_f32_add>
80020b8e:	18 98       	mov	r8,r12
80020b90:	0a 9c       	mov	r12,r5
80020b92:	10 9b       	mov	r11,r8
80020b94:	8d 08       	st.w	r6[0x0],r8
80020b96:	e0 a0 0e d7 	rcall	80022944 <__avr32_f32_sub>
80020b9a:	e0 6b 44 43 	mov	r11,17475
80020b9e:	ea 1b 37 35 	orh	r11,0x3735
80020ba2:	3f f4       	mov	r4,-1
80020ba4:	e0 a0 0f 38 	rcall	80022a14 <__avr32_f32_add>
80020ba8:	8d 1c       	st.w	r6[0x4],r12
80020baa:	c2 19       	rjmp	80020dec <__ieee754_rem_pio2f+0x33c>
80020bac:	e0 6b 44 00 	mov	r11,17408
80020bb0:	ea 1b 37 35 	orh	r11,0x3735
80020bb4:	e0 a0 0f 30 	rcall	80022a14 <__avr32_f32_add>
80020bb8:	e0 6b a3 08 	mov	r11,41736
80020bbc:	ea 1b 2e 85 	orh	r11,0x2e85
80020bc0:	18 97       	mov	r7,r12
80020bc2:	e0 a0 0f 29 	rcall	80022a14 <__avr32_f32_add>
80020bc6:	18 98       	mov	r8,r12
80020bc8:	0e 9c       	mov	r12,r7
80020bca:	10 9b       	mov	r11,r8
80020bcc:	8d 08       	st.w	r6[0x0],r8
80020bce:	e0 a0 0e bb 	rcall	80022944 <__avr32_f32_sub>
80020bd2:	e0 6b a3 08 	mov	r11,41736
80020bd6:	ea 1b 2e 85 	orh	r11,0x2e85
80020bda:	ce 4b       	rjmp	80020ba2 <__ieee754_rem_pio2f+0xf2>
80020bdc:	e0 68 0f 80 	mov	r8,3968
80020be0:	ea 18 43 49 	orh	r8,0x4349
80020be4:	10 33       	cp.w	r3,r8
80020be6:	e0 89 00 ad 	brgt	80020d40 <__ieee754_rem_pio2f+0x290>
80020bea:	e0 a0 07 89 	rcall	80021afc <fabsf>
80020bee:	e0 6b f9 84 	mov	r11,63876
80020bf2:	ea 1b 3f 22 	orh	r11,0x3f22
80020bf6:	18 97       	mov	r7,r12
80020bf8:	e0 a0 0f 64 	rcall	80022ac0 <__avr32_f32_mul>
80020bfc:	fc 1b 3f 00 	movh	r11,0x3f00
80020c00:	e0 a0 0f 0a 	rcall	80022a14 <__avr32_f32_add>
80020c04:	e0 a0 10 09 	rcall	80022c16 <__avr32_f32_to_s32>
80020c08:	18 94       	mov	r4,r12
80020c0a:	e0 a0 0f cc 	rcall	80022ba2 <__avr32_s32_to_f32>
80020c0e:	e0 6b 0f 80 	mov	r11,3968
80020c12:	ea 1b bf c9 	orh	r11,0xbfc9
80020c16:	18 91       	mov	r1,r12
80020c18:	e0 a0 0f 54 	rcall	80022ac0 <__avr32_f32_mul>
80020c1c:	18 9b       	mov	r11,r12
80020c1e:	0e 9c       	mov	r12,r7
80020c20:	e0 a0 0e fa 	rcall	80022a14 <__avr32_f32_add>
80020c24:	e0 6b 44 43 	mov	r11,17475
80020c28:	ea 1b 37 35 	orh	r11,0x3735
80020c2c:	18 97       	mov	r7,r12
80020c2e:	02 9c       	mov	r12,r1
80020c30:	e0 a0 0f 48 	rcall	80022ac0 <__avr32_f32_mul>
80020c34:	18 92       	mov	r2,r12
80020c36:	59 f4       	cp.w	r4,31
80020c38:	e0 89 00 0f 	brgt	80020c56 <__ieee754_rem_pio2f+0x1a6>
80020c3c:	e8 c9 00 01 	sub	r9,r4,1
80020c40:	fe c8 b3 78 	sub	r8,pc,-19592
80020c44:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80020c48:	0a 99       	mov	r9,r5
80020c4a:	e4 19 7f ff 	andh	r9,0x7fff
80020c4e:	e0 19 ff 00 	andl	r9,0xff00
80020c52:	10 39       	cp.w	r9,r8
80020c54:	c5 b1       	brne	80020d0a <__ieee754_rem_pio2f+0x25a>
80020c56:	04 9b       	mov	r11,r2
80020c58:	0e 9c       	mov	r12,r7
80020c5a:	e0 a0 0e 75 	rcall	80022944 <__avr32_f32_sub>
80020c5e:	8d 0c       	st.w	r6[0x0],r12
80020c60:	b7 53       	asr	r3,0x17
80020c62:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80020c66:	e6 0c 01 0c 	sub	r12,r3,r12
80020c6a:	58 8c       	cp.w	r12,8
80020c6c:	e0 8a 00 54 	brle	80020d14 <__ieee754_rem_pio2f+0x264>
80020c70:	e0 6b 44 00 	mov	r11,17408
80020c74:	ea 1b 37 35 	orh	r11,0x3735
80020c78:	02 9c       	mov	r12,r1
80020c7a:	e0 a0 0f 23 	rcall	80022ac0 <__avr32_f32_mul>
80020c7e:	18 92       	mov	r2,r12
80020c80:	18 9b       	mov	r11,r12
80020c82:	0e 9c       	mov	r12,r7
80020c84:	e0 a0 0e 60 	rcall	80022944 <__avr32_f32_sub>
80020c88:	18 9b       	mov	r11,r12
80020c8a:	18 90       	mov	r0,r12
80020c8c:	0e 9c       	mov	r12,r7
80020c8e:	e0 a0 0e 5b 	rcall	80022944 <__avr32_f32_sub>
80020c92:	04 9b       	mov	r11,r2
80020c94:	e0 a0 0e 58 	rcall	80022944 <__avr32_f32_sub>
80020c98:	e0 6b a3 08 	mov	r11,41736
80020c9c:	ea 1b 2e 85 	orh	r11,0x2e85
80020ca0:	18 97       	mov	r7,r12
80020ca2:	02 9c       	mov	r12,r1
80020ca4:	e0 a0 0f 0e 	rcall	80022ac0 <__avr32_f32_mul>
80020ca8:	0e 9b       	mov	r11,r7
80020caa:	e0 a0 0e 4d 	rcall	80022944 <__avr32_f32_sub>
80020cae:	18 9b       	mov	r11,r12
80020cb0:	18 92       	mov	r2,r12
80020cb2:	00 9c       	mov	r12,r0
80020cb4:	e0 a0 0e 48 	rcall	80022944 <__avr32_f32_sub>
80020cb8:	8d 0c       	st.w	r6[0x0],r12
80020cba:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80020cbe:	18 13       	sub	r3,r12
80020cc0:	59 93       	cp.w	r3,25
80020cc2:	e0 89 00 04 	brgt	80020cca <__ieee754_rem_pio2f+0x21a>
80020cc6:	00 97       	mov	r7,r0
80020cc8:	c2 68       	rjmp	80020d14 <__ieee754_rem_pio2f+0x264>
80020cca:	e0 6b a3 00 	mov	r11,41728
80020cce:	ea 1b 2e 85 	orh	r11,0x2e85
80020cd2:	02 9c       	mov	r12,r1
80020cd4:	e0 a0 0e f6 	rcall	80022ac0 <__avr32_f32_mul>
80020cd8:	18 93       	mov	r3,r12
80020cda:	18 9b       	mov	r11,r12
80020cdc:	00 9c       	mov	r12,r0
80020cde:	e0 a0 0e 33 	rcall	80022944 <__avr32_f32_sub>
80020ce2:	18 97       	mov	r7,r12
80020ce4:	18 9b       	mov	r11,r12
80020ce6:	00 9c       	mov	r12,r0
80020ce8:	e0 a0 0e 2e 	rcall	80022944 <__avr32_f32_sub>
80020cec:	06 9b       	mov	r11,r3
80020cee:	e0 a0 0e 2b 	rcall	80022944 <__avr32_f32_sub>
80020cf2:	e0 6b 31 32 	mov	r11,12594
80020cf6:	ea 1b 24 8d 	orh	r11,0x248d
80020cfa:	18 93       	mov	r3,r12
80020cfc:	02 9c       	mov	r12,r1
80020cfe:	e0 a0 0e e1 	rcall	80022ac0 <__avr32_f32_mul>
80020d02:	06 9b       	mov	r11,r3
80020d04:	e0 a0 0e 20 	rcall	80022944 <__avr32_f32_sub>
80020d08:	18 92       	mov	r2,r12
80020d0a:	04 9b       	mov	r11,r2
80020d0c:	0e 9c       	mov	r12,r7
80020d0e:	e0 a0 0e 1b 	rcall	80022944 <__avr32_f32_sub>
80020d12:	8d 0c       	st.w	r6[0x0],r12
80020d14:	6c 0b       	ld.w	r11,r6[0x0]
80020d16:	0e 9c       	mov	r12,r7
80020d18:	ec c7 ff fc 	sub	r7,r6,-4
80020d1c:	e0 a0 0e 14 	rcall	80022944 <__avr32_f32_sub>
80020d20:	04 9b       	mov	r11,r2
80020d22:	e0 a0 0e 11 	rcall	80022944 <__avr32_f32_sub>
80020d26:	8f 0c       	st.w	r7[0x0],r12
80020d28:	58 05       	cp.w	r5,0
80020d2a:	c6 14       	brge	80020dec <__ieee754_rem_pio2f+0x33c>
80020d2c:	6c 08       	ld.w	r8,r6[0x0]
80020d2e:	ee 18 80 00 	eorh	r8,0x8000
80020d32:	8d 08       	st.w	r6[0x0],r8
80020d34:	5c 34       	neg	r4
80020d36:	6e 08       	ld.w	r8,r7[0x0]
80020d38:	ee 18 80 00 	eorh	r8,0x8000
80020d3c:	8f 08       	st.w	r7[0x0],r8
80020d3e:	c5 78       	rjmp	80020dec <__ieee754_rem_pio2f+0x33c>
80020d40:	e0 68 ff ff 	mov	r8,65535
80020d44:	ea 18 7f 7f 	orh	r8,0x7f7f
80020d48:	10 33       	cp.w	r3,r8
80020d4a:	e0 8a 00 07 	brle	80020d58 <__ieee754_rem_pio2f+0x2a8>
80020d4e:	e0 a0 0d fb 	rcall	80022944 <__avr32_f32_sub>
80020d52:	30 04       	mov	r4,0
80020d54:	8d 0c       	st.w	r6[0x0],r12
80020d56:	c2 9b       	rjmp	80020ba8 <__ieee754_rem_pio2f+0xf8>
80020d58:	e6 04 14 17 	asr	r4,r3,0x17
80020d5c:	e8 c4 00 86 	sub	r4,r4,134
80020d60:	e8 08 15 17 	lsl	r8,r4,0x17
80020d64:	10 13       	sub	r3,r8
80020d66:	06 9c       	mov	r12,r3
80020d68:	e0 a0 0f 57 	rcall	80022c16 <__avr32_f32_to_s32>
80020d6c:	e0 a0 0f 1b 	rcall	80022ba2 <__avr32_s32_to_f32>
80020d70:	18 98       	mov	r8,r12
80020d72:	06 9c       	mov	r12,r3
80020d74:	10 9b       	mov	r11,r8
80020d76:	50 08       	stdsp	sp[0x0],r8
80020d78:	e0 a0 0d e6 	rcall	80022944 <__avr32_f32_sub>
80020d7c:	fc 1b 43 80 	movh	r11,0x4380
80020d80:	e0 a0 0e a0 	rcall	80022ac0 <__avr32_f32_mul>
80020d84:	18 97       	mov	r7,r12
80020d86:	e0 a0 0f 48 	rcall	80022c16 <__avr32_f32_to_s32>
80020d8a:	e0 a0 0f 0c 	rcall	80022ba2 <__avr32_s32_to_f32>
80020d8e:	18 98       	mov	r8,r12
80020d90:	0e 9c       	mov	r12,r7
80020d92:	10 9b       	mov	r11,r8
80020d94:	50 18       	stdsp	sp[0x4],r8
80020d96:	e0 a0 0d d7 	rcall	80022944 <__avr32_f32_sub>
80020d9a:	fc 1b 43 80 	movh	r11,0x4380
80020d9e:	30 33       	mov	r3,3
80020da0:	e0 a0 0e 90 	rcall	80022ac0 <__avr32_f32_mul>
80020da4:	fa c7 ff f4 	sub	r7,sp,-12
80020da8:	0e dc       	st.w	--r7,r12
80020daa:	6e 0c       	ld.w	r12,r7[0x0]
80020dac:	06 92       	mov	r2,r3
80020dae:	20 47       	sub	r7,4
80020db0:	20 13       	sub	r3,1
80020db2:	30 0b       	mov	r11,0
80020db4:	e0 a0 0b 4a 	rcall	80022448 <__avr32_f32_cmp_eq>
80020db8:	cf 91       	brne	80020daa <__ieee754_rem_pio2f+0x2fa>
80020dba:	fe c8 b4 72 	sub	r8,pc,-19342
80020dbe:	08 9a       	mov	r10,r4
80020dc0:	1a d8       	st.w	--sp,r8
80020dc2:	04 99       	mov	r9,r2
80020dc4:	fa cc ff fc 	sub	r12,sp,-4
80020dc8:	30 28       	mov	r8,2
80020dca:	0c 9b       	mov	r11,r6
80020dcc:	e0 a0 03 3a 	rcall	80021440 <__kernel_rem_pio2f>
80020dd0:	2f fd       	sub	sp,-4
80020dd2:	18 94       	mov	r4,r12
80020dd4:	58 05       	cp.w	r5,0
80020dd6:	c0 b4       	brge	80020dec <__ieee754_rem_pio2f+0x33c>
80020dd8:	6c 09       	ld.w	r9,r6[0x0]
80020dda:	ee 19 80 00 	eorh	r9,0x8000
80020dde:	0c 98       	mov	r8,r6
80020de0:	5c 34       	neg	r4
80020de2:	10 a9       	st.w	r8++,r9
80020de4:	70 09       	ld.w	r9,r8[0x0]
80020de6:	ee 19 80 00 	eorh	r9,0x8000
80020dea:	91 09       	st.w	r8[0x0],r9
80020dec:	08 9c       	mov	r12,r4
80020dee:	2f dd       	sub	sp,-12
80020df0:	d8 32       	popm	r0-r7,pc
80020df2:	d7 03       	nop

80020df4 <__ieee754_sqrtf>:
80020df4:	d4 21       	pushm	r4-r7,lr
80020df6:	e0 6b ff ff 	mov	r11,65535
80020dfa:	ea 1b 7f 7f 	orh	r11,0x7f7f
80020dfe:	18 97       	mov	r7,r12
80020e00:	18 98       	mov	r8,r12
80020e02:	f3 dc c0 1f 	bfextu	r9,r12,0x0,0x1f
80020e06:	16 39       	cp.w	r9,r11
80020e08:	e0 88 00 0a 	brls	80020e1c <__ieee754_sqrtf+0x28>
80020e0c:	18 9b       	mov	r11,r12
80020e0e:	e0 a0 0e 59 	rcall	80022ac0 <__avr32_f32_mul>
80020e12:	18 9b       	mov	r11,r12
80020e14:	0e 9c       	mov	r12,r7
80020e16:	e0 a0 0d ff 	rcall	80022a14 <__avr32_f32_add>
80020e1a:	c0 b8       	rjmp	80020e30 <__ieee754_sqrtf+0x3c>
80020e1c:	58 09       	cp.w	r9,0
80020e1e:	c4 c0       	breq	80020eb6 <__ieee754_sqrtf+0xc2>
80020e20:	58 0c       	cp.w	r12,0
80020e22:	c0 94       	brge	80020e34 <__ieee754_sqrtf+0x40>
80020e24:	18 9b       	mov	r11,r12
80020e26:	e0 a0 0d 8f 	rcall	80022944 <__avr32_f32_sub>
80020e2a:	18 9b       	mov	r11,r12
80020e2c:	e0 a0 0c da 	rcall	800227e0 <__avr32_f32_div>
80020e30:	18 97       	mov	r7,r12
80020e32:	c4 28       	rjmp	80020eb6 <__ieee754_sqrtf+0xc2>
80020e34:	f8 0a 14 17 	asr	r10,r12,0x17
80020e38:	e0 6b ff ff 	mov	r11,65535
80020e3c:	ea 1b 00 7f 	orh	r11,0x7f
80020e40:	16 39       	cp.w	r9,r11
80020e42:	e0 8b 00 0b 	brhi	80020e58 <__ieee754_sqrtf+0x64>
80020e46:	30 09       	mov	r9,0
80020e48:	c0 38       	rjmp	80020e4e <__ieee754_sqrtf+0x5a>
80020e4a:	a1 78       	lsl	r8,0x1
80020e4c:	2f f9       	sub	r9,-1
80020e4e:	ed b8 00 17 	bld	r8,0x17
80020e52:	cf c1       	brne	80020e4a <__ieee754_sqrtf+0x56>
80020e54:	2f fa       	sub	r10,-1
80020e56:	12 1a       	sub	r10,r9
80020e58:	f4 cc 00 7f 	sub	r12,r10,127
80020e5c:	f3 dc c0 01 	bfextu	r9,r12,0x0,0x1
80020e60:	30 0a       	mov	r10,0
80020e62:	f1 d8 c0 17 	bfextu	r8,r8,0x0,0x17
80020e66:	14 97       	mov	r7,r10
80020e68:	b7 b8       	sbr	r8,0x17
80020e6a:	14 9e       	mov	lr,r10
80020e6c:	f0 0b 15 01 	lsl	r11,r8,0x1
80020e70:	14 39       	cp.w	r9,r10
80020e72:	f6 08 17 10 	movne	r8,r11
80020e76:	fc 19 01 00 	movh	r9,0x100
80020e7a:	a1 78       	lsl	r8,0x1
80020e7c:	fc 09 00 0b 	add	r11,lr,r9
80020e80:	2f fa       	sub	r10,-1
80020e82:	10 3b       	cp.w	r11,r8
80020e84:	f1 db ea 18 	suble	r8,r8,r11
80020e88:	ef d9 ea 07 	addle	r7,r7,r9
80020e8c:	f7 d9 ea 0e 	addle	lr,r11,r9
80020e90:	a1 78       	lsl	r8,0x1
80020e92:	a1 99       	lsr	r9,0x1
80020e94:	59 9a       	cp.w	r10,25
80020e96:	cf 31       	brne	80020e7c <__ieee754_sqrtf+0x88>
80020e98:	58 08       	cp.w	r8,0
80020e9a:	f9 b9 01 01 	movne	r9,1
80020e9e:	ef d9 e1 28 	andne	r8,r7,r9
80020ea2:	f1 d7 e1 07 	addne	r7,r8,r7
80020ea6:	a1 57       	asr	r7,0x1
80020ea8:	a1 5c       	asr	r12,0x1
80020eaa:	fc 18 3f 00 	movh	r8,0x3f00
80020eae:	b7 7c       	lsl	r12,0x17
80020eb0:	10 0c       	add	r12,r8
80020eb2:	0e 0c       	add	r12,r7
80020eb4:	18 97       	mov	r7,r12
80020eb6:	0e 9c       	mov	r12,r7
80020eb8:	d8 22       	popm	r4-r7,pc
80020eba:	d7 03       	nop

80020ebc <__ieee754_log>:
80020ebc:	d4 31       	pushm	r0-r7,lr
80020ebe:	20 7d       	sub	sp,28
80020ec0:	14 98       	mov	r8,r10
80020ec2:	16 99       	mov	r9,r11
80020ec4:	14 96       	mov	r6,r10
80020ec6:	16 97       	mov	r7,r11
80020ec8:	16 94       	mov	r4,r11
80020eca:	16 9c       	mov	r12,r11
80020ecc:	14 95       	mov	r5,r10
80020ece:	ee 5b ff ff 	cp.w	r11,1048575
80020ed2:	e0 8a 00 04 	brle	80020eda <__ieee754_log+0x1e>
80020ed6:	30 0a       	mov	r10,0
80020ed8:	c2 18       	rjmp	80020f1a <__ieee754_log+0x5e>
80020eda:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80020ede:	14 4c       	or	r12,r10
80020ee0:	c0 71       	brne	80020eee <__ieee754_log+0x32>
80020ee2:	30 08       	mov	r8,0
80020ee4:	30 09       	mov	r9,0
80020ee6:	30 0a       	mov	r10,0
80020ee8:	fc 1b c3 50 	movh	r11,0xc350
80020eec:	c0 88       	rjmp	80020efc <__ieee754_log+0x40>
80020eee:	16 94       	mov	r4,r11
80020ef0:	58 0b       	cp.w	r11,0
80020ef2:	c0 94       	brge	80020f04 <__ieee754_log+0x48>
80020ef4:	e0 a0 08 54 	rcall	80021f9c <__avr32_f64_sub>
80020ef8:	30 08       	mov	r8,0
80020efa:	30 09       	mov	r9,0
80020efc:	e0 a0 0a e6 	rcall	800224c8 <__avr32_f64_div>
80020f00:	e0 8f 01 fa 	bral	800212f4 <__ieee754_log+0x438>
80020f04:	30 08       	mov	r8,0
80020f06:	fc 19 43 50 	movh	r9,0x4350
80020f0a:	e0 a0 07 5d 	rcall	80021dc4 <__avr32_f64_mul>
80020f0e:	14 98       	mov	r8,r10
80020f10:	16 99       	mov	r9,r11
80020f12:	3c aa       	mov	r10,-54
80020f14:	10 94       	mov	r4,r8
80020f16:	12 95       	mov	r5,r9
80020f18:	12 9c       	mov	r12,r9
80020f1a:	e0 6b ff ff 	mov	r11,65535
80020f1e:	ea 1b 7f ef 	orh	r11,0x7fef
80020f22:	16 3c       	cp.w	r12,r11
80020f24:	e0 8a 00 05 	brle	80020f2e <__ieee754_log+0x72>
80020f28:	10 9a       	mov	r10,r8
80020f2a:	12 9b       	mov	r11,r9
80020f2c:	c4 d8       	rjmp	80020fc6 <__ieee754_log+0x10a>
80020f2e:	e8 79 5f 64 	mov	r9,614244
80020f32:	e9 dc c0 14 	bfextu	r4,r12,0x0,0x14
80020f36:	f4 c5 03 ff 	sub	r5,r10,1023
80020f3a:	b5 4c       	asr	r12,0x14
80020f3c:	10 9a       	mov	r10,r8
80020f3e:	e8 09 00 08 	add	r8,r4,r9
80020f42:	e6 18 00 10 	andh	r8,0x10,COH
80020f46:	f0 09 14 14 	asr	r9,r8,0x14
80020f4a:	ee 18 3f f0 	eorh	r8,0x3ff0
80020f4e:	18 05       	add	r5,r12
80020f50:	f1 e4 10 0b 	or	r11,r8,r4
80020f54:	12 05       	add	r5,r9
80020f56:	30 08       	mov	r8,0
80020f58:	fc 19 3f f0 	movh	r9,0x3ff0
80020f5c:	e0 a0 08 20 	rcall	80021f9c <__avr32_f64_sub>
80020f60:	e8 c8 ff fe 	sub	r8,r4,-2
80020f64:	14 96       	mov	r6,r10
80020f66:	16 97       	mov	r7,r11
80020f68:	f1 d8 c0 14 	bfextu	r8,r8,0x0,0x14
80020f6c:	58 28       	cp.w	r8,2
80020f6e:	e0 89 00 80 	brgt	8002106e <__ieee754_log+0x1b2>
80020f72:	30 08       	mov	r8,0
80020f74:	30 09       	mov	r9,0
80020f76:	e0 a0 09 ee 	rcall	80022352 <__avr32_f64_cmp_eq>
80020f7a:	c2 a0       	breq	80020fce <__ieee754_log+0x112>
80020f7c:	58 05       	cp.w	r5,0
80020f7e:	c0 51       	brne	80020f88 <__ieee754_log+0xcc>
80020f80:	30 0a       	mov	r10,0
80020f82:	30 0b       	mov	r11,0
80020f84:	e0 8f 01 b8 	bral	800212f4 <__ieee754_log+0x438>
80020f88:	0a 9c       	mov	r12,r5
80020f8a:	e0 a0 09 74 	rcall	80022272 <__avr32_s32_to_f64>
80020f8e:	fc 18 fe e0 	movh	r8,0xfee0
80020f92:	14 94       	mov	r4,r10
80020f94:	16 95       	mov	r5,r11
80020f96:	e0 69 2e 42 	mov	r9,11842
80020f9a:	ea 19 3f e6 	orh	r9,0x3fe6
80020f9e:	e0 a0 07 13 	rcall	80021dc4 <__avr32_f64_mul>
80020fa2:	e0 68 3c 76 	mov	r8,15478
80020fa6:	ea 18 35 79 	orh	r8,0x3579
80020faa:	16 97       	mov	r7,r11
80020fac:	14 96       	mov	r6,r10
80020fae:	e0 69 39 ef 	mov	r9,14831
80020fb2:	ea 19 3d ea 	orh	r9,0x3dea
80020fb6:	08 9a       	mov	r10,r4
80020fb8:	0a 9b       	mov	r11,r5
80020fba:	e0 a0 07 05 	rcall	80021dc4 <__avr32_f64_mul>
80020fbe:	14 98       	mov	r8,r10
80020fc0:	16 99       	mov	r9,r11
80020fc2:	0c 9a       	mov	r10,r6
80020fc4:	0e 9b       	mov	r11,r7
80020fc6:	e0 a0 08 b9 	rcall	80022138 <__avr32_f64_add>
80020fca:	e0 8f 01 95 	bral	800212f4 <__ieee754_log+0x438>
80020fce:	0c 98       	mov	r8,r6
80020fd0:	0e 99       	mov	r9,r7
80020fd2:	0c 9a       	mov	r10,r6
80020fd4:	0e 9b       	mov	r11,r7
80020fd6:	e0 a0 06 f7 	rcall	80021dc4 <__avr32_f64_mul>
80020fda:	e0 68 55 55 	mov	r8,21845
80020fde:	ea 18 55 55 	orh	r8,0x5555
80020fe2:	14 92       	mov	r2,r10
80020fe4:	16 93       	mov	r3,r11
80020fe6:	e0 69 55 55 	mov	r9,21845
80020fea:	ea 19 bf d5 	orh	r9,0xbfd5
80020fee:	0c 9a       	mov	r10,r6
80020ff0:	0e 9b       	mov	r11,r7
80020ff2:	e0 a0 06 e9 	rcall	80021dc4 <__avr32_f64_mul>
80020ff6:	30 08       	mov	r8,0
80020ff8:	fc 19 3f e0 	movh	r9,0x3fe0
80020ffc:	e0 a0 08 9e 	rcall	80022138 <__avr32_f64_add>
80021000:	14 98       	mov	r8,r10
80021002:	16 99       	mov	r9,r11
80021004:	04 9a       	mov	r10,r2
80021006:	06 9b       	mov	r11,r3
80021008:	e0 a0 06 de 	rcall	80021dc4 <__avr32_f64_mul>
8002100c:	14 92       	mov	r2,r10
8002100e:	16 93       	mov	r3,r11
80021010:	58 05       	cp.w	r5,0
80021012:	c0 41       	brne	8002101a <__ieee754_log+0x15e>
80021014:	14 98       	mov	r8,r10
80021016:	06 99       	mov	r9,r3
80021018:	c3 59       	rjmp	80021282 <__ieee754_log+0x3c6>
8002101a:	0a 9c       	mov	r12,r5
8002101c:	e0 a0 09 2b 	rcall	80022272 <__avr32_s32_to_f64>
80021020:	fc 18 fe e0 	movh	r8,0xfee0
80021024:	14 94       	mov	r4,r10
80021026:	16 95       	mov	r5,r11
80021028:	e0 69 2e 42 	mov	r9,11842
8002102c:	ea 19 3f e6 	orh	r9,0x3fe6
80021030:	e0 a0 06 ca 	rcall	80021dc4 <__avr32_f64_mul>
80021034:	e0 68 3c 76 	mov	r8,15478
80021038:	ea 18 35 79 	orh	r8,0x3579
8002103c:	14 90       	mov	r0,r10
8002103e:	16 91       	mov	r1,r11
80021040:	e0 69 39 ef 	mov	r9,14831
80021044:	ea 19 bd ea 	orh	r9,0xbdea
80021048:	08 9a       	mov	r10,r4
8002104a:	0a 9b       	mov	r11,r5
8002104c:	e0 a0 06 bc 	rcall	80021dc4 <__avr32_f64_mul>
80021050:	14 98       	mov	r8,r10
80021052:	16 99       	mov	r9,r11
80021054:	04 9a       	mov	r10,r2
80021056:	06 9b       	mov	r11,r3
80021058:	e0 a0 08 70 	rcall	80022138 <__avr32_f64_add>
8002105c:	0c 98       	mov	r8,r6
8002105e:	0e 99       	mov	r9,r7
80021060:	e0 a0 07 9e 	rcall	80021f9c <__avr32_f64_sub>
80021064:	14 98       	mov	r8,r10
80021066:	16 99       	mov	r9,r11
80021068:	00 9a       	mov	r10,r0
8002106a:	02 9b       	mov	r11,r1
8002106c:	c4 29       	rjmp	800212f0 <__ieee754_log+0x434>
8002106e:	30 08       	mov	r8,0
80021070:	fc 19 40 00 	movh	r9,0x4000
80021074:	e0 a0 08 62 	rcall	80022138 <__avr32_f64_add>
80021078:	14 98       	mov	r8,r10
8002107a:	16 99       	mov	r9,r11
8002107c:	0c 9a       	mov	r10,r6
8002107e:	0e 9b       	mov	r11,r7
80021080:	e0 a0 0a 24 	rcall	800224c8 <__avr32_f64_div>
80021084:	0a 9c       	mov	r12,r5
80021086:	14 90       	mov	r0,r10
80021088:	16 91       	mov	r1,r11
8002108a:	e0 a0 08 f4 	rcall	80022272 <__avr32_s32_to_f64>
8002108e:	00 98       	mov	r8,r0
80021090:	02 99       	mov	r9,r1
80021092:	fa eb 00 0c 	st.d	sp[12],r10
80021096:	00 9a       	mov	r10,r0
80021098:	02 9b       	mov	r11,r1
8002109a:	e0 a0 06 95 	rcall	80021dc4 <__avr32_f64_mul>
8002109e:	14 98       	mov	r8,r10
800210a0:	16 99       	mov	r9,r11
800210a2:	fa eb 00 04 	st.d	sp[4],r10
800210a6:	e0 a0 06 8f 	rcall	80021dc4 <__avr32_f64_mul>
800210aa:	e0 68 52 44 	mov	r8,21060
800210ae:	ea 18 df 3e 	orh	r8,0xdf3e
800210b2:	14 92       	mov	r2,r10
800210b4:	16 93       	mov	r3,r11
800210b6:	e0 69 f1 12 	mov	r9,61714
800210ba:	ea 19 3f c2 	orh	r9,0x3fc2
800210be:	e0 a0 06 83 	rcall	80021dc4 <__avr32_f64_mul>
800210c2:	e0 68 03 de 	mov	r8,990
800210c6:	ea 18 96 cb 	orh	r8,0x96cb
800210ca:	e0 69 46 64 	mov	r9,18020
800210ce:	ea 19 3f c7 	orh	r9,0x3fc7
800210d2:	e0 a0 08 33 	rcall	80022138 <__avr32_f64_add>
800210d6:	14 98       	mov	r8,r10
800210d8:	16 99       	mov	r9,r11
800210da:	04 9a       	mov	r10,r2
800210dc:	06 9b       	mov	r11,r3
800210de:	e0 a0 06 73 	rcall	80021dc4 <__avr32_f64_mul>
800210e2:	e0 68 93 59 	mov	r8,37721
800210e6:	ea 18 94 22 	orh	r8,0x9422
800210ea:	e0 69 49 24 	mov	r9,18724
800210ee:	ea 19 3f d2 	orh	r9,0x3fd2
800210f2:	e0 a0 08 23 	rcall	80022138 <__avr32_f64_add>
800210f6:	14 98       	mov	r8,r10
800210f8:	16 99       	mov	r9,r11
800210fa:	04 9a       	mov	r10,r2
800210fc:	06 9b       	mov	r11,r3
800210fe:	e0 a0 06 63 	rcall	80021dc4 <__avr32_f64_mul>
80021102:	e0 68 55 93 	mov	r8,21907
80021106:	ea 18 55 55 	orh	r8,0x5555
8002110a:	e0 69 55 55 	mov	r9,21845
8002110e:	ea 19 3f e5 	orh	r9,0x3fe5
80021112:	e0 a0 08 13 	rcall	80022138 <__avr32_f64_add>
80021116:	14 98       	mov	r8,r10
80021118:	16 99       	mov	r9,r11
8002111a:	fa ea 00 04 	ld.d	r10,sp[4]
8002111e:	e0 a0 06 53 	rcall	80021dc4 <__avr32_f64_mul>
80021122:	e0 68 c6 9f 	mov	r8,50847
80021126:	ea 18 d0 78 	orh	r8,0xd078
8002112a:	fa eb 00 04 	st.d	sp[4],r10
8002112e:	e0 69 9a 09 	mov	r9,39433
80021132:	ea 19 3f c3 	orh	r9,0x3fc3
80021136:	04 9a       	mov	r10,r2
80021138:	06 9b       	mov	r11,r3
8002113a:	e0 a0 06 45 	rcall	80021dc4 <__avr32_f64_mul>
8002113e:	e0 68 78 af 	mov	r8,30895
80021142:	ea 18 1d 8e 	orh	r8,0x1d8e
80021146:	e0 69 71 c5 	mov	r9,29125
8002114a:	ea 19 3f cc 	orh	r9,0x3fcc
8002114e:	e0 a0 07 f5 	rcall	80022138 <__avr32_f64_add>
80021152:	14 98       	mov	r8,r10
80021154:	16 99       	mov	r9,r11
80021156:	04 9a       	mov	r10,r2
80021158:	06 9b       	mov	r11,r3
8002115a:	e0 a0 06 35 	rcall	80021dc4 <__avr32_f64_mul>
8002115e:	f8 78 eb 86 	mov	r8,-398458
80021162:	e8 08 00 0c 	add	r12,r4,r8
80021166:	e0 69 99 99 	mov	r9,39321
8002116a:	ea 19 3f d9 	orh	r9,0x3fd9
8002116e:	50 0c       	stdsp	sp[0x0],r12
80021170:	e0 68 fa 04 	mov	r8,64004
80021174:	ea 18 99 97 	orh	r8,0x9997
80021178:	e0 a0 07 e0 	rcall	80022138 <__avr32_f64_add>
8002117c:	14 98       	mov	r8,r10
8002117e:	16 99       	mov	r9,r11
80021180:	04 9a       	mov	r10,r2
80021182:	06 9b       	mov	r11,r3
80021184:	e0 a0 06 20 	rcall	80021dc4 <__avr32_f64_mul>
80021188:	14 98       	mov	r8,r10
8002118a:	16 99       	mov	r9,r11
8002118c:	fa ea 00 04 	ld.d	r10,sp[4]
80021190:	e0 a0 07 d4 	rcall	80022138 <__avr32_f64_add>
80021194:	40 0c       	lddsp	r12,sp[0x0]
80021196:	16 93       	mov	r3,r11
80021198:	14 92       	mov	r2,r10
8002119a:	e6 6b b8 51 	mov	r11,440401
8002119e:	f6 04 01 04 	sub	r4,r11,r4
800211a2:	e9 ec 10 0c 	or	r12,r4,r12
800211a6:	58 0c       	cp.w	r12,0
800211a8:	e0 8a 00 5d 	brle	80021262 <__ieee754_log+0x3a6>
800211ac:	30 08       	mov	r8,0
800211ae:	fc 19 3f e0 	movh	r9,0x3fe0
800211b2:	0c 9a       	mov	r10,r6
800211b4:	0e 9b       	mov	r11,r7
800211b6:	e0 a0 06 07 	rcall	80021dc4 <__avr32_f64_mul>
800211ba:	0c 98       	mov	r8,r6
800211bc:	0e 99       	mov	r9,r7
800211be:	e0 a0 06 03 	rcall	80021dc4 <__avr32_f64_mul>
800211c2:	fa eb 00 04 	st.d	sp[4],r10
800211c6:	58 05       	cp.w	r5,0
800211c8:	c1 21       	brne	800211ec <__ieee754_log+0x330>
800211ca:	04 98       	mov	r8,r2
800211cc:	06 99       	mov	r9,r3
800211ce:	e0 a0 07 b5 	rcall	80022138 <__avr32_f64_add>
800211d2:	14 98       	mov	r8,r10
800211d4:	16 99       	mov	r9,r11
800211d6:	00 9a       	mov	r10,r0
800211d8:	02 9b       	mov	r11,r1
800211da:	e0 a0 05 f5 	rcall	80021dc4 <__avr32_f64_mul>
800211de:	14 98       	mov	r8,r10
800211e0:	16 99       	mov	r9,r11
800211e2:	fa ea 00 04 	ld.d	r10,sp[4]
800211e6:	e0 a0 06 db 	rcall	80021f9c <__avr32_f64_sub>
800211ea:	c4 a8       	rjmp	8002127e <__ieee754_log+0x3c2>
800211ec:	fc 18 fe e0 	movh	r8,0xfee0
800211f0:	e0 69 2e 42 	mov	r9,11842
800211f4:	ea 19 3f e6 	orh	r9,0x3fe6
800211f8:	fa ea 00 0c 	ld.d	r10,sp[12]
800211fc:	e0 a0 05 e4 	rcall	80021dc4 <__avr32_f64_mul>
80021200:	04 98       	mov	r8,r2
80021202:	fa eb 00 14 	st.d	sp[20],r10
80021206:	06 99       	mov	r9,r3
80021208:	fa ea 00 04 	ld.d	r10,sp[4]
8002120c:	e0 a0 07 96 	rcall	80022138 <__avr32_f64_add>
80021210:	14 98       	mov	r8,r10
80021212:	16 99       	mov	r9,r11
80021214:	00 9a       	mov	r10,r0
80021216:	02 9b       	mov	r11,r1
80021218:	e0 a0 05 d6 	rcall	80021dc4 <__avr32_f64_mul>
8002121c:	e0 68 3c 76 	mov	r8,15478
80021220:	ea 18 35 79 	orh	r8,0x3579
80021224:	14 94       	mov	r4,r10
80021226:	16 95       	mov	r5,r11
80021228:	e0 69 39 ef 	mov	r9,14831
8002122c:	ea 19 3d ea 	orh	r9,0x3dea
80021230:	fa ea 00 0c 	ld.d	r10,sp[12]
80021234:	e0 a0 05 c8 	rcall	80021dc4 <__avr32_f64_mul>
80021238:	14 98       	mov	r8,r10
8002123a:	16 99       	mov	r9,r11
8002123c:	08 9a       	mov	r10,r4
8002123e:	0a 9b       	mov	r11,r5
80021240:	e0 a0 07 7c 	rcall	80022138 <__avr32_f64_add>
80021244:	14 98       	mov	r8,r10
80021246:	16 99       	mov	r9,r11
80021248:	fa ea 00 04 	ld.d	r10,sp[4]
8002124c:	e0 a0 06 a8 	rcall	80021f9c <__avr32_f64_sub>
80021250:	0c 98       	mov	r8,r6
80021252:	0e 99       	mov	r9,r7
80021254:	e0 a0 06 a4 	rcall	80021f9c <__avr32_f64_sub>
80021258:	14 98       	mov	r8,r10
8002125a:	16 99       	mov	r9,r11
8002125c:	fa ea 00 14 	ld.d	r10,sp[20]
80021260:	c4 88       	rjmp	800212f0 <__ieee754_log+0x434>
80021262:	58 05       	cp.w	r5,0
80021264:	c1 21       	brne	80021288 <__ieee754_log+0x3cc>
80021266:	14 98       	mov	r8,r10
80021268:	06 99       	mov	r9,r3
8002126a:	0c 9a       	mov	r10,r6
8002126c:	0e 9b       	mov	r11,r7
8002126e:	e0 a0 06 97 	rcall	80021f9c <__avr32_f64_sub>
80021272:	14 98       	mov	r8,r10
80021274:	16 99       	mov	r9,r11
80021276:	00 9a       	mov	r10,r0
80021278:	02 9b       	mov	r11,r1
8002127a:	e0 a0 05 a5 	rcall	80021dc4 <__avr32_f64_mul>
8002127e:	14 98       	mov	r8,r10
80021280:	16 99       	mov	r9,r11
80021282:	0c 9a       	mov	r10,r6
80021284:	0e 9b       	mov	r11,r7
80021286:	c3 58       	rjmp	800212f0 <__ieee754_log+0x434>
80021288:	fc 18 fe e0 	movh	r8,0xfee0
8002128c:	e0 69 2e 42 	mov	r9,11842
80021290:	ea 19 3f e6 	orh	r9,0x3fe6
80021294:	fa ea 00 0c 	ld.d	r10,sp[12]
80021298:	e0 a0 05 96 	rcall	80021dc4 <__avr32_f64_mul>
8002129c:	04 98       	mov	r8,r2
8002129e:	fa eb 00 04 	st.d	sp[4],r10
800212a2:	06 99       	mov	r9,r3
800212a4:	0c 9a       	mov	r10,r6
800212a6:	0e 9b       	mov	r11,r7
800212a8:	e0 a0 06 7a 	rcall	80021f9c <__avr32_f64_sub>
800212ac:	14 98       	mov	r8,r10
800212ae:	16 99       	mov	r9,r11
800212b0:	00 9a       	mov	r10,r0
800212b2:	02 9b       	mov	r11,r1
800212b4:	e0 a0 05 88 	rcall	80021dc4 <__avr32_f64_mul>
800212b8:	e0 68 3c 76 	mov	r8,15478
800212bc:	ea 18 35 79 	orh	r8,0x3579
800212c0:	14 94       	mov	r4,r10
800212c2:	16 95       	mov	r5,r11
800212c4:	e0 69 39 ef 	mov	r9,14831
800212c8:	ea 19 bd ea 	orh	r9,0xbdea
800212cc:	fa ea 00 0c 	ld.d	r10,sp[12]
800212d0:	e0 a0 05 7a 	rcall	80021dc4 <__avr32_f64_mul>
800212d4:	14 98       	mov	r8,r10
800212d6:	16 99       	mov	r9,r11
800212d8:	08 9a       	mov	r10,r4
800212da:	0a 9b       	mov	r11,r5
800212dc:	e0 a0 07 2e 	rcall	80022138 <__avr32_f64_add>
800212e0:	0c 98       	mov	r8,r6
800212e2:	0e 99       	mov	r9,r7
800212e4:	e0 a0 06 5c 	rcall	80021f9c <__avr32_f64_sub>
800212e8:	14 98       	mov	r8,r10
800212ea:	16 99       	mov	r9,r11
800212ec:	fa ea 00 04 	ld.d	r10,sp[4]
800212f0:	e0 a0 06 56 	rcall	80021f9c <__avr32_f64_sub>
800212f4:	2f 9d       	sub	sp,-28
800212f6:	d8 32       	popm	r0-r7,pc

800212f8 <__kernel_cosf>:
800212f8:	d4 31       	pushm	r0-r7,lr
800212fa:	e0 68 ff ff 	mov	r8,65535
800212fe:	ea 18 31 ff 	orh	r8,0x31ff
80021302:	16 94       	mov	r4,r11
80021304:	18 96       	mov	r6,r12
80021306:	eb dc c0 1f 	bfextu	r5,r12,0x0,0x1f
8002130a:	10 35       	cp.w	r5,r8
8002130c:	e0 89 00 08 	brgt	8002131c <__kernel_cosf+0x24>
80021310:	e0 a0 0c 83 	rcall	80022c16 <__avr32_f32_to_s32>
80021314:	c0 41       	brne	8002131c <__kernel_cosf+0x24>
80021316:	fc 1c 3f 80 	movh	r12,0x3f80
8002131a:	d8 32       	popm	r0-r7,pc
8002131c:	0c 9b       	mov	r11,r6
8002131e:	0c 9c       	mov	r12,r6
80021320:	e0 a0 0b d0 	rcall	80022ac0 <__avr32_f32_mul>
80021324:	e0 6b d7 4e 	mov	r11,55118
80021328:	ea 1b ad 47 	orh	r11,0xad47
8002132c:	18 97       	mov	r7,r12
8002132e:	e0 a0 0b c9 	rcall	80022ac0 <__avr32_f32_mul>
80021332:	e0 6b 74 f6 	mov	r11,29942
80021336:	ea 1b 31 0f 	orh	r11,0x310f
8002133a:	e0 a0 0b 6d 	rcall	80022a14 <__avr32_f32_add>
8002133e:	18 9b       	mov	r11,r12
80021340:	0e 9c       	mov	r12,r7
80021342:	e0 a0 0b bf 	rcall	80022ac0 <__avr32_f32_mul>
80021346:	e0 6b f2 7c 	mov	r11,62076
8002134a:	ea 1b 34 93 	orh	r11,0x3493
8002134e:	e0 a0 0a fb 	rcall	80022944 <__avr32_f32_sub>
80021352:	18 9b       	mov	r11,r12
80021354:	0e 9c       	mov	r12,r7
80021356:	e0 a0 0b b5 	rcall	80022ac0 <__avr32_f32_mul>
8002135a:	e0 6b 0d 01 	mov	r11,3329
8002135e:	ea 1b 37 d0 	orh	r11,0x37d0
80021362:	e0 a0 0b 59 	rcall	80022a14 <__avr32_f32_add>
80021366:	18 9b       	mov	r11,r12
80021368:	0e 9c       	mov	r12,r7
8002136a:	e0 a0 0b ab 	rcall	80022ac0 <__avr32_f32_mul>
8002136e:	e0 6b 0b 61 	mov	r11,2913
80021372:	ea 1b 3a b6 	orh	r11,0x3ab6
80021376:	e0 a0 0a e7 	rcall	80022944 <__avr32_f32_sub>
8002137a:	18 9b       	mov	r11,r12
8002137c:	0e 9c       	mov	r12,r7
8002137e:	e0 a0 0b a1 	rcall	80022ac0 <__avr32_f32_mul>
80021382:	e0 6b aa ab 	mov	r11,43691
80021386:	ea 1b 3d 2a 	orh	r11,0x3d2a
8002138a:	e0 a0 0b 45 	rcall	80022a14 <__avr32_f32_add>
8002138e:	18 9b       	mov	r11,r12
80021390:	0e 9c       	mov	r12,r7
80021392:	e0 a0 0b 97 	rcall	80022ac0 <__avr32_f32_mul>
80021396:	e0 68 99 99 	mov	r8,39321
8002139a:	ea 18 3e 99 	orh	r8,0x3e99
8002139e:	18 93       	mov	r3,r12
800213a0:	10 35       	cp.w	r5,r8
800213a2:	e0 89 00 1f 	brgt	800213e0 <__kernel_cosf+0xe8>
800213a6:	fc 1b 3f 00 	movh	r11,0x3f00
800213aa:	0e 9c       	mov	r12,r7
800213ac:	e0 a0 0b 8a 	rcall	80022ac0 <__avr32_f32_mul>
800213b0:	06 9b       	mov	r11,r3
800213b2:	18 95       	mov	r5,r12
800213b4:	0e 9c       	mov	r12,r7
800213b6:	e0 a0 0b 85 	rcall	80022ac0 <__avr32_f32_mul>
800213ba:	08 9b       	mov	r11,r4
800213bc:	18 97       	mov	r7,r12
800213be:	0c 9c       	mov	r12,r6
800213c0:	e0 a0 0b 80 	rcall	80022ac0 <__avr32_f32_mul>
800213c4:	18 9b       	mov	r11,r12
800213c6:	0e 9c       	mov	r12,r7
800213c8:	e0 a0 0a be 	rcall	80022944 <__avr32_f32_sub>
800213cc:	18 9b       	mov	r11,r12
800213ce:	0a 9c       	mov	r12,r5
800213d0:	e0 a0 0a ba 	rcall	80022944 <__avr32_f32_sub>
800213d4:	18 9b       	mov	r11,r12
800213d6:	fc 1c 3f 80 	movh	r12,0x3f80
800213da:	e0 a0 0a b5 	rcall	80022944 <__avr32_f32_sub>
800213de:	d8 32       	popm	r0-r7,pc
800213e0:	fc 18 3f 48 	movh	r8,0x3f48
800213e4:	10 35       	cp.w	r5,r8
800213e6:	e0 8a 00 05 	brle	800213f0 <__kernel_cosf+0xf8>
800213ea:	fc 15 3e 90 	movh	r5,0x3e90
800213ee:	c0 48       	rjmp	800213f6 <__kernel_cosf+0xfe>
800213f0:	fc 18 ff 00 	movh	r8,0xff00
800213f4:	10 05       	add	r5,r8
800213f6:	0a 9b       	mov	r11,r5
800213f8:	fc 1c 3f 80 	movh	r12,0x3f80
800213fc:	e0 a0 0a a4 	rcall	80022944 <__avr32_f32_sub>
80021400:	fc 1b 3f 00 	movh	r11,0x3f00
80021404:	18 92       	mov	r2,r12
80021406:	0e 9c       	mov	r12,r7
80021408:	e0 a0 0b 5c 	rcall	80022ac0 <__avr32_f32_mul>
8002140c:	0a 9b       	mov	r11,r5
8002140e:	e0 a0 0a 9b 	rcall	80022944 <__avr32_f32_sub>
80021412:	06 9b       	mov	r11,r3
80021414:	18 95       	mov	r5,r12
80021416:	0e 9c       	mov	r12,r7
80021418:	e0 a0 0b 54 	rcall	80022ac0 <__avr32_f32_mul>
8002141c:	08 9b       	mov	r11,r4
8002141e:	18 97       	mov	r7,r12
80021420:	0c 9c       	mov	r12,r6
80021422:	e0 a0 0b 4f 	rcall	80022ac0 <__avr32_f32_mul>
80021426:	18 9b       	mov	r11,r12
80021428:	0e 9c       	mov	r12,r7
8002142a:	e0 a0 0a 8d 	rcall	80022944 <__avr32_f32_sub>
8002142e:	18 9b       	mov	r11,r12
80021430:	0a 9c       	mov	r12,r5
80021432:	e0 a0 0a 89 	rcall	80022944 <__avr32_f32_sub>
80021436:	18 9b       	mov	r11,r12
80021438:	04 9c       	mov	r12,r2
8002143a:	e0 a0 0a 85 	rcall	80022944 <__avr32_f32_sub>
8002143e:	d8 32       	popm	r0-r7,pc

80021440 <__kernel_rem_pio2f>:
80021440:	d4 31       	pushm	r0-r7,lr
80021442:	fa cd 01 78 	sub	sp,sp,376
80021446:	50 99       	stdsp	sp[0x24],r9
80021448:	46 79       	lddsp	r9,sp[0x19c]
8002144a:	50 48       	stdsp	sp[0x10],r8
8002144c:	50 a9       	stdsp	sp[0x28],r9
8002144e:	16 95       	mov	r5,r11
80021450:	40 98       	lddsp	r8,sp[0x24]
80021452:	fe c9 b7 f2 	sub	r9,pc,-18446
80021456:	20 18       	sub	r8,1
80021458:	40 4b       	lddsp	r11,sp[0x10]
8002145a:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002145e:	50 28       	stdsp	sp[0x8],r8
80021460:	50 39       	stdsp	sp[0xc],r9
80021462:	30 08       	mov	r8,0
80021464:	f4 c9 00 03 	sub	r9,r10,3
80021468:	10 97       	mov	r7,r8
8002146a:	30 83       	mov	r3,8
8002146c:	f2 03 0c 02 	divs	r2,r9,r3
80021470:	f0 02 0c 48 	max	r8,r8,r2
80021474:	40 29       	lddsp	r9,sp[0x8]
80021476:	10 96       	mov	r6,r8
80021478:	10 93       	mov	r3,r8
8002147a:	50 58       	stdsp	sp[0x14],r8
8002147c:	40 32       	lddsp	r2,sp[0xc]
8002147e:	5c d6       	com	r6
80021480:	12 13       	sub	r3,r9
80021482:	40 a8       	lddsp	r8,sp[0x28]
80021484:	50 8c       	stdsp	sp[0x20],r12
80021486:	12 02       	add	r2,r9
80021488:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002148c:	fa c1 ff 28 	sub	r1,sp,-216
80021490:	f0 03 00 24 	add	r4,r8,r3<<0x2
80021494:	c0 c8       	rjmp	800214ac <__kernel_rem_pio2f+0x6c>
80021496:	ee 03 00 08 	add	r8,r7,r3
8002149a:	c0 37       	brpl	800214a0 <__kernel_rem_pio2f+0x60>
8002149c:	30 0c       	mov	r12,0
8002149e:	c0 48       	rjmp	800214a6 <__kernel_rem_pio2f+0x66>
800214a0:	68 0c       	ld.w	r12,r4[0x0]
800214a2:	e0 a0 0b 80 	rcall	80022ba2 <__avr32_s32_to_f32>
800214a6:	02 ac       	st.w	r1++,r12
800214a8:	2f f7       	sub	r7,-1
800214aa:	2f c4       	sub	r4,-4
800214ac:	04 37       	cp.w	r7,r2
800214ae:	fe 9a ff f4 	brle	80021496 <__kernel_rem_pio2f+0x56>
800214b2:	fa c8 ff c8 	sub	r8,sp,-56
800214b6:	40 24       	lddsp	r4,sp[0x8]
800214b8:	30 07       	mov	r7,0
800214ba:	fa c9 ff 28 	sub	r9,sp,-216
800214be:	10 91       	mov	r1,r8
800214c0:	0c 90       	mov	r0,r6
800214c2:	c1 88       	rjmp	800214f2 <__kernel_rem_pio2f+0xb2>
800214c4:	64 0b       	ld.w	r11,r2[0x0]
800214c6:	50 1a       	stdsp	sp[0x4],r10
800214c8:	50 09       	stdsp	sp[0x0],r9
800214ca:	0f 0c       	ld.w	r12,r7++
800214cc:	e0 a0 0a fa 	rcall	80022ac0 <__avr32_f32_mul>
800214d0:	18 9b       	mov	r11,r12
800214d2:	06 9c       	mov	r12,r3
800214d4:	e0 a0 0a a0 	rcall	80022a14 <__avr32_f32_add>
800214d8:	2f f6       	sub	r6,-1
800214da:	20 42       	sub	r2,4
800214dc:	18 93       	mov	r3,r12
800214de:	40 09       	lddsp	r9,sp[0x0]
800214e0:	40 1a       	lddsp	r10,sp[0x4]
800214e2:	40 2b       	lddsp	r11,sp[0x8]
800214e4:	16 36       	cp.w	r6,r11
800214e6:	fe 9a ff ef 	brle	800214c4 <__kernel_rem_pio2f+0x84>
800214ea:	14 97       	mov	r7,r10
800214ec:	02 a3       	st.w	r1++,r3
800214ee:	2f f7       	sub	r7,-1
800214f0:	2f f4       	sub	r4,-1
800214f2:	40 3a       	lddsp	r10,sp[0xc]
800214f4:	14 37       	cp.w	r7,r10
800214f6:	e0 89 00 0a 	brgt	8002150a <__kernel_rem_pio2f+0xca>
800214fa:	40 88       	lddsp	r8,sp[0x20]
800214fc:	0e 9a       	mov	r10,r7
800214fe:	f2 04 00 22 	add	r2,r9,r4<<0x2
80021502:	30 03       	mov	r3,0
80021504:	30 06       	mov	r6,0
80021506:	10 97       	mov	r7,r8
80021508:	ce db       	rjmp	800214e2 <__kernel_rem_pio2f+0xa2>
8002150a:	40 38       	lddsp	r8,sp[0xc]
8002150c:	fa c9 fe d8 	sub	r9,sp,-296
80021510:	20 18       	sub	r8,1
80021512:	00 96       	mov	r6,r0
80021514:	f2 08 00 29 	add	r9,r9,r8<<0x2
80021518:	40 37       	lddsp	r7,sp[0xc]
8002151a:	50 d9       	stdsp	sp[0x34],r9
8002151c:	50 c5       	stdsp	sp[0x30],r5
8002151e:	fa cb fe 88 	sub	r11,sp,-376
80021522:	ee c5 00 01 	sub	r5,r7,1
80021526:	f6 07 00 28 	add	r8,r11,r7<<0x2
8002152a:	fa c3 fe d8 	sub	r3,sp,-296
8002152e:	fa ca ff c8 	sub	r10,sp,-56
80021532:	f0 f4 fe c0 	ld.w	r4,r8[-320]
80021536:	f4 05 00 21 	add	r1,r10,r5<<0x2
8002153a:	06 90       	mov	r0,r3
8002153c:	0e 92       	mov	r2,r7
8002153e:	c1 b8       	rjmp	80021574 <__kernel_rem_pio2f+0x134>
80021540:	e0 a0 0a c0 	rcall	80022ac0 <__avr32_f32_mul>
80021544:	e0 a0 0b 69 	rcall	80022c16 <__avr32_f32_to_s32>
80021548:	e0 a0 0b 2d 	rcall	80022ba2 <__avr32_s32_to_f32>
8002154c:	fc 1b c3 80 	movh	r11,0xc380
80021550:	50 1c       	stdsp	sp[0x4],r12
80021552:	e0 a0 0a b7 	rcall	80022ac0 <__avr32_f32_mul>
80021556:	18 9b       	mov	r11,r12
80021558:	08 9c       	mov	r12,r4
8002155a:	e0 a0 0a 5d 	rcall	80022a14 <__avr32_f32_add>
8002155e:	e0 a0 0b 5c 	rcall	80022c16 <__avr32_f32_to_s32>
80021562:	40 18       	lddsp	r8,sp[0x4]
80021564:	00 ac       	st.w	r0++,r12
80021566:	62 0b       	ld.w	r11,r1[0x0]
80021568:	10 9c       	mov	r12,r8
8002156a:	20 12       	sub	r2,1
8002156c:	e0 a0 0a 54 	rcall	80022a14 <__avr32_f32_add>
80021570:	20 41       	sub	r1,4
80021572:	18 94       	mov	r4,r12
80021574:	fc 1b 3b 80 	movh	r11,0x3b80
80021578:	08 9c       	mov	r12,r4
8002157a:	58 02       	cp.w	r2,0
8002157c:	fe 99 ff e2 	brgt	80021540 <__kernel_rem_pio2f+0x100>
80021580:	0c 9b       	mov	r11,r6
80021582:	e0 a0 03 21 	rcall	80021bc4 <scalbnf>
80021586:	fc 1b 3e 00 	movh	r11,0x3e00
8002158a:	18 94       	mov	r4,r12
8002158c:	e0 a0 0a 9a 	rcall	80022ac0 <__avr32_f32_mul>
80021590:	e0 a0 02 c2 	rcall	80021b14 <floorf>
80021594:	fc 1b c1 00 	movh	r11,0xc100
80021598:	e0 a0 0a 94 	rcall	80022ac0 <__avr32_f32_mul>
8002159c:	18 9b       	mov	r11,r12
8002159e:	08 9c       	mov	r12,r4
800215a0:	e0 a0 0a 3a 	rcall	80022a14 <__avr32_f32_add>
800215a4:	18 94       	mov	r4,r12
800215a6:	e0 a0 0b 38 	rcall	80022c16 <__avr32_f32_to_s32>
800215aa:	18 91       	mov	r1,r12
800215ac:	e0 a0 0a fb 	rcall	80022ba2 <__avr32_s32_to_f32>
800215b0:	18 9b       	mov	r11,r12
800215b2:	08 9c       	mov	r12,r4
800215b4:	e0 a0 09 c8 	rcall	80022944 <__avr32_f32_sub>
800215b8:	18 92       	mov	r2,r12
800215ba:	58 06       	cp.w	r6,0
800215bc:	e0 8a 00 18 	brle	800215ec <__kernel_rem_pio2f+0x1ac>
800215c0:	fa c8 fe 88 	sub	r8,sp,-376
800215c4:	ec 0b 11 08 	rsub	r11,r6,8
800215c8:	f0 05 00 29 	add	r9,r8,r5<<0x2
800215cc:	ec 0c 11 07 	rsub	r12,r6,7
800215d0:	f2 fa ff b0 	ld.w	r10,r9[-80]
800215d4:	f4 0b 08 48 	asr	r8,r10,r11
800215d8:	f0 0b 09 4b 	lsl	r11,r8,r11
800215dc:	10 01       	add	r1,r8
800215de:	f4 0b 01 0b 	sub	r11,r10,r11
800215e2:	f3 4b ff b0 	st.w	r9[-80],r11
800215e6:	f6 0c 08 44 	asr	r4,r11,r12
800215ea:	c1 48       	rjmp	80021612 <__kernel_rem_pio2f+0x1d2>
800215ec:	58 06       	cp.w	r6,0
800215ee:	c0 91       	brne	80021600 <__kernel_rem_pio2f+0x1c0>
800215f0:	fa cb fe 88 	sub	r11,sp,-376
800215f4:	f6 05 00 28 	add	r8,r11,r5<<0x2
800215f8:	f0 f4 ff b0 	ld.w	r4,r8[-80]
800215fc:	a9 44       	asr	r4,0x8
800215fe:	c0 a8       	rjmp	80021612 <__kernel_rem_pio2f+0x1d2>
80021600:	fc 1b 3f 00 	movh	r11,0x3f00
80021604:	e0 a0 07 2e 	rcall	80022460 <__avr32_f32_cmp_ge>
80021608:	c0 31       	brne	8002160e <__kernel_rem_pio2f+0x1ce>
8002160a:	30 04       	mov	r4,0
8002160c:	c4 c8       	rjmp	800216a4 <__kernel_rem_pio2f+0x264>
8002160e:	30 24       	mov	r4,2
80021610:	c0 48       	rjmp	80021618 <__kernel_rem_pio2f+0x1d8>
80021612:	58 04       	cp.w	r4,0
80021614:	e0 8a 00 48 	brle	800216a4 <__kernel_rem_pio2f+0x264>
80021618:	30 08       	mov	r8,0
8002161a:	2f f1       	sub	r1,-1
8002161c:	10 90       	mov	r0,r8
8002161e:	c1 28       	rjmp	80021642 <__kernel_rem_pio2f+0x202>
80021620:	66 09       	ld.w	r9,r3[0x0]
80021622:	58 00       	cp.w	r0,0
80021624:	c0 81       	brne	80021634 <__kernel_rem_pio2f+0x1f4>
80021626:	58 09       	cp.w	r9,0
80021628:	c0 b0       	breq	8002163e <__kernel_rem_pio2f+0x1fe>
8002162a:	e0 6a 01 00 	mov	r10,256
8002162e:	12 1a       	sub	r10,r9
80021630:	87 0a       	st.w	r3[0x0],r10
80021632:	c0 58       	rjmp	8002163c <__kernel_rem_pio2f+0x1fc>
80021634:	e0 6b 00 ff 	mov	r11,255
80021638:	12 1b       	sub	r11,r9
8002163a:	87 0b       	st.w	r3[0x0],r11
8002163c:	30 10       	mov	r0,1
8002163e:	2f f8       	sub	r8,-1
80021640:	2f c3       	sub	r3,-4
80021642:	0e 38       	cp.w	r8,r7
80021644:	ce e5       	brlt	80021620 <__kernel_rem_pio2f+0x1e0>
80021646:	58 06       	cp.w	r6,0
80021648:	e0 8a 00 1a 	brle	8002167c <__kernel_rem_pio2f+0x23c>
8002164c:	58 16       	cp.w	r6,1
8002164e:	c0 40       	breq	80021656 <__kernel_rem_pio2f+0x216>
80021650:	58 26       	cp.w	r6,2
80021652:	c1 51       	brne	8002167c <__kernel_rem_pio2f+0x23c>
80021654:	c0 a8       	rjmp	80021668 <__kernel_rem_pio2f+0x228>
80021656:	fa ca fe 88 	sub	r10,sp,-376
8002165a:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002165e:	f0 f9 ff b0 	ld.w	r9,r8[-80]
80021662:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80021666:	c0 98       	rjmp	80021678 <__kernel_rem_pio2f+0x238>
80021668:	fa c9 fe 88 	sub	r9,sp,-376
8002166c:	f2 05 00 28 	add	r8,r9,r5<<0x2
80021670:	f0 f9 ff b0 	ld.w	r9,r8[-80]
80021674:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
80021678:	f1 49 ff b0 	st.w	r8[-80],r9
8002167c:	58 24       	cp.w	r4,2
8002167e:	c1 31       	brne	800216a4 <__kernel_rem_pio2f+0x264>
80021680:	04 9b       	mov	r11,r2
80021682:	fc 1c 3f 80 	movh	r12,0x3f80
80021686:	e0 a0 09 5f 	rcall	80022944 <__avr32_f32_sub>
8002168a:	18 92       	mov	r2,r12
8002168c:	58 00       	cp.w	r0,0
8002168e:	c0 b0       	breq	800216a4 <__kernel_rem_pio2f+0x264>
80021690:	0c 9b       	mov	r11,r6
80021692:	fc 1c 3f 80 	movh	r12,0x3f80
80021696:	e0 a0 02 97 	rcall	80021bc4 <scalbnf>
8002169a:	18 9b       	mov	r11,r12
8002169c:	04 9c       	mov	r12,r2
8002169e:	e0 a0 09 53 	rcall	80022944 <__avr32_f32_sub>
800216a2:	18 92       	mov	r2,r12
800216a4:	30 0b       	mov	r11,0
800216a6:	04 9c       	mov	r12,r2
800216a8:	e0 a0 06 d0 	rcall	80022448 <__avr32_f32_cmp_eq>
800216ac:	c5 c0       	breq	80021764 <__kernel_rem_pio2f+0x324>
800216ae:	fa c8 fe d8 	sub	r8,sp,-296
800216b2:	f0 05 00 29 	add	r9,r8,r5<<0x2
800216b6:	30 08       	mov	r8,0
800216b8:	c0 58       	rjmp	800216c2 <__kernel_rem_pio2f+0x282>
800216ba:	72 0a       	ld.w	r10,r9[0x0]
800216bc:	20 15       	sub	r5,1
800216be:	14 48       	or	r8,r10
800216c0:	20 49       	sub	r9,4
800216c2:	40 3b       	lddsp	r11,sp[0xc]
800216c4:	16 35       	cp.w	r5,r11
800216c6:	cf a4       	brge	800216ba <__kernel_rem_pio2f+0x27a>
800216c8:	58 08       	cp.w	r8,0
800216ca:	c5 11       	brne	8002176c <__kernel_rem_pio2f+0x32c>
800216cc:	40 d9       	lddsp	r9,sp[0x34]
800216ce:	30 18       	mov	r8,1
800216d0:	c0 28       	rjmp	800216d4 <__kernel_rem_pio2f+0x294>
800216d2:	2f f8       	sub	r8,-1
800216d4:	72 0a       	ld.w	r10,r9[0x0]
800216d6:	20 49       	sub	r9,4
800216d8:	58 0a       	cp.w	r10,0
800216da:	cf c0       	breq	800216d2 <__kernel_rem_pio2f+0x292>
800216dc:	0e 08       	add	r8,r7
800216de:	40 59       	lddsp	r9,sp[0x14]
800216e0:	2f f9       	sub	r9,-1
800216e2:	ee c5 ff ff 	sub	r5,r7,-1
800216e6:	50 b8       	stdsp	sp[0x2c],r8
800216e8:	40 9a       	lddsp	r10,sp[0x24]
800216ea:	fa c8 ff 28 	sub	r8,sp,-216
800216ee:	ee 0a 00 04 	add	r4,r7,r10
800216f2:	fa cb ff c8 	sub	r11,sp,-56
800216f6:	f2 07 00 07 	add	r7,r9,r7
800216fa:	08 93       	mov	r3,r4
800216fc:	40 a9       	lddsp	r9,sp[0x28]
800216fe:	f6 05 00 2b 	add	r11,r11,r5<<0x2
80021702:	f2 07 00 27 	add	r7,r9,r7<<0x2
80021706:	50 6b       	stdsp	sp[0x18],r11
80021708:	f0 04 00 24 	add	r4,r8,r4<<0x2
8002170c:	c2 68       	rjmp	80021758 <__kernel_rem_pio2f+0x318>
8002170e:	40 8a       	lddsp	r10,sp[0x20]
80021710:	fa c9 ff 28 	sub	r9,sp,-216
80021714:	6e 0c       	ld.w	r12,r7[0x0]
80021716:	50 7a       	stdsp	sp[0x1c],r10
80021718:	f2 03 00 20 	add	r0,r9,r3<<0x2
8002171c:	30 01       	mov	r1,0
8002171e:	e0 a0 0a 42 	rcall	80022ba2 <__avr32_s32_to_f32>
80021722:	30 02       	mov	r2,0
80021724:	89 0c       	st.w	r4[0x0],r12
80021726:	c0 e8       	rjmp	80021742 <__kernel_rem_pio2f+0x302>
80021728:	40 78       	lddsp	r8,sp[0x1c]
8002172a:	60 0b       	ld.w	r11,r0[0x0]
8002172c:	11 0c       	ld.w	r12,r8++
8002172e:	50 78       	stdsp	sp[0x1c],r8
80021730:	e0 a0 09 c8 	rcall	80022ac0 <__avr32_f32_mul>
80021734:	2f f1       	sub	r1,-1
80021736:	18 9b       	mov	r11,r12
80021738:	20 40       	sub	r0,4
8002173a:	04 9c       	mov	r12,r2
8002173c:	e0 a0 09 6c 	rcall	80022a14 <__avr32_f32_add>
80021740:	18 92       	mov	r2,r12
80021742:	40 2b       	lddsp	r11,sp[0x8]
80021744:	16 31       	cp.w	r1,r11
80021746:	fe 9a ff f1 	brle	80021728 <__kernel_rem_pio2f+0x2e8>
8002174a:	40 6a       	lddsp	r10,sp[0x18]
8002174c:	2f f5       	sub	r5,-1
8002174e:	14 a2       	st.w	r10++,r2
80021750:	2f c7       	sub	r7,-4
80021752:	50 6a       	stdsp	sp[0x18],r10
80021754:	2f c4       	sub	r4,-4
80021756:	2f f3       	sub	r3,-1
80021758:	40 b9       	lddsp	r9,sp[0x2c]
8002175a:	12 35       	cp.w	r5,r9
8002175c:	fe 9a ff d9 	brle	8002170e <__kernel_rem_pio2f+0x2ce>
80021760:	12 97       	mov	r7,r9
80021762:	cd ea       	rjmp	8002151e <__kernel_rem_pio2f+0xde>
80021764:	40 c5       	lddsp	r5,sp[0x30]
80021766:	58 0c       	cp.w	r12,0
80021768:	c1 10       	breq	8002178a <__kernel_rem_pio2f+0x34a>
8002176a:	c0 28       	rjmp	8002176e <__kernel_rem_pio2f+0x32e>
8002176c:	40 c5       	lddsp	r5,sp[0x30]
8002176e:	20 17       	sub	r7,1
80021770:	fa c8 fe d8 	sub	r8,sp,-296
80021774:	20 86       	sub	r6,8
80021776:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002177a:	c0 38       	rjmp	80021780 <__kernel_rem_pio2f+0x340>
8002177c:	20 17       	sub	r7,1
8002177e:	20 86       	sub	r6,8
80021780:	70 09       	ld.w	r9,r8[0x0]
80021782:	20 48       	sub	r8,4
80021784:	58 09       	cp.w	r9,0
80021786:	cf b0       	breq	8002177c <__kernel_rem_pio2f+0x33c>
80021788:	c3 b8       	rjmp	800217fe <__kernel_rem_pio2f+0x3be>
8002178a:	04 9c       	mov	r12,r2
8002178c:	ec 0b 11 00 	rsub	r11,r6,0
80021790:	e0 a0 02 1a 	rcall	80021bc4 <scalbnf>
80021794:	fc 1b 43 80 	movh	r11,0x4380
80021798:	18 93       	mov	r3,r12
8002179a:	ee 02 15 02 	lsl	r2,r7,0x2
8002179e:	e0 a0 06 61 	rcall	80022460 <__avr32_f32_cmp_ge>
800217a2:	c2 50       	breq	800217ec <__kernel_rem_pio2f+0x3ac>
800217a4:	fc 1b 3b 80 	movh	r11,0x3b80
800217a8:	06 9c       	mov	r12,r3
800217aa:	e0 a0 09 8b 	rcall	80022ac0 <__avr32_f32_mul>
800217ae:	e0 a0 0a 34 	rcall	80022c16 <__avr32_f32_to_s32>
800217b2:	e0 a0 09 f8 	rcall	80022ba2 <__avr32_s32_to_f32>
800217b6:	fc 1b c3 80 	movh	r11,0xc380
800217ba:	18 90       	mov	r0,r12
800217bc:	e0 a0 09 82 	rcall	80022ac0 <__avr32_f32_mul>
800217c0:	18 9b       	mov	r11,r12
800217c2:	06 9c       	mov	r12,r3
800217c4:	e0 a0 09 28 	rcall	80022a14 <__avr32_f32_add>
800217c8:	e0 a0 0a 27 	rcall	80022c16 <__avr32_f32_to_s32>
800217cc:	fa c8 fe 88 	sub	r8,sp,-376
800217d0:	2f f7       	sub	r7,-1
800217d2:	f0 02 00 02 	add	r2,r8,r2
800217d6:	f0 07 00 23 	add	r3,r8,r7<<0x2
800217da:	e5 4c ff b0 	st.w	r2[-80],r12
800217de:	2f 86       	sub	r6,-8
800217e0:	00 9c       	mov	r12,r0
800217e2:	e0 a0 0a 1a 	rcall	80022c16 <__avr32_f32_to_s32>
800217e6:	e7 4c ff b0 	st.w	r3[-80],r12
800217ea:	c0 a8       	rjmp	800217fe <__kernel_rem_pio2f+0x3be>
800217ec:	fa cb fe 88 	sub	r11,sp,-376
800217f0:	06 9c       	mov	r12,r3
800217f2:	f6 02 00 02 	add	r2,r11,r2
800217f6:	e0 a0 0a 10 	rcall	80022c16 <__avr32_f32_to_s32>
800217fa:	e5 4c ff b0 	st.w	r2[-80],r12
800217fe:	0c 9b       	mov	r11,r6
80021800:	fc 1c 3f 80 	movh	r12,0x3f80
80021804:	ce 0d       	rcall	80021bc4 <scalbnf>
80021806:	ee 08 15 02 	lsl	r8,r7,0x2
8002180a:	fa c3 fe d8 	sub	r3,sp,-296
8002180e:	fa c6 ff c8 	sub	r6,sp,-56
80021812:	0e 90       	mov	r0,r7
80021814:	18 92       	mov	r2,r12
80021816:	10 03       	add	r3,r8
80021818:	10 06       	add	r6,r8
8002181a:	c1 28       	rjmp	8002183e <__kernel_rem_pio2f+0x3fe>
8002181c:	66 0c       	ld.w	r12,r3[0x0]
8002181e:	e0 a0 09 c2 	rcall	80022ba2 <__avr32_s32_to_f32>
80021822:	18 9b       	mov	r11,r12
80021824:	04 9c       	mov	r12,r2
80021826:	e0 a0 09 4d 	rcall	80022ac0 <__avr32_f32_mul>
8002182a:	fc 1b 3b 80 	movh	r11,0x3b80
8002182e:	8d 0c       	st.w	r6[0x0],r12
80021830:	20 10       	sub	r0,1
80021832:	04 9c       	mov	r12,r2
80021834:	20 43       	sub	r3,4
80021836:	e0 a0 09 45 	rcall	80022ac0 <__avr32_f32_mul>
8002183a:	20 46       	sub	r6,4
8002183c:	18 92       	mov	r2,r12
8002183e:	58 00       	cp.w	r0,0
80021840:	ce e4       	brge	8002181c <__kernel_rem_pio2f+0x3dc>
80021842:	fa ca ff 78 	sub	r10,sp,-136
80021846:	0e 96       	mov	r6,r7
80021848:	30 02       	mov	r2,0
8002184a:	fa c8 ff c8 	sub	r8,sp,-56
8002184e:	14 90       	mov	r0,r10
80021850:	50 24       	stdsp	sp[0x8],r4
80021852:	c1 98       	rjmp	80021884 <__kernel_rem_pio2f+0x444>
80021854:	50 18       	stdsp	sp[0x4],r8
80021856:	0d 0b       	ld.w	r11,r6++
80021858:	01 0c       	ld.w	r12,r0++
8002185a:	e0 a0 09 33 	rcall	80022ac0 <__avr32_f32_mul>
8002185e:	18 9b       	mov	r11,r12
80021860:	06 9c       	mov	r12,r3
80021862:	e0 a0 08 d9 	rcall	80022a14 <__avr32_f32_add>
80021866:	2f f4       	sub	r4,-1
80021868:	18 93       	mov	r3,r12
8002186a:	40 18       	lddsp	r8,sp[0x4]
8002186c:	40 3a       	lddsp	r10,sp[0xc]
8002186e:	14 34       	cp.w	r4,r10
80021870:	e0 89 00 05 	brgt	8002187a <__kernel_rem_pio2f+0x43a>
80021874:	04 34       	cp.w	r4,r2
80021876:	fe 9a ff ef 	brle	80021854 <__kernel_rem_pio2f+0x414>
8002187a:	40 56       	lddsp	r6,sp[0x14]
8002187c:	40 60       	lddsp	r0,sp[0x18]
8002187e:	20 16       	sub	r6,1
80021880:	00 a3       	st.w	r0++,r3
80021882:	2f f2       	sub	r2,-1
80021884:	58 06       	cp.w	r6,0
80021886:	c0 c5       	brlt	8002189e <__kernel_rem_pio2f+0x45e>
80021888:	fe c9 bc 1c 	sub	r9,pc,-17380
8002188c:	f0 06 00 2a 	add	r10,r8,r6<<0x2
80021890:	50 56       	stdsp	sp[0x14],r6
80021892:	50 60       	stdsp	sp[0x18],r0
80021894:	30 03       	mov	r3,0
80021896:	30 04       	mov	r4,0
80021898:	14 96       	mov	r6,r10
8002189a:	12 90       	mov	r0,r9
8002189c:	ce 8b       	rjmp	8002186c <__kernel_rem_pio2f+0x42c>
8002189e:	40 24       	lddsp	r4,sp[0x8]
800218a0:	40 49       	lddsp	r9,sp[0x10]
800218a2:	58 29       	cp.w	r9,2
800218a4:	e0 89 00 07 	brgt	800218b2 <__kernel_rem_pio2f+0x472>
800218a8:	58 19       	cp.w	r9,1
800218aa:	c1 14       	brge	800218cc <__kernel_rem_pio2f+0x48c>
800218ac:	58 09       	cp.w	r9,0
800218ae:	c1 60       	breq	800218da <__kernel_rem_pio2f+0x49a>
800218b0:	c9 f8       	rjmp	800219ee <__kernel_rem_pio2f+0x5ae>
800218b2:	40 48       	lddsp	r8,sp[0x10]
800218b4:	58 38       	cp.w	r8,3
800218b6:	e0 81 00 9c 	brne	800219ee <__kernel_rem_pio2f+0x5ae>
800218ba:	ee c6 00 01 	sub	r6,r7,1
800218be:	fa c8 ff 78 	sub	r8,sp,-136
800218c2:	0e 92       	mov	r2,r7
800218c4:	f0 06 00 26 	add	r6,r8,r6<<0x2
800218c8:	0c 93       	mov	r3,r6
800218ca:	c5 48       	rjmp	80021972 <__kernel_rem_pio2f+0x532>
800218cc:	fa c3 ff 78 	sub	r3,sp,-136
800218d0:	0e 96       	mov	r6,r7
800218d2:	e6 07 00 23 	add	r3,r3,r7<<0x2
800218d6:	30 0c       	mov	r12,0
800218d8:	c1 a8       	rjmp	8002190c <__kernel_rem_pio2f+0x4cc>
800218da:	0e 96       	mov	r6,r7
800218dc:	fa c8 ff 78 	sub	r8,sp,-136
800218e0:	30 0c       	mov	r12,0
800218e2:	f0 07 00 27 	add	r7,r8,r7<<0x2
800218e6:	c0 68       	rjmp	800218f2 <__kernel_rem_pio2f+0x4b2>
800218e8:	6e 0b       	ld.w	r11,r7[0x0]
800218ea:	20 16       	sub	r6,1
800218ec:	20 47       	sub	r7,4
800218ee:	e0 a0 08 93 	rcall	80022a14 <__avr32_f32_add>
800218f2:	58 06       	cp.w	r6,0
800218f4:	cf a4       	brge	800218e8 <__kernel_rem_pio2f+0x4a8>
800218f6:	58 04       	cp.w	r4,0
800218f8:	c0 30       	breq	800218fe <__kernel_rem_pio2f+0x4be>
800218fa:	ee 1c 80 00 	eorh	r12,0x8000
800218fe:	8b 0c       	st.w	r5[0x0],r12
80021900:	c7 78       	rjmp	800219ee <__kernel_rem_pio2f+0x5ae>
80021902:	66 0b       	ld.w	r11,r3[0x0]
80021904:	20 16       	sub	r6,1
80021906:	20 43       	sub	r3,4
80021908:	e0 a0 08 86 	rcall	80022a14 <__avr32_f32_add>
8002190c:	58 06       	cp.w	r6,0
8002190e:	cf a4       	brge	80021902 <__kernel_rem_pio2f+0x4c2>
80021910:	18 9b       	mov	r11,r12
80021912:	58 04       	cp.w	r4,0
80021914:	c0 30       	breq	8002191a <__kernel_rem_pio2f+0x4da>
80021916:	ee 1c 80 00 	eorh	r12,0x8000
8002191a:	8b 0c       	st.w	r5[0x0],r12
8002191c:	fa c3 ff 74 	sub	r3,sp,-140
80021920:	42 2c       	lddsp	r12,sp[0x88]
80021922:	30 16       	mov	r6,1
80021924:	e0 a0 08 10 	rcall	80022944 <__avr32_f32_sub>
80021928:	c0 58       	rjmp	80021932 <__kernel_rem_pio2f+0x4f2>
8002192a:	2f f6       	sub	r6,-1
8002192c:	07 0b       	ld.w	r11,r3++
8002192e:	e0 a0 08 73 	rcall	80022a14 <__avr32_f32_add>
80021932:	0e 36       	cp.w	r6,r7
80021934:	fe 9a ff fb 	brle	8002192a <__kernel_rem_pio2f+0x4ea>
80021938:	58 04       	cp.w	r4,0
8002193a:	c0 30       	breq	80021940 <__kernel_rem_pio2f+0x500>
8002193c:	ee 1c 80 00 	eorh	r12,0x8000
80021940:	8b 1c       	st.w	r5[0x4],r12
80021942:	c5 68       	rjmp	800219ee <__kernel_rem_pio2f+0x5ae>
80021944:	66 19       	ld.w	r9,r3[0x4]
80021946:	66 08       	ld.w	r8,r3[0x0]
80021948:	12 9b       	mov	r11,r9
8002194a:	50 09       	stdsp	sp[0x0],r9
8002194c:	10 9c       	mov	r12,r8
8002194e:	50 18       	stdsp	sp[0x4],r8
80021950:	e0 a0 08 62 	rcall	80022a14 <__avr32_f32_add>
80021954:	40 18       	lddsp	r8,sp[0x4]
80021956:	18 9b       	mov	r11,r12
80021958:	18 90       	mov	r0,r12
8002195a:	10 9c       	mov	r12,r8
8002195c:	e0 a0 07 f4 	rcall	80022944 <__avr32_f32_sub>
80021960:	40 09       	lddsp	r9,sp[0x0]
80021962:	18 9b       	mov	r11,r12
80021964:	20 12       	sub	r2,1
80021966:	12 9c       	mov	r12,r9
80021968:	e0 a0 08 56 	rcall	80022a14 <__avr32_f32_add>
8002196c:	87 00       	st.w	r3[0x0],r0
8002196e:	87 1c       	st.w	r3[0x4],r12
80021970:	20 43       	sub	r3,4
80021972:	58 02       	cp.w	r2,0
80021974:	fe 99 ff e8 	brgt	80021944 <__kernel_rem_pio2f+0x504>
80021978:	0e 93       	mov	r3,r7
8002197a:	c1 68       	rjmp	800219a6 <__kernel_rem_pio2f+0x566>
8002197c:	6c 18       	ld.w	r8,r6[0x4]
8002197e:	6c 00       	ld.w	r0,r6[0x0]
80021980:	10 9b       	mov	r11,r8
80021982:	50 18       	stdsp	sp[0x4],r8
80021984:	00 9c       	mov	r12,r0
80021986:	e0 a0 08 47 	rcall	80022a14 <__avr32_f32_add>
8002198a:	18 9b       	mov	r11,r12
8002198c:	18 92       	mov	r2,r12
8002198e:	00 9c       	mov	r12,r0
80021990:	e0 a0 07 da 	rcall	80022944 <__avr32_f32_sub>
80021994:	40 18       	lddsp	r8,sp[0x4]
80021996:	18 9b       	mov	r11,r12
80021998:	20 13       	sub	r3,1
8002199a:	10 9c       	mov	r12,r8
8002199c:	e0 a0 08 3c 	rcall	80022a14 <__avr32_f32_add>
800219a0:	8d 02       	st.w	r6[0x0],r2
800219a2:	8d 1c       	st.w	r6[0x4],r12
800219a4:	20 46       	sub	r6,4
800219a6:	58 13       	cp.w	r3,1
800219a8:	fe 99 ff ea 	brgt	8002197c <__kernel_rem_pio2f+0x53c>
800219ac:	0e 96       	mov	r6,r7
800219ae:	fa c8 ff 78 	sub	r8,sp,-136
800219b2:	30 0c       	mov	r12,0
800219b4:	f0 07 00 27 	add	r7,r8,r7<<0x2
800219b8:	c0 68       	rjmp	800219c4 <__kernel_rem_pio2f+0x584>
800219ba:	6e 0b       	ld.w	r11,r7[0x0]
800219bc:	20 16       	sub	r6,1
800219be:	20 47       	sub	r7,4
800219c0:	e0 a0 08 2a 	rcall	80022a14 <__avr32_f32_add>
800219c4:	58 16       	cp.w	r6,1
800219c6:	fe 99 ff fa 	brgt	800219ba <__kernel_rem_pio2f+0x57a>
800219ca:	58 04       	cp.w	r4,0
800219cc:	c0 61       	brne	800219d8 <__kernel_rem_pio2f+0x598>
800219ce:	8b 2c       	st.w	r5[0x8],r12
800219d0:	42 28       	lddsp	r8,sp[0x88]
800219d2:	8b 08       	st.w	r5[0x0],r8
800219d4:	42 38       	lddsp	r8,sp[0x8c]
800219d6:	c0 b8       	rjmp	800219ec <__kernel_rem_pio2f+0x5ac>
800219d8:	ee 1c 80 00 	eorh	r12,0x8000
800219dc:	8b 2c       	st.w	r5[0x8],r12
800219de:	42 28       	lddsp	r8,sp[0x88]
800219e0:	ee 18 80 00 	eorh	r8,0x8000
800219e4:	8b 08       	st.w	r5[0x0],r8
800219e6:	42 38       	lddsp	r8,sp[0x8c]
800219e8:	ee 18 80 00 	eorh	r8,0x8000
800219ec:	8b 18       	st.w	r5[0x4],r8
800219ee:	f9 d1 c0 03 	bfextu	r12,r1,0x0,0x3
800219f2:	2a 2d       	sub	sp,-376
800219f4:	d8 32       	popm	r0-r7,pc
800219f6:	d7 03       	nop

800219f8 <__kernel_sinf>:
800219f8:	d4 31       	pushm	r0-r7,lr
800219fa:	e0 69 ff ff 	mov	r9,65535
800219fe:	ea 19 31 ff 	orh	r9,0x31ff
80021a02:	16 97       	mov	r7,r11
80021a04:	14 92       	mov	r2,r10
80021a06:	18 96       	mov	r6,r12
80021a08:	f1 dc c0 1f 	bfextu	r8,r12,0x0,0x1f
80021a0c:	12 38       	cp.w	r8,r9
80021a0e:	e0 89 00 05 	brgt	80021a18 <__kernel_sinf+0x20>
80021a12:	e0 a0 09 02 	rcall	80022c16 <__avr32_f32_to_s32>
80021a16:	c7 10       	breq	80021af8 <__kernel_sinf+0x100>
80021a18:	0c 9b       	mov	r11,r6
80021a1a:	0c 9c       	mov	r12,r6
80021a1c:	e0 a0 08 52 	rcall	80022ac0 <__avr32_f32_mul>
80021a20:	0c 9b       	mov	r11,r6
80021a22:	18 95       	mov	r5,r12
80021a24:	e0 a0 08 4e 	rcall	80022ac0 <__avr32_f32_mul>
80021a28:	e0 6b c9 d3 	mov	r11,51667
80021a2c:	ea 1b 2f 2e 	orh	r11,0x2f2e
80021a30:	18 94       	mov	r4,r12
80021a32:	0a 9c       	mov	r12,r5
80021a34:	e0 a0 08 46 	rcall	80022ac0 <__avr32_f32_mul>
80021a38:	e0 6b 2f 34 	mov	r11,12084
80021a3c:	ea 1b 32 d7 	orh	r11,0x32d7
80021a40:	e0 a0 07 82 	rcall	80022944 <__avr32_f32_sub>
80021a44:	18 9b       	mov	r11,r12
80021a46:	0a 9c       	mov	r12,r5
80021a48:	e0 a0 08 3c 	rcall	80022ac0 <__avr32_f32_mul>
80021a4c:	e0 6b ef 1b 	mov	r11,61211
80021a50:	ea 1b 36 38 	orh	r11,0x3638
80021a54:	e0 a0 07 e0 	rcall	80022a14 <__avr32_f32_add>
80021a58:	18 9b       	mov	r11,r12
80021a5a:	0a 9c       	mov	r12,r5
80021a5c:	e0 a0 08 32 	rcall	80022ac0 <__avr32_f32_mul>
80021a60:	e0 6b 0d 01 	mov	r11,3329
80021a64:	ea 1b 39 50 	orh	r11,0x3950
80021a68:	e0 a0 07 6e 	rcall	80022944 <__avr32_f32_sub>
80021a6c:	18 9b       	mov	r11,r12
80021a6e:	0a 9c       	mov	r12,r5
80021a70:	e0 a0 08 28 	rcall	80022ac0 <__avr32_f32_mul>
80021a74:	e0 6b 88 89 	mov	r11,34953
80021a78:	ea 1b 3c 08 	orh	r11,0x3c08
80021a7c:	e0 a0 07 cc 	rcall	80022a14 <__avr32_f32_add>
80021a80:	18 93       	mov	r3,r12
80021a82:	58 02       	cp.w	r2,0
80021a84:	c1 41       	brne	80021aac <__kernel_sinf+0xb4>
80021a86:	18 9b       	mov	r11,r12
80021a88:	0a 9c       	mov	r12,r5
80021a8a:	e0 a0 08 1b 	rcall	80022ac0 <__avr32_f32_mul>
80021a8e:	e0 6b aa ab 	mov	r11,43691
80021a92:	ea 1b 3e 2a 	orh	r11,0x3e2a
80021a96:	e0 a0 07 57 	rcall	80022944 <__avr32_f32_sub>
80021a9a:	18 9b       	mov	r11,r12
80021a9c:	08 9c       	mov	r12,r4
80021a9e:	e0 a0 08 11 	rcall	80022ac0 <__avr32_f32_mul>
80021aa2:	18 9b       	mov	r11,r12
80021aa4:	0c 9c       	mov	r12,r6
80021aa6:	e0 a0 07 b7 	rcall	80022a14 <__avr32_f32_add>
80021aaa:	c2 68       	rjmp	80021af6 <__kernel_sinf+0xfe>
80021aac:	fc 1b 3f 00 	movh	r11,0x3f00
80021ab0:	0e 9c       	mov	r12,r7
80021ab2:	e0 a0 08 07 	rcall	80022ac0 <__avr32_f32_mul>
80021ab6:	06 9b       	mov	r11,r3
80021ab8:	18 92       	mov	r2,r12
80021aba:	08 9c       	mov	r12,r4
80021abc:	e0 a0 08 02 	rcall	80022ac0 <__avr32_f32_mul>
80021ac0:	18 9b       	mov	r11,r12
80021ac2:	04 9c       	mov	r12,r2
80021ac4:	e0 a0 07 40 	rcall	80022944 <__avr32_f32_sub>
80021ac8:	18 9b       	mov	r11,r12
80021aca:	0a 9c       	mov	r12,r5
80021acc:	e0 a0 07 fa 	rcall	80022ac0 <__avr32_f32_mul>
80021ad0:	0e 9b       	mov	r11,r7
80021ad2:	e0 a0 07 39 	rcall	80022944 <__avr32_f32_sub>
80021ad6:	e0 6b aa ab 	mov	r11,43691
80021ada:	ea 1b 3e 2a 	orh	r11,0x3e2a
80021ade:	18 97       	mov	r7,r12
80021ae0:	08 9c       	mov	r12,r4
80021ae2:	e0 a0 07 ef 	rcall	80022ac0 <__avr32_f32_mul>
80021ae6:	18 9b       	mov	r11,r12
80021ae8:	0e 9c       	mov	r12,r7
80021aea:	e0 a0 07 95 	rcall	80022a14 <__avr32_f32_add>
80021aee:	18 9b       	mov	r11,r12
80021af0:	0c 9c       	mov	r12,r6
80021af2:	e0 a0 07 29 	rcall	80022944 <__avr32_f32_sub>
80021af6:	18 96       	mov	r6,r12
80021af8:	0c 9c       	mov	r12,r6
80021afa:	d8 32       	popm	r0-r7,pc

80021afc <fabsf>:
80021afc:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80021b00:	5e fc       	retal	r12

80021b02 <finitef>:
80021b02:	e0 68 ff ff 	mov	r8,65535
80021b06:	ea 18 7f 7f 	orh	r8,0x7f7f
80021b0a:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80021b0e:	10 3c       	cp.w	r12,r8
80021b10:	5f ac       	srle	r12
80021b12:	5e fc       	retal	r12

80021b14 <floorf>:
80021b14:	d4 21       	pushm	r4-r7,lr
80021b16:	eb dc c0 1f 	bfextu	r5,r12,0x0,0x1f
80021b1a:	18 9b       	mov	r11,r12
80021b1c:	ea 06 16 17 	lsr	r6,r5,0x17
80021b20:	18 97       	mov	r7,r12
80021b22:	27 f6       	sub	r6,127
80021b24:	59 66       	cp.w	r6,22
80021b26:	e0 89 00 35 	brgt	80021b90 <floorf+0x7c>
80021b2a:	58 06       	cp.w	r6,0
80021b2c:	c1 44       	brge	80021b54 <floorf+0x40>
80021b2e:	e0 6b f2 ca 	mov	r11,62154
80021b32:	ea 1b 71 49 	orh	r11,0x7149
80021b36:	e0 a0 07 6f 	rcall	80022a14 <__avr32_f32_add>
80021b3a:	18 9b       	mov	r11,r12
80021b3c:	30 0c       	mov	r12,0
80021b3e:	e0 a0 04 ab 	rcall	80022494 <__avr32_f32_cmp_lt>
80021b42:	c3 30       	breq	80021ba8 <floorf+0x94>
80021b44:	58 07       	cp.w	r7,0
80021b46:	c3 04       	brge	80021ba6 <floorf+0x92>
80021b48:	fc 18 bf 80 	movh	r8,0xbf80
80021b4c:	58 05       	cp.w	r5,0
80021b4e:	f0 07 17 10 	movne	r7,r8
80021b52:	c2 b8       	rjmp	80021ba8 <floorf+0x94>
80021b54:	e0 65 ff ff 	mov	r5,65535
80021b58:	ea 15 00 7f 	orh	r5,0x7f
80021b5c:	ea 06 08 45 	asr	r5,r5,r6
80021b60:	eb ec 00 08 	and	r8,r5,r12
80021b64:	c2 30       	breq	80021baa <floorf+0x96>
80021b66:	e0 6b f2 ca 	mov	r11,62154
80021b6a:	ea 1b 71 49 	orh	r11,0x7149
80021b6e:	e0 a0 07 53 	rcall	80022a14 <__avr32_f32_add>
80021b72:	18 9b       	mov	r11,r12
80021b74:	30 0c       	mov	r12,0
80021b76:	e0 a0 04 8f 	rcall	80022494 <__avr32_f32_cmp_lt>
80021b7a:	c1 70       	breq	80021ba8 <floorf+0x94>
80021b7c:	58 07       	cp.w	r7,0
80021b7e:	c0 64       	brge	80021b8a <floorf+0x76>
80021b80:	fc 18 00 80 	movh	r8,0x80
80021b84:	f0 06 08 46 	asr	r6,r8,r6
80021b88:	0c 07       	add	r7,r6
80021b8a:	5c d5       	com	r5
80021b8c:	0a 67       	and	r7,r5
80021b8e:	c0 d8       	rjmp	80021ba8 <floorf+0x94>
80021b90:	e0 68 ff ff 	mov	r8,65535
80021b94:	ea 18 7f 7f 	orh	r8,0x7f7f
80021b98:	10 35       	cp.w	r5,r8
80021b9a:	e0 88 00 08 	brls	80021baa <floorf+0x96>
80021b9e:	e0 a0 07 3b 	rcall	80022a14 <__avr32_f32_add>
80021ba2:	18 9b       	mov	r11,r12
80021ba4:	c0 38       	rjmp	80021baa <floorf+0x96>
80021ba6:	30 07       	mov	r7,0
80021ba8:	0e 9b       	mov	r11,r7
80021baa:	16 9c       	mov	r12,r11
80021bac:	d8 22       	popm	r4-r7,pc
80021bae:	d7 03       	nop

80021bb0 <isnanf>:
80021bb0:	fc 18 7f 80 	movh	r8,0x7f80
80021bb4:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80021bb8:	10 3c       	cp.w	r12,r8
80021bba:	5f 9c       	srgt	r12
80021bbc:	5e fc       	retal	r12

80021bbe <nanf>:
80021bbe:	fc 1c 7f c0 	movh	r12,0x7fc0
80021bc2:	5e fc       	retal	r12

80021bc4 <scalbnf>:
80021bc4:	d4 21       	pushm	r4-r7,lr
80021bc6:	16 97       	mov	r7,r11
80021bc8:	18 99       	mov	r9,r12
80021bca:	18 9b       	mov	r11,r12
80021bcc:	f1 dc c0 1f 	bfextu	r8,r12,0x0,0x1f
80021bd0:	c5 10       	breq	80021c72 <scalbnf+0xae>
80021bd2:	e0 6a ff ff 	mov	r10,65535
80021bd6:	ea 1a 7f 7f 	orh	r10,0x7f7f
80021bda:	14 38       	cp.w	r8,r10
80021bdc:	e0 88 00 05 	brls	80021be6 <scalbnf+0x22>
80021be0:	e0 a0 07 1a 	rcall	80022a14 <__avr32_f32_add>
80021be4:	c4 68       	rjmp	80021c70 <scalbnf+0xac>
80021be6:	e0 6a ff ff 	mov	r10,65535
80021bea:	ea 1a 00 7f 	orh	r10,0x7f
80021bee:	14 38       	cp.w	r8,r10
80021bf0:	e0 8b 00 0f 	brhi	80021c0e <scalbnf+0x4a>
80021bf4:	fc 1b 4c 00 	movh	r11,0x4c00
80021bf8:	e0 a0 07 64 	rcall	80022ac0 <__avr32_f32_mul>
80021bfc:	18 9b       	mov	r11,r12
80021bfe:	fe 57 3c b0 	cp.w	r7,-50000
80021c02:	c2 95       	brlt	80021c54 <scalbnf+0x90>
80021c04:	f1 dc c2 e8 	bfextu	r8,r12,0x17,0x8
80021c08:	18 99       	mov	r9,r12
80021c0a:	21 98       	sub	r8,25
80021c0c:	c0 28       	rjmp	80021c10 <scalbnf+0x4c>
80021c0e:	b7 98       	lsr	r8,0x17
80021c10:	0e 08       	add	r8,r7
80021c12:	e0 48 00 fe 	cp.w	r8,254
80021c16:	e0 89 00 10 	brgt	80021c36 <scalbnf+0x72>
80021c1a:	58 08       	cp.w	r8,0
80021c1c:	e0 8a 00 07 	brle	80021c2a <scalbnf+0x66>
80021c20:	e4 19 80 7f 	andh	r9,0x807f
80021c24:	f3 e8 11 7b 	or	r11,r9,r8<<0x17
80021c28:	c2 58       	rjmp	80021c72 <scalbnf+0xae>
80021c2a:	5a a8       	cp.w	r8,-22
80021c2c:	c1 94       	brge	80021c5e <scalbnf+0x9a>
80021c2e:	e0 47 c3 50 	cp.w	r7,50000
80021c32:	e0 8a 00 0c 	brle	80021c4a <scalbnf+0x86>
80021c36:	e0 6c f2 ca 	mov	r12,62154
80021c3a:	ea 1c 71 49 	orh	r12,0x7149
80021c3e:	cb bc       	rcall	80021db4 <copysignf>
80021c40:	e0 6b f2 ca 	mov	r11,62154
80021c44:	ea 1b 71 49 	orh	r11,0x7149
80021c48:	c1 28       	rjmp	80021c6c <scalbnf+0xa8>
80021c4a:	e0 6c 42 60 	mov	r12,16992
80021c4e:	ea 1c 0d a2 	orh	r12,0xda2
80021c52:	cb 1c       	rcall	80021db4 <copysignf>
80021c54:	e0 6b 42 60 	mov	r11,16992
80021c58:	ea 1b 0d a2 	orh	r11,0xda2
80021c5c:	c0 88       	rjmp	80021c6c <scalbnf+0xa8>
80021c5e:	2e 78       	sub	r8,-25
80021c60:	e4 19 80 7f 	andh	r9,0x807f
80021c64:	fc 1b 33 00 	movh	r11,0x3300
80021c68:	f3 e8 11 7c 	or	r12,r9,r8<<0x17
80021c6c:	e0 a0 07 2a 	rcall	80022ac0 <__avr32_f32_mul>
80021c70:	18 9b       	mov	r11,r12
80021c72:	16 9c       	mov	r12,r11
80021c74:	d8 22       	popm	r4-r7,pc
80021c76:	d7 03       	nop

80021c78 <__isnand>:
80021c78:	14 98       	mov	r8,r10
80021c7a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80021c7e:	f0 0c 11 00 	rsub	r12,r8,0
80021c82:	10 4c       	or	r12,r8
80021c84:	fc 18 7f f0 	movh	r8,0x7ff0
80021c88:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80021c8c:	f0 0c 01 0c 	sub	r12,r8,r12
80021c90:	bf 9c       	lsr	r12,0x1f
80021c92:	5e fc       	retal	r12

80021c94 <matherr>:
80021c94:	5e fd       	retal	0

80021c96 <nan>:
80021c96:	30 0a       	mov	r10,0
80021c98:	fc 1b 7f f8 	movh	r11,0x7ff8
80021c9c:	5e fc       	retal	r12
80021c9e:	d7 03       	nop

80021ca0 <rint>:
80021ca0:	d4 21       	pushm	r4-r7,lr
80021ca2:	20 2d       	sub	sp,8
80021ca4:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
80021ca8:	14 94       	mov	r4,r10
80021caa:	16 95       	mov	r5,r11
80021cac:	14 98       	mov	r8,r10
80021cae:	16 9e       	mov	lr,r11
80021cb0:	16 9c       	mov	r12,r11
80021cb2:	f6 07 16 1f 	lsr	r7,r11,0x1f
80021cb6:	ec c9 03 ff 	sub	r9,r6,1023
80021cba:	59 39       	cp.w	r9,19
80021cbc:	e0 89 00 4a 	brgt	80021d50 <rint+0xb0>
80021cc0:	58 09       	cp.w	r9,0
80021cc2:	c2 c4       	brge	80021d1a <rint+0x7a>
80021cc4:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80021cc8:	14 49       	or	r9,r10
80021cca:	c7 10       	breq	80021dac <rint+0x10c>
80021ccc:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
80021cd0:	fe cc c0 38 	sub	r12,pc,-16328
80021cd4:	fd e4 10 08 	or	r8,lr,r4
80021cd8:	16 99       	mov	r9,r11
80021cda:	f0 0e 11 00 	rsub	lr,r8,0
80021cde:	e6 19 ff fe 	andh	r9,0xfffe,COH
80021ce2:	fd e8 10 08 	or	r8,lr,r8
80021ce6:	ad 88       	lsr	r8,0xc
80021ce8:	e6 18 00 08 	andh	r8,0x8,COH
80021cec:	f1 e9 10 0b 	or	r11,r8,r9
80021cf0:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
80021cf4:	14 98       	mov	r8,r10
80021cf6:	16 99       	mov	r9,r11
80021cf8:	08 9a       	mov	r10,r4
80021cfa:	0a 9b       	mov	r11,r5
80021cfc:	e0 a0 02 1e 	rcall	80022138 <__avr32_f64_add>
80021d00:	08 98       	mov	r8,r4
80021d02:	fa eb 00 00 	st.d	sp[0],r10
80021d06:	0a 99       	mov	r9,r5
80021d08:	fa ea 00 00 	ld.d	r10,sp[0]
80021d0c:	c4 8d       	rcall	80021f9c <__avr32_f64_sub>
80021d0e:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80021d12:	14 94       	mov	r4,r10
80021d14:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
80021d18:	c4 a8       	rjmp	80021dac <rint+0x10c>
80021d1a:	ee 7a ff ff 	mov	r10,1048575
80021d1e:	f4 09 08 4a 	asr	r10,r10,r9
80021d22:	f5 eb 00 0b 	and	r11,r10,r11
80021d26:	08 4b       	or	r11,r4
80021d28:	c4 20       	breq	80021dac <rint+0x10c>
80021d2a:	a1 9a       	lsr	r10,0x1
80021d2c:	f5 e5 00 0b 	and	r11,r10,r5
80021d30:	08 4b       	or	r11,r4
80021d32:	c0 31       	brne	80021d38 <rint+0x98>
80021d34:	16 98       	mov	r8,r11
80021d36:	c2 a8       	rjmp	80021d8a <rint+0xea>
80021d38:	59 39       	cp.w	r9,19
80021d3a:	c0 41       	brne	80021d42 <rint+0xa2>
80021d3c:	fc 18 40 00 	movh	r8,0x4000
80021d40:	c2 58       	rjmp	80021d8a <rint+0xea>
80021d42:	14 8c       	andn	r12,r10
80021d44:	e2 6a 00 00 	mov	r10,131072
80021d48:	f4 09 08 49 	asr	r9,r10,r9
80021d4c:	12 4c       	or	r12,r9
80021d4e:	c1 e8       	rjmp	80021d8a <rint+0xea>
80021d50:	e0 49 00 33 	cp.w	r9,51
80021d54:	e0 8a 00 09 	brle	80021d66 <rint+0xc6>
80021d58:	e0 49 04 00 	cp.w	r9,1024
80021d5c:	c2 81       	brne	80021dac <rint+0x10c>
80021d5e:	14 98       	mov	r8,r10
80021d60:	16 99       	mov	r9,r11
80021d62:	ce bd       	rcall	80022138 <__avr32_f64_add>
80021d64:	c2 28       	rjmp	80021da8 <rint+0x108>
80021d66:	ec c6 04 13 	sub	r6,r6,1043
80021d6a:	3f f9       	mov	r9,-1
80021d6c:	f2 06 0a 49 	lsr	r9,r9,r6
80021d70:	f3 ea 00 0a 	and	r10,r9,r10
80021d74:	c1 c0       	breq	80021dac <rint+0x10c>
80021d76:	a1 99       	lsr	r9,0x1
80021d78:	f3 e4 00 0a 	and	r10,r9,r4
80021d7c:	c0 70       	breq	80021d8a <rint+0xea>
80021d7e:	12 88       	andn	r8,r9
80021d80:	fc 19 40 00 	movh	r9,0x4000
80021d84:	f2 06 08 46 	asr	r6,r9,r6
80021d88:	0c 48       	or	r8,r6
80021d8a:	fe ca c0 f2 	sub	r10,pc,-16142
80021d8e:	18 99       	mov	r9,r12
80021d90:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
80021d94:	0c 9a       	mov	r10,r6
80021d96:	0e 9b       	mov	r11,r7
80021d98:	cd 0d       	rcall	80022138 <__avr32_f64_add>
80021d9a:	0c 98       	mov	r8,r6
80021d9c:	fa eb 00 00 	st.d	sp[0],r10
80021da0:	0e 99       	mov	r9,r7
80021da2:	fa ea 00 00 	ld.d	r10,sp[0]
80021da6:	cf bc       	rcall	80021f9c <__avr32_f64_sub>
80021da8:	14 94       	mov	r4,r10
80021daa:	16 95       	mov	r5,r11
80021dac:	08 9a       	mov	r10,r4
80021dae:	0a 9b       	mov	r11,r5
80021db0:	2f ed       	sub	sp,-8
80021db2:	d8 22       	popm	r4-r7,pc

80021db4 <copysignf>:
80021db4:	e6 1b 80 00 	andh	r11,0x8000,COH
80021db8:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80021dbc:	f7 ec 10 0c 	or	r12,r11,r12
80021dc0:	5e fc       	retal	r12
80021dc2:	d7 03       	nop

80021dc4 <__avr32_f64_mul>:
80021dc4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80021dc8:	e0 80 00 dc 	breq	80021f80 <__avr32_f64_mul_op1_zero>
80021dcc:	d4 21       	pushm	r4-r7,lr
80021dce:	f7 e9 20 0e 	eor	lr,r11,r9
80021dd2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80021dd6:	30 15       	mov	r5,1
80021dd8:	c4 30       	breq	80021e5e <__avr32_f64_mul_op1_subnormal>
80021dda:	ab 6b       	lsl	r11,0xa
80021ddc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80021de0:	ab 6a       	lsl	r10,0xa
80021de2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80021de6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80021dea:	c5 c0       	breq	80021ea2 <__avr32_f64_mul_op2_subnormal>
80021dec:	a1 78       	lsl	r8,0x1
80021dee:	5c f9       	rol	r9
80021df0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80021df4:	e0 47 07 ff 	cp.w	r7,2047
80021df8:	c7 70       	breq	80021ee6 <__avr32_f64_mul_op_nan_or_inf>
80021dfa:	e0 46 07 ff 	cp.w	r6,2047
80021dfe:	c7 40       	breq	80021ee6 <__avr32_f64_mul_op_nan_or_inf>
80021e00:	ee 06 00 0c 	add	r12,r7,r6
80021e04:	e0 2c 03 fe 	sub	r12,1022
80021e08:	f6 08 06 44 	mulu.d	r4,r11,r8
80021e0c:	f4 09 07 44 	macu.d	r4,r10,r9
80021e10:	f4 08 06 46 	mulu.d	r6,r10,r8
80021e14:	f6 09 06 4a 	mulu.d	r10,r11,r9
80021e18:	08 07       	add	r7,r4
80021e1a:	f4 05 00 4a 	adc	r10,r10,r5
80021e1e:	5c 0b       	acr	r11
80021e20:	ed bb 00 14 	bld	r11,0x14
80021e24:	c0 50       	breq	80021e2e <__avr32_f64_mul+0x6a>
80021e26:	a1 77       	lsl	r7,0x1
80021e28:	5c fa       	rol	r10
80021e2a:	5c fb       	rol	r11
80021e2c:	20 1c       	sub	r12,1
80021e2e:	58 0c       	cp.w	r12,0
80021e30:	e0 8a 00 6f 	brle	80021f0e <__avr32_f64_mul_res_subnormal>
80021e34:	e0 4c 07 ff 	cp.w	r12,2047
80021e38:	e0 84 00 9c 	brge	80021f70 <__avr32_f64_mul_res_inf>
80021e3c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80021e40:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80021e44:	ef e6 12 17 	or	r7,r7,r6>>0x1
80021e48:	ee 17 80 00 	eorh	r7,0x8000
80021e4c:	f1 b7 04 20 	satu	r7,0x1
80021e50:	0e 0a       	add	r10,r7
80021e52:	5c 0b       	acr	r11
80021e54:	ed be 00 1f 	bld	lr,0x1f
80021e58:	ef bb 00 1f 	bst	r11,0x1f
80021e5c:	d8 22       	popm	r4-r7,pc

80021e5e <__avr32_f64_mul_op1_subnormal>:
80021e5e:	e4 1b 00 0f 	andh	r11,0xf
80021e62:	f4 0c 12 00 	clz	r12,r10
80021e66:	f6 06 12 00 	clz	r6,r11
80021e6a:	f7 bc 03 e1 	sublo	r12,-31
80021e6e:	f8 06 17 30 	movlo	r6,r12
80021e72:	f7 b6 02 01 	subhs	r6,1
80021e76:	e0 46 00 20 	cp.w	r6,32
80021e7a:	c0 d4       	brge	80021e94 <__avr32_f64_mul_op1_subnormal+0x36>
80021e7c:	ec 0c 11 20 	rsub	r12,r6,32
80021e80:	f6 06 09 4b 	lsl	r11,r11,r6
80021e84:	f4 0c 0a 4c 	lsr	r12,r10,r12
80021e88:	18 4b       	or	r11,r12
80021e8a:	f4 06 09 4a 	lsl	r10,r10,r6
80021e8e:	20 b6       	sub	r6,11
80021e90:	0c 17       	sub	r7,r6
80021e92:	ca ab       	rjmp	80021de6 <__avr32_f64_mul+0x22>
80021e94:	f4 06 09 4b 	lsl	r11,r10,r6
80021e98:	c6 40       	breq	80021f60 <__avr32_f64_mul_res_zero>
80021e9a:	30 0a       	mov	r10,0
80021e9c:	20 b6       	sub	r6,11
80021e9e:	0c 17       	sub	r7,r6
80021ea0:	ca 3b       	rjmp	80021de6 <__avr32_f64_mul+0x22>

80021ea2 <__avr32_f64_mul_op2_subnormal>:
80021ea2:	e4 19 00 0f 	andh	r9,0xf
80021ea6:	f0 0c 12 00 	clz	r12,r8
80021eaa:	f2 05 12 00 	clz	r5,r9
80021eae:	f7 bc 03 ea 	sublo	r12,-22
80021eb2:	f8 05 17 30 	movlo	r5,r12
80021eb6:	f7 b5 02 0a 	subhs	r5,10
80021eba:	e0 45 00 20 	cp.w	r5,32
80021ebe:	c0 d4       	brge	80021ed8 <__avr32_f64_mul_op2_subnormal+0x36>
80021ec0:	ea 0c 11 20 	rsub	r12,r5,32
80021ec4:	f2 05 09 49 	lsl	r9,r9,r5
80021ec8:	f0 0c 0a 4c 	lsr	r12,r8,r12
80021ecc:	18 49       	or	r9,r12
80021ece:	f0 05 09 48 	lsl	r8,r8,r5
80021ed2:	20 25       	sub	r5,2
80021ed4:	0a 16       	sub	r6,r5
80021ed6:	c8 fb       	rjmp	80021df4 <__avr32_f64_mul+0x30>
80021ed8:	f0 05 09 49 	lsl	r9,r8,r5
80021edc:	c4 20       	breq	80021f60 <__avr32_f64_mul_res_zero>
80021ede:	30 08       	mov	r8,0
80021ee0:	20 25       	sub	r5,2
80021ee2:	0a 16       	sub	r6,r5
80021ee4:	c8 8b       	rjmp	80021df4 <__avr32_f64_mul+0x30>

80021ee6 <__avr32_f64_mul_op_nan_or_inf>:
80021ee6:	e4 19 00 0f 	andh	r9,0xf
80021eea:	e4 1b 00 0f 	andh	r11,0xf
80021eee:	14 4b       	or	r11,r10
80021ef0:	10 49       	or	r9,r8
80021ef2:	e0 47 07 ff 	cp.w	r7,2047
80021ef6:	c0 91       	brne	80021f08 <__avr32_f64_mul_op1_not_naninf>
80021ef8:	58 0b       	cp.w	r11,0
80021efa:	c3 81       	brne	80021f6a <__avr32_f64_mul_res_nan>
80021efc:	e0 46 07 ff 	cp.w	r6,2047
80021f00:	c3 81       	brne	80021f70 <__avr32_f64_mul_res_inf>
80021f02:	58 09       	cp.w	r9,0
80021f04:	c3 60       	breq	80021f70 <__avr32_f64_mul_res_inf>
80021f06:	c3 28       	rjmp	80021f6a <__avr32_f64_mul_res_nan>

80021f08 <__avr32_f64_mul_op1_not_naninf>:
80021f08:	58 09       	cp.w	r9,0
80021f0a:	c3 30       	breq	80021f70 <__avr32_f64_mul_res_inf>
80021f0c:	c2 f8       	rjmp	80021f6a <__avr32_f64_mul_res_nan>

80021f0e <__avr32_f64_mul_res_subnormal>:
80021f0e:	5c 3c       	neg	r12
80021f10:	2f fc       	sub	r12,-1
80021f12:	f1 bc 04 c0 	satu	r12,0x6
80021f16:	e0 4c 00 20 	cp.w	r12,32
80021f1a:	c1 14       	brge	80021f3c <__avr32_f64_mul_res_subnormal+0x2e>
80021f1c:	f8 08 11 20 	rsub	r8,r12,32
80021f20:	0e 46       	or	r6,r7
80021f22:	ee 0c 0a 47 	lsr	r7,r7,r12
80021f26:	f4 08 09 49 	lsl	r9,r10,r8
80021f2a:	12 47       	or	r7,r9
80021f2c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80021f30:	f6 08 09 49 	lsl	r9,r11,r8
80021f34:	12 4a       	or	r10,r9
80021f36:	f6 0c 0a 4b 	lsr	r11,r11,r12
80021f3a:	c8 3b       	rjmp	80021e40 <__avr32_f64_mul+0x7c>
80021f3c:	f8 08 11 20 	rsub	r8,r12,32
80021f40:	f9 b9 00 00 	moveq	r9,0
80021f44:	c0 30       	breq	80021f4a <__avr32_f64_mul_res_subnormal+0x3c>
80021f46:	f6 08 09 49 	lsl	r9,r11,r8
80021f4a:	0e 46       	or	r6,r7
80021f4c:	ed ea 10 16 	or	r6,r6,r10<<0x1
80021f50:	f4 0c 0a 4a 	lsr	r10,r10,r12
80021f54:	f3 ea 10 07 	or	r7,r9,r10
80021f58:	f6 0c 0a 4a 	lsr	r10,r11,r12
80021f5c:	30 0b       	mov	r11,0
80021f5e:	c7 1b       	rjmp	80021e40 <__avr32_f64_mul+0x7c>

80021f60 <__avr32_f64_mul_res_zero>:
80021f60:	1c 9b       	mov	r11,lr
80021f62:	e6 1b 80 00 	andh	r11,0x8000,COH
80021f66:	30 0a       	mov	r10,0
80021f68:	d8 22       	popm	r4-r7,pc

80021f6a <__avr32_f64_mul_res_nan>:
80021f6a:	3f fb       	mov	r11,-1
80021f6c:	3f fa       	mov	r10,-1
80021f6e:	d8 22       	popm	r4-r7,pc

80021f70 <__avr32_f64_mul_res_inf>:
80021f70:	f0 6b 00 00 	mov	r11,-1048576
80021f74:	ed be 00 1f 	bld	lr,0x1f
80021f78:	ef bb 00 1f 	bst	r11,0x1f
80021f7c:	30 0a       	mov	r10,0
80021f7e:	d8 22       	popm	r4-r7,pc

80021f80 <__avr32_f64_mul_op1_zero>:
80021f80:	f7 e9 20 0b 	eor	r11,r11,r9
80021f84:	e6 1b 80 00 	andh	r11,0x8000,COH
80021f88:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80021f8c:	e0 4c 07 ff 	cp.w	r12,2047
80021f90:	5e 1c       	retne	r12
80021f92:	3f fa       	mov	r10,-1
80021f94:	3f fb       	mov	r11,-1
80021f96:	5e fc       	retal	r12

80021f98 <__avr32_f64_sub_from_add>:
80021f98:	ee 19 80 00 	eorh	r9,0x8000

80021f9c <__avr32_f64_sub>:
80021f9c:	f7 e9 20 0c 	eor	r12,r11,r9
80021fa0:	e0 86 00 ca 	brmi	80022134 <__avr32_f64_add_from_sub>
80021fa4:	eb cd 40 e0 	pushm	r5-r7,lr
80021fa8:	16 9c       	mov	r12,r11
80021faa:	e6 1c 80 00 	andh	r12,0x8000,COH
80021fae:	bf db       	cbr	r11,0x1f
80021fb0:	bf d9       	cbr	r9,0x1f
80021fb2:	10 3a       	cp.w	r10,r8
80021fb4:	f2 0b 13 00 	cpc	r11,r9
80021fb8:	c0 92       	brcc	80021fca <__avr32_f64_sub+0x2e>
80021fba:	16 97       	mov	r7,r11
80021fbc:	12 9b       	mov	r11,r9
80021fbe:	0e 99       	mov	r9,r7
80021fc0:	14 97       	mov	r7,r10
80021fc2:	10 9a       	mov	r10,r8
80021fc4:	0e 98       	mov	r8,r7
80021fc6:	ee 1c 80 00 	eorh	r12,0x8000
80021fca:	f6 07 16 14 	lsr	r7,r11,0x14
80021fce:	ab 7b       	lsl	r11,0xb
80021fd0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80021fd4:	ab 7a       	lsl	r10,0xb
80021fd6:	bf bb       	sbr	r11,0x1f
80021fd8:	f2 06 16 14 	lsr	r6,r9,0x14
80021fdc:	c4 40       	breq	80022064 <__avr32_f64_sub_opL_subnormal>
80021fde:	ab 79       	lsl	r9,0xb
80021fe0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80021fe4:	ab 78       	lsl	r8,0xb
80021fe6:	bf b9       	sbr	r9,0x1f

80021fe8 <__avr32_f64_sub_opL_subnormal_done>:
80021fe8:	e0 47 07 ff 	cp.w	r7,2047
80021fec:	c4 f0       	breq	8002208a <__avr32_f64_sub_opH_nan_or_inf>
80021fee:	0e 26       	rsub	r6,r7
80021ff0:	c1 20       	breq	80022014 <__avr32_f64_sub_shift_done>
80021ff2:	ec 05 11 20 	rsub	r5,r6,32
80021ff6:	e0 46 00 20 	cp.w	r6,32
80021ffa:	c7 c2       	brcc	800220f2 <__avr32_f64_sub_longshift>
80021ffc:	f0 05 09 4e 	lsl	lr,r8,r5
80022000:	f2 05 09 45 	lsl	r5,r9,r5
80022004:	f0 06 0a 48 	lsr	r8,r8,r6
80022008:	f2 06 0a 49 	lsr	r9,r9,r6
8002200c:	0a 48       	or	r8,r5
8002200e:	58 0e       	cp.w	lr,0
80022010:	5f 1e       	srne	lr
80022012:	1c 48       	or	r8,lr

80022014 <__avr32_f64_sub_shift_done>:
80022014:	10 1a       	sub	r10,r8
80022016:	f6 09 01 4b 	sbc	r11,r11,r9
8002201a:	f6 06 12 00 	clz	r6,r11
8002201e:	c0 e0       	breq	8002203a <__avr32_f64_sub_longnormalize_done>
80022020:	c7 83       	brcs	80022110 <__avr32_f64_sub_longnormalize>
80022022:	ec 0e 11 20 	rsub	lr,r6,32
80022026:	f6 06 09 4b 	lsl	r11,r11,r6
8002202a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8002202e:	1c 4b       	or	r11,lr
80022030:	f4 06 09 4a 	lsl	r10,r10,r6
80022034:	0c 17       	sub	r7,r6
80022036:	e0 8a 00 39 	brle	800220a8 <__avr32_f64_sub_subnormal_result>

8002203a <__avr32_f64_sub_longnormalize_done>:
8002203a:	f4 09 15 15 	lsl	r9,r10,0x15
8002203e:	ab 9a       	lsr	r10,0xb
80022040:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80022044:	ab 9b       	lsr	r11,0xb
80022046:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8002204a:	18 4b       	or	r11,r12

8002204c <__avr32_f64_sub_round>:
8002204c:	fc 17 80 00 	movh	r7,0x8000
80022050:	ed ba 00 00 	bld	r10,0x0
80022054:	f7 b7 01 ff 	subne	r7,-1
80022058:	0e 39       	cp.w	r9,r7
8002205a:	5f 29       	srhs	r9
8002205c:	12 0a       	add	r10,r9
8002205e:	5c 0b       	acr	r11
80022060:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80022064 <__avr32_f64_sub_opL_subnormal>:
80022064:	ab 79       	lsl	r9,0xb
80022066:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8002206a:	ab 78       	lsl	r8,0xb
8002206c:	f3 e8 10 0e 	or	lr,r9,r8
80022070:	f9 b6 01 01 	movne	r6,1
80022074:	ee 0e 11 00 	rsub	lr,r7,0
80022078:	f9 b7 00 01 	moveq	r7,1
8002207c:	ef bb 00 1f 	bst	r11,0x1f
80022080:	f7 ea 10 0e 	or	lr,r11,r10
80022084:	f9 b7 00 00 	moveq	r7,0
80022088:	cb 0b       	rjmp	80021fe8 <__avr32_f64_sub_opL_subnormal_done>

8002208a <__avr32_f64_sub_opH_nan_or_inf>:
8002208a:	bf db       	cbr	r11,0x1f
8002208c:	f7 ea 10 0e 	or	lr,r11,r10
80022090:	c0 81       	brne	800220a0 <__avr32_f64_sub_return_nan>
80022092:	e0 46 07 ff 	cp.w	r6,2047
80022096:	c0 50       	breq	800220a0 <__avr32_f64_sub_return_nan>
80022098:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8002209c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800220a0 <__avr32_f64_sub_return_nan>:
800220a0:	3f fa       	mov	r10,-1
800220a2:	3f fb       	mov	r11,-1
800220a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800220a8 <__avr32_f64_sub_subnormal_result>:
800220a8:	5c 37       	neg	r7
800220aa:	2f f7       	sub	r7,-1
800220ac:	f1 b7 04 c0 	satu	r7,0x6
800220b0:	e0 47 00 20 	cp.w	r7,32
800220b4:	c1 14       	brge	800220d6 <__avr32_f64_sub_subnormal_result+0x2e>
800220b6:	ee 08 11 20 	rsub	r8,r7,32
800220ba:	f4 08 09 49 	lsl	r9,r10,r8
800220be:	5f 16       	srne	r6
800220c0:	f4 07 0a 4a 	lsr	r10,r10,r7
800220c4:	0c 4a       	or	r10,r6
800220c6:	f6 08 09 49 	lsl	r9,r11,r8
800220ca:	f5 e9 10 0a 	or	r10,r10,r9
800220ce:	f4 07 0a 4b 	lsr	r11,r10,r7
800220d2:	30 07       	mov	r7,0
800220d4:	cb 3b       	rjmp	8002203a <__avr32_f64_sub_longnormalize_done>
800220d6:	ee 08 11 40 	rsub	r8,r7,64
800220da:	f6 08 09 49 	lsl	r9,r11,r8
800220de:	14 49       	or	r9,r10
800220e0:	5f 16       	srne	r6
800220e2:	f6 07 0a 4a 	lsr	r10,r11,r7
800220e6:	0c 4a       	or	r10,r6
800220e8:	30 0b       	mov	r11,0
800220ea:	30 07       	mov	r7,0
800220ec:	ca 7b       	rjmp	8002203a <__avr32_f64_sub_longnormalize_done>
800220ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800220f2 <__avr32_f64_sub_longshift>:
800220f2:	f1 b6 04 c0 	satu	r6,0x6
800220f6:	f0 0e 17 00 	moveq	lr,r8
800220fa:	c0 40       	breq	80022102 <__avr32_f64_sub_longshift+0x10>
800220fc:	f2 05 09 4e 	lsl	lr,r9,r5
80022100:	10 4e       	or	lr,r8
80022102:	f2 06 0a 48 	lsr	r8,r9,r6
80022106:	30 09       	mov	r9,0
80022108:	58 0e       	cp.w	lr,0
8002210a:	5f 1e       	srne	lr
8002210c:	1c 48       	or	r8,lr
8002210e:	c8 3b       	rjmp	80022014 <__avr32_f64_sub_shift_done>

80022110 <__avr32_f64_sub_longnormalize>:
80022110:	f4 06 12 00 	clz	r6,r10
80022114:	f9 b7 03 00 	movlo	r7,0
80022118:	f9 b6 03 00 	movlo	r6,0
8002211c:	f9 bc 03 00 	movlo	r12,0
80022120:	f7 b6 02 e0 	subhs	r6,-32
80022124:	f4 06 09 4b 	lsl	r11,r10,r6
80022128:	30 0a       	mov	r10,0
8002212a:	0c 17       	sub	r7,r6
8002212c:	fe 9a ff be 	brle	800220a8 <__avr32_f64_sub_subnormal_result>
80022130:	c8 5b       	rjmp	8002203a <__avr32_f64_sub_longnormalize_done>
80022132:	d7 03       	nop

80022134 <__avr32_f64_add_from_sub>:
80022134:	ee 19 80 00 	eorh	r9,0x8000

80022138 <__avr32_f64_add>:
80022138:	f7 e9 20 0c 	eor	r12,r11,r9
8002213c:	fe 96 ff 2e 	brmi	80021f98 <__avr32_f64_sub_from_add>
80022140:	eb cd 40 e0 	pushm	r5-r7,lr
80022144:	16 9c       	mov	r12,r11
80022146:	e6 1c 80 00 	andh	r12,0x8000,COH
8002214a:	bf db       	cbr	r11,0x1f
8002214c:	bf d9       	cbr	r9,0x1f
8002214e:	12 3b       	cp.w	r11,r9
80022150:	c0 72       	brcc	8002215e <__avr32_f64_add+0x26>
80022152:	16 97       	mov	r7,r11
80022154:	12 9b       	mov	r11,r9
80022156:	0e 99       	mov	r9,r7
80022158:	14 97       	mov	r7,r10
8002215a:	10 9a       	mov	r10,r8
8002215c:	0e 98       	mov	r8,r7
8002215e:	30 0e       	mov	lr,0
80022160:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80022164:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80022168:	b5 ab       	sbr	r11,0x14
8002216a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8002216e:	c5 f0       	breq	8002222c <__avr32_f64_add_op2_subnormal>
80022170:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80022174:	b5 a9       	sbr	r9,0x14
80022176:	e0 47 07 ff 	cp.w	r7,2047
8002217a:	c2 50       	breq	800221c4 <__avr32_f64_add_opH_nan_or_inf>
8002217c:	0e 26       	rsub	r6,r7
8002217e:	c0 f0       	breq	8002219c <__avr32_f64_add_shift_done>
80022180:	ec 05 11 20 	rsub	r5,r6,32
80022184:	e0 46 00 20 	cp.w	r6,32
80022188:	c3 52       	brcc	800221f2 <__avr32_f64_add_longshift>
8002218a:	f0 05 09 4e 	lsl	lr,r8,r5
8002218e:	f2 05 09 45 	lsl	r5,r9,r5
80022192:	f0 06 0a 48 	lsr	r8,r8,r6
80022196:	f2 06 0a 49 	lsr	r9,r9,r6
8002219a:	0a 48       	or	r8,r5

8002219c <__avr32_f64_add_shift_done>:
8002219c:	10 0a       	add	r10,r8
8002219e:	f6 09 00 4b 	adc	r11,r11,r9
800221a2:	ed bb 00 15 	bld	r11,0x15
800221a6:	c3 40       	breq	8002220e <__avr32_f64_add_res_of>

800221a8 <__avr32_f64_add_res_of_done>:
800221a8:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800221ac:	18 4b       	or	r11,r12

800221ae <__avr32_f64_add_round>:
800221ae:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800221b2:	18 4e       	or	lr,r12
800221b4:	ee 1e 80 00 	eorh	lr,0x8000
800221b8:	f1 be 04 20 	satu	lr,0x1
800221bc:	1c 0a       	add	r10,lr
800221be:	5c 0b       	acr	r11
800221c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800221c4 <__avr32_f64_add_opH_nan_or_inf>:
800221c4:	b5 cb       	cbr	r11,0x14
800221c6:	f7 ea 10 0e 	or	lr,r11,r10
800221ca:	c1 01       	brne	800221ea <__avr32_f64_add_return_nan>
800221cc:	e0 46 07 ff 	cp.w	r6,2047
800221d0:	c0 30       	breq	800221d6 <__avr32_f64_add_opL_nan_or_inf>
800221d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800221d6 <__avr32_f64_add_opL_nan_or_inf>:
800221d6:	b5 c9       	cbr	r9,0x14
800221d8:	f3 e8 10 0e 	or	lr,r9,r8
800221dc:	c0 71       	brne	800221ea <__avr32_f64_add_return_nan>
800221de:	30 0a       	mov	r10,0
800221e0:	fc 1b 7f f0 	movh	r11,0x7ff0
800221e4:	18 4b       	or	r11,r12
800221e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800221ea <__avr32_f64_add_return_nan>:
800221ea:	3f fa       	mov	r10,-1
800221ec:	3f fb       	mov	r11,-1
800221ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800221f2 <__avr32_f64_add_longshift>:
800221f2:	f1 b6 04 c0 	satu	r6,0x6
800221f6:	f0 0e 17 00 	moveq	lr,r8
800221fa:	c0 60       	breq	80022206 <__avr32_f64_add_longshift+0x14>
800221fc:	f2 05 09 4e 	lsl	lr,r9,r5
80022200:	58 08       	cp.w	r8,0
80022202:	5f 18       	srne	r8
80022204:	10 4e       	or	lr,r8
80022206:	f2 06 0a 48 	lsr	r8,r9,r6
8002220a:	30 09       	mov	r9,0
8002220c:	cc 8b       	rjmp	8002219c <__avr32_f64_add_shift_done>

8002220e <__avr32_f64_add_res_of>:
8002220e:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80022212:	a1 9b       	lsr	r11,0x1
80022214:	5d 0a       	ror	r10
80022216:	5d 0e       	ror	lr
80022218:	2f f7       	sub	r7,-1
8002221a:	e0 47 07 ff 	cp.w	r7,2047
8002221e:	f9 ba 00 00 	moveq	r10,0
80022222:	f9 bb 00 00 	moveq	r11,0
80022226:	f9 be 00 00 	moveq	lr,0
8002222a:	cb fb       	rjmp	800221a8 <__avr32_f64_add_res_of_done>

8002222c <__avr32_f64_add_op2_subnormal>:
8002222c:	30 16       	mov	r6,1
8002222e:	58 07       	cp.w	r7,0
80022230:	ca 31       	brne	80022176 <__avr32_f64_add+0x3e>
80022232:	b5 cb       	cbr	r11,0x14
80022234:	10 0a       	add	r10,r8
80022236:	f6 09 00 4b 	adc	r11,r11,r9
8002223a:	18 4b       	or	r11,r12
8002223c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80022240 <__avr32_f64_to_u32>:
80022240:	58 0b       	cp.w	r11,0
80022242:	5e 6d       	retmi	0

80022244 <__avr32_f64_to_s32>:
80022244:	f6 0c 15 01 	lsl	r12,r11,0x1
80022248:	b5 9c       	lsr	r12,0x15
8002224a:	e0 2c 03 ff 	sub	r12,1023
8002224e:	5e 3d       	retlo	0
80022250:	f8 0c 11 1f 	rsub	r12,r12,31
80022254:	16 99       	mov	r9,r11
80022256:	ab 7b       	lsl	r11,0xb
80022258:	bf bb       	sbr	r11,0x1f
8002225a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8002225e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80022262:	a1 79       	lsl	r9,0x1
80022264:	5e 2b       	reths	r11
80022266:	5c 3b       	neg	r11
80022268:	5e fb       	retal	r11

8002226a <__avr32_u32_to_f64>:
8002226a:	f8 cb 00 00 	sub	r11,r12,0
8002226e:	30 0c       	mov	r12,0
80022270:	c0 38       	rjmp	80022276 <__avr32_s32_to_f64+0x4>

80022272 <__avr32_s32_to_f64>:
80022272:	18 9b       	mov	r11,r12
80022274:	5c 4b       	abs	r11
80022276:	30 0a       	mov	r10,0
80022278:	5e 0b       	reteq	r11
8002227a:	d4 01       	pushm	lr
8002227c:	e0 69 04 1e 	mov	r9,1054
80022280:	f6 08 12 00 	clz	r8,r11
80022284:	c1 70       	breq	800222b2 <__avr32_s32_to_f64+0x40>
80022286:	c0 c3       	brcs	8002229e <__avr32_s32_to_f64+0x2c>
80022288:	f0 0e 11 20 	rsub	lr,r8,32
8002228c:	f6 08 09 4b 	lsl	r11,r11,r8
80022290:	f4 0e 0a 4e 	lsr	lr,r10,lr
80022294:	1c 4b       	or	r11,lr
80022296:	f4 08 09 4a 	lsl	r10,r10,r8
8002229a:	10 19       	sub	r9,r8
8002229c:	c0 b8       	rjmp	800222b2 <__avr32_s32_to_f64+0x40>
8002229e:	f4 08 12 00 	clz	r8,r10
800222a2:	f9 b8 03 00 	movlo	r8,0
800222a6:	f7 b8 02 e0 	subhs	r8,-32
800222aa:	f4 08 09 4b 	lsl	r11,r10,r8
800222ae:	30 0a       	mov	r10,0
800222b0:	10 19       	sub	r9,r8
800222b2:	58 09       	cp.w	r9,0
800222b4:	e0 89 00 30 	brgt	80022314 <__avr32_s32_to_f64+0xa2>
800222b8:	5c 39       	neg	r9
800222ba:	2f f9       	sub	r9,-1
800222bc:	e0 49 00 36 	cp.w	r9,54
800222c0:	c0 43       	brcs	800222c8 <__avr32_s32_to_f64+0x56>
800222c2:	30 0b       	mov	r11,0
800222c4:	30 0a       	mov	r10,0
800222c6:	c2 68       	rjmp	80022312 <__avr32_s32_to_f64+0xa0>
800222c8:	2f 69       	sub	r9,-10
800222ca:	f2 08 11 20 	rsub	r8,r9,32
800222ce:	e0 49 00 20 	cp.w	r9,32
800222d2:	c0 b2       	brcc	800222e8 <__avr32_s32_to_f64+0x76>
800222d4:	f4 08 09 4e 	lsl	lr,r10,r8
800222d8:	f6 08 09 48 	lsl	r8,r11,r8
800222dc:	f4 09 0a 4a 	lsr	r10,r10,r9
800222e0:	f6 09 0a 4b 	lsr	r11,r11,r9
800222e4:	10 4b       	or	r11,r8
800222e6:	c0 88       	rjmp	800222f6 <__avr32_s32_to_f64+0x84>
800222e8:	f6 08 09 4e 	lsl	lr,r11,r8
800222ec:	14 4e       	or	lr,r10
800222ee:	16 9a       	mov	r10,r11
800222f0:	30 0b       	mov	r11,0
800222f2:	f4 09 0a 4a 	lsr	r10,r10,r9
800222f6:	ed ba 00 00 	bld	r10,0x0
800222fa:	c0 92       	brcc	8002230c <__avr32_s32_to_f64+0x9a>
800222fc:	1c 7e       	tst	lr,lr
800222fe:	c0 41       	brne	80022306 <__avr32_s32_to_f64+0x94>
80022300:	ed ba 00 01 	bld	r10,0x1
80022304:	c0 42       	brcc	8002230c <__avr32_s32_to_f64+0x9a>
80022306:	2f fa       	sub	r10,-1
80022308:	f7 bb 02 ff 	subhs	r11,-1
8002230c:	5c fc       	rol	r12
8002230e:	5d 0b       	ror	r11
80022310:	5d 0a       	ror	r10
80022312:	d8 02       	popm	pc
80022314:	e0 68 03 ff 	mov	r8,1023
80022318:	ed ba 00 0b 	bld	r10,0xb
8002231c:	f7 b8 00 ff 	subeq	r8,-1
80022320:	10 0a       	add	r10,r8
80022322:	5c 0b       	acr	r11
80022324:	f7 b9 03 fe 	sublo	r9,-2
80022328:	e0 49 07 ff 	cp.w	r9,2047
8002232c:	c0 55       	brlt	80022336 <__avr32_s32_to_f64+0xc4>
8002232e:	30 0a       	mov	r10,0
80022330:	fc 1b ff e0 	movh	r11,0xffe0
80022334:	c0 c8       	rjmp	8002234c <__floatsidf_return_op1>
80022336:	ed bb 00 1f 	bld	r11,0x1f
8002233a:	f7 b9 01 01 	subne	r9,1
8002233e:	ab 9a       	lsr	r10,0xb
80022340:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80022344:	a1 7b       	lsl	r11,0x1
80022346:	ab 9b       	lsr	r11,0xb
80022348:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8002234c <__floatsidf_return_op1>:
8002234c:	a1 7c       	lsl	r12,0x1
8002234e:	5d 0b       	ror	r11
80022350:	d8 02       	popm	pc

80022352 <__avr32_f64_cmp_eq>:
80022352:	10 3a       	cp.w	r10,r8
80022354:	f2 0b 13 00 	cpc	r11,r9
80022358:	c0 80       	breq	80022368 <__avr32_f64_cmp_eq+0x16>
8002235a:	a1 7b       	lsl	r11,0x1
8002235c:	a1 79       	lsl	r9,0x1
8002235e:	14 4b       	or	r11,r10
80022360:	12 4b       	or	r11,r9
80022362:	10 4b       	or	r11,r8
80022364:	5e 0f       	reteq	1
80022366:	5e fd       	retal	0
80022368:	a1 7b       	lsl	r11,0x1
8002236a:	fc 1c ff e0 	movh	r12,0xffe0
8002236e:	58 0a       	cp.w	r10,0
80022370:	f8 0b 13 00 	cpc	r11,r12
80022374:	5e 8f       	retls	1
80022376:	5e fd       	retal	0

80022378 <__avr32_f64_cmp_ge>:
80022378:	1a de       	st.w	--sp,lr
8002237a:	1a d7       	st.w	--sp,r7
8002237c:	a1 7b       	lsl	r11,0x1
8002237e:	5f 3c       	srlo	r12
80022380:	a1 79       	lsl	r9,0x1
80022382:	5f 37       	srlo	r7
80022384:	5c fc       	rol	r12
80022386:	fc 1e ff e0 	movh	lr,0xffe0
8002238a:	58 0a       	cp.w	r10,0
8002238c:	fc 0b 13 00 	cpc	r11,lr
80022390:	e0 8b 00 1d 	brhi	800223ca <__avr32_f64_cmp_ge+0x52>
80022394:	58 08       	cp.w	r8,0
80022396:	fc 09 13 00 	cpc	r9,lr
8002239a:	e0 8b 00 18 	brhi	800223ca <__avr32_f64_cmp_ge+0x52>
8002239e:	58 0b       	cp.w	r11,0
800223a0:	f5 ba 00 00 	subfeq	r10,0
800223a4:	c1 50       	breq	800223ce <__avr32_f64_cmp_ge+0x56>
800223a6:	1b 07       	ld.w	r7,sp++
800223a8:	1b 0e       	ld.w	lr,sp++
800223aa:	58 3c       	cp.w	r12,3
800223ac:	c0 a0       	breq	800223c0 <__avr32_f64_cmp_ge+0x48>
800223ae:	58 1c       	cp.w	r12,1
800223b0:	c0 33       	brcs	800223b6 <__avr32_f64_cmp_ge+0x3e>
800223b2:	5e 0f       	reteq	1
800223b4:	5e 1d       	retne	0
800223b6:	10 3a       	cp.w	r10,r8
800223b8:	f2 0b 13 00 	cpc	r11,r9
800223bc:	5e 2f       	reths	1
800223be:	5e 3d       	retlo	0
800223c0:	14 38       	cp.w	r8,r10
800223c2:	f6 09 13 00 	cpc	r9,r11
800223c6:	5e 2f       	reths	1
800223c8:	5e 3d       	retlo	0
800223ca:	1b 07       	ld.w	r7,sp++
800223cc:	d8 0a       	popm	pc,r12=0
800223ce:	58 17       	cp.w	r7,1
800223d0:	5f 0c       	sreq	r12
800223d2:	58 09       	cp.w	r9,0
800223d4:	f5 b8 00 00 	subfeq	r8,0
800223d8:	1b 07       	ld.w	r7,sp++
800223da:	1b 0e       	ld.w	lr,sp++
800223dc:	5e 0f       	reteq	1
800223de:	5e fc       	retal	r12

800223e0 <__avr32_f64_cmp_lt>:
800223e0:	1a de       	st.w	--sp,lr
800223e2:	1a d7       	st.w	--sp,r7
800223e4:	a1 7b       	lsl	r11,0x1
800223e6:	5f 3c       	srlo	r12
800223e8:	a1 79       	lsl	r9,0x1
800223ea:	5f 37       	srlo	r7
800223ec:	5c fc       	rol	r12
800223ee:	fc 1e ff e0 	movh	lr,0xffe0
800223f2:	58 0a       	cp.w	r10,0
800223f4:	fc 0b 13 00 	cpc	r11,lr
800223f8:	e0 8b 00 1d 	brhi	80022432 <__avr32_f64_cmp_lt+0x52>
800223fc:	58 08       	cp.w	r8,0
800223fe:	fc 09 13 00 	cpc	r9,lr
80022402:	e0 8b 00 18 	brhi	80022432 <__avr32_f64_cmp_lt+0x52>
80022406:	58 0b       	cp.w	r11,0
80022408:	f5 ba 00 00 	subfeq	r10,0
8002240c:	c1 50       	breq	80022436 <__avr32_f64_cmp_lt+0x56>
8002240e:	1b 07       	ld.w	r7,sp++
80022410:	1b 0e       	ld.w	lr,sp++
80022412:	58 3c       	cp.w	r12,3
80022414:	c0 a0       	breq	80022428 <__avr32_f64_cmp_lt+0x48>
80022416:	58 1c       	cp.w	r12,1
80022418:	c0 33       	brcs	8002241e <__avr32_f64_cmp_lt+0x3e>
8002241a:	5e 0d       	reteq	0
8002241c:	5e 1f       	retne	1
8002241e:	10 3a       	cp.w	r10,r8
80022420:	f2 0b 13 00 	cpc	r11,r9
80022424:	5e 2d       	reths	0
80022426:	5e 3f       	retlo	1
80022428:	14 38       	cp.w	r8,r10
8002242a:	f6 09 13 00 	cpc	r9,r11
8002242e:	5e 2d       	reths	0
80022430:	5e 3f       	retlo	1
80022432:	1b 07       	ld.w	r7,sp++
80022434:	d8 0a       	popm	pc,r12=0
80022436:	58 17       	cp.w	r7,1
80022438:	5f 1c       	srne	r12
8002243a:	58 09       	cp.w	r9,0
8002243c:	f5 b8 00 00 	subfeq	r8,0
80022440:	1b 07       	ld.w	r7,sp++
80022442:	1b 0e       	ld.w	lr,sp++
80022444:	5e 0d       	reteq	0
80022446:	5e fc       	retal	r12

80022448 <__avr32_f32_cmp_eq>:
80022448:	16 3c       	cp.w	r12,r11
8002244a:	c0 50       	breq	80022454 <__avr32_f32_cmp_eq+0xc>
8002244c:	16 4c       	or	r12,r11
8002244e:	a1 7c       	lsl	r12,0x1
80022450:	5e 0f       	reteq	1
80022452:	5e fd       	retal	0
80022454:	fc 1b ff 00 	movh	r11,0xff00
80022458:	a1 7c       	lsl	r12,0x1
8002245a:	16 3c       	cp.w	r12,r11
8002245c:	5e 8f       	retls	1
8002245e:	5e fd       	retal	0

80022460 <__avr32_f32_cmp_ge>:
80022460:	f8 0a 15 01 	lsl	r10,r12,0x1
80022464:	f6 09 15 01 	lsl	r9,r11,0x1
80022468:	f5 ba 00 00 	subfeq	r10,0
8002246c:	5e 0f       	reteq	1
8002246e:	fc 18 ff 00 	movh	r8,0xff00
80022472:	10 3a       	cp.w	r10,r8
80022474:	5e bd       	rethi	0
80022476:	10 39       	cp.w	r9,r8
80022478:	5e bd       	rethi	0
8002247a:	f7 ec 20 08 	eor	r8,r11,r12
8002247e:	ed bc 00 1f 	bld	r12,0x1f
80022482:	5f 28       	srhs	r8
80022484:	5e 68       	retmi	r8
80022486:	c0 43       	brcs	8002248e <__avr32_f32_cmp_ge+0x2e>
80022488:	16 3c       	cp.w	r12,r11
8002248a:	5e 2f       	reths	1
8002248c:	5e 3d       	retlo	0
8002248e:	18 3b       	cp.w	r11,r12
80022490:	5e 2f       	reths	1
80022492:	5e 3d       	retlo	0

80022494 <__avr32_f32_cmp_lt>:
80022494:	f8 0a 15 01 	lsl	r10,r12,0x1
80022498:	f6 09 15 01 	lsl	r9,r11,0x1
8002249c:	f5 ba 00 00 	subfeq	r10,0
800224a0:	5e 0d       	reteq	0
800224a2:	fc 18 ff 00 	movh	r8,0xff00
800224a6:	10 3a       	cp.w	r10,r8
800224a8:	5e bd       	rethi	0
800224aa:	10 39       	cp.w	r9,r8
800224ac:	5e bd       	rethi	0
800224ae:	f7 ec 20 08 	eor	r8,r11,r12
800224b2:	ed bc 00 1f 	bld	r12,0x1f
800224b6:	5f 38       	srlo	r8
800224b8:	5e 68       	retmi	r8
800224ba:	c0 43       	brcs	800224c2 <__avr32_f32_cmp_lt+0x2e>
800224bc:	16 3c       	cp.w	r12,r11
800224be:	5e 2d       	reths	0
800224c0:	5e 3f       	retlo	1
800224c2:	18 3b       	cp.w	r11,r12
800224c4:	5e 2d       	reths	0
800224c6:	5e 3f       	retlo	1

800224c8 <__avr32_f64_div>:
800224c8:	eb cd 40 ff 	pushm	r0-r7,lr
800224cc:	f7 e9 20 0e 	eor	lr,r11,r9
800224d0:	f6 07 16 14 	lsr	r7,r11,0x14
800224d4:	a9 7b       	lsl	r11,0x9
800224d6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800224da:	a9 7a       	lsl	r10,0x9
800224dc:	bd bb       	sbr	r11,0x1d
800224de:	e4 1b 3f ff 	andh	r11,0x3fff
800224e2:	ab d7       	cbr	r7,0xb
800224e4:	e0 80 00 cc 	breq	8002267c <__avr32_f64_div_round_subnormal+0x54>
800224e8:	e0 47 07 ff 	cp.w	r7,2047
800224ec:	e0 84 00 b5 	brge	80022656 <__avr32_f64_div_round_subnormal+0x2e>
800224f0:	f2 06 16 14 	lsr	r6,r9,0x14
800224f4:	a9 79       	lsl	r9,0x9
800224f6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800224fa:	a9 78       	lsl	r8,0x9
800224fc:	bd b9       	sbr	r9,0x1d
800224fe:	e4 19 3f ff 	andh	r9,0x3fff
80022502:	ab d6       	cbr	r6,0xb
80022504:	e0 80 00 e2 	breq	800226c8 <__avr32_f64_div_round_subnormal+0xa0>
80022508:	e0 46 07 ff 	cp.w	r6,2047
8002250c:	e0 84 00 b2 	brge	80022670 <__avr32_f64_div_round_subnormal+0x48>
80022510:	0c 17       	sub	r7,r6
80022512:	fe 37 fc 01 	sub	r7,-1023
80022516:	fc 1c 80 00 	movh	r12,0x8000
8002251a:	f8 03 16 01 	lsr	r3,r12,0x1
8002251e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80022522:	5c d4       	com	r4
80022524:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80022528:	e6 09 06 44 	mulu.d	r4,r3,r9
8002252c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80022530:	e6 05 06 44 	mulu.d	r4,r3,r5
80022534:	ea 03 15 02 	lsl	r3,r5,0x2
80022538:	e6 09 06 44 	mulu.d	r4,r3,r9
8002253c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80022540:	e6 05 06 44 	mulu.d	r4,r3,r5
80022544:	ea 03 15 02 	lsl	r3,r5,0x2
80022548:	e6 09 06 44 	mulu.d	r4,r3,r9
8002254c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80022550:	e6 05 06 44 	mulu.d	r4,r3,r5
80022554:	ea 03 15 02 	lsl	r3,r5,0x2
80022558:	e6 08 06 40 	mulu.d	r0,r3,r8
8002255c:	e4 09 07 40 	macu.d	r0,r2,r9
80022560:	e6 09 06 44 	mulu.d	r4,r3,r9
80022564:	02 04       	add	r4,r1
80022566:	5c 05       	acr	r5
80022568:	a3 65       	lsl	r5,0x2
8002256a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8002256e:	a3 64       	lsl	r4,0x2
80022570:	5c 34       	neg	r4
80022572:	f8 05 01 45 	sbc	r5,r12,r5
80022576:	e6 04 06 40 	mulu.d	r0,r3,r4
8002257a:	e4 05 07 40 	macu.d	r0,r2,r5
8002257e:	e6 05 06 44 	mulu.d	r4,r3,r5
80022582:	02 04       	add	r4,r1
80022584:	5c 05       	acr	r5
80022586:	ea 03 15 02 	lsl	r3,r5,0x2
8002258a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8002258e:	e8 02 15 02 	lsl	r2,r4,0x2
80022592:	e6 08 06 40 	mulu.d	r0,r3,r8
80022596:	e4 09 07 40 	macu.d	r0,r2,r9
8002259a:	e6 09 06 44 	mulu.d	r4,r3,r9
8002259e:	02 04       	add	r4,r1
800225a0:	5c 05       	acr	r5
800225a2:	a3 65       	lsl	r5,0x2
800225a4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800225a8:	a3 64       	lsl	r4,0x2
800225aa:	5c 34       	neg	r4
800225ac:	f8 05 01 45 	sbc	r5,r12,r5
800225b0:	e6 04 06 40 	mulu.d	r0,r3,r4
800225b4:	e4 05 07 40 	macu.d	r0,r2,r5
800225b8:	e6 05 06 44 	mulu.d	r4,r3,r5
800225bc:	02 04       	add	r4,r1
800225be:	5c 05       	acr	r5
800225c0:	ea 03 15 02 	lsl	r3,r5,0x2
800225c4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800225c8:	e8 02 15 02 	lsl	r2,r4,0x2
800225cc:	e6 0a 06 40 	mulu.d	r0,r3,r10
800225d0:	e4 0b 07 40 	macu.d	r0,r2,r11
800225d4:	e6 0b 06 42 	mulu.d	r2,r3,r11
800225d8:	02 02       	add	r2,r1
800225da:	5c 03       	acr	r3
800225dc:	ed b3 00 1c 	bld	r3,0x1c
800225e0:	c0 90       	breq	800225f2 <__avr32_f64_div+0x12a>
800225e2:	a1 72       	lsl	r2,0x1
800225e4:	5c f3       	rol	r3
800225e6:	20 17       	sub	r7,1
800225e8:	a3 9a       	lsr	r10,0x3
800225ea:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800225ee:	a3 9b       	lsr	r11,0x3
800225f0:	c0 58       	rjmp	800225fa <__avr32_f64_div+0x132>
800225f2:	a5 8a       	lsr	r10,0x4
800225f4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800225f8:	a5 8b       	lsr	r11,0x4
800225fa:	58 07       	cp.w	r7,0
800225fc:	e0 8a 00 8b 	brle	80022712 <__avr32_f64_div_res_subnormal>
80022600:	e0 12 ff 00 	andl	r2,0xff00
80022604:	e8 12 00 80 	orl	r2,0x80
80022608:	e6 08 06 40 	mulu.d	r0,r3,r8
8002260c:	e4 09 07 40 	macu.d	r0,r2,r9
80022610:	e4 08 06 44 	mulu.d	r4,r2,r8
80022614:	e6 09 06 48 	mulu.d	r8,r3,r9
80022618:	00 05       	add	r5,r0
8002261a:	f0 01 00 48 	adc	r8,r8,r1
8002261e:	5c 09       	acr	r9
80022620:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80022624:	58 04       	cp.w	r4,0
80022626:	5c 25       	cpc	r5

80022628 <__avr32_f64_div_round_subnormal>:
80022628:	f4 08 13 00 	cpc	r8,r10
8002262c:	f6 09 13 00 	cpc	r9,r11
80022630:	5f 36       	srlo	r6
80022632:	f8 06 17 00 	moveq	r6,r12
80022636:	e4 0a 16 08 	lsr	r10,r2,0x8
8002263a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8002263e:	e6 0b 16 08 	lsr	r11,r3,0x8
80022642:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80022646:	ed be 00 1f 	bld	lr,0x1f
8002264a:	ef bb 00 1f 	bst	r11,0x1f
8002264e:	0c 0a       	add	r10,r6
80022650:	5c 0b       	acr	r11
80022652:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80022656:	e4 1b 00 0f 	andh	r11,0xf
8002265a:	14 4b       	or	r11,r10
8002265c:	e0 81 00 a7 	brne	800227aa <__avr32_f64_div_res_subnormal+0x98>
80022660:	f2 06 16 14 	lsr	r6,r9,0x14
80022664:	ab d6       	cbr	r6,0xb
80022666:	e0 46 07 ff 	cp.w	r6,2047
8002266a:	e0 81 00 a4 	brne	800227b2 <__avr32_f64_div_res_subnormal+0xa0>
8002266e:	c9 e8       	rjmp	800227aa <__avr32_f64_div_res_subnormal+0x98>
80022670:	e4 19 00 0f 	andh	r9,0xf
80022674:	10 49       	or	r9,r8
80022676:	e0 81 00 9a 	brne	800227aa <__avr32_f64_div_res_subnormal+0x98>
8002267a:	c9 28       	rjmp	8002279e <__avr32_f64_div_res_subnormal+0x8c>
8002267c:	a3 7b       	lsl	r11,0x3
8002267e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80022682:	a3 7a       	lsl	r10,0x3
80022684:	f5 eb 10 04 	or	r4,r10,r11
80022688:	e0 80 00 a0 	breq	800227c8 <__avr32_f64_div_op1_zero>
8002268c:	f6 04 12 00 	clz	r4,r11
80022690:	c1 70       	breq	800226be <__avr32_f64_div_round_subnormal+0x96>
80022692:	c0 c3       	brcs	800226aa <__avr32_f64_div_round_subnormal+0x82>
80022694:	e8 05 11 20 	rsub	r5,r4,32
80022698:	f6 04 09 4b 	lsl	r11,r11,r4
8002269c:	f4 05 0a 45 	lsr	r5,r10,r5
800226a0:	0a 4b       	or	r11,r5
800226a2:	f4 04 09 4a 	lsl	r10,r10,r4
800226a6:	08 17       	sub	r7,r4
800226a8:	c0 b8       	rjmp	800226be <__avr32_f64_div_round_subnormal+0x96>
800226aa:	f4 04 12 00 	clz	r4,r10
800226ae:	f9 b4 03 00 	movlo	r4,0
800226b2:	f7 b4 02 e0 	subhs	r4,-32
800226b6:	f4 04 09 4b 	lsl	r11,r10,r4
800226ba:	30 0a       	mov	r10,0
800226bc:	08 17       	sub	r7,r4
800226be:	a3 8a       	lsr	r10,0x2
800226c0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800226c4:	a3 8b       	lsr	r11,0x2
800226c6:	c1 1b       	rjmp	800224e8 <__avr32_f64_div+0x20>
800226c8:	a3 79       	lsl	r9,0x3
800226ca:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800226ce:	a3 78       	lsl	r8,0x3
800226d0:	f3 e8 10 04 	or	r4,r9,r8
800226d4:	c6 f0       	breq	800227b2 <__avr32_f64_div_res_subnormal+0xa0>
800226d6:	f2 04 12 00 	clz	r4,r9
800226da:	c1 70       	breq	80022708 <__avr32_f64_div_round_subnormal+0xe0>
800226dc:	c0 c3       	brcs	800226f4 <__avr32_f64_div_round_subnormal+0xcc>
800226de:	e8 05 11 20 	rsub	r5,r4,32
800226e2:	f2 04 09 49 	lsl	r9,r9,r4
800226e6:	f0 05 0a 45 	lsr	r5,r8,r5
800226ea:	0a 49       	or	r9,r5
800226ec:	f0 04 09 48 	lsl	r8,r8,r4
800226f0:	08 16       	sub	r6,r4
800226f2:	c0 b8       	rjmp	80022708 <__avr32_f64_div_round_subnormal+0xe0>
800226f4:	f0 04 12 00 	clz	r4,r8
800226f8:	f9 b4 03 00 	movlo	r4,0
800226fc:	f7 b4 02 e0 	subhs	r4,-32
80022700:	f0 04 09 49 	lsl	r9,r8,r4
80022704:	30 08       	mov	r8,0
80022706:	08 16       	sub	r6,r4
80022708:	a3 88       	lsr	r8,0x2
8002270a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8002270e:	a3 89       	lsr	r9,0x2
80022710:	cf ca       	rjmp	80022508 <__avr32_f64_div+0x40>

80022712 <__avr32_f64_div_res_subnormal>:
80022712:	5c 37       	neg	r7
80022714:	2f f7       	sub	r7,-1
80022716:	f1 b7 04 c0 	satu	r7,0x6
8002271a:	e0 47 00 20 	cp.w	r7,32
8002271e:	c1 54       	brge	80022748 <__avr32_f64_div_res_subnormal+0x36>
80022720:	ee 06 11 20 	rsub	r6,r7,32
80022724:	e4 07 0a 42 	lsr	r2,r2,r7
80022728:	e6 06 09 4c 	lsl	r12,r3,r6
8002272c:	18 42       	or	r2,r12
8002272e:	e6 07 0a 43 	lsr	r3,r3,r7
80022732:	f4 06 09 41 	lsl	r1,r10,r6
80022736:	f4 07 0a 4a 	lsr	r10,r10,r7
8002273a:	f6 06 09 4c 	lsl	r12,r11,r6
8002273e:	18 4a       	or	r10,r12
80022740:	f6 07 0a 4b 	lsr	r11,r11,r7
80022744:	30 00       	mov	r0,0
80022746:	c1 58       	rjmp	80022770 <__avr32_f64_div_res_subnormal+0x5e>
80022748:	ee 06 11 20 	rsub	r6,r7,32
8002274c:	f9 b0 00 00 	moveq	r0,0
80022750:	f9 bc 00 00 	moveq	r12,0
80022754:	c0 50       	breq	8002275e <__avr32_f64_div_res_subnormal+0x4c>
80022756:	f4 06 09 40 	lsl	r0,r10,r6
8002275a:	f6 06 09 4c 	lsl	r12,r11,r6
8002275e:	e6 07 0a 42 	lsr	r2,r3,r7
80022762:	30 03       	mov	r3,0
80022764:	f4 07 0a 41 	lsr	r1,r10,r7
80022768:	18 41       	or	r1,r12
8002276a:	f6 07 0a 4a 	lsr	r10,r11,r7
8002276e:	30 0b       	mov	r11,0
80022770:	e0 12 ff 00 	andl	r2,0xff00
80022774:	e8 12 00 80 	orl	r2,0x80
80022778:	e6 08 06 46 	mulu.d	r6,r3,r8
8002277c:	e4 09 07 46 	macu.d	r6,r2,r9
80022780:	e4 08 06 44 	mulu.d	r4,r2,r8
80022784:	e6 09 06 48 	mulu.d	r8,r3,r9
80022788:	0c 05       	add	r5,r6
8002278a:	f0 07 00 48 	adc	r8,r8,r7
8002278e:	5c 09       	acr	r9
80022790:	30 07       	mov	r7,0
80022792:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80022796:	00 34       	cp.w	r4,r0
80022798:	e2 05 13 00 	cpc	r5,r1
8002279c:	c4 6b       	rjmp	80022628 <__avr32_f64_div_round_subnormal>
8002279e:	1c 9b       	mov	r11,lr
800227a0:	e6 1b 80 00 	andh	r11,0x8000,COH
800227a4:	30 0a       	mov	r10,0
800227a6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800227aa:	3f fb       	mov	r11,-1
800227ac:	30 0a       	mov	r10,0
800227ae:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800227b2:	f5 eb 10 04 	or	r4,r10,r11
800227b6:	c0 90       	breq	800227c8 <__avr32_f64_div_op1_zero>
800227b8:	1c 9b       	mov	r11,lr
800227ba:	e6 1b 80 00 	andh	r11,0x8000,COH
800227be:	ea 1b 7f f0 	orh	r11,0x7ff0
800227c2:	30 0a       	mov	r10,0
800227c4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800227c8 <__avr32_f64_div_op1_zero>:
800227c8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800227cc:	ce f0       	breq	800227aa <__avr32_f64_div_res_subnormal+0x98>
800227ce:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800227d2:	e0 44 07 ff 	cp.w	r4,2047
800227d6:	ce 41       	brne	8002279e <__avr32_f64_div_res_subnormal+0x8c>
800227d8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800227dc:	ce 10       	breq	8002279e <__avr32_f64_div_res_subnormal+0x8c>
800227de:	ce 6b       	rjmp	800227aa <__avr32_f64_div_res_subnormal+0x98>

800227e0 <__avr32_f32_div>:
800227e0:	f7 ec 20 08 	eor	r8,r11,r12
800227e4:	a1 7c       	lsl	r12,0x1
800227e6:	a1 7b       	lsl	r11,0x1
800227e8:	c7 a0       	breq	800228dc <__divsf_return_op1+0x16>
800227ea:	18 7c       	tst	r12,r12
800227ec:	f9 b9 00 00 	moveq	r9,0
800227f0:	c0 90       	breq	80022802 <__avr32_f32_div+0x22>
800227f2:	f8 09 16 18 	lsr	r9,r12,0x18
800227f6:	c7 e0       	breq	800228f2 <__divsf_return_op1+0x2c>
800227f8:	e0 49 00 ff 	cp.w	r9,255
800227fc:	c6 82       	brcc	800228cc <__divsf_return_op1+0x6>
800227fe:	a7 7c       	lsl	r12,0x7
80022800:	bf bc       	sbr	r12,0x1f
80022802:	f6 0a 16 18 	lsr	r10,r11,0x18
80022806:	c7 e0       	breq	80022902 <__divsf_return_op1+0x3c>
80022808:	e0 4a 00 ff 	cp.w	r10,255
8002280c:	c6 62       	brcc	800228d8 <__divsf_return_op1+0x12>
8002280e:	a7 7b       	lsl	r11,0x7
80022810:	bf bb       	sbr	r11,0x1f
80022812:	58 09       	cp.w	r9,0
80022814:	f5 bc 00 00 	subfeq	r12,0
80022818:	5e 0d       	reteq	0
8002281a:	1a d5       	st.w	--sp,r5
8002281c:	bb 27       	st.d	--sp,r6
8002281e:	14 19       	sub	r9,r10
80022820:	28 19       	sub	r9,-127
80022822:	fc 1a 80 00 	movh	r10,0x8000
80022826:	a3 8c       	lsr	r12,0x2
80022828:	f6 05 16 02 	lsr	r5,r11,0x2
8002282c:	f4 0b 16 01 	lsr	r11,r10,0x1
80022830:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80022834:	5c d6       	com	r6
80022836:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8002283a:	f6 05 06 46 	mulu.d	r6,r11,r5
8002283e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80022842:	f6 07 06 46 	mulu.d	r6,r11,r7
80022846:	ee 0b 15 02 	lsl	r11,r7,0x2
8002284a:	f6 05 06 46 	mulu.d	r6,r11,r5
8002284e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80022852:	f6 07 06 46 	mulu.d	r6,r11,r7
80022856:	ee 0b 15 02 	lsl	r11,r7,0x2
8002285a:	f6 05 06 46 	mulu.d	r6,r11,r5
8002285e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80022862:	f6 07 06 46 	mulu.d	r6,r11,r7
80022866:	ee 0b 15 02 	lsl	r11,r7,0x2
8002286a:	f6 05 06 46 	mulu.d	r6,r11,r5
8002286e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80022872:	f6 07 06 46 	mulu.d	r6,r11,r7
80022876:	ee 0b 15 02 	lsl	r11,r7,0x2
8002287a:	f6 0c 06 46 	mulu.d	r6,r11,r12
8002287e:	a5 8c       	lsr	r12,0x4
80022880:	ed b7 00 1c 	bld	r7,0x1c
80022884:	c0 40       	breq	8002288c <__avr32_f32_div+0xac>
80022886:	a1 77       	lsl	r7,0x1
80022888:	20 19       	sub	r9,1
8002288a:	a1 7c       	lsl	r12,0x1
8002288c:	58 09       	cp.w	r9,0
8002288e:	e0 8a 00 42 	brle	80022912 <__avr32_f32_div_res_subnormal>
80022892:	e0 17 ff e0 	andl	r7,0xffe0
80022896:	e8 17 00 10 	orl	r7,0x10
8002289a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8002289e:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800228a2:	58 0a       	cp.w	r10,0

800228a4 <__avr32_f32_div_round_subnormal>:
800228a4:	f8 0b 13 00 	cpc	r11,r12
800228a8:	5f 3b       	srlo	r11
800228aa:	ea 0b 17 00 	moveq	r11,r5
800228ae:	ee 0c 16 05 	lsr	r12,r7,0x5
800228b2:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
800228b6:	bb 07       	ld.d	r6,sp++
800228b8:	1b 05       	ld.w	r5,sp++
800228ba:	ed b8 00 1f 	bld	r8,0x1f
800228be:	ef bc 00 1f 	bst	r12,0x1f
800228c2:	16 0c       	add	r12,r11
800228c4:	5e fc       	retal	r12

800228c6 <__divsf_return_op1>:
800228c6:	a1 78       	lsl	r8,0x1
800228c8:	5d 0c       	ror	r12
800228ca:	5e fc       	retal	r12
800228cc:	5e 1e       	retne	-1
800228ce:	fc 19 ff 00 	movh	r9,0xff00
800228d2:	12 3b       	cp.w	r11,r9
800228d4:	cf 93       	brcs	800228c6 <__divsf_return_op1>
800228d6:	5e fe       	retal	-1
800228d8:	5e 0d       	reteq	0
800228da:	5e fe       	retal	-1
800228dc:	18 7c       	tst	r12,r12
800228de:	5e 0e       	reteq	-1
800228e0:	f8 09 16 18 	lsr	r9,r12,0x18
800228e4:	c0 70       	breq	800228f2 <__divsf_return_op1+0x2c>
800228e6:	e0 49 00 ff 	cp.w	r9,255
800228ea:	cf 12       	brcc	800228cc <__divsf_return_op1+0x6>
800228ec:	fc 1c ff 00 	movh	r12,0xff00
800228f0:	ce bb       	rjmp	800228c6 <__divsf_return_op1>
800228f2:	a7 7c       	lsl	r12,0x7
800228f4:	f8 09 12 00 	clz	r9,r12
800228f8:	f8 09 09 4c 	lsl	r12,r12,r9
800228fc:	f2 09 11 01 	rsub	r9,r9,1
80022900:	c8 1b       	rjmp	80022802 <__avr32_f32_div+0x22>
80022902:	a7 7b       	lsl	r11,0x7
80022904:	f6 0a 12 00 	clz	r10,r11
80022908:	f6 0a 09 4b 	lsl	r11,r11,r10
8002290c:	f4 0a 11 01 	rsub	r10,r10,1
80022910:	c8 5b       	rjmp	8002281a <__avr32_f32_div+0x3a>

80022912 <__avr32_f32_div_res_subnormal>:
80022912:	5c 39       	neg	r9
80022914:	2f f9       	sub	r9,-1
80022916:	f1 b9 04 a0 	satu	r9,0x5
8002291a:	f2 0a 11 20 	rsub	r10,r9,32
8002291e:	ee 09 0a 47 	lsr	r7,r7,r9
80022922:	f8 0a 09 46 	lsl	r6,r12,r10
80022926:	f8 09 0a 4c 	lsr	r12,r12,r9
8002292a:	e0 17 ff e0 	andl	r7,0xffe0
8002292e:	e8 17 00 10 	orl	r7,0x10
80022932:	ea 07 06 4a 	mulu.d	r10,r5,r7
80022936:	30 09       	mov	r9,0
80022938:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8002293c:	0c 3a       	cp.w	r10,r6
8002293e:	cb 3b       	rjmp	800228a4 <__avr32_f32_div_round_subnormal>

80022940 <__avr32_f32_sub_from_add>:
80022940:	ee 1b 80 00 	eorh	r11,0x8000

80022944 <__avr32_f32_sub>:
80022944:	f7 ec 20 08 	eor	r8,r11,r12
80022948:	c6 46       	brmi	80022a10 <__avr32_f32_add_from_sub>
8002294a:	18 98       	mov	r8,r12
8002294c:	e6 1c 80 00 	andh	r12,0x8000,COH
80022950:	bf db       	cbr	r11,0x1f
80022952:	bf d8       	cbr	r8,0x1f
80022954:	f0 0b 0c 4a 	max	r10,r8,r11
80022958:	f0 0b 0d 49 	min	r9,r8,r11
8002295c:	10 3a       	cp.w	r10,r8
8002295e:	f7 bc 01 01 	subne	r12,1
80022962:	e6 1c 80 00 	andh	r12,0x8000,COH
80022966:	f4 08 15 08 	lsl	r8,r10,0x8
8002296a:	bf b8       	sbr	r8,0x1f
8002296c:	b7 9a       	lsr	r10,0x17
8002296e:	e0 4a 00 ff 	cp.w	r10,255
80022972:	c3 80       	breq	800229e2 <__avr32_f32_sub_op1_nan_or_inf>
80022974:	f2 0b 15 08 	lsl	r11,r9,0x8
80022978:	bf bb       	sbr	r11,0x1f
8002297a:	b7 99       	lsr	r9,0x17
8002297c:	1a dc       	st.w	--sp,r12
8002297e:	c2 90       	breq	800229d0 <__avr32_f32_sub_op2_subnormal>
80022980:	f4 09 01 0c 	sub	r12,r10,r9
80022984:	c0 c0       	breq	8002299c <__avr32_f32_sub_shift_done>
80022986:	f1 bc 04 a0 	satu	r12,0x5
8002298a:	f8 09 11 20 	rsub	r9,r12,32
8002298e:	f6 09 09 49 	lsl	r9,r11,r9
80022992:	f7 b8 01 01 	subne	r8,1
80022996:	5f 19       	srne	r9
80022998:	f6 0c 0a 4b 	lsr	r11,r11,r12

8002299c <__avr32_f32_sub_shift_done>:
8002299c:	16 18       	sub	r8,r11
8002299e:	1b 0c       	ld.w	r12,sp++
800229a0:	f0 0b 12 00 	clz	r11,r8
800229a4:	5e 3d       	retlo	0
800229a6:	f0 0b 09 48 	lsl	r8,r8,r11
800229aa:	16 1a       	sub	r10,r11
800229ac:	e0 8a 00 26 	brle	800229f8 <__avr32_f32_sub_subnormal_result>
800229b0:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800229b4:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
800229b8:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

800229bc <__avr32_f32_sub_round>:
800229bc:	fc 1a 80 00 	movh	r10,0x8000
800229c0:	ed bc 00 00 	bld	r12,0x0
800229c4:	f7 ba 01 ff 	subne	r10,-1
800229c8:	14 39       	cp.w	r9,r10
800229ca:	f7 bc 02 ff 	subhs	r12,-1
800229ce:	5e fc       	retal	r12

800229d0 <__avr32_f32_sub_op2_subnormal>:
800229d0:	bf db       	cbr	r11,0x1f
800229d2:	f9 b9 01 01 	movne	r9,1
800229d6:	58 0a       	cp.w	r10,0
800229d8:	cd 41       	brne	80022980 <__avr32_f32_sub+0x3c>
800229da:	bf d8       	cbr	r8,0x1f
800229dc:	f9 ba 01 01 	movne	r10,1
800229e0:	cd 0b       	rjmp	80022980 <__avr32_f32_sub+0x3c>

800229e2 <__avr32_f32_sub_op1_nan_or_inf>:
800229e2:	f0 0b 15 01 	lsl	r11,r8,0x1
800229e6:	5e 1e       	retne	-1
800229e8:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800229ec:	f2 0b 16 17 	lsr	r11,r9,0x17
800229f0:	e0 4b 00 ff 	cp.w	r11,255
800229f4:	5e 1c       	retne	r12
800229f6:	5e fe       	retal	-1

800229f8 <__avr32_f32_sub_subnormal_result>:
800229f8:	f4 0a 11 09 	rsub	r10,r10,9
800229fc:	f4 0b 11 20 	rsub	r11,r10,32
80022a00:	5e 3d       	retlo	0
80022a02:	f0 0a 0a 4a 	lsr	r10,r8,r10
80022a06:	14 4c       	or	r12,r10
80022a08:	f0 0b 09 48 	lsl	r8,r8,r11
80022a0c:	10 49       	or	r9,r8
80022a0e:	cd 7b       	rjmp	800229bc <__avr32_f32_sub_round>

80022a10 <__avr32_f32_add_from_sub>:
80022a10:	ee 1b 80 00 	eorh	r11,0x8000

80022a14 <__avr32_f32_add>:
80022a14:	f7 ec 20 08 	eor	r8,r11,r12
80022a18:	c9 46       	brmi	80022940 <__avr32_f32_sub_from_add>
80022a1a:	18 98       	mov	r8,r12
80022a1c:	e6 1c 80 00 	andh	r12,0x8000,COH
80022a20:	bf db       	cbr	r11,0x1f
80022a22:	bf d8       	cbr	r8,0x1f
80022a24:	f0 0b 0c 4a 	max	r10,r8,r11
80022a28:	f0 0b 0d 49 	min	r9,r8,r11
80022a2c:	f4 08 15 08 	lsl	r8,r10,0x8
80022a30:	bf b8       	sbr	r8,0x1f
80022a32:	b7 9a       	lsr	r10,0x17
80022a34:	e0 4a 00 ff 	cp.w	r10,255
80022a38:	c2 d0       	breq	80022a92 <__avr32_f32_add_op1_nan_or_inf>
80022a3a:	f2 0b 15 08 	lsl	r11,r9,0x8
80022a3e:	bf bb       	sbr	r11,0x1f
80022a40:	b7 99       	lsr	r9,0x17
80022a42:	c1 e0       	breq	80022a7e <__avr32_f32_add_op2_subnormal>
80022a44:	1a dc       	st.w	--sp,r12
80022a46:	14 29       	rsub	r9,r10
80022a48:	f1 b9 04 a0 	satu	r9,0x5
80022a4c:	f6 09 0a 4c 	lsr	r12,r11,r9
80022a50:	f2 09 11 18 	rsub	r9,r9,24
80022a54:	f6 09 09 4b 	lsl	r11,r11,r9
80022a58:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80022a5c:	18 08       	add	r8,r12
80022a5e:	1b 0c       	ld.w	r12,sp++
80022a60:	c2 63       	brcs	80022aac <__avr32_f32_add_res_of>
80022a62:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80022a66:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80022a6a:	fc 1a 80 00 	movh	r10,0x8000
80022a6e:	ed bc 00 00 	bld	r12,0x0
80022a72:	f7 ba 01 ff 	subne	r10,-1
80022a76:	14 3b       	cp.w	r11,r10
80022a78:	f7 bc 02 ff 	subhs	r12,-1
80022a7c:	5e fc       	retal	r12

80022a7e <__avr32_f32_add_op2_subnormal>:
80022a7e:	bf db       	cbr	r11,0x1f
80022a80:	f9 b9 01 01 	movne	r9,1
80022a84:	58 0a       	cp.w	r10,0
80022a86:	cd f1       	brne	80022a44 <__avr32_f32_add+0x30>
80022a88:	bf d8       	cbr	r8,0x1f
80022a8a:	10 0b       	add	r11,r8
80022a8c:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80022a90:	5e fc       	retal	r12

80022a92 <__avr32_f32_add_op1_nan_or_inf>:
80022a92:	f0 0b 15 01 	lsl	r11,r8,0x1
80022a96:	5e 1e       	retne	-1
80022a98:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80022a9c:	f2 0b 16 17 	lsr	r11,r9,0x17
80022aa0:	e0 4b 00 ff 	cp.w	r11,255
80022aa4:	5e 1c       	retne	r12
80022aa6:	a9 79       	lsl	r9,0x9
80022aa8:	5e 0c       	reteq	r12
80022aaa:	5e fe       	retal	-1

80022aac <__avr32_f32_add_res_of>:
80022aac:	a1 98       	lsr	r8,0x1
80022aae:	2f fa       	sub	r10,-1
80022ab0:	e0 4a 00 ff 	cp.w	r10,255
80022ab4:	f9 b8 00 00 	moveq	r8,0
80022ab8:	f9 bb 00 00 	moveq	r11,0
80022abc:	cd 3b       	rjmp	80022a62 <__avr32_f32_add+0x4e>
80022abe:	d7 03       	nop

80022ac0 <__avr32_f32_mul>:
80022ac0:	18 98       	mov	r8,r12
80022ac2:	16 5c       	eor	r12,r11
80022ac4:	e6 1c 80 00 	andh	r12,0x8000,COH
80022ac8:	bf d8       	cbr	r8,0x1f
80022aca:	c6 60       	breq	80022b96 <__avr32_f32_mul_op1_zero>
80022acc:	bf db       	cbr	r11,0x1f
80022ace:	f0 0b 0c 4a 	max	r10,r8,r11
80022ad2:	f0 0b 0d 49 	min	r9,r8,r11
80022ad6:	f4 08 15 08 	lsl	r8,r10,0x8
80022ada:	bf b8       	sbr	r8,0x1f
80022adc:	b7 9a       	lsr	r10,0x17
80022ade:	e0 4a 00 ff 	cp.w	r10,255
80022ae2:	c3 d0       	breq	80022b5c <__avr32_f32_mul_op1_nan_or_inf>
80022ae4:	f2 0b 15 08 	lsl	r11,r9,0x8
80022ae8:	bf bb       	sbr	r11,0x1f
80022aea:	b7 99       	lsr	r9,0x17
80022aec:	c2 40       	breq	80022b34 <__avr32_f32_mul_op2_subnormal>
80022aee:	14 09       	add	r9,r10
80022af0:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80022af4:	f6 08 15 01 	lsl	r8,r11,0x1
80022af8:	f0 0b 17 20 	movhs	r11,r8
80022afc:	f7 b9 02 01 	subhs	r9,1
80022b00:	a9 8a       	lsr	r10,0x8
80022b02:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
80022b06:	27 e9       	sub	r9,126
80022b08:	e0 8a 00 39 	brle	80022b7a <__avr32_f32_mul_res_subnormal>
80022b0c:	e0 49 00 ff 	cp.w	r9,255
80022b10:	c0 f4       	brge	80022b2e <__avr32_f32_mul_round+0x14>
80022b12:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80022b16:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80022b1a <__avr32_f32_mul_round>:
80022b1a:	fc 18 80 00 	movh	r8,0x8000
80022b1e:	ed bc 00 00 	bld	r12,0x0
80022b22:	f7 b8 01 ff 	subne	r8,-1
80022b26:	10 3a       	cp.w	r10,r8
80022b28:	f7 bc 02 ff 	subhs	r12,-1
80022b2c:	5e fc       	retal	r12
80022b2e:	ea 1c 7f 80 	orh	r12,0x7f80
80022b32:	5e fc       	retal	r12

80022b34 <__avr32_f32_mul_op2_subnormal>:
80022b34:	bf db       	cbr	r11,0x1f
80022b36:	f6 09 12 00 	clz	r9,r11
80022b3a:	5e 3d       	retlo	0
80022b3c:	20 89       	sub	r9,8
80022b3e:	f6 09 09 4b 	lsl	r11,r11,r9
80022b42:	f2 09 11 01 	rsub	r9,r9,1
80022b46:	14 7a       	tst	r10,r10
80022b48:	cd 31       	brne	80022aee <__avr32_f32_mul+0x2e>
80022b4a:	bf d8       	cbr	r8,0x1f
80022b4c:	f6 0a 12 00 	clz	r10,r11
80022b50:	5e 3d       	retlo	0
80022b52:	f0 0a 09 48 	lsl	r8,r8,r10
80022b56:	f4 0a 11 01 	rsub	r10,r10,1
80022b5a:	cc ab       	rjmp	80022aee <__avr32_f32_mul+0x2e>

80022b5c <__avr32_f32_mul_op1_nan_or_inf>:
80022b5c:	f0 0b 15 01 	lsl	r11,r8,0x1
80022b60:	5e 1e       	retne	-1
80022b62:	12 79       	tst	r9,r9
80022b64:	5e 0e       	reteq	-1
80022b66:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80022b6a:	f2 0b 16 17 	lsr	r11,r9,0x17
80022b6e:	e0 4b 00 ff 	cp.w	r11,255
80022b72:	5e 1c       	retne	r12
80022b74:	a9 79       	lsl	r9,0x9
80022b76:	5e 0c       	reteq	r12
80022b78:	5e fe       	retal	-1

80022b7a <__avr32_f32_mul_res_subnormal>:
80022b7a:	f2 09 11 09 	rsub	r9,r9,9
80022b7e:	f2 08 11 20 	rsub	r8,r9,32
80022b82:	5e 3d       	retlo	0
80022b84:	f6 09 0a 49 	lsr	r9,r11,r9
80022b88:	12 4c       	or	r12,r9
80022b8a:	f6 08 09 4b 	lsl	r11,r11,r8
80022b8e:	e4 1a 00 ff 	andh	r10,0xff
80022b92:	16 4a       	or	r10,r11
80022b94:	cc 3b       	rjmp	80022b1a <__avr32_f32_mul_round>

80022b96 <__avr32_f32_mul_op1_zero>:
80022b96:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80022b9a:	e0 4a 00 ff 	cp.w	r10,255
80022b9e:	5e 1c       	retne	r12
80022ba0:	5e 0e       	reteq	-1

80022ba2 <__avr32_s32_to_f32>:
80022ba2:	58 0c       	cp.w	r12,0
80022ba4:	5e 0c       	reteq	r12
80022ba6:	18 9b       	mov	r11,r12
80022ba8:	5c 4c       	abs	r12
80022baa:	e0 6a 00 9e 	mov	r10,158
80022bae:	f8 09 12 00 	clz	r9,r12
80022bb2:	12 1a       	sub	r10,r9
80022bb4:	f8 09 09 4c 	lsl	r12,r12,r9
80022bb8:	58 0a       	cp.w	r10,0
80022bba:	e0 8a 00 15 	brle	80022be4 <__avr32_s32_to_f32_subnormal>
80022bbe:	37 f9       	mov	r9,127
80022bc0:	ed bc 00 08 	bld	r12,0x8
80022bc4:	f7 b9 00 ff 	subeq	r9,-1
80022bc8:	12 0c       	add	r12,r9
80022bca:	f7 ba 03 fe 	sublo	r10,-2
80022bce:	ed bc 00 1f 	bld	r12,0x1f
80022bd2:	f7 ba 01 01 	subne	r10,1
80022bd6:	f8 0c 16 07 	lsr	r12,r12,0x7
80022bda:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80022bde:	a1 7b       	lsl	r11,0x1
80022be0:	5d 0c       	ror	r12
80022be2:	5e fc       	retal	r12

80022be4 <__avr32_s32_to_f32_subnormal>:
80022be4:	f4 0a 11 01 	rsub	r10,r10,1
80022be8:	59 9a       	cp.w	r10,25
80022bea:	f9 bc 02 00 	movhs	r12,0
80022bee:	c1 32       	brcc	80022c14 <__avr32_s32_to_f32_subnormal+0x30>
80022bf0:	f4 09 11 20 	rsub	r9,r10,32
80022bf4:	f8 09 09 49 	lsl	r9,r12,r9
80022bf8:	5f 19       	srne	r9
80022bfa:	f8 0a 0a 4c 	lsr	r12,r12,r10
80022bfe:	12 4c       	or	r12,r9
80022c00:	37 f9       	mov	r9,127
80022c02:	ed bc 00 08 	bld	r12,0x8
80022c06:	f7 b9 00 ff 	subeq	r9,-1
80022c0a:	12 0c       	add	r12,r9
80022c0c:	f8 0c 16 07 	lsr	r12,r12,0x7
80022c10:	a1 7b       	lsl	r11,0x1
80022c12:	5d 0c       	ror	r12
80022c14:	5e fc       	retal	r12

80022c16 <__avr32_f32_to_s32>:
80022c16:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80022c1a:	27 fb       	sub	r11,127
80022c1c:	5e 3d       	retlo	0
80022c1e:	f6 0b 11 1f 	rsub	r11,r11,31
80022c22:	f8 0a 15 08 	lsl	r10,r12,0x8
80022c26:	bf ba       	sbr	r10,0x1f
80022c28:	f4 0b 0a 4a 	lsr	r10,r10,r11
80022c2c:	a1 7c       	lsl	r12,0x1
80022c2e:	5e 2a       	reths	r10
80022c30:	5c 3a       	neg	r10
80022c32:	5e fa       	retal	r10

80022c34 <__avr32_f32_to_f64>:
80022c34:	f8 0b 15 01 	lsl	r11,r12,0x1
80022c38:	f9 ba 00 00 	moveq	r10,0
80022c3c:	5e 0b       	reteq	r11
80022c3e:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80022c42:	e0 49 00 ff 	cp.w	r9,255
80022c46:	c1 e0       	breq	80022c82 <__extendsfdf_return_op1+0x6>
80022c48:	a7 7b       	lsl	r11,0x7
80022c4a:	30 0a       	mov	r10,0
80022c4c:	58 09       	cp.w	r9,0
80022c4e:	f7 b9 00 ff 	subeq	r9,-1
80022c52:	5f 18       	srne	r8
80022c54:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80022c58:	fe 39 fc 80 	sub	r9,-896
80022c5c:	f6 08 12 00 	clz	r8,r11
80022c60:	10 19       	sub	r9,r8
80022c62:	f6 08 09 4b 	lsl	r11,r11,r8
80022c66:	ed bb 00 1f 	bld	r11,0x1f
80022c6a:	f7 b9 01 01 	subne	r9,1
80022c6e:	ab 9a       	lsr	r10,0xb
80022c70:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80022c74:	a1 7b       	lsl	r11,0x1
80022c76:	ab 9b       	lsr	r11,0xb
80022c78:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80022c7c <__extendsfdf_return_op1>:
80022c7c:	a1 7c       	lsl	r12,0x1
80022c7e:	5d 0b       	ror	r11
80022c80:	5e fb       	retal	r11
80022c82:	fc 1a ff e0 	movh	r10,0xffe0
80022c86:	a9 6b       	lsl	r11,0x8
80022c88:	f9 bb 01 ff 	movne	r11,-1
80022c8c:	f4 0b 17 00 	moveq	r11,r10
80022c90:	30 0a       	mov	r10,0
80022c92:	cf 5b       	rjmp	80022c7c <__extendsfdf_return_op1>

80022c94 <__avr32_f64_to_f32>:
80022c94:	f6 09 15 01 	lsl	r9,r11,0x1
80022c98:	b5 99       	lsr	r9,0x15
80022c9a:	5e 0d       	reteq	0
80022c9c:	f6 08 15 0a 	lsl	r8,r11,0xa
80022ca0:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80022ca4:	ab 6a       	lsl	r10,0xa
80022ca6:	5c 3a       	neg	r10
80022ca8:	5c fc       	rol	r12
80022caa:	e0 49 07 ff 	cp.w	r9,2047
80022cae:	c1 a0       	breq	80022ce2 <__truncdfsf_return_op1+0x6>
80022cb0:	e0 29 03 80 	sub	r9,896
80022cb4:	bf bc       	sbr	r12,0x1f
80022cb6:	58 09       	cp.w	r9,0
80022cb8:	e0 8a 00 1a 	brle	80022cec <__truncdfsf_return_op1+0x10>
80022cbc:	37 fa       	mov	r10,127
80022cbe:	ed bc 00 08 	bld	r12,0x8
80022cc2:	f7 ba 00 ff 	subeq	r10,-1
80022cc6:	14 0c       	add	r12,r10
80022cc8:	f7 b9 03 fe 	sublo	r9,-2
80022ccc:	ed bc 00 1f 	bld	r12,0x1f
80022cd0:	f7 b9 01 01 	subne	r9,1
80022cd4:	f8 0c 16 07 	lsr	r12,r12,0x7
80022cd8:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80022cdc <__truncdfsf_return_op1>:
80022cdc:	a1 7b       	lsl	r11,0x1
80022cde:	5d 0c       	ror	r12
80022ce0:	5e fc       	retal	r12
80022ce2:	bf dc       	cbr	r12,0x1f
80022ce4:	5e 1e       	retne	-1
80022ce6:	fc 1c 7f 80 	movh	r12,0x7f80
80022cea:	5e fc       	retal	r12
80022cec:	f2 09 11 01 	rsub	r9,r9,1
80022cf0:	59 99       	cp.w	r9,25
80022cf2:	f9 bc 02 00 	movhs	r12,0
80022cf6:	c1 32       	brcc	80022d1c <__truncdfsf_return_op1+0x40>
80022cf8:	f2 0a 11 20 	rsub	r10,r9,32
80022cfc:	f8 0a 09 4a 	lsl	r10,r12,r10
80022d00:	5f 1a       	srne	r10
80022d02:	f8 09 0a 4c 	lsr	r12,r12,r9
80022d06:	14 4c       	or	r12,r10
80022d08:	37 fa       	mov	r10,127
80022d0a:	ed bc 00 08 	bld	r12,0x8
80022d0e:	f7 ba 00 ff 	subeq	r10,-1
80022d12:	14 0c       	add	r12,r10
80022d14:	f8 0c 16 07 	lsr	r12,r12,0x7
80022d18:	a1 7b       	lsl	r11,0x1
80022d1a:	5d 0c       	ror	r12
80022d1c:	5e fc       	retal	r12

80022d1e <__avr32_udiv64>:
80022d1e:	d4 31       	pushm	r0-r7,lr
80022d20:	1a 97       	mov	r7,sp
80022d22:	20 2d       	sub	sp,8
80022d24:	10 9e       	mov	lr,r8
80022d26:	12 95       	mov	r5,r9
80022d28:	14 96       	mov	r6,r10
80022d2a:	58 09       	cp.w	r9,0
80022d2c:	c4 91       	brne	80022dbe <__avr32_udiv64+0xa0>
80022d2e:	16 38       	cp.w	r8,r11
80022d30:	e0 88 00 57 	brls	80022dde <__avr32_udiv64+0xc0>
80022d34:	f0 08 12 00 	clz	r8,r8
80022d38:	c0 d0       	breq	80022d52 <__avr32_udiv64+0x34>
80022d3a:	f6 08 09 4b 	lsl	r11,r11,r8
80022d3e:	f0 09 11 20 	rsub	r9,r8,32
80022d42:	fc 08 09 4e 	lsl	lr,lr,r8
80022d46:	f4 09 0a 49 	lsr	r9,r10,r9
80022d4a:	f4 08 09 46 	lsl	r6,r10,r8
80022d4e:	f3 eb 10 0b 	or	r11,r9,r11
80022d52:	fc 05 16 10 	lsr	r5,lr,0x10
80022d56:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80022d5a:	f6 05 0d 0a 	divu	r10,r11,r5
80022d5e:	ec 08 16 10 	lsr	r8,r6,0x10
80022d62:	14 99       	mov	r9,r10
80022d64:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80022d68:	b9 3a       	mul	r10,r12
80022d6a:	10 3a       	cp.w	r10,r8
80022d6c:	e0 88 00 0c 	brls	80022d84 <__avr32_udiv64+0x66>
80022d70:	20 19       	sub	r9,1
80022d72:	1c 08       	add	r8,lr
80022d74:	10 3e       	cp.w	lr,r8
80022d76:	e0 8b 00 07 	brhi	80022d84 <__avr32_udiv64+0x66>
80022d7a:	10 3a       	cp.w	r10,r8
80022d7c:	f7 b9 0b 01 	subhi	r9,1
80022d80:	f1 de eb 08 	addhi	r8,r8,lr
80022d84:	f0 0a 01 0b 	sub	r11,r8,r10
80022d88:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80022d8c:	f6 05 0d 0a 	divu	r10,r11,r5
80022d90:	ed eb 11 06 	or	r6,r6,r11<<0x10
80022d94:	14 98       	mov	r8,r10
80022d96:	f4 0c 02 4c 	mul	r12,r10,r12
80022d9a:	0c 3c       	cp.w	r12,r6
80022d9c:	e0 88 00 0a 	brls	80022db0 <__avr32_udiv64+0x92>
80022da0:	20 18       	sub	r8,1
80022da2:	1c 06       	add	r6,lr
80022da4:	0c 3e       	cp.w	lr,r6
80022da6:	e0 8b 00 05 	brhi	80022db0 <__avr32_udiv64+0x92>
80022daa:	0c 3c       	cp.w	r12,r6
80022dac:	f7 b8 0b 01 	subhi	r8,1
80022db0:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80022db4:	30 0c       	mov	r12,0
80022db6:	16 9a       	mov	r10,r11
80022db8:	18 9b       	mov	r11,r12
80022dba:	2f ed       	sub	sp,-8
80022dbc:	d8 32       	popm	r0-r7,pc
80022dbe:	16 39       	cp.w	r9,r11
80022dc0:	e0 8b 00 51 	brhi	80022e62 <__avr32_udiv64+0x144>
80022dc4:	f2 0c 12 00 	clz	r12,r9
80022dc8:	c5 31       	brne	80022e6e <__avr32_udiv64+0x150>
80022dca:	14 38       	cp.w	r8,r10
80022dcc:	5f 89       	srls	r9
80022dce:	16 35       	cp.w	r5,r11
80022dd0:	5f 38       	srlo	r8
80022dd2:	10 49       	or	r9,r8
80022dd4:	f8 09 18 00 	cp.b	r9,r12
80022dd8:	c4 50       	breq	80022e62 <__avr32_udiv64+0x144>
80022dda:	30 1b       	mov	r11,1
80022ddc:	c4 58       	rjmp	80022e66 <__avr32_udiv64+0x148>
80022dde:	58 08       	cp.w	r8,0
80022de0:	c0 51       	brne	80022dea <__avr32_udiv64+0xcc>
80022de2:	30 19       	mov	r9,1
80022de4:	f2 08 0d 08 	divu	r8,r9,r8
80022de8:	10 9e       	mov	lr,r8
80022dea:	fc 08 12 00 	clz	r8,lr
80022dee:	e0 81 00 91 	brne	80022f10 <__avr32_udiv64+0x1f2>
80022df2:	1c 1b       	sub	r11,lr
80022df4:	fc 05 16 10 	lsr	r5,lr,0x10
80022df8:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80022dfc:	30 1c       	mov	r12,1
80022dfe:	f6 05 0d 0a 	divu	r10,r11,r5
80022e02:	ec 08 16 10 	lsr	r8,r6,0x10
80022e06:	f4 09 02 43 	mul	r3,r10,r9
80022e0a:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80022e0e:	14 9b       	mov	r11,r10
80022e10:	10 33       	cp.w	r3,r8
80022e12:	e0 88 00 0c 	brls	80022e2a <__avr32_udiv64+0x10c>
80022e16:	20 1b       	sub	r11,1
80022e18:	1c 08       	add	r8,lr
80022e1a:	10 3e       	cp.w	lr,r8
80022e1c:	e0 8b 00 07 	brhi	80022e2a <__avr32_udiv64+0x10c>
80022e20:	10 33       	cp.w	r3,r8
80022e22:	f7 bb 0b 01 	subhi	r11,1
80022e26:	f1 de eb 08 	addhi	r8,r8,lr
80022e2a:	f0 03 01 03 	sub	r3,r8,r3
80022e2e:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80022e32:	e6 05 0d 02 	divu	r2,r3,r5
80022e36:	ed e3 11 06 	or	r6,r6,r3<<0x10
80022e3a:	04 98       	mov	r8,r2
80022e3c:	e4 09 02 49 	mul	r9,r2,r9
80022e40:	0c 39       	cp.w	r9,r6
80022e42:	e0 88 00 0a 	brls	80022e56 <__avr32_udiv64+0x138>
80022e46:	20 18       	sub	r8,1
80022e48:	1c 06       	add	r6,lr
80022e4a:	0c 3e       	cp.w	lr,r6
80022e4c:	e0 8b 00 05 	brhi	80022e56 <__avr32_udiv64+0x138>
80022e50:	0c 39       	cp.w	r9,r6
80022e52:	f7 b8 0b 01 	subhi	r8,1
80022e56:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80022e5a:	16 9a       	mov	r10,r11
80022e5c:	18 9b       	mov	r11,r12
80022e5e:	2f ed       	sub	sp,-8
80022e60:	d8 32       	popm	r0-r7,pc
80022e62:	30 0b       	mov	r11,0
80022e64:	16 9c       	mov	r12,r11
80022e66:	16 9a       	mov	r10,r11
80022e68:	18 9b       	mov	r11,r12
80022e6a:	2f ed       	sub	sp,-8
80022e6c:	d8 32       	popm	r0-r7,pc
80022e6e:	f2 0c 09 45 	lsl	r5,r9,r12
80022e72:	f8 0e 11 20 	rsub	lr,r12,32
80022e76:	f0 0c 09 43 	lsl	r3,r8,r12
80022e7a:	f4 0e 0a 46 	lsr	r6,r10,lr
80022e7e:	f0 0e 0a 48 	lsr	r8,r8,lr
80022e82:	f6 0e 0a 4e 	lsr	lr,r11,lr
80022e86:	0a 48       	or	r8,r5
80022e88:	f0 01 16 10 	lsr	r1,r8,0x10
80022e8c:	fc 01 0d 04 	divu	r4,lr,r1
80022e90:	ee e5 ff f8 	st.d	r7[-8],r4
80022e94:	f6 0c 09 49 	lsl	r9,r11,r12
80022e98:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80022e9c:	ed e9 10 09 	or	r9,r6,r9
80022ea0:	08 96       	mov	r6,r4
80022ea2:	f2 0e 16 10 	lsr	lr,r9,0x10
80022ea6:	ee f4 ff f8 	ld.w	r4,r7[-8]
80022eaa:	ec 05 02 4b 	mul	r11,r6,r5
80022eae:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80022eb2:	1c 3b       	cp.w	r11,lr
80022eb4:	e0 88 00 07 	brls	80022ec2 <__avr32_udiv64+0x1a4>
80022eb8:	20 16       	sub	r6,1
80022eba:	10 0e       	add	lr,r8
80022ebc:	1c 38       	cp.w	r8,lr
80022ebe:	e0 88 00 6d 	brls	80022f98 <__avr32_udiv64+0x27a>
80022ec2:	16 1e       	sub	lr,r11
80022ec4:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80022ec8:	fc 01 0d 00 	divu	r0,lr,r1
80022ecc:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80022ed0:	00 9b       	mov	r11,r0
80022ed2:	e0 05 02 4e 	mul	lr,r0,r5
80022ed6:	12 3e       	cp.w	lr,r9
80022ed8:	e0 88 00 07 	brls	80022ee6 <__avr32_udiv64+0x1c8>
80022edc:	20 1b       	sub	r11,1
80022ede:	10 09       	add	r9,r8
80022ee0:	12 38       	cp.w	r8,r9
80022ee2:	e0 88 00 55 	brls	80022f8c <__avr32_udiv64+0x26e>
80022ee6:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80022eea:	1c 19       	sub	r9,lr
80022eec:	f6 03 06 42 	mulu.d	r2,r11,r3
80022ef0:	06 39       	cp.w	r9,r3
80022ef2:	c0 93       	brcs	80022f04 <__avr32_udiv64+0x1e6>
80022ef4:	5f 09       	sreq	r9
80022ef6:	f4 0c 09 4c 	lsl	r12,r10,r12
80022efa:	04 3c       	cp.w	r12,r2
80022efc:	5f 38       	srlo	r8
80022efe:	f3 e8 00 08 	and	r8,r9,r8
80022f02:	c0 20       	breq	80022f06 <__avr32_udiv64+0x1e8>
80022f04:	20 1b       	sub	r11,1
80022f06:	30 0c       	mov	r12,0
80022f08:	16 9a       	mov	r10,r11
80022f0a:	18 9b       	mov	r11,r12
80022f0c:	2f ed       	sub	sp,-8
80022f0e:	d8 32       	popm	r0-r7,pc
80022f10:	f6 08 09 49 	lsl	r9,r11,r8
80022f14:	fc 08 09 4e 	lsl	lr,lr,r8
80022f18:	f0 01 11 20 	rsub	r1,r8,32
80022f1c:	fc 05 16 10 	lsr	r5,lr,0x10
80022f20:	f4 01 0a 42 	lsr	r2,r10,r1
80022f24:	f6 01 0a 41 	lsr	r1,r11,r1
80022f28:	12 42       	or	r2,r9
80022f2a:	e2 05 0d 00 	divu	r0,r1,r5
80022f2e:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80022f32:	e4 06 16 10 	lsr	r6,r2,0x10
80022f36:	00 93       	mov	r3,r0
80022f38:	ed e1 11 06 	or	r6,r6,r1<<0x10
80022f3c:	e0 09 02 4c 	mul	r12,r0,r9
80022f40:	0c 3c       	cp.w	r12,r6
80022f42:	e0 88 00 07 	brls	80022f50 <__avr32_udiv64+0x232>
80022f46:	20 13       	sub	r3,1
80022f48:	1c 06       	add	r6,lr
80022f4a:	0c 3e       	cp.w	lr,r6
80022f4c:	e0 88 00 2c 	brls	80022fa4 <__avr32_udiv64+0x286>
80022f50:	ec 0c 01 01 	sub	r1,r6,r12
80022f54:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80022f58:	e2 05 0d 00 	divu	r0,r1,r5
80022f5c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80022f60:	00 9c       	mov	r12,r0
80022f62:	e0 09 02 41 	mul	r1,r0,r9
80022f66:	16 31       	cp.w	r1,r11
80022f68:	e0 88 00 0c 	brls	80022f80 <__avr32_udiv64+0x262>
80022f6c:	20 1c       	sub	r12,1
80022f6e:	1c 0b       	add	r11,lr
80022f70:	16 3e       	cp.w	lr,r11
80022f72:	e0 8b 00 07 	brhi	80022f80 <__avr32_udiv64+0x262>
80022f76:	16 31       	cp.w	r1,r11
80022f78:	f7 bc 0b 01 	subhi	r12,1
80022f7c:	f7 de eb 0b 	addhi	r11,r11,lr
80022f80:	f4 08 09 46 	lsl	r6,r10,r8
80022f84:	02 1b       	sub	r11,r1
80022f86:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80022f8a:	c3 ab       	rjmp	80022dfe <__avr32_udiv64+0xe0>
80022f8c:	12 3e       	cp.w	lr,r9
80022f8e:	f3 d8 eb 09 	addhi	r9,r9,r8
80022f92:	f7 bb 0b 01 	subhi	r11,1
80022f96:	ca 8b       	rjmp	80022ee6 <__avr32_udiv64+0x1c8>
80022f98:	1c 3b       	cp.w	r11,lr
80022f9a:	f7 b6 0b 01 	subhi	r6,1
80022f9e:	fd d8 eb 0e 	addhi	lr,lr,r8
80022fa2:	c9 0b       	rjmp	80022ec2 <__avr32_udiv64+0x1a4>
80022fa4:	0c 3c       	cp.w	r12,r6
80022fa6:	f7 b3 0b 01 	subhi	r3,1
80022faa:	ed de eb 06 	addhi	r6,r6,lr
80022fae:	cd 1b       	rjmp	80022f50 <__avr32_udiv64+0x232>

80022fb0 <__errno>:
80022fb0:	e0 68 01 7c 	mov	r8,380
80022fb4:	70 0c       	ld.w	r12,r8[0x0]
80022fb6:	2f 4c       	sub	r12,-12
80022fb8:	5e fc       	retal	r12
80022fba:	d7 03       	nop

80022fbc <free>:
80022fbc:	d4 01       	pushm	lr
80022fbe:	e0 68 01 7c 	mov	r8,380
80022fc2:	18 9b       	mov	r11,r12
80022fc4:	70 0c       	ld.w	r12,r8[0x0]
80022fc6:	e0 a0 03 b5 	rcall	80023730 <_free_r>
80022fca:	d8 02       	popm	pc

80022fcc <malloc>:
80022fcc:	d4 01       	pushm	lr
80022fce:	e0 68 01 7c 	mov	r8,380
80022fd2:	18 9b       	mov	r11,r12
80022fd4:	70 0c       	ld.w	r12,r8[0x0]
80022fd6:	c0 3c       	rcall	80022fdc <_malloc_r>
80022fd8:	d8 02       	popm	pc
80022fda:	d7 03       	nop

80022fdc <_malloc_r>:
80022fdc:	d4 31       	pushm	r0-r7,lr
80022fde:	f6 c7 ff f5 	sub	r7,r11,-11
80022fe2:	18 95       	mov	r5,r12
80022fe4:	59 67       	cp.w	r7,22
80022fe6:	f9 b7 08 10 	movls	r7,16
80022fea:	f9 b8 0b f8 	movhi	r8,-8
80022fee:	ef d8 eb 27 	andhi	r7,r7,r8
80022ff2:	16 37       	cp.w	r7,r11
80022ff4:	5f 38       	srlo	r8
80022ff6:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80022ffa:	c0 50       	breq	80023004 <_malloc_r+0x28>
80022ffc:	30 c8       	mov	r8,12
80022ffe:	99 38       	st.w	r12[0xc],r8
80023000:	e0 8f 01 f7 	bral	800233ee <_malloc_r+0x412>
80023004:	e0 a0 02 af 	rcall	80023562 <__malloc_lock>
80023008:	e0 47 01 f7 	cp.w	r7,503
8002300c:	e0 8b 00 1d 	brhi	80023046 <_malloc_r+0x6a>
80023010:	ee 03 16 03 	lsr	r3,r7,0x3
80023014:	e0 68 01 80 	mov	r8,384
80023018:	f0 03 00 38 	add	r8,r8,r3<<0x3
8002301c:	70 36       	ld.w	r6,r8[0xc]
8002301e:	10 36       	cp.w	r6,r8
80023020:	c0 61       	brne	8002302c <_malloc_r+0x50>
80023022:	ec c8 ff f8 	sub	r8,r6,-8
80023026:	70 36       	ld.w	r6,r8[0xc]
80023028:	10 36       	cp.w	r6,r8
8002302a:	c0 c0       	breq	80023042 <_malloc_r+0x66>
8002302c:	6c 18       	ld.w	r8,r6[0x4]
8002302e:	e0 18 ff fc 	andl	r8,0xfffc
80023032:	6c 3a       	ld.w	r10,r6[0xc]
80023034:	ec 08 00 09 	add	r9,r6,r8
80023038:	0a 9c       	mov	r12,r5
8002303a:	6c 28       	ld.w	r8,r6[0x8]
8002303c:	95 28       	st.w	r10[0x8],r8
8002303e:	91 3a       	st.w	r8[0xc],r10
80023040:	c4 88       	rjmp	800230d0 <_malloc_r+0xf4>
80023042:	2f e3       	sub	r3,-2
80023044:	c4 e8       	rjmp	800230e0 <_malloc_r+0x104>
80023046:	ee 08 16 09 	lsr	r8,r7,0x9
8002304a:	c0 41       	brne	80023052 <_malloc_r+0x76>
8002304c:	ee 03 16 03 	lsr	r3,r7,0x3
80023050:	c2 78       	rjmp	8002309e <_malloc_r+0xc2>
80023052:	58 48       	cp.w	r8,4
80023054:	e0 8b 00 06 	brhi	80023060 <_malloc_r+0x84>
80023058:	ee 03 16 06 	lsr	r3,r7,0x6
8002305c:	2c 83       	sub	r3,-56
8002305e:	c2 08       	rjmp	8002309e <_malloc_r+0xc2>
80023060:	59 48       	cp.w	r8,20
80023062:	e0 8b 00 05 	brhi	8002306c <_malloc_r+0x90>
80023066:	f0 c3 ff a5 	sub	r3,r8,-91
8002306a:	c1 a8       	rjmp	8002309e <_malloc_r+0xc2>
8002306c:	e0 48 00 54 	cp.w	r8,84
80023070:	e0 8b 00 06 	brhi	8002307c <_malloc_r+0xa0>
80023074:	ee 03 16 0c 	lsr	r3,r7,0xc
80023078:	29 23       	sub	r3,-110
8002307a:	c1 28       	rjmp	8002309e <_malloc_r+0xc2>
8002307c:	e0 48 01 54 	cp.w	r8,340
80023080:	e0 8b 00 06 	brhi	8002308c <_malloc_r+0xb0>
80023084:	ee 03 16 0f 	lsr	r3,r7,0xf
80023088:	28 93       	sub	r3,-119
8002308a:	c0 a8       	rjmp	8002309e <_malloc_r+0xc2>
8002308c:	ee 03 16 12 	lsr	r3,r7,0x12
80023090:	e0 48 05 54 	cp.w	r8,1364
80023094:	e0 88 00 04 	brls	8002309c <_malloc_r+0xc0>
80023098:	37 e3       	mov	r3,126
8002309a:	c0 28       	rjmp	8002309e <_malloc_r+0xc2>
8002309c:	28 43       	sub	r3,-124
8002309e:	e0 6a 01 80 	mov	r10,384
800230a2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800230a6:	74 36       	ld.w	r6,r10[0xc]
800230a8:	c1 98       	rjmp	800230da <_malloc_r+0xfe>
800230aa:	6c 19       	ld.w	r9,r6[0x4]
800230ac:	e0 19 ff fc 	andl	r9,0xfffc
800230b0:	f2 07 01 0b 	sub	r11,r9,r7
800230b4:	58 fb       	cp.w	r11,15
800230b6:	e0 8a 00 04 	brle	800230be <_malloc_r+0xe2>
800230ba:	20 13       	sub	r3,1
800230bc:	c1 18       	rjmp	800230de <_malloc_r+0x102>
800230be:	6c 38       	ld.w	r8,r6[0xc]
800230c0:	58 0b       	cp.w	r11,0
800230c2:	c0 b5       	brlt	800230d8 <_malloc_r+0xfc>
800230c4:	6c 2a       	ld.w	r10,r6[0x8]
800230c6:	ec 09 00 09 	add	r9,r6,r9
800230ca:	0a 9c       	mov	r12,r5
800230cc:	91 2a       	st.w	r8[0x8],r10
800230ce:	95 38       	st.w	r10[0xc],r8
800230d0:	72 18       	ld.w	r8,r9[0x4]
800230d2:	a1 a8       	sbr	r8,0x0
800230d4:	93 18       	st.w	r9[0x4],r8
800230d6:	cb d8       	rjmp	80023250 <_malloc_r+0x274>
800230d8:	10 96       	mov	r6,r8
800230da:	14 36       	cp.w	r6,r10
800230dc:	ce 71       	brne	800230aa <_malloc_r+0xce>
800230de:	2f f3       	sub	r3,-1
800230e0:	e0 6a 01 80 	mov	r10,384
800230e4:	f4 cc ff f8 	sub	r12,r10,-8
800230e8:	78 26       	ld.w	r6,r12[0x8]
800230ea:	18 36       	cp.w	r6,r12
800230ec:	c6 d0       	breq	800231c6 <_malloc_r+0x1ea>
800230ee:	6c 19       	ld.w	r9,r6[0x4]
800230f0:	e0 19 ff fc 	andl	r9,0xfffc
800230f4:	f2 07 01 08 	sub	r8,r9,r7
800230f8:	58 f8       	cp.w	r8,15
800230fa:	e0 89 00 90 	brgt	8002321a <_malloc_r+0x23e>
800230fe:	99 3c       	st.w	r12[0xc],r12
80023100:	99 2c       	st.w	r12[0x8],r12
80023102:	58 08       	cp.w	r8,0
80023104:	c0 55       	brlt	8002310e <_malloc_r+0x132>
80023106:	ec 09 00 09 	add	r9,r6,r9
8002310a:	0a 9c       	mov	r12,r5
8002310c:	ce 2b       	rjmp	800230d0 <_malloc_r+0xf4>
8002310e:	e0 49 01 ff 	cp.w	r9,511
80023112:	e0 8b 00 13 	brhi	80023138 <_malloc_r+0x15c>
80023116:	a3 99       	lsr	r9,0x3
80023118:	f4 09 00 38 	add	r8,r10,r9<<0x3
8002311c:	70 2b       	ld.w	r11,r8[0x8]
8002311e:	8d 38       	st.w	r6[0xc],r8
80023120:	8d 2b       	st.w	r6[0x8],r11
80023122:	97 36       	st.w	r11[0xc],r6
80023124:	91 26       	st.w	r8[0x8],r6
80023126:	a3 49       	asr	r9,0x2
80023128:	74 18       	ld.w	r8,r10[0x4]
8002312a:	30 1b       	mov	r11,1
8002312c:	f6 09 09 49 	lsl	r9,r11,r9
80023130:	f1 e9 10 09 	or	r9,r8,r9
80023134:	95 19       	st.w	r10[0x4],r9
80023136:	c4 88       	rjmp	800231c6 <_malloc_r+0x1ea>
80023138:	f2 08 16 09 	lsr	r8,r9,0x9
8002313c:	58 48       	cp.w	r8,4
8002313e:	e0 8b 00 07 	brhi	8002314c <_malloc_r+0x170>
80023142:	f2 0a 16 06 	lsr	r10,r9,0x6
80023146:	2c 8a       	sub	r10,-56
80023148:	c2 18       	rjmp	8002318a <_malloc_r+0x1ae>
8002314a:	d7 03       	nop
8002314c:	59 48       	cp.w	r8,20
8002314e:	e0 8b 00 05 	brhi	80023158 <_malloc_r+0x17c>
80023152:	f0 ca ff a5 	sub	r10,r8,-91
80023156:	c1 a8       	rjmp	8002318a <_malloc_r+0x1ae>
80023158:	e0 48 00 54 	cp.w	r8,84
8002315c:	e0 8b 00 06 	brhi	80023168 <_malloc_r+0x18c>
80023160:	f2 0a 16 0c 	lsr	r10,r9,0xc
80023164:	29 2a       	sub	r10,-110
80023166:	c1 28       	rjmp	8002318a <_malloc_r+0x1ae>
80023168:	e0 48 01 54 	cp.w	r8,340
8002316c:	e0 8b 00 06 	brhi	80023178 <_malloc_r+0x19c>
80023170:	f2 0a 16 0f 	lsr	r10,r9,0xf
80023174:	28 9a       	sub	r10,-119
80023176:	c0 a8       	rjmp	8002318a <_malloc_r+0x1ae>
80023178:	f2 0a 16 12 	lsr	r10,r9,0x12
8002317c:	e0 48 05 54 	cp.w	r8,1364
80023180:	e0 88 00 04 	brls	80023188 <_malloc_r+0x1ac>
80023184:	37 ea       	mov	r10,126
80023186:	c0 28       	rjmp	8002318a <_malloc_r+0x1ae>
80023188:	28 4a       	sub	r10,-124
8002318a:	e0 6b 01 80 	mov	r11,384
8002318e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80023192:	68 28       	ld.w	r8,r4[0x8]
80023194:	08 38       	cp.w	r8,r4
80023196:	c0 e1       	brne	800231b2 <_malloc_r+0x1d6>
80023198:	76 19       	ld.w	r9,r11[0x4]
8002319a:	a3 4a       	asr	r10,0x2
8002319c:	30 1e       	mov	lr,1
8002319e:	fc 0a 09 4a 	lsl	r10,lr,r10
800231a2:	f3 ea 10 0a 	or	r10,r9,r10
800231a6:	10 99       	mov	r9,r8
800231a8:	97 1a       	st.w	r11[0x4],r10
800231aa:	c0 a8       	rjmp	800231be <_malloc_r+0x1e2>
800231ac:	70 28       	ld.w	r8,r8[0x8]
800231ae:	08 38       	cp.w	r8,r4
800231b0:	c0 60       	breq	800231bc <_malloc_r+0x1e0>
800231b2:	70 1a       	ld.w	r10,r8[0x4]
800231b4:	e0 1a ff fc 	andl	r10,0xfffc
800231b8:	14 39       	cp.w	r9,r10
800231ba:	cf 93       	brcs	800231ac <_malloc_r+0x1d0>
800231bc:	70 39       	ld.w	r9,r8[0xc]
800231be:	8d 39       	st.w	r6[0xc],r9
800231c0:	8d 28       	st.w	r6[0x8],r8
800231c2:	91 36       	st.w	r8[0xc],r6
800231c4:	93 26       	st.w	r9[0x8],r6
800231c6:	e6 08 14 02 	asr	r8,r3,0x2
800231ca:	30 1b       	mov	r11,1
800231cc:	e0 64 01 80 	mov	r4,384
800231d0:	f6 08 09 4b 	lsl	r11,r11,r8
800231d4:	68 18       	ld.w	r8,r4[0x4]
800231d6:	10 3b       	cp.w	r11,r8
800231d8:	e0 8b 00 6a 	brhi	800232ac <_malloc_r+0x2d0>
800231dc:	f7 e8 00 09 	and	r9,r11,r8
800231e0:	c0 b1       	brne	800231f6 <_malloc_r+0x21a>
800231e2:	e0 13 ff fc 	andl	r3,0xfffc
800231e6:	a1 7b       	lsl	r11,0x1
800231e8:	2f c3       	sub	r3,-4
800231ea:	c0 38       	rjmp	800231f0 <_malloc_r+0x214>
800231ec:	2f c3       	sub	r3,-4
800231ee:	a1 7b       	lsl	r11,0x1
800231f0:	f7 e8 00 09 	and	r9,r11,r8
800231f4:	cf c0       	breq	800231ec <_malloc_r+0x210>
800231f6:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800231fa:	06 92       	mov	r2,r3
800231fc:	1c 91       	mov	r1,lr
800231fe:	62 36       	ld.w	r6,r1[0xc]
80023200:	c2 d8       	rjmp	8002325a <_malloc_r+0x27e>
80023202:	6c 1a       	ld.w	r10,r6[0x4]
80023204:	e0 1a ff fc 	andl	r10,0xfffc
80023208:	f4 07 01 08 	sub	r8,r10,r7
8002320c:	58 f8       	cp.w	r8,15
8002320e:	e0 8a 00 15 	brle	80023238 <_malloc_r+0x25c>
80023212:	6c 3a       	ld.w	r10,r6[0xc]
80023214:	6c 29       	ld.w	r9,r6[0x8]
80023216:	95 29       	st.w	r10[0x8],r9
80023218:	93 3a       	st.w	r9[0xc],r10
8002321a:	0e 99       	mov	r9,r7
8002321c:	ec 07 00 07 	add	r7,r6,r7
80023220:	a1 a9       	sbr	r9,0x0
80023222:	99 37       	st.w	r12[0xc],r7
80023224:	99 27       	st.w	r12[0x8],r7
80023226:	8d 19       	st.w	r6[0x4],r9
80023228:	ee 08 09 08 	st.w	r7[r8],r8
8002322c:	8f 2c       	st.w	r7[0x8],r12
8002322e:	8f 3c       	st.w	r7[0xc],r12
80023230:	a1 a8       	sbr	r8,0x0
80023232:	0a 9c       	mov	r12,r5
80023234:	8f 18       	st.w	r7[0x4],r8
80023236:	c0 d8       	rjmp	80023250 <_malloc_r+0x274>
80023238:	6c 39       	ld.w	r9,r6[0xc]
8002323a:	58 08       	cp.w	r8,0
8002323c:	c0 e5       	brlt	80023258 <_malloc_r+0x27c>
8002323e:	ec 0a 00 0a 	add	r10,r6,r10
80023242:	74 18       	ld.w	r8,r10[0x4]
80023244:	a1 a8       	sbr	r8,0x0
80023246:	0a 9c       	mov	r12,r5
80023248:	95 18       	st.w	r10[0x4],r8
8002324a:	6c 28       	ld.w	r8,r6[0x8]
8002324c:	93 28       	st.w	r9[0x8],r8
8002324e:	91 39       	st.w	r8[0xc],r9
80023250:	c8 ad       	rcall	80023564 <__malloc_unlock>
80023252:	ec cc ff f8 	sub	r12,r6,-8
80023256:	d8 32       	popm	r0-r7,pc
80023258:	12 96       	mov	r6,r9
8002325a:	02 36       	cp.w	r6,r1
8002325c:	cd 31       	brne	80023202 <_malloc_r+0x226>
8002325e:	2f f2       	sub	r2,-1
80023260:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80023264:	c0 30       	breq	8002326a <_malloc_r+0x28e>
80023266:	2f 81       	sub	r1,-8
80023268:	cc bb       	rjmp	800231fe <_malloc_r+0x222>
8002326a:	1c 98       	mov	r8,lr
8002326c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80023270:	c0 81       	brne	80023280 <_malloc_r+0x2a4>
80023272:	68 19       	ld.w	r9,r4[0x4]
80023274:	f6 08 11 ff 	rsub	r8,r11,-1
80023278:	f3 e8 00 08 	and	r8,r9,r8
8002327c:	89 18       	st.w	r4[0x4],r8
8002327e:	c0 78       	rjmp	8002328c <_malloc_r+0x2b0>
80023280:	f0 c9 00 08 	sub	r9,r8,8
80023284:	20 13       	sub	r3,1
80023286:	70 08       	ld.w	r8,r8[0x0]
80023288:	12 38       	cp.w	r8,r9
8002328a:	cf 10       	breq	8002326c <_malloc_r+0x290>
8002328c:	a1 7b       	lsl	r11,0x1
8002328e:	68 18       	ld.w	r8,r4[0x4]
80023290:	10 3b       	cp.w	r11,r8
80023292:	e0 8b 00 0d 	brhi	800232ac <_malloc_r+0x2d0>
80023296:	58 0b       	cp.w	r11,0
80023298:	c0 a0       	breq	800232ac <_malloc_r+0x2d0>
8002329a:	04 93       	mov	r3,r2
8002329c:	c0 38       	rjmp	800232a2 <_malloc_r+0x2c6>
8002329e:	2f c3       	sub	r3,-4
800232a0:	a1 7b       	lsl	r11,0x1
800232a2:	f7 e8 00 09 	and	r9,r11,r8
800232a6:	ca 81       	brne	800231f6 <_malloc_r+0x21a>
800232a8:	cf bb       	rjmp	8002329e <_malloc_r+0x2c2>
800232aa:	d7 03       	nop
800232ac:	68 23       	ld.w	r3,r4[0x8]
800232ae:	66 12       	ld.w	r2,r3[0x4]
800232b0:	e0 12 ff fc 	andl	r2,0xfffc
800232b4:	0e 32       	cp.w	r2,r7
800232b6:	5f 39       	srlo	r9
800232b8:	e4 07 01 08 	sub	r8,r2,r7
800232bc:	58 f8       	cp.w	r8,15
800232be:	5f aa       	srle	r10
800232c0:	f5 e9 10 09 	or	r9,r10,r9
800232c4:	e0 80 00 96 	breq	800233f0 <_malloc_r+0x414>
800232c8:	e0 68 2a 5c 	mov	r8,10844
800232cc:	70 01       	ld.w	r1,r8[0x0]
800232ce:	e0 68 05 8c 	mov	r8,1420
800232d2:	2f 01       	sub	r1,-16
800232d4:	70 08       	ld.w	r8,r8[0x0]
800232d6:	0e 01       	add	r1,r7
800232d8:	5b f8       	cp.w	r8,-1
800232da:	c0 40       	breq	800232e2 <_malloc_r+0x306>
800232dc:	28 11       	sub	r1,-127
800232de:	e0 11 ff 80 	andl	r1,0xff80
800232e2:	02 9b       	mov	r11,r1
800232e4:	0a 9c       	mov	r12,r5
800232e6:	c4 1d       	rcall	80023568 <_sbrk_r>
800232e8:	18 96       	mov	r6,r12
800232ea:	5b fc       	cp.w	r12,-1
800232ec:	c7 30       	breq	800233d2 <_malloc_r+0x3f6>
800232ee:	e6 02 00 08 	add	r8,r3,r2
800232f2:	10 3c       	cp.w	r12,r8
800232f4:	c0 32       	brcc	800232fa <_malloc_r+0x31e>
800232f6:	08 33       	cp.w	r3,r4
800232f8:	c6 d1       	brne	800233d2 <_malloc_r+0x3f6>
800232fa:	e0 6a 2a 60 	mov	r10,10848
800232fe:	74 09       	ld.w	r9,r10[0x0]
80023300:	e2 09 00 09 	add	r9,r1,r9
80023304:	95 09       	st.w	r10[0x0],r9
80023306:	10 36       	cp.w	r6,r8
80023308:	c0 a1       	brne	8002331c <_malloc_r+0x340>
8002330a:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8002330e:	c0 71       	brne	8002331c <_malloc_r+0x340>
80023310:	e2 02 00 02 	add	r2,r1,r2
80023314:	68 28       	ld.w	r8,r4[0x8]
80023316:	a1 a2       	sbr	r2,0x0
80023318:	91 12       	st.w	r8[0x4],r2
8002331a:	c4 d8       	rjmp	800233b4 <_malloc_r+0x3d8>
8002331c:	e0 6a 05 8c 	mov	r10,1420
80023320:	74 0b       	ld.w	r11,r10[0x0]
80023322:	5b fb       	cp.w	r11,-1
80023324:	c0 31       	brne	8002332a <_malloc_r+0x34e>
80023326:	95 06       	st.w	r10[0x0],r6
80023328:	c0 78       	rjmp	80023336 <_malloc_r+0x35a>
8002332a:	ec 09 00 09 	add	r9,r6,r9
8002332e:	e0 6a 2a 60 	mov	r10,10848
80023332:	10 19       	sub	r9,r8
80023334:	95 09       	st.w	r10[0x0],r9
80023336:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8002333a:	f0 09 11 08 	rsub	r9,r8,8
8002333e:	58 08       	cp.w	r8,0
80023340:	f2 08 17 10 	movne	r8,r9
80023344:	ed d8 e1 06 	addne	r6,r6,r8
80023348:	28 08       	sub	r8,-128
8002334a:	ec 01 00 01 	add	r1,r6,r1
8002334e:	0a 9c       	mov	r12,r5
80023350:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80023354:	f0 01 01 01 	sub	r1,r8,r1
80023358:	02 9b       	mov	r11,r1
8002335a:	c0 7d       	rcall	80023568 <_sbrk_r>
8002335c:	e0 68 2a 60 	mov	r8,10848
80023360:	5b fc       	cp.w	r12,-1
80023362:	ec 0c 17 00 	moveq	r12,r6
80023366:	f9 b1 00 00 	moveq	r1,0
8002336a:	70 09       	ld.w	r9,r8[0x0]
8002336c:	0c 1c       	sub	r12,r6
8002336e:	89 26       	st.w	r4[0x8],r6
80023370:	02 0c       	add	r12,r1
80023372:	12 01       	add	r1,r9
80023374:	a1 ac       	sbr	r12,0x0
80023376:	91 01       	st.w	r8[0x0],r1
80023378:	8d 1c       	st.w	r6[0x4],r12
8002337a:	08 33       	cp.w	r3,r4
8002337c:	c1 c0       	breq	800233b4 <_malloc_r+0x3d8>
8002337e:	58 f2       	cp.w	r2,15
80023380:	e0 8b 00 05 	brhi	8002338a <_malloc_r+0x3ae>
80023384:	30 18       	mov	r8,1
80023386:	8d 18       	st.w	r6[0x4],r8
80023388:	c2 58       	rjmp	800233d2 <_malloc_r+0x3f6>
8002338a:	30 59       	mov	r9,5
8002338c:	20 c2       	sub	r2,12
8002338e:	e0 12 ff f8 	andl	r2,0xfff8
80023392:	e6 02 00 08 	add	r8,r3,r2
80023396:	91 29       	st.w	r8[0x8],r9
80023398:	91 19       	st.w	r8[0x4],r9
8002339a:	66 18       	ld.w	r8,r3[0x4]
8002339c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800233a0:	e5 e8 10 08 	or	r8,r2,r8
800233a4:	87 18       	st.w	r3[0x4],r8
800233a6:	58 f2       	cp.w	r2,15
800233a8:	e0 88 00 06 	brls	800233b4 <_malloc_r+0x3d8>
800233ac:	e6 cb ff f8 	sub	r11,r3,-8
800233b0:	0a 9c       	mov	r12,r5
800233b2:	cb fd       	rcall	80023730 <_free_r>
800233b4:	e0 69 2a 58 	mov	r9,10840
800233b8:	72 0a       	ld.w	r10,r9[0x0]
800233ba:	e0 68 2a 60 	mov	r8,10848
800233be:	70 08       	ld.w	r8,r8[0x0]
800233c0:	14 38       	cp.w	r8,r10
800233c2:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800233c6:	e0 69 2a 54 	mov	r9,10836
800233ca:	72 0a       	ld.w	r10,r9[0x0]
800233cc:	14 38       	cp.w	r8,r10
800233ce:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800233d2:	68 28       	ld.w	r8,r4[0x8]
800233d4:	70 18       	ld.w	r8,r8[0x4]
800233d6:	e0 18 ff fc 	andl	r8,0xfffc
800233da:	0e 38       	cp.w	r8,r7
800233dc:	5f 39       	srlo	r9
800233de:	0e 18       	sub	r8,r7
800233e0:	58 f8       	cp.w	r8,15
800233e2:	5f aa       	srle	r10
800233e4:	f5 e9 10 09 	or	r9,r10,r9
800233e8:	c0 40       	breq	800233f0 <_malloc_r+0x414>
800233ea:	0a 9c       	mov	r12,r5
800233ec:	cb cc       	rcall	80023564 <__malloc_unlock>
800233ee:	d8 3a       	popm	r0-r7,pc,r12=0
800233f0:	68 26       	ld.w	r6,r4[0x8]
800233f2:	a1 a8       	sbr	r8,0x0
800233f4:	0e 99       	mov	r9,r7
800233f6:	a1 a9       	sbr	r9,0x0
800233f8:	8d 19       	st.w	r6[0x4],r9
800233fa:	ec 07 00 07 	add	r7,r6,r7
800233fe:	0a 9c       	mov	r12,r5
80023400:	89 27       	st.w	r4[0x8],r7
80023402:	8f 18       	st.w	r7[0x4],r8
80023404:	cb 0c       	rcall	80023564 <__malloc_unlock>
80023406:	ec cc ff f8 	sub	r12,r6,-8
8002340a:	d8 32       	popm	r0-r7,pc

8002340c <memcpy>:
8002340c:	58 8a       	cp.w	r10,8
8002340e:	c2 f5       	brlt	8002346c <memcpy+0x60>
80023410:	f9 eb 10 09 	or	r9,r12,r11
80023414:	e2 19 00 03 	andl	r9,0x3,COH
80023418:	e0 81 00 97 	brne	80023546 <memcpy+0x13a>
8002341c:	e0 4a 00 20 	cp.w	r10,32
80023420:	c3 b4       	brge	80023496 <memcpy+0x8a>
80023422:	f4 08 14 02 	asr	r8,r10,0x2
80023426:	f0 09 11 08 	rsub	r9,r8,8
8002342a:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8002342e:	76 69       	ld.w	r9,r11[0x18]
80023430:	99 69       	st.w	r12[0x18],r9
80023432:	76 59       	ld.w	r9,r11[0x14]
80023434:	99 59       	st.w	r12[0x14],r9
80023436:	76 49       	ld.w	r9,r11[0x10]
80023438:	99 49       	st.w	r12[0x10],r9
8002343a:	76 39       	ld.w	r9,r11[0xc]
8002343c:	99 39       	st.w	r12[0xc],r9
8002343e:	76 29       	ld.w	r9,r11[0x8]
80023440:	99 29       	st.w	r12[0x8],r9
80023442:	76 19       	ld.w	r9,r11[0x4]
80023444:	99 19       	st.w	r12[0x4],r9
80023446:	76 09       	ld.w	r9,r11[0x0]
80023448:	99 09       	st.w	r12[0x0],r9
8002344a:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8002344e:	f8 08 00 28 	add	r8,r12,r8<<0x2
80023452:	e0 1a 00 03 	andl	r10,0x3
80023456:	f4 0a 11 04 	rsub	r10,r10,4
8002345a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8002345e:	17 a9       	ld.ub	r9,r11[0x2]
80023460:	b0 a9       	st.b	r8[0x2],r9
80023462:	17 99       	ld.ub	r9,r11[0x1]
80023464:	b0 99       	st.b	r8[0x1],r9
80023466:	17 89       	ld.ub	r9,r11[0x0]
80023468:	b0 89       	st.b	r8[0x0],r9
8002346a:	5e fc       	retal	r12
8002346c:	f4 0a 11 09 	rsub	r10,r10,9
80023470:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80023474:	17 f9       	ld.ub	r9,r11[0x7]
80023476:	b8 f9       	st.b	r12[0x7],r9
80023478:	17 e9       	ld.ub	r9,r11[0x6]
8002347a:	b8 e9       	st.b	r12[0x6],r9
8002347c:	17 d9       	ld.ub	r9,r11[0x5]
8002347e:	b8 d9       	st.b	r12[0x5],r9
80023480:	17 c9       	ld.ub	r9,r11[0x4]
80023482:	b8 c9       	st.b	r12[0x4],r9
80023484:	17 b9       	ld.ub	r9,r11[0x3]
80023486:	b8 b9       	st.b	r12[0x3],r9
80023488:	17 a9       	ld.ub	r9,r11[0x2]
8002348a:	b8 a9       	st.b	r12[0x2],r9
8002348c:	17 99       	ld.ub	r9,r11[0x1]
8002348e:	b8 99       	st.b	r12[0x1],r9
80023490:	17 89       	ld.ub	r9,r11[0x0]
80023492:	b8 89       	st.b	r12[0x0],r9
80023494:	5e fc       	retal	r12
80023496:	eb cd 40 c0 	pushm	r6-r7,lr
8002349a:	18 99       	mov	r9,r12
8002349c:	22 0a       	sub	r10,32
8002349e:	b7 07       	ld.d	r6,r11++
800234a0:	b3 26       	st.d	r9++,r6
800234a2:	b7 07       	ld.d	r6,r11++
800234a4:	b3 26       	st.d	r9++,r6
800234a6:	b7 07       	ld.d	r6,r11++
800234a8:	b3 26       	st.d	r9++,r6
800234aa:	b7 07       	ld.d	r6,r11++
800234ac:	b3 26       	st.d	r9++,r6
800234ae:	22 0a       	sub	r10,32
800234b0:	cf 74       	brge	8002349e <memcpy+0x92>
800234b2:	2f 0a       	sub	r10,-16
800234b4:	c0 65       	brlt	800234c0 <memcpy+0xb4>
800234b6:	b7 07       	ld.d	r6,r11++
800234b8:	b3 26       	st.d	r9++,r6
800234ba:	b7 07       	ld.d	r6,r11++
800234bc:	b3 26       	st.d	r9++,r6
800234be:	21 0a       	sub	r10,16
800234c0:	5c 3a       	neg	r10
800234c2:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800234c6:	d7 03       	nop
800234c8:	d7 03       	nop
800234ca:	f7 36 00 0e 	ld.ub	r6,r11[14]
800234ce:	f3 66 00 0e 	st.b	r9[14],r6
800234d2:	f7 36 00 0d 	ld.ub	r6,r11[13]
800234d6:	f3 66 00 0d 	st.b	r9[13],r6
800234da:	f7 36 00 0c 	ld.ub	r6,r11[12]
800234de:	f3 66 00 0c 	st.b	r9[12],r6
800234e2:	f7 36 00 0b 	ld.ub	r6,r11[11]
800234e6:	f3 66 00 0b 	st.b	r9[11],r6
800234ea:	f7 36 00 0a 	ld.ub	r6,r11[10]
800234ee:	f3 66 00 0a 	st.b	r9[10],r6
800234f2:	f7 36 00 09 	ld.ub	r6,r11[9]
800234f6:	f3 66 00 09 	st.b	r9[9],r6
800234fa:	f7 36 00 08 	ld.ub	r6,r11[8]
800234fe:	f3 66 00 08 	st.b	r9[8],r6
80023502:	f7 36 00 07 	ld.ub	r6,r11[7]
80023506:	f3 66 00 07 	st.b	r9[7],r6
8002350a:	f7 36 00 06 	ld.ub	r6,r11[6]
8002350e:	f3 66 00 06 	st.b	r9[6],r6
80023512:	f7 36 00 05 	ld.ub	r6,r11[5]
80023516:	f3 66 00 05 	st.b	r9[5],r6
8002351a:	f7 36 00 04 	ld.ub	r6,r11[4]
8002351e:	f3 66 00 04 	st.b	r9[4],r6
80023522:	f7 36 00 03 	ld.ub	r6,r11[3]
80023526:	f3 66 00 03 	st.b	r9[3],r6
8002352a:	f7 36 00 02 	ld.ub	r6,r11[2]
8002352e:	f3 66 00 02 	st.b	r9[2],r6
80023532:	f7 36 00 01 	ld.ub	r6,r11[1]
80023536:	f3 66 00 01 	st.b	r9[1],r6
8002353a:	f7 36 00 00 	ld.ub	r6,r11[0]
8002353e:	f3 66 00 00 	st.b	r9[0],r6
80023542:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023546:	20 1a       	sub	r10,1
80023548:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8002354c:	f8 0a 0b 09 	st.b	r12[r10],r9
80023550:	cf b1       	brne	80023546 <memcpy+0x13a>
80023552:	5e fc       	retal	r12

80023554 <memset>:
80023554:	18 98       	mov	r8,r12
80023556:	c0 38       	rjmp	8002355c <memset+0x8>
80023558:	10 cb       	st.b	r8++,r11
8002355a:	20 1a       	sub	r10,1
8002355c:	58 0a       	cp.w	r10,0
8002355e:	cf d1       	brne	80023558 <memset+0x4>
80023560:	5e fc       	retal	r12

80023562 <__malloc_lock>:
80023562:	5e fc       	retal	r12

80023564 <__malloc_unlock>:
80023564:	5e fc       	retal	r12
80023566:	d7 03       	nop

80023568 <_sbrk_r>:
80023568:	d4 21       	pushm	r4-r7,lr
8002356a:	30 08       	mov	r8,0
8002356c:	18 97       	mov	r7,r12
8002356e:	e0 66 33 04 	mov	r6,13060
80023572:	16 9c       	mov	r12,r11
80023574:	8d 08       	st.w	r6[0x0],r8
80023576:	c7 bc       	rcall	8002366c <_sbrk>
80023578:	5b fc       	cp.w	r12,-1
8002357a:	c0 51       	brne	80023584 <_sbrk_r+0x1c>
8002357c:	6c 08       	ld.w	r8,r6[0x0]
8002357e:	58 08       	cp.w	r8,0
80023580:	ef f8 1a 03 	st.wne	r7[0xc],r8
80023584:	d8 22       	popm	r4-r7,pc
80023586:	d7 03       	nop

80023588 <strcmp>:
80023588:	f9 eb 10 0a 	or	r10,r12,r11
8002358c:	e2 1a 00 03 	andl	r10,0x3,COH
80023590:	c3 41       	brne	800235f8 <strcmp+0x70>
80023592:	78 0a       	ld.w	r10,r12[0x0]
80023594:	76 09       	ld.w	r9,r11[0x0]
80023596:	5c ea       	tnbz	r10
80023598:	c1 70       	breq	800235c6 <strcmp+0x3e>
8002359a:	12 3a       	cp.w	r10,r9
8002359c:	c1 51       	brne	800235c6 <strcmp+0x3e>
8002359e:	78 1a       	ld.w	r10,r12[0x4]
800235a0:	76 19       	ld.w	r9,r11[0x4]
800235a2:	5c ea       	tnbz	r10
800235a4:	c1 10       	breq	800235c6 <strcmp+0x3e>
800235a6:	12 3a       	cp.w	r10,r9
800235a8:	c0 f1       	brne	800235c6 <strcmp+0x3e>
800235aa:	78 2a       	ld.w	r10,r12[0x8]
800235ac:	76 29       	ld.w	r9,r11[0x8]
800235ae:	5c ea       	tnbz	r10
800235b0:	c0 b0       	breq	800235c6 <strcmp+0x3e>
800235b2:	12 3a       	cp.w	r10,r9
800235b4:	c0 91       	brne	800235c6 <strcmp+0x3e>
800235b6:	78 3a       	ld.w	r10,r12[0xc]
800235b8:	76 39       	ld.w	r9,r11[0xc]
800235ba:	5c ea       	tnbz	r10
800235bc:	c0 50       	breq	800235c6 <strcmp+0x3e>
800235be:	2f 0c       	sub	r12,-16
800235c0:	2f 0b       	sub	r11,-16
800235c2:	12 3a       	cp.w	r10,r9
800235c4:	ce 70       	breq	80023592 <strcmp+0xa>
800235c6:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
800235ca:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
800235ce:	5e 0c       	reteq	r12
800235d0:	16 1c       	sub	r12,r11
800235d2:	5e 1c       	retne	r12
800235d4:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
800235d8:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
800235dc:	5e 0c       	reteq	r12
800235de:	16 1c       	sub	r12,r11
800235e0:	5e 1c       	retne	r12
800235e2:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
800235e6:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
800235ea:	5e 0c       	reteq	r12
800235ec:	16 1c       	sub	r12,r11
800235ee:	5e 1c       	retne	r12
800235f0:	5c 5a       	castu.b	r10
800235f2:	5c 59       	castu.b	r9
800235f4:	12 1a       	sub	r10,r9
800235f6:	5e fa       	retal	r10
800235f8:	17 8a       	ld.ub	r10,r11[0x0]
800235fa:	19 89       	ld.ub	r9,r12[0x0]
800235fc:	58 0a       	cp.w	r10,0
800235fe:	5e 09       	reteq	r9
80023600:	14 19       	sub	r9,r10
80023602:	5e 19       	retne	r9
80023604:	17 9a       	ld.ub	r10,r11[0x1]
80023606:	19 99       	ld.ub	r9,r12[0x1]
80023608:	58 0a       	cp.w	r10,0
8002360a:	5e 09       	reteq	r9
8002360c:	14 19       	sub	r9,r10
8002360e:	5e 19       	retne	r9
80023610:	17 aa       	ld.ub	r10,r11[0x2]
80023612:	19 a9       	ld.ub	r9,r12[0x2]
80023614:	58 0a       	cp.w	r10,0
80023616:	5e 09       	reteq	r9
80023618:	14 19       	sub	r9,r10
8002361a:	5e 19       	retne	r9
8002361c:	17 ba       	ld.ub	r10,r11[0x3]
8002361e:	19 b9       	ld.ub	r9,r12[0x3]
80023620:	58 0a       	cp.w	r10,0
80023622:	5e 09       	reteq	r9
80023624:	14 19       	sub	r9,r10
80023626:	5e 19       	retne	r9
80023628:	2f cb       	sub	r11,-4
8002362a:	2f cc       	sub	r12,-4
8002362c:	ce 6b       	rjmp	800235f8 <strcmp+0x70>
8002362e:	d7 03       	nop

80023630 <strlen>:
80023630:	30 09       	mov	r9,0
80023632:	18 98       	mov	r8,r12
80023634:	c0 28       	rjmp	80023638 <strlen+0x8>
80023636:	2f f8       	sub	r8,-1
80023638:	11 8a       	ld.ub	r10,r8[0x0]
8002363a:	f2 0a 18 00 	cp.b	r10,r9
8002363e:	cf c1       	brne	80023636 <strlen+0x6>
80023640:	f0 0c 01 0c 	sub	r12,r8,r12
80023644:	5e fc       	retal	r12

80023646 <strncmp>:
80023646:	58 0a       	cp.w	r10,0
80023648:	c0 81       	brne	80023658 <strncmp+0x12>
8002364a:	5e fa       	retal	r10
8002364c:	58 0a       	cp.w	r10,0
8002364e:	c0 b0       	breq	80023664 <strncmp+0x1e>
80023650:	58 08       	cp.w	r8,0
80023652:	c0 90       	breq	80023664 <strncmp+0x1e>
80023654:	2f fc       	sub	r12,-1
80023656:	2f fb       	sub	r11,-1
80023658:	20 1a       	sub	r10,1
8002365a:	19 88       	ld.ub	r8,r12[0x0]
8002365c:	17 89       	ld.ub	r9,r11[0x0]
8002365e:	f0 09 18 00 	cp.b	r9,r8
80023662:	cf 50       	breq	8002364c <strncmp+0x6>
80023664:	19 8c       	ld.ub	r12,r12[0x0]
80023666:	17 88       	ld.ub	r8,r11[0x0]
80023668:	10 1c       	sub	r12,r8
8002366a:	5e fc       	retal	r12

8002366c <_sbrk>:
8002366c:	d4 01       	pushm	lr
8002366e:	e0 68 2a 88 	mov	r8,10888
80023672:	70 09       	ld.w	r9,r8[0x0]
80023674:	58 09       	cp.w	r9,0
80023676:	c0 41       	brne	8002367e <_sbrk+0x12>
80023678:	e0 69 33 08 	mov	r9,13064
8002367c:	91 09       	st.w	r8[0x0],r9
8002367e:	e0 69 2a 88 	mov	r9,10888
80023682:	e0 6a f0 00 	mov	r10,61440
80023686:	72 08       	ld.w	r8,r9[0x0]
80023688:	f0 0c 00 0c 	add	r12,r8,r12
8002368c:	14 3c       	cp.w	r12,r10
8002368e:	e0 8b 00 04 	brhi	80023696 <_sbrk+0x2a>
80023692:	93 0c       	st.w	r9[0x0],r12
80023694:	c0 68       	rjmp	800236a0 <_sbrk+0x34>
80023696:	fe b0 fc 8d 	rcall	80022fb0 <__errno>
8002369a:	30 c8       	mov	r8,12
8002369c:	99 08       	st.w	r12[0x0],r8
8002369e:	3f f8       	mov	r8,-1
800236a0:	10 9c       	mov	r12,r8
800236a2:	d8 02       	popm	pc

800236a4 <_malloc_trim_r>:
800236a4:	d4 21       	pushm	r4-r7,lr
800236a6:	16 95       	mov	r5,r11
800236a8:	18 97       	mov	r7,r12
800236aa:	c5 cf       	rcall	80023562 <__malloc_lock>
800236ac:	e0 64 01 80 	mov	r4,384
800236b0:	68 28       	ld.w	r8,r4[0x8]
800236b2:	70 16       	ld.w	r6,r8[0x4]
800236b4:	e0 16 ff fc 	andl	r6,0xfffc
800236b8:	ec c8 ff 91 	sub	r8,r6,-111
800236bc:	f0 05 01 05 	sub	r5,r8,r5
800236c0:	e0 15 ff 80 	andl	r5,0xff80
800236c4:	ea c5 00 80 	sub	r5,r5,128
800236c8:	e0 45 00 7f 	cp.w	r5,127
800236cc:	e0 8a 00 22 	brle	80023710 <_malloc_trim_r+0x6c>
800236d0:	30 0b       	mov	r11,0
800236d2:	0e 9c       	mov	r12,r7
800236d4:	c4 af       	rcall	80023568 <_sbrk_r>
800236d6:	68 28       	ld.w	r8,r4[0x8]
800236d8:	0c 08       	add	r8,r6
800236da:	10 3c       	cp.w	r12,r8
800236dc:	c1 a1       	brne	80023710 <_malloc_trim_r+0x6c>
800236de:	ea 0b 11 00 	rsub	r11,r5,0
800236e2:	0e 9c       	mov	r12,r7
800236e4:	c4 2f       	rcall	80023568 <_sbrk_r>
800236e6:	5b fc       	cp.w	r12,-1
800236e8:	c1 71       	brne	80023716 <_malloc_trim_r+0x72>
800236ea:	30 0b       	mov	r11,0
800236ec:	0e 9c       	mov	r12,r7
800236ee:	c3 df       	rcall	80023568 <_sbrk_r>
800236f0:	68 28       	ld.w	r8,r4[0x8]
800236f2:	f8 08 01 09 	sub	r9,r12,r8
800236f6:	58 f9       	cp.w	r9,15
800236f8:	e0 8a 00 0c 	brle	80023710 <_malloc_trim_r+0x6c>
800236fc:	a1 a9       	sbr	r9,0x0
800236fe:	91 19       	st.w	r8[0x4],r9
80023700:	e0 68 05 8c 	mov	r8,1420
80023704:	70 09       	ld.w	r9,r8[0x0]
80023706:	e0 68 2a 60 	mov	r8,10848
8002370a:	f8 09 01 09 	sub	r9,r12,r9
8002370e:	91 09       	st.w	r8[0x0],r9
80023710:	0e 9c       	mov	r12,r7
80023712:	c2 9f       	rcall	80023564 <__malloc_unlock>
80023714:	d8 2a       	popm	r4-r7,pc,r12=0
80023716:	68 28       	ld.w	r8,r4[0x8]
80023718:	0a 16       	sub	r6,r5
8002371a:	a1 a6       	sbr	r6,0x0
8002371c:	91 16       	st.w	r8[0x4],r6
8002371e:	e0 68 2a 60 	mov	r8,10848
80023722:	70 09       	ld.w	r9,r8[0x0]
80023724:	0a 19       	sub	r9,r5
80023726:	0e 9c       	mov	r12,r7
80023728:	91 09       	st.w	r8[0x0],r9
8002372a:	c1 df       	rcall	80023564 <__malloc_unlock>
8002372c:	da 2a       	popm	r4-r7,pc,r12=1
8002372e:	d7 03       	nop

80023730 <_free_r>:
80023730:	d4 21       	pushm	r4-r7,lr
80023732:	16 96       	mov	r6,r11
80023734:	18 97       	mov	r7,r12
80023736:	58 0b       	cp.w	r11,0
80023738:	e0 80 00 bd 	breq	800238b2 <_free_r+0x182>
8002373c:	c1 3f       	rcall	80023562 <__malloc_lock>
8002373e:	20 86       	sub	r6,8
80023740:	e0 6a 01 80 	mov	r10,384
80023744:	6c 18       	ld.w	r8,r6[0x4]
80023746:	74 2e       	ld.w	lr,r10[0x8]
80023748:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8002374c:	a1 c8       	cbr	r8,0x0
8002374e:	ec 08 00 09 	add	r9,r6,r8
80023752:	72 1b       	ld.w	r11,r9[0x4]
80023754:	e0 1b ff fc 	andl	r11,0xfffc
80023758:	1c 39       	cp.w	r9,lr
8002375a:	c1 d1       	brne	80023794 <_free_r+0x64>
8002375c:	f6 08 00 08 	add	r8,r11,r8
80023760:	58 0c       	cp.w	r12,0
80023762:	c0 81       	brne	80023772 <_free_r+0x42>
80023764:	6c 09       	ld.w	r9,r6[0x0]
80023766:	12 16       	sub	r6,r9
80023768:	12 08       	add	r8,r9
8002376a:	6c 3b       	ld.w	r11,r6[0xc]
8002376c:	6c 29       	ld.w	r9,r6[0x8]
8002376e:	97 29       	st.w	r11[0x8],r9
80023770:	93 3b       	st.w	r9[0xc],r11
80023772:	10 99       	mov	r9,r8
80023774:	95 26       	st.w	r10[0x8],r6
80023776:	a1 a9       	sbr	r9,0x0
80023778:	8d 19       	st.w	r6[0x4],r9
8002377a:	e0 69 05 88 	mov	r9,1416
8002377e:	72 09       	ld.w	r9,r9[0x0]
80023780:	12 38       	cp.w	r8,r9
80023782:	c0 63       	brcs	8002378e <_free_r+0x5e>
80023784:	e0 68 2a 5c 	mov	r8,10844
80023788:	0e 9c       	mov	r12,r7
8002378a:	70 0b       	ld.w	r11,r8[0x0]
8002378c:	c8 cf       	rcall	800236a4 <_malloc_trim_r>
8002378e:	0e 9c       	mov	r12,r7
80023790:	ce ae       	rcall	80023564 <__malloc_unlock>
80023792:	d8 22       	popm	r4-r7,pc
80023794:	93 1b       	st.w	r9[0x4],r11
80023796:	58 0c       	cp.w	r12,0
80023798:	c0 30       	breq	8002379e <_free_r+0x6e>
8002379a:	30 0c       	mov	r12,0
8002379c:	c1 08       	rjmp	800237bc <_free_r+0x8c>
8002379e:	6c 0e       	ld.w	lr,r6[0x0]
800237a0:	f4 c5 ff f8 	sub	r5,r10,-8
800237a4:	1c 16       	sub	r6,lr
800237a6:	1c 08       	add	r8,lr
800237a8:	6c 2e       	ld.w	lr,r6[0x8]
800237aa:	0a 3e       	cp.w	lr,r5
800237ac:	f9 bc 00 01 	moveq	r12,1
800237b0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800237b4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800237b8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800237bc:	f2 0b 00 0e 	add	lr,r9,r11
800237c0:	7c 1e       	ld.w	lr,lr[0x4]
800237c2:	ed be 00 00 	bld	lr,0x0
800237c6:	c1 40       	breq	800237ee <_free_r+0xbe>
800237c8:	16 08       	add	r8,r11
800237ca:	58 0c       	cp.w	r12,0
800237cc:	c0 d1       	brne	800237e6 <_free_r+0xb6>
800237ce:	e0 6e 01 80 	mov	lr,384
800237d2:	72 2b       	ld.w	r11,r9[0x8]
800237d4:	2f 8e       	sub	lr,-8
800237d6:	1c 3b       	cp.w	r11,lr
800237d8:	c0 71       	brne	800237e6 <_free_r+0xb6>
800237da:	97 36       	st.w	r11[0xc],r6
800237dc:	97 26       	st.w	r11[0x8],r6
800237de:	8d 2b       	st.w	r6[0x8],r11
800237e0:	8d 3b       	st.w	r6[0xc],r11
800237e2:	30 1c       	mov	r12,1
800237e4:	c0 58       	rjmp	800237ee <_free_r+0xbe>
800237e6:	72 2b       	ld.w	r11,r9[0x8]
800237e8:	72 39       	ld.w	r9,r9[0xc]
800237ea:	93 2b       	st.w	r9[0x8],r11
800237ec:	97 39       	st.w	r11[0xc],r9
800237ee:	10 99       	mov	r9,r8
800237f0:	ec 08 09 08 	st.w	r6[r8],r8
800237f4:	a1 a9       	sbr	r9,0x0
800237f6:	8d 19       	st.w	r6[0x4],r9
800237f8:	58 0c       	cp.w	r12,0
800237fa:	c5 a1       	brne	800238ae <_free_r+0x17e>
800237fc:	e0 48 01 ff 	cp.w	r8,511
80023800:	e0 8b 00 13 	brhi	80023826 <_free_r+0xf6>
80023804:	a3 98       	lsr	r8,0x3
80023806:	f4 08 00 39 	add	r9,r10,r8<<0x3
8002380a:	72 2b       	ld.w	r11,r9[0x8]
8002380c:	8d 39       	st.w	r6[0xc],r9
8002380e:	8d 2b       	st.w	r6[0x8],r11
80023810:	97 36       	st.w	r11[0xc],r6
80023812:	93 26       	st.w	r9[0x8],r6
80023814:	a3 48       	asr	r8,0x2
80023816:	74 19       	ld.w	r9,r10[0x4]
80023818:	30 1b       	mov	r11,1
8002381a:	f6 08 09 48 	lsl	r8,r11,r8
8002381e:	f3 e8 10 08 	or	r8,r9,r8
80023822:	95 18       	st.w	r10[0x4],r8
80023824:	c4 58       	rjmp	800238ae <_free_r+0x17e>
80023826:	f0 09 16 09 	lsr	r9,r8,0x9
8002382a:	58 49       	cp.w	r9,4
8002382c:	e0 8b 00 06 	brhi	80023838 <_free_r+0x108>
80023830:	f0 0b 16 06 	lsr	r11,r8,0x6
80023834:	2c 8b       	sub	r11,-56
80023836:	c2 08       	rjmp	80023876 <_free_r+0x146>
80023838:	59 49       	cp.w	r9,20
8002383a:	e0 8b 00 05 	brhi	80023844 <_free_r+0x114>
8002383e:	f2 cb ff a5 	sub	r11,r9,-91
80023842:	c1 a8       	rjmp	80023876 <_free_r+0x146>
80023844:	e0 49 00 54 	cp.w	r9,84
80023848:	e0 8b 00 06 	brhi	80023854 <_free_r+0x124>
8002384c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80023850:	29 2b       	sub	r11,-110
80023852:	c1 28       	rjmp	80023876 <_free_r+0x146>
80023854:	e0 49 01 54 	cp.w	r9,340
80023858:	e0 8b 00 06 	brhi	80023864 <_free_r+0x134>
8002385c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80023860:	28 9b       	sub	r11,-119
80023862:	c0 a8       	rjmp	80023876 <_free_r+0x146>
80023864:	f0 0b 16 12 	lsr	r11,r8,0x12
80023868:	e0 49 05 54 	cp.w	r9,1364
8002386c:	e0 88 00 04 	brls	80023874 <_free_r+0x144>
80023870:	37 eb       	mov	r11,126
80023872:	c0 28       	rjmp	80023876 <_free_r+0x146>
80023874:	28 4b       	sub	r11,-124
80023876:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8002387a:	78 29       	ld.w	r9,r12[0x8]
8002387c:	18 39       	cp.w	r9,r12
8002387e:	c0 e1       	brne	8002389a <_free_r+0x16a>
80023880:	74 18       	ld.w	r8,r10[0x4]
80023882:	a3 4b       	asr	r11,0x2
80023884:	30 1c       	mov	r12,1
80023886:	f8 0b 09 4b 	lsl	r11,r12,r11
8002388a:	f1 eb 10 0b 	or	r11,r8,r11
8002388e:	12 98       	mov	r8,r9
80023890:	95 1b       	st.w	r10[0x4],r11
80023892:	c0 a8       	rjmp	800238a6 <_free_r+0x176>
80023894:	72 29       	ld.w	r9,r9[0x8]
80023896:	18 39       	cp.w	r9,r12
80023898:	c0 60       	breq	800238a4 <_free_r+0x174>
8002389a:	72 1a       	ld.w	r10,r9[0x4]
8002389c:	e0 1a ff fc 	andl	r10,0xfffc
800238a0:	14 38       	cp.w	r8,r10
800238a2:	cf 93       	brcs	80023894 <_free_r+0x164>
800238a4:	72 38       	ld.w	r8,r9[0xc]
800238a6:	8d 38       	st.w	r6[0xc],r8
800238a8:	8d 29       	st.w	r6[0x8],r9
800238aa:	93 36       	st.w	r9[0xc],r6
800238ac:	91 26       	st.w	r8[0x8],r6
800238ae:	0e 9c       	mov	r12,r7
800238b0:	c5 ae       	rcall	80023564 <__malloc_unlock>
800238b2:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80023a00 <_evba>:
80023a00:	c0 08       	rjmp	80023a00 <_evba>
	...

80023a04 <_handle_TLB_Multiple_Hit>:
80023a04:	c0 08       	rjmp	80023a04 <_handle_TLB_Multiple_Hit>
	...

80023a08 <_handle_Bus_Error_Data_Fetch>:
80023a08:	c0 08       	rjmp	80023a08 <_handle_Bus_Error_Data_Fetch>
	...

80023a0c <_handle_Bus_Error_Instruction_Fetch>:
80023a0c:	c0 08       	rjmp	80023a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80023a10 <_handle_NMI>:
80023a10:	c0 08       	rjmp	80023a10 <_handle_NMI>
	...

80023a14 <_handle_Instruction_Address>:
80023a14:	c0 08       	rjmp	80023a14 <_handle_Instruction_Address>
	...

80023a18 <_handle_ITLB_Protection>:
80023a18:	c0 08       	rjmp	80023a18 <_handle_ITLB_Protection>
	...

80023a1c <_handle_Breakpoint>:
80023a1c:	c0 08       	rjmp	80023a1c <_handle_Breakpoint>
	...

80023a20 <_handle_Illegal_Opcode>:
80023a20:	c0 08       	rjmp	80023a20 <_handle_Illegal_Opcode>
	...

80023a24 <_handle_Unimplemented_Instruction>:
80023a24:	c0 08       	rjmp	80023a24 <_handle_Unimplemented_Instruction>
	...

80023a28 <_handle_Privilege_Violation>:
80023a28:	c0 08       	rjmp	80023a28 <_handle_Privilege_Violation>
	...

80023a2c <_handle_Floating_Point>:
80023a2c:	c0 08       	rjmp	80023a2c <_handle_Floating_Point>
	...

80023a30 <_handle_Coprocessor_Absent>:
80023a30:	c0 08       	rjmp	80023a30 <_handle_Coprocessor_Absent>
	...

80023a34 <_handle_Data_Address_Read>:
80023a34:	c0 08       	rjmp	80023a34 <_handle_Data_Address_Read>
	...

80023a38 <_handle_Data_Address_Write>:
80023a38:	c0 08       	rjmp	80023a38 <_handle_Data_Address_Write>
	...

80023a3c <_handle_DTLB_Protection_Read>:
80023a3c:	c0 08       	rjmp	80023a3c <_handle_DTLB_Protection_Read>
	...

80023a40 <_handle_DTLB_Protection_Write>:
80023a40:	c0 08       	rjmp	80023a40 <_handle_DTLB_Protection_Write>
	...

80023a44 <_handle_DTLB_Modified>:
80023a44:	c0 08       	rjmp	80023a44 <_handle_DTLB_Modified>
	...

80023a50 <_handle_ITLB_Miss>:
80023a50:	c0 08       	rjmp	80023a50 <_handle_ITLB_Miss>
	...

80023a60 <_handle_DTLB_Miss_Read>:
80023a60:	c0 08       	rjmp	80023a60 <_handle_DTLB_Miss_Read>
	...

80023a70 <_handle_DTLB_Miss_Write>:
80023a70:	c0 08       	rjmp	80023a70 <_handle_DTLB_Miss_Write>
	...

80023b00 <_handle_Supervisor_Call>:
80023b00:	c0 08       	rjmp	80023b00 <_handle_Supervisor_Call>
80023b02:	d7 03       	nop

80023b04 <_int0>:
80023b04:	30 0c       	mov	r12,0
80023b06:	fe b0 77 03 	rcall	8001290c <_get_interrupt_handler>
80023b0a:	58 0c       	cp.w	r12,0
80023b0c:	f8 0f 17 10 	movne	pc,r12
80023b10:	d6 03       	rete

80023b12 <_int1>:
80023b12:	30 1c       	mov	r12,1
80023b14:	fe b0 76 fc 	rcall	8001290c <_get_interrupt_handler>
80023b18:	58 0c       	cp.w	r12,0
80023b1a:	f8 0f 17 10 	movne	pc,r12
80023b1e:	d6 03       	rete

80023b20 <_int2>:
80023b20:	30 2c       	mov	r12,2
80023b22:	fe b0 76 f5 	rcall	8001290c <_get_interrupt_handler>
80023b26:	58 0c       	cp.w	r12,0
80023b28:	f8 0f 17 10 	movne	pc,r12
80023b2c:	d6 03       	rete

80023b2e <_int3>:
80023b2e:	30 3c       	mov	r12,3
80023b30:	fe b0 76 ee 	rcall	8001290c <_get_interrupt_handler>
80023b34:	58 0c       	cp.w	r12,0
80023b36:	f8 0f 17 10 	movne	pc,r12
80023b3a:	d6 03       	rete
80023b3c:	d7 03       	nop
80023b3e:	d7 03       	nop
80023b40:	d7 03       	nop
80023b42:	d7 03       	nop
80023b44:	d7 03       	nop
80023b46:	d7 03       	nop
80023b48:	d7 03       	nop
80023b4a:	d7 03       	nop
80023b4c:	d7 03       	nop
80023b4e:	d7 03       	nop
80023b50:	d7 03       	nop
80023b52:	d7 03       	nop
80023b54:	d7 03       	nop
80023b56:	d7 03       	nop
80023b58:	d7 03       	nop
80023b5a:	d7 03       	nop
80023b5c:	d7 03       	nop
80023b5e:	d7 03       	nop
80023b60:	d7 03       	nop
80023b62:	d7 03       	nop
80023b64:	d7 03       	nop
80023b66:	d7 03       	nop
80023b68:	d7 03       	nop
80023b6a:	d7 03       	nop
80023b6c:	d7 03       	nop
80023b6e:	d7 03       	nop
80023b70:	d7 03       	nop
80023b72:	d7 03       	nop
80023b74:	d7 03       	nop
80023b76:	d7 03       	nop
80023b78:	d7 03       	nop
80023b7a:	d7 03       	nop
80023b7c:	d7 03       	nop
80023b7e:	d7 03       	nop
80023b80:	d7 03       	nop
80023b82:	d7 03       	nop
80023b84:	d7 03       	nop
80023b86:	d7 03       	nop
80023b88:	d7 03       	nop
80023b8a:	d7 03       	nop
80023b8c:	d7 03       	nop
80023b8e:	d7 03       	nop
80023b90:	d7 03       	nop
80023b92:	d7 03       	nop
80023b94:	d7 03       	nop
80023b96:	d7 03       	nop
80023b98:	d7 03       	nop
80023b9a:	d7 03       	nop
80023b9c:	d7 03       	nop
80023b9e:	d7 03       	nop
80023ba0:	d7 03       	nop
80023ba2:	d7 03       	nop
80023ba4:	d7 03       	nop
80023ba6:	d7 03       	nop
80023ba8:	d7 03       	nop
80023baa:	d7 03       	nop
80023bac:	d7 03       	nop
80023bae:	d7 03       	nop
80023bb0:	d7 03       	nop
80023bb2:	d7 03       	nop
80023bb4:	d7 03       	nop
80023bb6:	d7 03       	nop
80023bb8:	d7 03       	nop
80023bba:	d7 03       	nop
80023bbc:	d7 03       	nop
80023bbe:	d7 03       	nop
80023bc0:	d7 03       	nop
80023bc2:	d7 03       	nop
80023bc4:	d7 03       	nop
80023bc6:	d7 03       	nop
80023bc8:	d7 03       	nop
80023bca:	d7 03       	nop
80023bcc:	d7 03       	nop
80023bce:	d7 03       	nop
80023bd0:	d7 03       	nop
80023bd2:	d7 03       	nop
80023bd4:	d7 03       	nop
80023bd6:	d7 03       	nop
80023bd8:	d7 03       	nop
80023bda:	d7 03       	nop
80023bdc:	d7 03       	nop
80023bde:	d7 03       	nop
80023be0:	d7 03       	nop
80023be2:	d7 03       	nop
80023be4:	d7 03       	nop
80023be6:	d7 03       	nop
80023be8:	d7 03       	nop
80023bea:	d7 03       	nop
80023bec:	d7 03       	nop
80023bee:	d7 03       	nop
80023bf0:	d7 03       	nop
80023bf2:	d7 03       	nop
80023bf4:	d7 03       	nop
80023bf6:	d7 03       	nop
80023bf8:	d7 03       	nop
80023bfa:	d7 03       	nop
80023bfc:	d7 03       	nop
80023bfe:	d7 03       	nop
