interface design specification
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

http://new.myfonts.com/fonts/minifonts/mini7/mini-7/
http://new.myfonts.com/fonts/minifonts/mini7/mini-7-condensed/
http://kottke.org/plus/type/silkscreen/

------------------------------------------------------------------------------------

PLAY mode:

PLAY screen is conditionally/dynamically controlled by any op. which op is updates
the screen is simply another parameter. one idea for how this would work is for the
"screen" itself to have an output which sends a "frame request" by definition to
only one op.

or perhaps each display op has its own screen memory buffer and the control system
knows how to pull from the focussed op.

doing things like multi-op layers is probably beyond the scope.

------------------------------------------------------------------------------------

play modes
- current preset
- last edited param via encoder/key/aux
- params assigned to encoders, quadrants
- a big number, whatever input
- graphical representation of numbers. sliders/etc.

------------------------------------------------------------------------------------

ONE-BUTTON edit mode toggle.

------------------------------------------------------------------------------------

operator: sequencer
used to cycle between play modes without using presets
ie.
mod = 4
position = 0
data1 = preset
data2 = values
data3 = etc
data4 = etcccc
out+ = screen+
next (bang)
pos = 0
then assign button to "next" advance the "pos" which sends data[pos] to "out"

------------------------------------------------------------------------------------

special ops? reserved.

dsp (includes analog stuff)
preset
screen
control (enc/key/aux)
osc
midi
monome


------------------------------------------------------------------------------------

duplicate/multiple ops etc get numbered with a dash

ie

key-1
key-2

accum-1
accum-2
..
accum-44

------------------------------------------------------------------------------------

SMART DEFAULTS
ie.
bypass in left aux
right key is screen mode cycle
sensible encoder routing
etc

is LEARN impractical due to the need for accums and limits etc?

------------------------------------------------------------------------------------

for top/bottom, show blank space
cursor stay in same place, list moves

root < > patch / param / preset / setup

----------------------
PATCH
PARAM
PRESET
SETUP
----------------------

param ------------------------------------------------------------------------------
------------------------------------------------------------------------------------

initial screen: flat list, with heading for "section" (dsp/op/control/preset)

ie:

----------------------
/control/
key-1/tmode		  0
key-1/tstate	  0
key-1/val+		\44
	  /dsp/feedback
key-2/tmode		  0
key-2/tstate	  0
(a) (b) (c) (d)
----------------------

parameter names on left. corresponding values on right, right aligned.

bottom key links inverted for clear division.

top line is the section, stays put while scrolling 5 lines of list below. section changes as user scrolls into new section. 

a static, faint highlight stays on line 3. this is the focussed edit point.

params that are included in the preset are full brightness. others are dimmer.

params with a trailing + are an output. the value shown to the right is the output node id. node ids need some sort of textual distinction, like a leading back slash.

left encoders map to navigation/scrolling. top moves sections. bottom moves single lines.

right encoders edit in-place. top is fast, bottom is slow.


behavior when INPUT field is selected ----------------------------------------------

a = <
b = >
c = INC, toggle parameter inclusion in preset
d = GATHER

< = back to root

> = subwindow, rightwards, large full editor. param name at top, large value. < to return to list:

----------------------
/control/key-1/tstate

      ----
     |    |
      ----

----------------------

could theoretically put LEARN here.

GATHER creates a new list, rightwards. shows all outputs that send to this value. show parameter at top, and maybe FROM or something to know what we're looking at. "outputs sending to \44 /this" or something?

----------------------
/control/key-1/tstate

/op/accum/out+
/control/key-1/val+


----------------------

scroll to move cursor

d = CLR, remove this link (changes val of remote output to null)

< = back to param list
> = go to this param in the list

perhaps the outputs should look like this:

/44  ../accum/out+
/2   ../1/val+

accum-1/

where the names are concatenated to fit?


behavior when OUTPUT field is selected ---------------------------------------------

c = INC, toggle inclusion in preset
d = FOLLOW, move cursor to list position of value of offset
	ie, /control/key/1/val+ is set to \20 /dsp/feedback
	pushing FOLLOW would jump list highlight/position to /dsp/feedback

< = back to root
> = SPECIFY input target, new rightward screen.

----------------------
destination for
/control/key/1/val+
/dsp/
feedback
resonance
cutoff
bits
----------------------

perhaps we shouldn't have headings, as we probably know what we're doing by this point. learning curve.

a list, for scrolling and selection. basically a huge parameter list, same as the normal param list but with outputs filtered out. perhaps instead it should be hierarchical for selection. start at the root, < > to navigate until you hit a final param. 

left encoders = top scroll section, bottom scroll individually

> = SELECT, chooses value, returns to list
< = cancels, returns to list

c = CREATE, create op screen, rightwards
d = CLEAR, sets output to null


CREATE op screen:

----------------------
accum
split
rand
maplin
mapexp
delay
----------------------

scroll list.

< = back to previous screen
> = select op, create op, rightwards screen to choose input for routing:

----------------------
/val
/operand
/min
/max
/modulus


----------------------

making stuff up, above.

< = previous screen, destroy op (perhaps just delay creation)
> = confirm destination, back to list




------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------



navigation
------------------------------------------------------------------------------------

screen: [root]
display: list: PATCH PARAM PRESET SETUP




screen: [patch]
display: list
	start with cursor on currently loaded patch.
	- load with defaults
	- load only dsp
	- dsp info, text description
	



screen: [preset]
display: list
	start on last loaded preset
- recall
- store
> goes to preset detail


screen: [preset-detail]
display: preset number, name, param list
- remove-param
- delete
> go to param list at param selected


screen: [preset-store]
display: number, name entry
- insert
- overwrite
one knob = move edit pos for name
other knob = change letter



screen: [setup]
- info?
	fw ver, flash %
- load set
- save set
- usb util?
- midi util?



<<<<<<< HEAD

=======
<<<<<<< HEAD
=======

////////////////////// general notes

lists
	for top/bottom, show blank space
	cursor stay in same place? list moves?
	
presets
	need new term/name instead of "preset"
	may be useful to split preset with sub-groups. 10-02 for example.
	perhaps preset-file (series) should be in setup if it is primarily for backup?
	allows for next/pre, next/group etc. song structure etc.
>>>>>>> explody
>>>>>>> 330fd1e9aa47515512dd038da5305e0519cf26f3
