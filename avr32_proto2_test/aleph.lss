
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007ee0  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000a000  8000a000  0000a400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000d5c  8000a200  8000a200  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000af5c  8000af5c  0000b35c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000508  00000008  8000af60  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000014e8  00000510  00000510  00000000  2**2
                  ALLOC
  9 .heap         0000d608  000019f8  000019f8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000b910  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c08  00000000  00000000  0000b940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002032  00000000  00000000  0000c548  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00018c53  00000000  00000000  0000e57a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000355a  00000000  00000000  000271cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001403f  00000000  00000000  0002a727  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002044  00000000  00000000  0003e768  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000040ef  00000000  00000000  000407ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000627b  00000000  00000000  0004489b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 013f3c1b  00000000  00000000  0004ab16  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00005370  00000000  00000000  0143e731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf db 04 	sub	pc,pc,-9468

Disassembly of section .text:

80002004 <sdramc_init>:
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
80002004:	d4 21       	pushm	r4-r7,lr
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002006:	ee 78 42 3f 	mov	r8,999999
8000200a:	f8 08 00 09 	add	r9,r12,r8
8000200e:	e0 68 de 83 	mov	r8,56963
80002012:	ea 18 43 1b 	orh	r8,0x431b
80002016:	f2 08 06 48 	mulu.d	r8,r9,r8
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
8000201a:	18 96       	mov	r6,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000201c:	f2 07 16 12 	lsr	r7,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002020:	32 7b       	mov	r11,39
80002022:	4f 4c       	lddpc	r12,800021f0 <sdramc_init+0x1ec>
80002024:	c5 9d       	rcall	800022d6 <gpio_enable_module>
80002026:	fe 68 10 00 	mov	r8,-126976
  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();

  // Enable SDRAM mode for CS1.
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
8000202a:	f0 f9 01 24 	ld.w	r9,r8[292]
8000202e:	a1 b9       	sbr	r9,0x1
80002030:	f1 49 01 24 	st.w	r8[292],r9
80002034:	f0 f8 01 24 	ld.w	r8,r8[292]
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80002038:	e0 68 4d d3 	mov	r8,19923
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
8000203c:	ea 18 10 62 	orh	r8,0x1062
80002040:	ee 0b 15 05 	lsl	r11,r7,0x5
80002044:	0e 0b       	add	r11,r7
80002046:	a1 7b       	lsl	r11,0x1
80002048:	f6 07 00 05 	add	r5,r11,r7
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000204c:	ea c5 fc 19 	sub	r5,r5,-999
80002050:	ea 08 06 44 	mulu.d	r4,r5,r8
80002054:	ea 0e 16 06 	lsr	lr,r5,0x6
80002058:	f6 c5 fc 19 	sub	r5,r11,-999
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
8000205c:	ea 08 06 44 	mulu.d	r4,r5,r8
80002060:	ea 0b 16 06 	lsr	r11,r5,0x6
80002064:	ee 07 00 25 	add	r5,r7,r7<<0x2
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002068:	a3 65       	lsl	r5,0x2
8000206a:	ea c5 fc 19 	sub	r5,r5,-999
8000206e:	ea 08 06 44 	mulu.d	r4,r5,r8
80002072:	ea 09 16 06 	lsr	r9,r5,0x6
80002076:	ee 05 15 04 	lsl	r5,r7,0x4
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000207a:	0e 15       	sub	r5,r7
8000207c:	ea c5 fc 19 	sub	r5,r5,-999
80002080:	ea 08 06 44 	mulu.d	r4,r5,r8
80002084:	ea 0c 15 02 	lsl	r12,r5,0x2
80002088:	e2 1c 0f 00 	andl	r12,0xf00,COH
8000208c:	f6 05 15 0c 	lsl	r5,r11,0xc
80002090:	bd 6e       	lsl	lr,0x1c
80002092:	eb d5 c0 10 	bfextu	r5,r5,0x0,0x10
80002096:	e8 1e 00 d9 	orl	lr,0xd9
8000209a:	18 4e       	or	lr,r12
8000209c:	f2 0c 15 10 	lsl	r12,r9,0x10
800020a0:	e6 1c 00 0f 	andh	r12,0xf,COH
800020a4:	0a 4e       	or	lr,r5
800020a6:	ee 05 10 2c 	mul	r5,r7,44
800020aa:	18 4e       	or	lr,r12
800020ac:	ea c5 fc 19 	sub	r5,r5,-999
800020b0:	f2 0c 15 14 	lsl	r12,r9,0x14
800020b4:	ea 08 06 44 	mulu.d	r4,r5,r8
800020b8:	e6 1c 00 f0 	andh	r12,0xf0,COH
800020bc:	ea 08 15 12 	lsl	r8,r5,0x12
800020c0:	fd ec 10 0c 	or	r12,lr,r12
800020c4:	e6 18 0f 00 	andh	r8,0xf00,COH
800020c8:	f9 e8 10 08 	or	r8,r12,r8
800020cc:	fe 6a 20 00 	mov	r10,-122880
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020d0:	95 28       	st.w	r10[0x8],r8
800020d2:	74 28       	ld.w	r8,r10[0x8]
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800020d4:	30 18       	mov	r8,1

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800020d6:	95 08       	st.w	r10[0x0],r8
800020d8:	74 08       	ld.w	r8,r10[0x0]
  AVR32_SDRAMC.mr;
800020da:	fc 18 d0 00 	movh	r8,0xd000
  sdram[0];
800020de:	90 08       	ld.sh	r8,r8[0x0]
800020e0:	e1 b8 00 42 	mfsr	r8,0x108
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
800020e4:	ee 0a 10 64 	mul	r10,r7,100
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800020e8:	f0 0a 00 0a 	add	r10,r8,r10
800020ec:	14 38       	cp.w	r8,r10

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800020ee:	e0 88 00 06 	brls	800020fa <sdramc_init+0xf6>
800020f2:	e1 b8 00 42 	mfsr	r8,0x108
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800020f6:	10 3a       	cp.w	r10,r8
800020f8:	cf d3       	brcs	800020f2 <sdramc_init+0xee>
800020fa:	e1 b8 00 42 	mfsr	r8,0x108
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
800020fe:	10 3a       	cp.w	r10,r8
80002100:	fe 9b ff fd 	brhi	800020fa <sdramc_init+0xf6>
80002104:	fe 68 20 00 	mov	r8,-122880

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002108:	30 2a       	mov	r10,2
8000210a:	91 0a       	st.w	r8[0x0],r10
8000210c:	70 08       	ld.w	r8,r8[0x0]
  AVR32_SDRAMC.mr;
8000210e:	fc 18 d0 00 	movh	r8,0xd000
  sdram[0];
80002112:	90 08       	ld.sh	r8,r8[0x0]
80002114:	e1 b8 00 42 	mfsr	r8,0x108
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002118:	f0 09 00 09 	add	r9,r8,r9
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000211c:	12 38       	cp.w	r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000211e:	e0 88 00 06 	brls	8000212a <sdramc_init+0x126>
80002122:	e1 b8 00 42 	mfsr	r8,0x108
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002126:	10 39       	cp.w	r9,r8
80002128:	cf d3       	brcs	80002122 <sdramc_init+0x11e>
8000212a:	e1 b8 00 42 	mfsr	r8,0x108
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
8000212e:	10 39       	cp.w	r9,r8
80002130:	fe 9b ff fd 	brhi	8000212a <sdramc_init+0x126>
80002134:	fe 68 20 00 	mov	r8,-122880
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002138:	30 49       	mov	r9,4
8000213a:	30 0a       	mov	r10,0
  AVR32_SDRAMC.mr;
8000213c:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
8000213e:	fc 1c d0 00 	movh	r12,0xd000
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002142:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
80002144:	98 08       	ld.sh	r8,r12[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002146:	e1 b8 00 42 	mfsr	r8,0x108
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000214a:	f0 0b 00 09 	add	r9,r8,r11
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000214e:	12 38       	cp.w	r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002150:	e0 88 00 06 	brls	8000215c <sdramc_init+0x158>
80002154:	e1 b8 00 42 	mfsr	r8,0x108
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002158:	10 39       	cp.w	r9,r8
8000215a:	cf d3       	brcs	80002154 <sdramc_init+0x150>
8000215c:	e1 b8 00 42 	mfsr	r8,0x108
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002160:	10 39       	cp.w	r9,r8
80002162:	fe 9b ff fd 	brhi	8000215c <sdramc_init+0x158>
80002166:	2f fa       	sub	r10,-1
80002168:	58 2a       	cp.w	r10,2
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
8000216a:	ce d1       	brne	80002144 <sdramc_init+0x140>
8000216c:	fe 68 20 00 	mov	r8,-122880
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002170:	30 39       	mov	r9,3
80002172:	91 09       	st.w	r8[0x0],r9
80002174:	70 08       	ld.w	r8,r8[0x0]
  AVR32_SDRAMC.mr;
80002176:	fc 18 d0 00 	movh	r8,0xd000
  sdram[0];
8000217a:	90 08       	ld.sh	r8,r8[0x0]
8000217c:	e1 b8 00 42 	mfsr	r8,0x108
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002180:	e0 69 4d d3 	mov	r9,19923
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002184:	ea 19 10 62 	orh	r9,0x1062
80002188:	ee 0b 15 01 	lsl	r11,r7,0x1
8000218c:	f6 cb fc 19 	sub	r11,r11,-999
80002190:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002194:	f6 09 16 06 	lsr	r9,r11,0x6
80002198:	f0 09 00 09 	add	r9,r8,r9
8000219c:	12 38       	cp.w	r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000219e:	e0 88 00 06 	brls	800021aa <sdramc_init+0x1a6>
800021a2:	e1 b8 00 42 	mfsr	r8,0x108
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800021a6:	10 39       	cp.w	r9,r8
800021a8:	cf d3       	brcs	800021a2 <sdramc_init+0x19e>
800021aa:	e1 b8 00 42 	mfsr	r8,0x108
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
800021ae:	10 39       	cp.w	r9,r8
800021b0:	fe 9b ff fd 	brhi	800021aa <sdramc_init+0x1a6>
800021b4:	30 09       	mov	r9,0
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800021b6:	fe 68 20 00 	mov	r8,-122880
800021ba:	91 09       	st.w	r8[0x0],r9
800021bc:	70 09       	ld.w	r9,r8[0x0]
  AVR32_SDRAMC.mr;
800021be:	fc 19 d0 00 	movh	r9,0xd000
  sdram[0];
800021c2:	92 09       	ld.sh	r9,r9[0x0]
800021c4:	e0 69 1e 84 	mov	r9,7812

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800021c8:	e0 6b de 83 	mov	r11,56963
800021cc:	ea 1b 43 1b 	orh	r11,0x431b
800021d0:	ec 0b 06 4a 	mulu.d	r10,r6,r11
800021d4:	b3 8b       	lsr	r11,0x12
800021d6:	b3 3b       	mul	r11,r9
800021d8:	e0 69 4d d3 	mov	r9,19923
800021dc:	ea 19 10 62 	orh	r9,0x1062
800021e0:	f6 09 06 4a 	mulu.d	r10,r11,r9
800021e4:	f6 09 16 06 	lsr	r9,r11,0x6
800021e8:	91 19       	st.w	r8[0x4],r9
800021ea:	70 18       	ld.w	r8,r8[0x4]
  AVR32_SDRAMC.tr;
800021ec:	d8 22       	popm	r4-r7,pc
}
800021ee:	d7 03       	nop
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	a2 00       	st.h	r1[0x0],r0

800021f4 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800021f4:	fe 68 14 00 	mov	r8,-125952
800021f8:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800021fa:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800021fe:	91 09       	st.w	r8[0x0],r9
}
80002200:	5e fc       	retal	r12

80002202 <gpio_enable_pin_pull_up>:


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->puers = 1 << (pin & 0x1F);
80002202:	30 18       	mov	r8,1
80002204:	f0 0c 09 48 	lsl	r8,r8,r12
#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002208:	a5 9c       	lsr	r12,0x5
8000220a:	a9 6c       	lsl	r12,0x8
8000220c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->puers = 1 << (pin & 0x1F);
80002210:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002214:	5e fc       	retal	r12

80002216 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002216:	f8 08 16 05 	lsr	r8,r12,0x5
8000221a:	a9 68       	lsl	r8,0x8
8000221c:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002220:	71 88       	ld.w	r8,r8[0x60]
80002222:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002226:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000222a:	5e fc       	retal	r12

8000222c <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000222c:	30 18       	mov	r8,1
8000222e:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002232:	a5 9c       	lsr	r12,0x5
80002234:	a9 6c       	lsl	r12,0x8
80002236:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000223a:	f9 48 00 54 	st.w	r12[84],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000223e:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002242:	99 18       	st.w	r12[0x4],r8
}
80002244:	5e fc       	retal	r12

80002246 <gpio_clr_gpio_pin>:
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002246:	30 18       	mov	r8,1
80002248:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000224c:	a5 9c       	lsr	r12,0x5
8000224e:	a9 6c       	lsl	r12,0x8
80002250:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002254:	f9 48 00 58 	st.w	r12[88],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80002258:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000225c:	99 18       	st.w	r12[0x4],r8
}
8000225e:	5e fc       	retal	r12

80002260 <gpio_enable_pin_interrupt>:
int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002260:	30 1a       	mov	r10,1
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80002262:	f8 08 16 05 	lsr	r8,r12,0x5

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002266:	f4 0c 09 49 	lsl	r9,r10,r12
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
8000226a:	a9 68       	lsl	r8,0x8
8000226c:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002270:	f1 49 00 c4 	st.w	r8[196],r9
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
80002274:	14 3b       	cp.w	r11,r10
80002276:	c0 c0       	breq	8000228e <gpio_enable_pin_interrupt+0x2e>
80002278:	c0 82       	brcc	80002288 <gpio_enable_pin_interrupt+0x28>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8000227a:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
8000227e:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80002282:	f1 49 00 94 	st.w	r8[148],r9
80002286:	5e fd       	retal	0
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
80002288:	58 2b       	cp.w	r11,2
8000228a:	c0 90       	breq	8000229c <gpio_enable_pin_interrupt+0x3c>
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1s = 1 << (pin & 0x1F);
8000228c:	5e fa       	retal	r10
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
8000228e:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80002292:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80002296:	f1 49 00 94 	st.w	r8[148],r9
8000229a:	5e fd       	retal	0
    gpio_port->imr0s = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8000229c:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800022a0:	f1 49 00 b4 	st.w	r8[180],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022a4:	f1 49 00 94 	st.w	r8[148],r9
800022a8:	5e fd       	retal	0

800022aa <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022aa:	f8 08 16 05 	lsr	r8,r12,0x5
800022ae:	a9 68       	lsl	r8,0x8
800022b0:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800022b4:	f0 f8 00 d0 	ld.w	r8,r8[208]
800022b8:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800022bc:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800022c0:	5e fc       	retal	r12

800022c2 <gpio_clear_pin_interrupt_flag>:
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800022c2:	30 18       	mov	r8,1
800022c4:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022c8:	a5 9c       	lsr	r12,0x5
800022ca:	a9 6c       	lsl	r12,0x8
800022cc:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800022d0:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
800022d4:	5e fc       	retal	r12

800022d6 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800022d6:	eb cd 40 f8 	pushm	r3-r7,lr
800022da:	18 98       	mov	r8,r12
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022dc:	58 0b       	cp.w	r11,0
800022de:	c3 c0       	breq	80002356 <gpio_enable_module+0x80>
800022e0:	30 0e       	mov	lr,0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800022e2:	30 16       	mov	r6,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022e4:	1c 9c       	mov	r12,lr
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800022e6:	30 15       	mov	r5,1
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
800022e8:	30 24       	mov	r4,2
800022ea:	30 33       	mov	r3,3
800022ec:	c0 d8       	rjmp	80002306 <gpio_enable_module+0x30>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800022ee:	ea 07 09 4a 	lsl	r10,r5,r7
800022f2:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800022f4:	93 aa       	st.w	r9[0x28],r10
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800022f6:	93 2a       	st.w	r9[0x8],r10
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022f8:	2f fe       	sub	lr,-1
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800022fa:	30 09       	mov	r9,0
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800022fc:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800022fe:	1c 3b       	cp.w	r11,lr
80002300:	e0 88 00 1a 	brls	80002334 <gpio_enable_module+0x5e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
80002304:	2f e8       	sub	r8,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002306:	11 87       	ld.ub	r7,r8[0x0]
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002308:	11 9a       	ld.ub	r10,r8[0x1]
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000230a:	ee 09 16 05 	lsr	r9,r7,0x5
8000230e:	a9 69       	lsl	r9,0x8
80002310:	e0 29 f0 00 	sub	r9,61440

  // Enable the correct function.
  switch (function)
80002314:	ec 0a 18 00 	cp.b	r10,r6
80002318:	c1 00       	breq	80002338 <gpio_enable_module+0x62>
8000231a:	ce a3       	brcs	800022ee <gpio_enable_module+0x18>
8000231c:	e8 0a 18 00 	cp.b	r10,r4
80002320:	c1 60       	breq	8000234c <gpio_enable_module+0x76>
80002322:	e6 0a 18 00 	cp.b	r10,r3
80002326:	c0 e0       	breq	80002342 <gpio_enable_module+0x6c>
80002328:	30 19       	mov	r9,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000232a:	2f fe       	sub	lr,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000232c:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000232e:	1c 3b       	cp.w	r11,lr
80002330:	fe 9b ff ea 	brhi	80002304 <gpio_enable_module+0x2e>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
80002334:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002338:	ea 07 09 4a 	lsl	r10,r5,r7
8000233c:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000233e:	93 aa       	st.w	r9[0x28],r10
80002340:	cd bb       	rjmp	800022f6 <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002342:	ea 07 09 4a 	lsl	r10,r5,r7
80002346:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002348:	93 9a       	st.w	r9[0x24],r10
8000234a:	cd 6b       	rjmp	800022f6 <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000234c:	ea 07 09 4a 	lsl	r10,r5,r7
80002350:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002352:	93 9a       	st.w	r9[0x24],r10
80002354:	cd 1b       	rjmp	800022f6 <gpio_enable_module+0x20>
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
80002356:	16 9c       	mov	r12,r11
80002358:	ce eb       	rjmp	80002334 <gpio_enable_module+0x5e>

8000235a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000235a:	c0 08       	rjmp	8000235a <_unhandled_interrupt>

8000235c <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000235c:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002360:	fe c8 81 10 	sub	r8,pc,-32496
80002364:	a5 9b       	lsr	r11,0x5
80002366:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000236a:	70 18       	ld.w	r8,r8[0x4]
8000236c:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002370:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
80002372:	c1 20       	breq	80002396 <INTC_register_interrupt+0x3a>
80002374:	58 1a       	cp.w	r10,1
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
80002376:	c1 b0       	breq	800023ac <INTC_register_interrupt+0x50>
80002378:	58 2a       	cp.w	r10,2
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000237a:	c2 50       	breq	800023c4 <INTC_register_interrupt+0x68>
8000237c:	fe c9 82 4e 	sub	r9,pc,-32178
80002380:	fe c8 83 80 	sub	r8,pc,-31872
80002384:	f2 08 01 08 	sub	r8,r9,r8
80002388:	fe 79 08 00 	mov	r9,-63488
8000238c:	ea 18 c0 00 	orh	r8,0xc000
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002390:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002394:	5e fc       	retal	r12
80002396:	fe 78 08 00 	mov	r8,-63488
8000239a:	fe c9 83 9a 	sub	r9,pc,-31846
8000239e:	fe ca 82 9a 	sub	r10,pc,-32102
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800023a2:	f4 09 01 09 	sub	r9,r10,r9
800023a6:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
800023aa:	5e fc       	retal	r12
800023ac:	fe c9 82 9a 	sub	r9,pc,-32102
800023b0:	fe c8 83 b0 	sub	r8,pc,-31824
800023b4:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800023b8:	fe 79 08 00 	mov	r9,-63488
800023bc:	bf a8       	sbr	r8,0x1e
800023be:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800023c2:	5e fc       	retal	r12
800023c4:	fe c9 82 a4 	sub	r9,pc,-32092
800023c8:	fe c8 83 c8 	sub	r8,pc,-31800
800023cc:	f2 08 01 08 	sub	r8,r9,r8
800023d0:	fe 79 08 00 	mov	r9,-63488
800023d4:	bf b8       	sbr	r8,0x1f
800023d6:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800023da:	5e fc       	retal	r12

800023dc <INTC_init_interrupts>:
800023dc:	eb cd 40 c0 	pushm	r6-r7,lr
800023e0:	fe c8 83 e0 	sub	r8,pc,-31776
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800023e4:	e3 b8 00 01 	mtsr	0x4,r8
800023e8:	fe c6 82 e4 	sub	r6,pc,-32028
800023ec:	fe ce 81 9c 	sub	lr,pc,-32356

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800023f0:	10 16       	sub	r6,r8
800023f2:	30 0c       	mov	r12,0
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
800023f4:	fe cb 00 9a 	sub	r11,pc,154

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800023f8:	fe 77 08 00 	mov	r7,-63488
800023fc:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800023fe:	58 0a       	cp.w	r10,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002400:	c0 70       	breq	8000240e <INTC_init_interrupts+0x32>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002402:	7c 19       	ld.w	r9,lr[0x4]
80002404:	30 08       	mov	r8,0

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002406:	12 ab       	st.w	r9++,r11
80002408:	2f f8       	sub	r8,-1
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000240a:	14 38       	cp.w	r8,r10
8000240c:	cf d3       	brcs	80002406 <INTC_init_interrupts+0x2a>
8000240e:	ee 0c 09 26 	st.w	r7[r12<<0x2],r6
80002412:	2f 8e       	sub	lr,-8
80002414:	2f fc       	sub	r12,-1
80002416:	59 4c       	cp.w	r12,20
80002418:	cf 21       	brne	800023fc <INTC_init_interrupts+0x20>
8000241a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000241e:	d7 03       	nop

80002420 <_get_interrupt_handler>:
80002420:	e0 68 00 83 	mov	r8,131
80002424:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002428:	fe 78 08 00 	mov	r8,-63488
8000242c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002430:	f2 ca ff c0 	sub	r10,r9,-64
80002434:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002438:	58 0c       	cp.w	r12,0
8000243a:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000243c:	fe c8 81 ec 	sub	r8,pc,-32276
80002440:	f8 0c 12 00 	clz	r12,r12
80002444:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002448:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000244c:	72 18       	ld.w	r8,r9[0x4]
8000244e:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002452:	5e fc       	retal	r12

80002454 <pdca_disable>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002454:	58 ec       	cp.w	r12,14
80002456:	e0 8b 00 08 	brhi	80002466 <pdca_disable+0x12>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
8000245a:	a7 6c       	lsl	r12,0x6
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8000245c:	30 28       	mov	r8,2


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
8000245e:	e0 3c 00 00 	sub	r12,65536
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002462:	99 58       	st.w	r12[0x14],r8

}
80002464:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002466:	3f fc       	mov	r12,-1
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002468:	30 28       	mov	r8,2
8000246a:	99 58       	st.w	r12[0x14],r8

}
8000246c:	5e fc       	retal	r12

8000246e <pdca_disable_interrupt_transfer_complete>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000246e:	58 ec       	cp.w	r12,14
80002470:	e0 88 00 0c 	brls	80002488 <pdca_disable_interrupt_transfer_complete+0x1a>
80002474:	3f fc       	mov	r12,-1
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002476:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
8000247a:	ed b8 00 10 	bld	r8,0x10
8000247e:	c0 d1       	brne	80002498 <pdca_disable_interrupt_transfer_complete+0x2a>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002480:	30 28       	mov	r8,2
80002482:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
80002484:	78 b8       	ld.w	r8,r12[0x2c]
80002486:	5e fc       	retal	r12


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002488:	a7 6c       	lsl	r12,0x6
8000248a:	e0 3c 00 00 	sub	r12,65536
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000248e:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
80002492:	ed b8 00 10 	bld	r8,0x10
80002496:	cf 50       	breq	80002480 <pdca_disable_interrupt_transfer_complete+0x12>
80002498:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
8000249a:	30 28       	mov	r8,2
8000249c:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
8000249e:	78 b8       	ld.w	r8,r12[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800024a0:	d5 03       	csrf	0x10
800024a2:	5e fc       	retal	r12

800024a4 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800024a4:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
800024a8:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800024aa:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
800024ac:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
800024ae:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
800024b2:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
800024b6:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800024ba:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800024be:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
800024c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800024c6 <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800024c6:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800024ca:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800024cc:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800024d0:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800024d4:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800024d8:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
800024dc:	5e fc       	retal	r12

800024de <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800024de:	2f 8b       	sub	r11,-8
800024e0:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800024e4:	a1 a8       	sbr	r8,0x0
800024e6:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800024ea:	5e fc       	retal	r12

800024ec <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800024ec:	79 58       	ld.w	r8,r12[0x54]
800024ee:	ed b8 00 00 	bld	r8,0x0
800024f2:	cf d1       	brne	800024ec <pm_wait_for_pll0_locked>
}
800024f4:	5e fc       	retal	r12

800024f6 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800024f6:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800024f8:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800024fc:	99 08       	st.w	r12[0x0],r8
}
800024fe:	5e fc       	retal	r12

80002500 <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002500:	ec 5b bb 9f 	cp.w	r11,899999
80002504:	e0 8b 00 18 	brhi	80002534 <pm_switch_to_osc0+0x34>
80002508:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000250a:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000250c:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002510:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002512:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002514:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002518:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
8000251a:	78 08       	ld.w	r8,r12[0x0]
8000251c:	a3 a8       	sbr	r8,0x2
8000251e:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002520:	79 58       	ld.w	r8,r12[0x54]
80002522:	ed b8 00 07 	bld	r8,0x7
80002526:	cf d1       	brne	80002520 <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002528:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000252a:	30 19       	mov	r9,1
8000252c:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002530:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
80002532:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002534:	e0 68 c6 bf 	mov	r8,50879
80002538:	ea 18 00 2d 	orh	r8,0x2d
8000253c:	10 3b       	cp.w	r11,r8
8000253e:	e0 88 00 0c 	brls	80002556 <pm_switch_to_osc0+0x56>
80002542:	e0 68 12 00 	mov	r8,4608
80002546:	ea 18 00 7a 	orh	r8,0x7a
8000254a:	10 3b       	cp.w	r11,r8
8000254c:	f9 bb 03 06 	movlo	r11,6
80002550:	f9 bb 02 07 	movhs	r11,7
80002554:	cd bb       	rjmp	8000250a <pm_switch_to_osc0+0xa>
80002556:	30 5b       	mov	r11,5
80002558:	cd 9b       	rjmp	8000250a <pm_switch_to_osc0+0xa>

8000255a <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
8000255a:	f8 c9 00 01 	sub	r9,r12,1
8000255e:	f8 08 16 01 	lsr	r8,r12,0x1
80002562:	f2 08 00 08 	add	r8,r9,r8
80002566:	f0 0b 00 0b 	add	r11,r8,r11
8000256a:	f6 0c 0d 0a 	divu	r10,r11,r12
8000256e:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
80002570:	f4 c8 00 01 	sub	r8,r10,1
80002574:	e0 48 00 fe 	cp.w	r8,254
80002578:	e0 8b 00 04 	brhi	80002580 <getBaudDiv+0x26>
    return -1;
  }

  return baudDiv;
8000257c:	5c 8c       	casts.h	r12
}
8000257e:	5e fc       	retal	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);

  if (baudDiv <= 0 || baudDiv > 255) {
80002580:	5e fe       	retal	-1

80002582 <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002582:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002584:	30 1a       	mov	r10,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002586:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002588:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000258c:	f4 09 18 00 	cp.b	r9,r10
80002590:	e0 88 00 04 	brls	80002598 <spi_initMaster+0x16>
80002594:	30 2c       	mov	r12,2
80002596:	d8 02       	popm	pc
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002598:	e0 6a 00 80 	mov	r10,128
8000259c:	99 0a       	st.w	r12[0x0],r10

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
8000259e:	30 0b       	mov	r11,0

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800025a0:	70 1a       	ld.w	r10,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
800025a2:	30 1e       	mov	lr,1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
800025a4:	16 9c       	mov	r12,r11
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
800025a6:	f5 de d0 01 	bfins	r10,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800025aa:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800025ae:	30 f9       	mov	r9,15

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
800025b0:	f5 db d0 e1 	bfins	r10,r11,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800025b4:	f5 d9 d2 04 	bfins	r10,r9,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
800025b8:	91 1a       	st.w	r8[0x4],r10

  return SPI_OK;
}
800025ba:	d8 02       	popm	pc

800025bc <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800025bc:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800025be:	30 18       	mov	r8,1
800025c0:	f0 0b 18 00 	cp.b	r11,r8
800025c4:	5f be       	srhi	lr
800025c6:	f0 0a 18 00 	cp.b	r10,r8
800025ca:	5f b8       	srhi	r8
800025cc:	1c 48       	or	r8,lr
800025ce:	c0 a1       	brne	800025e2 <spi_selectionMode+0x26>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
800025d0:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
800025d2:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800025d6:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
800025da:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
800025de:	99 18       	st.w	r12[0x4],r8
800025e0:	d8 0a       	popm	pc,r12=0
                               unsigned char pcs_decode,
                               unsigned char delay)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800025e2:	30 2c       	mov	r12,2
800025e4:	d8 02       	popm	pc

800025e6 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800025e6:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800025e8:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800025ea:	ea 19 00 0f 	orh	r9,0xf
800025ee:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800025f0:	78 1c       	ld.w	r12,r12[0x4]
800025f2:	e2 1c 00 04 	andl	r12,0x4,COH
800025f6:	c0 80       	breq	80002606 <spi_selectChip+0x20>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800025f8:	30 e9       	mov	r9,14
800025fa:	f2 0b 18 00 	cp.b	r11,r9
800025fe:	e0 88 00 12 	brls	80002622 <spi_selectChip+0x3c>
  } else {
    if (chip > 3) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002602:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
80002604:	5e fc       	retal	r12
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
  } else {
    if (chip > 3) {
80002606:	30 39       	mov	r9,3
80002608:	f2 0b 18 00 	cp.b	r11,r9
8000260c:	fe 9b ff fb 	brhi	80002602 <spi_selectChip+0x1c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002610:	70 19       	ld.w	r9,r8[0x4]
80002612:	2f 0b       	sub	r11,-16
80002614:	30 1a       	mov	r10,1
80002616:	f4 0b 09 4b 	lsl	r11,r10,r11
8000261a:	5c db       	com	r11
8000261c:	12 6b       	and	r11,r9
8000261e:	91 1b       	st.w	r8[0x4],r11
80002620:	5e fc       	retal	r12
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80002622:	70 19       	ld.w	r9,r8[0x4]
80002624:	b1 6b       	lsl	r11,0x10
80002626:	30 0c       	mov	r12,0
80002628:	ea 1b ff f0 	orh	r11,0xfff0
8000262c:	e8 1b ff ff 	orl	r11,0xffff
80002630:	12 6b       	and	r11,r9
80002632:	91 1b       	st.w	r8[0x4],r11
80002634:	5e fc       	retal	r12

80002636 <spi_unselectChip>:
  return SPI_OK;
}


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002636:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002638:	c0 58       	rjmp	80002642 <spi_unselectChip+0xc>
8000263a:	2f f9       	sub	r9,-1
    if (!timeout--) {
8000263c:	e0 49 3a 99 	cp.w	r9,15001
80002640:	c0 d0       	breq	8000265a <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002642:	78 48       	ld.w	r8,r12[0x10]
80002644:	ed b8 00 09 	bld	r8,0x9
80002648:	cf 91       	brne	8000263a <spi_unselectChip+0x4>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000264a:	78 18       	ld.w	r8,r12[0x4]
8000264c:	ea 18 00 0f 	orh	r8,0xf
80002650:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002652:	fc 18 01 00 	movh	r8,0x100
80002656:	99 08       	st.w	r12[0x0],r8
80002658:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000265a:	5e ff       	retal	1

8000265c <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
8000265c:	eb cd 40 fe 	pushm	r1-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002660:	30 34       	mov	r4,3


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002662:	16 97       	mov	r7,r11
80002664:	18 96       	mov	r6,r12
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002666:	f7 35 00 0c 	ld.ub	r5,r11[12]
8000266a:	e8 05 18 00 	cp.b	r5,r4
8000266e:	e0 8b 00 09 	brhi	80002680 <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
80002672:	f7 32 00 0b 	ld.ub	r2,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002676:	30 13       	mov	r3,1
80002678:	e6 02 18 00 	cp.b	r2,r3
8000267c:	e0 88 00 05 	brls	80002686 <spi_setupChipReg+0x2a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
      break;
80002680:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
80002682:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80002686:	f7 31 00 08 	ld.ub	r1,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000268a:	30 78       	mov	r8,7
8000268c:	f0 01 18 00 	cp.b	r1,r8
80002690:	fe 98 ff f8 	brls	80002680 <spi_setupChipReg+0x24>
80002694:	31 08       	mov	r8,16
80002696:	f0 01 18 00 	cp.b	r1,r8
8000269a:	fe 9b ff f3 	brhi	80002680 <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000269e:	14 9b       	mov	r11,r10
800026a0:	6e 1c       	ld.w	r12,r7[0x4]
800026a2:	c5 cf       	rcall	8000255a <getBaudDiv>
800026a4:	ce e5       	brlt	80002680 <spi_setupChipReg+0x24>

  if (baudDiv < 0) {
800026a6:	0a 9a       	mov	r10,r5
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800026a8:	ec 1a 00 01 	eorl	r10,0x1
800026ac:	30 08       	mov	r8,0
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800026ae:	a1 95       	lsr	r5,0x1
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800026b0:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
800026b4:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800026b8:	ef 3a 00 09 	ld.ub	r10,r7[9]
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800026bc:	20 81       	sub	r1,8
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800026be:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800026c2:	0f 89       	ld.ub	r9,r7[0x0]
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
800026c4:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800026c8:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
800026cc:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800026d0:	ef 3a 00 0a 	ld.ub	r10,r7[10]
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800026d4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800026d8:	e6 09 18 00 	cp.b	r9,r3

  switch(options->reg) {
800026dc:	c0 f0       	breq	800026fa <spi_setupChipReg+0x9e>
800026de:	c0 b3       	brcs	800026f4 <spi_setupChipReg+0x98>
800026e0:	30 2a       	mov	r10,2
800026e2:	f4 09 18 00 	cp.b	r9,r10
800026e6:	c0 d0       	breq	80002700 <spi_setupChipReg+0xa4>
800026e8:	e8 09 18 00 	cp.b	r9,r4
800026ec:	cc a1       	brne	80002680 <spi_setupChipReg+0x24>
800026ee:	8d f8       	st.w	r6[0x3c],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800026f0:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800026f4:	8d c8       	st.w	r6[0x30],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
800026f6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800026fa:	8d d8       	st.w	r6[0x34],r8
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
800026fc:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002700:	8d e8       	st.w	r6[0x38],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002702:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002706:	d7 03       	nop

80002708 <spi_enable>:
80002708:	30 18       	mov	r8,1
8000270a:	99 08       	st.w	r12[0x0],r8


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
8000270c:	5e fc       	retal	r12

8000270e <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000270e:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002710:	c0 58       	rjmp	8000271a <spi_write+0xc>
80002712:	2f f9       	sub	r9,-1
    if (!timeout--) {
80002714:	e0 49 3a 99 	cp.w	r9,15001
80002718:	c0 80       	breq	80002728 <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000271a:	78 48       	ld.w	r8,r12[0x10]
8000271c:	ed b8 00 01 	bld	r8,0x1
80002720:	cf 91       	brne	80002712 <spi_write+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002722:	5c 7b       	castu.h	r11
80002724:	99 3b       	st.w	r12[0xc],r11
80002726:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
80002728:	5e ff       	retal	1

8000272a <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
8000272a:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000272c:	76 09       	ld.w	r9,r11[0x0]
8000272e:	58 29       	cp.w	r9,2
80002730:	e0 8b 00 4b 	brhi	800027c6 <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002734:	76 18       	ld.w	r8,r11[0x4]
80002736:	10 9e       	mov	lr,r8
80002738:	e6 1e c0 00 	andh	lr,0xc000,COH
8000273c:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002740:	af ba       	sbr	r10,0xf
80002742:	1c 4a       	or	r10,lr
80002744:	10 9e       	mov	lr,r8
80002746:	e6 1e 30 00 	andh	lr,0x3000,COH
8000274a:	1c 4a       	or	r10,lr
8000274c:	10 9e       	mov	lr,r8
8000274e:	e6 1e 0c 00 	andh	lr,0xc00,COH
80002752:	1c 4a       	or	r10,lr
80002754:	10 9e       	mov	lr,r8
80002756:	e6 1e 03 00 	andh	lr,0x300,COH
8000275a:	1c 4a       	or	r10,lr
8000275c:	10 9e       	mov	lr,r8
8000275e:	e6 1e 00 c0 	andh	lr,0xc0,COH
80002762:	1c 4a       	or	r10,lr
80002764:	10 9e       	mov	lr,r8
80002766:	e6 1e 00 30 	andh	lr,0x30,COH
8000276a:	1c 4a       	or	r10,lr
8000276c:	10 9e       	mov	lr,r8
8000276e:	e6 1e 00 0c 	andh	lr,0xc,COH
80002772:	1c 4a       	or	r10,lr
80002774:	10 9e       	mov	lr,r8
80002776:	e6 1e 00 03 	andh	lr,0x3,COH
8000277a:	1c 4a       	or	r10,lr
8000277c:	10 9e       	mov	lr,r8
8000277e:	e2 1e 60 00 	andl	lr,0x6000,COH
80002782:	1c 4a       	or	r10,lr
80002784:	10 9e       	mov	lr,r8
80002786:	e2 1e 10 00 	andl	lr,0x1000,COH
8000278a:	1c 4a       	or	r10,lr
8000278c:	10 9e       	mov	lr,r8
8000278e:	e2 1e 0c 00 	andl	lr,0xc00,COH
80002792:	1c 4a       	or	r10,lr
80002794:	10 9e       	mov	lr,r8
80002796:	e2 1e 03 00 	andl	lr,0x300,COH
8000279a:	1c 4a       	or	r10,lr
8000279c:	10 9e       	mov	lr,r8
8000279e:	e2 1e 00 80 	andl	lr,0x80,COH
800027a2:	10 9b       	mov	r11,r8
800027a4:	1c 4a       	or	r10,lr
800027a6:	e2 1b 00 08 	andl	r11,0x8,COH
800027aa:	10 9e       	mov	lr,r8
800027ac:	a5 69       	lsl	r9,0x4
800027ae:	e2 1e 00 40 	andl	lr,0x40,COH
800027b2:	2f f9       	sub	r9,-1
800027b4:	1c 4a       	or	r10,lr
800027b6:	e2 18 00 30 	andl	r8,0x30,COH
800027ba:	f5 e8 10 08 	or	r8,r10,r8
800027be:	16 48       	or	r8,r11
800027c0:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800027c4:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800027c6:	dc 0a       	popm	pc,r12=-1

800027c8 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027c8:	58 2b       	cp.w	r11,2
800027ca:	e0 8b 00 07 	brhi	800027d8 <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800027ce:	a7 6b       	lsl	r11,0x6
800027d0:	16 0c       	add	r12,r11
800027d2:	30 58       	mov	r8,5
800027d4:	99 08       	st.w	r12[0x0],r8
800027d6:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027d8:	5e fe       	retal	-1

800027da <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027da:	58 2b       	cp.w	r11,2
800027dc:	e0 8b 00 07 	brhi	800027ea <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800027e0:	a7 6b       	lsl	r11,0x6
800027e2:	2e 0b       	sub	r11,-32
800027e4:	16 0c       	add	r12,r11
800027e6:	78 0c       	ld.w	r12,r12[0x0]
}
800027e8:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027ea:	5e fe       	retal	-1

800027ec <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800027ec:	58 2b       	cp.w	r11,2
800027ee:	e0 8b 00 1a 	brhi	80002822 <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800027f2:	f6 08 15 04 	lsl	r8,r11,0x4
800027f6:	2f f8       	sub	r8,-1
800027f8:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800027fc:	ed b8 00 0f 	bld	r8,0xf
80002800:	c0 e1       	brne	8000281c <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80002802:	a7 6b       	lsl	r11,0x6
80002804:	f8 0b 00 0b 	add	r11,r12,r11
80002808:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000280c:	2e 4b       	sub	r11,-28
8000280e:	76 08       	ld.w	r8,r11[0x0]
80002810:	e0 18 00 00 	andl	r8,0x0
80002814:	f9 e8 10 08 	or	r8,r12,r8
80002818:	97 08       	st.w	r11[0x0],r8

  return value;
}
8000281a:	5e fc       	retal	r12
8000281c:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80002820:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002822:	5e fe       	retal	-1

80002824 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002824:	d4 31       	pushm	r0-r7,lr
80002826:	20 3d       	sub	sp,12
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002828:	e1 b8 00 00 	mfsr	r8,0x0
8000282c:	50 08       	stdsp	sp[0x0],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000282e:	58 2b       	cp.w	r11,2
80002830:	e0 8b 00 74 	brhi	80002918 <tc_configure_interrupts+0xf4>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002834:	74 0e       	ld.w	lr,r10[0x0]
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80002836:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000283a:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000283e:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80002842:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80002846:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000284a:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000284e:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002852:	e6 02 15 06 	lsl	r2,r3,0x6
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80002856:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000285a:	e5 e8 10 72 	or	r2,r2,r8<<0x7
8000285e:	12 42       	or	r2,r9
80002860:	e5 e4 10 52 	or	r2,r2,r4<<0x5
80002864:	e5 e5 10 42 	or	r2,r2,r5<<0x4
80002868:	e5 e6 10 32 	or	r2,r2,r6<<0x3
8000286c:	e5 e7 10 22 	or	r2,r2,r7<<0x2
80002870:	e5 ee 10 12 	or	r2,r2,lr<<0x1
80002874:	50 22       	stdsp	sp[0x8],r2
80002876:	f6 02 15 06 	lsl	r2,r11,0x6
8000287a:	40 21       	lddsp	r1,sp[0x8]
8000287c:	f8 02 00 00 	add	r0,r12,r2
80002880:	2d c0       	sub	r0,-36
80002882:	81 01       	st.w	r0[0x0],r1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002884:	40 01       	lddsp	r1,sp[0x0]
80002886:	ee 11 00 01 	eorh	r1,0x1
8000288a:	e3 d1 c2 01 	bfextu	r1,r1,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000288e:	c4 71       	brne	8000291c <tc_configure_interrupts+0xf8>
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002890:	ec 19 00 01 	eorl	r9,0x1
80002894:	e0 6a 00 80 	mov	r10,128
80002898:	58 08       	cp.w	r8,0
8000289a:	f4 08 17 00 	moveq	r8,r10
8000289e:	f9 b8 01 00 	movne	r8,0
800028a2:	12 48       	or	r8,r9
800028a4:	f8 02 00 02 	add	r2,r12,r2
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800028a8:	58 03       	cp.w	r3,0
800028aa:	f9 b3 00 40 	moveq	r3,64
800028ae:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800028b2:	58 04       	cp.w	r4,0
800028b4:	f9 b4 00 20 	moveq	r4,32
800028b8:	f9 b4 01 00 	movne	r4,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800028bc:	f1 e3 10 03 	or	r3,r8,r3
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800028c0:	58 05       	cp.w	r5,0
800028c2:	f9 b5 00 10 	moveq	r5,16
800028c6:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800028ca:	58 06       	cp.w	r6,0
800028cc:	f9 b6 00 08 	moveq	r6,8
800028d0:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800028d4:	58 07       	cp.w	r7,0
800028d6:	f9 b7 00 04 	moveq	r7,4
800028da:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800028de:	58 0e       	cp.w	lr,0
800028e0:	f9 be 00 02 	moveq	lr,2
800028e4:	f9 be 01 00 	movne	lr,0
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800028e8:	a7 6b       	lsl	r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800028ea:	2d 82       	sub	r2,-40
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800028ec:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800028ee:	e7 e4 10 04 	or	r4,r3,r4
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800028f2:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800028f4:	e9 e5 10 05 	or	r5,r4,r5
800028f8:	eb e6 10 06 	or	r6,r5,r6
800028fc:	ed e7 10 07 	or	r7,r6,r7
80002900:	ef ee 10 0e 	or	lr,r7,lr
80002904:	85 0e       	st.w	r2[0x0],lr
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80002906:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002908:	58 01       	cp.w	r1,0
8000290a:	c0 41       	brne	80002912 <tc_configure_interrupts+0xee>
8000290c:	02 9c       	mov	r12,r1

  return 0;
}
8000290e:	2f dd       	sub	sp,-12
80002910:	d8 32       	popm	r0-r7,pc
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
  if (global_interrupt_enabled) Enable_global_interrupt();
80002912:	d5 03       	csrf	0x10
80002914:	2f dd       	sub	sp,-12
80002916:	d8 3a       	popm	r0-r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002918:	2f dd       	sub	sp,-12
8000291a:	dc 3a       	popm	r0-r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000291c:	d3 03       	ssrf	0x10
8000291e:	74 0e       	ld.w	lr,r10[0x0]
80002920:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
80002924:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
80002928:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
8000292c:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
80002930:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
80002934:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
80002938:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
8000293c:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
80002940:	ca 8b       	rjmp	80002890 <tc_configure_interrupts+0x6c>

80002942 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002942:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002944:	f6 08 15 04 	lsl	r8,r11,0x4
80002948:	14 38       	cp.w	r8,r10
8000294a:	e0 8b 00 26 	brhi	80002996 <usart_set_async_baudrate+0x54>
8000294e:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002950:	f0 09 16 01 	lsr	r9,r8,0x1
80002954:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80002958:	f2 08 0d 08 	divu	r8,r9,r8
8000295c:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8000295e:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002960:	f0 cb 00 01 	sub	r11,r8,1
80002964:	e0 4b ff fe 	cp.w	r11,65534
80002968:	e0 8b 00 1b 	brhi	8000299e <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8000296c:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8000296e:	e8 6b 00 00 	mov	r11,524288
80002972:	e4 1a ff f7 	andh	r10,0xfff7
80002976:	e0 1a fe cf 	andl	r10,0xfecf
8000297a:	59 0e       	cp.w	lr,16
8000297c:	f6 0e 17 10 	movne	lr,r11
80002980:	f9 be 00 00 	moveq	lr,0
80002984:	fd ea 10 0a 	or	r10,lr,r10
80002988:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8000298a:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
8000298e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002992:	99 88       	st.w	r12[0x20],r8
80002994:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002996:	f6 08 15 03 	lsl	r8,r11,0x3
8000299a:	30 8e       	mov	lr,8
8000299c:	cd ab       	rjmp	80002950 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000299e:	da 0a       	popm	pc,r12=1

800029a0 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800029a0:	17 8a       	ld.ub	r10,r11[0x0]
800029a2:	58 0a       	cp.w	r10,0
800029a4:	5e 0c       	reteq	r12
800029a6:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800029a8:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800029aa:	ed b8 00 01 	bld	r8,0x1
800029ae:	c0 91       	brne	800029c0 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800029b0:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
800029b4:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800029b6:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800029b8:	17 8a       	ld.ub	r10,r11[0x0]
800029ba:	58 0a       	cp.w	r10,0
800029bc:	cf 51       	brne	800029a6 <usart_write_line+0x6>
800029be:	5e fc       	retal	r12
800029c0:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800029c2:	e0 49 27 10 	cp.w	r9,10000
800029c6:	cf 11       	brne	800029a8 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
800029c8:	2f fb       	sub	r11,-1
800029ca:	cf 7b       	rjmp	800029b8 <usart_write_line+0x18>

800029cc <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800029cc:	eb cd 40 e0 	pushm	r5-r7,lr
800029d0:	18 97       	mov	r7,r12
800029d2:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800029d4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800029d8:	ed b8 00 10 	bld	r8,0x10
800029dc:	c2 e1       	brne	80002a38 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
800029de:	3f f8       	mov	r8,-1
800029e0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800029e2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800029e4:	30 08       	mov	r8,0
800029e6:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
800029e8:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
800029ea:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800029ec:	ea 68 61 0c 	mov	r8,680204
800029f0:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800029f2:	58 06       	cp.w	r6,0
800029f4:	c2 00       	breq	80002a34 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
800029f6:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800029f8:	30 49       	mov	r9,4
800029fa:	f2 08 18 00 	cp.b	r8,r9
800029fe:	e0 88 00 1b 	brls	80002a34 <usart_init_rs232+0x68>
80002a02:	30 95       	mov	r5,9
80002a04:	ea 08 18 00 	cp.b	r8,r5
80002a08:	e0 8b 00 16 	brhi	80002a34 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002a0c:	0d d9       	ld.ub	r9,r6[0x5]
80002a0e:	30 78       	mov	r8,7
80002a10:	f0 09 18 00 	cp.b	r9,r8
80002a14:	e0 8b 00 10 	brhi	80002a34 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
80002a18:	8c 39       	ld.sh	r9,r6[0x6]
80002a1a:	e0 68 01 01 	mov	r8,257
80002a1e:	f0 09 19 00 	cp.h	r9,r8
80002a22:	e0 8b 00 09 	brhi	80002a34 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
80002a26:	ed 39 00 08 	ld.ub	r9,r6[8]
80002a2a:	30 38       	mov	r8,3
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	e0 88 00 0a 	brls	80002a44 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002a34:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002a38:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002a3a:	3f f8       	mov	r8,-1
80002a3c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002a3e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002a40:	d5 03       	csrf	0x10
80002a42:	cd 1b       	rjmp	800029e4 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002a44:	6c 0b       	ld.w	r11,r6[0x0]
80002a46:	0e 9c       	mov	r12,r7
80002a48:	c7 df       	rcall	80002942 <usart_set_async_baudrate>
80002a4a:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a4c:	cf 40       	breq	80002a34 <usart_init_rs232+0x68>
80002a4e:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002a50:	ea 08 18 00 	cp.b	r8,r5
80002a54:	c2 a0       	breq	80002aa8 <usart_init_rs232+0xdc>
80002a56:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002a58:	20 58       	sub	r8,5
80002a5a:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002a5e:	8f 18       	st.w	r7[0x4],r8
80002a60:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002a62:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002a66:	0d d8       	ld.ub	r8,r6[0x5]
80002a68:	a9 78       	lsl	r8,0x9
80002a6a:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002a6e:	12 48       	or	r8,r9
80002a70:	8f 18       	st.w	r7[0x4],r8
80002a72:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002a74:	8c 38       	ld.sh	r8,r6[0x6]
80002a76:	f2 08 19 00 	cp.h	r8,r9
80002a7a:	e0 88 00 11 	brls	80002a9c <usart_init_rs232+0xd0>
80002a7e:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002a80:	ad b9       	sbr	r9,0xd
80002a82:	8f 19       	st.w	r7[0x4],r9
80002a84:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002a86:	20 28       	sub	r8,2
80002a88:	8f a8       	st.w	r7[0x28],r8
80002a8a:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002a8c:	e0 18 ff f0 	andl	r8,0xfff0
80002a90:	8f 18       	st.w	r7[0x4],r8
80002a92:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002a94:	35 08       	mov	r8,80
80002a96:	8f 08       	st.w	r7[0x0],r8
80002a98:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002a9c:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002a9e:	5c 78       	castu.h	r8
80002aa0:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002aa4:	8f 18       	st.w	r7[0x4],r8
80002aa6:	cf 2b       	rjmp	80002a8a <usart_init_rs232+0xbe>
80002aa8:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002aaa:	b1 b8       	sbr	r8,0x11
80002aac:	8f 18       	st.w	r7[0x4],r8
80002aae:	cd 9b       	rjmp	80002a60 <usart_init_rs232+0x94>

80002ab0 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80002ab0:	eb cd 40 c0 	pushm	r6-r7,lr
80002ab4:	20 3d       	sub	sp,12
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80002ab6:	30 08       	mov	r8,0
80002ab8:	30 a9       	mov	r9,10
80002aba:	fb 68 00 0a 	st.b	sp[10],r8
80002abe:	1a 9b       	mov	r11,sp
  do
  {
    tmp[--i] = '0' + n % 10;
80002ac0:	e0 6e cc cd 	mov	lr,52429
80002ac4:	ea 1e cc cc 	orh	lr,0xcccc
80002ac8:	f8 0e 06 46 	mulu.d	r6,r12,lr
80002acc:	20 19       	sub	r9,1
80002ace:	0e 98       	mov	r8,r7
80002ad0:	a3 98       	lsr	r8,0x3
80002ad2:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80002ad6:	f8 0a 01 1c 	sub	r12,r12,r10<<0x1
80002ada:	2d 0c       	sub	r12,-48
80002adc:	f6 09 0b 0c 	st.b	r11[r9],r12
    n /= 10;
80002ae0:	10 9c       	mov	r12,r8
  } while (n);
80002ae2:	58 08       	cp.w	r8,0
80002ae4:	cf 21       	brne	80002ac8 <print_dbg_ulong+0x18>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80002ae6:	12 0b       	add	r11,r9
80002ae8:	fe 7c 14 00 	mov	r12,-60416
80002aec:	c5 af       	rcall	800029a0 <usart_write_line>
80002aee:	2f dd       	sub	sp,-12

void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
}
80002af0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80002af4 <print_dbg>:
80002af4:	d4 01       	pushm	lr
80002af6:	18 9b       	mov	r11,r12
80002af8:	fe 7c 14 00 	mov	r12,-60416


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80002afc:	c5 2f       	rcall	800029a0 <usart_write_line>
80002afe:	d8 02       	popm	pc

80002b00 <sd_mmc_spi_read_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA read transfer
//! page programming.
//!
void sd_mmc_spi_read_close_PDCA (void)
{
80002b00:	d4 01       	pushm	lr

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002b02:	e0 6b 00 ff 	mov	r11,255
80002b06:	fe 7c 28 00 	mov	r12,-55296
80002b0a:	c0 2e       	rcall	8000270e <spi_write>
80002b0c:	e0 6b 00 ff 	mov	r11,255
  spi_write(SD_MMC_SPI,0xFF);
80002b10:	fe 7c 28 00 	mov	r12,-55296
80002b14:	fe b0 fd fd 	rcall	8000270e <spi_write>
80002b18:	e0 6b 00 ff 	mov	r11,255

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002b1c:	fe 7c 28 00 	mov	r12,-55296
80002b20:	fe b0 fd f7 	rcall	8000270e <spi_write>
80002b24:	e0 6b 00 ff 	mov	r11,255
  spi_write(SD_MMC_SPI,0xFF);
80002b28:	fe 7c 28 00 	mov	r12,-55296
80002b2c:	fe b0 fd f1 	rcall	8000270e <spi_write>
80002b30:	30 2b       	mov	r11,2

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002b32:	fe 7c 28 00 	mov	r12,-55296
80002b36:	fe b0 fd 80 	rcall	80002636 <spi_unselectChip>
80002b3a:	d8 02       	popm	pc

80002b3c <init_events>:
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
80002b3c:	e0 6a 06 00 	mov	r10,1536
80002b40:	30 08       	mov	r8,0
  getIdx = 0;
80002b42:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
80002b44:	e0 6a 06 04 	mov	r10,1540
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
  getIdx = 0;
80002b48:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
80002b4a:	95 08       	st.w	r10[0x0],r8
80002b4c:	e0 68 06 08 	mov	r8,1544
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
80002b50:	f0 ca ff 00 	sub	r10,r8,-256

  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80002b54:	91 09       	st.w	r8[0x0],r9
80002b56:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
  }
}
80002b58:	2f 88       	sub	r8,-8
80002b5a:	14 38       	cp.w	r8,r10
80002b5c:	cf c1       	brne	80002b54 <init_events+0x18>
80002b5e:	5e fc       	retal	r12

80002b60 <post_event>:
80002b60:	d4 01       	pushm	lr
80002b62:	e1 bb 00 00 	mfsr	r11,0x0
80002b66:	d3 23       	ssrf	0x12
    print_dbg_ulong(e->eventType); print_dbg(".");
  } 
  */

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
80002b68:	e0 69 06 00 	mov	r9,1536
  INCR_EVENT_INDEX( putIdx );
80002b6c:	72 0a       	ld.w	r10,r9[0x0]
80002b6e:	f4 c8 ff ff 	sub	r8,r10,-1
80002b72:	93 08       	st.w	r9[0x0],r8
80002b74:	e0 48 00 20 	cp.w	r8,32
80002b78:	f9 b8 00 00 	moveq	r8,0
80002b7c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
80002b80:	e0 6e 06 04 	mov	lr,1540
80002b84:	7c 0e       	ld.w	lr,lr[0x0]
    sysEvents[ putIdx ].eventType = e->eventType;
80002b86:	10 3e       	cp.w	lr,r8
    sysEvents[ putIdx ].eventData = e->eventData;
80002b88:	c1 00       	breq	80002ba8 <post_event+0x48>
80002b8a:	e0 69 06 08 	mov	r9,1544
80002b8e:	f2 08 00 3a 	add	r10,r9,r8<<0x3
80002b92:	78 1e       	ld.w	lr,r12[0x4]

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
  if ( putIdx != getIdx  ) {
    sysEvents[ putIdx ].eventType = e->eventType;
80002b94:	95 1e       	st.w	r10[0x4],lr
80002b96:	78 0a       	ld.w	r10,r12[0x0]
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
  }
  
  if (fReenableInterrupts) {
80002b98:	30 1c       	mov	r12,1
80002b9a:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
    Enable_interrupt_level( TIMER_INT_LEVEL );
80002b9e:	ed bb 00 12 	bld	r11,0x12
    sysEvents[ putIdx ].eventType = e->eventType;
    sysEvents[ putIdx ].eventData = e->eventData;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80002ba2:	c0 20       	breq	80002ba6 <post_event+0x46>
80002ba4:	d5 23       	csrf	0x12
80002ba6:	d8 02       	popm	pc
80002ba8:	93 0a       	st.w	r9[0x0],r10
80002baa:	30 0c       	mov	r12,0
80002bac:	cf 9b       	rjmp	80002b9e <post_event+0x3e>
80002bae:	d7 03       	nop

80002bb0 <get_next_event>:
80002bb0:	18 99       	mov	r9,r12
80002bb2:	e1 bb 00 00 	mfsr	r11,0x0
// Returns non-zero if an event was available
bool get_next_event( event_t *e ) {
  bool status;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );
80002bb6:	d3 23       	ssrf	0x12
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80002bb8:	e0 68 06 00 	mov	r8,1536
80002bbc:	e0 6a 06 04 	mov	r10,1540
80002bc0:	70 0c       	ld.w	r12,r8[0x0]
80002bc2:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
80002bc4:	18 38       	cp.w	r8,r12
80002bc6:	c1 80       	breq	80002bf6 <get_next_event+0x46>
80002bc8:	2f f8       	sub	r8,-1
80002bca:	95 08       	st.w	r10[0x0],r8
80002bcc:	e0 48 00 20 	cp.w	r8,32
80002bd0:	f9 b8 00 00 	moveq	r8,0
    e->eventType = sysEvents[ getIdx ].eventType;
80002bd4:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->eventData = sysEvents[ getIdx ].eventData;
80002bd8:	e0 6a 06 08 	mov	r10,1544
  Disable_interrupt_level( TIMER_INT_LEVEL );
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
80002bdc:	f4 08 00 3c 	add	r12,r10,r8<<0x3
80002be0:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
    e->eventData = sysEvents[ getIdx ].eventData;
80002be4:	78 1c       	ld.w	r12,r12[0x4]
    e->eventType  = 0xff;
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80002be6:	93 08       	st.w	r9[0x0],r8
80002be8:	93 1c       	st.w	r9[0x4],r12
80002bea:	30 1c       	mov	r12,1
    Enable_interrupt_level( TIMER_INT_LEVEL );
80002bec:	ed bb 00 12 	bld	r11,0x12
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
    e->eventData = 0;
80002bf0:	5e 0c       	reteq	r12
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80002bf2:	d5 23       	csrf	0x12
80002bf4:	5e fc       	retal	r12
    e->eventData = 0;
80002bf6:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80002bf8:	e0 68 00 ff 	mov	r8,255
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80002bfc:	93 1c       	st.w	r9[0x4],r12
80002bfe:	93 08       	st.w	r9[0x0],r8
80002c00:	ed bb 00 12 	bld	r11,0x12
80002c04:	5e 0c       	reteq	r12
80002c06:	cf 6b       	rjmp	80002bf2 <get_next_event+0x42>

80002c08 <process_enc>:
  enc[3].thresh = 40;

}

// post events based on encoder movements
void process_enc( const U8 idx) {
80002c08:	eb cd 40 f8 	pushm	r3-r7,lr
  //event_t e;  
  // S8 val = 0;
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);
80002c0c:	e0 65 19 c0 	mov	r5,6592
80002c10:	f8 0c 00 14 	add	r4,r12,r12<<0x1
80002c14:	ea 04 00 26 	add	r6,r5,r4<<0x2
80002c18:	0c 97       	mov	r7,r6
80002c1a:	0f 3c       	ld.ub	r12,r7++
80002c1c:	fe b0 fa fd 	rcall	80002216 <gpio_get_pin_value>
80002c20:	18 93       	mov	r3,r12
80002c22:	0f 8c       	ld.ub	r12,r7[0x0]
80002c24:	fe b0 fa f9 	rcall	80002216 <gpio_get_pin_value>
80002c28:	0d a8       	ld.ub	r8,r6[0x2]
80002c2a:	e6 0c 00 13 	add	r3,r3,r12<<0x1

  if (pos != enc[idx].pos) {
80002c2e:	5c 53       	castu.b	r3
80002c30:	e6 08 18 00 	cp.b	r8,r3
    enc[idx].val += enc_map[enc[idx].pos][pos];
80002c34:	c0 e0       	breq	80002c50 <process_enc+0x48>
    enc[idx].pos = pos;
80002c36:	2f f4       	sub	r4,-1
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);

  if (pos != enc[idx].pos) {
    enc[idx].val += enc_map[enc[idx].pos][pos];
80002c38:	ac a3       	st.b	r6[0x2],r3
80002c3a:	ea 04 04 29 	ld.sh	r9,r5[r4<<0x2]
80002c3e:	e6 08 00 23 	add	r3,r3,r8<<0x2
80002c42:	fe c8 89 52 	sub	r8,pc,-30382
80002c46:	f0 03 06 08 	ld.sb	r8,r8[r3]
80002c4a:	12 08       	add	r8,r9
80002c4c:	ea 04 0a 28 	st.h	r5[r4<<0x2],r8
80002c50:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80002c54 <init_clocks>:
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
}

// initialize clocks
void init_clocks(void) {
80002c54:	d4 01       	pushm	lr
  /// from 251e...
  // Switch to OSC0 to speed up  booting
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pm_switch_to_osc0( &AVR32_PM, FOSC0, OSC0_STARTUP );
80002c56:	30 3a       	mov	r10,3
80002c58:	e0 6b 1b 00 	mov	r11,6912
80002c5c:	ea 1b 00 b7 	orh	r11,0xb7
80002c60:	fe 7c 0c 00 	mov	r12,-62464
80002c64:	fe b0 fc 4e 	rcall	80002500 <pm_switch_to_osc0>

  // Set PLL0 (fed from OSC0 = 12 MHz) to 132 MHz
  pm_pll_setup( &AVR32_PM,
80002c68:	31 0e       	mov	lr,16
80002c6a:	30 08       	mov	r8,0
80002c6c:	1a de       	st.w	--sp,lr
80002c6e:	10 9b       	mov	r11,r8
80002c70:	30 19       	mov	r9,1
80002c72:	30 aa       	mov	r10,10
80002c74:	fe 7c 0c 00 	mov	r12,-62464
80002c78:	fe b0 fc 16 	rcall	800024a4 <pm_pll_setup>
		0,   // osc.
		16 ); // lockcount.

  // Set PLL operating range and divider (fpll = fvco/2)
  // -> PLL0 output = 66 MHz
  pm_pll_set_option( &AVR32_PM,
80002c7c:	30 08       	mov	r8,0
80002c7e:	30 19       	mov	r9,1
80002c80:	10 9b       	mov	r11,r8
80002c82:	12 9a       	mov	r10,r9
80002c84:	fe 7c 0c 00 	mov	r12,-62464
80002c88:	fe b0 fc 1f 	rcall	800024c6 <pm_pll_set_option>
		     1,  // pll_freq.
		     1,  // pll_div2. /// output frequency is divided by 2.
		     0 ); // pll_wbwdisable.

  // start PLL0 and wait for the lock
  pm_pll_enable( &AVR32_PM, 0 );
80002c8c:	30 0b       	mov	r11,0
80002c8e:	fe 7c 0c 00 	mov	r12,-62464
80002c92:	fe b0 fc 26 	rcall	800024de <pm_pll_enable>
  pm_wait_for_pll0_locked( &AVR32_PM );
80002c96:	fe 7c 0c 00 	mov	r12,-62464
80002c9a:	fe b0 fc 29 	rcall	800024ec <pm_wait_for_pll0_locked>

  // By default, all peripheral clocks to run at master clock rate

  // Set one waitstate for the flash.  Necessary for > 33MHz CPU freq.
  flashc_set_wait_state( 1 );
80002c9e:	30 1c       	mov	r12,1
80002ca0:	fe b0 fa aa 	rcall	800021f4 <flashc_set_wait_state>

  // Switch to PLL0 as the master clock
  pm_switch_to_clock( &AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0) ;
80002ca4:	30 2b       	mov	r11,2
80002ca6:	fe 7c 0c 00 	mov	r12,-62464
80002caa:	fe b0 fc 26 	rcall	800024f6 <pm_switch_to_clock>
80002cae:	2f fd       	sub	sp,-4
#endif

  // intitialize millisecond delay engine
  delay_init(sysclk_get_cpu_hz());
  */
}
80002cb0:	d8 02       	popm	pc
80002cb2:	d7 03       	nop

80002cb4 <init_oled_spi>:
80002cb4:	eb cd 40 80 	pushm	r7,lr
80002cb8:	20 4d       	sub	sp,16
80002cba:	fe c8 89 9e 	sub	r8,pc,-30306
80002cbe:	f0 ea 00 08 	ld.d	r10,r8[8]
80002cc2:	fa eb 00 08 	st.d	sp[8],r10
80002cc6:	f0 e8 00 00 	ld.d	r8,r8[0]
80002cca:	1a 97       	mov	r7,sp
80002ccc:	fa e9 00 00 	st.d	sp[0],r8
    .spi_mode = 3,
    .modfdis = 1
  };

  // Assign GPIO to SPI.
  gpio_enable_module(OLED_SPI_GPIO_MAP,
80002cd0:	30 6b       	mov	r11,6
80002cd2:	fe cc 89 c2 	sub	r12,pc,-30270
		     sizeof(OLED_SPI_GPIO_MAP) / sizeof(OLED_SPI_GPIO_MAP[0]));
  // Initialize as master.
  spi_initMaster(OLED_SPI, &spiOptions);
80002cd6:	fe b0 fb 00 	rcall	800022d6 <gpio_enable_module>
80002cda:	1a 9b       	mov	r11,sp
80002cdc:	fe 7c 28 00 	mov	r12,-55296
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(OLED_SPI, 0, 0, 0);
80002ce0:	fe b0 fc 51 	rcall	80002582 <spi_initMaster>
80002ce4:	30 09       	mov	r9,0
80002ce6:	fe 7c 28 00 	mov	r12,-55296
80002cea:	12 9a       	mov	r10,r9
80002cec:	12 9b       	mov	r11,r9
  // Enable SPI module.
  spi_enable(OLED_SPI);
80002cee:	fe b0 fc 67 	rcall	800025bc <spi_selectionMode>
80002cf2:	fe 7c 28 00 	mov	r12,-55296

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );
80002cf6:	fe b0 fd 09 	rcall	80002708 <spi_enable>
80002cfa:	1a 9b       	mov	r11,sp
80002cfc:	e0 6a 14 80 	mov	r10,5248
80002d00:	ea 1a 03 ef 	orh	r10,0x3ef
80002d04:	fe 7c 28 00 	mov	r12,-55296

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
80002d08:	fe b0 fc aa 	rcall	8000265c <spi_setupChipReg>
  spiOptions.baudrate     = 16000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 20;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 1;
80002d0c:	30 18       	mov	r8,1

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
80002d0e:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate     = 16000000;
80002d12:	ba 88       	st.b	sp[0x0],r8
80002d14:	e0 68 24 00 	mov	r8,9216
80002d18:	ea 18 00 f4 	orh	r8,0xf4
  spiOptions.bits         = 16;
80002d1c:	50 18       	stdsp	sp[0x4],r8
80002d1e:	31 08       	mov	r8,16
  spiOptions.spi_mode     = 2;
80002d20:	fb 68 00 08 	st.b	sp[8],r8
80002d24:	30 28       	mov	r8,2
  spiOptions.spck_delay   = 20;
80002d26:	fb 68 00 0c 	st.b	sp[12],r8
80002d2a:	31 48       	mov	r8,20
  spiOptions.trans_delay  = 5;
80002d2c:	fb 68 00 09 	st.b	sp[9],r8
80002d30:	30 58       	mov	r8,5
  spiOptions.stay_act     = 1;
  spiOptions.modfdis      = 0;
80002d32:	fb 68 00 0a 	st.b	sp[10],r8
80002d36:	30 08       	mov	r8,0
80002d38:	1a 9b       	mov	r11,sp

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80002d3a:	fb 68 00 0d 	st.b	sp[13],r8
80002d3e:	e0 6a 14 80 	mov	r10,5248
80002d42:	ea 1a 03 ef 	orh	r10,0x3ef
80002d46:	fe 7c 28 00 	mov	r12,-55296

}
80002d4a:	fe b0 fc 89 	rcall	8000265c <spi_setupChipReg>
80002d4e:	2f cd       	sub	sp,-16
80002d50:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d54 <init_gpio>:
80002d54:	d4 01       	pushm	lr
80002d56:	32 2c       	mov	r12,34
80002d58:	fe b0 fa 55 	rcall	80002202 <gpio_enable_pin_pull_up>
80002d5c:	32 3c       	mov	r12,35
80002d5e:	fe b0 fa 52 	rcall	80002202 <gpio_enable_pin_pull_up>
80002d62:	32 4c       	mov	r12,36
80002d64:	fe b0 fa 4f 	rcall	80002202 <gpio_enable_pin_pull_up>
80002d68:	32 5c       	mov	r12,37
80002d6a:	fe b0 fa 4c 	rcall	80002202 <gpio_enable_pin_pull_up>
void init_gpio(void) {
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80002d6e:	32 6c       	mov	r12,38
80002d70:	fe b0 fa 49 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
80002d74:	32 7c       	mov	r12,39
80002d76:	fe b0 fa 46 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
80002d7a:	32 8c       	mov	r12,40
80002d7c:	fe b0 fa 43 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80002d80:	32 9c       	mov	r12,41
80002d82:	fe b0 fa 40 	rcall	80002202 <gpio_enable_pin_pull_up>

  gpio_enable_pin_pull_up(SW0_PIN);
80002d86:	31 9c       	mov	r12,25
80002d88:	fe b0 fa 3d 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW1_PIN);
80002d8c:	31 ac       	mov	r12,26
80002d8e:	fe b0 fa 3a 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
80002d92:	31 bc       	mov	r12,27
80002d94:	fe b0 fa 37 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW3_PIN);
80002d98:	31 cc       	mov	r12,28
80002d9a:	fe b0 fa 34 	rcall	80002202 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW_EDIT_PIN);
80002d9e:	31 8c       	mov	r12,24
80002da0:	fe b0 fa 31 	rcall	80002202 <gpio_enable_pin_pull_up>
  //  gpio_enable_pin_glitch_filter(SW3_PIN);
}
80002da4:	d8 02       	popm	pc
80002da6:	d7 03       	nop

80002da8 <init_ftdi_usart>:
80002da8:	d4 01       	pushm	lr
80002daa:	30 2b       	mov	r11,2
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };

  // Set up GPIO for FTDI_USART
  gpio_enable_module(FTDI_USART_GPIO_MAP,
80002dac:	fe cc 8a a0 	sub	r12,pc,-30048
80002db0:	fe b0 fa 93 	rcall	800022d6 <gpio_enable_module>
                     sizeof(FTDI_USART_GPIO_MAP) / sizeof(FTDI_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(FTDI_USART, &FTDI_USART_OPTIONS, FPBA_HZ);
80002db4:	e0 6a 14 80 	mov	r10,5248
80002db8:	ea 1a 03 ef 	orh	r10,0x3ef
80002dbc:	fe cb 8a bc 	sub	r11,pc,-30020
80002dc0:	fe 7c 14 00 	mov	r12,-60416
}
80002dc4:	c0 4e       	rcall	800029cc <usart_init_rs232>
80002dc6:	d8 02       	popm	pc

80002dc8 <init_tc>:
80002dc8:	eb cd 40 80 	pushm	r7,lr
80002dcc:	fe cb 8a a0 	sub	r11,pc,-30048
80002dd0:	18 97       	mov	r7,r12
80002dd2:	fe b0 fc ac 	rcall	8000272a <tc_init_waveform>
80002dd6:	e0 6a 02 03 	mov	r10,515

  // set timer compare trigger.
  // we want it to overflow and generate an interrupt every 1 ms
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
80002dda:	30 0b       	mov	r11,0
80002ddc:	0e 9c       	mov	r12,r7
80002dde:	fe b0 fd 07 	rcall	800027ec <tc_write_rc>
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80002de2:	30 0b       	mov	r11,0
80002de4:	fe ca 8a b0 	sub	r10,pc,-30032
80002de8:	0e 9c       	mov	r12,r7
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80002dea:	fe b0 fd 1d 	rcall	80002824 <tc_configure_interrupts>
80002dee:	0e 9c       	mov	r12,r7
80002df0:	30 0b       	mov	r11,0
}
80002df2:	fe b0 fc eb 	rcall	800027c8 <tc_start>
80002df6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dfa:	d7 03       	nop

80002dfc <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
80002dfc:	d4 01       	pushm	lr
  //  U8 i;

  // enable interrupts on GPIO inputs

  // BFIN_HWAIT
  gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_PIN_CHANGE);
80002dfe:	30 0b       	mov	r11,0
80002e00:	30 5c       	mov	r12,5
80002e02:	fe b0 fa 2f 	rcall	80002260 <gpio_enable_pin_interrupt>

  // encoders
  gpio_enable_pin_interrupt( ENC0_S0_PIN,	GPIO_PIN_CHANGE);
80002e06:	30 0b       	mov	r11,0
80002e08:	32 2c       	mov	r12,34
80002e0a:	fe b0 fa 2b 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC0_S1_PIN,	GPIO_PIN_CHANGE);
80002e0e:	30 0b       	mov	r11,0
80002e10:	32 3c       	mov	r12,35
80002e12:	fe b0 fa 27 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S0_PIN,	GPIO_PIN_CHANGE);
80002e16:	30 0b       	mov	r11,0
80002e18:	32 4c       	mov	r12,36
80002e1a:	fe b0 fa 23 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S1_PIN,	GPIO_PIN_CHANGE);
80002e1e:	30 0b       	mov	r11,0
80002e20:	32 5c       	mov	r12,37
80002e22:	fe b0 fa 1f 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S0_PIN,	GPIO_PIN_CHANGE);
80002e26:	30 0b       	mov	r11,0
80002e28:	32 6c       	mov	r12,38
80002e2a:	fe b0 fa 1b 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S1_PIN,	GPIO_PIN_CHANGE);
80002e2e:	30 0b       	mov	r11,0
80002e30:	32 7c       	mov	r12,39
80002e32:	fe b0 fa 17 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S0_PIN,	GPIO_PIN_CHANGE);
80002e36:	30 0b       	mov	r11,0
80002e38:	32 8c       	mov	r12,40
80002e3a:	fe b0 fa 13 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S1_PIN,	GPIO_PIN_CHANGE);
80002e3e:	30 0b       	mov	r11,0
80002e40:	32 9c       	mov	r12,41
80002e42:	fe b0 fa 0f 	rcall	80002260 <gpio_enable_pin_interrupt>

  // switches
  gpio_enable_pin_interrupt( SW0_PIN,	        GPIO_PIN_CHANGE);
80002e46:	30 0b       	mov	r11,0
80002e48:	31 9c       	mov	r12,25
80002e4a:	fe b0 fa 0b 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW1_PIN,	        GPIO_PIN_CHANGE);
80002e4e:	30 0b       	mov	r11,0
80002e50:	31 ac       	mov	r12,26
80002e52:	fe b0 fa 07 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW2_PIN,	        GPIO_PIN_CHANGE);
80002e56:	30 0b       	mov	r11,0
80002e58:	31 bc       	mov	r12,27
80002e5a:	fe b0 fa 03 	rcall	80002260 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_PIN_CHANGE);
80002e5e:	30 0b       	mov	r11,0
80002e60:	31 cc       	mov	r12,28
80002e62:	fe b0 f9 ff 	rcall	80002260 <gpio_enable_pin_interrupt>
  // TEST:
  //  gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_FALLING_EDGE);
  gpio_enable_pin_interrupt( SW_EDIT_PIN,	GPIO_PIN_CHANGE);
80002e66:	30 0b       	mov	r11,0
80002e68:	31 8c       	mov	r12,24
80002e6a:	fe b0 f9 fb 	rcall	80002260 <gpio_enable_pin_interrupt>
  

  // PA00 - PA07
  INTC_register_interrupt( &irq_port0_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA00 / 8), UI_IRQ_LEVEL );
80002e6e:	30 2a       	mov	r10,2
80002e70:	34 0b       	mov	r11,64
80002e72:	fe cc fd e2 	sub	r12,pc,-542
80002e76:	fe b0 fa 73 	rcall	8000235c <INTC_register_interrupt>

  // PA16 - PA23
  // INTC_register_interrupt( &irq_port0_line2, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA16 / 8), UI_IRQ_LEVEL);

  // PA24 - PA31
  INTC_register_interrupt( &irq_port0_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA24 / 8), UI_IRQ_LEVEL);
80002e7a:	30 2a       	mov	r10,2
80002e7c:	34 3b       	mov	r11,67
80002e7e:	fe cc fe 62 	sub	r12,pc,-414

  // PB00 - PB07
  INTC_register_interrupt( &irq_port1_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB00 / 8), UI_IRQ_LEVEL );
80002e82:	fe b0 fa 6d 	rcall	8000235c <INTC_register_interrupt>
80002e86:	30 2a       	mov	r10,2
80002e88:	34 4b       	mov	r11,68
80002e8a:	fe cc fe ee 	sub	r12,pc,-274

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_LEVEL);
80002e8e:	fe b0 fa 67 	rcall	8000235c <INTC_register_interrupt>
80002e92:	30 2a       	mov	r10,2
80002e94:	34 5b       	mov	r11,69

  // PB24 - PB31
  //  INTC_register_interrupt( &irq_port1_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB24 / 8), UI_IRQ_LEVEL);

  // register IRQ for PDCA transfer
  INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1);
80002e96:	fe cc ff 26 	sub	r12,pc,-218
80002e9a:	fe b0 fa 61 	rcall	8000235c <INTC_register_interrupt>
80002e9e:	30 1a       	mov	r10,1

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
80002ea0:	36 0b       	mov	r11,96
80002ea2:	fe cc ff 82 	sub	r12,pc,-126
80002ea6:	fe b0 fa 5b 	rcall	8000235c <INTC_register_interrupt>
80002eaa:	30 0a       	mov	r10,0
}
80002eac:	e0 6b 01 c0 	mov	r11,448
80002eb0:	fe cc ff f4 	sub	r12,pc,-12
80002eb4:	fe b0 fa 54 	rcall	8000235c <INTC_register_interrupt>
80002eb8:	d8 02       	popm	pc
80002eba:	d7 03       	nop

80002ebc <irq_tc>:
80002ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80002ec0:	e0 68 07 0c 	mov	r8,1804
80002ec4:	30 1a       	mov	r10,1
80002ec6:	f0 e6 00 00 	ld.d	r6,r8[0]
80002eca:	30 0b       	mov	r11,0
80002ecc:	ec 0a 00 0a 	add	r10,r6,r10
}

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
80002ed0:	ee 0b 00 4b 	adc	r11,r7,r11
80002ed4:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
80002ed8:	e0 66 ff ff 	mov	r6,65535
80002edc:	ea 16 7f ff 	orh	r6,0x7fff
80002ee0:	f0 ea 00 00 	ld.d	r10,r8[0]
80002ee4:	30 07       	mov	r7,0
80002ee6:	0c 3a       	cp.w	r10,r6
80002ee8:	ee 0b 13 00 	cpc	r11,r7
80002eec:	e0 8b 00 10 	brhi	80002f0c <irq_tc+0x50>
    tcTicks = 0;
    tcOverflow = 1;
  } else {
    tcOverflow = 0;
80002ef0:	30 09       	mov	r9,0
80002ef2:	e0 68 07 09 	mov	r8,1801
  }
  process_timers();
80002ef6:	b0 89       	st.b	r8[0x0],r9
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80002ef8:	e0 a0 07 20 	rcall	80003d38 <process_timers>
80002efc:	30 0b       	mov	r11,0
80002efe:	fe 7c 38 00 	mov	r12,-51200

}
80002f02:	fe b0 fc 6c 	rcall	800027da <tc_read_sr>
80002f06:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
  // overflow control
  if(tcTicks > tcMax) { 
    tcTicks = 0;
80002f0a:	d6 03       	rete
80002f0c:	30 0a       	mov	r10,0
80002f0e:	30 0b       	mov	r11,0
    tcOverflow = 1;
80002f10:	f0 eb 00 00 	st.d	r8[0],r10
80002f14:	30 19       	mov	r9,1
80002f16:	e0 68 07 09 	mov	r8,1801
80002f1a:	b0 89       	st.b	r8[0x0],r9
80002f1c:	ce eb       	rjmp	80002ef8 <irq_tc+0x3c>
80002f1e:	d7 03       	nop

80002f20 <irq_pdca>:
80002f20:	d4 01       	pushm	lr
80002f22:	20 1d       	sub	sp,4
80002f24:	d3 03       	ssrf	0x10
80002f26:	30 0c       	mov	r12,0
  volatile U16 delay;
  // Disable all interrupts.
  Disable_global_interrupt();

  // Disable interrupt channel.
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80002f28:	fe b0 fa a3 	rcall	8000246e <pdca_disable_interrupt_transfer_complete>

  //unselects the SD/MMC memory.
  sd_mmc_spi_read_close_PDCA();
80002f2c:	fe b0 fd ea 	rcall	80002b00 <sd_mmc_spi_read_close_PDCA>

  // wait (FIXME??)
  delay=0; while(delay < 5000) { delay++; }
80002f30:	30 08       	mov	r8,0
80002f32:	ba 18       	st.h	sp[0x2],r8
80002f34:	e0 69 13 87 	mov	r9,4999
80002f38:	9a 18       	ld.sh	r8,sp[0x2]
80002f3a:	f2 08 19 00 	cp.h	r8,r9
80002f3e:	e0 8b 00 0a 	brhi	80002f52 <irq_pdca+0x32>
80002f42:	9a 18       	ld.sh	r8,sp[0x2]
80002f44:	2f f8       	sub	r8,-1
80002f46:	ba 18       	st.h	sp[0x2],r8
80002f48:	9a 18       	ld.sh	r8,sp[0x2]
80002f4a:	f2 08 19 00 	cp.h	r8,r9
80002f4e:	fe 98 ff fa 	brls	80002f42 <irq_pdca+0x22>

  // Disable unnecessary channel
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80002f52:	30 1c       	mov	r12,1
80002f54:	fe b0 fa 80 	rcall	80002454 <pdca_disable>
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80002f58:	30 0c       	mov	r12,0
80002f5a:	fe b0 fa 7d 	rcall	80002454 <pdca_disable>

  // Enable all interrupts.
  Enable_global_interrupt();
80002f5e:	d5 03       	csrf	0x10

  end_of_transfer = true;
80002f60:	30 19       	mov	r9,1
80002f62:	e0 68 19 f0 	mov	r8,6640
}
80002f66:	b0 89       	st.b	r8[0x0],r9
80002f68:	2f fd       	sub	sp,-4
80002f6a:	d4 02       	popm	lr
80002f6c:	d6 03       	rete
80002f6e:	d7 03       	nop

80002f70 <irq_port1_line1>:
80002f70:	d4 01       	pushm	lr
80002f72:	32 8c       	mov	r12,40
80002f74:	fe b0 f9 9b 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002f78:	c0 c1       	brne	80002f90 <irq_port1_line1+0x20>
80002f7a:	32 9c       	mov	r12,41
 if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  // ENC3_1
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
80002f7c:	fe b0 f9 97 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002f80:	c0 60       	breq	80002f8c <irq_port1_line1+0x1c>
    process_enc(3);
80002f82:	30 3c       	mov	r12,3
80002f84:	c4 2e       	rcall	80002c08 <process_enc>
80002f86:	32 9c       	mov	r12,41
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
80002f88:	fe b0 f9 9d 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
80002f8c:	d4 02       	popm	lr
  }

}
80002f8e:	d6 03       	rete
80002f90:	30 3c       	mov	r12,3
// interrupt handler for PB08-PB15
__attribute__((__interrupt__))
static void irq_port1_line1(void) {
  // ENC3_0
 if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
80002f92:	c3 be       	rcall	80002c08 <process_enc>
80002f94:	32 8c       	mov	r12,40
80002f96:	fe b0 f9 96 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
80002f9a:	cf 0b       	rjmp	80002f7a <irq_port1_line1+0xa>

80002f9c <irq_port1_line0>:
80002f9c:	d4 01       	pushm	lr
80002f9e:	32 2c       	mov	r12,34
80002fa0:	fe b0 f9 85 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002fa4:	c3 41       	brne	8000300c <irq_port1_line0+0x70>
80002fa6:	32 3c       	mov	r12,35
80002fa8:	fe b0 f9 81 	rcall	800022aa <gpio_get_pin_interrupt_flag>
 if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
80002fac:	c2 a1       	brne	80003000 <irq_port1_line0+0x64>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
80002fae:	32 4c       	mov	r12,36
80002fb0:	fe b0 f9 7d 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002fb4:	c2 01       	brne	80002ff4 <irq_port1_line0+0x58>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
80002fb6:	32 5c       	mov	r12,37
80002fb8:	fe b0 f9 79 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002fbc:	c1 61       	brne	80002fe8 <irq_port1_line0+0x4c>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
80002fbe:	32 6c       	mov	r12,38
80002fc0:	fe b0 f9 75 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002fc4:	c0 c1       	brne	80002fdc <irq_port1_line0+0x40>
    process_enc(2);
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
  }  
  // ENC2_1
  if(gpio_get_pin_interrupt_flag(ENC2_S1_PIN)) {
80002fc6:	32 7c       	mov	r12,39
80002fc8:	fe b0 f9 71 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80002fcc:	c0 60       	breq	80002fd8 <irq_port1_line0+0x3c>
    process_enc(2);
80002fce:	30 2c       	mov	r12,2
80002fd0:	c1 ce       	rcall	80002c08 <process_enc>
80002fd2:	32 7c       	mov	r12,39
    gpio_clear_pin_interrupt_flag(ENC2_S1_PIN);
80002fd4:	fe b0 f9 77 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
80002fd8:	d4 02       	popm	lr
  }
}
80002fda:	d6 03       	rete
80002fdc:	30 2c       	mov	r12,2
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
    process_enc(2);
80002fde:	c1 5e       	rcall	80002c08 <process_enc>
80002fe0:	32 6c       	mov	r12,38
80002fe2:	fe b0 f9 70 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
80002fe6:	cf 0b       	rjmp	80002fc6 <irq_port1_line0+0x2a>
80002fe8:	30 1c       	mov	r12,1
80002fea:	c0 fe       	rcall	80002c08 <process_enc>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
80002fec:	32 5c       	mov	r12,37
80002fee:	fe b0 f9 6a 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
80002ff2:	ce 6b       	rjmp	80002fbe <irq_port1_line0+0x22>
80002ff4:	30 1c       	mov	r12,1
80002ff6:	c0 9e       	rcall	80002c08 <process_enc>
80002ff8:	32 4c       	mov	r12,36
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
80002ffa:	fe b0 f9 64 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
80002ffe:	cd cb       	rjmp	80002fb6 <irq_port1_line0+0x1a>
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
80003000:	30 0c       	mov	r12,0
80003002:	c0 3e       	rcall	80002c08 <process_enc>
80003004:	32 3c       	mov	r12,35
80003006:	fe b0 f9 5e 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
8000300a:	cd 2b       	rjmp	80002fae <irq_port1_line0+0x12>
8000300c:	30 0c       	mov	r12,0
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
8000300e:	fe b0 fd fd 	rcall	80002c08 <process_enc>
80003012:	32 2c       	mov	r12,34
80003014:	fe b0 f9 57 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
// interrupt handler for PB00-PB07
__attribute__((__interrupt__))
static void irq_port1_line0(void) {
  // ENC0_0
 if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
80003018:	cc 7b       	rjmp	80002fa6 <irq_port1_line0+0xa>
8000301a:	d7 03       	nop

8000301c <irq_port0_line3>:
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
8000301c:	d4 01       	pushm	lr
8000301e:	31 9c       	mov	r12,25
80003020:	fe b0 f9 45 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80003024:	c2 e1       	brne	80003080 <irq_port0_line3+0x64>
80003026:	31 ac       	mov	r12,26
80003028:	fe b0 f9 41 	rcall	800022aa <gpio_get_pin_interrupt_flag>
8000302c:	c2 31       	brne	80003072 <irq_port0_line3+0x56>
8000302e:	31 bc       	mov	r12,27
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    process_sw(1);
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
80003030:	fe b0 f9 3d 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80003034:	c1 81       	brne	80003064 <irq_port0_line3+0x48>
    process_sw(2);
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
80003036:	31 cc       	mov	r12,28
80003038:	fe b0 f9 39 	rcall	800022aa <gpio_get_pin_interrupt_flag>
8000303c:	c0 d1       	brne	80003056 <irq_port0_line3+0x3a>
    process_sw(3);
    gpio_clear_pin_interrupt_flag(SW3_PIN);
  }
  // SW_EDIT
  if(gpio_get_pin_interrupt_flag(SW_EDIT_PIN)) {
8000303e:	31 8c       	mov	r12,24
80003040:	fe b0 f9 35 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80003044:	c0 70       	breq	80003052 <irq_port0_line3+0x36>
    process_sw(4);
80003046:	30 4c       	mov	r12,4
80003048:	e0 a0 06 58 	rcall	80003cf8 <process_sw>
    gpio_clear_pin_interrupt_flag(SW_EDIT_PIN);
8000304c:	31 8c       	mov	r12,24
8000304e:	fe b0 f9 3a 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
  }
}
80003052:	d4 02       	popm	lr
80003054:	d6 03       	rete
    process_sw(2);
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
    process_sw(3);
80003056:	30 3c       	mov	r12,3
80003058:	e0 a0 06 50 	rcall	80003cf8 <process_sw>
    gpio_clear_pin_interrupt_flag(SW3_PIN);
8000305c:	31 cc       	mov	r12,28
8000305e:	fe b0 f9 32 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
80003062:	ce eb       	rjmp	8000303e <irq_port0_line3+0x22>
    process_sw(1);
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
    process_sw(2);
80003064:	30 2c       	mov	r12,2
80003066:	e0 a0 06 49 	rcall	80003cf8 <process_sw>
    gpio_clear_pin_interrupt_flag(SW2_PIN);
8000306a:	31 bc       	mov	r12,27
8000306c:	fe b0 f9 2b 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
80003070:	ce 3b       	rjmp	80003036 <irq_port0_line3+0x1a>
    process_sw(0);
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    process_sw(1);
80003072:	30 1c       	mov	r12,1
80003074:	e0 a0 06 42 	rcall	80003cf8 <process_sw>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
80003078:	31 ac       	mov	r12,26
8000307a:	fe b0 f9 24 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
8000307e:	cd 8b       	rjmp	8000302e <irq_port0_line3+0x12>
// interrupt handler for PA23-PA30
__attribute__((__interrupt__))
static void irq_port0_line3(void) {
  //SW_F0
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    process_sw(0);
80003080:	30 0c       	mov	r12,0
80003082:	e0 a0 06 3b 	rcall	80003cf8 <process_sw>
    gpio_clear_pin_interrupt_flag(SW0_PIN);
80003086:	31 9c       	mov	r12,25
80003088:	fe b0 f9 1d 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
8000308c:	cc db       	rjmp	80003026 <irq_port0_line3+0xa>
8000308e:	d7 03       	nop

80003090 <irq_port0_line0>:
80003090:	d4 01       	pushm	lr
80003092:	30 5c       	mov	r12,5
80003094:	fe b0 f9 0b 	rcall	800022aa <gpio_get_pin_interrupt_flag>
80003098:	c0 a0       	breq	800030ac <irq_port0_line0+0x1c>
8000309a:	30 5c       	mov	r12,5
// interrupt handler for PA00-PA07
__attribute__((__interrupt__))
static void irq_port0_line0(void) {
  // BFIN_HWAIT
  if(gpio_get_pin_interrupt_flag(BFIN_HWAIT_PIN)) {
    hwait = gpio_get_pin_value(BFIN_HWAIT_PIN);
8000309c:	fe b0 f8 bd 	rcall	80002216 <gpio_get_pin_value>
800030a0:	e0 68 05 fc 	mov	r8,1532
    gpio_clear_pin_interrupt_flag(BFIN_HWAIT_PIN);
800030a4:	b0 8c       	st.b	r8[0x0],r12
800030a6:	30 5c       	mov	r12,5
800030a8:	fe b0 f9 0d 	rcall	800022c2 <gpio_clear_pin_interrupt_flag>
  }
}
800030ac:	d4 02       	popm	lr
800030ae:	d6 03       	rete

800030b0 <sdram_test>:
  return val;
}



void sdram_test(u8 print) {
800030b0:	eb cd 40 f8 	pushm	r3-r7,lr
800030b4:	18 93       	mov	r3,r12

  for(i=0; i<2048; i++) {
    read[i] = 0L;
  }
  
  if(print) {
800030b6:	58 0c       	cp.w	r12,0
800030b8:	c3 71       	brne	80003126 <sdram_test+0x76>
    print_dbg("\r\nstarting SDRAM test (96 words)...");
800030ba:	30 84       	mov	r4,8
800030bc:	30 09       	mov	r9,0
800030be:	68 08       	ld.w	r8,r4[0x0]
800030c0:	10 9a       	mov	r10,r8
*/

volatile unsigned long * sdram = SDRAM;

static void sdram_test_write(u32 addr, u32 val, u8 l) {
  sdram[addr] = val;
800030c2:	14 a9       	st.w	r10++,r9
  
  if(print) {
    print_dbg("\r\nstarting SDRAM test (96 words)...");
  }

  for(i=0; i<numWords; i++) {
800030c4:	2f f9       	sub	r9,-1
800030c6:	e0 49 01 00 	cp.w	r9,256
800030ca:	cf c1       	brne	800030c2 <sdram_test+0x12>
800030cc:	30 07       	mov	r7,0
800030ce:	0e 96       	mov	r6,r7
800030d0:	c0 28       	rjmp	800030d4 <sdram_test+0x24>
    sdram_test_write(i, i, i);
  }

  for(i=0; i<numWords; i++) {
800030d2:	68 08       	ld.w	r8,r4[0x0]
  unsigned long val;
  static char buf[64];

  val = sdram[addr];
  //  print_dbg("\r\n read: ")64; print_dbg_ulong(val);
  snprintf(buf, 64,
800030d4:	fe ca 8d 78 	sub	r10,pc,-29320

static u32 sdram_test_read(u32 addr, u32 i) {
  unsigned long val;
  static char buf[64];

  val = sdram[addr];
800030d8:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]
  //  print_dbg("\r\n read: ")64; print_dbg_ulong(val);
  snprintf(buf, 64,
800030dc:	34 0b       	mov	r11,64
800030de:	1a d6       	st.w	--sp,r6
800030e0:	e0 6c 07 14 	mov	r12,1812
800030e4:	1a d5       	st.w	--sp,r5
800030e6:	1a d6       	st.w	--sp,r6
  }

  for(i=0; i<numWords; i++) {
    read[i] = sdram_test_read(i, i); 
    if(i != read[i]) {
      errors++;
800030e8:	e0 a0 10 2c 	rcall	80005140 <snprintf>
800030ec:	0a 36       	cp.w	r6,r5
    sdram_test_write(i, i, i);
  }

  for(i=0; i<numWords; i++) {
    read[i] = sdram_test_read(i, i); 
    if(i != read[i]) {
800030ee:	f7 b7 01 ff 	subne	r7,-1

  for(i=0; i<numWords; i++) {
    sdram_test_write(i, i, i);
  }

  for(i=0; i<numWords; i++) {
800030f2:	2f dd       	sub	sp,-12
800030f4:	2f f6       	sub	r6,-1
800030f6:	e0 46 01 00 	cp.w	r6,256
    if(i != read[i]) {
      errors++;
    }
  }
  
  if(errors != 0) {
800030fa:	ce c1       	brne	800030d2 <sdram_test+0x22>
    if(print) {
800030fc:	58 07       	cp.w	r7,0
800030fe:	c0 50       	breq	80003108 <sdram_test+0x58>
80003100:	58 03       	cp.w	r3,0
80003102:	c1 71       	brne	80003130 <sdram_test+0x80>
      print_dbg("\r\n");
      screen_line(0, 0, "SDRAM test: corrupted words! :(", 0xf);
      screen_int(0, 1, errors, 0xf);
    }
  } else {
    if(print) {
80003104:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
      print_dbg("\r\nSDRAM test completed OK!");
80003108:	58 03       	cp.w	r3,0
8000310a:	cf d0       	breq	80003104 <sdram_test+0x54>
8000310c:	fe cc 8d 38 	sub	r12,pc,-29384
      screen_line(0, 7, "SDRAM test completed OK!", 0xf);
80003110:	fe b0 fc f2 	rcall	80002af4 <print_dbg>
80003114:	0e 9c       	mov	r12,r7
80003116:	30 f9       	mov	r9,15
80003118:	fe ca 8d 28 	sub	r10,pc,-29400
8000311c:	30 7b       	mov	r11,7
  for(i=0; i<2048; i++) {
    read[i] = 0L;
  }
  
  if(print) {
    print_dbg("\r\nstarting SDRAM test (96 words)...");
8000311e:	e0 a0 02 69 	rcall	800035f0 <screen_line>
80003122:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    }
  }
  
  if(errors != 0) {
    if(print) {
      print_dbg("\r\nSDRAM test: corrupted words! :( \r\n");
80003126:	fe cc 8d ee 	sub	r12,pc,-29202
8000312a:	fe b0 fc e5 	rcall	80002af4 <print_dbg>
      print_dbg_ulong(errors);
8000312e:	cc 6b       	rjmp	800030ba <sdram_test+0xa>
80003130:	fe cc 8d a8 	sub	r12,pc,-29272
      print_dbg("\r\n");
80003134:	fe b0 fc e0 	rcall	80002af4 <print_dbg>
      screen_line(0, 0, "SDRAM test: corrupted words! :(", 0xf);
80003138:	0e 9c       	mov	r12,r7
8000313a:	fe b0 fc bb 	rcall	80002ab0 <print_dbg_ulong>
8000313e:	fe cc 8d 8e 	sub	r12,pc,-29298
80003142:	fe b0 fc d9 	rcall	80002af4 <print_dbg>
      screen_int(0, 1, errors, 0xf);
80003146:	30 0b       	mov	r11,0
80003148:	30 f9       	mov	r9,15
8000314a:	fe ca 8d 96 	sub	r10,pc,-29290
8000314e:	16 9c       	mov	r12,r11
80003150:	e0 a0 02 50 	rcall	800035f0 <screen_line>
80003154:	0e 9a       	mov	r10,r7
80003156:	30 f9       	mov	r9,15
80003158:	5c 8a       	casts.h	r10
8000315a:	30 1b       	mov	r11,1
8000315c:	30 0c       	mov	r12,0
8000315e:	e0 a0 02 9f 	rcall	8000369c <screen_int>
80003162:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003166:	d7 03       	nop

80003168 <write_command>:
  spi_write(OLED_SPI, c);
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
80003168:	eb cd 40 80 	pushm	r7,lr
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8000316c:	30 0b       	mov	r11,0
  spi_write(OLED_SPI, c);
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
8000316e:	18 97       	mov	r7,r12
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003170:	fe 7c 28 00 	mov	r12,-55296
80003174:	fe b0 fa 39 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003178:	30 9c       	mov	r12,9
8000317a:	fe b0 f8 66 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8000317e:	0e 9b       	mov	r11,r7
80003180:	fe 7c 28 00 	mov	r12,-55296
80003184:	fe b0 fa c5 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003188:	30 0b       	mov	r11,0
8000318a:	fe 7c 28 00 	mov	r12,-55296
8000318e:	fe b0 fa 54 	rcall	80002636 <spi_unselectChip>
}
80003192:	e3 cd 80 80 	ldm	sp++,r7,pc
80003196:	d7 03       	nop

80003198 <screen_hl_line>:
80003198:	d4 31       	pushm	r0-r7,lr
8000319a:	20 2d       	sub	sp,8
8000319c:	30 08       	mov	r8,0
8000319e:	e7 dc c0 08 	bfextu	r3,r12,0x0,0x8
800031a2:	f0 03 18 00 	cp.b	r3,r8
800031a6:	c4 f5       	brlt	80003244 <screen_hl_line+0xac>
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800031a8:	f3 da c0 04 	bfextu	r9,r10,0x0,0x4
800031ac:	50 09       	stdsp	sp[0x0],r9
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
800031ae:	e0 69 07 54 	mov	r9,1876
800031b2:	fd db c0 10 	bfextu	lr,r11,0x0,0x10
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800031b6:	a5 6a       	lsl	r10,0x4
800031b8:	30 06       	mov	r6,0
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
800031ba:	5c 5a       	castu.b	r10
800031bc:	eb db c0 08 	bfextu	r5,r11,0x0,0x8
800031c0:	e0 60 07 6c 	mov	r0,1900
800031c4:	72 07       	ld.w	r7,r9[0x0]
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800031c6:	2f 9e       	sub	lr,-7
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
800031c8:	18 92       	mov	r2,r12
800031ca:	50 1a       	stdsp	sp[0x4],r10
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
800031cc:	60 08       	ld.w	r8,r0[0x0]
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800031ce:	e0 69 07 74 	mov	r9,1908
800031d2:	0c 9b       	mov	r11,r6

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800031d4:	e6 06 00 0c 	add	r12,r3,r6
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
800031d8:	5c 5c       	castu.b	r12
800031da:	0a 3e       	cp.w	lr,r5

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800031dc:	c2 85       	brlt	8000322c <screen_hl_line+0x94>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800031de:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
  if (x%2) {
800031e2:	a1 9c       	lsr	r12,0x1
800031e4:	18 94       	mov	r4,r12
800031e6:	58 0a       	cp.w	r10,0
800031e8:	c3 01       	brne	80003248 <screen_hl_line+0xb0>
800031ea:	c6 c1       	brne	800032c2 <screen_hl_line+0x12a>

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800031ec:	0a 91       	mov	r1,r5
800031ee:	0a 9a       	mov	r10,r5
800031f0:	c0 48       	rjmp	800031f8 <screen_hl_line+0x60>
800031f2:	14 91       	mov	r1,r10
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800031f4:	14 3e       	cp.w	lr,r10
800031f6:	c1 b5       	brlt	8000322c <screen_hl_line+0x94>

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800031f8:	2f fa       	sub	r10,-1
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800031fa:	e2 08 15 06 	lsl	r8,r1,0x6
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
   } else {
    return screen[pos] & 0x0f;
800031fe:	5c 5a       	castu.b	r10
80003200:	18 08       	add	r8,r12
80003202:	f2 08 07 00 	ld.ub	r0,r9[r8]
80003206:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000320a:	f6 00 18 00 	cp.b	r0,r11
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000320e:	cf 21       	brne	800031f2 <screen_hl_line+0x5a>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003210:	e2 07 15 06 	lsl	r7,r1,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003214:	40 00       	lddsp	r0,sp[0x0]
80003216:	08 07       	add	r7,r4
80003218:	f2 07 07 01 	ld.ub	r1,r9[r7]
8000321c:	e0 11 ff f0 	andl	r1,0xfff0

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003220:	00 41       	or	r1,r0
80003222:	f2 07 0b 01 	st.b	r9[r7],r1
80003226:	14 91       	mov	r1,r10
 }

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003228:	14 3e       	cp.w	lr,r10
8000322a:	ce 74       	brge	800031f8 <screen_hl_line+0x60>
8000322c:	2f f6       	sub	r6,-1
8000322e:	e4 06 00 0a 	add	r10,r2,r6
80003232:	f6 0a 18 00 	cp.b	r10,r11
80003236:	cc f4       	brge	800031d4 <screen_hl_line+0x3c>
80003238:	e0 69 07 6c 	mov	r9,1900
      if (screen_get_pixel(i, j) == 0) {
	screen_pixel(i, j, a);
      }
    }
  }
}
8000323c:	93 08       	st.w	r9[0x0],r8

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
8000323e:	e0 68 07 54 	mov	r8,1876
80003242:	91 07       	st.w	r8[0x0],r7
80003244:	2f ed       	sub	sp,-8
80003246:	d8 32       	popm	r0-r7,pc
80003248:	58 0a       	cp.w	r10,0
8000324a:	c1 e1       	brne	80003286 <screen_hl_line+0xee>
8000324c:	0a 91       	mov	r1,r5
8000324e:	0a 9a       	mov	r10,r5
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003250:	c0 48       	rjmp	80003258 <screen_hl_line+0xc0>
80003252:	14 91       	mov	r1,r10

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003254:	14 3e       	cp.w	lr,r10
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003256:	ce b5       	brlt	8000322c <screen_hl_line+0x94>
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
80003258:	2f fa       	sub	r10,-1
8000325a:	e2 08 15 06 	lsl	r8,r1,0x6
8000325e:	5c 5a       	castu.b	r10
80003260:	18 08       	add	r8,r12
80003262:	f2 08 07 00 	ld.ub	r0,r9[r8]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003266:	a5 80       	lsr	r0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003268:	f6 00 18 00 	cp.b	r0,r11
8000326c:	cf 31       	brne	80003252 <screen_hl_line+0xba>
8000326e:	e2 07 15 06 	lsl	r7,r1,0x6
80003272:	40 00       	lddsp	r0,sp[0x0]
80003274:	08 07       	add	r7,r4
80003276:	f2 07 07 01 	ld.ub	r1,r9[r7]
8000327a:	e0 11 ff f0 	andl	r1,0xfff0

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
8000327e:	00 41       	or	r1,r0
80003280:	f2 07 0b 01 	st.b	r9[r7],r1
80003284:	ce 7b       	rjmp	80003252 <screen_hl_line+0xba>
80003286:	0a 91       	mov	r1,r5
80003288:	0a 9a       	mov	r10,r5
8000328a:	c0 58       	rjmp	80003294 <screen_hl_line+0xfc>
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000328c:	14 91       	mov	r1,r10
8000328e:	1c 3a       	cp.w	r10,lr

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80003290:	fe 99 ff ce 	brgt	8000322c <screen_hl_line+0x94>
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
80003294:	2f fa       	sub	r10,-1
80003296:	e2 08 15 06 	lsl	r8,r1,0x6
8000329a:	5c 5a       	castu.b	r10
8000329c:	18 08       	add	r8,r12
8000329e:	f2 08 07 00 	ld.ub	r0,r9[r8]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800032a2:	a5 80       	lsr	r0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800032a4:	f6 00 18 00 	cp.b	r0,r11
800032a8:	cf 21       	brne	8000328c <screen_hl_line+0xf4>
800032aa:	e2 07 15 06 	lsl	r7,r1,0x6
800032ae:	40 10       	lddsp	r0,sp[0x4]
800032b0:	08 07       	add	r7,r4
800032b2:	f2 07 07 01 	ld.ub	r1,r9[r7]
800032b6:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800032ba:	00 41       	or	r1,r0
800032bc:	f2 07 0b 01 	st.b	r9[r7],r1
800032c0:	ce 6b       	rjmp	8000328c <screen_hl_line+0xf4>
800032c2:	0a 91       	mov	r1,r5
800032c4:	0a 9a       	mov	r10,r5
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800032c6:	c0 48       	rjmp	800032ce <screen_hl_line+0x136>
800032c8:	14 91       	mov	r1,r10

// highlight a line
void screen_hl_line(U16 x, U16 y, U8 a) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800032ca:	14 3e       	cp.w	lr,r10
// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800032cc:	cb 05       	brlt	8000322c <screen_hl_line+0x94>
  if (x%2) {
    return (screen[pos] & 0xf0) >> 4; 
   } else {
    return screen[pos] & 0x0f;
800032ce:	2f fa       	sub	r10,-1
800032d0:	e2 08 15 06 	lsl	r8,r1,0x6
800032d4:	5c 5a       	castu.b	r10
800032d6:	18 08       	add	r8,r12
800032d8:	f2 08 07 00 	ld.ub	r0,r9[r8]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800032dc:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800032e0:	f6 00 18 00 	cp.b	r0,r11
800032e4:	cf 21       	brne	800032c8 <screen_hl_line+0x130>
800032e6:	e2 07 15 06 	lsl	r7,r1,0x6
800032ea:	40 10       	lddsp	r0,sp[0x4]
800032ec:	08 07       	add	r7,r4
800032ee:	f2 07 07 01 	ld.ub	r1,r9[r7]
800032f2:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
800032f6:	00 41       	or	r1,r0
800032f8:	f2 07 0b 01 	st.b	r9[r7],r1
800032fc:	ce 6b       	rjmp	800032c8 <screen_hl_line+0x130>
800032fe:	d7 03       	nop

80003300 <screen_refresh>:
  print_fix16(buf, v);
  return screen_string_squeeze(x, y, buf, a);
}

// send screen buffer contents to OLED
void screen_refresh(void) {
80003300:	eb cd 40 e0 	pushm	r5-r7,lr
80003304:	e0 67 07 74 	mov	r7,1908
80003308:	ee c5 f0 00 	sub	r5,r7,-4096

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8000330c:	0f 36       	ld.ub	r6,r7++
8000330e:	30 0b       	mov	r11,0
80003310:	fe 7c 28 00 	mov	r12,-55296
80003314:	fe b0 f9 69 	rcall	800025e6 <spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80003318:	30 9c       	mov	r12,9
8000331a:	fe b0 f7 89 	rcall	8000222c <gpio_set_gpio_pin>
  spi_write(OLED_SPI, c);
8000331e:	0c 9b       	mov	r11,r6
80003320:	fe 7c 28 00 	mov	r12,-55296
80003324:	fe b0 f9 f5 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003328:	30 0b       	mov	r11,0
8000332a:	fe 7c 28 00 	mov	r12,-55296
8000332e:	fe b0 f9 84 	rcall	80002636 <spi_unselectChip>
// send screen buffer contents to OLED
void screen_refresh(void) {
  U16 i;
  //  cpu_irq_disable();
  //  Disable_global_interrupt();
  for(i=0; i<GRAM_BYTES; i++) { 
80003332:	0a 37       	cp.w	r7,r5
    write_data(screen[i]);  
    //write_data(i % 0xf);
  }
  //  cpu_irq_enable();
  //  Enable_global_interrupt();
}
80003334:	ce c1       	brne	8000330c <screen_refresh+0xc>
80003336:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000333a:	d7 03       	nop

8000333c <screen_string_squeeze>:
8000333c:	d4 31       	pushm	r0-r7,lr
8000333e:	20 9d       	sub	sp,36
80003340:	50 2a       	stdsp	sp[0x8],r10
80003342:	50 1c       	stdsp	sp[0x4],r12
80003344:	15 88       	ld.ub	r8,r10[0x0]
80003346:	58 08       	cp.w	r8,0
80003348:	e0 80 00 f0 	breq	80003528 <screen_string_squeeze+0x1ec>
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000334c:	e5 d9 c0 04 	bfextu	r2,r9,0x0,0x4
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003350:	a5 69       	lsl	r9,0x4
80003352:	e3 d9 c0 08 	bfextu	r1,r9,0x0,0x8
80003356:	f6 c9 ff ff 	sub	r9,r11,-1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000335a:	5c 79       	castu.h	r9
8000335c:	a7 69       	lsl	r9,0x6
8000335e:	50 79       	stdsp	sp[0x1c],r9
80003360:	f6 c9 ff fe 	sub	r9,r11,-2
80003364:	5c 79       	castu.h	r9
80003366:	a7 69       	lsl	r9,0x6
80003368:	f9 db c0 10 	bfextu	r12,r11,0x0,0x10
8000336c:	50 89       	stdsp	sp[0x20],r9
8000336e:	f6 c9 ff fd 	sub	r9,r11,-3
80003372:	50 6c       	stdsp	sp[0x18],r12
80003374:	ba 79       	st.h	sp[0xe],r9
80003376:	f6 cc ff fc 	sub	r12,r11,-4
8000337a:	f6 c9 ff fb 	sub	r9,r11,-5
8000337e:	fb 5c 00 10 	st.h	sp[16],r12
80003382:	fb 59 00 12 	st.h	sp[18],r9
80003386:	f6 cc ff fa 	sub	r12,r11,-6
8000338a:	f6 c9 ff f9 	sub	r9,r11,-7
8000338e:	e0 6a 07 74 	mov	r10,1908
80003392:	fb 5c 00 14 	st.h	sp[20],r12
80003396:	fb 59 00 16 	st.h	sp[22],r9
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
8000339a:	22 08       	sub	r8,32
8000339c:	fe cc 8c c2 	sub	r12,pc,-29502
800033a0:	f8 08 00 35 	add	r5,r12,r8<<0x3
  xnum = FONT_CHARW - g->first - g->last;
800033a4:	0b 84       	ld.ub	r4,r5[0x0]
800033a6:	e8 09 11 00 	rsub	r9,r4,0
800033aa:	0b 98       	ld.ub	r8,r5[0x1]
800033ac:	30 03       	mov	r3,0
800033ae:	f2 08 01 08 	sub	r8,r9,r8
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800033b2:	40 19       	lddsp	r9,sp[0x4]
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
800033b4:	f0 ce ff fa 	sub	lr,r8,-6
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800033b8:	5c 89       	casts.h	r9
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
800033ba:	5c 5e       	castu.b	lr
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800033bc:	50 09       	stdsp	sp[0x0],r9
800033be:	58 0e       	cp.w	lr,0
800033c0:	c3 e0       	breq	8000343c <screen_string_squeeze+0x100>
800033c2:	30 18       	mov	r8,1
800033c4:	e6 0b 00 06 	add	r6,r3,r11
800033c8:	f0 03 09 47 	lsl	r7,r8,r3
800033cc:	5c 76       	castu.h	r6
800033ce:	40 09       	lddsp	r9,sp[0x0]
800033d0:	a7 66       	lsl	r6,0x6
800033d2:	30 08       	mov	r8,0
800033d4:	c1 88       	rjmp	80003404 <screen_string_squeeze+0xc8>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800033d6:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
800033da:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800033de:	a1 9c       	lsr	r12,0x1
800033e0:	0c 0c       	add	r12,r6
  if (x%2) {
800033e2:	58 00       	cp.w	r0,0
800033e4:	e0 81 00 aa 	brne	80003538 <screen_string_squeeze+0x1fc>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800033e8:	f4 0c 07 00 	ld.ub	r0,r10[r12]
800033ec:	e0 10 ff f0 	andl	r0,0xfff0
800033f0:	04 40       	or	r0,r2
800033f2:	f4 0c 0b 00 	st.b	r10[r12],r0
800033f6:	2f f9       	sub	r9,-1
800033f8:	2f f8       	sub	r8,-1
800033fa:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
800033fc:	f0 0e 18 00 	cp.b	lr,r8
80003400:	e0 88 00 1e 	brls	8000343c <screen_string_squeeze+0x100>
      if( (g->data[x + g->first] & (1 << y))) {
80003404:	ea 08 00 0c 	add	r12,r5,r8
80003408:	08 0c       	add	r12,r4
8000340a:	19 ac       	ld.ub	r12,r12[0x2]
8000340c:	0e 6c       	and	r12,r7
8000340e:	ce 41       	brne	800033d6 <screen_string_squeeze+0x9a>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003410:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80003414:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003418:	a1 9c       	lsr	r12,0x1
8000341a:	0c 0c       	add	r12,r6
  if (x%2) {
8000341c:	58 00       	cp.w	r0,0
8000341e:	e0 81 00 95 	brne	80003548 <screen_string_squeeze+0x20c>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003422:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80003426:	e0 10 ff f0 	andl	r0,0xfff0
8000342a:	f4 0c 0b 00 	st.b	r10[r12],r0
8000342e:	2f f9       	sub	r9,-1
80003430:	2f f8       	sub	r8,-1
80003432:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80003434:	f0 0e 18 00 	cp.b	lr,r8
80003438:	fe 9b ff e6 	brhi	80003404 <screen_string_squeeze+0xc8>
8000343c:	2f f3       	sub	r3,-1
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
8000343e:	58 83       	cp.w	r3,8
80003440:	cb f1       	brne	800033be <screen_string_squeeze+0x82>
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
80003442:	40 18       	lddsp	r8,sp[0x4]
80003444:	1c 08       	add	r8,lr
80003446:	5c 88       	casts.h	r8
80003448:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000344c:	f9 d9 c0 01 	bfextu	r12,r9,0x0,0x1
80003450:	a1 99       	lsr	r9,0x1
80003452:	58 0c       	cp.w	r12,0
80003454:	e0 81 00 81 	brne	80003556 <screen_string_squeeze+0x21a>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003458:	40 67       	lddsp	r7,sp[0x18]
8000345a:	a7 67       	lsl	r7,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000345c:	12 07       	add	r7,r9
8000345e:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003462:	e0 1c ff f0 	andl	r12,0xfff0
80003466:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000346a:	40 77       	lddsp	r7,sp[0x1c]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000346c:	12 07       	add	r7,r9
8000346e:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003472:	e0 1c ff f0 	andl	r12,0xfff0
80003476:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000347a:	40 87       	lddsp	r7,sp[0x20]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000347c:	12 07       	add	r7,r9
8000347e:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003482:	e0 1c ff f0 	andl	r12,0xfff0
80003486:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000348a:	9a f7       	ld.uh	r7,sp[0xe]
8000348c:	a7 67       	lsl	r7,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000348e:	12 07       	add	r7,r9
80003490:	f4 07 07 0c 	ld.ub	r12,r10[r7]
80003494:	e0 1c ff f0 	andl	r12,0xfff0
80003498:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000349c:	fb 17 00 10 	ld.uh	r7,sp[16]
800034a0:	a7 67       	lsl	r7,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800034a2:	12 07       	add	r7,r9
800034a4:	f4 07 07 0c 	ld.ub	r12,r10[r7]
800034a8:	e0 1c ff f0 	andl	r12,0xfff0
800034ac:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800034b0:	fb 17 00 12 	ld.uh	r7,sp[18]
800034b4:	a7 67       	lsl	r7,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800034b6:	12 07       	add	r7,r9
800034b8:	f4 07 07 0c 	ld.ub	r12,r10[r7]
800034bc:	e0 1c ff f0 	andl	r12,0xfff0
800034c0:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800034c4:	fb 17 00 14 	ld.uh	r7,sp[20]
800034c8:	a7 67       	lsl	r7,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800034ca:	12 07       	add	r7,r9
800034cc:	f4 07 07 0c 	ld.ub	r12,r10[r7]
800034d0:	e0 1c ff f0 	andl	r12,0xfff0
800034d4:	f4 07 0b 0c 	st.b	r10[r7],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800034d8:	fb 1c 00 16 	ld.uh	r12,sp[22]
800034dc:	a7 6c       	lsl	r12,0x6
800034de:	f8 09 00 09 	add	r9,r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800034e2:	f4 09 07 0c 	ld.ub	r12,r10[r9]
800034e6:	e0 1c ff f0 	andl	r12,0xfff0
800034ea:	f4 09 0b 0c 	st.b	r10[r9],r12
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
800034ee:	40 2c       	lddsp	r12,sp[0x8]
    str++;
800034f0:	2f f8       	sub	r8,-1
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
800034f2:	2f fc       	sub	r12,-1
    str++;
800034f4:	5c 88       	casts.h	r8
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
800034f6:	50 2c       	stdsp	sp[0x8],r12
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
800034f8:	50 18       	stdsp	sp[0x4],r8
800034fa:	19 88       	ld.ub	r8,r12[0x0]
800034fc:	58 08       	cp.w	r8,0
800034fe:	fe 91 ff 4e 	brne	8000339a <screen_string_squeeze+0x5e>
80003502:	e0 6a 07 64 	mov	r10,1892
80003506:	95 05       	st.w	r10[0x0],r5
80003508:	e0 6a 07 6a 	mov	r10,1898
8000350c:	b4 8e       	st.b	r10[0x0],lr
8000350e:	e0 6a 07 69 	mov	r10,1897
80003512:	30 88       	mov	r8,8
80003514:	b4 88       	st.b	r10[0x0],r8
80003516:	e0 6a 07 71 	mov	r10,1905
    x++;
    str++;
  }
  refresh = 1;
  return x;
}
8000351a:	b4 8e       	st.b	r10[0x0],lr
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  refresh = 1;
8000351c:	e0 6a 07 54 	mov	r10,1876
  return x;
}
80003520:	95 09       	st.w	r10[0x0],r9
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  refresh = 1;
80003522:	e0 69 07 70 	mov	r9,1904
  return x;
}
80003526:	b2 88       	st.b	r9[0x0],r8
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003528:	40 1c       	lddsp	r12,sp[0x4]
8000352a:	30 19       	mov	r9,1
8000352c:	e0 68 07 08 	mov	r8,1800
80003530:	5c 5c       	castu.b	r12
80003532:	b0 89       	st.b	r8[0x0],r9
80003534:	2f 7d       	sub	sp,-36
80003536:	d8 32       	popm	r0-r7,pc
80003538:	f4 0c 07 00 	ld.ub	r0,r10[r12]
8000353c:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80003540:	02 40       	or	r0,r1
80003542:	f4 0c 0b 00 	st.b	r10[r12],r0
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003546:	c5 8b       	rjmp	800033f6 <screen_string_squeeze+0xba>
80003548:	f4 0c 07 00 	ld.ub	r0,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8000354c:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80003550:	f4 0c 0b 00 	st.b	r10[r12],r0
80003554:	c5 1b       	rjmp	800033f6 <screen_string_squeeze+0xba>
80003556:	40 6c       	lddsp	r12,sp[0x18]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003558:	a7 6c       	lsl	r12,0x6
8000355a:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8000355c:	f4 0c 07 07 	ld.ub	r7,r10[r12]
80003560:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003564:	f4 0c 0b 07 	st.b	r10[r12],r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003568:	40 7c       	lddsp	r12,sp[0x1c]
8000356a:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8000356c:	f4 0c 07 07 	ld.ub	r7,r10[r12]
80003570:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003574:	f4 0c 0b 07 	st.b	r10[r12],r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003578:	40 8c       	lddsp	r12,sp[0x20]
8000357a:	12 0c       	add	r12,r9
8000357c:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003580:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003584:	f4 0c 0b 07 	st.b	r10[r12],r7
80003588:	9a fc       	ld.uh	r12,sp[0xe]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000358a:	a7 6c       	lsl	r12,0x6
8000358c:	12 0c       	add	r12,r9
8000358e:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003592:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003596:	f4 0c 0b 07 	st.b	r10[r12],r7
8000359a:	fb 1c 00 10 	ld.uh	r12,sp[16]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000359e:	a7 6c       	lsl	r12,0x6
800035a0:	12 0c       	add	r12,r9
800035a2:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800035a6:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
800035aa:	f4 0c 0b 07 	st.b	r10[r12],r7
800035ae:	fb 1c 00 12 	ld.uh	r12,sp[18]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800035b2:	a7 6c       	lsl	r12,0x6
800035b4:	12 0c       	add	r12,r9
800035b6:	f4 0c 07 07 	ld.ub	r7,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800035ba:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
800035be:	f4 0c 0b 07 	st.b	r10[r12],r7
800035c2:	fb 1c 00 14 	ld.uh	r12,sp[20]
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
800035c6:	a7 6c       	lsl	r12,0x6
800035c8:	12 0c       	add	r12,r9
800035ca:	f4 0c 07 07 	ld.ub	r7,r10[r12]
800035ce:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800035d2:	f4 0c 0b 07 	st.b	r10[r12],r7
800035d6:	fb 1c 00 16 	ld.uh	r12,sp[22]
800035da:	a7 6c       	lsl	r12,0x6
800035dc:	f8 09 00 09 	add	r9,r12,r9
800035e0:	f4 09 07 0c 	ld.ub	r12,r10[r9]
800035e4:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800035e8:	f4 09 0b 0c 	st.b	r10[r9],r12
800035ec:	c8 1b       	rjmp	800034ee <screen_string_squeeze+0x1b2>
800035ee:	d7 03       	nop

800035f0 <screen_line>:
800035f0:	d4 21       	pushm	r4-r7,lr
800035f2:	fe c8 91 e6 	sub	r8,pc,-28186
800035f6:	5c 7b       	castu.h	r11
800035f8:	f0 0b 07 07 	ld.ub	r7,r8[r11]
800035fc:	e0 68 07 68 	mov	r8,1896
80003600:	5c 7c       	castu.h	r12
80003602:	b0 87       	st.b	r8[0x0],r7
  return x;
}

// draw a string (default) m
inline U8 screen_string(U16 x, U16 y, char *str, U8 a) {
  return screen_string_squeeze(x, y, str, a);
80003604:	0e 96       	mov	r6,r7
80003606:	30 05       	mov	r5,0
80003608:	5c 76       	castu.h	r6
8000360a:	0c 9b       	mov	r11,r6
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
8000360c:	c9 8e       	rcall	8000333c <screen_string_squeeze>
8000360e:	ea 0c 18 00 	cp.b	r12,r5
80003612:	c2 75       	brlt	80003660 <screen_line+0x70>
80003614:	e0 64 07 54 	mov	r4,1876
80003618:	2f 96       	sub	r6,-7
    for(j=y; j<(FONT_CHARH + y); j++) {
8000361a:	e0 6b 07 74 	mov	r11,1908
8000361e:	68 08       	ld.w	r8,r4[0x0]
80003620:	0c 37       	cp.w	r7,r6
80003622:	e0 89 00 19 	brgt	80003654 <screen_line+0x64>
80003626:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000362a:	f1 de c0 01 	bfextu	r8,lr,0x0,0x1
8000362e:	a1 9e       	lsr	lr,0x1
80003630:	58 08       	cp.w	r8,0
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
80003632:	c1 e1       	brne	8000366e <screen_line+0x7e>
80003634:	0e 9a       	mov	r10,r7
80003636:	0e 99       	mov	r9,r7
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80003638:	f4 08 15 06 	lsl	r8,r10,0x6
8000363c:	1c 08       	add	r8,lr
8000363e:	f6 08 07 0a 	ld.ub	r10,r11[r8]
80003642:	e0 1a ff f0 	andl	r10,0xfff0

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80003646:	f6 08 0b 0a 	st.b	r11[r8],r10
8000364a:	2f f9       	sub	r9,-1
8000364c:	5c 59       	castu.b	r9
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
8000364e:	12 9a       	mov	r10,r9
80003650:	12 36       	cp.w	r6,r9
80003652:	cf 34       	brge	80003638 <screen_line+0x48>
80003654:	2f fc       	sub	r12,-1
80003656:	5c 5c       	castu.b	r12
    for(j=y; j<(FONT_CHARH + y); j++) {
80003658:	ea 0c 18 00 	cp.b	r12,r5

  //  print_dbg("\r\n");
  //  if(hl > 2) { print_dbg("__"); }
  //  print_dbg(str);

  refresh = 1;
8000365c:	ce 24       	brge	80003620 <screen_line+0x30>

  return NCOLS;
}
8000365e:	89 08       	st.w	r4[0x0],r8
80003660:	30 19       	mov	r9,1

  //  print_dbg("\r\n");
  //  if(hl > 2) { print_dbg("__"); }
  //  print_dbg(str);

  refresh = 1;
80003662:	e0 68 07 08 	mov	r8,1800
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003666:	e0 6c 00 80 	mov	r12,128
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS__2) + (x>>1);
8000366a:	b0 89       	st.b	r8[0x0],r9
8000366c:	d8 22       	popm	r4-r7,pc
8000366e:	0e 9a       	mov	r10,r7
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80003670:	0e 99       	mov	r9,r7
80003672:	f4 08 15 06 	lsl	r8,r10,0x6
80003676:	1c 08       	add	r8,lr
80003678:	f6 08 07 0a 	ld.ub	r10,r11[r8]

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
8000367c:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
80003680:	f6 08 0b 0a 	st.b	r11[r8],r10
80003684:	2f f9       	sub	r9,-1
80003686:	5c 59       	castu.b	r9
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80003688:	12 9a       	mov	r10,r9
8000368a:	0c 39       	cp.w	r9,r6
8000368c:	fe 9a ff f3 	brle	80003672 <screen_line+0x82>
80003690:	2f fc       	sub	r12,-1
80003692:	5c 5c       	castu.b	r12
80003694:	ea 0c 18 00 	cp.b	r12,r5
80003698:	cc 44       	brge	80003620 <screen_line+0x30>
8000369a:	ce 2b       	rjmp	8000365e <screen_line+0x6e>

8000369c <screen_int>:
8000369c:	eb cd 40 e0 	pushm	r5-r7,lr
800036a0:	20 1d       	sub	sp,4
800036a2:	e0 67 07 72 	mov	r7,1906
800036a6:	5c 7b       	castu.h	r11
800036a8:	fe c8 92 9c 	sub	r8,pc,-28004
}

// print a formatted integer
U8 screen_int(U16 x, U16 l, S16 i, U8 a) {
  static u8 y;
  y = lines[l];
800036ac:	f0 0b 07 08 	ld.ub	r8,r8[r11]
  //  static char buf[32];
  //  snprintf(buf, 32, "%d", (int)i);
  static char buf[FIX_DIG_TOTAL];
  //snprintf(buf, 32, "%.1f", (float)f);
  //  print_fix16(buf, (u32)i << 16 );
  itoa_whole(i, buf, 5);
800036b0:	ae 88       	st.b	r7[0x0],r8
800036b2:	18 95       	mov	r5,r12
800036b4:	e0 66 07 58 	mov	r6,1880
800036b8:	14 9c       	mov	r12,r10
800036ba:	0c 9b       	mov	r11,r6
800036bc:	50 09       	stdsp	sp[0x0],r9
  //buf = ultoa(int);
  return screen_string_squeeze(x, y, buf, a);
800036be:	30 5a       	mov	r10,5
800036c0:	e0 a0 06 f6 	rcall	800044ac <itoa_whole>
800036c4:	40 09       	lddsp	r9,sp[0x0]
800036c6:	0c 9a       	mov	r10,r6
800036c8:	0f 8b       	ld.ub	r11,r7[0x0]
800036ca:	f9 d5 c0 10 	bfextu	r12,r5,0x0,0x10
}
800036ce:	c3 7e       	rcall	8000333c <screen_string_squeeze>
800036d0:	2f fd       	sub	sp,-4
800036d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800036d6:	d7 03       	nop

800036d8 <init_oled>:
800036d8:	eb cd 40 80 	pushm	r7,lr
800036dc:	20 2d       	sub	sp,8
800036de:	d3 03       	ssrf	0x10
800036e0:	30 7c       	mov	r12,7
800036e2:	fe b0 f5 a5 	rcall	8000222c <gpio_set_gpio_pin>
800036e6:	e0 68 fb c5 	mov	r8,64453
  //  cpu_irq_disable();
  Disable_global_interrupt();
  // flip the reset pin
  gpio_set_gpio_pin(OLED_RESET_PIN);
  //  delay_ms(1);
  delay = FCPU_HZ >> 10 ; while(delay > 0) { delay--; }
800036ea:	30 09       	mov	r9,0
800036ec:	fa e9 00 00 	st.d	sp[0],r8
800036f0:	fa e8 00 00 	ld.d	r8,sp[0]
800036f4:	58 08       	cp.w	r8,0
800036f6:	5c 29       	cpc	r9
800036f8:	c0 f0       	breq	80003716 <init_oled+0x3e>
800036fa:	3f fa       	mov	r10,-1
800036fc:	3f fb       	mov	r11,-1
800036fe:	fa e8 00 00 	ld.d	r8,sp[0]
80003702:	14 08       	add	r8,r10
80003704:	f2 0b 00 49 	adc	r9,r9,r11
80003708:	fa e9 00 00 	st.d	sp[0],r8
8000370c:	fa e8 00 00 	ld.d	r8,sp[0]
80003710:	58 08       	cp.w	r8,0
80003712:	5c 29       	cpc	r9
80003714:	cf 51       	brne	800036fe <init_oled+0x26>
  gpio_clr_gpio_pin(OLED_RESET_PIN);
80003716:	30 7c       	mov	r12,7
80003718:	fe b0 f5 97 	rcall	80002246 <gpio_clr_gpio_pin>
  // delay_ms(1);
  delay=FCPU_HZ >> 10; while(delay > 0) { delay--; }
8000371c:	e0 68 fb c5 	mov	r8,64453
80003720:	30 09       	mov	r9,0
80003722:	fa e9 00 00 	st.d	sp[0],r8
80003726:	fa e8 00 00 	ld.d	r8,sp[0]
8000372a:	58 08       	cp.w	r8,0
8000372c:	5c 29       	cpc	r9
8000372e:	c0 f0       	breq	8000374c <init_oled+0x74>
80003730:	3f fa       	mov	r10,-1
80003732:	3f fb       	mov	r11,-1
80003734:	fa e8 00 00 	ld.d	r8,sp[0]
80003738:	14 08       	add	r8,r10
8000373a:	f2 0b 00 49 	adc	r9,r9,r11
8000373e:	fa e9 00 00 	st.d	sp[0],r8
80003742:	fa e8 00 00 	ld.d	r8,sp[0]
80003746:	58 08       	cp.w	r8,0
80003748:	5c 29       	cpc	r9
8000374a:	cf 51       	brne	80003734 <init_oled+0x5c>
  gpio_set_gpio_pin(OLED_RESET_PIN);
8000374c:	30 7c       	mov	r12,7
8000374e:	fe b0 f5 6f 	rcall	8000222c <gpio_set_gpio_pin>
  //delay_ms(10);
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
80003752:	e2 78 ef 14 	mov	r8,257812
80003756:	30 09       	mov	r9,0
80003758:	fa e9 00 00 	st.d	sp[0],r8
8000375c:	fa e8 00 00 	ld.d	r8,sp[0]
80003760:	58 08       	cp.w	r8,0
80003762:	5c 29       	cpc	r9
80003764:	c0 f0       	breq	80003782 <init_oled+0xaa>
80003766:	3f fa       	mov	r10,-1
80003768:	3f fb       	mov	r11,-1
8000376a:	fa e8 00 00 	ld.d	r8,sp[0]
8000376e:	14 08       	add	r8,r10
80003770:	f2 0b 00 49 	adc	r9,r9,r11
80003774:	fa e9 00 00 	st.d	sp[0],r8
80003778:	fa e8 00 00 	ld.d	r8,sp[0]
8000377c:	58 08       	cp.w	r8,0
8000377e:	5c 29       	cpc	r9
80003780:	cf 51       	brne	8000376a <init_oled+0x92>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003782:	30 0b       	mov	r11,0
80003784:	fe 7c 28 00 	mov	r12,-55296
80003788:	fe b0 f7 2f 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000378c:	30 9c       	mov	r12,9
8000378e:	fe b0 f5 5c 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003792:	e0 6b 00 ae 	mov	r11,174
80003796:	fe 7c 28 00 	mov	r12,-55296
8000379a:	fe b0 f7 ba 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8000379e:	30 0b       	mov	r11,0
800037a0:	fe 7c 28 00 	mov	r12,-55296
800037a4:	fe b0 f7 49 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800037a8:	30 0b       	mov	r11,0
800037aa:	fe 7c 28 00 	mov	r12,-55296
800037ae:	fe b0 f7 1c 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800037b2:	30 9c       	mov	r12,9
800037b4:	fe b0 f5 49 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800037b8:	e0 6b 00 b3 	mov	r11,179
800037bc:	fe 7c 28 00 	mov	r12,-55296
800037c0:	fe b0 f7 a7 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800037c4:	30 0b       	mov	r11,0
800037c6:	fe 7c 28 00 	mov	r12,-55296
800037ca:	fe b0 f7 36 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800037ce:	30 0b       	mov	r11,0
800037d0:	fe 7c 28 00 	mov	r12,-55296
800037d4:	fe b0 f7 09 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800037d8:	30 9c       	mov	r12,9
800037da:	fe b0 f5 36 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800037de:	e0 6b 00 91 	mov	r11,145
800037e2:	fe 7c 28 00 	mov	r12,-55296
800037e6:	fe b0 f7 94 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800037ea:	30 0b       	mov	r11,0
800037ec:	fe 7c 28 00 	mov	r12,-55296
800037f0:	fe b0 f7 23 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800037f4:	30 0b       	mov	r11,0
800037f6:	fe 7c 28 00 	mov	r12,-55296
800037fa:	fe b0 f6 f6 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800037fe:	30 9c       	mov	r12,9
80003800:	fe b0 f5 23 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003804:	e0 6b 00 a8 	mov	r11,168
80003808:	fe 7c 28 00 	mov	r12,-55296
8000380c:	fe b0 f7 81 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003810:	30 0b       	mov	r11,0
80003812:	fe 7c 28 00 	mov	r12,-55296
80003816:	fe b0 f7 10 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8000381a:	30 0b       	mov	r11,0
8000381c:	fe 7c 28 00 	mov	r12,-55296
80003820:	fe b0 f6 e3 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003824:	30 9c       	mov	r12,9
80003826:	fe b0 f5 10 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8000382a:	33 fb       	mov	r11,63
8000382c:	fe 7c 28 00 	mov	r12,-55296
80003830:	fe b0 f7 6f 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003834:	30 0b       	mov	r11,0
80003836:	fe 7c 28 00 	mov	r12,-55296
8000383a:	fe b0 f6 fe 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8000383e:	30 0b       	mov	r11,0
80003840:	fe 7c 28 00 	mov	r12,-55296
80003844:	fe b0 f6 d1 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003848:	30 9c       	mov	r12,9
8000384a:	fe b0 f4 fe 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8000384e:	e0 6b 00 86 	mov	r11,134
80003852:	fe 7c 28 00 	mov	r12,-55296
80003856:	fe b0 f7 5c 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8000385a:	30 0b       	mov	r11,0
8000385c:	fe 7c 28 00 	mov	r12,-55296
80003860:	fe b0 f6 eb 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003864:	30 0b       	mov	r11,0
80003866:	fe 7c 28 00 	mov	r12,-55296
8000386a:	fe b0 f6 be 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000386e:	30 9c       	mov	r12,9
80003870:	fe b0 f4 eb 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003874:	e0 6b 00 81 	mov	r11,129
80003878:	fe 7c 28 00 	mov	r12,-55296
8000387c:	fe b0 f7 49 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003880:	30 0b       	mov	r11,0
80003882:	fe 7c 28 00 	mov	r12,-55296
80003886:	fe b0 f6 d8 	rcall	80002636 <spi_unselectChip>
  write_command(0x91);
  write_command(0xA8);	// multiplex
  write_command(0x3F);
  write_command(0x86);	// full current range
  write_command(0x81);	// contrast to full
  write_command(0x7F);
8000388a:	37 fc       	mov	r12,127
8000388c:	fe b0 fc 6e 	rcall	80003168 <write_command>
  write_command(0xB2);	// frame freq
80003890:	e0 6c 00 b2 	mov	r12,178
80003894:	fe b0 fc 6a 	rcall	80003168 <write_command>
  write_command(0x51);
80003898:	35 1c       	mov	r12,81
8000389a:	fe b0 fc 67 	rcall	80003168 <write_command>
  write_command(0xA8);	// multiplex
8000389e:	e0 6c 00 a8 	mov	r12,168
800038a2:	fe b0 fc 63 	rcall	80003168 <write_command>
  write_command(0x3F);
800038a6:	33 fc       	mov	r12,63
800038a8:	fe b0 fc 60 	rcall	80003168 <write_command>
  write_command(0xBC);	// precharge
800038ac:	e0 6c 00 bc 	mov	r12,188
800038b0:	fe b0 fc 5c 	rcall	80003168 <write_command>
  write_command(0x10);
800038b4:	31 0c       	mov	r12,16
800038b6:	fe b0 fc 59 	rcall	80003168 <write_command>
  write_command(0xBE);	// voltage
800038ba:	e0 6c 00 be 	mov	r12,190
800038be:	fe b0 fc 55 	rcall	80003168 <write_command>
  write_command(0x1C);
800038c2:	31 cc       	mov	r12,28
800038c4:	fe b0 fc 52 	rcall	80003168 <write_command>
  write_command(0xAD);	// dcdc
800038c8:	e0 6c 00 ad 	mov	r12,173
800038cc:	fe b0 fc 4e 	rcall	80003168 <write_command>
  write_command(0x02);
800038d0:	30 2c       	mov	r12,2
800038d2:	fe b0 fc 4b 	rcall	80003168 <write_command>
  write_command(0xA0);	// remap
800038d6:	e0 6c 00 a0 	mov	r12,160
800038da:	fe b0 fc 47 	rcall	80003168 <write_command>
  write_command(0x50);
800038de:	35 0c       	mov	r12,80
800038e0:	fe b0 fc 44 	rcall	80003168 <write_command>
  write_command(0xA1);	// start
800038e4:	e0 6c 00 a1 	mov	r12,161
800038e8:	fe b0 fc 40 	rcall	80003168 <write_command>
  write_command(0x0);
800038ec:	30 0c       	mov	r12,0
800038ee:	fe b0 fc 3d 	rcall	80003168 <write_command>
  write_command(0xA2);	// offset
800038f2:	e0 6c 00 a2 	mov	r12,162
800038f6:	fe b0 fc 39 	rcall	80003168 <write_command>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800038fa:	30 0b       	mov	r11,0
800038fc:	fe 7c 28 00 	mov	r12,-55296
80003900:	fe b0 f6 73 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003904:	30 9c       	mov	r12,9
80003906:	fe b0 f4 a0 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8000390a:	34 cb       	mov	r11,76
8000390c:	fe 7c 28 00 	mov	r12,-55296
80003910:	fe b0 f6 ff 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003914:	30 0b       	mov	r11,0
80003916:	fe 7c 28 00 	mov	r12,-55296
8000391a:	fe b0 f6 8e 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8000391e:	30 0b       	mov	r11,0
80003920:	fe 7c 28 00 	mov	r12,-55296
80003924:	fe b0 f6 61 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003928:	30 9c       	mov	r12,9
8000392a:	fe b0 f4 8e 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8000392e:	e0 6b 00 b1 	mov	r11,177
80003932:	fe 7c 28 00 	mov	r12,-55296
80003936:	fe b0 f6 ec 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8000393a:	30 0b       	mov	r11,0
8000393c:	fe 7c 28 00 	mov	r12,-55296
80003940:	fe b0 f6 7b 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003944:	30 0b       	mov	r11,0
80003946:	fe 7c 28 00 	mov	r12,-55296
8000394a:	fe b0 f6 4e 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000394e:	30 9c       	mov	r12,9
80003950:	fe b0 f4 7b 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003954:	35 5b       	mov	r11,85
80003956:	fe 7c 28 00 	mov	r12,-55296
8000395a:	fe b0 f6 da 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8000395e:	30 0b       	mov	r11,0
80003960:	fe 7c 28 00 	mov	r12,-55296
80003964:	fe b0 f6 69 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003968:	30 0b       	mov	r11,0
8000396a:	fe 7c 28 00 	mov	r12,-55296
8000396e:	fe b0 f6 3c 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003972:	30 9c       	mov	r12,9
80003974:	fe b0 f4 69 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003978:	e0 6b 00 b4 	mov	r11,180
8000397c:	fe 7c 28 00 	mov	r12,-55296
80003980:	fe b0 f6 c7 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003984:	30 0b       	mov	r11,0
80003986:	fe 7c 28 00 	mov	r12,-55296
8000398a:	fe b0 f6 56 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8000398e:	30 0b       	mov	r11,0
80003990:	fe 7c 28 00 	mov	r12,-55296
80003994:	fe b0 f6 29 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003998:	30 9c       	mov	r12,9
8000399a:	fe b0 f4 56 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8000399e:	30 2b       	mov	r11,2
800039a0:	fe 7c 28 00 	mov	r12,-55296
800039a4:	fe b0 f6 b5 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800039a8:	30 0b       	mov	r11,0
800039aa:	fe 7c 28 00 	mov	r12,-55296
800039ae:	fe b0 f6 44 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800039b2:	30 0b       	mov	r11,0
800039b4:	fe 7c 28 00 	mov	r12,-55296
800039b8:	fe b0 f6 17 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800039bc:	30 9c       	mov	r12,9
800039be:	fe b0 f4 44 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800039c2:	e0 6b 00 b0 	mov	r11,176
800039c6:	fe 7c 28 00 	mov	r12,-55296
800039ca:	fe b0 f6 a2 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800039ce:	30 0b       	mov	r11,0
800039d0:	fe 7c 28 00 	mov	r12,-55296
800039d4:	fe b0 f6 31 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800039d8:	30 0b       	mov	r11,0
800039da:	fe 7c 28 00 	mov	r12,-55296
800039de:	fe b0 f6 04 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800039e2:	30 9c       	mov	r12,9
800039e4:	fe b0 f4 31 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800039e8:	32 8b       	mov	r11,40
800039ea:	fe 7c 28 00 	mov	r12,-55296
800039ee:	fe b0 f6 90 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800039f2:	30 0b       	mov	r11,0
800039f4:	fe 7c 28 00 	mov	r12,-55296
800039f8:	fe b0 f6 1f 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800039fc:	30 0b       	mov	r11,0
800039fe:	fe 7c 28 00 	mov	r12,-55296
80003a02:	fe b0 f5 f2 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003a06:	30 9c       	mov	r12,9
80003a08:	fe b0 f4 1f 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003a0c:	e0 6b 00 bf 	mov	r11,191
80003a10:	fe 7c 28 00 	mov	r12,-55296
80003a14:	fe b0 f6 7d 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003a18:	30 0b       	mov	r11,0
80003a1a:	fe 7c 28 00 	mov	r12,-55296
80003a1e:	fe b0 f6 0c 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003a22:	30 0b       	mov	r11,0
80003a24:	fe 7c 28 00 	mov	r12,-55296
80003a28:	fe b0 f5 df 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003a2c:	30 9c       	mov	r12,9
80003a2e:	fe b0 f4 0c 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003a32:	30 fb       	mov	r11,15
80003a34:	fe 7c 28 00 	mov	r12,-55296
80003a38:	fe b0 f6 6b 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003a3c:	30 0b       	mov	r11,0
80003a3e:	fe 7c 28 00 	mov	r12,-55296
80003a42:	fe b0 f5 fa 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003a46:	30 0b       	mov	r11,0
80003a48:	fe 7c 28 00 	mov	r12,-55296
80003a4c:	fe b0 f5 cd 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003a50:	30 9c       	mov	r12,9
80003a52:	fe b0 f3 fa 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003a56:	e0 6b 00 a4 	mov	r11,164
80003a5a:	fe 7c 28 00 	mov	r12,-55296
80003a5e:	fe b0 f6 58 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003a62:	30 0b       	mov	r11,0
80003a64:	fe 7c 28 00 	mov	r12,-55296
80003a68:	fe b0 f5 e7 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003a6c:	30 0b       	mov	r11,0
80003a6e:	fe 7c 28 00 	mov	r12,-55296
80003a72:	fe b0 f5 ba 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003a76:	30 9c       	mov	r12,9
80003a78:	fe b0 f3 e7 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003a7c:	e0 6b 00 b8 	mov	r11,184
80003a80:	fe 7c 28 00 	mov	r12,-55296
80003a84:	fe b0 f6 45 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003a88:	30 0b       	mov	r11,0
80003a8a:	fe 7c 28 00 	mov	r12,-55296
80003a8e:	fe b0 f5 d4 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003a92:	30 0b       	mov	r11,0
80003a94:	fe 7c 28 00 	mov	r12,-55296
80003a98:	fe b0 f5 a7 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003a9c:	30 9c       	mov	r12,9
80003a9e:	fe b0 f3 d4 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003aa2:	30 1b       	mov	r11,1
80003aa4:	fe 7c 28 00 	mov	r12,-55296
80003aa8:	fe b0 f6 33 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003aac:	30 0b       	mov	r11,0
80003aae:	fe 7c 28 00 	mov	r12,-55296
80003ab2:	fe b0 f5 c2 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003ab6:	30 0b       	mov	r11,0
80003ab8:	fe 7c 28 00 	mov	r12,-55296
80003abc:	fe b0 f5 95 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003ac0:	30 9c       	mov	r12,9
80003ac2:	fe b0 f3 c2 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003ac6:	31 1b       	mov	r11,17
80003ac8:	fe 7c 28 00 	mov	r12,-55296
80003acc:	fe b0 f6 21 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003ad0:	30 0b       	mov	r11,0
80003ad2:	fe 7c 28 00 	mov	r12,-55296
80003ad6:	fe b0 f5 b0 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003ada:	30 0b       	mov	r11,0
80003adc:	fe 7c 28 00 	mov	r12,-55296
80003ae0:	fe b0 f5 83 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003ae4:	30 9c       	mov	r12,9
80003ae6:	fe b0 f3 b0 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003aea:	32 2b       	mov	r11,34
80003aec:	fe 7c 28 00 	mov	r12,-55296
80003af0:	fe b0 f6 0f 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003af4:	30 0b       	mov	r11,0
80003af6:	fe 7c 28 00 	mov	r12,-55296
80003afa:	fe b0 f5 9e 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003afe:	30 0b       	mov	r11,0
80003b00:	fe 7c 28 00 	mov	r12,-55296
80003b04:	fe b0 f5 71 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003b08:	30 9c       	mov	r12,9
80003b0a:	fe b0 f3 9e 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003b0e:	33 2b       	mov	r11,50
80003b10:	fe 7c 28 00 	mov	r12,-55296
80003b14:	fe b0 f5 fd 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003b18:	30 0b       	mov	r11,0
80003b1a:	fe 7c 28 00 	mov	r12,-55296
80003b1e:	fe b0 f5 8c 	rcall	80002636 <spi_unselectChip>
  write_command(0xB8);		// greyscale table
  write_command(0x01);
  write_command(0x11);
  write_command(0x22);
  write_command(0x32);
  write_command(0x43);
80003b22:	34 3c       	mov	r12,67
80003b24:	fe b0 fb 22 	rcall	80003168 <write_command>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003b28:	30 0b       	mov	r11,0
80003b2a:	fe 7c 28 00 	mov	r12,-55296
80003b2e:	fe b0 f5 5c 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003b32:	30 9c       	mov	r12,9
80003b34:	fe b0 f3 89 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003b38:	35 4b       	mov	r11,84
80003b3a:	fe 7c 28 00 	mov	r12,-55296
80003b3e:	fe b0 f5 e8 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003b42:	30 0b       	mov	r11,0
80003b44:	fe 7c 28 00 	mov	r12,-55296
80003b48:	fe b0 f5 77 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003b4c:	30 0b       	mov	r11,0
80003b4e:	fe 7c 28 00 	mov	r12,-55296
80003b52:	fe b0 f5 4a 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003b56:	30 9c       	mov	r12,9
80003b58:	fe b0 f3 77 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003b5c:	36 5b       	mov	r11,101
80003b5e:	fe 7c 28 00 	mov	r12,-55296
80003b62:	fe b0 f5 d6 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003b66:	30 0b       	mov	r11,0
80003b68:	fe 7c 28 00 	mov	r12,-55296
80003b6c:	fe b0 f5 65 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003b70:	30 0b       	mov	r11,0
80003b72:	fe 7c 28 00 	mov	r12,-55296
80003b76:	fe b0 f5 38 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003b7a:	30 9c       	mov	r12,9
80003b7c:	fe b0 f3 65 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003b80:	37 6b       	mov	r11,118
80003b82:	fe 7c 28 00 	mov	r12,-55296
80003b86:	fe b0 f5 c4 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003b8a:	30 0b       	mov	r11,0
80003b8c:	fe 7c 28 00 	mov	r12,-55296
80003b90:	fe b0 f5 53 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003b94:	30 0b       	mov	r11,0
80003b96:	fe 7c 28 00 	mov	r12,-55296
80003b9a:	fe b0 f5 26 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003b9e:	30 9c       	mov	r12,9
80003ba0:	fe b0 f3 53 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003ba4:	31 5b       	mov	r11,21
80003ba6:	fe 7c 28 00 	mov	r12,-55296
80003baa:	fe b0 f5 b2 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003bae:	30 0b       	mov	r11,0
80003bb0:	fe 7c 28 00 	mov	r12,-55296
80003bb4:	fe b0 f5 41 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003bb8:	30 0b       	mov	r11,0
80003bba:	fe 7c 28 00 	mov	r12,-55296
80003bbe:	fe b0 f5 14 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003bc2:	30 9c       	mov	r12,9
80003bc4:	fe b0 f3 41 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003bc8:	30 0b       	mov	r11,0
80003bca:	fe 7c 28 00 	mov	r12,-55296
80003bce:	fe b0 f5 a0 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003bd2:	30 0b       	mov	r11,0
80003bd4:	fe 7c 28 00 	mov	r12,-55296
80003bd8:	fe b0 f5 2f 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003bdc:	30 0b       	mov	r11,0
80003bde:	fe 7c 28 00 	mov	r12,-55296
80003be2:	fe b0 f5 02 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003be6:	30 9c       	mov	r12,9
80003be8:	fe b0 f3 2f 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003bec:	33 fb       	mov	r11,63
80003bee:	fe 7c 28 00 	mov	r12,-55296
80003bf2:	fe b0 f5 8e 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003bf6:	30 0b       	mov	r11,0
80003bf8:	fe 7c 28 00 	mov	r12,-55296
80003bfc:	fe b0 f5 1d 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003c00:	30 0b       	mov	r11,0
80003c02:	fe 7c 28 00 	mov	r12,-55296
80003c06:	fe b0 f4 f0 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003c0a:	30 9c       	mov	r12,9
80003c0c:	fe b0 f3 1d 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003c10:	37 5b       	mov	r11,117
80003c12:	fe 7c 28 00 	mov	r12,-55296
80003c16:	fe b0 f5 7c 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003c1a:	30 0b       	mov	r11,0
80003c1c:	fe 7c 28 00 	mov	r12,-55296
80003c20:	fe b0 f5 0b 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003c24:	30 0b       	mov	r11,0
80003c26:	fe 7c 28 00 	mov	r12,-55296
80003c2a:	fe b0 f4 de 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003c2e:	30 9c       	mov	r12,9
80003c30:	fe b0 f3 0b 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003c34:	30 0b       	mov	r11,0
80003c36:	fe 7c 28 00 	mov	r12,-55296
80003c3a:	fe b0 f5 6a 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003c3e:	30 0b       	mov	r11,0
80003c40:	fe 7c 28 00 	mov	r12,-55296
80003c44:	fe b0 f4 f9 	rcall	80002636 <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003c48:	30 0b       	mov	r11,0
80003c4a:	fe 7c 28 00 	mov	r12,-55296
80003c4e:	fe b0 f4 cc 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003c52:	30 9c       	mov	r12,9
80003c54:	fe b0 f2 f9 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003c58:	33 fb       	mov	r11,63
80003c5a:	fe 7c 28 00 	mov	r12,-55296
80003c5e:	fe b0 f5 58 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003c62:	30 0b       	mov	r11,0
80003c64:	fe 7c 28 00 	mov	r12,-55296
80003c68:	fe b0 f4 e7 	rcall	80002636 <spi_unselectChip>
80003c6c:	30 07       	mov	r7,0

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003c6e:	30 0b       	mov	r11,0
80003c70:	fe 7c 28 00 	mov	r12,-55296
80003c74:	fe b0 f4 b9 	rcall	800025e6 <spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80003c78:	30 9c       	mov	r12,9
80003c7a:	fe b0 f2 d9 	rcall	8000222c <gpio_set_gpio_pin>
  spi_write(OLED_SPI, c);
80003c7e:	30 0b       	mov	r11,0
80003c80:	fe 7c 28 00 	mov	r12,-55296
80003c84:	fe b0 f5 45 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003c88:	30 0b       	mov	r11,0
80003c8a:	2f f7       	sub	r7,-1
80003c8c:	fe 7c 28 00 	mov	r12,-55296
80003c90:	fe b0 f4 d3 	rcall	80002636 <spi_unselectChip>
  write_command(0x75);
  write_command(0);
  write_command(63);
		
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
80003c94:	e0 47 10 00 	cp.w	r7,4096
80003c98:	ce b1       	brne	80003c6e <init_oled+0x596>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80003c9a:	30 0b       	mov	r11,0
80003c9c:	fe 7c 28 00 	mov	r12,-55296
80003ca0:	fe b0 f4 a3 	rcall	800025e6 <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80003ca4:	30 9c       	mov	r12,9
80003ca6:	fe b0 f2 d0 	rcall	80002246 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80003caa:	e0 6b 00 af 	mov	r11,175
80003cae:	fe 7c 28 00 	mov	r12,-55296
80003cb2:	fe b0 f5 2e 	rcall	8000270e <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80003cb6:	30 0b       	mov	r11,0
80003cb8:	fe 7c 28 00 	mov	r12,-55296
80003cbc:	fe b0 f4 bd 	rcall	80002636 <spi_unselectChip>
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
  write_command(0xAF);	// on

  //  delay_ms(10) 
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
80003cc0:	e2 78 ef 14 	mov	r8,257812
80003cc4:	30 09       	mov	r9,0
80003cc6:	fa e9 00 00 	st.d	sp[0],r8
80003cca:	fa e8 00 00 	ld.d	r8,sp[0]
80003cce:	58 08       	cp.w	r8,0
80003cd0:	5c 29       	cpc	r9
80003cd2:	c0 f0       	breq	80003cf0 <init_oled+0x618>
80003cd4:	3f fa       	mov	r10,-1
80003cd6:	3f fb       	mov	r11,-1
80003cd8:	fa e8 00 00 	ld.d	r8,sp[0]
80003cdc:	14 08       	add	r8,r10
80003cde:	f2 0b 00 49 	adc	r9,r9,r11
80003ce2:	fa e9 00 00 	st.d	sp[0],r8
80003ce6:	fa e8 00 00 	ld.d	r8,sp[0]
80003cea:	58 08       	cp.w	r8,0
80003cec:	5c 29       	cpc	r9
80003cee:	cf 51       	brne	80003cd8 <init_oled+0x600>
  //  cpu_irq_enable();
  Enable_global_interrupt();
80003cf0:	d5 03       	csrf	0x10

}
80003cf2:	2f ed       	sub	sp,-8
80003cf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80003cf8 <process_sw>:
  { kEventSwitchDown3, kEventSwitchUp3 },
  { kEventSwitchDown4, kEventSwitchUp4 },
};

// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
80003cf8:	eb cd 40 80 	pushm	r7,lr
  static event_t e;   

  //  if( (tcTicks - swTicks[swIdx]) > 30) { 
  if(1) {
    e.eventType = kSwitchEvents[swIdx][gpio_get_pin_value(kSwitchPins[swIdx])];
80003cfc:	fe c8 98 c0 	sub	r8,pc,-26432
80003d00:	18 97       	mov	r7,r12
80003d02:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80003d06:	fe b0 f2 88 	rcall	80002216 <gpio_get_pin_value>
80003d0a:	e0 68 17 9c 	mov	r8,6044
80003d0e:	f8 07 00 1a 	add	r10,r12,r7<<0x1
80003d12:	fe c9 98 fe 	sub	r9,pc,-26370
80003d16:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
    post_event(&e);
80003d1a:	10 9c       	mov	r12,r8
  }
  swTicks[swIdx] = tcTicks;
80003d1c:	91 09       	st.w	r8[0x0],r9
80003d1e:	fe b0 f7 21 	rcall	80002b60 <post_event>
80003d22:	e0 68 07 0c 	mov	r8,1804
80003d26:	f0 ea 00 00 	ld.d	r10,r8[0]
}
80003d2a:	e0 68 17 74 	mov	r8,6004
80003d2e:	f0 07 08 3a 	st.d	r8[r7<<0x3],r10
80003d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d36:	d7 03       	nop

80003d38 <process_timers>:
}


// process the list of timers.
// called by client at desired tick interval.
void process_timers( void ) {
80003d38:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003d3c:	e0 67 17 a4 	mov	r7,6052
    if ( t == 0 ) { continue; }
80003d40:	6e 06       	ld.w	r6,r7[0x0]
80003d42:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003d44:	c0 80       	breq	80003d54 <process_timers+0x1c>
80003d46:	6c 28       	ld.w	r8,r6[0x8]
80003d48:	58 08       	cp.w	r8,0
80003d4a:	e0 8a 00 05 	brle	80003d54 <process_timers+0x1c>
      // time remaining, decrement tick counter
      t->timeout--;
80003d4e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003d50:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003d52:	c5 50       	breq	80003dfc <process_timers+0xc4>
    if ( t == 0 ) { continue; }
80003d54:	6e 16       	ld.w	r6,r7[0x4]
80003d56:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003d58:	c0 80       	breq	80003d68 <process_timers+0x30>
80003d5a:	6c 28       	ld.w	r8,r6[0x8]
80003d5c:	58 08       	cp.w	r8,0
80003d5e:	e0 8a 00 05 	brle	80003d68 <process_timers+0x30>
      // time remaining, decrement tick counter
      t->timeout--;
80003d62:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003d64:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003d66:	c5 90       	breq	80003e18 <process_timers+0xe0>
    if ( t == 0 ) { continue; }
80003d68:	6e 26       	ld.w	r6,r7[0x8]
80003d6a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003d6c:	c0 80       	breq	80003d7c <process_timers+0x44>
80003d6e:	6c 28       	ld.w	r8,r6[0x8]
80003d70:	58 08       	cp.w	r8,0
80003d72:	e0 8a 00 05 	brle	80003d7c <process_timers+0x44>
      // time remaining, decrement tick counter
      t->timeout--;
80003d76:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003d78:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003d7a:	c5 d0       	breq	80003e34 <process_timers+0xfc>
    if ( t == 0 ) { continue; }
80003d7c:	6e 36       	ld.w	r6,r7[0xc]
80003d7e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003d80:	c0 80       	breq	80003d90 <process_timers+0x58>
80003d82:	6c 28       	ld.w	r8,r6[0x8]
80003d84:	58 08       	cp.w	r8,0
80003d86:	e0 8a 00 05 	brle	80003d90 <process_timers+0x58>
      // time remaining, decrement tick counter
      t->timeout--;
80003d8a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003d8c:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003d8e:	c6 10       	breq	80003e50 <process_timers+0x118>
    if ( t == 0 ) { continue; }
80003d90:	6e 46       	ld.w	r6,r7[0x10]
80003d92:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003d94:	c0 80       	breq	80003da4 <process_timers+0x6c>
80003d96:	6c 28       	ld.w	r8,r6[0x8]
80003d98:	58 08       	cp.w	r8,0
80003d9a:	e0 8a 00 05 	brle	80003da4 <process_timers+0x6c>
      // time remaining, decrement tick counter
      t->timeout--;
80003d9e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003da0:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003da2:	c6 50       	breq	80003e6c <process_timers+0x134>
    if ( t == 0 ) { continue; }
80003da4:	6e 56       	ld.w	r6,r7[0x14]
80003da6:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003da8:	c0 80       	breq	80003db8 <process_timers+0x80>
80003daa:	6c 28       	ld.w	r8,r6[0x8]
80003dac:	58 08       	cp.w	r8,0
80003dae:	e0 8a 00 05 	brle	80003db8 <process_timers+0x80>
      // time remaining, decrement tick counter
      t->timeout--;
80003db2:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003db4:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003db6:	c6 90       	breq	80003e88 <process_timers+0x150>
    if ( t == 0 ) { continue; }
80003db8:	6e 66       	ld.w	r6,r7[0x18]
80003dba:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003dbc:	c0 80       	breq	80003dcc <process_timers+0x94>
80003dbe:	6c 28       	ld.w	r8,r6[0x8]
80003dc0:	58 08       	cp.w	r8,0
80003dc2:	e0 8a 00 05 	brle	80003dcc <process_timers+0x94>
      // time remaining, decrement tick counter
      t->timeout--;
80003dc6:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003dc8:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80003dca:	c6 d0       	breq	80003ea4 <process_timers+0x16c>
    if ( t == 0 ) { continue; }
80003dcc:	6e 76       	ld.w	r6,r7[0x1c]
80003dce:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80003dd0:	c0 80       	breq	80003de0 <process_timers+0xa8>
80003dd2:	6c 28       	ld.w	r8,r6[0x8]
80003dd4:	58 08       	cp.w	r8,0
80003dd6:	e0 8a 00 05 	brle	80003de0 <process_timers+0xa8>
      // time remaining, decrement tick counter
      t->timeout--;
80003dda:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80003ddc:	8d 28       	st.w	r6[0x8],r8
80003dde:	c0 30       	breq	80003de4 <process_timers+0xac>
80003de0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
80003de4:	6c 48       	ld.w	r8,r6[0x10]
80003de6:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003de8:	c0 30       	breq	80003dee <process_timers+0xb6>
80003dea:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003dec:	5d 18       	icall	r8
80003dee:	6c 08       	ld.w	r8,r6[0x0]
80003df0:	58 08       	cp.w	r8,0
	  t->timeout = t->timeoutReload;
80003df2:	c6 70       	breq	80003ec0 <process_timers+0x188>
80003df4:	6c 38       	ld.w	r8,r6[0xc]
80003df6:	8d 28       	st.w	r6[0x8],r8
80003df8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003dfc:	6c 48       	ld.w	r8,r6[0x10]
80003dfe:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003e00:	c0 30       	breq	80003e06 <process_timers+0xce>
80003e02:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003e04:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003e06:	6c 08       	ld.w	r8,r6[0x0]
80003e08:	58 08       	cp.w	r8,0
80003e0a:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003e0e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003e12:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003e16:	c9 fb       	rjmp	80003d54 <process_timers+0x1c>
80003e18:	6c 48       	ld.w	r8,r6[0x10]
80003e1a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003e1c:	c0 30       	breq	80003e22 <process_timers+0xea>
80003e1e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003e20:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003e22:	6c 08       	ld.w	r8,r6[0x0]
80003e24:	58 08       	cp.w	r8,0
80003e26:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003e2a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003e2e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003e32:	c9 bb       	rjmp	80003d68 <process_timers+0x30>
80003e34:	6c 48       	ld.w	r8,r6[0x10]
80003e36:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003e38:	c0 30       	breq	80003e3e <process_timers+0x106>
80003e3a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003e3c:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003e3e:	6c 08       	ld.w	r8,r6[0x0]
80003e40:	58 08       	cp.w	r8,0
80003e42:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003e46:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003e4a:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003e4e:	c9 7b       	rjmp	80003d7c <process_timers+0x44>
80003e50:	6c 48       	ld.w	r8,r6[0x10]
80003e52:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003e54:	c0 30       	breq	80003e5a <process_timers+0x122>
80003e56:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003e58:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003e5a:	6c 08       	ld.w	r8,r6[0x0]
80003e5c:	58 08       	cp.w	r8,0
80003e5e:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003e62:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003e66:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003e6a:	c9 3b       	rjmp	80003d90 <process_timers+0x58>
80003e6c:	6c 48       	ld.w	r8,r6[0x10]
80003e6e:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003e70:	c0 30       	breq	80003e76 <process_timers+0x13e>
80003e72:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003e74:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003e76:	6c 08       	ld.w	r8,r6[0x0]
80003e78:	58 08       	cp.w	r8,0
80003e7a:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003e7e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003e82:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003e86:	c8 fb       	rjmp	80003da4 <process_timers+0x6c>
80003e88:	6c 48       	ld.w	r8,r6[0x10]
80003e8a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003e8c:	c0 30       	breq	80003e92 <process_timers+0x15a>
80003e8e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003e90:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003e92:	6c 08       	ld.w	r8,r6[0x0]
80003e94:	58 08       	cp.w	r8,0
80003e96:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003e9a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003e9e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80003ea2:	c8 bb       	rjmp	80003db8 <process_timers+0x80>
80003ea4:	6c 48       	ld.w	r8,r6[0x10]
80003ea6:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80003ea8:	c0 30       	breq	80003eae <process_timers+0x176>
80003eaa:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80003eac:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003eae:	6c 08       	ld.w	r8,r6[0x0]
80003eb0:	58 08       	cp.w	r8,0
80003eb2:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80003eb6:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80003eba:	ed f8 1a 02 	st.wne	r6[0x8],r8
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80003ebe:	c8 7b       	rjmp	80003dcc <process_timers+0x94>
80003ec0:	8f 78       	st.w	r7[0x1c],r8
80003ec2:	c8 fb       	rjmp	80003de0 <process_timers+0xa8>

80003ec4 <scroll_event>:
  return 1;
}


/// TEST: add a string to the scroll output
static void scroll_event(const char* str, s16 val) {
80003ec4:	eb cd 40 fc 	pushm	r2-r7,lr
80003ec8:	18 97       	mov	r7,r12
80003eca:	16 95       	mov	r5,r11
  u8 x=0;
  // timestamp
  //  itoa_whole((int)tcTicks, eventScroll[scrollIdx], 6);
  // string
  //  str_copy(str, eventScroll[scrollIdx], 10);
  print_dbg("\r\n scrolling event: ");
80003ecc:	fe cc 9a 3c 	sub	r12,pc,-26052
80003ed0:	fe b0 f6 12 	rcall	80002af4 <print_dbg>
  print_dbg(str);
80003ed4:	0e 9c       	mov	r12,r7
80003ed6:	fe b0 f6 0f 	rcall	80002af4 <print_dbg>
  strcpy(eventScroll[scrollIdx], str);
80003eda:	0e 9b       	mov	r11,r7
80003edc:	e0 66 17 cc 	mov	r6,6092
80003ee0:	e0 67 19 1c 	mov	r7,6428
80003ee4:	0f 8c       	ld.ub	r12,r7[0x0]
80003ee6:	f8 0c 10 2a 	mul	r12,r12,42
80003eea:	ec 0c 00 0c 	add	r12,r6,r12
80003eee:	e0 a0 09 9d 	rcall	80005228 <strcpy>
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
80003ef2:	e0 63 19 28 	mov	r3,6440
80003ef6:	0f 84       	ld.ub	r4,r7[0x0]
  eventScrollTimes[scrollIdx] = tcTicks;
80003ef8:	e0 68 07 0c 	mov	r8,1804
  //  str_copy(str, eventScroll[scrollIdx], 10);
  print_dbg("\r\n scrolling event: ");
  print_dbg(str);
  strcpy(eventScroll[scrollIdx], str);
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
80003efc:	e6 04 0a 15 	st.h	r3[r4<<0x1],r5
  eventScrollTimes[scrollIdx] = tcTicks;
80003f00:	f0 e8 00 00 	ld.d	r8,r8[0]
80003f04:	e0 65 19 38 	mov	r5,6456
80003f08:	ea 04 08 38 	st.d	r5[r4<<0x3],r8
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80003f0c:	30 08       	mov	r8,0
80003f0e:	f0 04 18 00 	cp.b	r4,r8
80003f12:	e0 85 01 41 	brlt	80004194 <scroll_event+0x2d0>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003f16:	5c 64       	casts.b	r4
80003f18:	ea 04 00 38 	add	r8,r5,r4<<0x3
80003f1c:	30 0b       	mov	r11,0
80003f1e:	90 3a       	ld.sh	r10,r8[0x6]
80003f20:	30 f9       	mov	r9,15
80003f22:	16 9c       	mov	r12,r11
80003f24:	fe b0 fb bc 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003f28:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003f2a:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003f2c:	30 0b       	mov	r11,0
80003f2e:	e8 0a 10 2a 	mul	r10,r4,42
80003f32:	ec 0a 00 0a 	add	r10,r6,r10
80003f36:	fe b0 fb 5d 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
80003f3a:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
80003f3e:	30 f9       	mov	r9,15
80003f40:	30 0b       	mov	r11,0
80003f42:	32 5c       	mov	r12,37
80003f44:	fe b0 fb ac 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
80003f48:	e8 08 16 1f 	lsr	r8,r4,0x1f
80003f4c:	10 04       	add	r4,r8
80003f4e:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80003f52:	e8 08 01 08 	sub	r8,r4,r8
80003f56:	04 9c       	mov	r12,r2
80003f58:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003f5c:	30 0b       	mov	r11,0
80003f5e:	fe b0 f9 1d 	rcall	80003198 <screen_hl_line>
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80003f62:	30 08       	mov	r8,0
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
80003f64:	0f 84       	ld.ub	r4,r7[0x0]
80003f66:	20 14       	sub	r4,1
80003f68:	5c 54       	castu.b	r4
    if(n < 0) { n += CHAR_ROWS; }
80003f6a:	f0 04 18 00 	cp.b	r4,r8
80003f6e:	e0 85 01 25 	brlt	800041b8 <scroll_event+0x2f4>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003f72:	5c 64       	casts.b	r4
80003f74:	ea 04 00 38 	add	r8,r5,r4<<0x3
80003f78:	30 f9       	mov	r9,15
80003f7a:	90 3a       	ld.sh	r10,r8[0x6]
80003f7c:	30 8b       	mov	r11,8
80003f7e:	30 0c       	mov	r12,0
80003f80:	fe b0 fb 8e 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003f84:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003f86:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003f88:	30 8b       	mov	r11,8
80003f8a:	e8 0a 10 2a 	mul	r10,r4,42
80003f8e:	ec 0a 00 0a 	add	r10,r6,r10
80003f92:	fe b0 fb 2f 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
80003f96:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
80003f9a:	30 f9       	mov	r9,15
80003f9c:	30 8b       	mov	r11,8
80003f9e:	32 5c       	mov	r12,37
80003fa0:	fe b0 fb 7e 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
80003fa4:	e8 08 16 1f 	lsr	r8,r4,0x1f
80003fa8:	10 04       	add	r4,r8
80003faa:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80003fae:	e8 08 01 08 	sub	r8,r4,r8
80003fb2:	04 9c       	mov	r12,r2
80003fb4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003fb8:	30 8b       	mov	r11,8
80003fba:	fe b0 f8 ef 	rcall	80003198 <screen_hl_line>
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80003fbe:	30 08       	mov	r8,0
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
80003fc0:	0f 84       	ld.ub	r4,r7[0x0]
80003fc2:	20 24       	sub	r4,2
80003fc4:	5c 54       	castu.b	r4
    if(n < 0) { n += CHAR_ROWS; }
80003fc6:	f0 04 18 00 	cp.b	r4,r8
80003fca:	e0 85 00 f4 	brlt	800041b2 <scroll_event+0x2ee>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003fce:	5c 64       	casts.b	r4
80003fd0:	ea 04 00 38 	add	r8,r5,r4<<0x3
80003fd4:	30 f9       	mov	r9,15
80003fd6:	90 3a       	ld.sh	r10,r8[0x6]
80003fd8:	31 0b       	mov	r11,16
80003fda:	30 0c       	mov	r12,0
80003fdc:	fe b0 fb 60 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003fe0:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80003fe2:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80003fe4:	31 0b       	mov	r11,16
80003fe6:	e8 0a 10 2a 	mul	r10,r4,42
80003fea:	ec 0a 00 0a 	add	r10,r6,r10
80003fee:	fe b0 fb 01 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
80003ff2:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
80003ff6:	30 f9       	mov	r9,15
80003ff8:	31 0b       	mov	r11,16
80003ffa:	32 5c       	mov	r12,37
80003ffc:	fe b0 fb 50 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
80004000:	e8 08 16 1f 	lsr	r8,r4,0x1f
80004004:	10 04       	add	r4,r8
80004006:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
8000400a:	e8 08 01 08 	sub	r8,r4,r8
8000400e:	04 9c       	mov	r12,r2
80004010:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80004014:	31 0b       	mov	r11,16
80004016:	fe b0 f8 c1 	rcall	80003198 <screen_hl_line>
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
8000401a:	30 08       	mov	r8,0
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
8000401c:	0f 84       	ld.ub	r4,r7[0x0]
8000401e:	20 34       	sub	r4,3
80004020:	5c 54       	castu.b	r4
    if(n < 0) { n += CHAR_ROWS; }
80004022:	f0 04 18 00 	cp.b	r4,r8
80004026:	e0 85 00 c3 	brlt	800041ac <scroll_event+0x2e8>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000402a:	5c 64       	casts.b	r4
8000402c:	ea 04 00 38 	add	r8,r5,r4<<0x3
80004030:	30 f9       	mov	r9,15
80004032:	90 3a       	ld.sh	r10,r8[0x6]
80004034:	31 8b       	mov	r11,24
80004036:	30 0c       	mov	r12,0
80004038:	fe b0 fb 32 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000403c:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000403e:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80004040:	31 8b       	mov	r11,24
80004042:	e8 0a 10 2a 	mul	r10,r4,42
80004046:	ec 0a 00 0a 	add	r10,r6,r10
8000404a:	fe b0 fa d3 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
8000404e:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
80004052:	30 f9       	mov	r9,15
80004054:	31 8b       	mov	r11,24
80004056:	32 5c       	mov	r12,37
80004058:	fe b0 fb 22 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
8000405c:	e8 08 16 1f 	lsr	r8,r4,0x1f
80004060:	10 04       	add	r4,r8
80004062:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80004066:	e8 08 01 08 	sub	r8,r4,r8
8000406a:	04 9c       	mov	r12,r2
8000406c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80004070:	31 8b       	mov	r11,24
80004072:	fe b0 f8 93 	rcall	80003198 <screen_hl_line>
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80004076:	30 08       	mov	r8,0
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
80004078:	0f 84       	ld.ub	r4,r7[0x0]
8000407a:	20 44       	sub	r4,4
8000407c:	5c 54       	castu.b	r4
    if(n < 0) { n += CHAR_ROWS; }
8000407e:	f0 04 18 00 	cp.b	r4,r8
80004082:	e0 85 00 92 	brlt	800041a6 <scroll_event+0x2e2>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
80004086:	5c 64       	casts.b	r4
80004088:	ea 04 00 38 	add	r8,r5,r4<<0x3
8000408c:	30 f9       	mov	r9,15
8000408e:	90 3a       	ld.sh	r10,r8[0x6]
80004090:	32 0b       	mov	r11,32
80004092:	30 0c       	mov	r12,0
80004094:	fe b0 fb 04 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80004098:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000409a:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000409c:	32 0b       	mov	r11,32
8000409e:	e8 0a 10 2a 	mul	r10,r4,42
800040a2:	ec 0a 00 0a 	add	r10,r6,r10
800040a6:	fe b0 fa a5 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
800040aa:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
800040ae:	30 f9       	mov	r9,15
800040b0:	32 0b       	mov	r11,32
800040b2:	32 5c       	mov	r12,37
800040b4:	fe b0 fa f4 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
800040b8:	e8 08 16 1f 	lsr	r8,r4,0x1f
800040bc:	10 04       	add	r4,r8
800040be:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
800040c2:	e8 08 01 08 	sub	r8,r4,r8
800040c6:	04 9c       	mov	r12,r2
800040c8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800040cc:	32 0b       	mov	r11,32
800040ce:	fe b0 f8 65 	rcall	80003198 <screen_hl_line>
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
800040d2:	30 08       	mov	r8,0
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
800040d4:	0f 84       	ld.ub	r4,r7[0x0]
800040d6:	20 54       	sub	r4,5
800040d8:	5c 54       	castu.b	r4
    if(n < 0) { n += CHAR_ROWS; }
800040da:	f0 04 18 00 	cp.b	r4,r8
800040de:	c6 15       	brlt	800041a0 <scroll_event+0x2dc>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
800040e0:	5c 64       	casts.b	r4
800040e2:	ea 04 00 38 	add	r8,r5,r4<<0x3
800040e6:	30 f9       	mov	r9,15
800040e8:	90 3a       	ld.sh	r10,r8[0x6]
800040ea:	32 8b       	mov	r11,40
800040ec:	30 0c       	mov	r12,0
800040ee:	fe b0 fa d7 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
800040f2:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
800040f4:	18 92       	mov	r2,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
800040f6:	32 8b       	mov	r11,40
800040f8:	e8 0a 10 2a 	mul	r10,r4,42
800040fc:	ec 0a 00 0a 	add	r10,r6,r10
80004100:	fe b0 fa 78 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
80004104:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
80004108:	30 f9       	mov	r9,15
8000410a:	32 8b       	mov	r11,40
8000410c:	32 5c       	mov	r12,37
8000410e:	fe b0 fa c7 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
80004112:	e8 08 16 1f 	lsr	r8,r4,0x1f
80004116:	10 04       	add	r4,r8
80004118:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
8000411c:	e8 08 01 08 	sub	r8,r4,r8
80004120:	04 9c       	mov	r12,r2
80004122:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80004126:	32 8b       	mov	r11,40
80004128:	fe b0 f8 38 	rcall	80003198 <screen_hl_line>
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
8000412c:	30 08       	mov	r8,0
  //  itoa_whole(val, eventScroll[scrollIdx] + CHAR_COLS - 6, 5); 
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
8000412e:	0f 84       	ld.ub	r4,r7[0x0]
80004130:	20 64       	sub	r4,6
80004132:	5c 54       	castu.b	r4
    if(n < 0) { n += CHAR_ROWS; }
80004134:	f0 04 18 00 	cp.b	r4,r8
80004138:	c3 15       	brlt	8000419a <scroll_event+0x2d6>
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000413a:	5c 64       	casts.b	r4
8000413c:	30 f9       	mov	r9,15
8000413e:	ea 04 00 35 	add	r5,r5,r4<<0x3
80004142:	33 0b       	mov	r11,48
80004144:	8a 3a       	ld.sh	r10,r5[0x6]
80004146:	30 0c       	mov	r12,0
80004148:	fe b0 fa aa 	rcall	8000369c <screen_int>
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
8000414c:	30 f9       	mov	r9,15
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
    x = screen_int(0, FONT_CHARH * i, (s16)eventScrollTimes[n], 0xf);
8000414e:	18 95       	mov	r5,r12
    screen_line(x, FONT_CHARH * i, eventScroll[n], 0xf);
80004150:	33 0b       	mov	r11,48
80004152:	e8 0a 10 2a 	mul	r10,r4,42
80004156:	ec 0a 00 0a 	add	r10,r6,r10
8000415a:	fe b0 fa 4b 	rcall	800035f0 <screen_line>
    screen_int(CHAR_COLS - 5, FONT_CHARH * i, eventScrollData[n], 0xf);
8000415e:	e6 04 04 1a 	ld.sh	r10,r3[r4<<0x1]
80004162:	30 f9       	mov	r9,15
80004164:	33 0b       	mov	r11,48
80004166:	32 5c       	mov	r12,37
80004168:	fe b0 fa 9a 	rcall	8000369c <screen_int>
    screen_hl_line(x, FONT_CHARH * i, n % 2);
8000416c:	e8 08 16 1f 	lsr	r8,r4,0x1f
80004170:	10 04       	add	r4,r8
80004172:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80004176:	e8 08 01 08 	sub	r8,r4,r8
8000417a:	0a 9c       	mov	r12,r5
8000417c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80004180:	33 0b       	mov	r11,48
80004182:	fe b0 f8 0b 	rcall	80003198 <screen_hl_line>
  }
  // advance index
  scrollIdx = (scrollIdx + 1) % CHAR_ROWS;
80004186:	0f 88       	ld.ub	r8,r7[0x0]
80004188:	2f f8       	sub	r8,-1
8000418a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000418e:	ae 88       	st.b	r7[0x0],r8
}
80004190:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
  eventScrollData[scrollIdx] = val;
  eventScrollTimes[scrollIdx] = tcTicks;
  // display
  for(i=0; i<CHAR_ROWS_1; i++) {
    n = scrollIdx - i;
    if(n < 0) { n += CHAR_ROWS; }
80004194:	2f 84       	sub	r4,-8
80004196:	5c 54       	castu.b	r4
80004198:	cb fa       	rjmp	80003f16 <scroll_event+0x52>
8000419a:	2f 84       	sub	r4,-8
8000419c:	5c 54       	castu.b	r4
8000419e:	cc eb       	rjmp	8000413a <scroll_event+0x276>
800041a0:	2f 84       	sub	r4,-8
800041a2:	5c 54       	castu.b	r4
800041a4:	c9 eb       	rjmp	800040e0 <scroll_event+0x21c>
800041a6:	2f 84       	sub	r4,-8
800041a8:	5c 54       	castu.b	r4
800041aa:	c6 eb       	rjmp	80004086 <scroll_event+0x1c2>
800041ac:	2f 84       	sub	r4,-8
800041ae:	5c 54       	castu.b	r4
800041b0:	c3 db       	rjmp	8000402a <scroll_event+0x166>
800041b2:	2f 84       	sub	r4,-8
800041b4:	5c 54       	castu.b	r4
800041b6:	c0 cb       	rjmp	80003fce <scroll_event+0x10a>
800041b8:	2f 84       	sub	r4,-8
800041ba:	5c 54       	castu.b	r4
800041bc:	cd ba       	rjmp	80003f72 <scroll_event+0xae>
800041be:	d7 03       	nop

800041c0 <displayAdcVal>:
800041c0:	d4 01       	pushm	lr
800041c2:	30 19       	mov	r9,1
800041c4:	f5 db b0 10 	bfexts	r10,r11,0x0,0x10
800041c8:	f8 0c 10 1e 	mul	r12,r12,30
800041cc:	33 8b       	mov	r11,56
800041ce:	2e ec       	sub	r12,-18
800041d0:	e2 1c ff fe 	andl	r12,0xfffe,COH
800041d4:	fe b0 fa 64 	rcall	8000369c <screen_int>
800041d8:	30 fa       	mov	r10,15
800041da:	33 8b       	mov	r11,56
800041dc:	30 0c       	mov	r12,0
800041de:	fe b0 f7 dd 	rcall	80003198 <screen_hl_line>
800041e2:	d8 02       	popm	pc

800041e4 <main>:
800041e4:	d4 31       	pushm	r0-r7,lr
800041e6:	20 1d       	sub	sp,4
800041e8:	fe b0 f5 36 	rcall	80002c54 <init_clocks>
  //   pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP); 
  // initialize clocks:
  init_clocks();
  
  // initialize Interrupt Controller
  INTC_init_interrupts();
800041ec:	fe b0 f0 f8 	rcall	800023dc <INTC_init_interrupts>

  // disable interrupts
  Disable_global_interrupt();
800041f0:	d3 03       	ssrf	0x10

  // initialize RS232 debug uart
  init_ftdi_usart();
800041f2:	fe b0 f5 db 	rcall	80002da8 <init_ftdi_usart>

  // initialize oled uart in SPI mode
  init_oled_spi();
800041f6:	fe b0 f5 5f 	rcall	80002cb4 <init_oled_spi>

  // initialize blackfin resources
  //  init_bfin_resources();

  // initialize application timer
  init_tc(tc);
800041fa:	fe 7c 38 00 	mov	r12,-51200
800041fe:	fe b0 f5 e5 	rcall	80002dc8 <init_tc>

  // initialize other GPIO
  init_gpio();
80004202:	fe b0 f5 a9 	rcall	80002d54 <init_gpio>

  // register interrupts
  register_interrupts();
80004206:	fe b0 f5 fb 	rcall	80002dfc <register_interrupts>

  // initialize the OLED screen
  init_oled();
8000420a:	fe b0 fa 67 	rcall	800036d8 <init_oled>
  
  // intialize the event queue
  init_events();
8000420e:	fe b0 f4 97 	rcall	80002b3c <init_events>
  
  // intialize encoders
  //  init_encoders();

  // initialize sdram
     sdramc_init(FMCK_HZ);
80004212:	e0 6c 14 80 	mov	r12,5248
80004216:	ea 1c 03 ef 	orh	r12,0x3ef
8000421a:	fe b0 ee f5 	rcall	80002004 <sdramc_init>
  //    sdramc_init(FOSC0);
  //memory manager
  //init_mem();
  
  // Enable all interrupts.
  Enable_global_interrupt();
8000421e:	d5 03       	csrf	0x10
}
*/

// display SDRAM timing constants
static void show_sdram_constants(void) {
  print_dbg("\r\n\n SDRAM constants: \r\n");
80004220:	fe cc 9d 78 	sub	r12,pc,-25224
80004224:	fe b0 f4 68 	rcall	80002af4 <print_dbg>
  print_dbg("\n part header: ");
80004228:	fe cc 9d 68 	sub	r12,pc,-25240
8000422c:	fe b0 f4 64 	rcall	80002af4 <print_dbg>
  print_dbg(SDRAM_PART_HDR);
80004230:	fe cc 9d 60 	sub	r12,pc,-25248
80004234:	fe b0 f4 60 	rcall	80002af4 <print_dbg>
  print_dbg("\r\n");
80004238:	fe cc 9e 88 	sub	r12,pc,-24952
8000423c:	fe b0 f4 5c 	rcall	80002af4 <print_dbg>
//! The number of bank bits for this SDRAM (1 or 2).
  print_dbg("\n bank bits: "); print_dbg_ulong(  SDRAM_BANK_BITS                 );
80004240:	fe cc 9d 5c 	sub	r12,pc,-25252
80004244:	fe b0 f4 58 	rcall	80002af4 <print_dbg>
80004248:	30 2c       	mov	r12,2
8000424a:	fe b0 f4 33 	rcall	80002ab0 <print_dbg_ulong>

//! The number of row bits for this SDRAM (11 to 13).
  print_dbg("\r\n row bits:"); print_dbg_ulong(  SDRAM_ROW_BITS                  );
8000424e:	fe cc 9d 5a 	sub	r12,pc,-25254
80004252:	fe b0 f4 51 	rcall	80002af4 <print_dbg>
80004256:	30 dc       	mov	r12,13
80004258:	fe b0 f4 2c 	rcall	80002ab0 <print_dbg_ulong>

//! The number of column bits for this SDRAM (8 to 11).
  print_dbg("\r\n col bits:"); print_dbg_ulong(  SDRAM_COL_BITS                 );
8000425c:	fe cc 9d 58 	sub	r12,pc,-25256
80004260:	fe b0 f4 4a 	rcall	80002af4 <print_dbg>
80004264:	30 9c       	mov	r12,9
80004266:	fe b0 f4 25 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal column address select (READ) latency for this SDRAM (1 to 3 SDRAM cycles).
//! Unit: tCK (SDRAM cycle period).
  print_dbg("\r\n CAS latency: "); print_dbg_ulong(  SDRAM_CAS                       );
8000426a:	fe cc 9d 56 	sub	r12,pc,-25258
8000426e:	fe b0 f4 43 	rcall	80002af4 <print_dbg>
80004272:	30 2c       	mov	r12,2
80004274:	fe b0 f4 1e 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal write recovery time for this SDRAM (0 to 15 SDRAM cycles).
//! Unit: ns.
  print_dbg("\r\n T_WR: "); print_dbg_ulong(  SDRAM_TWR                       );
80004278:	fe cc 9d 50 	sub	r12,pc,-25264
8000427c:	fe b0 f4 3c 	rcall	80002af4 <print_dbg>
80004280:	30 fc       	mov	r12,15
80004282:	fe b0 f4 17 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal row cycle time for this SDRAM (0 to 15 SDRAM cycles).
//! ACTIVE-to-ACTIVE command delay.
//! Unit: ns.
  print_dbg("\r\n T_RC: "); print_dbg_ulong(  SDRAM_TRC                       );
80004286:	fe cc 9d 52 	sub	r12,pc,-25262
8000428a:	fe b0 f4 35 	rcall	80002af4 <print_dbg>
8000428e:	34 2c       	mov	r12,66
80004290:	fe b0 f4 10 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal row precharge time for this SDRAM (0 to 15 SDRAM cycles).
//! PRECHARGE command period.
//! Unit: ns.
  print_dbg("\r\n T_RP: "); print_dbg_ulong(  SDRAM_TRP                       );
80004294:	fe cc 9d 54 	sub	r12,pc,-25260
80004298:	fe b0 f4 2e 	rcall	80002af4 <print_dbg>
8000429c:	31 4c       	mov	r12,20
8000429e:	fe b0 f4 09 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal row to column delay time for this SDRAM (0 to 15 SDRAM cycles).
//! ACTIVE-to-READ/WRITE command delay.
//! Unit: ns.
  print_dbg("\r\n T_RCD: "); print_dbg_ulong(  SDRAM_TRCD                      );
800042a2:	fe cc 9d 56 	sub	r12,pc,-25258
800042a6:	fe b0 f4 27 	rcall	80002af4 <print_dbg>
800042aa:	31 4c       	mov	r12,20
800042ac:	fe b0 f4 02 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal row address select time for this SDRAM (0 to 15 SDRAM cycles).
//! ACTIVE-to-PRECHARGE command delay.
//! Unit: ns.
  print_dbg("\r\n T_RAS: "); print_dbg_ulong(  SDRAM_TRAS                      );
800042b0:	fe cc 9d 58 	sub	r12,pc,-25256
800042b4:	fe b0 f4 20 	rcall	80002af4 <print_dbg>
800042b8:	32 cc       	mov	r12,44
800042ba:	fe b0 f3 fb 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal exit self refresh time for this SDRAM (0 to 15 SDRAM cycles).
//! Exit SELF REFRESH to ACTIVE command delay.
//! Unit: ns.
  print_dbg("\r\n T_XSR: "); print_dbg_ulong(  SDRAM_TXSR                      );
800042be:	fe cc 9d 5a 	sub	r12,pc,-25254
800042c2:	fe b0 f4 19 	rcall	80002af4 <print_dbg>
800042c6:	34 3c       	mov	r12,67
800042c8:	fe b0 f3 f4 	rcall	80002ab0 <print_dbg_ulong>

//! The maximal refresh time for this SDRAM (0 to 4095 SDRAM cycles).
//! Refresh period.
//! Unit: ns.
  print_dbg("\r\n T_R: "); print_dbg_ulong(  SDRAM_TR                        );
800042cc:	fe cc 9d 5c 	sub	r12,pc,-25252
800042d0:	fe b0 f4 12 	rcall	80002af4 <print_dbg>
800042d4:	e0 6c 1e 84 	mov	r12,7812
800042d8:	fe b0 f3 ec 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal refresh cycle time for this SDRAM.
//! AUTO REFRESH command period.
//! Unit: ns.
  print_dbg("\r\n T_RFC: "); print_dbg_ulong(  SDRAM_TRFC                      );
800042dc:	fe cc 9d 60 	sub	r12,pc,-25248
800042e0:	fe b0 f4 0a 	rcall	80002af4 <print_dbg>
800042e4:	34 2c       	mov	r12,66
800042e6:	fe b0 f3 e5 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal mode register delay time for this SDRAM.
//! LOAD MODE REGISTER command to ACTIVE or REFRESH command delay.
//! Unit: tCK (SDRAM cycle period).
  print_dbg("\r\n T_MRD: "); print_dbg_ulong(  SDRAM_TMRD                      );
800042ea:	fe cc 9d 62 	sub	r12,pc,-25246
800042ee:	fe b0 f4 03 	rcall	80002af4 <print_dbg>
800042f2:	30 2c       	mov	r12,2
800042f4:	fe b0 f3 de 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal stable-clock initialization delay for this SDRAM.
//! Unit: us.
  print_dbg("\r\n STABLE_CLOCK_INIT_DELAY: "); print_dbg_ulong(  SDRAM_STABLE_CLOCK_INIT_DELAY   );
800042f8:	fe cc 9d 64 	sub	r12,pc,-25244
800042fc:	fe b0 f3 fc 	rcall	80002af4 <print_dbg>
80004300:	36 4c       	mov	r12,100
80004302:	fe b0 f3 d7 	rcall	80002ab0 <print_dbg_ulong>

//! The minimal number of AUTO REFRESH commands required during initialization for this SDRAM.
  print_dbg("\r\n INIT_AUTO_REFRESH_COUNT: "); print_dbg_ulong(  SDRAM_INIT_AUTO_REFRESH_COUNT  );
80004306:	fe cc 9d 52 	sub	r12,pc,-25262
8000430a:	fe b0 f3 f5 	rcall	80002af4 <print_dbg>
8000430e:	30 2c       	mov	r12,2
  print_dbg("\r\n\n");
80004310:	fe b0 f3 d0 	rcall	80002ab0 <print_dbg_ulong>
80004314:	fe cc 9d 40 	sub	r12,pc,-25280
  // test sdram
  //  screen_line(0, (CHAR_ROWS-2) * FONT_CHARH, "testing sdram...", 0xf); screen_refresh();
  
  //  show_hmatrix_sfr();
  show_sdram_constants();
  sdram_test(1);
80004318:	fe b0 f3 ee 	rcall	80002af4 <print_dbg>
  screen_refresh();
8000431c:	30 1c       	mov	r12,1
8000431e:	fe b0 f6 c9 	rcall	800030b0 <sdram_test>
  ////////

  // start application timers
  //  init_app_timers();

  print_dbg("starting event loop.\n\r");
80004322:	fe b0 f7 ef 	rcall	80003300 <screen_refresh>
80004326:	fe cc 9d 4e 	sub	r12,pc,-25266
8000432a:	e0 65 19 78 	mov	r5,6520
8000432e:	fe b0 f3 e3 	rcall	80002af4 <print_dbg>
  static U64 cycles = 0;
  static U64 cyclesNow = 0;

  key = eKeyDummy;
  
  cycles = Get_system_register(AVR32_COUNT);
80004332:	e0 62 19 20 	mov	r2,6432
80004336:	fe c1 9e f2 	sub	r1,pc,-24846
8000433a:	e0 60 07 08 	mov	r0,1800
8000433e:	e0 63 19 80 	mov	r3,6528

  if( get_next_event(&e) ) {
80004342:	e0 64 17 c4 	mov	r4,6084
80004346:	e1 b8 00 42 	mfsr	r8,0x108
8000434a:	f0 09 14 1f 	asr	r9,r8,0x1f

    switch(e.eventType) {
8000434e:	8b 18       	st.w	r5[0x4],r8
80004350:	e0 68 19 20 	mov	r8,6432
80004354:	8b 09       	st.w	r5[0x0],r9
80004356:	10 9c       	mov	r12,r8
      print_dbg("\r\nadc val 2: ");
      print_dbg_ulong(e.eventData);
      displayAdcVal(2, e.eventData);
      break;
    case kEventAdc3:
      print_dbg("\r\nadc val 3: ");
80004358:	50 08       	stdsp	sp[0x0],r8
8000435a:	fe b0 f4 2b 	rcall	80002bb0 <get_next_event>
      print_dbg_ulong(e.eventData);
8000435e:	40 08       	lddsp	r8,sp[0x0]
80004360:	cf 30       	breq	80004346 <main+0x162>
80004362:	70 08       	ld.w	r8,r8[0x0]
      displayAdcVal(3, e.eventData);
80004364:	59 28       	cp.w	r8,18
80004366:	e0 8b 00 0e 	brhi	80004382 <main+0x19e>
8000436a:	e2 08 03 2f 	ld.w	pc,r1[r8<<0x2]
	screen_refresh();
	refresh = 0;
      }
      break;
    }
    cyclesNow = Get_system_register(AVR32_COUNT);
8000436e:	fe cc 9c a2 	sub	r12,pc,-25438
80004372:	fe b0 f3 c1 	rcall	80002af4 <print_dbg>
80004376:	64 1c       	ld.w	r12,r2[0x4]
80004378:	fe b0 f3 9c 	rcall	80002ab0 <print_dbg_ulong>
    if(cyclesNow > maxEventCycles) {
8000437c:	84 bb       	ld.uh	r11,r2[0x6]
8000437e:	30 3c       	mov	r12,3
80004380:	c2 0f       	rcall	800041c0 <displayAdcVal>
80004382:	e1 b8 00 42 	mfsr	r8,0x108
80004386:	10 96       	mov	r6,r8
      maxEventCycles = cyclesNow;
80004388:	bf 58       	asr	r8,0x1f
8000438a:	10 97       	mov	r7,r8
8000438c:	e6 e7 00 00 	st.d	r3[0],r6
      print_dbg("\r\nadc val 1: ");
      print_dbg_ulong(e.eventData);
      displayAdcVal(1, e.eventData);
      break;
    case kEventAdc2:
      print_dbg("\r\nadc val 2: ");
80004390:	e8 e8 00 00 	ld.d	r8,r4[0]
80004394:	10 36       	cp.w	r6,r8
      print_dbg_ulong(e.eventData);
80004396:	f2 07 13 00 	cpc	r7,r9
8000439a:	fe 98 ff d6 	brls	80004346 <main+0x162>
      displayAdcVal(2, e.eventData);
8000439e:	e0 68 17 c4 	mov	r8,6084
800043a2:	f0 e7 00 00 	st.d	r8[0],r6
      print_dbg("\r\nadc val 0: ");
      print_dbg_ulong(e.eventData);
      displayAdcVal(0, e.eventData);
      break;
    case kEventAdc1:
      print_dbg("\r\nadc val 1: ");
800043a6:	cd 0b       	rjmp	80004346 <main+0x162>
800043a8:	fe cc 9c ec 	sub	r12,pc,-25364
      print_dbg_ulong(e.eventData);
800043ac:	fe b0 f3 a4 	rcall	80002af4 <print_dbg>
800043b0:	64 1c       	ld.w	r12,r2[0x4]
      displayAdcVal(1, e.eventData);
800043b2:	fe b0 f3 7f 	rcall	80002ab0 <print_dbg_ulong>
800043b6:	84 bb       	ld.uh	r11,r2[0x6]
800043b8:	30 2c       	mov	r12,2
800043ba:	c0 3f       	rcall	800041c0 <displayAdcVal>
    case kEventEncoder3:
      scroll_event(" encoder 3", e.eventData);
      break;

    case kEventAdc0:
      print_dbg("\r\nadc val 0: ");
800043bc:	ce 3b       	rjmp	80004382 <main+0x19e>
800043be:	fe cc 9d 12 	sub	r12,pc,-25326
      print_dbg_ulong(e.eventData);
800043c2:	fe b0 f3 99 	rcall	80002af4 <print_dbg>
800043c6:	64 1c       	ld.w	r12,r2[0x4]
      displayAdcVal(0, e.eventData);
800043c8:	fe b0 f3 74 	rcall	80002ab0 <print_dbg_ulong>
800043cc:	84 bb       	ld.uh	r11,r2[0x6]
800043ce:	30 1c       	mov	r12,1
800043d0:	cf 8e       	rcall	800041c0 <displayAdcVal>
      break;
    case kEventEncoder2:
      scroll_event(" encoder 2", e.eventData);
      break;
    case kEventEncoder3:
      scroll_event(" encoder 3", e.eventData);
800043d2:	cd 8b       	rjmp	80004382 <main+0x19e>
800043d4:	fe cc 9d 38 	sub	r12,pc,-25288
800043d8:	fe b0 f3 8e 	rcall	80002af4 <print_dbg>
      break;
    case kEventEncoder1:
      scroll_event(" encoder 1", e.eventData);
      break;
    case kEventEncoder2:
      scroll_event(" encoder 2", e.eventData);
800043dc:	64 1c       	ld.w	r12,r2[0x4]
800043de:	fe b0 f3 69 	rcall	80002ab0 <print_dbg_ulong>
800043e2:	84 bb       	ld.uh	r11,r2[0x6]
800043e4:	30 0c       	mov	r12,0
      break;
    case kEventEncoder0:
      scroll_event(" encoder 0", e.eventData);
      break;
    case kEventEncoder1:
      scroll_event(" encoder 1", e.eventData);
800043e6:	ce de       	rcall	800041c0 <displayAdcVal>
800043e8:	cc db       	rjmp	80004382 <main+0x19e>
800043ea:	84 3b       	ld.sh	r11,r2[0x6]
800043ec:	fe cc 9d 5c 	sub	r12,pc,-25252
      break;
    case kEventSwitchUp4:
      scroll_event(" sw edit up", 0);
      break;
    case kEventEncoder0:
      scroll_event(" encoder 0", e.eventData);
800043f0:	fe b0 fd 6a 	rcall	80003ec4 <scroll_event>
800043f4:	cc 7b       	rjmp	80004382 <main+0x19e>
800043f6:	84 3b       	ld.sh	r11,r2[0x6]
800043f8:	fe cc 9d 74 	sub	r12,pc,-25228
      break;
    case kEventSwitchDown4:
      scroll_event(" sw edit down", 0);
      break;
    case kEventSwitchUp4:
      scroll_event(" sw edit up", 0);
800043fc:	fe b0 fd 64 	rcall	80003ec4 <scroll_event>
80004400:	cc 1b       	rjmp	80004382 <main+0x19e>
80004402:	84 3b       	ld.sh	r11,r2[0x6]
      break;
    case kEventSwitchUp3:
      scroll_event(" sw f3 up", 0);
      break;
    case kEventSwitchDown4:
      scroll_event(" sw edit down", 0);
80004404:	fe cc 9d 8c 	sub	r12,pc,-25204
80004408:	fe b0 fd 5e 	rcall	80003ec4 <scroll_event>
8000440c:	cb bb       	rjmp	80004382 <main+0x19e>
      break;
    case kEventSwitchDown3:
      scroll_event(" sw f3 down", 0);
      break;
    case kEventSwitchUp3:
      scroll_event(" sw f3 up", 0);
8000440e:	84 3b       	ld.sh	r11,r2[0x6]
80004410:	fe cc 9d a4 	sub	r12,pc,-25180
80004414:	fe b0 fd 58 	rcall	80003ec4 <scroll_event>
      break;
    case kEventSwitchUp2:
      scroll_event(" sw f2 up", 0);
      break;
    case kEventSwitchDown3:
      scroll_event(" sw f3 down", 0);
80004418:	cb 5b       	rjmp	80004382 <main+0x19e>
8000441a:	30 0b       	mov	r11,0
8000441c:	fe cc 9d bc 	sub	r12,pc,-25156
80004420:	fe b0 fd 52 	rcall	80003ec4 <scroll_event>
      break;
    case kEventSwitchDown2:
      scroll_event(" sw f2 down", 0);
      break;
    case kEventSwitchUp2:
      scroll_event(" sw f2 up", 0);
80004424:	ca fb       	rjmp	80004382 <main+0x19e>
80004426:	30 0b       	mov	r11,0
80004428:	fe cc 9d d8 	sub	r12,pc,-25128
      break;
    case kEventSwitchUp1:
      scroll_event(" sw f1 up", 0);
      break;
    case kEventSwitchDown2:
      scroll_event(" sw f2 down", 0);
8000442c:	fe b0 fd 4c 	rcall	80003ec4 <scroll_event>
80004430:	ca 9b       	rjmp	80004382 <main+0x19e>
80004432:	30 0b       	mov	r11,0
80004434:	fe cc 9d f0 	sub	r12,pc,-25104
      break;
    case kEventSwitchDown1:
      scroll_event(" sw f1 down", 0);
      break;
    case kEventSwitchUp1:
      scroll_event(" sw f1 up", 0);
80004438:	fe b0 fd 46 	rcall	80003ec4 <scroll_event>
8000443c:	ca 3b       	rjmp	80004382 <main+0x19e>
8000443e:	30 0b       	mov	r11,0
      break;
    case kEventSwitchUp0:
      scroll_event(" sw f0 up", 0);
      break;
    case kEventSwitchDown1:
      scroll_event(" sw f1 down", 0);
80004440:	fe cc 9e 08 	sub	r12,pc,-25080
80004444:	fe b0 fd 40 	rcall	80003ec4 <scroll_event>
80004448:	c9 db       	rjmp	80004382 <main+0x19e>
    switch(e.eventType) {
    case kEventSwitchDown0:
      scroll_event(" sw f0 down", 0);
      break;
    case kEventSwitchUp0:
      scroll_event(" sw f0 up", 0);
8000444a:	30 0b       	mov	r11,0
8000444c:	fe cc 9e 20 	sub	r12,pc,-25056
80004450:	fe b0 fd 3a 	rcall	80003ec4 <scroll_event>
      print_dbg_ulong(e.eventData);
      displayAdcVal(3, e.eventData);
      break;

    case kEventRefresh:
      if(refresh == 1) {
80004454:	c9 7b       	rjmp	80004382 <main+0x19e>
80004456:	30 0b       	mov	r11,0
80004458:	fe cc 9e 38 	sub	r12,pc,-25032
8000445c:	fe b0 fd 34 	rcall	80003ec4 <scroll_event>
	screen_refresh();
80004460:	c9 1b       	rjmp	80004382 <main+0x19e>
80004462:	30 0b       	mov	r11,0
	refresh = 0;
80004464:	fe cc 9e 50 	sub	r12,pc,-25008
80004468:	fe b0 fd 2e 	rcall	80003ec4 <scroll_event>

  if( get_next_event(&e) ) {

    switch(e.eventType) {
    case kEventSwitchDown0:
      scroll_event(" sw f0 down", 0);
8000446c:	c8 bb       	rjmp	80004382 <main+0x19e>
8000446e:	30 0b       	mov	r11,0
80004470:	fe cc 9e 68 	sub	r12,pc,-24984
80004474:	fe b0 fd 28 	rcall	80003ec4 <scroll_event>
80004478:	c8 5b       	rjmp	80004382 <main+0x19e>
8000447a:	30 0b       	mov	r11,0
8000447c:	fe cc 9e 80 	sub	r12,pc,-24960
80004480:	fe b0 fd 22 	rcall	80003ec4 <scroll_event>
80004484:	c7 fb       	rjmp	80004382 <main+0x19e>
80004486:	01 89       	ld.ub	r9,r0[0x0]
80004488:	30 18       	mov	r8,1
8000448a:	f0 09 18 00 	cp.b	r9,r8
8000448e:	fe 91 ff 7a 	brne	80004382 <main+0x19e>
80004492:	fe b0 f7 37 	rcall	80003300 <screen_refresh>
80004496:	30 09       	mov	r9,0
80004498:	e0 68 07 08 	mov	r8,1800
8000449c:	b0 89       	st.b	r8[0x0],r9
8000449e:	c7 2b       	rjmp	80004382 <main+0x19e>
800044a0:	30 0b       	mov	r11,0
800044a2:	fe cc 9e b2 	sub	r12,pc,-24910
800044a6:	fe b0 fd 0f 	rcall	80003ec4 <scroll_event>
800044aa:	c6 cb       	rjmp	80004382 <main+0x19e>

800044ac <itoa_whole>:
  
}

// format whole part
void itoa_whole(int val, char* buf, int len)
{
800044ac:	eb cd 40 80 	pushm	r7,lr
  char * p;       // pointer
  unsigned int a; // digit (remainder)
  unsigned int u; // unsigned value 
  char neg = BSIGN(val);

  p = buf + len - 1; // right justify; start at end
800044b0:	20 1a       	sub	r10,1
800044b2:	f6 0a 00 0a 	add	r10,r11,r10
  }


  u = (unsigned int)val;

  while(p >= buf) {
800044b6:	14 3b       	cp.w	r11,r10
800044b8:	e0 8b 00 1f 	brhi	800044f6 <itoa_whole+0x4a>
    if (u > 0) {
      a = u % radix;
      u /= radix;
      *p = '0' + a;
    } else {
      *p = ' '; 
800044bc:	32 07       	mov	r7,32

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % radix;
800044be:	e0 6e cc cd 	mov	lr,52429
800044c2:	ea 1e cc cc 	orh	lr,0xcccc
800044c6:	c0 d8       	rjmp	800044e0 <itoa_whole+0x34>
800044c8:	10 99       	mov	r9,r8
800044ca:	f0 08 00 28 	add	r8,r8,r8<<0x2
800044ce:	f8 08 01 18 	sub	r8,r12,r8<<0x1
      u /= radix;
      *p = '0' + a;
800044d2:	2d 08       	sub	r8,-48
800044d4:	b4 88       	st.b	r10[0x0],r8
  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % radix;
      u /= radix;
800044d6:	12 9c       	mov	r12,r9
      *p = '0' + a;
    } else {
      *p = ' '; 
    }
    p--;
800044d8:	20 1a       	sub	r10,1
  }


  u = (unsigned int)val;

  while(p >= buf) {
800044da:	14 3b       	cp.w	r11,r10
800044dc:	e0 8b 00 0d 	brhi	800044f6 <itoa_whole+0x4a>
    if (u > 0) {
      a = u % radix;
800044e0:	f8 0e 06 48 	mulu.d	r8,r12,lr
800044e4:	f2 08 16 03 	lsr	r8,r9,0x3


  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
800044e8:	58 0c       	cp.w	r12,0
800044ea:	ce f1       	brne	800044c8 <itoa_whole+0x1c>
      a = u % radix;
      u /= radix;
      *p = '0' + a;
    } else {
      *p = ' '; 
800044ec:	b4 87       	st.b	r10[0x0],r7
    }
    p--;
800044ee:	20 1a       	sub	r10,1
  }


  u = (unsigned int)val;

  while(p >= buf) {
800044f0:	14 3b       	cp.w	r11,r10
800044f2:	fe 98 ff f7 	brls	800044e0 <itoa_whole+0x34>
800044f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800044fa:	d7 03       	nop

800044fc <_stext>:
800044fc:	e0 7d 00 00 	mov	sp,65536
80004500:	fe c0 a5 00 	sub	r0,pc,-23296
80004504:	e3 b0 00 01 	mtsr	0x4,r0
80004508:	d5 53       	csrf	0x15
8000450a:	30 80       	mov	r0,8
8000450c:	e0 61 05 10 	mov	r1,1296
80004510:	02 30       	cp.w	r0,r1
80004512:	c0 72       	brcc	80004520 <idata_load_loop_end>
80004514:	fe c2 95 b4 	sub	r2,pc,-27212

80004518 <idata_load_loop>:
80004518:	a5 05       	ld.d	r4,r2++
8000451a:	a1 24       	st.d	r0++,r4
8000451c:	02 30       	cp.w	r0,r1
8000451e:	cf d3       	brcs	80004518 <idata_load_loop>

80004520 <idata_load_loop_end>:
80004520:	e0 60 05 10 	mov	r0,1296
80004524:	e0 61 19 f8 	mov	r1,6648
80004528:	02 30       	cp.w	r0,r1
8000452a:	c0 62       	brcc	80004536 <udata_clear_loop_end>
8000452c:	30 02       	mov	r2,0
8000452e:	30 03       	mov	r3,0

80004530 <udata_clear_loop>:
80004530:	a1 22       	st.d	r0++,r2
80004532:	02 30       	cp.w	r0,r1
80004534:	cf e3       	brcs	80004530 <udata_clear_loop>

80004536 <udata_clear_loop_end>:
80004536:	fe cf 03 52 	sub	pc,pc,850
8000453a:	d7 03       	nop

8000453c <_fclose_r>:
8000453c:	d4 21       	pushm	r4-r7,lr
8000453e:	18 96       	mov	r6,r12
80004540:	16 97       	mov	r7,r11
80004542:	58 0b       	cp.w	r11,0
80004544:	c0 31       	brne	8000454a <_fclose_r+0xe>
80004546:	16 95       	mov	r5,r11
80004548:	c4 b8       	rjmp	800045de <_fclose_r+0xa2>
8000454a:	cd bc       	rcall	80004700 <__sfp_lock_acquire>
8000454c:	58 06       	cp.w	r6,0
8000454e:	c0 60       	breq	8000455a <_fclose_r+0x1e>
80004550:	6c 68       	ld.w	r8,r6[0x18]
80004552:	58 08       	cp.w	r8,0
80004554:	c0 31       	brne	8000455a <_fclose_r+0x1e>
80004556:	0c 9c       	mov	r12,r6
80004558:	c2 6d       	rcall	800047a4 <__sinit>
8000455a:	fe c8 9b 86 	sub	r8,pc,-25722
8000455e:	10 37       	cp.w	r7,r8
80004560:	c0 31       	brne	80004566 <_fclose_r+0x2a>
80004562:	6c 07       	ld.w	r7,r6[0x0]
80004564:	c0 c8       	rjmp	8000457c <_fclose_r+0x40>
80004566:	fe c8 9b 72 	sub	r8,pc,-25742
8000456a:	10 37       	cp.w	r7,r8
8000456c:	c0 31       	brne	80004572 <_fclose_r+0x36>
8000456e:	6c 17       	ld.w	r7,r6[0x4]
80004570:	c0 68       	rjmp	8000457c <_fclose_r+0x40>
80004572:	fe c8 9b 5e 	sub	r8,pc,-25762
80004576:	10 37       	cp.w	r7,r8
80004578:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000457c:	8e 69       	ld.sh	r9,r7[0xc]
8000457e:	30 08       	mov	r8,0
80004580:	f0 09 19 00 	cp.h	r9,r8
80004584:	c0 41       	brne	8000458c <_fclose_r+0x50>
80004586:	cb ec       	rcall	80004702 <__sfp_lock_release>
80004588:	30 05       	mov	r5,0
8000458a:	c2 a8       	rjmp	800045de <_fclose_r+0xa2>
8000458c:	0e 9b       	mov	r11,r7
8000458e:	0c 9c       	mov	r12,r6
80004590:	c3 2c       	rcall	800045f4 <_fflush_r>
80004592:	6e c8       	ld.w	r8,r7[0x30]
80004594:	18 95       	mov	r5,r12
80004596:	58 08       	cp.w	r8,0
80004598:	c0 60       	breq	800045a4 <_fclose_r+0x68>
8000459a:	6e 8b       	ld.w	r11,r7[0x20]
8000459c:	0c 9c       	mov	r12,r6
8000459e:	5d 18       	icall	r8
800045a0:	f9 b5 05 ff 	movlt	r5,-1
800045a4:	8e 68       	ld.sh	r8,r7[0xc]
800045a6:	ed b8 00 07 	bld	r8,0x7
800045aa:	c0 41       	brne	800045b2 <_fclose_r+0x76>
800045ac:	6e 4b       	ld.w	r11,r7[0x10]
800045ae:	0c 9c       	mov	r12,r6
800045b0:	c9 4d       	rcall	800048d8 <_free_r>
800045b2:	6e db       	ld.w	r11,r7[0x34]
800045b4:	58 0b       	cp.w	r11,0
800045b6:	c0 90       	breq	800045c8 <_fclose_r+0x8c>
800045b8:	ee c8 ff bc 	sub	r8,r7,-68
800045bc:	10 3b       	cp.w	r11,r8
800045be:	c0 30       	breq	800045c4 <_fclose_r+0x88>
800045c0:	0c 9c       	mov	r12,r6
800045c2:	c8 bd       	rcall	800048d8 <_free_r>
800045c4:	30 08       	mov	r8,0
800045c6:	8f d8       	st.w	r7[0x34],r8
800045c8:	6f 2b       	ld.w	r11,r7[0x48]
800045ca:	58 0b       	cp.w	r11,0
800045cc:	c0 60       	breq	800045d8 <_fclose_r+0x9c>
800045ce:	0c 9c       	mov	r12,r6
800045d0:	c8 4d       	rcall	800048d8 <_free_r>
800045d2:	30 08       	mov	r8,0
800045d4:	ef 48 00 48 	st.w	r7[72],r8
800045d8:	30 08       	mov	r8,0
800045da:	ae 68       	st.h	r7[0xc],r8
800045dc:	c9 3c       	rcall	80004702 <__sfp_lock_release>
800045de:	0a 9c       	mov	r12,r5
800045e0:	d8 22       	popm	r4-r7,pc
800045e2:	d7 03       	nop

800045e4 <fclose>:
800045e4:	d4 01       	pushm	lr
800045e6:	e0 68 00 fc 	mov	r8,252
800045ea:	18 9b       	mov	r11,r12
800045ec:	70 0c       	ld.w	r12,r8[0x0]
800045ee:	ca 7f       	rcall	8000453c <_fclose_r>
800045f0:	d8 02       	popm	pc
800045f2:	d7 03       	nop

800045f4 <_fflush_r>:
800045f4:	d4 21       	pushm	r4-r7,lr
800045f6:	16 97       	mov	r7,r11
800045f8:	18 96       	mov	r6,r12
800045fa:	76 48       	ld.w	r8,r11[0x10]
800045fc:	58 08       	cp.w	r8,0
800045fe:	c7 f0       	breq	800046fc <_fflush_r+0x108>
80004600:	58 0c       	cp.w	r12,0
80004602:	c0 50       	breq	8000460c <_fflush_r+0x18>
80004604:	78 68       	ld.w	r8,r12[0x18]
80004606:	58 08       	cp.w	r8,0
80004608:	c0 21       	brne	8000460c <_fflush_r+0x18>
8000460a:	cc dc       	rcall	800047a4 <__sinit>
8000460c:	fe c8 9c 38 	sub	r8,pc,-25544
80004610:	10 37       	cp.w	r7,r8
80004612:	c0 31       	brne	80004618 <_fflush_r+0x24>
80004614:	6c 07       	ld.w	r7,r6[0x0]
80004616:	c0 c8       	rjmp	8000462e <_fflush_r+0x3a>
80004618:	fe c8 9c 24 	sub	r8,pc,-25564
8000461c:	10 37       	cp.w	r7,r8
8000461e:	c0 31       	brne	80004624 <_fflush_r+0x30>
80004620:	6c 17       	ld.w	r7,r6[0x4]
80004622:	c0 68       	rjmp	8000462e <_fflush_r+0x3a>
80004624:	fe c8 9c 10 	sub	r8,pc,-25584
80004628:	10 37       	cp.w	r7,r8
8000462a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000462e:	8e 6a       	ld.sh	r10,r7[0xc]
80004630:	14 98       	mov	r8,r10
80004632:	ed ba 00 03 	bld	r10,0x3
80004636:	c4 20       	breq	800046ba <_fflush_r+0xc6>
80004638:	ab ba       	sbr	r10,0xb
8000463a:	ae 6a       	st.h	r7[0xc],r10
8000463c:	6e 18       	ld.w	r8,r7[0x4]
8000463e:	58 08       	cp.w	r8,0
80004640:	e0 89 00 06 	brgt	8000464c <_fflush_r+0x58>
80004644:	6f 08       	ld.w	r8,r7[0x40]
80004646:	58 08       	cp.w	r8,0
80004648:	e0 8a 00 5a 	brle	800046fc <_fflush_r+0x108>
8000464c:	6e b8       	ld.w	r8,r7[0x2c]
8000464e:	58 08       	cp.w	r8,0
80004650:	c5 60       	breq	800046fc <_fflush_r+0x108>
80004652:	e2 1a 10 00 	andl	r10,0x1000,COH
80004656:	c0 30       	breq	8000465c <_fflush_r+0x68>
80004658:	6f 55       	ld.w	r5,r7[0x54]
8000465a:	c0 f8       	rjmp	80004678 <_fflush_r+0x84>
8000465c:	30 19       	mov	r9,1
8000465e:	6e 8b       	ld.w	r11,r7[0x20]
80004660:	0c 9c       	mov	r12,r6
80004662:	5d 18       	icall	r8
80004664:	18 95       	mov	r5,r12
80004666:	5b fc       	cp.w	r12,-1
80004668:	c0 81       	brne	80004678 <_fflush_r+0x84>
8000466a:	6c 38       	ld.w	r8,r6[0xc]
8000466c:	59 d8       	cp.w	r8,29
8000466e:	c4 70       	breq	800046fc <_fflush_r+0x108>
80004670:	8e 68       	ld.sh	r8,r7[0xc]
80004672:	a7 a8       	sbr	r8,0x6
80004674:	ae 68       	st.h	r7[0xc],r8
80004676:	d8 22       	popm	r4-r7,pc
80004678:	8e 68       	ld.sh	r8,r7[0xc]
8000467a:	ed b8 00 02 	bld	r8,0x2
8000467e:	c0 91       	brne	80004690 <_fflush_r+0x9c>
80004680:	6e 18       	ld.w	r8,r7[0x4]
80004682:	10 15       	sub	r5,r8
80004684:	6e d8       	ld.w	r8,r7[0x34]
80004686:	58 08       	cp.w	r8,0
80004688:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000468c:	eb d8 e1 15 	subne	r5,r5,r8
80004690:	6e b8       	ld.w	r8,r7[0x2c]
80004692:	0c 9c       	mov	r12,r6
80004694:	30 09       	mov	r9,0
80004696:	0a 9a       	mov	r10,r5
80004698:	6e 8b       	ld.w	r11,r7[0x20]
8000469a:	5d 18       	icall	r8
8000469c:	8e 68       	ld.sh	r8,r7[0xc]
8000469e:	0a 3c       	cp.w	r12,r5
800046a0:	c2 61       	brne	800046ec <_fflush_r+0xf8>
800046a2:	ab d8       	cbr	r8,0xb
800046a4:	30 0c       	mov	r12,0
800046a6:	6e 49       	ld.w	r9,r7[0x10]
800046a8:	ae 68       	st.h	r7[0xc],r8
800046aa:	8f 1c       	st.w	r7[0x4],r12
800046ac:	8f 09       	st.w	r7[0x0],r9
800046ae:	ed b8 00 0c 	bld	r8,0xc
800046b2:	c2 51       	brne	800046fc <_fflush_r+0x108>
800046b4:	ef 45 00 54 	st.w	r7[84],r5
800046b8:	d8 22       	popm	r4-r7,pc
800046ba:	6e 45       	ld.w	r5,r7[0x10]
800046bc:	58 05       	cp.w	r5,0
800046be:	c1 f0       	breq	800046fc <_fflush_r+0x108>
800046c0:	6e 04       	ld.w	r4,r7[0x0]
800046c2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800046c6:	8f 05       	st.w	r7[0x0],r5
800046c8:	f9 b8 01 00 	movne	r8,0
800046cc:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800046d0:	0a 14       	sub	r4,r5
800046d2:	8f 28       	st.w	r7[0x8],r8
800046d4:	c1 18       	rjmp	800046f6 <_fflush_r+0x102>
800046d6:	08 99       	mov	r9,r4
800046d8:	0a 9a       	mov	r10,r5
800046da:	6e a8       	ld.w	r8,r7[0x28]
800046dc:	6e 8b       	ld.w	r11,r7[0x20]
800046de:	0c 9c       	mov	r12,r6
800046e0:	5d 18       	icall	r8
800046e2:	18 14       	sub	r4,r12
800046e4:	58 0c       	cp.w	r12,0
800046e6:	e0 89 00 07 	brgt	800046f4 <_fflush_r+0x100>
800046ea:	8e 68       	ld.sh	r8,r7[0xc]
800046ec:	a7 a8       	sbr	r8,0x6
800046ee:	3f fc       	mov	r12,-1
800046f0:	ae 68       	st.h	r7[0xc],r8
800046f2:	d8 22       	popm	r4-r7,pc
800046f4:	18 05       	add	r5,r12
800046f6:	58 04       	cp.w	r4,0
800046f8:	fe 99 ff ef 	brgt	800046d6 <_fflush_r+0xe2>
800046fc:	d8 2a       	popm	r4-r7,pc,r12=0
800046fe:	d7 03       	nop

80004700 <__sfp_lock_acquire>:
80004700:	5e fc       	retal	r12

80004702 <__sfp_lock_release>:
80004702:	5e fc       	retal	r12

80004704 <_cleanup_r>:
80004704:	d4 01       	pushm	lr
80004706:	fe cb 01 22 	sub	r11,pc,290
8000470a:	cb fd       	rcall	80004a88 <_fwalk>
8000470c:	d8 02       	popm	pc
8000470e:	d7 03       	nop

80004710 <__sfmoreglue>:
80004710:	d4 21       	pushm	r4-r7,lr
80004712:	16 95       	mov	r5,r11
80004714:	f6 06 10 5c 	mul	r6,r11,92
80004718:	ec cb ff f4 	sub	r11,r6,-12
8000471c:	e0 a0 02 3a 	rcall	80004b90 <_malloc_r>
80004720:	18 97       	mov	r7,r12
80004722:	c0 90       	breq	80004734 <__sfmoreglue+0x24>
80004724:	99 15       	st.w	r12[0x4],r5
80004726:	30 0b       	mov	r11,0
80004728:	2f 4c       	sub	r12,-12
8000472a:	0c 9a       	mov	r10,r6
8000472c:	8f 2c       	st.w	r7[0x8],r12
8000472e:	8f 0b       	st.w	r7[0x0],r11
80004730:	e0 a0 04 ee 	rcall	8000510c <memset>
80004734:	0e 9c       	mov	r12,r7
80004736:	d8 22       	popm	r4-r7,pc

80004738 <__sfp>:
80004738:	d4 21       	pushm	r4-r7,lr
8000473a:	fe c8 9d 02 	sub	r8,pc,-25342
8000473e:	18 96       	mov	r6,r12
80004740:	70 07       	ld.w	r7,r8[0x0]
80004742:	6e 68       	ld.w	r8,r7[0x18]
80004744:	58 08       	cp.w	r8,0
80004746:	c0 31       	brne	8000474c <__sfp+0x14>
80004748:	0e 9c       	mov	r12,r7
8000474a:	c2 dc       	rcall	800047a4 <__sinit>
8000474c:	ee c7 ff 28 	sub	r7,r7,-216
80004750:	30 05       	mov	r5,0
80004752:	6e 2c       	ld.w	r12,r7[0x8]
80004754:	6e 18       	ld.w	r8,r7[0x4]
80004756:	c0 68       	rjmp	80004762 <__sfp+0x2a>
80004758:	98 69       	ld.sh	r9,r12[0xc]
8000475a:	ea 09 19 00 	cp.h	r9,r5
8000475e:	c1 10       	breq	80004780 <__sfp+0x48>
80004760:	2a 4c       	sub	r12,-92
80004762:	20 18       	sub	r8,1
80004764:	cf a7       	brpl	80004758 <__sfp+0x20>
80004766:	6e 08       	ld.w	r8,r7[0x0]
80004768:	58 08       	cp.w	r8,0
8000476a:	c0 61       	brne	80004776 <__sfp+0x3e>
8000476c:	30 4b       	mov	r11,4
8000476e:	0c 9c       	mov	r12,r6
80004770:	cd 0f       	rcall	80004710 <__sfmoreglue>
80004772:	8f 0c       	st.w	r7[0x0],r12
80004774:	c0 30       	breq	8000477a <__sfp+0x42>
80004776:	6e 07       	ld.w	r7,r7[0x0]
80004778:	ce db       	rjmp	80004752 <__sfp+0x1a>
8000477a:	30 c8       	mov	r8,12
8000477c:	8d 38       	st.w	r6[0xc],r8
8000477e:	d8 22       	popm	r4-r7,pc
80004780:	30 08       	mov	r8,0
80004782:	f9 48 00 4c 	st.w	r12[76],r8
80004786:	99 08       	st.w	r12[0x0],r8
80004788:	99 28       	st.w	r12[0x8],r8
8000478a:	99 18       	st.w	r12[0x4],r8
8000478c:	99 48       	st.w	r12[0x10],r8
8000478e:	99 58       	st.w	r12[0x14],r8
80004790:	99 68       	st.w	r12[0x18],r8
80004792:	99 d8       	st.w	r12[0x34],r8
80004794:	99 e8       	st.w	r12[0x38],r8
80004796:	f9 48 00 48 	st.w	r12[72],r8
8000479a:	3f f8       	mov	r8,-1
8000479c:	b8 78       	st.h	r12[0xe],r8
8000479e:	30 18       	mov	r8,1
800047a0:	b8 68       	st.h	r12[0xc],r8
800047a2:	d8 22       	popm	r4-r7,pc

800047a4 <__sinit>:
800047a4:	d4 21       	pushm	r4-r7,lr
800047a6:	18 96       	mov	r6,r12
800047a8:	78 67       	ld.w	r7,r12[0x18]
800047aa:	58 07       	cp.w	r7,0
800047ac:	c4 91       	brne	8000483e <__sinit+0x9a>
800047ae:	fe c8 00 aa 	sub	r8,pc,170
800047b2:	30 15       	mov	r5,1
800047b4:	99 a8       	st.w	r12[0x28],r8
800047b6:	f9 47 00 d8 	st.w	r12[216],r7
800047ba:	f9 47 00 dc 	st.w	r12[220],r7
800047be:	f9 47 00 e0 	st.w	r12[224],r7
800047c2:	99 65       	st.w	r12[0x18],r5
800047c4:	cb af       	rcall	80004738 <__sfp>
800047c6:	8d 0c       	st.w	r6[0x0],r12
800047c8:	0c 9c       	mov	r12,r6
800047ca:	cb 7f       	rcall	80004738 <__sfp>
800047cc:	8d 1c       	st.w	r6[0x4],r12
800047ce:	0c 9c       	mov	r12,r6
800047d0:	cb 4f       	rcall	80004738 <__sfp>
800047d2:	6c 09       	ld.w	r9,r6[0x0]
800047d4:	30 48       	mov	r8,4
800047d6:	93 07       	st.w	r9[0x0],r7
800047d8:	b2 68       	st.h	r9[0xc],r8
800047da:	93 17       	st.w	r9[0x4],r7
800047dc:	93 27       	st.w	r9[0x8],r7
800047de:	6c 18       	ld.w	r8,r6[0x4]
800047e0:	b2 77       	st.h	r9[0xe],r7
800047e2:	93 47       	st.w	r9[0x10],r7
800047e4:	93 57       	st.w	r9[0x14],r7
800047e6:	93 67       	st.w	r9[0x18],r7
800047e8:	93 89       	st.w	r9[0x20],r9
800047ea:	91 07       	st.w	r8[0x0],r7
800047ec:	91 17       	st.w	r8[0x4],r7
800047ee:	91 27       	st.w	r8[0x8],r7
800047f0:	fe ce f5 e8 	sub	lr,pc,-2584
800047f4:	fe cb f6 1c 	sub	r11,pc,-2532
800047f8:	93 9e       	st.w	r9[0x24],lr
800047fa:	93 ab       	st.w	r9[0x28],r11
800047fc:	fe ca f6 4c 	sub	r10,pc,-2484
80004800:	fe c4 f6 5c 	sub	r4,pc,-2468
80004804:	93 ba       	st.w	r9[0x2c],r10
80004806:	93 c4       	st.w	r9[0x30],r4
80004808:	30 99       	mov	r9,9
8000480a:	b0 69       	st.h	r8[0xc],r9
8000480c:	b0 75       	st.h	r8[0xe],r5
8000480e:	91 c4       	st.w	r8[0x30],r4
80004810:	91 47       	st.w	r8[0x10],r7
80004812:	91 57       	st.w	r8[0x14],r7
80004814:	91 67       	st.w	r8[0x18],r7
80004816:	91 88       	st.w	r8[0x20],r8
80004818:	91 9e       	st.w	r8[0x24],lr
8000481a:	91 ab       	st.w	r8[0x28],r11
8000481c:	91 ba       	st.w	r8[0x2c],r10
8000481e:	8d 2c       	st.w	r6[0x8],r12
80004820:	31 28       	mov	r8,18
80004822:	99 07       	st.w	r12[0x0],r7
80004824:	b8 68       	st.h	r12[0xc],r8
80004826:	99 17       	st.w	r12[0x4],r7
80004828:	99 27       	st.w	r12[0x8],r7
8000482a:	30 28       	mov	r8,2
8000482c:	b8 78       	st.h	r12[0xe],r8
8000482e:	99 c4       	st.w	r12[0x30],r4
80004830:	99 67       	st.w	r12[0x18],r7
80004832:	99 9e       	st.w	r12[0x24],lr
80004834:	99 ab       	st.w	r12[0x28],r11
80004836:	99 ba       	st.w	r12[0x2c],r10
80004838:	99 47       	st.w	r12[0x10],r7
8000483a:	99 57       	st.w	r12[0x14],r7
8000483c:	99 8c       	st.w	r12[0x20],r12
8000483e:	d8 22       	popm	r4-r7,pc

80004840 <_malloc_trim_r>:
80004840:	d4 21       	pushm	r4-r7,lr
80004842:	16 95       	mov	r5,r11
80004844:	18 97       	mov	r7,r12
80004846:	e0 a0 04 6a 	rcall	8000511a <__malloc_lock>
8000484a:	e0 64 01 00 	mov	r4,256
8000484e:	68 28       	ld.w	r8,r4[0x8]
80004850:	70 16       	ld.w	r6,r8[0x4]
80004852:	e0 16 ff fc 	andl	r6,0xfffc
80004856:	ec c8 ff 91 	sub	r8,r6,-111
8000485a:	f0 05 01 05 	sub	r5,r8,r5
8000485e:	e0 15 ff 80 	andl	r5,0xff80
80004862:	ea c5 00 80 	sub	r5,r5,128
80004866:	e0 45 00 7f 	cp.w	r5,127
8000486a:	e0 8a 00 25 	brle	800048b4 <_malloc_trim_r+0x74>
8000486e:	30 0b       	mov	r11,0
80004870:	0e 9c       	mov	r12,r7
80004872:	e0 a0 04 57 	rcall	80005120 <_sbrk_r>
80004876:	68 28       	ld.w	r8,r4[0x8]
80004878:	0c 08       	add	r8,r6
8000487a:	10 3c       	cp.w	r12,r8
8000487c:	c1 c1       	brne	800048b4 <_malloc_trim_r+0x74>
8000487e:	ea 0b 11 00 	rsub	r11,r5,0
80004882:	0e 9c       	mov	r12,r7
80004884:	e0 a0 04 4e 	rcall	80005120 <_sbrk_r>
80004888:	5b fc       	cp.w	r12,-1
8000488a:	c1 91       	brne	800048bc <_malloc_trim_r+0x7c>
8000488c:	30 0b       	mov	r11,0
8000488e:	0e 9c       	mov	r12,r7
80004890:	e0 a0 04 48 	rcall	80005120 <_sbrk_r>
80004894:	68 28       	ld.w	r8,r4[0x8]
80004896:	f8 08 01 09 	sub	r9,r12,r8
8000489a:	58 f9       	cp.w	r9,15
8000489c:	e0 8a 00 0c 	brle	800048b4 <_malloc_trim_r+0x74>
800048a0:	a1 a9       	sbr	r9,0x0
800048a2:	91 19       	st.w	r8[0x4],r9
800048a4:	e0 68 05 0c 	mov	r8,1292
800048a8:	70 09       	ld.w	r9,r8[0x0]
800048aa:	e0 68 19 94 	mov	r8,6548
800048ae:	f8 09 01 09 	sub	r9,r12,r9
800048b2:	91 09       	st.w	r8[0x0],r9
800048b4:	0e 9c       	mov	r12,r7
800048b6:	e0 a0 04 33 	rcall	8000511c <__malloc_unlock>
800048ba:	d8 2a       	popm	r4-r7,pc,r12=0
800048bc:	68 28       	ld.w	r8,r4[0x8]
800048be:	0a 16       	sub	r6,r5
800048c0:	a1 a6       	sbr	r6,0x0
800048c2:	91 16       	st.w	r8[0x4],r6
800048c4:	e0 68 19 94 	mov	r8,6548
800048c8:	70 09       	ld.w	r9,r8[0x0]
800048ca:	0a 19       	sub	r9,r5
800048cc:	0e 9c       	mov	r12,r7
800048ce:	91 09       	st.w	r8[0x0],r9
800048d0:	e0 a0 04 26 	rcall	8000511c <__malloc_unlock>
800048d4:	da 2a       	popm	r4-r7,pc,r12=1
800048d6:	d7 03       	nop

800048d8 <_free_r>:
800048d8:	d4 21       	pushm	r4-r7,lr
800048da:	16 96       	mov	r6,r11
800048dc:	18 97       	mov	r7,r12
800048de:	58 0b       	cp.w	r11,0
800048e0:	e0 80 00 c0 	breq	80004a60 <_free_r+0x188>
800048e4:	e0 a0 04 1b 	rcall	8000511a <__malloc_lock>
800048e8:	20 86       	sub	r6,8
800048ea:	e0 6a 01 00 	mov	r10,256
800048ee:	6c 18       	ld.w	r8,r6[0x4]
800048f0:	74 2e       	ld.w	lr,r10[0x8]
800048f2:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800048f6:	a1 c8       	cbr	r8,0x0
800048f8:	ec 08 00 09 	add	r9,r6,r8
800048fc:	72 1b       	ld.w	r11,r9[0x4]
800048fe:	e0 1b ff fc 	andl	r11,0xfffc
80004902:	1c 39       	cp.w	r9,lr
80004904:	c1 e1       	brne	80004940 <_free_r+0x68>
80004906:	f6 08 00 08 	add	r8,r11,r8
8000490a:	58 0c       	cp.w	r12,0
8000490c:	c0 81       	brne	8000491c <_free_r+0x44>
8000490e:	6c 09       	ld.w	r9,r6[0x0]
80004910:	12 16       	sub	r6,r9
80004912:	12 08       	add	r8,r9
80004914:	6c 3b       	ld.w	r11,r6[0xc]
80004916:	6c 29       	ld.w	r9,r6[0x8]
80004918:	97 29       	st.w	r11[0x8],r9
8000491a:	93 3b       	st.w	r9[0xc],r11
8000491c:	10 99       	mov	r9,r8
8000491e:	95 26       	st.w	r10[0x8],r6
80004920:	a1 a9       	sbr	r9,0x0
80004922:	8d 19       	st.w	r6[0x4],r9
80004924:	e0 69 05 08 	mov	r9,1288
80004928:	72 09       	ld.w	r9,r9[0x0]
8000492a:	12 38       	cp.w	r8,r9
8000492c:	c0 63       	brcs	80004938 <_free_r+0x60>
8000492e:	e0 68 19 90 	mov	r8,6544
80004932:	0e 9c       	mov	r12,r7
80004934:	70 0b       	ld.w	r11,r8[0x0]
80004936:	c8 5f       	rcall	80004840 <_malloc_trim_r>
80004938:	0e 9c       	mov	r12,r7
8000493a:	e0 a0 03 f1 	rcall	8000511c <__malloc_unlock>
8000493e:	d8 22       	popm	r4-r7,pc
80004940:	93 1b       	st.w	r9[0x4],r11
80004942:	58 0c       	cp.w	r12,0
80004944:	c0 30       	breq	8000494a <_free_r+0x72>
80004946:	30 0c       	mov	r12,0
80004948:	c1 08       	rjmp	80004968 <_free_r+0x90>
8000494a:	6c 0e       	ld.w	lr,r6[0x0]
8000494c:	f4 c5 ff f8 	sub	r5,r10,-8
80004950:	1c 16       	sub	r6,lr
80004952:	1c 08       	add	r8,lr
80004954:	6c 2e       	ld.w	lr,r6[0x8]
80004956:	0a 3e       	cp.w	lr,r5
80004958:	f9 bc 00 01 	moveq	r12,1
8000495c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80004960:	eb fe 1a 02 	st.wne	r5[0x8],lr
80004964:	fd f5 1a 03 	st.wne	lr[0xc],r5
80004968:	f2 0b 00 0e 	add	lr,r9,r11
8000496c:	7c 1e       	ld.w	lr,lr[0x4]
8000496e:	ed be 00 00 	bld	lr,0x0
80004972:	c1 40       	breq	8000499a <_free_r+0xc2>
80004974:	16 08       	add	r8,r11
80004976:	58 0c       	cp.w	r12,0
80004978:	c0 d1       	brne	80004992 <_free_r+0xba>
8000497a:	e0 6e 01 00 	mov	lr,256
8000497e:	72 2b       	ld.w	r11,r9[0x8]
80004980:	2f 8e       	sub	lr,-8
80004982:	1c 3b       	cp.w	r11,lr
80004984:	c0 71       	brne	80004992 <_free_r+0xba>
80004986:	97 36       	st.w	r11[0xc],r6
80004988:	97 26       	st.w	r11[0x8],r6
8000498a:	8d 2b       	st.w	r6[0x8],r11
8000498c:	8d 3b       	st.w	r6[0xc],r11
8000498e:	30 1c       	mov	r12,1
80004990:	c0 58       	rjmp	8000499a <_free_r+0xc2>
80004992:	72 2b       	ld.w	r11,r9[0x8]
80004994:	72 39       	ld.w	r9,r9[0xc]
80004996:	93 2b       	st.w	r9[0x8],r11
80004998:	97 39       	st.w	r11[0xc],r9
8000499a:	10 99       	mov	r9,r8
8000499c:	ec 08 09 08 	st.w	r6[r8],r8
800049a0:	a1 a9       	sbr	r9,0x0
800049a2:	8d 19       	st.w	r6[0x4],r9
800049a4:	58 0c       	cp.w	r12,0
800049a6:	c5 a1       	brne	80004a5a <_free_r+0x182>
800049a8:	e0 48 01 ff 	cp.w	r8,511
800049ac:	e0 8b 00 13 	brhi	800049d2 <_free_r+0xfa>
800049b0:	a3 98       	lsr	r8,0x3
800049b2:	f4 08 00 39 	add	r9,r10,r8<<0x3
800049b6:	72 2b       	ld.w	r11,r9[0x8]
800049b8:	8d 39       	st.w	r6[0xc],r9
800049ba:	8d 2b       	st.w	r6[0x8],r11
800049bc:	97 36       	st.w	r11[0xc],r6
800049be:	93 26       	st.w	r9[0x8],r6
800049c0:	a3 48       	asr	r8,0x2
800049c2:	74 19       	ld.w	r9,r10[0x4]
800049c4:	30 1b       	mov	r11,1
800049c6:	f6 08 09 48 	lsl	r8,r11,r8
800049ca:	f3 e8 10 08 	or	r8,r9,r8
800049ce:	95 18       	st.w	r10[0x4],r8
800049d0:	c4 58       	rjmp	80004a5a <_free_r+0x182>
800049d2:	f0 09 16 09 	lsr	r9,r8,0x9
800049d6:	58 49       	cp.w	r9,4
800049d8:	e0 8b 00 06 	brhi	800049e4 <_free_r+0x10c>
800049dc:	f0 0b 16 06 	lsr	r11,r8,0x6
800049e0:	2c 8b       	sub	r11,-56
800049e2:	c2 08       	rjmp	80004a22 <_free_r+0x14a>
800049e4:	59 49       	cp.w	r9,20
800049e6:	e0 8b 00 05 	brhi	800049f0 <_free_r+0x118>
800049ea:	f2 cb ff a5 	sub	r11,r9,-91
800049ee:	c1 a8       	rjmp	80004a22 <_free_r+0x14a>
800049f0:	e0 49 00 54 	cp.w	r9,84
800049f4:	e0 8b 00 06 	brhi	80004a00 <_free_r+0x128>
800049f8:	f0 0b 16 0c 	lsr	r11,r8,0xc
800049fc:	29 2b       	sub	r11,-110
800049fe:	c1 28       	rjmp	80004a22 <_free_r+0x14a>
80004a00:	e0 49 01 54 	cp.w	r9,340
80004a04:	e0 8b 00 06 	brhi	80004a10 <_free_r+0x138>
80004a08:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004a0c:	28 9b       	sub	r11,-119
80004a0e:	c0 a8       	rjmp	80004a22 <_free_r+0x14a>
80004a10:	f0 0b 16 12 	lsr	r11,r8,0x12
80004a14:	e0 49 05 54 	cp.w	r9,1364
80004a18:	e0 88 00 04 	brls	80004a20 <_free_r+0x148>
80004a1c:	37 eb       	mov	r11,126
80004a1e:	c0 28       	rjmp	80004a22 <_free_r+0x14a>
80004a20:	28 4b       	sub	r11,-124
80004a22:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80004a26:	78 29       	ld.w	r9,r12[0x8]
80004a28:	18 39       	cp.w	r9,r12
80004a2a:	c0 e1       	brne	80004a46 <_free_r+0x16e>
80004a2c:	74 18       	ld.w	r8,r10[0x4]
80004a2e:	a3 4b       	asr	r11,0x2
80004a30:	30 1c       	mov	r12,1
80004a32:	f8 0b 09 4b 	lsl	r11,r12,r11
80004a36:	f1 eb 10 0b 	or	r11,r8,r11
80004a3a:	12 98       	mov	r8,r9
80004a3c:	95 1b       	st.w	r10[0x4],r11
80004a3e:	c0 a8       	rjmp	80004a52 <_free_r+0x17a>
80004a40:	72 29       	ld.w	r9,r9[0x8]
80004a42:	18 39       	cp.w	r9,r12
80004a44:	c0 60       	breq	80004a50 <_free_r+0x178>
80004a46:	72 1a       	ld.w	r10,r9[0x4]
80004a48:	e0 1a ff fc 	andl	r10,0xfffc
80004a4c:	14 38       	cp.w	r8,r10
80004a4e:	cf 93       	brcs	80004a40 <_free_r+0x168>
80004a50:	72 38       	ld.w	r8,r9[0xc]
80004a52:	8d 38       	st.w	r6[0xc],r8
80004a54:	8d 29       	st.w	r6[0x8],r9
80004a56:	93 36       	st.w	r9[0xc],r6
80004a58:	91 26       	st.w	r8[0x8],r6
80004a5a:	0e 9c       	mov	r12,r7
80004a5c:	e0 a0 03 60 	rcall	8000511c <__malloc_unlock>
80004a60:	d8 22       	popm	r4-r7,pc
80004a62:	d7 03       	nop

80004a64 <_fstat_r>:
80004a64:	d4 21       	pushm	r4-r7,lr
80004a66:	16 98       	mov	r8,r11
80004a68:	18 97       	mov	r7,r12
80004a6a:	10 9c       	mov	r12,r8
80004a6c:	30 08       	mov	r8,0
80004a6e:	e0 66 19 f4 	mov	r6,6644
80004a72:	14 9b       	mov	r11,r10
80004a74:	8d 08       	st.w	r6[0x0],r8
80004a76:	e0 a0 04 1f 	rcall	800052b4 <_fstat>
80004a7a:	5b fc       	cp.w	r12,-1
80004a7c:	c0 51       	brne	80004a86 <_fstat_r+0x22>
80004a7e:	6c 08       	ld.w	r8,r6[0x0]
80004a80:	58 08       	cp.w	r8,0
80004a82:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004a86:	d8 22       	popm	r4-r7,pc

80004a88 <_fwalk>:
80004a88:	d4 31       	pushm	r0-r7,lr
80004a8a:	30 05       	mov	r5,0
80004a8c:	16 91       	mov	r1,r11
80004a8e:	f8 c7 ff 28 	sub	r7,r12,-216
80004a92:	0a 92       	mov	r2,r5
80004a94:	c3 6e       	rcall	80004700 <__sfp_lock_acquire>
80004a96:	3f f3       	mov	r3,-1
80004a98:	c1 68       	rjmp	80004ac4 <_fwalk+0x3c>
80004a9a:	6e 26       	ld.w	r6,r7[0x8]
80004a9c:	6e 14       	ld.w	r4,r7[0x4]
80004a9e:	2f 46       	sub	r6,-12
80004aa0:	c0 c8       	rjmp	80004ab8 <_fwalk+0x30>
80004aa2:	8c 08       	ld.sh	r8,r6[0x0]
80004aa4:	e4 08 19 00 	cp.h	r8,r2
80004aa8:	c0 70       	breq	80004ab6 <_fwalk+0x2e>
80004aaa:	8c 18       	ld.sh	r8,r6[0x2]
80004aac:	e6 08 19 00 	cp.h	r8,r3
80004ab0:	c0 30       	breq	80004ab6 <_fwalk+0x2e>
80004ab2:	5d 11       	icall	r1
80004ab4:	18 45       	or	r5,r12
80004ab6:	2a 46       	sub	r6,-92
80004ab8:	20 14       	sub	r4,1
80004aba:	ec cc 00 0c 	sub	r12,r6,12
80004abe:	58 04       	cp.w	r4,0
80004ac0:	cf 14       	brge	80004aa2 <_fwalk+0x1a>
80004ac2:	6e 07       	ld.w	r7,r7[0x0]
80004ac4:	58 07       	cp.w	r7,0
80004ac6:	ce a1       	brne	80004a9a <_fwalk+0x12>
80004ac8:	c1 de       	rcall	80004702 <__sfp_lock_release>
80004aca:	0a 9c       	mov	r12,r5
80004acc:	d8 32       	popm	r0-r7,pc
80004ace:	d7 03       	nop

80004ad0 <__smakebuf_r>:
80004ad0:	d4 21       	pushm	r4-r7,lr
80004ad2:	20 fd       	sub	sp,60
80004ad4:	96 68       	ld.sh	r8,r11[0xc]
80004ad6:	16 97       	mov	r7,r11
80004ad8:	18 96       	mov	r6,r12
80004ada:	e2 18 00 02 	andl	r8,0x2,COH
80004ade:	c3 b1       	brne	80004b54 <__smakebuf_r+0x84>
80004ae0:	96 7b       	ld.sh	r11,r11[0xe]
80004ae2:	f0 0b 19 00 	cp.h	r11,r8
80004ae6:	c0 45       	brlt	80004aee <__smakebuf_r+0x1e>
80004ae8:	1a 9a       	mov	r10,sp
80004aea:	cb df       	rcall	80004a64 <_fstat_r>
80004aec:	c0 f4       	brge	80004b0a <__smakebuf_r+0x3a>
80004aee:	8e 65       	ld.sh	r5,r7[0xc]
80004af0:	0a 98       	mov	r8,r5
80004af2:	ab b8       	sbr	r8,0xb
80004af4:	e2 15 00 80 	andl	r5,0x80,COH
80004af8:	ae 68       	st.h	r7[0xc],r8
80004afa:	30 04       	mov	r4,0
80004afc:	e0 68 04 00 	mov	r8,1024
80004b00:	f9 b5 01 40 	movne	r5,64
80004b04:	f0 05 17 00 	moveq	r5,r8
80004b08:	c1 c8       	rjmp	80004b40 <__smakebuf_r+0x70>
80004b0a:	40 18       	lddsp	r8,sp[0x4]
80004b0c:	e2 18 f0 00 	andl	r8,0xf000,COH
80004b10:	e0 48 20 00 	cp.w	r8,8192
80004b14:	5f 04       	sreq	r4
80004b16:	e0 48 80 00 	cp.w	r8,32768
80004b1a:	c0 e1       	brne	80004b36 <__smakebuf_r+0x66>
80004b1c:	6e b9       	ld.w	r9,r7[0x2c]
80004b1e:	fe c8 f9 6e 	sub	r8,pc,-1682
80004b22:	10 39       	cp.w	r9,r8
80004b24:	c0 91       	brne	80004b36 <__smakebuf_r+0x66>
80004b26:	8e 68       	ld.sh	r8,r7[0xc]
80004b28:	e0 65 04 00 	mov	r5,1024
80004b2c:	ab a8       	sbr	r8,0xa
80004b2e:	ef 45 00 50 	st.w	r7[80],r5
80004b32:	ae 68       	st.h	r7[0xc],r8
80004b34:	c0 68       	rjmp	80004b40 <__smakebuf_r+0x70>
80004b36:	8e 68       	ld.sh	r8,r7[0xc]
80004b38:	e0 65 04 00 	mov	r5,1024
80004b3c:	ab b8       	sbr	r8,0xb
80004b3e:	ae 68       	st.h	r7[0xc],r8
80004b40:	0a 9b       	mov	r11,r5
80004b42:	0c 9c       	mov	r12,r6
80004b44:	c2 6c       	rcall	80004b90 <_malloc_r>
80004b46:	8e 68       	ld.sh	r8,r7[0xc]
80004b48:	c0 d1       	brne	80004b62 <__smakebuf_r+0x92>
80004b4a:	ed b8 00 09 	bld	r8,0x9
80004b4e:	c1 f0       	breq	80004b8c <__smakebuf_r+0xbc>
80004b50:	a1 b8       	sbr	r8,0x1
80004b52:	ae 68       	st.h	r7[0xc],r8
80004b54:	ee c8 ff b9 	sub	r8,r7,-71
80004b58:	8f 48       	st.w	r7[0x10],r8
80004b5a:	8f 08       	st.w	r7[0x0],r8
80004b5c:	30 18       	mov	r8,1
80004b5e:	8f 58       	st.w	r7[0x14],r8
80004b60:	c1 68       	rjmp	80004b8c <__smakebuf_r+0xbc>
80004b62:	a7 b8       	sbr	r8,0x7
80004b64:	8f 4c       	st.w	r7[0x10],r12
80004b66:	ae 68       	st.h	r7[0xc],r8
80004b68:	8f 55       	st.w	r7[0x14],r5
80004b6a:	fe c8 04 66 	sub	r8,pc,1126
80004b6e:	8f 0c       	st.w	r7[0x0],r12
80004b70:	8d a8       	st.w	r6[0x28],r8
80004b72:	58 04       	cp.w	r4,0
80004b74:	c0 c0       	breq	80004b8c <__smakebuf_r+0xbc>
80004b76:	8e 7c       	ld.sh	r12,r7[0xe]
80004b78:	e0 a0 03 8a 	rcall	8000528c <isatty>
80004b7c:	ef f8 12 06 	ld.shne	r8,r7[0xc]
80004b80:	f9 b9 01 01 	movne	r9,1
80004b84:	f1 d9 e1 38 	orne	r8,r8,r9
80004b88:	ef f8 1c 06 	st.hne	r7[0xc],r8
80004b8c:	2f 1d       	sub	sp,-60
80004b8e:	d8 22       	popm	r4-r7,pc

80004b90 <_malloc_r>:
80004b90:	d4 31       	pushm	r0-r7,lr
80004b92:	f6 c7 ff f5 	sub	r7,r11,-11
80004b96:	18 95       	mov	r5,r12
80004b98:	59 67       	cp.w	r7,22
80004b9a:	f9 b7 08 10 	movls	r7,16
80004b9e:	f9 b8 0b f8 	movhi	r8,-8
80004ba2:	ef d8 eb 27 	andhi	r7,r7,r8
80004ba6:	16 37       	cp.w	r7,r11
80004ba8:	5f 38       	srlo	r8
80004baa:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004bae:	c0 50       	breq	80004bb8 <_malloc_r+0x28>
80004bb0:	30 c8       	mov	r8,12
80004bb2:	99 38       	st.w	r12[0xc],r8
80004bb4:	e0 8f 01 f8 	bral	80004fa4 <_malloc_r+0x414>
80004bb8:	e0 a0 02 b1 	rcall	8000511a <__malloc_lock>
80004bbc:	e0 47 01 f7 	cp.w	r7,503
80004bc0:	e0 8b 00 1d 	brhi	80004bfa <_malloc_r+0x6a>
80004bc4:	ee 03 16 03 	lsr	r3,r7,0x3
80004bc8:	e0 68 01 00 	mov	r8,256
80004bcc:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004bd0:	70 36       	ld.w	r6,r8[0xc]
80004bd2:	10 36       	cp.w	r6,r8
80004bd4:	c0 61       	brne	80004be0 <_malloc_r+0x50>
80004bd6:	ec c8 ff f8 	sub	r8,r6,-8
80004bda:	70 36       	ld.w	r6,r8[0xc]
80004bdc:	10 36       	cp.w	r6,r8
80004bde:	c0 c0       	breq	80004bf6 <_malloc_r+0x66>
80004be0:	6c 18       	ld.w	r8,r6[0x4]
80004be2:	e0 18 ff fc 	andl	r8,0xfffc
80004be6:	6c 3a       	ld.w	r10,r6[0xc]
80004be8:	ec 08 00 09 	add	r9,r6,r8
80004bec:	0a 9c       	mov	r12,r5
80004bee:	6c 28       	ld.w	r8,r6[0x8]
80004bf0:	95 28       	st.w	r10[0x8],r8
80004bf2:	91 3a       	st.w	r8[0xc],r10
80004bf4:	c4 88       	rjmp	80004c84 <_malloc_r+0xf4>
80004bf6:	2f e3       	sub	r3,-2
80004bf8:	c4 e8       	rjmp	80004c94 <_malloc_r+0x104>
80004bfa:	ee 08 16 09 	lsr	r8,r7,0x9
80004bfe:	c0 41       	brne	80004c06 <_malloc_r+0x76>
80004c00:	ee 03 16 03 	lsr	r3,r7,0x3
80004c04:	c2 78       	rjmp	80004c52 <_malloc_r+0xc2>
80004c06:	58 48       	cp.w	r8,4
80004c08:	e0 8b 00 06 	brhi	80004c14 <_malloc_r+0x84>
80004c0c:	ee 03 16 06 	lsr	r3,r7,0x6
80004c10:	2c 83       	sub	r3,-56
80004c12:	c2 08       	rjmp	80004c52 <_malloc_r+0xc2>
80004c14:	59 48       	cp.w	r8,20
80004c16:	e0 8b 00 05 	brhi	80004c20 <_malloc_r+0x90>
80004c1a:	f0 c3 ff a5 	sub	r3,r8,-91
80004c1e:	c1 a8       	rjmp	80004c52 <_malloc_r+0xc2>
80004c20:	e0 48 00 54 	cp.w	r8,84
80004c24:	e0 8b 00 06 	brhi	80004c30 <_malloc_r+0xa0>
80004c28:	ee 03 16 0c 	lsr	r3,r7,0xc
80004c2c:	29 23       	sub	r3,-110
80004c2e:	c1 28       	rjmp	80004c52 <_malloc_r+0xc2>
80004c30:	e0 48 01 54 	cp.w	r8,340
80004c34:	e0 8b 00 06 	brhi	80004c40 <_malloc_r+0xb0>
80004c38:	ee 03 16 0f 	lsr	r3,r7,0xf
80004c3c:	28 93       	sub	r3,-119
80004c3e:	c0 a8       	rjmp	80004c52 <_malloc_r+0xc2>
80004c40:	ee 03 16 12 	lsr	r3,r7,0x12
80004c44:	e0 48 05 54 	cp.w	r8,1364
80004c48:	e0 88 00 04 	brls	80004c50 <_malloc_r+0xc0>
80004c4c:	37 e3       	mov	r3,126
80004c4e:	c0 28       	rjmp	80004c52 <_malloc_r+0xc2>
80004c50:	28 43       	sub	r3,-124
80004c52:	e0 6a 01 00 	mov	r10,256
80004c56:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004c5a:	74 36       	ld.w	r6,r10[0xc]
80004c5c:	c1 98       	rjmp	80004c8e <_malloc_r+0xfe>
80004c5e:	6c 19       	ld.w	r9,r6[0x4]
80004c60:	e0 19 ff fc 	andl	r9,0xfffc
80004c64:	f2 07 01 0b 	sub	r11,r9,r7
80004c68:	58 fb       	cp.w	r11,15
80004c6a:	e0 8a 00 04 	brle	80004c72 <_malloc_r+0xe2>
80004c6e:	20 13       	sub	r3,1
80004c70:	c1 18       	rjmp	80004c92 <_malloc_r+0x102>
80004c72:	6c 38       	ld.w	r8,r6[0xc]
80004c74:	58 0b       	cp.w	r11,0
80004c76:	c0 b5       	brlt	80004c8c <_malloc_r+0xfc>
80004c78:	6c 2a       	ld.w	r10,r6[0x8]
80004c7a:	ec 09 00 09 	add	r9,r6,r9
80004c7e:	0a 9c       	mov	r12,r5
80004c80:	91 2a       	st.w	r8[0x8],r10
80004c82:	95 38       	st.w	r10[0xc],r8
80004c84:	72 18       	ld.w	r8,r9[0x4]
80004c86:	a1 a8       	sbr	r8,0x0
80004c88:	93 18       	st.w	r9[0x4],r8
80004c8a:	cb d8       	rjmp	80004e04 <_malloc_r+0x274>
80004c8c:	10 96       	mov	r6,r8
80004c8e:	14 36       	cp.w	r6,r10
80004c90:	ce 71       	brne	80004c5e <_malloc_r+0xce>
80004c92:	2f f3       	sub	r3,-1
80004c94:	e0 6a 01 00 	mov	r10,256
80004c98:	f4 cc ff f8 	sub	r12,r10,-8
80004c9c:	78 26       	ld.w	r6,r12[0x8]
80004c9e:	18 36       	cp.w	r6,r12
80004ca0:	c6 d0       	breq	80004d7a <_malloc_r+0x1ea>
80004ca2:	6c 19       	ld.w	r9,r6[0x4]
80004ca4:	e0 19 ff fc 	andl	r9,0xfffc
80004ca8:	f2 07 01 08 	sub	r8,r9,r7
80004cac:	58 f8       	cp.w	r8,15
80004cae:	e0 89 00 90 	brgt	80004dce <_malloc_r+0x23e>
80004cb2:	99 3c       	st.w	r12[0xc],r12
80004cb4:	99 2c       	st.w	r12[0x8],r12
80004cb6:	58 08       	cp.w	r8,0
80004cb8:	c0 55       	brlt	80004cc2 <_malloc_r+0x132>
80004cba:	ec 09 00 09 	add	r9,r6,r9
80004cbe:	0a 9c       	mov	r12,r5
80004cc0:	ce 2b       	rjmp	80004c84 <_malloc_r+0xf4>
80004cc2:	e0 49 01 ff 	cp.w	r9,511
80004cc6:	e0 8b 00 13 	brhi	80004cec <_malloc_r+0x15c>
80004cca:	a3 99       	lsr	r9,0x3
80004ccc:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004cd0:	70 2b       	ld.w	r11,r8[0x8]
80004cd2:	8d 38       	st.w	r6[0xc],r8
80004cd4:	8d 2b       	st.w	r6[0x8],r11
80004cd6:	97 36       	st.w	r11[0xc],r6
80004cd8:	91 26       	st.w	r8[0x8],r6
80004cda:	a3 49       	asr	r9,0x2
80004cdc:	74 18       	ld.w	r8,r10[0x4]
80004cde:	30 1b       	mov	r11,1
80004ce0:	f6 09 09 49 	lsl	r9,r11,r9
80004ce4:	f1 e9 10 09 	or	r9,r8,r9
80004ce8:	95 19       	st.w	r10[0x4],r9
80004cea:	c4 88       	rjmp	80004d7a <_malloc_r+0x1ea>
80004cec:	f2 08 16 09 	lsr	r8,r9,0x9
80004cf0:	58 48       	cp.w	r8,4
80004cf2:	e0 8b 00 07 	brhi	80004d00 <_malloc_r+0x170>
80004cf6:	f2 0a 16 06 	lsr	r10,r9,0x6
80004cfa:	2c 8a       	sub	r10,-56
80004cfc:	c2 18       	rjmp	80004d3e <_malloc_r+0x1ae>
80004cfe:	d7 03       	nop
80004d00:	59 48       	cp.w	r8,20
80004d02:	e0 8b 00 05 	brhi	80004d0c <_malloc_r+0x17c>
80004d06:	f0 ca ff a5 	sub	r10,r8,-91
80004d0a:	c1 a8       	rjmp	80004d3e <_malloc_r+0x1ae>
80004d0c:	e0 48 00 54 	cp.w	r8,84
80004d10:	e0 8b 00 06 	brhi	80004d1c <_malloc_r+0x18c>
80004d14:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004d18:	29 2a       	sub	r10,-110
80004d1a:	c1 28       	rjmp	80004d3e <_malloc_r+0x1ae>
80004d1c:	e0 48 01 54 	cp.w	r8,340
80004d20:	e0 8b 00 06 	brhi	80004d2c <_malloc_r+0x19c>
80004d24:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004d28:	28 9a       	sub	r10,-119
80004d2a:	c0 a8       	rjmp	80004d3e <_malloc_r+0x1ae>
80004d2c:	f2 0a 16 12 	lsr	r10,r9,0x12
80004d30:	e0 48 05 54 	cp.w	r8,1364
80004d34:	e0 88 00 04 	brls	80004d3c <_malloc_r+0x1ac>
80004d38:	37 ea       	mov	r10,126
80004d3a:	c0 28       	rjmp	80004d3e <_malloc_r+0x1ae>
80004d3c:	28 4a       	sub	r10,-124
80004d3e:	e0 6b 01 00 	mov	r11,256
80004d42:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004d46:	68 28       	ld.w	r8,r4[0x8]
80004d48:	08 38       	cp.w	r8,r4
80004d4a:	c0 e1       	brne	80004d66 <_malloc_r+0x1d6>
80004d4c:	76 19       	ld.w	r9,r11[0x4]
80004d4e:	a3 4a       	asr	r10,0x2
80004d50:	30 1e       	mov	lr,1
80004d52:	fc 0a 09 4a 	lsl	r10,lr,r10
80004d56:	f3 ea 10 0a 	or	r10,r9,r10
80004d5a:	10 99       	mov	r9,r8
80004d5c:	97 1a       	st.w	r11[0x4],r10
80004d5e:	c0 a8       	rjmp	80004d72 <_malloc_r+0x1e2>
80004d60:	70 28       	ld.w	r8,r8[0x8]
80004d62:	08 38       	cp.w	r8,r4
80004d64:	c0 60       	breq	80004d70 <_malloc_r+0x1e0>
80004d66:	70 1a       	ld.w	r10,r8[0x4]
80004d68:	e0 1a ff fc 	andl	r10,0xfffc
80004d6c:	14 39       	cp.w	r9,r10
80004d6e:	cf 93       	brcs	80004d60 <_malloc_r+0x1d0>
80004d70:	70 39       	ld.w	r9,r8[0xc]
80004d72:	8d 39       	st.w	r6[0xc],r9
80004d74:	8d 28       	st.w	r6[0x8],r8
80004d76:	91 36       	st.w	r8[0xc],r6
80004d78:	93 26       	st.w	r9[0x8],r6
80004d7a:	e6 08 14 02 	asr	r8,r3,0x2
80004d7e:	30 1b       	mov	r11,1
80004d80:	e0 64 01 00 	mov	r4,256
80004d84:	f6 08 09 4b 	lsl	r11,r11,r8
80004d88:	68 18       	ld.w	r8,r4[0x4]
80004d8a:	10 3b       	cp.w	r11,r8
80004d8c:	e0 8b 00 6a 	brhi	80004e60 <_malloc_r+0x2d0>
80004d90:	f7 e8 00 09 	and	r9,r11,r8
80004d94:	c0 b1       	brne	80004daa <_malloc_r+0x21a>
80004d96:	e0 13 ff fc 	andl	r3,0xfffc
80004d9a:	a1 7b       	lsl	r11,0x1
80004d9c:	2f c3       	sub	r3,-4
80004d9e:	c0 38       	rjmp	80004da4 <_malloc_r+0x214>
80004da0:	2f c3       	sub	r3,-4
80004da2:	a1 7b       	lsl	r11,0x1
80004da4:	f7 e8 00 09 	and	r9,r11,r8
80004da8:	cf c0       	breq	80004da0 <_malloc_r+0x210>
80004daa:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004dae:	06 92       	mov	r2,r3
80004db0:	1c 91       	mov	r1,lr
80004db2:	62 36       	ld.w	r6,r1[0xc]
80004db4:	c2 d8       	rjmp	80004e0e <_malloc_r+0x27e>
80004db6:	6c 1a       	ld.w	r10,r6[0x4]
80004db8:	e0 1a ff fc 	andl	r10,0xfffc
80004dbc:	f4 07 01 08 	sub	r8,r10,r7
80004dc0:	58 f8       	cp.w	r8,15
80004dc2:	e0 8a 00 15 	brle	80004dec <_malloc_r+0x25c>
80004dc6:	6c 3a       	ld.w	r10,r6[0xc]
80004dc8:	6c 29       	ld.w	r9,r6[0x8]
80004dca:	95 29       	st.w	r10[0x8],r9
80004dcc:	93 3a       	st.w	r9[0xc],r10
80004dce:	0e 99       	mov	r9,r7
80004dd0:	ec 07 00 07 	add	r7,r6,r7
80004dd4:	a1 a9       	sbr	r9,0x0
80004dd6:	99 37       	st.w	r12[0xc],r7
80004dd8:	99 27       	st.w	r12[0x8],r7
80004dda:	8d 19       	st.w	r6[0x4],r9
80004ddc:	ee 08 09 08 	st.w	r7[r8],r8
80004de0:	8f 2c       	st.w	r7[0x8],r12
80004de2:	8f 3c       	st.w	r7[0xc],r12
80004de4:	a1 a8       	sbr	r8,0x0
80004de6:	0a 9c       	mov	r12,r5
80004de8:	8f 18       	st.w	r7[0x4],r8
80004dea:	c0 d8       	rjmp	80004e04 <_malloc_r+0x274>
80004dec:	6c 39       	ld.w	r9,r6[0xc]
80004dee:	58 08       	cp.w	r8,0
80004df0:	c0 e5       	brlt	80004e0c <_malloc_r+0x27c>
80004df2:	ec 0a 00 0a 	add	r10,r6,r10
80004df6:	74 18       	ld.w	r8,r10[0x4]
80004df8:	a1 a8       	sbr	r8,0x0
80004dfa:	0a 9c       	mov	r12,r5
80004dfc:	95 18       	st.w	r10[0x4],r8
80004dfe:	6c 28       	ld.w	r8,r6[0x8]
80004e00:	93 28       	st.w	r9[0x8],r8
80004e02:	91 39       	st.w	r8[0xc],r9
80004e04:	c8 cd       	rcall	8000511c <__malloc_unlock>
80004e06:	ec cc ff f8 	sub	r12,r6,-8
80004e0a:	d8 32       	popm	r0-r7,pc
80004e0c:	12 96       	mov	r6,r9
80004e0e:	02 36       	cp.w	r6,r1
80004e10:	cd 31       	brne	80004db6 <_malloc_r+0x226>
80004e12:	2f f2       	sub	r2,-1
80004e14:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004e18:	c0 30       	breq	80004e1e <_malloc_r+0x28e>
80004e1a:	2f 81       	sub	r1,-8
80004e1c:	cc bb       	rjmp	80004db2 <_malloc_r+0x222>
80004e1e:	1c 98       	mov	r8,lr
80004e20:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004e24:	c0 81       	brne	80004e34 <_malloc_r+0x2a4>
80004e26:	68 19       	ld.w	r9,r4[0x4]
80004e28:	f6 08 11 ff 	rsub	r8,r11,-1
80004e2c:	f3 e8 00 08 	and	r8,r9,r8
80004e30:	89 18       	st.w	r4[0x4],r8
80004e32:	c0 78       	rjmp	80004e40 <_malloc_r+0x2b0>
80004e34:	f0 c9 00 08 	sub	r9,r8,8
80004e38:	20 13       	sub	r3,1
80004e3a:	70 08       	ld.w	r8,r8[0x0]
80004e3c:	12 38       	cp.w	r8,r9
80004e3e:	cf 10       	breq	80004e20 <_malloc_r+0x290>
80004e40:	a1 7b       	lsl	r11,0x1
80004e42:	68 18       	ld.w	r8,r4[0x4]
80004e44:	10 3b       	cp.w	r11,r8
80004e46:	e0 8b 00 0d 	brhi	80004e60 <_malloc_r+0x2d0>
80004e4a:	58 0b       	cp.w	r11,0
80004e4c:	c0 a0       	breq	80004e60 <_malloc_r+0x2d0>
80004e4e:	04 93       	mov	r3,r2
80004e50:	c0 38       	rjmp	80004e56 <_malloc_r+0x2c6>
80004e52:	2f c3       	sub	r3,-4
80004e54:	a1 7b       	lsl	r11,0x1
80004e56:	f7 e8 00 09 	and	r9,r11,r8
80004e5a:	ca 81       	brne	80004daa <_malloc_r+0x21a>
80004e5c:	cf bb       	rjmp	80004e52 <_malloc_r+0x2c2>
80004e5e:	d7 03       	nop
80004e60:	68 23       	ld.w	r3,r4[0x8]
80004e62:	66 12       	ld.w	r2,r3[0x4]
80004e64:	e0 12 ff fc 	andl	r2,0xfffc
80004e68:	0e 32       	cp.w	r2,r7
80004e6a:	5f 39       	srlo	r9
80004e6c:	e4 07 01 08 	sub	r8,r2,r7
80004e70:	58 f8       	cp.w	r8,15
80004e72:	5f aa       	srle	r10
80004e74:	f5 e9 10 09 	or	r9,r10,r9
80004e78:	e0 80 00 98 	breq	80004fa8 <_malloc_r+0x418>
80004e7c:	e0 68 19 90 	mov	r8,6544
80004e80:	70 01       	ld.w	r1,r8[0x0]
80004e82:	e0 68 05 0c 	mov	r8,1292
80004e86:	2f 01       	sub	r1,-16
80004e88:	70 08       	ld.w	r8,r8[0x0]
80004e8a:	0e 01       	add	r1,r7
80004e8c:	5b f8       	cp.w	r8,-1
80004e8e:	c0 40       	breq	80004e96 <_malloc_r+0x306>
80004e90:	28 11       	sub	r1,-127
80004e92:	e0 11 ff 80 	andl	r1,0xff80
80004e96:	02 9b       	mov	r11,r1
80004e98:	0a 9c       	mov	r12,r5
80004e9a:	c4 3d       	rcall	80005120 <_sbrk_r>
80004e9c:	18 96       	mov	r6,r12
80004e9e:	5b fc       	cp.w	r12,-1
80004ea0:	c7 40       	breq	80004f88 <_malloc_r+0x3f8>
80004ea2:	e6 02 00 08 	add	r8,r3,r2
80004ea6:	10 3c       	cp.w	r12,r8
80004ea8:	c0 32       	brcc	80004eae <_malloc_r+0x31e>
80004eaa:	08 33       	cp.w	r3,r4
80004eac:	c6 e1       	brne	80004f88 <_malloc_r+0x3f8>
80004eae:	e0 6a 19 94 	mov	r10,6548
80004eb2:	74 09       	ld.w	r9,r10[0x0]
80004eb4:	e2 09 00 09 	add	r9,r1,r9
80004eb8:	95 09       	st.w	r10[0x0],r9
80004eba:	10 36       	cp.w	r6,r8
80004ebc:	c0 a1       	brne	80004ed0 <_malloc_r+0x340>
80004ebe:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004ec2:	c0 71       	brne	80004ed0 <_malloc_r+0x340>
80004ec4:	e2 02 00 02 	add	r2,r1,r2
80004ec8:	68 28       	ld.w	r8,r4[0x8]
80004eca:	a1 a2       	sbr	r2,0x0
80004ecc:	91 12       	st.w	r8[0x4],r2
80004ece:	c4 e8       	rjmp	80004f6a <_malloc_r+0x3da>
80004ed0:	e0 6a 05 0c 	mov	r10,1292
80004ed4:	74 0b       	ld.w	r11,r10[0x0]
80004ed6:	5b fb       	cp.w	r11,-1
80004ed8:	c0 31       	brne	80004ede <_malloc_r+0x34e>
80004eda:	95 06       	st.w	r10[0x0],r6
80004edc:	c0 78       	rjmp	80004eea <_malloc_r+0x35a>
80004ede:	ec 09 00 09 	add	r9,r6,r9
80004ee2:	e0 6a 19 94 	mov	r10,6548
80004ee6:	10 19       	sub	r9,r8
80004ee8:	95 09       	st.w	r10[0x0],r9
80004eea:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004eee:	f0 09 11 08 	rsub	r9,r8,8
80004ef2:	58 08       	cp.w	r8,0
80004ef4:	f2 08 17 10 	movne	r8,r9
80004ef8:	ed d8 e1 06 	addne	r6,r6,r8
80004efc:	28 08       	sub	r8,-128
80004efe:	ec 01 00 01 	add	r1,r6,r1
80004f02:	0a 9c       	mov	r12,r5
80004f04:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004f08:	f0 01 01 01 	sub	r1,r8,r1
80004f0c:	02 9b       	mov	r11,r1
80004f0e:	c0 9d       	rcall	80005120 <_sbrk_r>
80004f10:	e0 68 19 94 	mov	r8,6548
80004f14:	5b fc       	cp.w	r12,-1
80004f16:	ec 0c 17 00 	moveq	r12,r6
80004f1a:	f9 b1 00 00 	moveq	r1,0
80004f1e:	70 09       	ld.w	r9,r8[0x0]
80004f20:	0c 1c       	sub	r12,r6
80004f22:	89 26       	st.w	r4[0x8],r6
80004f24:	02 0c       	add	r12,r1
80004f26:	12 01       	add	r1,r9
80004f28:	a1 ac       	sbr	r12,0x0
80004f2a:	91 01       	st.w	r8[0x0],r1
80004f2c:	8d 1c       	st.w	r6[0x4],r12
80004f2e:	08 33       	cp.w	r3,r4
80004f30:	c1 d0       	breq	80004f6a <_malloc_r+0x3da>
80004f32:	58 f2       	cp.w	r2,15
80004f34:	e0 8b 00 05 	brhi	80004f3e <_malloc_r+0x3ae>
80004f38:	30 18       	mov	r8,1
80004f3a:	8d 18       	st.w	r6[0x4],r8
80004f3c:	c2 68       	rjmp	80004f88 <_malloc_r+0x3f8>
80004f3e:	30 59       	mov	r9,5
80004f40:	20 c2       	sub	r2,12
80004f42:	e0 12 ff f8 	andl	r2,0xfff8
80004f46:	e6 02 00 08 	add	r8,r3,r2
80004f4a:	91 29       	st.w	r8[0x8],r9
80004f4c:	91 19       	st.w	r8[0x4],r9
80004f4e:	66 18       	ld.w	r8,r3[0x4]
80004f50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f54:	e5 e8 10 08 	or	r8,r2,r8
80004f58:	87 18       	st.w	r3[0x4],r8
80004f5a:	58 f2       	cp.w	r2,15
80004f5c:	e0 88 00 07 	brls	80004f6a <_malloc_r+0x3da>
80004f60:	e6 cb ff f8 	sub	r11,r3,-8
80004f64:	0a 9c       	mov	r12,r5
80004f66:	fe b0 fc b9 	rcall	800048d8 <_free_r>
80004f6a:	e0 69 19 8c 	mov	r9,6540
80004f6e:	72 0a       	ld.w	r10,r9[0x0]
80004f70:	e0 68 19 94 	mov	r8,6548
80004f74:	70 08       	ld.w	r8,r8[0x0]
80004f76:	14 38       	cp.w	r8,r10
80004f78:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f7c:	e0 69 19 88 	mov	r9,6536
80004f80:	72 0a       	ld.w	r10,r9[0x0]
80004f82:	14 38       	cp.w	r8,r10
80004f84:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f88:	68 28       	ld.w	r8,r4[0x8]
80004f8a:	70 18       	ld.w	r8,r8[0x4]
80004f8c:	e0 18 ff fc 	andl	r8,0xfffc
80004f90:	0e 38       	cp.w	r8,r7
80004f92:	5f 39       	srlo	r9
80004f94:	0e 18       	sub	r8,r7
80004f96:	58 f8       	cp.w	r8,15
80004f98:	5f aa       	srle	r10
80004f9a:	f5 e9 10 09 	or	r9,r10,r9
80004f9e:	c0 50       	breq	80004fa8 <_malloc_r+0x418>
80004fa0:	0a 9c       	mov	r12,r5
80004fa2:	cb dc       	rcall	8000511c <__malloc_unlock>
80004fa4:	d8 3a       	popm	r0-r7,pc,r12=0
80004fa6:	d7 03       	nop
80004fa8:	68 26       	ld.w	r6,r4[0x8]
80004faa:	a1 a8       	sbr	r8,0x0
80004fac:	0e 99       	mov	r9,r7
80004fae:	a1 a9       	sbr	r9,0x0
80004fb0:	8d 19       	st.w	r6[0x4],r9
80004fb2:	ec 07 00 07 	add	r7,r6,r7
80004fb6:	0a 9c       	mov	r12,r5
80004fb8:	89 27       	st.w	r4[0x8],r7
80004fba:	8f 18       	st.w	r7[0x4],r8
80004fbc:	cb 0c       	rcall	8000511c <__malloc_unlock>
80004fbe:	ec cc ff f8 	sub	r12,r6,-8
80004fc2:	d8 32       	popm	r0-r7,pc

80004fc4 <memcpy>:
80004fc4:	58 8a       	cp.w	r10,8
80004fc6:	c2 f5       	brlt	80005024 <memcpy+0x60>
80004fc8:	f9 eb 10 09 	or	r9,r12,r11
80004fcc:	e2 19 00 03 	andl	r9,0x3,COH
80004fd0:	e0 81 00 97 	brne	800050fe <memcpy+0x13a>
80004fd4:	e0 4a 00 20 	cp.w	r10,32
80004fd8:	c3 b4       	brge	8000504e <memcpy+0x8a>
80004fda:	f4 08 14 02 	asr	r8,r10,0x2
80004fde:	f0 09 11 08 	rsub	r9,r8,8
80004fe2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004fe6:	76 69       	ld.w	r9,r11[0x18]
80004fe8:	99 69       	st.w	r12[0x18],r9
80004fea:	76 59       	ld.w	r9,r11[0x14]
80004fec:	99 59       	st.w	r12[0x14],r9
80004fee:	76 49       	ld.w	r9,r11[0x10]
80004ff0:	99 49       	st.w	r12[0x10],r9
80004ff2:	76 39       	ld.w	r9,r11[0xc]
80004ff4:	99 39       	st.w	r12[0xc],r9
80004ff6:	76 29       	ld.w	r9,r11[0x8]
80004ff8:	99 29       	st.w	r12[0x8],r9
80004ffa:	76 19       	ld.w	r9,r11[0x4]
80004ffc:	99 19       	st.w	r12[0x4],r9
80004ffe:	76 09       	ld.w	r9,r11[0x0]
80005000:	99 09       	st.w	r12[0x0],r9
80005002:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80005006:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000500a:	e0 1a 00 03 	andl	r10,0x3
8000500e:	f4 0a 11 04 	rsub	r10,r10,4
80005012:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80005016:	17 a9       	ld.ub	r9,r11[0x2]
80005018:	b0 a9       	st.b	r8[0x2],r9
8000501a:	17 99       	ld.ub	r9,r11[0x1]
8000501c:	b0 99       	st.b	r8[0x1],r9
8000501e:	17 89       	ld.ub	r9,r11[0x0]
80005020:	b0 89       	st.b	r8[0x0],r9
80005022:	5e fc       	retal	r12
80005024:	f4 0a 11 09 	rsub	r10,r10,9
80005028:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000502c:	17 f9       	ld.ub	r9,r11[0x7]
8000502e:	b8 f9       	st.b	r12[0x7],r9
80005030:	17 e9       	ld.ub	r9,r11[0x6]
80005032:	b8 e9       	st.b	r12[0x6],r9
80005034:	17 d9       	ld.ub	r9,r11[0x5]
80005036:	b8 d9       	st.b	r12[0x5],r9
80005038:	17 c9       	ld.ub	r9,r11[0x4]
8000503a:	b8 c9       	st.b	r12[0x4],r9
8000503c:	17 b9       	ld.ub	r9,r11[0x3]
8000503e:	b8 b9       	st.b	r12[0x3],r9
80005040:	17 a9       	ld.ub	r9,r11[0x2]
80005042:	b8 a9       	st.b	r12[0x2],r9
80005044:	17 99       	ld.ub	r9,r11[0x1]
80005046:	b8 99       	st.b	r12[0x1],r9
80005048:	17 89       	ld.ub	r9,r11[0x0]
8000504a:	b8 89       	st.b	r12[0x0],r9
8000504c:	5e fc       	retal	r12
8000504e:	eb cd 40 c0 	pushm	r6-r7,lr
80005052:	18 99       	mov	r9,r12
80005054:	22 0a       	sub	r10,32
80005056:	b7 07       	ld.d	r6,r11++
80005058:	b3 26       	st.d	r9++,r6
8000505a:	b7 07       	ld.d	r6,r11++
8000505c:	b3 26       	st.d	r9++,r6
8000505e:	b7 07       	ld.d	r6,r11++
80005060:	b3 26       	st.d	r9++,r6
80005062:	b7 07       	ld.d	r6,r11++
80005064:	b3 26       	st.d	r9++,r6
80005066:	22 0a       	sub	r10,32
80005068:	cf 74       	brge	80005056 <memcpy+0x92>
8000506a:	2f 0a       	sub	r10,-16
8000506c:	c0 65       	brlt	80005078 <memcpy+0xb4>
8000506e:	b7 07       	ld.d	r6,r11++
80005070:	b3 26       	st.d	r9++,r6
80005072:	b7 07       	ld.d	r6,r11++
80005074:	b3 26       	st.d	r9++,r6
80005076:	21 0a       	sub	r10,16
80005078:	5c 3a       	neg	r10
8000507a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000507e:	d7 03       	nop
80005080:	d7 03       	nop
80005082:	f7 36 00 0e 	ld.ub	r6,r11[14]
80005086:	f3 66 00 0e 	st.b	r9[14],r6
8000508a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000508e:	f3 66 00 0d 	st.b	r9[13],r6
80005092:	f7 36 00 0c 	ld.ub	r6,r11[12]
80005096:	f3 66 00 0c 	st.b	r9[12],r6
8000509a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000509e:	f3 66 00 0b 	st.b	r9[11],r6
800050a2:	f7 36 00 0a 	ld.ub	r6,r11[10]
800050a6:	f3 66 00 0a 	st.b	r9[10],r6
800050aa:	f7 36 00 09 	ld.ub	r6,r11[9]
800050ae:	f3 66 00 09 	st.b	r9[9],r6
800050b2:	f7 36 00 08 	ld.ub	r6,r11[8]
800050b6:	f3 66 00 08 	st.b	r9[8],r6
800050ba:	f7 36 00 07 	ld.ub	r6,r11[7]
800050be:	f3 66 00 07 	st.b	r9[7],r6
800050c2:	f7 36 00 06 	ld.ub	r6,r11[6]
800050c6:	f3 66 00 06 	st.b	r9[6],r6
800050ca:	f7 36 00 05 	ld.ub	r6,r11[5]
800050ce:	f3 66 00 05 	st.b	r9[5],r6
800050d2:	f7 36 00 04 	ld.ub	r6,r11[4]
800050d6:	f3 66 00 04 	st.b	r9[4],r6
800050da:	f7 36 00 03 	ld.ub	r6,r11[3]
800050de:	f3 66 00 03 	st.b	r9[3],r6
800050e2:	f7 36 00 02 	ld.ub	r6,r11[2]
800050e6:	f3 66 00 02 	st.b	r9[2],r6
800050ea:	f7 36 00 01 	ld.ub	r6,r11[1]
800050ee:	f3 66 00 01 	st.b	r9[1],r6
800050f2:	f7 36 00 00 	ld.ub	r6,r11[0]
800050f6:	f3 66 00 00 	st.b	r9[0],r6
800050fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800050fe:	20 1a       	sub	r10,1
80005100:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80005104:	f8 0a 0b 09 	st.b	r12[r10],r9
80005108:	cf b1       	brne	800050fe <memcpy+0x13a>
8000510a:	5e fc       	retal	r12

8000510c <memset>:
8000510c:	18 98       	mov	r8,r12
8000510e:	c0 38       	rjmp	80005114 <memset+0x8>
80005110:	10 cb       	st.b	r8++,r11
80005112:	20 1a       	sub	r10,1
80005114:	58 0a       	cp.w	r10,0
80005116:	cf d1       	brne	80005110 <memset+0x4>
80005118:	5e fc       	retal	r12

8000511a <__malloc_lock>:
8000511a:	5e fc       	retal	r12

8000511c <__malloc_unlock>:
8000511c:	5e fc       	retal	r12
8000511e:	d7 03       	nop

80005120 <_sbrk_r>:
80005120:	d4 21       	pushm	r4-r7,lr
80005122:	30 08       	mov	r8,0
80005124:	18 97       	mov	r7,r12
80005126:	e0 66 19 f4 	mov	r6,6644
8000512a:	16 9c       	mov	r12,r11
8000512c:	8d 08       	st.w	r6[0x0],r8
8000512e:	ce 9c       	rcall	80005300 <_sbrk>
80005130:	5b fc       	cp.w	r12,-1
80005132:	c0 51       	brne	8000513c <_sbrk_r+0x1c>
80005134:	6c 08       	ld.w	r8,r6[0x0]
80005136:	58 08       	cp.w	r8,0
80005138:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000513c:	d8 22       	popm	r4-r7,pc
8000513e:	d7 03       	nop

80005140 <snprintf>:
80005140:	d4 21       	pushm	r4-r7,lr
80005142:	21 7d       	sub	sp,92
80005144:	e0 68 00 fc 	mov	r8,252
80005148:	fa c9 ff 90 	sub	r9,sp,-112
8000514c:	16 97       	mov	r7,r11
8000514e:	70 06       	ld.w	r6,r8[0x0]
80005150:	58 0b       	cp.w	r11,0
80005152:	c0 64       	brge	8000515e <snprintf+0x1e>
80005154:	e0 68 00 8b 	mov	r8,139
80005158:	3f fc       	mov	r12,-1
8000515a:	8d 38       	st.w	r6[0xc],r8
8000515c:	c2 28       	rjmp	800051a0 <snprintf+0x60>
8000515e:	58 0b       	cp.w	r11,0
80005160:	f6 08 17 00 	moveq	r8,r11
80005164:	58 07       	cp.w	r7,0
80005166:	f9 bb 01 ff 	movne	r11,-1
8000516a:	ef db e1 08 	addne	r8,r7,r11
8000516e:	50 58       	stdsp	sp[0x14],r8
80005170:	50 28       	stdsp	sp[0x8],r8
80005172:	e0 68 02 08 	mov	r8,520
80005176:	ba 68       	st.h	sp[0xc],r8
80005178:	3f f8       	mov	r8,-1
8000517a:	50 4c       	stdsp	sp[0x10],r12
8000517c:	50 0c       	stdsp	sp[0x0],r12
8000517e:	ba 78       	st.h	sp[0xe],r8
80005180:	1a 9b       	mov	r11,sp
80005182:	0c 9c       	mov	r12,r6
80005184:	e0 a0 02 72 	rcall	80005668 <_vfprintf_r>
80005188:	5b fc       	cp.w	r12,-1
8000518a:	c0 44       	brge	80005192 <snprintf+0x52>
8000518c:	e0 68 00 8b 	mov	r8,139
80005190:	8d 38       	st.w	r6[0xc],r8
80005192:	58 07       	cp.w	r7,0
80005194:	f9 b9 01 00 	movne	r9,0
80005198:	fb f8 10 00 	ld.wne	r8,sp[0x0]
8000519c:	f1 f9 1e 00 	st.bne	r8[0x0],r9
800051a0:	2e 9d       	sub	sp,-92
800051a2:	d8 22       	popm	r4-r7,pc

800051a4 <__sclose>:
800051a4:	d4 01       	pushm	lr
800051a6:	96 7b       	ld.sh	r11,r11[0xe]
800051a8:	e0 a0 12 68 	rcall	80007678 <_close_r>
800051ac:	d8 02       	popm	pc
800051ae:	d7 03       	nop

800051b0 <__sseek>:
800051b0:	d4 21       	pushm	r4-r7,lr
800051b2:	16 97       	mov	r7,r11
800051b4:	96 7b       	ld.sh	r11,r11[0xe]
800051b6:	e0 a0 1a 47 	rcall	80008644 <_lseek_r>
800051ba:	8e 68       	ld.sh	r8,r7[0xc]
800051bc:	10 99       	mov	r9,r8
800051be:	ad c9       	cbr	r9,0xc
800051c0:	5b fc       	cp.w	r12,-1
800051c2:	ef f9 0c 06 	st.heq	r7[0xc],r9
800051c6:	ef fc 1a 15 	st.wne	r7[0x54],r12
800051ca:	e0 69 10 00 	mov	r9,4096
800051ce:	f1 d9 e1 38 	orne	r8,r8,r9
800051d2:	ef f8 1c 06 	st.hne	r7[0xc],r8
800051d6:	d8 22       	popm	r4-r7,pc

800051d8 <__swrite>:
800051d8:	d4 21       	pushm	r4-r7,lr
800051da:	96 68       	ld.sh	r8,r11[0xc]
800051dc:	16 97       	mov	r7,r11
800051de:	14 95       	mov	r5,r10
800051e0:	12 94       	mov	r4,r9
800051e2:	e2 18 01 00 	andl	r8,0x100,COH
800051e6:	18 96       	mov	r6,r12
800051e8:	c0 60       	breq	800051f4 <__swrite+0x1c>
800051ea:	30 29       	mov	r9,2
800051ec:	30 0a       	mov	r10,0
800051ee:	96 7b       	ld.sh	r11,r11[0xe]
800051f0:	e0 a0 1a 2a 	rcall	80008644 <_lseek_r>
800051f4:	8e 68       	ld.sh	r8,r7[0xc]
800051f6:	ad c8       	cbr	r8,0xc
800051f8:	08 99       	mov	r9,r4
800051fa:	0a 9a       	mov	r10,r5
800051fc:	8e 7b       	ld.sh	r11,r7[0xe]
800051fe:	0c 9c       	mov	r12,r6
80005200:	ae 68       	st.h	r7[0xc],r8
80005202:	e0 a0 11 b9 	rcall	80007574 <_write_r>
80005206:	d8 22       	popm	r4-r7,pc

80005208 <__sread>:
80005208:	d4 21       	pushm	r4-r7,lr
8000520a:	16 97       	mov	r7,r11
8000520c:	96 7b       	ld.sh	r11,r11[0xe]
8000520e:	e0 a0 1d 4b 	rcall	80008ca4 <_read_r>
80005212:	c0 65       	brlt	8000521e <__sread+0x16>
80005214:	6f 58       	ld.w	r8,r7[0x54]
80005216:	18 08       	add	r8,r12
80005218:	ef 48 00 54 	st.w	r7[84],r8
8000521c:	d8 22       	popm	r4-r7,pc
8000521e:	8e 68       	ld.sh	r8,r7[0xc]
80005220:	ad c8       	cbr	r8,0xc
80005222:	ae 68       	st.h	r7[0xc],r8
80005224:	d8 22       	popm	r4-r7,pc
80005226:	d7 03       	nop

80005228 <strcpy>:
80005228:	30 08       	mov	r8,0
8000522a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000522e:	f8 08 0b 09 	st.b	r12[r8],r9
80005232:	2f f8       	sub	r8,-1
80005234:	58 09       	cp.w	r9,0
80005236:	cf a1       	brne	8000522a <strcpy+0x2>
80005238:	5e fc       	retal	r12
8000523a:	d7 03       	nop

8000523c <_close>:
8000523c:	30 28       	mov	r8,2
8000523e:	d6 73       	breakpoint
80005240:	3f fc       	mov	r12,-1
80005242:	35 8b       	mov	r11,88
80005244:	58 0c       	cp.w	r12,0
80005246:	5e 4c       	retge	r12
80005248:	e0 6a 19 f4 	mov	r10,6644
8000524c:	95 0b       	st.w	r10[0x0],r11
8000524e:	5e fc       	retal	r12

80005250 <_lseek>:
80005250:	30 58       	mov	r8,5
80005252:	d6 73       	breakpoint
80005254:	3f fc       	mov	r12,-1
80005256:	35 8b       	mov	r11,88
80005258:	58 0c       	cp.w	r12,0
8000525a:	5e 4c       	retge	r12
8000525c:	e0 6a 19 f4 	mov	r10,6644
80005260:	95 0b       	st.w	r10[0x0],r11
80005262:	5e fc       	retal	r12

80005264 <_read>:
80005264:	30 38       	mov	r8,3
80005266:	d6 73       	breakpoint
80005268:	3f fc       	mov	r12,-1
8000526a:	35 8b       	mov	r11,88
8000526c:	58 0c       	cp.w	r12,0
8000526e:	5e 4c       	retge	r12
80005270:	e0 6a 19 f4 	mov	r10,6644
80005274:	95 0b       	st.w	r10[0x0],r11
80005276:	5e fc       	retal	r12

80005278 <_write>:
80005278:	30 48       	mov	r8,4
8000527a:	d6 73       	breakpoint
8000527c:	3f fc       	mov	r12,-1
8000527e:	35 8b       	mov	r11,88
80005280:	58 0c       	cp.w	r12,0
80005282:	5e 4c       	retge	r12
80005284:	e0 6a 19 f4 	mov	r10,6644
80005288:	95 0b       	st.w	r10[0x0],r11
8000528a:	5e fc       	retal	r12

8000528c <isatty>:
8000528c:	30 b8       	mov	r8,11
8000528e:	d6 73       	breakpoint
80005290:	3f fc       	mov	r12,-1
80005292:	35 8b       	mov	r11,88
80005294:	58 0c       	cp.w	r12,0
80005296:	5e 4c       	retge	r12
80005298:	e0 6a 19 f4 	mov	r10,6644
8000529c:	95 0b       	st.w	r10[0x0],r11
8000529e:	5e fc       	retal	r12

800052a0 <_fstat_host>:
800052a0:	30 98       	mov	r8,9
800052a2:	d6 73       	breakpoint
800052a4:	3f fc       	mov	r12,-1
800052a6:	35 8b       	mov	r11,88
800052a8:	58 0c       	cp.w	r12,0
800052aa:	5e 4c       	retge	r12
800052ac:	e0 6a 19 f4 	mov	r10,6644
800052b0:	95 0b       	st.w	r10[0x0],r11
800052b2:	5e fc       	retal	r12

800052b4 <_fstat>:
800052b4:	d4 21       	pushm	r4-r7,lr
800052b6:	21 0d       	sub	sp,64
800052b8:	16 97       	mov	r7,r11
800052ba:	1a 9b       	mov	r11,sp
800052bc:	cf 2f       	rcall	800052a0 <_fstat_host>
800052be:	c0 34       	brge	800052c4 <_fstat+0x10>
800052c0:	3f fc       	mov	r12,-1
800052c2:	c1 c8       	rjmp	800052fa <_fstat+0x46>
800052c4:	40 08       	lddsp	r8,sp[0x0]
800052c6:	ae 08       	st.h	r7[0x0],r8
800052c8:	40 18       	lddsp	r8,sp[0x4]
800052ca:	ae 18       	st.h	r7[0x2],r8
800052cc:	40 28       	lddsp	r8,sp[0x8]
800052ce:	8f 18       	st.w	r7[0x4],r8
800052d0:	40 38       	lddsp	r8,sp[0xc]
800052d2:	ae 48       	st.h	r7[0x8],r8
800052d4:	40 48       	lddsp	r8,sp[0x10]
800052d6:	ae 58       	st.h	r7[0xa],r8
800052d8:	40 58       	lddsp	r8,sp[0x14]
800052da:	ae 68       	st.h	r7[0xc],r8
800052dc:	40 68       	lddsp	r8,sp[0x18]
800052de:	ae 78       	st.h	r7[0xe],r8
800052e0:	40 88       	lddsp	r8,sp[0x20]
800052e2:	8f 48       	st.w	r7[0x10],r8
800052e4:	40 a8       	lddsp	r8,sp[0x28]
800052e6:	8f b8       	st.w	r7[0x2c],r8
800052e8:	40 c8       	lddsp	r8,sp[0x30]
800052ea:	8f c8       	st.w	r7[0x30],r8
800052ec:	40 d8       	lddsp	r8,sp[0x34]
800052ee:	8f 58       	st.w	r7[0x14],r8
800052f0:	40 e8       	lddsp	r8,sp[0x38]
800052f2:	30 0c       	mov	r12,0
800052f4:	8f 78       	st.w	r7[0x1c],r8
800052f6:	40 f8       	lddsp	r8,sp[0x3c]
800052f8:	8f 98       	st.w	r7[0x24],r8
800052fa:	2f 0d       	sub	sp,-64
800052fc:	d8 22       	popm	r4-r7,pc
800052fe:	d7 03       	nop

80005300 <_sbrk>:
80005300:	d4 01       	pushm	lr
80005302:	e0 68 19 bc 	mov	r8,6588
80005306:	70 09       	ld.w	r9,r8[0x0]
80005308:	58 09       	cp.w	r9,0
8000530a:	c0 41       	brne	80005312 <_sbrk+0x12>
8000530c:	e0 69 19 f8 	mov	r9,6648
80005310:	91 09       	st.w	r8[0x0],r9
80005312:	e0 69 19 bc 	mov	r9,6588
80005316:	e0 6a f0 00 	mov	r10,61440
8000531a:	72 08       	ld.w	r8,r9[0x0]
8000531c:	f0 0c 00 0c 	add	r12,r8,r12
80005320:	14 3c       	cp.w	r12,r10
80005322:	e0 8b 00 04 	brhi	8000532a <_sbrk+0x2a>
80005326:	93 0c       	st.w	r9[0x0],r12
80005328:	c0 68       	rjmp	80005334 <_sbrk+0x34>
8000532a:	e0 a0 18 35 	rcall	80008394 <__errno>
8000532e:	30 c8       	mov	r8,12
80005330:	99 08       	st.w	r12[0x0],r8
80005332:	3f f8       	mov	r8,-1
80005334:	10 9c       	mov	r12,r8
80005336:	d8 02       	popm	pc

80005338 <get_arg>:
80005338:	d4 31       	pushm	r0-r7,lr
8000533a:	20 8d       	sub	sp,32
8000533c:	fa c4 ff bc 	sub	r4,sp,-68
80005340:	50 4b       	stdsp	sp[0x10],r11
80005342:	68 2e       	ld.w	lr,r4[0x8]
80005344:	50 58       	stdsp	sp[0x14],r8
80005346:	12 96       	mov	r6,r9
80005348:	7c 0b       	ld.w	r11,lr[0x0]
8000534a:	70 05       	ld.w	r5,r8[0x0]
8000534c:	50 6e       	stdsp	sp[0x18],lr
8000534e:	58 0b       	cp.w	r11,0
80005350:	f4 0b 17 00 	moveq	r11,r10
80005354:	68 03       	ld.w	r3,r4[0x0]
80005356:	68 11       	ld.w	r1,r4[0x4]
80005358:	40 49       	lddsp	r9,sp[0x10]
8000535a:	30 08       	mov	r8,0
8000535c:	c2 89       	rjmp	800055ac <get_arg+0x274>
8000535e:	2f fb       	sub	r11,-1
80005360:	32 5c       	mov	r12,37
80005362:	17 8a       	ld.ub	r10,r11[0x0]
80005364:	f8 0a 18 00 	cp.b	r10,r12
80005368:	5f 1e       	srne	lr
8000536a:	f0 0a 18 00 	cp.b	r10,r8
8000536e:	5f 1c       	srne	r12
80005370:	fd ec 00 0c 	and	r12,lr,r12
80005374:	f0 0c 18 00 	cp.b	r12,r8
80005378:	cf 31       	brne	8000535e <get_arg+0x26>
8000537a:	58 0a       	cp.w	r10,0
8000537c:	e0 80 01 25 	breq	800055c6 <get_arg+0x28e>
80005380:	30 0c       	mov	r12,0
80005382:	3f fa       	mov	r10,-1
80005384:	18 90       	mov	r0,r12
80005386:	50 3a       	stdsp	sp[0xc],r10
80005388:	18 94       	mov	r4,r12
8000538a:	18 92       	mov	r2,r12
8000538c:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80005390:	16 97       	mov	r7,r11
80005392:	50 7c       	stdsp	sp[0x1c],r12
80005394:	fe cc a6 84 	sub	r12,pc,-22908
80005398:	0f 3a       	ld.ub	r10,r7++
8000539a:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000539e:	40 7c       	lddsp	r12,sp[0x1c]
800053a0:	1c 0c       	add	r12,lr
800053a2:	fe ce a7 5a 	sub	lr,pc,-22694
800053a6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800053aa:	20 1e       	sub	lr,1
800053ac:	50 0e       	stdsp	sp[0x0],lr
800053ae:	fe ce a7 d2 	sub	lr,pc,-22574
800053b2:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800053b6:	50 7c       	stdsp	sp[0x1c],r12
800053b8:	40 0c       	lddsp	r12,sp[0x0]
800053ba:	58 7c       	cp.w	r12,7
800053bc:	e0 8b 00 f1 	brhi	8000559e <get_arg+0x266>
800053c0:	fe ce a9 84 	sub	lr,pc,-22140
800053c4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800053c8:	36 8b       	mov	r11,104
800053ca:	f6 0a 18 00 	cp.b	r10,r11
800053ce:	e0 80 00 e8 	breq	8000559e <get_arg+0x266>
800053d2:	37 1b       	mov	r11,113
800053d4:	f6 0a 18 00 	cp.b	r10,r11
800053d8:	c0 70       	breq	800053e6 <get_arg+0xae>
800053da:	34 cb       	mov	r11,76
800053dc:	f6 0a 18 00 	cp.b	r10,r11
800053e0:	c0 51       	brne	800053ea <get_arg+0xb2>
800053e2:	a3 b4       	sbr	r4,0x3
800053e4:	cd d8       	rjmp	8000559e <get_arg+0x266>
800053e6:	a5 b4       	sbr	r4,0x5
800053e8:	cd b8       	rjmp	8000559e <get_arg+0x266>
800053ea:	0f 8b       	ld.ub	r11,r7[0x0]
800053ec:	36 ca       	mov	r10,108
800053ee:	f4 0b 18 00 	cp.b	r11,r10
800053f2:	c0 51       	brne	800053fc <get_arg+0xc4>
800053f4:	a5 b4       	sbr	r4,0x5
800053f6:	ee cb ff ff 	sub	r11,r7,-1
800053fa:	cd 38       	rjmp	800055a0 <get_arg+0x268>
800053fc:	a5 a4       	sbr	r4,0x4
800053fe:	cd 08       	rjmp	8000559e <get_arg+0x266>
80005400:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80005404:	36 7c       	mov	r12,103
80005406:	f8 0a 18 00 	cp.b	r10,r12
8000540a:	e0 8b 00 27 	brhi	80005458 <get_arg+0x120>
8000540e:	36 5b       	mov	r11,101
80005410:	f6 0a 18 00 	cp.b	r10,r11
80005414:	c4 82       	brcc	800054a4 <get_arg+0x16c>
80005416:	34 fb       	mov	r11,79
80005418:	f6 0a 18 00 	cp.b	r10,r11
8000541c:	c4 80       	breq	800054ac <get_arg+0x174>
8000541e:	e0 8b 00 0c 	brhi	80005436 <get_arg+0xfe>
80005422:	34 5b       	mov	r11,69
80005424:	f6 0a 18 00 	cp.b	r10,r11
80005428:	c3 e0       	breq	800054a4 <get_arg+0x16c>
8000542a:	34 7b       	mov	r11,71
8000542c:	f6 0a 18 00 	cp.b	r10,r11
80005430:	c3 a0       	breq	800054a4 <get_arg+0x16c>
80005432:	34 4b       	mov	r11,68
80005434:	c0 88       	rjmp	80005444 <get_arg+0x10c>
80005436:	35 8b       	mov	r11,88
80005438:	f6 0a 18 00 	cp.b	r10,r11
8000543c:	c2 c0       	breq	80005494 <get_arg+0x15c>
8000543e:	e0 8b 00 07 	brhi	8000544c <get_arg+0x114>
80005442:	35 5b       	mov	r11,85
80005444:	f6 0a 18 00 	cp.b	r10,r11
80005448:	c3 51       	brne	800054b2 <get_arg+0x17a>
8000544a:	c3 18       	rjmp	800054ac <get_arg+0x174>
8000544c:	36 3b       	mov	r11,99
8000544e:	f6 0a 18 00 	cp.b	r10,r11
80005452:	c2 f0       	breq	800054b0 <get_arg+0x178>
80005454:	36 4b       	mov	r11,100
80005456:	c0 e8       	rjmp	80005472 <get_arg+0x13a>
80005458:	37 0b       	mov	r11,112
8000545a:	f6 0a 18 00 	cp.b	r10,r11
8000545e:	c2 50       	breq	800054a8 <get_arg+0x170>
80005460:	e0 8b 00 0d 	brhi	8000547a <get_arg+0x142>
80005464:	36 eb       	mov	r11,110
80005466:	f6 0a 18 00 	cp.b	r10,r11
8000546a:	c1 f0       	breq	800054a8 <get_arg+0x170>
8000546c:	e0 8b 00 14 	brhi	80005494 <get_arg+0x15c>
80005470:	36 9b       	mov	r11,105
80005472:	f6 0a 18 00 	cp.b	r10,r11
80005476:	c1 e1       	brne	800054b2 <get_arg+0x17a>
80005478:	c0 e8       	rjmp	80005494 <get_arg+0x15c>
8000547a:	37 5b       	mov	r11,117
8000547c:	f6 0a 18 00 	cp.b	r10,r11
80005480:	c0 a0       	breq	80005494 <get_arg+0x15c>
80005482:	37 8b       	mov	r11,120
80005484:	f6 0a 18 00 	cp.b	r10,r11
80005488:	c0 60       	breq	80005494 <get_arg+0x15c>
8000548a:	37 3b       	mov	r11,115
8000548c:	f6 0a 18 00 	cp.b	r10,r11
80005490:	c1 11       	brne	800054b2 <get_arg+0x17a>
80005492:	c0 b8       	rjmp	800054a8 <get_arg+0x170>
80005494:	ed b4 00 04 	bld	r4,0x4
80005498:	c0 a0       	breq	800054ac <get_arg+0x174>
8000549a:	ed b4 00 05 	bld	r4,0x5
8000549e:	c0 91       	brne	800054b0 <get_arg+0x178>
800054a0:	30 20       	mov	r0,2
800054a2:	c0 88       	rjmp	800054b2 <get_arg+0x17a>
800054a4:	30 40       	mov	r0,4
800054a6:	c0 68       	rjmp	800054b2 <get_arg+0x17a>
800054a8:	30 30       	mov	r0,3
800054aa:	c0 48       	rjmp	800054b2 <get_arg+0x17a>
800054ac:	30 10       	mov	r0,1
800054ae:	c0 28       	rjmp	800054b2 <get_arg+0x17a>
800054b0:	30 00       	mov	r0,0
800054b2:	40 3b       	lddsp	r11,sp[0xc]
800054b4:	5b fb       	cp.w	r11,-1
800054b6:	c0 40       	breq	800054be <get_arg+0x186>
800054b8:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800054bc:	c7 18       	rjmp	8000559e <get_arg+0x266>
800054be:	58 60       	cp.w	r0,6
800054c0:	e0 8b 00 6f 	brhi	8000559e <get_arg+0x266>
800054c4:	6c 0a       	ld.w	r10,r6[0x0]
800054c6:	ea cc ff ff 	sub	r12,r5,-1
800054ca:	fe ce aa 6e 	sub	lr,pc,-21906
800054ce:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800054d2:	d7 03       	nop
800054d4:	f4 cb ff f8 	sub	r11,r10,-8
800054d8:	8d 0b       	st.w	r6[0x0],r11
800054da:	f4 ea 00 00 	ld.d	r10,r10[0]
800054de:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800054e2:	c0 f8       	rjmp	80005500 <get_arg+0x1c8>
800054e4:	f4 cb ff fc 	sub	r11,r10,-4
800054e8:	8d 0b       	st.w	r6[0x0],r11
800054ea:	74 0a       	ld.w	r10,r10[0x0]
800054ec:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800054f0:	c0 88       	rjmp	80005500 <get_arg+0x1c8>
800054f2:	f4 cb ff f8 	sub	r11,r10,-8
800054f6:	8d 0b       	st.w	r6[0x0],r11
800054f8:	f4 ea 00 00 	ld.d	r10,r10[0]
800054fc:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005500:	0e 9b       	mov	r11,r7
80005502:	18 95       	mov	r5,r12
80005504:	c4 e8       	rjmp	800055a0 <get_arg+0x268>
80005506:	62 0a       	ld.w	r10,r1[0x0]
80005508:	5b fa       	cp.w	r10,-1
8000550a:	c0 b1       	brne	80005520 <get_arg+0x1e8>
8000550c:	50 19       	stdsp	sp[0x4],r9
8000550e:	50 28       	stdsp	sp[0x8],r8
80005510:	e0 6a 00 80 	mov	r10,128
80005514:	30 0b       	mov	r11,0
80005516:	02 9c       	mov	r12,r1
80005518:	fe b0 fd fa 	rcall	8000510c <memset>
8000551c:	40 28       	lddsp	r8,sp[0x8]
8000551e:	40 19       	lddsp	r9,sp[0x4]
80005520:	e4 cc 00 01 	sub	r12,r2,1
80005524:	0e 9b       	mov	r11,r7
80005526:	50 3c       	stdsp	sp[0xc],r12
80005528:	f2 0c 0c 49 	max	r9,r9,r12
8000552c:	c3 a8       	rjmp	800055a0 <get_arg+0x268>
8000552e:	62 0a       	ld.w	r10,r1[0x0]
80005530:	5b fa       	cp.w	r10,-1
80005532:	c0 b1       	brne	80005548 <get_arg+0x210>
80005534:	50 19       	stdsp	sp[0x4],r9
80005536:	50 28       	stdsp	sp[0x8],r8
80005538:	e0 6a 00 80 	mov	r10,128
8000553c:	30 0b       	mov	r11,0
8000553e:	02 9c       	mov	r12,r1
80005540:	fe b0 fd e6 	rcall	8000510c <memset>
80005544:	40 28       	lddsp	r8,sp[0x8]
80005546:	40 19       	lddsp	r9,sp[0x4]
80005548:	20 12       	sub	r2,1
8000554a:	30 0a       	mov	r10,0
8000554c:	0e 9b       	mov	r11,r7
8000554e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80005552:	f2 02 0c 49 	max	r9,r9,r2
80005556:	c2 58       	rjmp	800055a0 <get_arg+0x268>
80005558:	16 97       	mov	r7,r11
8000555a:	6c 0a       	ld.w	r10,r6[0x0]
8000555c:	f4 cb ff fc 	sub	r11,r10,-4
80005560:	8d 0b       	st.w	r6[0x0],r11
80005562:	74 0a       	ld.w	r10,r10[0x0]
80005564:	0e 9b       	mov	r11,r7
80005566:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000556a:	2f f5       	sub	r5,-1
8000556c:	c1 a8       	rjmp	800055a0 <get_arg+0x268>
8000556e:	f4 c2 00 30 	sub	r2,r10,48
80005572:	c0 68       	rjmp	8000557e <get_arg+0x246>
80005574:	e4 02 00 22 	add	r2,r2,r2<<0x2
80005578:	2f f7       	sub	r7,-1
8000557a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000557e:	0f 8a       	ld.ub	r10,r7[0x0]
80005580:	58 0a       	cp.w	r10,0
80005582:	c0 e0       	breq	8000559e <get_arg+0x266>
80005584:	23 0a       	sub	r10,48
80005586:	58 9a       	cp.w	r10,9
80005588:	fe 98 ff f6 	brls	80005574 <get_arg+0x23c>
8000558c:	c0 98       	rjmp	8000559e <get_arg+0x266>
8000558e:	2f f7       	sub	r7,-1
80005590:	0f 8a       	ld.ub	r10,r7[0x0]
80005592:	58 0a       	cp.w	r10,0
80005594:	c0 50       	breq	8000559e <get_arg+0x266>
80005596:	23 0a       	sub	r10,48
80005598:	58 9a       	cp.w	r10,9
8000559a:	fe 98 ff fa 	brls	8000558e <get_arg+0x256>
8000559e:	0e 9b       	mov	r11,r7
800055a0:	40 7c       	lddsp	r12,sp[0x1c]
800055a2:	30 ba       	mov	r10,11
800055a4:	f4 0c 18 00 	cp.b	r12,r10
800055a8:	fe 91 fe f2 	brne	8000538c <get_arg+0x54>
800055ac:	40 42       	lddsp	r2,sp[0x10]
800055ae:	17 8c       	ld.ub	r12,r11[0x0]
800055b0:	0a 32       	cp.w	r2,r5
800055b2:	5f 4a       	srge	r10
800055b4:	f0 0c 18 00 	cp.b	r12,r8
800055b8:	5f 1c       	srne	r12
800055ba:	f9 ea 00 0a 	and	r10,r12,r10
800055be:	f0 0a 18 00 	cp.b	r10,r8
800055c2:	fe 91 fe cf 	brne	80005360 <get_arg+0x28>
800055c6:	30 08       	mov	r8,0
800055c8:	40 4e       	lddsp	lr,sp[0x10]
800055ca:	17 8a       	ld.ub	r10,r11[0x0]
800055cc:	e2 05 00 21 	add	r1,r1,r5<<0x2
800055d0:	f0 0a 18 00 	cp.b	r10,r8
800055d4:	fc 09 17 10 	movne	r9,lr
800055d8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800055dc:	06 9e       	mov	lr,r3
800055de:	c2 a8       	rjmp	80005632 <get_arg+0x2fa>
800055e0:	62 0a       	ld.w	r10,r1[0x0]
800055e2:	58 3a       	cp.w	r10,3
800055e4:	c1 e0       	breq	80005620 <get_arg+0x2e8>
800055e6:	e0 89 00 07 	brgt	800055f4 <get_arg+0x2bc>
800055ea:	58 1a       	cp.w	r10,1
800055ec:	c1 a0       	breq	80005620 <get_arg+0x2e8>
800055ee:	58 2a       	cp.w	r10,2
800055f0:	c1 81       	brne	80005620 <get_arg+0x2e8>
800055f2:	c0 58       	rjmp	800055fc <get_arg+0x2c4>
800055f4:	58 5a       	cp.w	r10,5
800055f6:	c0 c0       	breq	8000560e <get_arg+0x2d6>
800055f8:	c0 b5       	brlt	8000560e <get_arg+0x2d6>
800055fa:	c1 38       	rjmp	80005620 <get_arg+0x2e8>
800055fc:	6c 0a       	ld.w	r10,r6[0x0]
800055fe:	f4 cc ff f8 	sub	r12,r10,-8
80005602:	8d 0c       	st.w	r6[0x0],r12
80005604:	f4 e2 00 00 	ld.d	r2,r10[0]
80005608:	f0 e3 00 00 	st.d	r8[0],r2
8000560c:	c1 08       	rjmp	8000562c <get_arg+0x2f4>
8000560e:	6c 0a       	ld.w	r10,r6[0x0]
80005610:	f4 cc ff f8 	sub	r12,r10,-8
80005614:	8d 0c       	st.w	r6[0x0],r12
80005616:	f4 e2 00 00 	ld.d	r2,r10[0]
8000561a:	f0 e3 00 00 	st.d	r8[0],r2
8000561e:	c0 78       	rjmp	8000562c <get_arg+0x2f4>
80005620:	6c 0a       	ld.w	r10,r6[0x0]
80005622:	f4 cc ff fc 	sub	r12,r10,-4
80005626:	8d 0c       	st.w	r6[0x0],r12
80005628:	74 0a       	ld.w	r10,r10[0x0]
8000562a:	91 0a       	st.w	r8[0x0],r10
8000562c:	2f f5       	sub	r5,-1
8000562e:	2f 88       	sub	r8,-8
80005630:	2f c1       	sub	r1,-4
80005632:	12 35       	cp.w	r5,r9
80005634:	fe 9a ff d6 	brle	800055e0 <get_arg+0x2a8>
80005638:	1c 93       	mov	r3,lr
8000563a:	40 52       	lddsp	r2,sp[0x14]
8000563c:	40 6e       	lddsp	lr,sp[0x18]
8000563e:	85 05       	st.w	r2[0x0],r5
80005640:	9d 0b       	st.w	lr[0x0],r11
80005642:	40 4b       	lddsp	r11,sp[0x10]
80005644:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80005648:	2f 8d       	sub	sp,-32
8000564a:	d8 32       	popm	r0-r7,pc

8000564c <__sprint_r>:
8000564c:	d4 21       	pushm	r4-r7,lr
8000564e:	14 97       	mov	r7,r10
80005650:	74 28       	ld.w	r8,r10[0x8]
80005652:	58 08       	cp.w	r8,0
80005654:	c0 41       	brne	8000565c <__sprint_r+0x10>
80005656:	95 18       	st.w	r10[0x4],r8
80005658:	10 9c       	mov	r12,r8
8000565a:	d8 22       	popm	r4-r7,pc
8000565c:	e0 a0 16 a2 	rcall	800083a0 <__sfvwrite_r>
80005660:	30 08       	mov	r8,0
80005662:	8f 18       	st.w	r7[0x4],r8
80005664:	8f 28       	st.w	r7[0x8],r8
80005666:	d8 22       	popm	r4-r7,pc

80005668 <_vfprintf_r>:
80005668:	d4 31       	pushm	r0-r7,lr
8000566a:	fa cd 06 bc 	sub	sp,sp,1724
8000566e:	51 09       	stdsp	sp[0x40],r9
80005670:	16 91       	mov	r1,r11
80005672:	14 97       	mov	r7,r10
80005674:	18 95       	mov	r5,r12
80005676:	e0 a0 17 e3 	rcall	8000863c <_localeconv_r>
8000567a:	78 0c       	ld.w	r12,r12[0x0]
8000567c:	50 cc       	stdsp	sp[0x30],r12
8000567e:	58 05       	cp.w	r5,0
80005680:	c0 70       	breq	8000568e <_vfprintf_r+0x26>
80005682:	6a 68       	ld.w	r8,r5[0x18]
80005684:	58 08       	cp.w	r8,0
80005686:	c0 41       	brne	8000568e <_vfprintf_r+0x26>
80005688:	0a 9c       	mov	r12,r5
8000568a:	fe b0 f8 8d 	rcall	800047a4 <__sinit>
8000568e:	fe c8 ac ba 	sub	r8,pc,-21318
80005692:	10 31       	cp.w	r1,r8
80005694:	c0 31       	brne	8000569a <_vfprintf_r+0x32>
80005696:	6a 01       	ld.w	r1,r5[0x0]
80005698:	c0 c8       	rjmp	800056b0 <_vfprintf_r+0x48>
8000569a:	fe c8 ac a6 	sub	r8,pc,-21338
8000569e:	10 31       	cp.w	r1,r8
800056a0:	c0 31       	brne	800056a6 <_vfprintf_r+0x3e>
800056a2:	6a 11       	ld.w	r1,r5[0x4]
800056a4:	c0 68       	rjmp	800056b0 <_vfprintf_r+0x48>
800056a6:	fe c8 ac 92 	sub	r8,pc,-21358
800056aa:	10 31       	cp.w	r1,r8
800056ac:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800056b0:	82 68       	ld.sh	r8,r1[0xc]
800056b2:	ed b8 00 03 	bld	r8,0x3
800056b6:	c0 41       	brne	800056be <_vfprintf_r+0x56>
800056b8:	62 48       	ld.w	r8,r1[0x10]
800056ba:	58 08       	cp.w	r8,0
800056bc:	c0 71       	brne	800056ca <_vfprintf_r+0x62>
800056be:	02 9b       	mov	r11,r1
800056c0:	0a 9c       	mov	r12,r5
800056c2:	e0 a0 0f 6d 	rcall	8000759c <__swsetup_r>
800056c6:	e0 81 0f 51 	brne	80007568 <_vfprintf_r+0x1f00>
800056ca:	82 68       	ld.sh	r8,r1[0xc]
800056cc:	10 99       	mov	r9,r8
800056ce:	e2 19 00 1a 	andl	r9,0x1a,COH
800056d2:	58 a9       	cp.w	r9,10
800056d4:	c3 c1       	brne	8000574c <_vfprintf_r+0xe4>
800056d6:	82 79       	ld.sh	r9,r1[0xe]
800056d8:	30 0a       	mov	r10,0
800056da:	f4 09 19 00 	cp.h	r9,r10
800056de:	c3 75       	brlt	8000574c <_vfprintf_r+0xe4>
800056e0:	a1 d8       	cbr	r8,0x1
800056e2:	fb 58 05 d0 	st.h	sp[1488],r8
800056e6:	62 88       	ld.w	r8,r1[0x20]
800056e8:	fb 48 05 e4 	st.w	sp[1508],r8
800056ec:	62 a8       	ld.w	r8,r1[0x28]
800056ee:	fb 48 05 ec 	st.w	sp[1516],r8
800056f2:	fa c8 ff bc 	sub	r8,sp,-68
800056f6:	fb 48 05 d4 	st.w	sp[1492],r8
800056fa:	fb 48 05 c4 	st.w	sp[1476],r8
800056fe:	e0 68 04 00 	mov	r8,1024
80005702:	fb 48 05 d8 	st.w	sp[1496],r8
80005706:	fb 48 05 cc 	st.w	sp[1484],r8
8000570a:	30 08       	mov	r8,0
8000570c:	fb 59 05 d2 	st.h	sp[1490],r9
80005710:	0e 9a       	mov	r10,r7
80005712:	41 09       	lddsp	r9,sp[0x40]
80005714:	fa c7 fa 3c 	sub	r7,sp,-1476
80005718:	fb 48 05 dc 	st.w	sp[1500],r8
8000571c:	0a 9c       	mov	r12,r5
8000571e:	0e 9b       	mov	r11,r7
80005720:	ca 4f       	rcall	80005668 <_vfprintf_r>
80005722:	50 bc       	stdsp	sp[0x2c],r12
80005724:	c0 95       	brlt	80005736 <_vfprintf_r+0xce>
80005726:	0e 9b       	mov	r11,r7
80005728:	0a 9c       	mov	r12,r5
8000572a:	fe b0 f7 65 	rcall	800045f4 <_fflush_r>
8000572e:	40 be       	lddsp	lr,sp[0x2c]
80005730:	f9 be 01 ff 	movne	lr,-1
80005734:	50 be       	stdsp	sp[0x2c],lr
80005736:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000573a:	ed b8 00 06 	bld	r8,0x6
8000573e:	e0 81 0f 17 	brne	8000756c <_vfprintf_r+0x1f04>
80005742:	82 68       	ld.sh	r8,r1[0xc]
80005744:	a7 a8       	sbr	r8,0x6
80005746:	a2 68       	st.h	r1[0xc],r8
80005748:	e0 8f 0f 12 	bral	8000756c <_vfprintf_r+0x1f04>
8000574c:	30 08       	mov	r8,0
8000574e:	fb 48 06 b4 	st.w	sp[1716],r8
80005752:	fb 48 06 90 	st.w	sp[1680],r8
80005756:	fb 48 06 8c 	st.w	sp[1676],r8
8000575a:	fb 48 06 b0 	st.w	sp[1712],r8
8000575e:	30 08       	mov	r8,0
80005760:	30 09       	mov	r9,0
80005762:	50 a7       	stdsp	sp[0x28],r7
80005764:	50 78       	stdsp	sp[0x1c],r8
80005766:	fa c4 f9 e0 	sub	r4,sp,-1568
8000576a:	3f f8       	mov	r8,-1
8000576c:	50 59       	stdsp	sp[0x14],r9
8000576e:	fb 44 06 88 	st.w	sp[1672],r4
80005772:	fb 48 05 44 	st.w	sp[1348],r8
80005776:	12 9c       	mov	r12,r9
80005778:	50 69       	stdsp	sp[0x18],r9
8000577a:	50 d9       	stdsp	sp[0x34],r9
8000577c:	50 e9       	stdsp	sp[0x38],r9
8000577e:	50 b9       	stdsp	sp[0x2c],r9
80005780:	12 97       	mov	r7,r9
80005782:	40 a2       	lddsp	r2,sp[0x28]
80005784:	32 5a       	mov	r10,37
80005786:	30 08       	mov	r8,0
80005788:	c0 28       	rjmp	8000578c <_vfprintf_r+0x124>
8000578a:	2f f2       	sub	r2,-1
8000578c:	05 89       	ld.ub	r9,r2[0x0]
8000578e:	f0 09 18 00 	cp.b	r9,r8
80005792:	5f 1b       	srne	r11
80005794:	f4 09 18 00 	cp.b	r9,r10
80005798:	5f 19       	srne	r9
8000579a:	f3 eb 00 0b 	and	r11,r9,r11
8000579e:	f0 0b 18 00 	cp.b	r11,r8
800057a2:	cf 41       	brne	8000578a <_vfprintf_r+0x122>
800057a4:	40 ab       	lddsp	r11,sp[0x28]
800057a6:	e4 0b 01 06 	sub	r6,r2,r11
800057aa:	c1 f0       	breq	800057e8 <_vfprintf_r+0x180>
800057ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800057b0:	0c 08       	add	r8,r6
800057b2:	89 0b       	st.w	r4[0x0],r11
800057b4:	fb 48 06 90 	st.w	sp[1680],r8
800057b8:	89 16       	st.w	r4[0x4],r6
800057ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057be:	2f f8       	sub	r8,-1
800057c0:	fb 48 06 8c 	st.w	sp[1676],r8
800057c4:	58 78       	cp.w	r8,7
800057c6:	e0 89 00 05 	brgt	800057d0 <_vfprintf_r+0x168>
800057ca:	2f 84       	sub	r4,-8
800057cc:	c0 b8       	rjmp	800057e2 <_vfprintf_r+0x17a>
800057ce:	d7 03       	nop
800057d0:	fa ca f9 78 	sub	r10,sp,-1672
800057d4:	02 9b       	mov	r11,r1
800057d6:	0a 9c       	mov	r12,r5
800057d8:	c3 af       	rcall	8000564c <__sprint_r>
800057da:	e0 81 0e c3 	brne	80007560 <_vfprintf_r+0x1ef8>
800057de:	fa c4 f9 e0 	sub	r4,sp,-1568
800057e2:	40 ba       	lddsp	r10,sp[0x2c]
800057e4:	0c 0a       	add	r10,r6
800057e6:	50 ba       	stdsp	sp[0x2c],r10
800057e8:	05 89       	ld.ub	r9,r2[0x0]
800057ea:	30 08       	mov	r8,0
800057ec:	f0 09 18 00 	cp.b	r9,r8
800057f0:	e0 80 0e a8 	breq	80007540 <_vfprintf_r+0x1ed8>
800057f4:	30 09       	mov	r9,0
800057f6:	fb 68 06 bb 	st.b	sp[1723],r8
800057fa:	0e 96       	mov	r6,r7
800057fc:	e4 c8 ff ff 	sub	r8,r2,-1
80005800:	3f fe       	mov	lr,-1
80005802:	50 94       	stdsp	sp[0x24],r4
80005804:	50 41       	stdsp	sp[0x10],r1
80005806:	0e 94       	mov	r4,r7
80005808:	04 91       	mov	r1,r2
8000580a:	50 89       	stdsp	sp[0x20],r9
8000580c:	50 a8       	stdsp	sp[0x28],r8
8000580e:	50 2e       	stdsp	sp[0x8],lr
80005810:	50 39       	stdsp	sp[0xc],r9
80005812:	12 93       	mov	r3,r9
80005814:	12 90       	mov	r0,r9
80005816:	10 97       	mov	r7,r8
80005818:	0a 92       	mov	r2,r5
8000581a:	c0 78       	rjmp	80005828 <_vfprintf_r+0x1c0>
8000581c:	3f fc       	mov	r12,-1
8000581e:	0a 97       	mov	r7,r5
80005820:	50 2c       	stdsp	sp[0x8],r12
80005822:	c0 38       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005824:	30 0b       	mov	r11,0
80005826:	50 3b       	stdsp	sp[0xc],r11
80005828:	0f 38       	ld.ub	r8,r7++
8000582a:	c0 28       	rjmp	8000582e <_vfprintf_r+0x1c6>
8000582c:	12 90       	mov	r0,r9
8000582e:	f0 c9 00 20 	sub	r9,r8,32
80005832:	e0 49 00 58 	cp.w	r9,88
80005836:	e0 8b 0a 2d 	brhi	80006c90 <_vfprintf_r+0x1628>
8000583a:	fe ca ad c2 	sub	r10,pc,-21054
8000583e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80005842:	50 a7       	stdsp	sp[0x28],r7
80005844:	50 80       	stdsp	sp[0x20],r0
80005846:	0c 97       	mov	r7,r6
80005848:	04 95       	mov	r5,r2
8000584a:	08 96       	mov	r6,r4
8000584c:	02 92       	mov	r2,r1
8000584e:	fe c9 ab 9a 	sub	r9,pc,-21606
80005852:	40 94       	lddsp	r4,sp[0x24]
80005854:	10 90       	mov	r0,r8
80005856:	40 41       	lddsp	r1,sp[0x10]
80005858:	50 d9       	stdsp	sp[0x34],r9
8000585a:	e0 8f 08 8e 	bral	80006976 <_vfprintf_r+0x130e>
8000585e:	30 08       	mov	r8,0
80005860:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80005864:	f0 09 18 00 	cp.b	r9,r8
80005868:	ce 01       	brne	80005828 <_vfprintf_r+0x1c0>
8000586a:	32 08       	mov	r8,32
8000586c:	c6 e8       	rjmp	80005948 <_vfprintf_r+0x2e0>
8000586e:	a1 a3       	sbr	r3,0x0
80005870:	cd cb       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005872:	0f 89       	ld.ub	r9,r7[0x0]
80005874:	f2 c8 00 30 	sub	r8,r9,48
80005878:	58 98       	cp.w	r8,9
8000587a:	e0 8b 00 1d 	brhi	800058b4 <_vfprintf_r+0x24c>
8000587e:	ee c8 ff ff 	sub	r8,r7,-1
80005882:	30 0b       	mov	r11,0
80005884:	23 09       	sub	r9,48
80005886:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000588a:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000588e:	11 39       	ld.ub	r9,r8++
80005890:	f2 ca 00 30 	sub	r10,r9,48
80005894:	58 9a       	cp.w	r10,9
80005896:	fe 98 ff f7 	brls	80005884 <_vfprintf_r+0x21c>
8000589a:	e0 49 00 24 	cp.w	r9,36
8000589e:	cc 31       	brne	80005824 <_vfprintf_r+0x1bc>
800058a0:	e0 4b 00 20 	cp.w	r11,32
800058a4:	e0 89 0e 5d 	brgt	8000755e <_vfprintf_r+0x1ef6>
800058a8:	20 1b       	sub	r11,1
800058aa:	fa f9 06 b4 	ld.w	r9,sp[1716]
800058ae:	12 3b       	cp.w	r11,r9
800058b0:	c0 95       	brlt	800058c2 <_vfprintf_r+0x25a>
800058b2:	c1 08       	rjmp	800058d2 <_vfprintf_r+0x26a>
800058b4:	fa f9 06 b4 	ld.w	r9,sp[1716]
800058b8:	ec ca ff ff 	sub	r10,r6,-1
800058bc:	12 36       	cp.w	r6,r9
800058be:	c1 f5       	brlt	800058fc <_vfprintf_r+0x294>
800058c0:	c2 68       	rjmp	8000590c <_vfprintf_r+0x2a4>
800058c2:	fa ce f9 44 	sub	lr,sp,-1724
800058c6:	10 97       	mov	r7,r8
800058c8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800058cc:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800058d0:	c3 58       	rjmp	8000593a <_vfprintf_r+0x2d2>
800058d2:	10 97       	mov	r7,r8
800058d4:	fa c8 f9 50 	sub	r8,sp,-1712
800058d8:	1a d8       	st.w	--sp,r8
800058da:	fa c8 fa b8 	sub	r8,sp,-1352
800058de:	1a d8       	st.w	--sp,r8
800058e0:	fa c8 fb b4 	sub	r8,sp,-1100
800058e4:	02 9a       	mov	r10,r1
800058e6:	1a d8       	st.w	--sp,r8
800058e8:	04 9c       	mov	r12,r2
800058ea:	fa c8 f9 40 	sub	r8,sp,-1728
800058ee:	fa c9 ff b4 	sub	r9,sp,-76
800058f2:	fe b0 fd 23 	rcall	80005338 <get_arg>
800058f6:	2f dd       	sub	sp,-12
800058f8:	78 00       	ld.w	r0,r12[0x0]
800058fa:	c2 08       	rjmp	8000593a <_vfprintf_r+0x2d2>
800058fc:	fa cc f9 44 	sub	r12,sp,-1724
80005900:	14 96       	mov	r6,r10
80005902:	f8 04 00 38 	add	r8,r12,r4<<0x3
80005906:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000590a:	c1 88       	rjmp	8000593a <_vfprintf_r+0x2d2>
8000590c:	41 08       	lddsp	r8,sp[0x40]
8000590e:	59 f9       	cp.w	r9,31
80005910:	e0 89 00 11 	brgt	80005932 <_vfprintf_r+0x2ca>
80005914:	f0 cb ff fc 	sub	r11,r8,-4
80005918:	51 0b       	stdsp	sp[0x40],r11
8000591a:	70 00       	ld.w	r0,r8[0x0]
8000591c:	fa cb f9 44 	sub	r11,sp,-1724
80005920:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005924:	f1 40 fd 88 	st.w	r8[-632],r0
80005928:	2f f9       	sub	r9,-1
8000592a:	14 96       	mov	r6,r10
8000592c:	fb 49 06 b4 	st.w	sp[1716],r9
80005930:	c0 58       	rjmp	8000593a <_vfprintf_r+0x2d2>
80005932:	70 00       	ld.w	r0,r8[0x0]
80005934:	14 96       	mov	r6,r10
80005936:	2f c8       	sub	r8,-4
80005938:	51 08       	stdsp	sp[0x40],r8
8000593a:	58 00       	cp.w	r0,0
8000593c:	fe 94 ff 76 	brge	80005828 <_vfprintf_r+0x1c0>
80005940:	5c 30       	neg	r0
80005942:	a3 a3       	sbr	r3,0x2
80005944:	c7 2b       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005946:	32 b8       	mov	r8,43
80005948:	fb 68 06 bb 	st.b	sp[1723],r8
8000594c:	c6 eb       	rjmp	80005828 <_vfprintf_r+0x1c0>
8000594e:	0f 38       	ld.ub	r8,r7++
80005950:	e0 48 00 2a 	cp.w	r8,42
80005954:	c0 30       	breq	8000595a <_vfprintf_r+0x2f2>
80005956:	30 09       	mov	r9,0
80005958:	c7 98       	rjmp	80005a4a <_vfprintf_r+0x3e2>
8000595a:	0f 88       	ld.ub	r8,r7[0x0]
8000595c:	f0 c9 00 30 	sub	r9,r8,48
80005960:	58 99       	cp.w	r9,9
80005962:	e0 8b 00 1f 	brhi	800059a0 <_vfprintf_r+0x338>
80005966:	ee c5 ff ff 	sub	r5,r7,-1
8000596a:	30 0b       	mov	r11,0
8000596c:	23 08       	sub	r8,48
8000596e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005972:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005976:	0b 38       	ld.ub	r8,r5++
80005978:	f0 c9 00 30 	sub	r9,r8,48
8000597c:	58 99       	cp.w	r9,9
8000597e:	fe 98 ff f7 	brls	8000596c <_vfprintf_r+0x304>
80005982:	e0 48 00 24 	cp.w	r8,36
80005986:	fe 91 ff 4f 	brne	80005824 <_vfprintf_r+0x1bc>
8000598a:	e0 4b 00 20 	cp.w	r11,32
8000598e:	e0 89 0d e8 	brgt	8000755e <_vfprintf_r+0x1ef6>
80005992:	20 1b       	sub	r11,1
80005994:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005998:	10 3b       	cp.w	r11,r8
8000599a:	c0 a5       	brlt	800059ae <_vfprintf_r+0x346>
8000599c:	c1 18       	rjmp	800059be <_vfprintf_r+0x356>
8000599e:	d7 03       	nop
800059a0:	fa fa 06 b4 	ld.w	r10,sp[1716]
800059a4:	ec c9 ff ff 	sub	r9,r6,-1
800059a8:	14 36       	cp.w	r6,r10
800059aa:	c1 f5       	brlt	800059e8 <_vfprintf_r+0x380>
800059ac:	c2 88       	rjmp	800059fc <_vfprintf_r+0x394>
800059ae:	fa ca f9 44 	sub	r10,sp,-1724
800059b2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800059b6:	f6 fb fd 88 	ld.w	r11,r11[-632]
800059ba:	50 2b       	stdsp	sp[0x8],r11
800059bc:	c3 c8       	rjmp	80005a34 <_vfprintf_r+0x3cc>
800059be:	fa c8 f9 50 	sub	r8,sp,-1712
800059c2:	1a d8       	st.w	--sp,r8
800059c4:	fa c8 fa b8 	sub	r8,sp,-1352
800059c8:	1a d8       	st.w	--sp,r8
800059ca:	fa c8 fb b4 	sub	r8,sp,-1100
800059ce:	02 9a       	mov	r10,r1
800059d0:	1a d8       	st.w	--sp,r8
800059d2:	04 9c       	mov	r12,r2
800059d4:	fa c8 f9 40 	sub	r8,sp,-1728
800059d8:	fa c9 ff b4 	sub	r9,sp,-76
800059dc:	fe b0 fc ae 	rcall	80005338 <get_arg>
800059e0:	2f dd       	sub	sp,-12
800059e2:	78 0c       	ld.w	r12,r12[0x0]
800059e4:	50 2c       	stdsp	sp[0x8],r12
800059e6:	c2 78       	rjmp	80005a34 <_vfprintf_r+0x3cc>
800059e8:	12 96       	mov	r6,r9
800059ea:	0e 95       	mov	r5,r7
800059ec:	fa c9 f9 44 	sub	r9,sp,-1724
800059f0:	f2 04 00 38 	add	r8,r9,r4<<0x3
800059f4:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800059f8:	50 28       	stdsp	sp[0x8],r8
800059fa:	c1 d8       	rjmp	80005a34 <_vfprintf_r+0x3cc>
800059fc:	41 08       	lddsp	r8,sp[0x40]
800059fe:	59 fa       	cp.w	r10,31
80005a00:	e0 89 00 14 	brgt	80005a28 <_vfprintf_r+0x3c0>
80005a04:	f0 cb ff fc 	sub	r11,r8,-4
80005a08:	70 08       	ld.w	r8,r8[0x0]
80005a0a:	51 0b       	stdsp	sp[0x40],r11
80005a0c:	50 28       	stdsp	sp[0x8],r8
80005a0e:	fa c6 f9 44 	sub	r6,sp,-1724
80005a12:	40 2e       	lddsp	lr,sp[0x8]
80005a14:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005a18:	f1 4e fd 88 	st.w	r8[-632],lr
80005a1c:	2f fa       	sub	r10,-1
80005a1e:	0e 95       	mov	r5,r7
80005a20:	fb 4a 06 b4 	st.w	sp[1716],r10
80005a24:	12 96       	mov	r6,r9
80005a26:	c0 78       	rjmp	80005a34 <_vfprintf_r+0x3cc>
80005a28:	70 0c       	ld.w	r12,r8[0x0]
80005a2a:	0e 95       	mov	r5,r7
80005a2c:	2f c8       	sub	r8,-4
80005a2e:	50 2c       	stdsp	sp[0x8],r12
80005a30:	12 96       	mov	r6,r9
80005a32:	51 08       	stdsp	sp[0x40],r8
80005a34:	40 2b       	lddsp	r11,sp[0x8]
80005a36:	58 0b       	cp.w	r11,0
80005a38:	fe 95 fe f2 	brlt	8000581c <_vfprintf_r+0x1b4>
80005a3c:	0a 97       	mov	r7,r5
80005a3e:	cf 5a       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005a40:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005a44:	0f 38       	ld.ub	r8,r7++
80005a46:	f4 09 00 19 	add	r9,r10,r9<<0x1
80005a4a:	f0 ca 00 30 	sub	r10,r8,48
80005a4e:	58 9a       	cp.w	r10,9
80005a50:	fe 98 ff f8 	brls	80005a40 <_vfprintf_r+0x3d8>
80005a54:	3f fa       	mov	r10,-1
80005a56:	f2 0a 0c 49 	max	r9,r9,r10
80005a5a:	50 29       	stdsp	sp[0x8],r9
80005a5c:	ce 9a       	rjmp	8000582e <_vfprintf_r+0x1c6>
80005a5e:	a7 b3       	sbr	r3,0x7
80005a60:	ce 4a       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005a62:	30 09       	mov	r9,0
80005a64:	23 08       	sub	r8,48
80005a66:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005a6a:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005a6e:	0f 38       	ld.ub	r8,r7++
80005a70:	f0 ca 00 30 	sub	r10,r8,48
80005a74:	58 9a       	cp.w	r10,9
80005a76:	fe 98 ff f7 	brls	80005a64 <_vfprintf_r+0x3fc>
80005a7a:	e0 48 00 24 	cp.w	r8,36
80005a7e:	fe 91 fe d7 	brne	8000582c <_vfprintf_r+0x1c4>
80005a82:	e0 49 00 20 	cp.w	r9,32
80005a86:	e0 89 0d 6c 	brgt	8000755e <_vfprintf_r+0x1ef6>
80005a8a:	f2 c4 00 01 	sub	r4,r9,1
80005a8e:	30 19       	mov	r9,1
80005a90:	50 39       	stdsp	sp[0xc],r9
80005a92:	cc ba       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005a94:	a3 b3       	sbr	r3,0x3
80005a96:	cc 9a       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005a98:	a7 a3       	sbr	r3,0x6
80005a9a:	cc 7a       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005a9c:	0f 88       	ld.ub	r8,r7[0x0]
80005a9e:	36 ce       	mov	lr,108
80005aa0:	fc 08 18 00 	cp.b	r8,lr
80005aa4:	c0 41       	brne	80005aac <_vfprintf_r+0x444>
80005aa6:	2f f7       	sub	r7,-1
80005aa8:	a5 b3       	sbr	r3,0x5
80005aaa:	cb fa       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005aac:	a5 a3       	sbr	r3,0x4
80005aae:	cb da       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005ab0:	a5 b3       	sbr	r3,0x5
80005ab2:	cb ba       	rjmp	80005828 <_vfprintf_r+0x1c0>
80005ab4:	50 a7       	stdsp	sp[0x28],r7
80005ab6:	50 80       	stdsp	sp[0x20],r0
80005ab8:	0c 97       	mov	r7,r6
80005aba:	10 90       	mov	r0,r8
80005abc:	08 96       	mov	r6,r4
80005abe:	04 95       	mov	r5,r2
80005ac0:	40 94       	lddsp	r4,sp[0x24]
80005ac2:	02 92       	mov	r2,r1
80005ac4:	0e 99       	mov	r9,r7
80005ac6:	40 41       	lddsp	r1,sp[0x10]
80005ac8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005acc:	40 3c       	lddsp	r12,sp[0xc]
80005ace:	58 0c       	cp.w	r12,0
80005ad0:	c1 d0       	breq	80005b0a <_vfprintf_r+0x4a2>
80005ad2:	10 36       	cp.w	r6,r8
80005ad4:	c0 64       	brge	80005ae0 <_vfprintf_r+0x478>
80005ad6:	fa cb f9 44 	sub	r11,sp,-1724
80005ada:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005ade:	c1 d8       	rjmp	80005b18 <_vfprintf_r+0x4b0>
80005ae0:	fa c8 f9 50 	sub	r8,sp,-1712
80005ae4:	1a d8       	st.w	--sp,r8
80005ae6:	fa c8 fa b8 	sub	r8,sp,-1352
80005aea:	1a d8       	st.w	--sp,r8
80005aec:	fa c8 fb b4 	sub	r8,sp,-1100
80005af0:	1a d8       	st.w	--sp,r8
80005af2:	fa c8 f9 40 	sub	r8,sp,-1728
80005af6:	fa c9 ff b4 	sub	r9,sp,-76
80005afa:	04 9a       	mov	r10,r2
80005afc:	0c 9b       	mov	r11,r6
80005afe:	0a 9c       	mov	r12,r5
80005b00:	fe b0 fc 1c 	rcall	80005338 <get_arg>
80005b04:	2f dd       	sub	sp,-12
80005b06:	19 b8       	ld.ub	r8,r12[0x3]
80005b08:	c2 28       	rjmp	80005b4c <_vfprintf_r+0x4e4>
80005b0a:	2f f7       	sub	r7,-1
80005b0c:	10 39       	cp.w	r9,r8
80005b0e:	c0 84       	brge	80005b1e <_vfprintf_r+0x4b6>
80005b10:	fa ca f9 44 	sub	r10,sp,-1724
80005b14:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005b18:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005b1c:	c1 88       	rjmp	80005b4c <_vfprintf_r+0x4e4>
80005b1e:	41 09       	lddsp	r9,sp[0x40]
80005b20:	59 f8       	cp.w	r8,31
80005b22:	e0 89 00 12 	brgt	80005b46 <_vfprintf_r+0x4de>
80005b26:	f2 ca ff fc 	sub	r10,r9,-4
80005b2a:	51 0a       	stdsp	sp[0x40],r10
80005b2c:	72 09       	ld.w	r9,r9[0x0]
80005b2e:	fa c6 f9 44 	sub	r6,sp,-1724
80005b32:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005b36:	2f f8       	sub	r8,-1
80005b38:	f5 49 fd 88 	st.w	r10[-632],r9
80005b3c:	fb 48 06 b4 	st.w	sp[1716],r8
80005b40:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80005b44:	c0 48       	rjmp	80005b4c <_vfprintf_r+0x4e4>
80005b46:	13 b8       	ld.ub	r8,r9[0x3]
80005b48:	2f c9       	sub	r9,-4
80005b4a:	51 09       	stdsp	sp[0x40],r9
80005b4c:	fb 68 06 60 	st.b	sp[1632],r8
80005b50:	30 0e       	mov	lr,0
80005b52:	30 08       	mov	r8,0
80005b54:	30 12       	mov	r2,1
80005b56:	fb 68 06 bb 	st.b	sp[1723],r8
80005b5a:	50 2e       	stdsp	sp[0x8],lr
80005b5c:	e0 8f 08 ac 	bral	80006cb4 <_vfprintf_r+0x164c>
80005b60:	50 a7       	stdsp	sp[0x28],r7
80005b62:	50 80       	stdsp	sp[0x20],r0
80005b64:	0c 97       	mov	r7,r6
80005b66:	04 95       	mov	r5,r2
80005b68:	08 96       	mov	r6,r4
80005b6a:	02 92       	mov	r2,r1
80005b6c:	40 94       	lddsp	r4,sp[0x24]
80005b6e:	10 90       	mov	r0,r8
80005b70:	40 41       	lddsp	r1,sp[0x10]
80005b72:	a5 a3       	sbr	r3,0x4
80005b74:	c0 a8       	rjmp	80005b88 <_vfprintf_r+0x520>
80005b76:	50 a7       	stdsp	sp[0x28],r7
80005b78:	50 80       	stdsp	sp[0x20],r0
80005b7a:	0c 97       	mov	r7,r6
80005b7c:	04 95       	mov	r5,r2
80005b7e:	08 96       	mov	r6,r4
80005b80:	02 92       	mov	r2,r1
80005b82:	40 94       	lddsp	r4,sp[0x24]
80005b84:	10 90       	mov	r0,r8
80005b86:	40 41       	lddsp	r1,sp[0x10]
80005b88:	ed b3 00 05 	bld	r3,0x5
80005b8c:	c5 11       	brne	80005c2e <_vfprintf_r+0x5c6>
80005b8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b92:	40 3c       	lddsp	r12,sp[0xc]
80005b94:	58 0c       	cp.w	r12,0
80005b96:	c1 e0       	breq	80005bd2 <_vfprintf_r+0x56a>
80005b98:	10 36       	cp.w	r6,r8
80005b9a:	c0 64       	brge	80005ba6 <_vfprintf_r+0x53e>
80005b9c:	fa cb f9 44 	sub	r11,sp,-1724
80005ba0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005ba4:	c2 08       	rjmp	80005be4 <_vfprintf_r+0x57c>
80005ba6:	fa c8 f9 50 	sub	r8,sp,-1712
80005baa:	1a d8       	st.w	--sp,r8
80005bac:	fa c8 fa b8 	sub	r8,sp,-1352
80005bb0:	0c 9b       	mov	r11,r6
80005bb2:	1a d8       	st.w	--sp,r8
80005bb4:	fa c8 fb b4 	sub	r8,sp,-1100
80005bb8:	1a d8       	st.w	--sp,r8
80005bba:	fa c9 ff b4 	sub	r9,sp,-76
80005bbe:	fa c8 f9 40 	sub	r8,sp,-1728
80005bc2:	04 9a       	mov	r10,r2
80005bc4:	0a 9c       	mov	r12,r5
80005bc6:	fe b0 fb b9 	rcall	80005338 <get_arg>
80005bca:	2f dd       	sub	sp,-12
80005bcc:	78 1b       	ld.w	r11,r12[0x4]
80005bce:	78 09       	ld.w	r9,r12[0x0]
80005bd0:	c2 b8       	rjmp	80005c26 <_vfprintf_r+0x5be>
80005bd2:	ee ca ff ff 	sub	r10,r7,-1
80005bd6:	10 37       	cp.w	r7,r8
80005bd8:	c0 b4       	brge	80005bee <_vfprintf_r+0x586>
80005bda:	fa c9 f9 44 	sub	r9,sp,-1724
80005bde:	14 97       	mov	r7,r10
80005be0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005be4:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005be8:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005bec:	c1 d8       	rjmp	80005c26 <_vfprintf_r+0x5be>
80005bee:	41 09       	lddsp	r9,sp[0x40]
80005bf0:	59 f8       	cp.w	r8,31
80005bf2:	e0 89 00 14 	brgt	80005c1a <_vfprintf_r+0x5b2>
80005bf6:	f2 cb ff f8 	sub	r11,r9,-8
80005bfa:	51 0b       	stdsp	sp[0x40],r11
80005bfc:	fa c6 f9 44 	sub	r6,sp,-1724
80005c00:	72 1b       	ld.w	r11,r9[0x4]
80005c02:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80005c06:	72 09       	ld.w	r9,r9[0x0]
80005c08:	f9 4b fd 8c 	st.w	r12[-628],r11
80005c0c:	f9 49 fd 88 	st.w	r12[-632],r9
80005c10:	2f f8       	sub	r8,-1
80005c12:	14 97       	mov	r7,r10
80005c14:	fb 48 06 b4 	st.w	sp[1716],r8
80005c18:	c0 78       	rjmp	80005c26 <_vfprintf_r+0x5be>
80005c1a:	f2 c8 ff f8 	sub	r8,r9,-8
80005c1e:	72 1b       	ld.w	r11,r9[0x4]
80005c20:	14 97       	mov	r7,r10
80005c22:	51 08       	stdsp	sp[0x40],r8
80005c24:	72 09       	ld.w	r9,r9[0x0]
80005c26:	16 98       	mov	r8,r11
80005c28:	fa e9 00 00 	st.d	sp[0],r8
80005c2c:	ca e8       	rjmp	80005d88 <_vfprintf_r+0x720>
80005c2e:	ed b3 00 04 	bld	r3,0x4
80005c32:	c1 71       	brne	80005c60 <_vfprintf_r+0x5f8>
80005c34:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c38:	40 3e       	lddsp	lr,sp[0xc]
80005c3a:	58 0e       	cp.w	lr,0
80005c3c:	c0 80       	breq	80005c4c <_vfprintf_r+0x5e4>
80005c3e:	10 36       	cp.w	r6,r8
80005c40:	c6 94       	brge	80005d12 <_vfprintf_r+0x6aa>
80005c42:	fa cc f9 44 	sub	r12,sp,-1724
80005c46:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005c4a:	c8 28       	rjmp	80005d4e <_vfprintf_r+0x6e6>
80005c4c:	ee ca ff ff 	sub	r10,r7,-1
80005c50:	10 37       	cp.w	r7,r8
80005c52:	e0 84 00 81 	brge	80005d54 <_vfprintf_r+0x6ec>
80005c56:	fa cb f9 44 	sub	r11,sp,-1724
80005c5a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c5e:	c7 78       	rjmp	80005d4c <_vfprintf_r+0x6e4>
80005c60:	ed b3 00 06 	bld	r3,0x6
80005c64:	c4 b1       	brne	80005cfa <_vfprintf_r+0x692>
80005c66:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c6a:	40 3c       	lddsp	r12,sp[0xc]
80005c6c:	58 0c       	cp.w	r12,0
80005c6e:	c1 d0       	breq	80005ca8 <_vfprintf_r+0x640>
80005c70:	10 36       	cp.w	r6,r8
80005c72:	c0 64       	brge	80005c7e <_vfprintf_r+0x616>
80005c74:	fa cb f9 44 	sub	r11,sp,-1724
80005c78:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c7c:	c1 f8       	rjmp	80005cba <_vfprintf_r+0x652>
80005c7e:	fa c8 f9 50 	sub	r8,sp,-1712
80005c82:	1a d8       	st.w	--sp,r8
80005c84:	fa c8 fa b8 	sub	r8,sp,-1352
80005c88:	1a d8       	st.w	--sp,r8
80005c8a:	fa c8 fb b4 	sub	r8,sp,-1100
80005c8e:	1a d8       	st.w	--sp,r8
80005c90:	fa c8 f9 40 	sub	r8,sp,-1728
80005c94:	fa c9 ff b4 	sub	r9,sp,-76
80005c98:	04 9a       	mov	r10,r2
80005c9a:	0c 9b       	mov	r11,r6
80005c9c:	0a 9c       	mov	r12,r5
80005c9e:	fe b0 fb 4d 	rcall	80005338 <get_arg>
80005ca2:	2f dd       	sub	sp,-12
80005ca4:	98 18       	ld.sh	r8,r12[0x2]
80005ca6:	c2 68       	rjmp	80005cf2 <_vfprintf_r+0x68a>
80005ca8:	ee ca ff ff 	sub	r10,r7,-1
80005cac:	10 37       	cp.w	r7,r8
80005cae:	c0 94       	brge	80005cc0 <_vfprintf_r+0x658>
80005cb0:	fa c9 f9 44 	sub	r9,sp,-1724
80005cb4:	14 97       	mov	r7,r10
80005cb6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005cba:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005cbe:	c1 a8       	rjmp	80005cf2 <_vfprintf_r+0x68a>
80005cc0:	41 09       	lddsp	r9,sp[0x40]
80005cc2:	59 f8       	cp.w	r8,31
80005cc4:	e0 89 00 13 	brgt	80005cea <_vfprintf_r+0x682>
80005cc8:	f2 cb ff fc 	sub	r11,r9,-4
80005ccc:	51 0b       	stdsp	sp[0x40],r11
80005cce:	72 09       	ld.w	r9,r9[0x0]
80005cd0:	fa c6 f9 44 	sub	r6,sp,-1724
80005cd4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005cd8:	2f f8       	sub	r8,-1
80005cda:	f7 49 fd 88 	st.w	r11[-632],r9
80005cde:	fb 48 06 b4 	st.w	sp[1716],r8
80005ce2:	14 97       	mov	r7,r10
80005ce4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005ce8:	c0 58       	rjmp	80005cf2 <_vfprintf_r+0x68a>
80005cea:	92 18       	ld.sh	r8,r9[0x2]
80005cec:	14 97       	mov	r7,r10
80005cee:	2f c9       	sub	r9,-4
80005cf0:	51 09       	stdsp	sp[0x40],r9
80005cf2:	50 18       	stdsp	sp[0x4],r8
80005cf4:	bf 58       	asr	r8,0x1f
80005cf6:	50 08       	stdsp	sp[0x0],r8
80005cf8:	c4 88       	rjmp	80005d88 <_vfprintf_r+0x720>
80005cfa:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005cfe:	40 3c       	lddsp	r12,sp[0xc]
80005d00:	58 0c       	cp.w	r12,0
80005d02:	c1 d0       	breq	80005d3c <_vfprintf_r+0x6d4>
80005d04:	10 36       	cp.w	r6,r8
80005d06:	c0 64       	brge	80005d12 <_vfprintf_r+0x6aa>
80005d08:	fa cb f9 44 	sub	r11,sp,-1724
80005d0c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005d10:	c1 f8       	rjmp	80005d4e <_vfprintf_r+0x6e6>
80005d12:	fa c8 f9 50 	sub	r8,sp,-1712
80005d16:	1a d8       	st.w	--sp,r8
80005d18:	fa c8 fa b8 	sub	r8,sp,-1352
80005d1c:	0c 9b       	mov	r11,r6
80005d1e:	1a d8       	st.w	--sp,r8
80005d20:	fa c8 fb b4 	sub	r8,sp,-1100
80005d24:	04 9a       	mov	r10,r2
80005d26:	1a d8       	st.w	--sp,r8
80005d28:	0a 9c       	mov	r12,r5
80005d2a:	fa c8 f9 40 	sub	r8,sp,-1728
80005d2e:	fa c9 ff b4 	sub	r9,sp,-76
80005d32:	fe b0 fb 03 	rcall	80005338 <get_arg>
80005d36:	2f dd       	sub	sp,-12
80005d38:	78 0b       	ld.w	r11,r12[0x0]
80005d3a:	c2 48       	rjmp	80005d82 <_vfprintf_r+0x71a>
80005d3c:	ee ca ff ff 	sub	r10,r7,-1
80005d40:	10 37       	cp.w	r7,r8
80005d42:	c0 94       	brge	80005d54 <_vfprintf_r+0x6ec>
80005d44:	fa c9 f9 44 	sub	r9,sp,-1724
80005d48:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005d4c:	14 97       	mov	r7,r10
80005d4e:	ec fb fd 88 	ld.w	r11,r6[-632]
80005d52:	c1 88       	rjmp	80005d82 <_vfprintf_r+0x71a>
80005d54:	41 09       	lddsp	r9,sp[0x40]
80005d56:	59 f8       	cp.w	r8,31
80005d58:	e0 89 00 11 	brgt	80005d7a <_vfprintf_r+0x712>
80005d5c:	f2 cb ff fc 	sub	r11,r9,-4
80005d60:	51 0b       	stdsp	sp[0x40],r11
80005d62:	fa c6 f9 44 	sub	r6,sp,-1724
80005d66:	72 0b       	ld.w	r11,r9[0x0]
80005d68:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005d6c:	f3 4b fd 88 	st.w	r9[-632],r11
80005d70:	2f f8       	sub	r8,-1
80005d72:	14 97       	mov	r7,r10
80005d74:	fb 48 06 b4 	st.w	sp[1716],r8
80005d78:	c0 58       	rjmp	80005d82 <_vfprintf_r+0x71a>
80005d7a:	72 0b       	ld.w	r11,r9[0x0]
80005d7c:	14 97       	mov	r7,r10
80005d7e:	2f c9       	sub	r9,-4
80005d80:	51 09       	stdsp	sp[0x40],r9
80005d82:	50 1b       	stdsp	sp[0x4],r11
80005d84:	bf 5b       	asr	r11,0x1f
80005d86:	50 0b       	stdsp	sp[0x0],r11
80005d88:	fa ea 00 00 	ld.d	r10,sp[0]
80005d8c:	58 0a       	cp.w	r10,0
80005d8e:	5c 2b       	cpc	r11
80005d90:	c0 e4       	brge	80005dac <_vfprintf_r+0x744>
80005d92:	30 08       	mov	r8,0
80005d94:	fa ea 00 00 	ld.d	r10,sp[0]
80005d98:	30 09       	mov	r9,0
80005d9a:	f0 0a 01 0a 	sub	r10,r8,r10
80005d9e:	f2 0b 01 4b 	sbc	r11,r9,r11
80005da2:	32 d8       	mov	r8,45
80005da4:	fa eb 00 00 	st.d	sp[0],r10
80005da8:	fb 68 06 bb 	st.b	sp[1723],r8
80005dac:	30 18       	mov	r8,1
80005dae:	e0 8f 06 f9 	bral	80006ba0 <_vfprintf_r+0x1538>
80005db2:	50 a7       	stdsp	sp[0x28],r7
80005db4:	50 80       	stdsp	sp[0x20],r0
80005db6:	0c 97       	mov	r7,r6
80005db8:	04 95       	mov	r5,r2
80005dba:	08 96       	mov	r6,r4
80005dbc:	02 92       	mov	r2,r1
80005dbe:	40 94       	lddsp	r4,sp[0x24]
80005dc0:	10 90       	mov	r0,r8
80005dc2:	40 41       	lddsp	r1,sp[0x10]
80005dc4:	0e 99       	mov	r9,r7
80005dc6:	ed b3 00 03 	bld	r3,0x3
80005dca:	c4 11       	brne	80005e4c <_vfprintf_r+0x7e4>
80005dcc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005dd0:	40 3a       	lddsp	r10,sp[0xc]
80005dd2:	58 0a       	cp.w	r10,0
80005dd4:	c1 90       	breq	80005e06 <_vfprintf_r+0x79e>
80005dd6:	10 36       	cp.w	r6,r8
80005dd8:	c6 45       	brlt	80005ea0 <_vfprintf_r+0x838>
80005dda:	fa c8 f9 50 	sub	r8,sp,-1712
80005dde:	1a d8       	st.w	--sp,r8
80005de0:	fa c8 fa b8 	sub	r8,sp,-1352
80005de4:	1a d8       	st.w	--sp,r8
80005de6:	fa c8 fb b4 	sub	r8,sp,-1100
80005dea:	0c 9b       	mov	r11,r6
80005dec:	1a d8       	st.w	--sp,r8
80005dee:	04 9a       	mov	r10,r2
80005df0:	fa c8 f9 40 	sub	r8,sp,-1728
80005df4:	fa c9 ff b4 	sub	r9,sp,-76
80005df8:	0a 9c       	mov	r12,r5
80005dfa:	fe b0 fa 9f 	rcall	80005338 <get_arg>
80005dfe:	2f dd       	sub	sp,-12
80005e00:	78 16       	ld.w	r6,r12[0x4]
80005e02:	50 76       	stdsp	sp[0x1c],r6
80005e04:	c4 88       	rjmp	80005e94 <_vfprintf_r+0x82c>
80005e06:	2f f7       	sub	r7,-1
80005e08:	10 39       	cp.w	r9,r8
80005e0a:	c0 c4       	brge	80005e22 <_vfprintf_r+0x7ba>
80005e0c:	fa ce f9 44 	sub	lr,sp,-1724
80005e10:	fc 06 00 36 	add	r6,lr,r6<<0x3
80005e14:	ec fc fd 8c 	ld.w	r12,r6[-628]
80005e18:	50 7c       	stdsp	sp[0x1c],r12
80005e1a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005e1e:	50 56       	stdsp	sp[0x14],r6
80005e20:	c6 68       	rjmp	80005eec <_vfprintf_r+0x884>
80005e22:	41 09       	lddsp	r9,sp[0x40]
80005e24:	59 f8       	cp.w	r8,31
80005e26:	e0 89 00 10 	brgt	80005e46 <_vfprintf_r+0x7de>
80005e2a:	f2 ca ff f8 	sub	r10,r9,-8
80005e2e:	72 1b       	ld.w	r11,r9[0x4]
80005e30:	51 0a       	stdsp	sp[0x40],r10
80005e32:	72 09       	ld.w	r9,r9[0x0]
80005e34:	fa ca f9 44 	sub	r10,sp,-1724
80005e38:	50 7b       	stdsp	sp[0x1c],r11
80005e3a:	50 59       	stdsp	sp[0x14],r9
80005e3c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80005e40:	40 5b       	lddsp	r11,sp[0x14]
80005e42:	40 7a       	lddsp	r10,sp[0x1c]
80005e44:	c4 78       	rjmp	80005ed2 <_vfprintf_r+0x86a>
80005e46:	72 18       	ld.w	r8,r9[0x4]
80005e48:	50 78       	stdsp	sp[0x1c],r8
80005e4a:	c4 c8       	rjmp	80005ee2 <_vfprintf_r+0x87a>
80005e4c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e50:	40 3e       	lddsp	lr,sp[0xc]
80005e52:	58 0e       	cp.w	lr,0
80005e54:	c2 30       	breq	80005e9a <_vfprintf_r+0x832>
80005e56:	10 36       	cp.w	r6,r8
80005e58:	c0 94       	brge	80005e6a <_vfprintf_r+0x802>
80005e5a:	fa cc f9 44 	sub	r12,sp,-1724
80005e5e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005e62:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005e66:	50 7b       	stdsp	sp[0x1c],r11
80005e68:	cd 9b       	rjmp	80005e1a <_vfprintf_r+0x7b2>
80005e6a:	fa c8 f9 50 	sub	r8,sp,-1712
80005e6e:	1a d8       	st.w	--sp,r8
80005e70:	fa c8 fa b8 	sub	r8,sp,-1352
80005e74:	04 9a       	mov	r10,r2
80005e76:	1a d8       	st.w	--sp,r8
80005e78:	fa c8 fb b4 	sub	r8,sp,-1100
80005e7c:	0c 9b       	mov	r11,r6
80005e7e:	1a d8       	st.w	--sp,r8
80005e80:	0a 9c       	mov	r12,r5
80005e82:	fa c8 f9 40 	sub	r8,sp,-1728
80005e86:	fa c9 ff b4 	sub	r9,sp,-76
80005e8a:	fe b0 fa 57 	rcall	80005338 <get_arg>
80005e8e:	2f dd       	sub	sp,-12
80005e90:	78 1a       	ld.w	r10,r12[0x4]
80005e92:	50 7a       	stdsp	sp[0x1c],r10
80005e94:	78 0c       	ld.w	r12,r12[0x0]
80005e96:	50 5c       	stdsp	sp[0x14],r12
80005e98:	c2 a8       	rjmp	80005eec <_vfprintf_r+0x884>
80005e9a:	2f f7       	sub	r7,-1
80005e9c:	10 39       	cp.w	r9,r8
80005e9e:	c0 94       	brge	80005eb0 <_vfprintf_r+0x848>
80005ea0:	fa c9 f9 44 	sub	r9,sp,-1724
80005ea4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ea8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80005eac:	50 78       	stdsp	sp[0x1c],r8
80005eae:	cb 6b       	rjmp	80005e1a <_vfprintf_r+0x7b2>
80005eb0:	41 09       	lddsp	r9,sp[0x40]
80005eb2:	59 f8       	cp.w	r8,31
80005eb4:	e0 89 00 15 	brgt	80005ede <_vfprintf_r+0x876>
80005eb8:	f2 ca ff f8 	sub	r10,r9,-8
80005ebc:	72 16       	ld.w	r6,r9[0x4]
80005ebe:	72 09       	ld.w	r9,r9[0x0]
80005ec0:	51 0a       	stdsp	sp[0x40],r10
80005ec2:	50 59       	stdsp	sp[0x14],r9
80005ec4:	fa ce f9 44 	sub	lr,sp,-1724
80005ec8:	50 76       	stdsp	sp[0x1c],r6
80005eca:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005ece:	40 5b       	lddsp	r11,sp[0x14]
80005ed0:	0c 9a       	mov	r10,r6
80005ed2:	f2 eb fd 88 	st.d	r9[-632],r10
80005ed6:	2f f8       	sub	r8,-1
80005ed8:	fb 48 06 b4 	st.w	sp[1716],r8
80005edc:	c0 88       	rjmp	80005eec <_vfprintf_r+0x884>
80005ede:	72 1c       	ld.w	r12,r9[0x4]
80005ee0:	50 7c       	stdsp	sp[0x1c],r12
80005ee2:	f2 c8 ff f8 	sub	r8,r9,-8
80005ee6:	51 08       	stdsp	sp[0x40],r8
80005ee8:	72 09       	ld.w	r9,r9[0x0]
80005eea:	50 59       	stdsp	sp[0x14],r9
80005eec:	40 5b       	lddsp	r11,sp[0x14]
80005eee:	40 7a       	lddsp	r10,sp[0x1c]
80005ef0:	e0 a0 18 50 	rcall	80008f90 <__isinfd>
80005ef4:	18 96       	mov	r6,r12
80005ef6:	c1 70       	breq	80005f24 <_vfprintf_r+0x8bc>
80005ef8:	30 08       	mov	r8,0
80005efa:	30 09       	mov	r9,0
80005efc:	40 5b       	lddsp	r11,sp[0x14]
80005efe:	40 7a       	lddsp	r10,sp[0x1c]
80005f00:	e0 a0 1b b0 	rcall	80009660 <__avr32_f64_cmp_lt>
80005f04:	c0 40       	breq	80005f0c <_vfprintf_r+0x8a4>
80005f06:	32 d8       	mov	r8,45
80005f08:	fb 68 06 bb 	st.b	sp[1723],r8
80005f0c:	fe c8 b2 44 	sub	r8,pc,-19900
80005f10:	fe c6 b2 44 	sub	r6,pc,-19900
80005f14:	a7 d3       	cbr	r3,0x7
80005f16:	e0 40 00 47 	cp.w	r0,71
80005f1a:	f0 06 17 a0 	movle	r6,r8
80005f1e:	30 32       	mov	r2,3
80005f20:	e0 8f 06 cd 	bral	80006cba <_vfprintf_r+0x1652>
80005f24:	40 5b       	lddsp	r11,sp[0x14]
80005f26:	40 7a       	lddsp	r10,sp[0x1c]
80005f28:	e0 a0 18 49 	rcall	80008fba <__isnand>
80005f2c:	c0 e0       	breq	80005f48 <_vfprintf_r+0x8e0>
80005f2e:	50 26       	stdsp	sp[0x8],r6
80005f30:	fe c8 b2 60 	sub	r8,pc,-19872
80005f34:	fe c6 b2 60 	sub	r6,pc,-19872
80005f38:	a7 d3       	cbr	r3,0x7
80005f3a:	e0 40 00 47 	cp.w	r0,71
80005f3e:	f0 06 17 a0 	movle	r6,r8
80005f42:	30 32       	mov	r2,3
80005f44:	e0 8f 06 c1 	bral	80006cc6 <_vfprintf_r+0x165e>
80005f48:	40 2a       	lddsp	r10,sp[0x8]
80005f4a:	5b fa       	cp.w	r10,-1
80005f4c:	c0 41       	brne	80005f54 <_vfprintf_r+0x8ec>
80005f4e:	30 69       	mov	r9,6
80005f50:	50 29       	stdsp	sp[0x8],r9
80005f52:	c1 18       	rjmp	80005f74 <_vfprintf_r+0x90c>
80005f54:	e0 40 00 47 	cp.w	r0,71
80005f58:	5f 09       	sreq	r9
80005f5a:	e0 40 00 67 	cp.w	r0,103
80005f5e:	5f 08       	sreq	r8
80005f60:	f3 e8 10 08 	or	r8,r9,r8
80005f64:	f8 08 18 00 	cp.b	r8,r12
80005f68:	c0 60       	breq	80005f74 <_vfprintf_r+0x90c>
80005f6a:	40 28       	lddsp	r8,sp[0x8]
80005f6c:	58 08       	cp.w	r8,0
80005f6e:	f9 b8 00 01 	moveq	r8,1
80005f72:	50 28       	stdsp	sp[0x8],r8
80005f74:	40 78       	lddsp	r8,sp[0x1c]
80005f76:	40 59       	lddsp	r9,sp[0x14]
80005f78:	fa e9 06 94 	st.d	sp[1684],r8
80005f7c:	a9 a3       	sbr	r3,0x8
80005f7e:	fa f8 06 94 	ld.w	r8,sp[1684]
80005f82:	58 08       	cp.w	r8,0
80005f84:	c0 65       	brlt	80005f90 <_vfprintf_r+0x928>
80005f86:	40 5e       	lddsp	lr,sp[0x14]
80005f88:	30 0c       	mov	r12,0
80005f8a:	50 6e       	stdsp	sp[0x18],lr
80005f8c:	50 9c       	stdsp	sp[0x24],r12
80005f8e:	c0 78       	rjmp	80005f9c <_vfprintf_r+0x934>
80005f90:	40 5b       	lddsp	r11,sp[0x14]
80005f92:	32 da       	mov	r10,45
80005f94:	ee 1b 80 00 	eorh	r11,0x8000
80005f98:	50 9a       	stdsp	sp[0x24],r10
80005f9a:	50 6b       	stdsp	sp[0x18],r11
80005f9c:	e0 40 00 46 	cp.w	r0,70
80005fa0:	5f 09       	sreq	r9
80005fa2:	e0 40 00 66 	cp.w	r0,102
80005fa6:	5f 08       	sreq	r8
80005fa8:	f3 e8 10 08 	or	r8,r9,r8
80005fac:	50 48       	stdsp	sp[0x10],r8
80005fae:	c0 40       	breq	80005fb6 <_vfprintf_r+0x94e>
80005fb0:	40 22       	lddsp	r2,sp[0x8]
80005fb2:	30 39       	mov	r9,3
80005fb4:	c1 28       	rjmp	80005fd8 <_vfprintf_r+0x970>
80005fb6:	e0 40 00 45 	cp.w	r0,69
80005fba:	5f 09       	sreq	r9
80005fbc:	e0 40 00 65 	cp.w	r0,101
80005fc0:	5f 08       	sreq	r8
80005fc2:	40 46       	lddsp	r6,sp[0x10]
80005fc4:	10 49       	or	r9,r8
80005fc6:	ec 09 18 00 	cp.b	r9,r6
80005fca:	c0 31       	brne	80005fd0 <_vfprintf_r+0x968>
80005fcc:	40 22       	lddsp	r2,sp[0x8]
80005fce:	c0 48       	rjmp	80005fd6 <_vfprintf_r+0x96e>
80005fd0:	40 2e       	lddsp	lr,sp[0x8]
80005fd2:	fc c2 ff ff 	sub	r2,lr,-1
80005fd6:	30 29       	mov	r9,2
80005fd8:	fa c8 f9 5c 	sub	r8,sp,-1700
80005fdc:	1a d8       	st.w	--sp,r8
80005fde:	fa c8 f9 54 	sub	r8,sp,-1708
80005fe2:	1a d8       	st.w	--sp,r8
80005fe4:	fa c8 f9 4c 	sub	r8,sp,-1716
80005fe8:	0a 9c       	mov	r12,r5
80005fea:	1a d8       	st.w	--sp,r8
80005fec:	04 98       	mov	r8,r2
80005fee:	40 9b       	lddsp	r11,sp[0x24]
80005ff0:	40 aa       	lddsp	r10,sp[0x28]
80005ff2:	e0 a0 0b e3 	rcall	800077b8 <_dtoa_r>
80005ff6:	e0 40 00 47 	cp.w	r0,71
80005ffa:	5f 19       	srne	r9
80005ffc:	e0 40 00 67 	cp.w	r0,103
80006000:	5f 18       	srne	r8
80006002:	18 96       	mov	r6,r12
80006004:	2f dd       	sub	sp,-12
80006006:	f3 e8 00 08 	and	r8,r9,r8
8000600a:	c0 41       	brne	80006012 <_vfprintf_r+0x9aa>
8000600c:	ed b3 00 00 	bld	r3,0x0
80006010:	c3 01       	brne	80006070 <_vfprintf_r+0xa08>
80006012:	ec 02 00 0c 	add	r12,r6,r2
80006016:	50 3c       	stdsp	sp[0xc],r12
80006018:	40 4b       	lddsp	r11,sp[0x10]
8000601a:	58 0b       	cp.w	r11,0
8000601c:	c1 50       	breq	80006046 <_vfprintf_r+0x9de>
8000601e:	0d 89       	ld.ub	r9,r6[0x0]
80006020:	33 08       	mov	r8,48
80006022:	f0 09 18 00 	cp.b	r9,r8
80006026:	c0 b1       	brne	8000603c <_vfprintf_r+0x9d4>
80006028:	30 08       	mov	r8,0
8000602a:	30 09       	mov	r9,0
8000602c:	40 6b       	lddsp	r11,sp[0x18]
8000602e:	40 7a       	lddsp	r10,sp[0x1c]
80006030:	e0 a0 1a d1 	rcall	800095d2 <__avr32_f64_cmp_eq>
80006034:	fb b2 00 01 	rsubeq	r2,1
80006038:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000603c:	40 3a       	lddsp	r10,sp[0xc]
8000603e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006042:	10 0a       	add	r10,r8
80006044:	50 3a       	stdsp	sp[0xc],r10
80006046:	40 6b       	lddsp	r11,sp[0x18]
80006048:	30 08       	mov	r8,0
8000604a:	30 09       	mov	r9,0
8000604c:	40 7a       	lddsp	r10,sp[0x1c]
8000604e:	e0 a0 1a c2 	rcall	800095d2 <__avr32_f64_cmp_eq>
80006052:	c0 90       	breq	80006064 <_vfprintf_r+0x9fc>
80006054:	40 39       	lddsp	r9,sp[0xc]
80006056:	fb 49 06 a4 	st.w	sp[1700],r9
8000605a:	c0 58       	rjmp	80006064 <_vfprintf_r+0x9fc>
8000605c:	10 c9       	st.b	r8++,r9
8000605e:	fb 48 06 a4 	st.w	sp[1700],r8
80006062:	c0 28       	rjmp	80006066 <_vfprintf_r+0x9fe>
80006064:	33 09       	mov	r9,48
80006066:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000606a:	40 3e       	lddsp	lr,sp[0xc]
8000606c:	1c 38       	cp.w	r8,lr
8000606e:	cf 73       	brcs	8000605c <_vfprintf_r+0x9f4>
80006070:	e0 40 00 47 	cp.w	r0,71
80006074:	5f 09       	sreq	r9
80006076:	e0 40 00 67 	cp.w	r0,103
8000607a:	5f 08       	sreq	r8
8000607c:	f3 e8 10 08 	or	r8,r9,r8
80006080:	fa f9 06 a4 	ld.w	r9,sp[1700]
80006084:	0c 19       	sub	r9,r6
80006086:	50 69       	stdsp	sp[0x18],r9
80006088:	58 08       	cp.w	r8,0
8000608a:	c0 b0       	breq	800060a0 <_vfprintf_r+0xa38>
8000608c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006090:	5b d8       	cp.w	r8,-3
80006092:	c0 55       	brlt	8000609c <_vfprintf_r+0xa34>
80006094:	40 2c       	lddsp	r12,sp[0x8]
80006096:	18 38       	cp.w	r8,r12
80006098:	e0 8a 00 6a 	brle	8000616c <_vfprintf_r+0xb04>
8000609c:	20 20       	sub	r0,2
8000609e:	c0 58       	rjmp	800060a8 <_vfprintf_r+0xa40>
800060a0:	e0 40 00 65 	cp.w	r0,101
800060a4:	e0 89 00 46 	brgt	80006130 <_vfprintf_r+0xac8>
800060a8:	fa fb 06 ac 	ld.w	r11,sp[1708]
800060ac:	fb 60 06 9c 	st.b	sp[1692],r0
800060b0:	20 1b       	sub	r11,1
800060b2:	fb 4b 06 ac 	st.w	sp[1708],r11
800060b6:	c0 47       	brpl	800060be <_vfprintf_r+0xa56>
800060b8:	5c 3b       	neg	r11
800060ba:	32 d8       	mov	r8,45
800060bc:	c0 28       	rjmp	800060c0 <_vfprintf_r+0xa58>
800060be:	32 b8       	mov	r8,43
800060c0:	fb 68 06 9d 	st.b	sp[1693],r8
800060c4:	58 9b       	cp.w	r11,9
800060c6:	e0 8a 00 1d 	brle	80006100 <_vfprintf_r+0xa98>
800060ca:	fa c9 fa 35 	sub	r9,sp,-1483
800060ce:	30 aa       	mov	r10,10
800060d0:	12 98       	mov	r8,r9
800060d2:	0e 9c       	mov	r12,r7
800060d4:	0c 92       	mov	r2,r6
800060d6:	f6 0a 0c 06 	divs	r6,r11,r10
800060da:	0e 9b       	mov	r11,r7
800060dc:	2d 0b       	sub	r11,-48
800060de:	10 fb       	st.b	--r8,r11
800060e0:	0c 9b       	mov	r11,r6
800060e2:	58 96       	cp.w	r6,9
800060e4:	fe 99 ff f9 	brgt	800060d6 <_vfprintf_r+0xa6e>
800060e8:	2d 0b       	sub	r11,-48
800060ea:	18 97       	mov	r7,r12
800060ec:	04 96       	mov	r6,r2
800060ee:	10 fb       	st.b	--r8,r11
800060f0:	fa ca f9 62 	sub	r10,sp,-1694
800060f4:	c0 38       	rjmp	800060fa <_vfprintf_r+0xa92>
800060f6:	11 3b       	ld.ub	r11,r8++
800060f8:	14 cb       	st.b	r10++,r11
800060fa:	12 38       	cp.w	r8,r9
800060fc:	cf d3       	brcs	800060f6 <_vfprintf_r+0xa8e>
800060fe:	c0 98       	rjmp	80006110 <_vfprintf_r+0xaa8>
80006100:	2d 0b       	sub	r11,-48
80006102:	33 08       	mov	r8,48
80006104:	fb 6b 06 9f 	st.b	sp[1695],r11
80006108:	fb 68 06 9e 	st.b	sp[1694],r8
8000610c:	fa ca f9 60 	sub	r10,sp,-1696
80006110:	fa c8 f9 64 	sub	r8,sp,-1692
80006114:	f4 08 01 08 	sub	r8,r10,r8
80006118:	50 e8       	stdsp	sp[0x38],r8
8000611a:	10 92       	mov	r2,r8
8000611c:	40 6b       	lddsp	r11,sp[0x18]
8000611e:	16 02       	add	r2,r11
80006120:	58 1b       	cp.w	r11,1
80006122:	e0 89 00 05 	brgt	8000612c <_vfprintf_r+0xac4>
80006126:	ed b3 00 00 	bld	r3,0x0
8000612a:	c3 51       	brne	80006194 <_vfprintf_r+0xb2c>
8000612c:	2f f2       	sub	r2,-1
8000612e:	c3 38       	rjmp	80006194 <_vfprintf_r+0xb2c>
80006130:	e0 40 00 66 	cp.w	r0,102
80006134:	c1 c1       	brne	8000616c <_vfprintf_r+0xb04>
80006136:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000613a:	58 02       	cp.w	r2,0
8000613c:	e0 8a 00 0c 	brle	80006154 <_vfprintf_r+0xaec>
80006140:	40 2a       	lddsp	r10,sp[0x8]
80006142:	58 0a       	cp.w	r10,0
80006144:	c0 41       	brne	8000614c <_vfprintf_r+0xae4>
80006146:	ed b3 00 00 	bld	r3,0x0
8000614a:	c2 51       	brne	80006194 <_vfprintf_r+0xb2c>
8000614c:	2f f2       	sub	r2,-1
8000614e:	40 29       	lddsp	r9,sp[0x8]
80006150:	12 02       	add	r2,r9
80006152:	c0 b8       	rjmp	80006168 <_vfprintf_r+0xb00>
80006154:	40 28       	lddsp	r8,sp[0x8]
80006156:	58 08       	cp.w	r8,0
80006158:	c0 61       	brne	80006164 <_vfprintf_r+0xafc>
8000615a:	ed b3 00 00 	bld	r3,0x0
8000615e:	c0 30       	breq	80006164 <_vfprintf_r+0xafc>
80006160:	30 12       	mov	r2,1
80006162:	c1 98       	rjmp	80006194 <_vfprintf_r+0xb2c>
80006164:	40 22       	lddsp	r2,sp[0x8]
80006166:	2f e2       	sub	r2,-2
80006168:	36 60       	mov	r0,102
8000616a:	c1 58       	rjmp	80006194 <_vfprintf_r+0xb2c>
8000616c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006170:	40 6e       	lddsp	lr,sp[0x18]
80006172:	1c 32       	cp.w	r2,lr
80006174:	c0 65       	brlt	80006180 <_vfprintf_r+0xb18>
80006176:	ed b3 00 00 	bld	r3,0x0
8000617a:	f7 b2 00 ff 	subeq	r2,-1
8000617e:	c0 a8       	rjmp	80006192 <_vfprintf_r+0xb2a>
80006180:	e4 08 11 02 	rsub	r8,r2,2
80006184:	40 6c       	lddsp	r12,sp[0x18]
80006186:	58 02       	cp.w	r2,0
80006188:	f0 02 17 a0 	movle	r2,r8
8000618c:	f9 b2 09 01 	movgt	r2,1
80006190:	18 02       	add	r2,r12
80006192:	36 70       	mov	r0,103
80006194:	40 9b       	lddsp	r11,sp[0x24]
80006196:	58 0b       	cp.w	r11,0
80006198:	e0 80 05 91 	breq	80006cba <_vfprintf_r+0x1652>
8000619c:	32 d8       	mov	r8,45
8000619e:	fb 68 06 bb 	st.b	sp[1723],r8
800061a2:	e0 8f 05 90 	bral	80006cc2 <_vfprintf_r+0x165a>
800061a6:	50 a7       	stdsp	sp[0x28],r7
800061a8:	04 95       	mov	r5,r2
800061aa:	0c 97       	mov	r7,r6
800061ac:	02 92       	mov	r2,r1
800061ae:	08 96       	mov	r6,r4
800061b0:	40 41       	lddsp	r1,sp[0x10]
800061b2:	40 94       	lddsp	r4,sp[0x24]
800061b4:	0e 99       	mov	r9,r7
800061b6:	ed b3 00 05 	bld	r3,0x5
800061ba:	c4 81       	brne	8000624a <_vfprintf_r+0xbe2>
800061bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800061c0:	40 3e       	lddsp	lr,sp[0xc]
800061c2:	58 0e       	cp.w	lr,0
800061c4:	c1 d0       	breq	800061fe <_vfprintf_r+0xb96>
800061c6:	10 36       	cp.w	r6,r8
800061c8:	c0 64       	brge	800061d4 <_vfprintf_r+0xb6c>
800061ca:	fa cc f9 44 	sub	r12,sp,-1724
800061ce:	f8 06 00 36 	add	r6,r12,r6<<0x3
800061d2:	c1 d8       	rjmp	8000620c <_vfprintf_r+0xba4>
800061d4:	fa c8 f9 50 	sub	r8,sp,-1712
800061d8:	1a d8       	st.w	--sp,r8
800061da:	fa c8 fa b8 	sub	r8,sp,-1352
800061de:	04 9a       	mov	r10,r2
800061e0:	1a d8       	st.w	--sp,r8
800061e2:	fa c8 fb b4 	sub	r8,sp,-1100
800061e6:	0c 9b       	mov	r11,r6
800061e8:	1a d8       	st.w	--sp,r8
800061ea:	0a 9c       	mov	r12,r5
800061ec:	fa c8 f9 40 	sub	r8,sp,-1728
800061f0:	fa c9 ff b4 	sub	r9,sp,-76
800061f4:	fe b0 f8 a2 	rcall	80005338 <get_arg>
800061f8:	2f dd       	sub	sp,-12
800061fa:	78 0a       	ld.w	r10,r12[0x0]
800061fc:	c2 08       	rjmp	8000623c <_vfprintf_r+0xbd4>
800061fe:	2f f7       	sub	r7,-1
80006200:	10 39       	cp.w	r9,r8
80006202:	c0 84       	brge	80006212 <_vfprintf_r+0xbaa>
80006204:	fa cb f9 44 	sub	r11,sp,-1724
80006208:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000620c:	ec fa fd 88 	ld.w	r10,r6[-632]
80006210:	c1 68       	rjmp	8000623c <_vfprintf_r+0xbd4>
80006212:	41 09       	lddsp	r9,sp[0x40]
80006214:	59 f8       	cp.w	r8,31
80006216:	e0 89 00 10 	brgt	80006236 <_vfprintf_r+0xbce>
8000621a:	f2 ca ff fc 	sub	r10,r9,-4
8000621e:	51 0a       	stdsp	sp[0x40],r10
80006220:	fa c6 f9 44 	sub	r6,sp,-1724
80006224:	72 0a       	ld.w	r10,r9[0x0]
80006226:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000622a:	f3 4a fd 88 	st.w	r9[-632],r10
8000622e:	2f f8       	sub	r8,-1
80006230:	fb 48 06 b4 	st.w	sp[1716],r8
80006234:	c0 48       	rjmp	8000623c <_vfprintf_r+0xbd4>
80006236:	72 0a       	ld.w	r10,r9[0x0]
80006238:	2f c9       	sub	r9,-4
8000623a:	51 09       	stdsp	sp[0x40],r9
8000623c:	40 be       	lddsp	lr,sp[0x2c]
8000623e:	1c 98       	mov	r8,lr
80006240:	95 1e       	st.w	r10[0x4],lr
80006242:	bf 58       	asr	r8,0x1f
80006244:	95 08       	st.w	r10[0x0],r8
80006246:	fe 9f fa 9e 	bral	80005782 <_vfprintf_r+0x11a>
8000624a:	ed b3 00 04 	bld	r3,0x4
8000624e:	c4 80       	breq	800062de <_vfprintf_r+0xc76>
80006250:	e2 13 00 40 	andl	r3,0x40,COH
80006254:	c4 50       	breq	800062de <_vfprintf_r+0xc76>
80006256:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000625a:	40 3c       	lddsp	r12,sp[0xc]
8000625c:	58 0c       	cp.w	r12,0
8000625e:	c1 d0       	breq	80006298 <_vfprintf_r+0xc30>
80006260:	10 36       	cp.w	r6,r8
80006262:	c0 64       	brge	8000626e <_vfprintf_r+0xc06>
80006264:	fa cb f9 44 	sub	r11,sp,-1724
80006268:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000626c:	c1 d8       	rjmp	800062a6 <_vfprintf_r+0xc3e>
8000626e:	fa c8 f9 50 	sub	r8,sp,-1712
80006272:	1a d8       	st.w	--sp,r8
80006274:	fa c8 fa b8 	sub	r8,sp,-1352
80006278:	04 9a       	mov	r10,r2
8000627a:	1a d8       	st.w	--sp,r8
8000627c:	fa c8 fb b4 	sub	r8,sp,-1100
80006280:	0c 9b       	mov	r11,r6
80006282:	1a d8       	st.w	--sp,r8
80006284:	0a 9c       	mov	r12,r5
80006286:	fa c8 f9 40 	sub	r8,sp,-1728
8000628a:	fa c9 ff b4 	sub	r9,sp,-76
8000628e:	fe b0 f8 55 	rcall	80005338 <get_arg>
80006292:	2f dd       	sub	sp,-12
80006294:	78 0a       	ld.w	r10,r12[0x0]
80006296:	c2 08       	rjmp	800062d6 <_vfprintf_r+0xc6e>
80006298:	2f f7       	sub	r7,-1
8000629a:	10 39       	cp.w	r9,r8
8000629c:	c0 84       	brge	800062ac <_vfprintf_r+0xc44>
8000629e:	fa ca f9 44 	sub	r10,sp,-1724
800062a2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800062a6:	ec fa fd 88 	ld.w	r10,r6[-632]
800062aa:	c1 68       	rjmp	800062d6 <_vfprintf_r+0xc6e>
800062ac:	41 09       	lddsp	r9,sp[0x40]
800062ae:	59 f8       	cp.w	r8,31
800062b0:	e0 89 00 10 	brgt	800062d0 <_vfprintf_r+0xc68>
800062b4:	f2 ca ff fc 	sub	r10,r9,-4
800062b8:	51 0a       	stdsp	sp[0x40],r10
800062ba:	fa c6 f9 44 	sub	r6,sp,-1724
800062be:	72 0a       	ld.w	r10,r9[0x0]
800062c0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800062c4:	f3 4a fd 88 	st.w	r9[-632],r10
800062c8:	2f f8       	sub	r8,-1
800062ca:	fb 48 06 b4 	st.w	sp[1716],r8
800062ce:	c0 48       	rjmp	800062d6 <_vfprintf_r+0xc6e>
800062d0:	72 0a       	ld.w	r10,r9[0x0]
800062d2:	2f c9       	sub	r9,-4
800062d4:	51 09       	stdsp	sp[0x40],r9
800062d6:	40 be       	lddsp	lr,sp[0x2c]
800062d8:	b4 0e       	st.h	r10[0x0],lr
800062da:	fe 9f fa 54 	bral	80005782 <_vfprintf_r+0x11a>
800062de:	fa f8 06 b4 	ld.w	r8,sp[1716]
800062e2:	40 3c       	lddsp	r12,sp[0xc]
800062e4:	58 0c       	cp.w	r12,0
800062e6:	c1 d0       	breq	80006320 <_vfprintf_r+0xcb8>
800062e8:	10 36       	cp.w	r6,r8
800062ea:	c0 64       	brge	800062f6 <_vfprintf_r+0xc8e>
800062ec:	fa cb f9 44 	sub	r11,sp,-1724
800062f0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800062f4:	c1 d8       	rjmp	8000632e <_vfprintf_r+0xcc6>
800062f6:	fa c8 f9 50 	sub	r8,sp,-1712
800062fa:	1a d8       	st.w	--sp,r8
800062fc:	fa c8 fa b8 	sub	r8,sp,-1352
80006300:	04 9a       	mov	r10,r2
80006302:	1a d8       	st.w	--sp,r8
80006304:	fa c8 fb b4 	sub	r8,sp,-1100
80006308:	0c 9b       	mov	r11,r6
8000630a:	1a d8       	st.w	--sp,r8
8000630c:	0a 9c       	mov	r12,r5
8000630e:	fa c8 f9 40 	sub	r8,sp,-1728
80006312:	fa c9 ff b4 	sub	r9,sp,-76
80006316:	fe b0 f8 11 	rcall	80005338 <get_arg>
8000631a:	2f dd       	sub	sp,-12
8000631c:	78 0a       	ld.w	r10,r12[0x0]
8000631e:	c2 08       	rjmp	8000635e <_vfprintf_r+0xcf6>
80006320:	2f f7       	sub	r7,-1
80006322:	10 39       	cp.w	r9,r8
80006324:	c0 84       	brge	80006334 <_vfprintf_r+0xccc>
80006326:	fa ca f9 44 	sub	r10,sp,-1724
8000632a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000632e:	ec fa fd 88 	ld.w	r10,r6[-632]
80006332:	c1 68       	rjmp	8000635e <_vfprintf_r+0xcf6>
80006334:	41 09       	lddsp	r9,sp[0x40]
80006336:	59 f8       	cp.w	r8,31
80006338:	e0 89 00 10 	brgt	80006358 <_vfprintf_r+0xcf0>
8000633c:	f2 ca ff fc 	sub	r10,r9,-4
80006340:	51 0a       	stdsp	sp[0x40],r10
80006342:	fa c6 f9 44 	sub	r6,sp,-1724
80006346:	72 0a       	ld.w	r10,r9[0x0]
80006348:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000634c:	f3 4a fd 88 	st.w	r9[-632],r10
80006350:	2f f8       	sub	r8,-1
80006352:	fb 48 06 b4 	st.w	sp[1716],r8
80006356:	c0 48       	rjmp	8000635e <_vfprintf_r+0xcf6>
80006358:	72 0a       	ld.w	r10,r9[0x0]
8000635a:	2f c9       	sub	r9,-4
8000635c:	51 09       	stdsp	sp[0x40],r9
8000635e:	40 be       	lddsp	lr,sp[0x2c]
80006360:	95 0e       	st.w	r10[0x0],lr
80006362:	fe 9f fa 10 	bral	80005782 <_vfprintf_r+0x11a>
80006366:	50 a7       	stdsp	sp[0x28],r7
80006368:	50 80       	stdsp	sp[0x20],r0
8000636a:	0c 97       	mov	r7,r6
8000636c:	04 95       	mov	r5,r2
8000636e:	08 96       	mov	r6,r4
80006370:	02 92       	mov	r2,r1
80006372:	40 94       	lddsp	r4,sp[0x24]
80006374:	10 90       	mov	r0,r8
80006376:	40 41       	lddsp	r1,sp[0x10]
80006378:	a5 a3       	sbr	r3,0x4
8000637a:	c0 a8       	rjmp	8000638e <_vfprintf_r+0xd26>
8000637c:	50 a7       	stdsp	sp[0x28],r7
8000637e:	50 80       	stdsp	sp[0x20],r0
80006380:	0c 97       	mov	r7,r6
80006382:	04 95       	mov	r5,r2
80006384:	08 96       	mov	r6,r4
80006386:	02 92       	mov	r2,r1
80006388:	40 94       	lddsp	r4,sp[0x24]
8000638a:	10 90       	mov	r0,r8
8000638c:	40 41       	lddsp	r1,sp[0x10]
8000638e:	ed b3 00 05 	bld	r3,0x5
80006392:	c5 d1       	brne	8000644c <_vfprintf_r+0xde4>
80006394:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006398:	40 3c       	lddsp	r12,sp[0xc]
8000639a:	58 0c       	cp.w	r12,0
8000639c:	c2 60       	breq	800063e8 <_vfprintf_r+0xd80>
8000639e:	10 36       	cp.w	r6,r8
800063a0:	c0 a4       	brge	800063b4 <_vfprintf_r+0xd4c>
800063a2:	fa cb f9 44 	sub	r11,sp,-1724
800063a6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800063aa:	ec e8 fd 88 	ld.d	r8,r6[-632]
800063ae:	fa e9 00 00 	st.d	sp[0],r8
800063b2:	c1 88       	rjmp	800063e2 <_vfprintf_r+0xd7a>
800063b4:	fa c8 f9 50 	sub	r8,sp,-1712
800063b8:	1a d8       	st.w	--sp,r8
800063ba:	fa c8 fa b8 	sub	r8,sp,-1352
800063be:	04 9a       	mov	r10,r2
800063c0:	1a d8       	st.w	--sp,r8
800063c2:	0c 9b       	mov	r11,r6
800063c4:	fa c8 fb b4 	sub	r8,sp,-1100
800063c8:	0a 9c       	mov	r12,r5
800063ca:	1a d8       	st.w	--sp,r8
800063cc:	fa c8 f9 40 	sub	r8,sp,-1728
800063d0:	fa c9 ff b4 	sub	r9,sp,-76
800063d4:	fe b0 f7 b2 	rcall	80005338 <get_arg>
800063d8:	2f dd       	sub	sp,-12
800063da:	f8 ea 00 00 	ld.d	r10,r12[0]
800063de:	fa eb 00 00 	st.d	sp[0],r10
800063e2:	30 08       	mov	r8,0
800063e4:	e0 8f 03 db 	bral	80006b9a <_vfprintf_r+0x1532>
800063e8:	ee ca ff ff 	sub	r10,r7,-1
800063ec:	10 37       	cp.w	r7,r8
800063ee:	c0 b4       	brge	80006404 <_vfprintf_r+0xd9c>
800063f0:	fa c9 f9 44 	sub	r9,sp,-1724
800063f4:	14 97       	mov	r7,r10
800063f6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800063fa:	ec ea fd 88 	ld.d	r10,r6[-632]
800063fe:	fa eb 00 00 	st.d	sp[0],r10
80006402:	c1 88       	rjmp	80006432 <_vfprintf_r+0xdca>
80006404:	41 09       	lddsp	r9,sp[0x40]
80006406:	59 f8       	cp.w	r8,31
80006408:	e0 89 00 18 	brgt	80006438 <_vfprintf_r+0xdd0>
8000640c:	f2 e6 00 00 	ld.d	r6,r9[0]
80006410:	f2 cb ff f8 	sub	r11,r9,-8
80006414:	fa e7 00 00 	st.d	sp[0],r6
80006418:	51 0b       	stdsp	sp[0x40],r11
8000641a:	fa c6 f9 44 	sub	r6,sp,-1724
8000641e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006422:	fa e6 00 00 	ld.d	r6,sp[0]
80006426:	f2 e7 fd 88 	st.d	r9[-632],r6
8000642a:	2f f8       	sub	r8,-1
8000642c:	14 97       	mov	r7,r10
8000642e:	fb 48 06 b4 	st.w	sp[1716],r8
80006432:	40 38       	lddsp	r8,sp[0xc]
80006434:	e0 8f 03 b3 	bral	80006b9a <_vfprintf_r+0x1532>
80006438:	f2 e6 00 00 	ld.d	r6,r9[0]
8000643c:	40 38       	lddsp	r8,sp[0xc]
8000643e:	fa e7 00 00 	st.d	sp[0],r6
80006442:	2f 89       	sub	r9,-8
80006444:	14 97       	mov	r7,r10
80006446:	51 09       	stdsp	sp[0x40],r9
80006448:	e0 8f 03 a9 	bral	80006b9a <_vfprintf_r+0x1532>
8000644c:	ed b3 00 04 	bld	r3,0x4
80006450:	c1 61       	brne	8000647c <_vfprintf_r+0xe14>
80006452:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006456:	40 3e       	lddsp	lr,sp[0xc]
80006458:	58 0e       	cp.w	lr,0
8000645a:	c0 80       	breq	8000646a <_vfprintf_r+0xe02>
8000645c:	10 36       	cp.w	r6,r8
8000645e:	c6 74       	brge	8000652c <_vfprintf_r+0xec4>
80006460:	fa cc f9 44 	sub	r12,sp,-1724
80006464:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006468:	c8 08       	rjmp	80006568 <_vfprintf_r+0xf00>
8000646a:	ee ca ff ff 	sub	r10,r7,-1
8000646e:	10 37       	cp.w	r7,r8
80006470:	c7 f4       	brge	8000656e <_vfprintf_r+0xf06>
80006472:	fa cb f9 44 	sub	r11,sp,-1724
80006476:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000647a:	c7 68       	rjmp	80006566 <_vfprintf_r+0xefe>
8000647c:	ed b3 00 06 	bld	r3,0x6
80006480:	c4 a1       	brne	80006514 <_vfprintf_r+0xeac>
80006482:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006486:	40 3c       	lddsp	r12,sp[0xc]
80006488:	58 0c       	cp.w	r12,0
8000648a:	c1 d0       	breq	800064c4 <_vfprintf_r+0xe5c>
8000648c:	10 36       	cp.w	r6,r8
8000648e:	c0 64       	brge	8000649a <_vfprintf_r+0xe32>
80006490:	fa cb f9 44 	sub	r11,sp,-1724
80006494:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006498:	c1 f8       	rjmp	800064d6 <_vfprintf_r+0xe6e>
8000649a:	fa c8 f9 50 	sub	r8,sp,-1712
8000649e:	1a d8       	st.w	--sp,r8
800064a0:	fa c8 fa b8 	sub	r8,sp,-1352
800064a4:	1a d8       	st.w	--sp,r8
800064a6:	fa c8 fb b4 	sub	r8,sp,-1100
800064aa:	1a d8       	st.w	--sp,r8
800064ac:	fa c8 f9 40 	sub	r8,sp,-1728
800064b0:	fa c9 ff b4 	sub	r9,sp,-76
800064b4:	04 9a       	mov	r10,r2
800064b6:	0c 9b       	mov	r11,r6
800064b8:	0a 9c       	mov	r12,r5
800064ba:	fe b0 f7 3f 	rcall	80005338 <get_arg>
800064be:	2f dd       	sub	sp,-12
800064c0:	98 18       	ld.sh	r8,r12[0x2]
800064c2:	c2 68       	rjmp	8000650e <_vfprintf_r+0xea6>
800064c4:	ee ca ff ff 	sub	r10,r7,-1
800064c8:	10 37       	cp.w	r7,r8
800064ca:	c0 94       	brge	800064dc <_vfprintf_r+0xe74>
800064cc:	fa c9 f9 44 	sub	r9,sp,-1724
800064d0:	14 97       	mov	r7,r10
800064d2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800064d6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800064da:	c1 a8       	rjmp	8000650e <_vfprintf_r+0xea6>
800064dc:	41 09       	lddsp	r9,sp[0x40]
800064de:	59 f8       	cp.w	r8,31
800064e0:	e0 89 00 13 	brgt	80006506 <_vfprintf_r+0xe9e>
800064e4:	f2 cb ff fc 	sub	r11,r9,-4
800064e8:	51 0b       	stdsp	sp[0x40],r11
800064ea:	72 09       	ld.w	r9,r9[0x0]
800064ec:	fa c6 f9 44 	sub	r6,sp,-1724
800064f0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800064f4:	2f f8       	sub	r8,-1
800064f6:	f7 49 fd 88 	st.w	r11[-632],r9
800064fa:	fb 48 06 b4 	st.w	sp[1716],r8
800064fe:	14 97       	mov	r7,r10
80006500:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006504:	c0 58       	rjmp	8000650e <_vfprintf_r+0xea6>
80006506:	92 18       	ld.sh	r8,r9[0x2]
80006508:	14 97       	mov	r7,r10
8000650a:	2f c9       	sub	r9,-4
8000650c:	51 09       	stdsp	sp[0x40],r9
8000650e:	5c 78       	castu.h	r8
80006510:	50 18       	stdsp	sp[0x4],r8
80006512:	c4 68       	rjmp	8000659e <_vfprintf_r+0xf36>
80006514:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006518:	40 3c       	lddsp	r12,sp[0xc]
8000651a:	58 0c       	cp.w	r12,0
8000651c:	c1 d0       	breq	80006556 <_vfprintf_r+0xeee>
8000651e:	10 36       	cp.w	r6,r8
80006520:	c0 64       	brge	8000652c <_vfprintf_r+0xec4>
80006522:	fa cb f9 44 	sub	r11,sp,-1724
80006526:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000652a:	c1 f8       	rjmp	80006568 <_vfprintf_r+0xf00>
8000652c:	fa c8 f9 50 	sub	r8,sp,-1712
80006530:	1a d8       	st.w	--sp,r8
80006532:	fa c8 fa b8 	sub	r8,sp,-1352
80006536:	0c 9b       	mov	r11,r6
80006538:	1a d8       	st.w	--sp,r8
8000653a:	fa c8 fb b4 	sub	r8,sp,-1100
8000653e:	04 9a       	mov	r10,r2
80006540:	1a d8       	st.w	--sp,r8
80006542:	0a 9c       	mov	r12,r5
80006544:	fa c8 f9 40 	sub	r8,sp,-1728
80006548:	fa c9 ff b4 	sub	r9,sp,-76
8000654c:	fe b0 f6 f6 	rcall	80005338 <get_arg>
80006550:	2f dd       	sub	sp,-12
80006552:	78 0b       	ld.w	r11,r12[0x0]
80006554:	c2 48       	rjmp	8000659c <_vfprintf_r+0xf34>
80006556:	ee ca ff ff 	sub	r10,r7,-1
8000655a:	10 37       	cp.w	r7,r8
8000655c:	c0 94       	brge	8000656e <_vfprintf_r+0xf06>
8000655e:	fa c9 f9 44 	sub	r9,sp,-1724
80006562:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006566:	14 97       	mov	r7,r10
80006568:	ec fb fd 88 	ld.w	r11,r6[-632]
8000656c:	c1 88       	rjmp	8000659c <_vfprintf_r+0xf34>
8000656e:	41 09       	lddsp	r9,sp[0x40]
80006570:	59 f8       	cp.w	r8,31
80006572:	e0 89 00 11 	brgt	80006594 <_vfprintf_r+0xf2c>
80006576:	f2 cb ff fc 	sub	r11,r9,-4
8000657a:	51 0b       	stdsp	sp[0x40],r11
8000657c:	fa c6 f9 44 	sub	r6,sp,-1724
80006580:	72 0b       	ld.w	r11,r9[0x0]
80006582:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006586:	f3 4b fd 88 	st.w	r9[-632],r11
8000658a:	2f f8       	sub	r8,-1
8000658c:	14 97       	mov	r7,r10
8000658e:	fb 48 06 b4 	st.w	sp[1716],r8
80006592:	c0 58       	rjmp	8000659c <_vfprintf_r+0xf34>
80006594:	72 0b       	ld.w	r11,r9[0x0]
80006596:	14 97       	mov	r7,r10
80006598:	2f c9       	sub	r9,-4
8000659a:	51 09       	stdsp	sp[0x40],r9
8000659c:	50 1b       	stdsp	sp[0x4],r11
8000659e:	30 0e       	mov	lr,0
800065a0:	50 0e       	stdsp	sp[0x0],lr
800065a2:	1c 98       	mov	r8,lr
800065a4:	e0 8f 02 fb 	bral	80006b9a <_vfprintf_r+0x1532>
800065a8:	50 a7       	stdsp	sp[0x28],r7
800065aa:	50 80       	stdsp	sp[0x20],r0
800065ac:	0c 97       	mov	r7,r6
800065ae:	04 95       	mov	r5,r2
800065b0:	08 96       	mov	r6,r4
800065b2:	02 92       	mov	r2,r1
800065b4:	40 94       	lddsp	r4,sp[0x24]
800065b6:	40 41       	lddsp	r1,sp[0x10]
800065b8:	0e 99       	mov	r9,r7
800065ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065be:	40 3c       	lddsp	r12,sp[0xc]
800065c0:	58 0c       	cp.w	r12,0
800065c2:	c1 d0       	breq	800065fc <_vfprintf_r+0xf94>
800065c4:	10 36       	cp.w	r6,r8
800065c6:	c0 64       	brge	800065d2 <_vfprintf_r+0xf6a>
800065c8:	fa cb f9 44 	sub	r11,sp,-1724
800065cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800065d0:	c1 d8       	rjmp	8000660a <_vfprintf_r+0xfa2>
800065d2:	fa c8 f9 50 	sub	r8,sp,-1712
800065d6:	1a d8       	st.w	--sp,r8
800065d8:	fa c8 fa b8 	sub	r8,sp,-1352
800065dc:	1a d8       	st.w	--sp,r8
800065de:	fa c8 fb b4 	sub	r8,sp,-1100
800065e2:	1a d8       	st.w	--sp,r8
800065e4:	fa c9 ff b4 	sub	r9,sp,-76
800065e8:	fa c8 f9 40 	sub	r8,sp,-1728
800065ec:	04 9a       	mov	r10,r2
800065ee:	0c 9b       	mov	r11,r6
800065f0:	0a 9c       	mov	r12,r5
800065f2:	fe b0 f6 a3 	rcall	80005338 <get_arg>
800065f6:	2f dd       	sub	sp,-12
800065f8:	78 09       	ld.w	r9,r12[0x0]
800065fa:	c2 18       	rjmp	8000663c <_vfprintf_r+0xfd4>
800065fc:	2f f7       	sub	r7,-1
800065fe:	10 39       	cp.w	r9,r8
80006600:	c0 84       	brge	80006610 <_vfprintf_r+0xfa8>
80006602:	fa ca f9 44 	sub	r10,sp,-1724
80006606:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000660a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000660e:	c1 78       	rjmp	8000663c <_vfprintf_r+0xfd4>
80006610:	41 09       	lddsp	r9,sp[0x40]
80006612:	59 f8       	cp.w	r8,31
80006614:	e0 89 00 10 	brgt	80006634 <_vfprintf_r+0xfcc>
80006618:	f2 ca ff fc 	sub	r10,r9,-4
8000661c:	51 0a       	stdsp	sp[0x40],r10
8000661e:	fa c6 f9 44 	sub	r6,sp,-1724
80006622:	72 09       	ld.w	r9,r9[0x0]
80006624:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006628:	f5 49 fd 88 	st.w	r10[-632],r9
8000662c:	2f f8       	sub	r8,-1
8000662e:	fb 48 06 b4 	st.w	sp[1716],r8
80006632:	c0 58       	rjmp	8000663c <_vfprintf_r+0xfd4>
80006634:	f2 c8 ff fc 	sub	r8,r9,-4
80006638:	51 08       	stdsp	sp[0x40],r8
8000663a:	72 09       	ld.w	r9,r9[0x0]
8000663c:	33 08       	mov	r8,48
8000663e:	fb 68 06 b8 	st.b	sp[1720],r8
80006642:	37 88       	mov	r8,120
80006644:	30 0e       	mov	lr,0
80006646:	fb 68 06 b9 	st.b	sp[1721],r8
8000664a:	fe cc b9 72 	sub	r12,pc,-18062
8000664e:	50 19       	stdsp	sp[0x4],r9
80006650:	a1 b3       	sbr	r3,0x1
80006652:	50 0e       	stdsp	sp[0x0],lr
80006654:	50 dc       	stdsp	sp[0x34],r12
80006656:	30 28       	mov	r8,2
80006658:	37 80       	mov	r0,120
8000665a:	e0 8f 02 a0 	bral	80006b9a <_vfprintf_r+0x1532>
8000665e:	50 a7       	stdsp	sp[0x28],r7
80006660:	50 80       	stdsp	sp[0x20],r0
80006662:	10 90       	mov	r0,r8
80006664:	30 08       	mov	r8,0
80006666:	fb 68 06 bb 	st.b	sp[1723],r8
8000666a:	0c 97       	mov	r7,r6
8000666c:	04 95       	mov	r5,r2
8000666e:	08 96       	mov	r6,r4
80006670:	02 92       	mov	r2,r1
80006672:	40 94       	lddsp	r4,sp[0x24]
80006674:	40 41       	lddsp	r1,sp[0x10]
80006676:	0e 99       	mov	r9,r7
80006678:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000667c:	40 3b       	lddsp	r11,sp[0xc]
8000667e:	58 0b       	cp.w	r11,0
80006680:	c1 d0       	breq	800066ba <_vfprintf_r+0x1052>
80006682:	10 36       	cp.w	r6,r8
80006684:	c0 64       	brge	80006690 <_vfprintf_r+0x1028>
80006686:	fa ca f9 44 	sub	r10,sp,-1724
8000668a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000668e:	c1 d8       	rjmp	800066c8 <_vfprintf_r+0x1060>
80006690:	fa c8 f9 50 	sub	r8,sp,-1712
80006694:	1a d8       	st.w	--sp,r8
80006696:	fa c8 fa b8 	sub	r8,sp,-1352
8000669a:	1a d8       	st.w	--sp,r8
8000669c:	fa c8 fb b4 	sub	r8,sp,-1100
800066a0:	0c 9b       	mov	r11,r6
800066a2:	1a d8       	st.w	--sp,r8
800066a4:	04 9a       	mov	r10,r2
800066a6:	fa c8 f9 40 	sub	r8,sp,-1728
800066aa:	fa c9 ff b4 	sub	r9,sp,-76
800066ae:	0a 9c       	mov	r12,r5
800066b0:	fe b0 f6 44 	rcall	80005338 <get_arg>
800066b4:	2f dd       	sub	sp,-12
800066b6:	78 06       	ld.w	r6,r12[0x0]
800066b8:	c2 08       	rjmp	800066f8 <_vfprintf_r+0x1090>
800066ba:	2f f7       	sub	r7,-1
800066bc:	10 39       	cp.w	r9,r8
800066be:	c0 84       	brge	800066ce <_vfprintf_r+0x1066>
800066c0:	fa c9 f9 44 	sub	r9,sp,-1724
800066c4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800066c8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800066cc:	c1 68       	rjmp	800066f8 <_vfprintf_r+0x1090>
800066ce:	41 09       	lddsp	r9,sp[0x40]
800066d0:	59 f8       	cp.w	r8,31
800066d2:	e0 89 00 10 	brgt	800066f2 <_vfprintf_r+0x108a>
800066d6:	f2 ca ff fc 	sub	r10,r9,-4
800066da:	51 0a       	stdsp	sp[0x40],r10
800066dc:	72 06       	ld.w	r6,r9[0x0]
800066de:	fa ce f9 44 	sub	lr,sp,-1724
800066e2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800066e6:	f3 46 fd 88 	st.w	r9[-632],r6
800066ea:	2f f8       	sub	r8,-1
800066ec:	fb 48 06 b4 	st.w	sp[1716],r8
800066f0:	c0 48       	rjmp	800066f8 <_vfprintf_r+0x1090>
800066f2:	72 06       	ld.w	r6,r9[0x0]
800066f4:	2f c9       	sub	r9,-4
800066f6:	51 09       	stdsp	sp[0x40],r9
800066f8:	40 2c       	lddsp	r12,sp[0x8]
800066fa:	58 0c       	cp.w	r12,0
800066fc:	c1 05       	brlt	8000671c <_vfprintf_r+0x10b4>
800066fe:	18 9a       	mov	r10,r12
80006700:	30 0b       	mov	r11,0
80006702:	0c 9c       	mov	r12,r6
80006704:	e0 a0 0f bc 	rcall	8000867c <memchr>
80006708:	e0 80 02 dc 	breq	80006cc0 <_vfprintf_r+0x1658>
8000670c:	f8 06 01 02 	sub	r2,r12,r6
80006710:	40 2b       	lddsp	r11,sp[0x8]
80006712:	16 32       	cp.w	r2,r11
80006714:	e0 89 02 d6 	brgt	80006cc0 <_vfprintf_r+0x1658>
80006718:	e0 8f 02 d1 	bral	80006cba <_vfprintf_r+0x1652>
8000671c:	30 0a       	mov	r10,0
8000671e:	0c 9c       	mov	r12,r6
80006720:	50 2a       	stdsp	sp[0x8],r10
80006722:	e0 a0 14 5a 	rcall	80008fd6 <strlen>
80006726:	18 92       	mov	r2,r12
80006728:	e0 8f 02 cf 	bral	80006cc6 <_vfprintf_r+0x165e>
8000672c:	50 a7       	stdsp	sp[0x28],r7
8000672e:	50 80       	stdsp	sp[0x20],r0
80006730:	0c 97       	mov	r7,r6
80006732:	04 95       	mov	r5,r2
80006734:	08 96       	mov	r6,r4
80006736:	02 92       	mov	r2,r1
80006738:	40 94       	lddsp	r4,sp[0x24]
8000673a:	10 90       	mov	r0,r8
8000673c:	40 41       	lddsp	r1,sp[0x10]
8000673e:	a5 a3       	sbr	r3,0x4
80006740:	c0 a8       	rjmp	80006754 <_vfprintf_r+0x10ec>
80006742:	50 a7       	stdsp	sp[0x28],r7
80006744:	50 80       	stdsp	sp[0x20],r0
80006746:	0c 97       	mov	r7,r6
80006748:	04 95       	mov	r5,r2
8000674a:	08 96       	mov	r6,r4
8000674c:	02 92       	mov	r2,r1
8000674e:	40 94       	lddsp	r4,sp[0x24]
80006750:	10 90       	mov	r0,r8
80006752:	40 41       	lddsp	r1,sp[0x10]
80006754:	ed b3 00 05 	bld	r3,0x5
80006758:	c5 61       	brne	80006804 <_vfprintf_r+0x119c>
8000675a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000675e:	40 39       	lddsp	r9,sp[0xc]
80006760:	58 09       	cp.w	r9,0
80006762:	c2 10       	breq	800067a4 <_vfprintf_r+0x113c>
80006764:	10 36       	cp.w	r6,r8
80006766:	c0 74       	brge	80006774 <_vfprintf_r+0x110c>
80006768:	fa c8 f9 44 	sub	r8,sp,-1724
8000676c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006770:	c2 38       	rjmp	800067b6 <_vfprintf_r+0x114e>
80006772:	d7 03       	nop
80006774:	fa c8 f9 50 	sub	r8,sp,-1712
80006778:	1a d8       	st.w	--sp,r8
8000677a:	fa c8 fa b8 	sub	r8,sp,-1352
8000677e:	1a d8       	st.w	--sp,r8
80006780:	fa c8 fb b4 	sub	r8,sp,-1100
80006784:	1a d8       	st.w	--sp,r8
80006786:	fa c8 f9 40 	sub	r8,sp,-1728
8000678a:	fa c9 ff b4 	sub	r9,sp,-76
8000678e:	04 9a       	mov	r10,r2
80006790:	0c 9b       	mov	r11,r6
80006792:	0a 9c       	mov	r12,r5
80006794:	fe b0 f5 d2 	rcall	80005338 <get_arg>
80006798:	2f dd       	sub	sp,-12
8000679a:	f8 e8 00 00 	ld.d	r8,r12[0]
8000679e:	fa e9 00 00 	st.d	sp[0],r8
800067a2:	c2 e8       	rjmp	800067fe <_vfprintf_r+0x1196>
800067a4:	ee ca ff ff 	sub	r10,r7,-1
800067a8:	10 37       	cp.w	r7,r8
800067aa:	c0 b4       	brge	800067c0 <_vfprintf_r+0x1158>
800067ac:	fa c8 f9 44 	sub	r8,sp,-1724
800067b0:	14 97       	mov	r7,r10
800067b2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800067b6:	ec ea fd 88 	ld.d	r10,r6[-632]
800067ba:	fa eb 00 00 	st.d	sp[0],r10
800067be:	c2 08       	rjmp	800067fe <_vfprintf_r+0x1196>
800067c0:	41 09       	lddsp	r9,sp[0x40]
800067c2:	59 f8       	cp.w	r8,31
800067c4:	e0 89 00 16 	brgt	800067f0 <_vfprintf_r+0x1188>
800067c8:	f2 e6 00 00 	ld.d	r6,r9[0]
800067cc:	f2 cb ff f8 	sub	r11,r9,-8
800067d0:	fa e7 00 00 	st.d	sp[0],r6
800067d4:	51 0b       	stdsp	sp[0x40],r11
800067d6:	fa c6 f9 44 	sub	r6,sp,-1724
800067da:	ec 08 00 39 	add	r9,r6,r8<<0x3
800067de:	fa e6 00 00 	ld.d	r6,sp[0]
800067e2:	f2 e7 fd 88 	st.d	r9[-632],r6
800067e6:	2f f8       	sub	r8,-1
800067e8:	14 97       	mov	r7,r10
800067ea:	fb 48 06 b4 	st.w	sp[1716],r8
800067ee:	c0 88       	rjmp	800067fe <_vfprintf_r+0x1196>
800067f0:	f2 e6 00 00 	ld.d	r6,r9[0]
800067f4:	2f 89       	sub	r9,-8
800067f6:	fa e7 00 00 	st.d	sp[0],r6
800067fa:	51 09       	stdsp	sp[0x40],r9
800067fc:	14 97       	mov	r7,r10
800067fe:	30 18       	mov	r8,1
80006800:	e0 8f 01 cd 	bral	80006b9a <_vfprintf_r+0x1532>
80006804:	ed b3 00 04 	bld	r3,0x4
80006808:	c1 61       	brne	80006834 <_vfprintf_r+0x11cc>
8000680a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000680e:	40 3e       	lddsp	lr,sp[0xc]
80006810:	58 0e       	cp.w	lr,0
80006812:	c0 80       	breq	80006822 <_vfprintf_r+0x11ba>
80006814:	10 36       	cp.w	r6,r8
80006816:	c6 74       	brge	800068e4 <_vfprintf_r+0x127c>
80006818:	fa cc f9 44 	sub	r12,sp,-1724
8000681c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006820:	c8 08       	rjmp	80006920 <_vfprintf_r+0x12b8>
80006822:	ee ca ff ff 	sub	r10,r7,-1
80006826:	10 37       	cp.w	r7,r8
80006828:	c7 f4       	brge	80006926 <_vfprintf_r+0x12be>
8000682a:	fa cb f9 44 	sub	r11,sp,-1724
8000682e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006832:	c7 68       	rjmp	8000691e <_vfprintf_r+0x12b6>
80006834:	ed b3 00 06 	bld	r3,0x6
80006838:	c4 a1       	brne	800068cc <_vfprintf_r+0x1264>
8000683a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000683e:	40 3c       	lddsp	r12,sp[0xc]
80006840:	58 0c       	cp.w	r12,0
80006842:	c1 d0       	breq	8000687c <_vfprintf_r+0x1214>
80006844:	10 36       	cp.w	r6,r8
80006846:	c0 64       	brge	80006852 <_vfprintf_r+0x11ea>
80006848:	fa cb f9 44 	sub	r11,sp,-1724
8000684c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006850:	c1 f8       	rjmp	8000688e <_vfprintf_r+0x1226>
80006852:	fa c8 f9 50 	sub	r8,sp,-1712
80006856:	1a d8       	st.w	--sp,r8
80006858:	fa c8 fa b8 	sub	r8,sp,-1352
8000685c:	1a d8       	st.w	--sp,r8
8000685e:	fa c8 fb b4 	sub	r8,sp,-1100
80006862:	1a d8       	st.w	--sp,r8
80006864:	fa c8 f9 40 	sub	r8,sp,-1728
80006868:	fa c9 ff b4 	sub	r9,sp,-76
8000686c:	04 9a       	mov	r10,r2
8000686e:	0c 9b       	mov	r11,r6
80006870:	0a 9c       	mov	r12,r5
80006872:	fe b0 f5 63 	rcall	80005338 <get_arg>
80006876:	2f dd       	sub	sp,-12
80006878:	98 18       	ld.sh	r8,r12[0x2]
8000687a:	c2 68       	rjmp	800068c6 <_vfprintf_r+0x125e>
8000687c:	ee ca ff ff 	sub	r10,r7,-1
80006880:	10 37       	cp.w	r7,r8
80006882:	c0 94       	brge	80006894 <_vfprintf_r+0x122c>
80006884:	fa c9 f9 44 	sub	r9,sp,-1724
80006888:	14 97       	mov	r7,r10
8000688a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000688e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006892:	c1 a8       	rjmp	800068c6 <_vfprintf_r+0x125e>
80006894:	41 09       	lddsp	r9,sp[0x40]
80006896:	59 f8       	cp.w	r8,31
80006898:	e0 89 00 13 	brgt	800068be <_vfprintf_r+0x1256>
8000689c:	f2 cb ff fc 	sub	r11,r9,-4
800068a0:	51 0b       	stdsp	sp[0x40],r11
800068a2:	72 09       	ld.w	r9,r9[0x0]
800068a4:	fa c6 f9 44 	sub	r6,sp,-1724
800068a8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800068ac:	2f f8       	sub	r8,-1
800068ae:	f7 49 fd 88 	st.w	r11[-632],r9
800068b2:	fb 48 06 b4 	st.w	sp[1716],r8
800068b6:	14 97       	mov	r7,r10
800068b8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800068bc:	c0 58       	rjmp	800068c6 <_vfprintf_r+0x125e>
800068be:	92 18       	ld.sh	r8,r9[0x2]
800068c0:	14 97       	mov	r7,r10
800068c2:	2f c9       	sub	r9,-4
800068c4:	51 09       	stdsp	sp[0x40],r9
800068c6:	5c 78       	castu.h	r8
800068c8:	50 18       	stdsp	sp[0x4],r8
800068ca:	c4 68       	rjmp	80006956 <_vfprintf_r+0x12ee>
800068cc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800068d0:	40 3c       	lddsp	r12,sp[0xc]
800068d2:	58 0c       	cp.w	r12,0
800068d4:	c1 d0       	breq	8000690e <_vfprintf_r+0x12a6>
800068d6:	10 36       	cp.w	r6,r8
800068d8:	c0 64       	brge	800068e4 <_vfprintf_r+0x127c>
800068da:	fa cb f9 44 	sub	r11,sp,-1724
800068de:	f6 06 00 36 	add	r6,r11,r6<<0x3
800068e2:	c1 f8       	rjmp	80006920 <_vfprintf_r+0x12b8>
800068e4:	fa c8 f9 50 	sub	r8,sp,-1712
800068e8:	1a d8       	st.w	--sp,r8
800068ea:	fa c8 fa b8 	sub	r8,sp,-1352
800068ee:	0c 9b       	mov	r11,r6
800068f0:	1a d8       	st.w	--sp,r8
800068f2:	fa c8 fb b4 	sub	r8,sp,-1100
800068f6:	04 9a       	mov	r10,r2
800068f8:	1a d8       	st.w	--sp,r8
800068fa:	0a 9c       	mov	r12,r5
800068fc:	fa c8 f9 40 	sub	r8,sp,-1728
80006900:	fa c9 ff b4 	sub	r9,sp,-76
80006904:	fe b0 f5 1a 	rcall	80005338 <get_arg>
80006908:	2f dd       	sub	sp,-12
8000690a:	78 0b       	ld.w	r11,r12[0x0]
8000690c:	c2 48       	rjmp	80006954 <_vfprintf_r+0x12ec>
8000690e:	ee ca ff ff 	sub	r10,r7,-1
80006912:	10 37       	cp.w	r7,r8
80006914:	c0 94       	brge	80006926 <_vfprintf_r+0x12be>
80006916:	fa c9 f9 44 	sub	r9,sp,-1724
8000691a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000691e:	14 97       	mov	r7,r10
80006920:	ec fb fd 88 	ld.w	r11,r6[-632]
80006924:	c1 88       	rjmp	80006954 <_vfprintf_r+0x12ec>
80006926:	41 09       	lddsp	r9,sp[0x40]
80006928:	59 f8       	cp.w	r8,31
8000692a:	e0 89 00 11 	brgt	8000694c <_vfprintf_r+0x12e4>
8000692e:	f2 cb ff fc 	sub	r11,r9,-4
80006932:	51 0b       	stdsp	sp[0x40],r11
80006934:	fa c6 f9 44 	sub	r6,sp,-1724
80006938:	72 0b       	ld.w	r11,r9[0x0]
8000693a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000693e:	f3 4b fd 88 	st.w	r9[-632],r11
80006942:	2f f8       	sub	r8,-1
80006944:	14 97       	mov	r7,r10
80006946:	fb 48 06 b4 	st.w	sp[1716],r8
8000694a:	c0 58       	rjmp	80006954 <_vfprintf_r+0x12ec>
8000694c:	72 0b       	ld.w	r11,r9[0x0]
8000694e:	14 97       	mov	r7,r10
80006950:	2f c9       	sub	r9,-4
80006952:	51 09       	stdsp	sp[0x40],r9
80006954:	50 1b       	stdsp	sp[0x4],r11
80006956:	30 0e       	mov	lr,0
80006958:	30 18       	mov	r8,1
8000695a:	50 0e       	stdsp	sp[0x0],lr
8000695c:	c1 f9       	rjmp	80006b9a <_vfprintf_r+0x1532>
8000695e:	50 a7       	stdsp	sp[0x28],r7
80006960:	50 80       	stdsp	sp[0x20],r0
80006962:	0c 97       	mov	r7,r6
80006964:	04 95       	mov	r5,r2
80006966:	08 96       	mov	r6,r4
80006968:	02 92       	mov	r2,r1
8000696a:	fe cc bc 92 	sub	r12,pc,-17262
8000696e:	40 94       	lddsp	r4,sp[0x24]
80006970:	10 90       	mov	r0,r8
80006972:	40 41       	lddsp	r1,sp[0x10]
80006974:	50 dc       	stdsp	sp[0x34],r12
80006976:	ed b3 00 05 	bld	r3,0x5
8000697a:	c5 51       	brne	80006a24 <_vfprintf_r+0x13bc>
8000697c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006980:	40 3b       	lddsp	r11,sp[0xc]
80006982:	58 0b       	cp.w	r11,0
80006984:	c2 20       	breq	800069c8 <_vfprintf_r+0x1360>
80006986:	10 36       	cp.w	r6,r8
80006988:	c0 a4       	brge	8000699c <_vfprintf_r+0x1334>
8000698a:	fa ca f9 44 	sub	r10,sp,-1724
8000698e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006992:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006996:	fa e9 00 00 	st.d	sp[0],r8
8000699a:	cf 28       	rjmp	80006b7e <_vfprintf_r+0x1516>
8000699c:	fa c8 f9 50 	sub	r8,sp,-1712
800069a0:	1a d8       	st.w	--sp,r8
800069a2:	fa c8 fa b8 	sub	r8,sp,-1352
800069a6:	04 9a       	mov	r10,r2
800069a8:	1a d8       	st.w	--sp,r8
800069aa:	0c 9b       	mov	r11,r6
800069ac:	fa c8 fb b4 	sub	r8,sp,-1100
800069b0:	0a 9c       	mov	r12,r5
800069b2:	1a d8       	st.w	--sp,r8
800069b4:	fa c8 f9 40 	sub	r8,sp,-1728
800069b8:	fa c9 ff b4 	sub	r9,sp,-76
800069bc:	fe b0 f4 be 	rcall	80005338 <get_arg>
800069c0:	2f dd       	sub	sp,-12
800069c2:	f8 ea 00 00 	ld.d	r10,r12[0]
800069c6:	c0 c8       	rjmp	800069de <_vfprintf_r+0x1376>
800069c8:	ee ca ff ff 	sub	r10,r7,-1
800069cc:	10 37       	cp.w	r7,r8
800069ce:	c0 b4       	brge	800069e4 <_vfprintf_r+0x137c>
800069d0:	fa c9 f9 44 	sub	r9,sp,-1724
800069d4:	14 97       	mov	r7,r10
800069d6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800069da:	ec ea fd 88 	ld.d	r10,r6[-632]
800069de:	fa eb 00 00 	st.d	sp[0],r10
800069e2:	cc e8       	rjmp	80006b7e <_vfprintf_r+0x1516>
800069e4:	41 09       	lddsp	r9,sp[0x40]
800069e6:	59 f8       	cp.w	r8,31
800069e8:	e0 89 00 16 	brgt	80006a14 <_vfprintf_r+0x13ac>
800069ec:	f2 e6 00 00 	ld.d	r6,r9[0]
800069f0:	f2 cb ff f8 	sub	r11,r9,-8
800069f4:	fa e7 00 00 	st.d	sp[0],r6
800069f8:	51 0b       	stdsp	sp[0x40],r11
800069fa:	fa c6 f9 44 	sub	r6,sp,-1724
800069fe:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006a02:	fa e6 00 00 	ld.d	r6,sp[0]
80006a06:	f2 e7 fd 88 	st.d	r9[-632],r6
80006a0a:	2f f8       	sub	r8,-1
80006a0c:	14 97       	mov	r7,r10
80006a0e:	fb 48 06 b4 	st.w	sp[1716],r8
80006a12:	cb 68       	rjmp	80006b7e <_vfprintf_r+0x1516>
80006a14:	f2 e6 00 00 	ld.d	r6,r9[0]
80006a18:	2f 89       	sub	r9,-8
80006a1a:	fa e7 00 00 	st.d	sp[0],r6
80006a1e:	51 09       	stdsp	sp[0x40],r9
80006a20:	14 97       	mov	r7,r10
80006a22:	ca e8       	rjmp	80006b7e <_vfprintf_r+0x1516>
80006a24:	ed b3 00 04 	bld	r3,0x4
80006a28:	c1 71       	brne	80006a56 <_vfprintf_r+0x13ee>
80006a2a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a2e:	40 3e       	lddsp	lr,sp[0xc]
80006a30:	58 0e       	cp.w	lr,0
80006a32:	c0 80       	breq	80006a42 <_vfprintf_r+0x13da>
80006a34:	10 36       	cp.w	r6,r8
80006a36:	c6 94       	brge	80006b08 <_vfprintf_r+0x14a0>
80006a38:	fa cc f9 44 	sub	r12,sp,-1724
80006a3c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006a40:	c8 28       	rjmp	80006b44 <_vfprintf_r+0x14dc>
80006a42:	ee ca ff ff 	sub	r10,r7,-1
80006a46:	10 37       	cp.w	r7,r8
80006a48:	e0 84 00 81 	brge	80006b4a <_vfprintf_r+0x14e2>
80006a4c:	fa cb f9 44 	sub	r11,sp,-1724
80006a50:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006a54:	c7 78       	rjmp	80006b42 <_vfprintf_r+0x14da>
80006a56:	ed b3 00 06 	bld	r3,0x6
80006a5a:	c4 b1       	brne	80006af0 <_vfprintf_r+0x1488>
80006a5c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a60:	40 3c       	lddsp	r12,sp[0xc]
80006a62:	58 0c       	cp.w	r12,0
80006a64:	c1 d0       	breq	80006a9e <_vfprintf_r+0x1436>
80006a66:	10 36       	cp.w	r6,r8
80006a68:	c0 64       	brge	80006a74 <_vfprintf_r+0x140c>
80006a6a:	fa cb f9 44 	sub	r11,sp,-1724
80006a6e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006a72:	c1 f8       	rjmp	80006ab0 <_vfprintf_r+0x1448>
80006a74:	fa c8 f9 50 	sub	r8,sp,-1712
80006a78:	1a d8       	st.w	--sp,r8
80006a7a:	fa c8 fa b8 	sub	r8,sp,-1352
80006a7e:	1a d8       	st.w	--sp,r8
80006a80:	fa c8 fb b4 	sub	r8,sp,-1100
80006a84:	1a d8       	st.w	--sp,r8
80006a86:	fa c8 f9 40 	sub	r8,sp,-1728
80006a8a:	fa c9 ff b4 	sub	r9,sp,-76
80006a8e:	04 9a       	mov	r10,r2
80006a90:	0c 9b       	mov	r11,r6
80006a92:	0a 9c       	mov	r12,r5
80006a94:	fe b0 f4 52 	rcall	80005338 <get_arg>
80006a98:	2f dd       	sub	sp,-12
80006a9a:	98 18       	ld.sh	r8,r12[0x2]
80006a9c:	c2 78       	rjmp	80006aea <_vfprintf_r+0x1482>
80006a9e:	ee ca ff ff 	sub	r10,r7,-1
80006aa2:	10 37       	cp.w	r7,r8
80006aa4:	c0 a4       	brge	80006ab8 <_vfprintf_r+0x1450>
80006aa6:	fa c9 f9 44 	sub	r9,sp,-1724
80006aaa:	14 97       	mov	r7,r10
80006aac:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006ab0:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006ab4:	c1 b8       	rjmp	80006aea <_vfprintf_r+0x1482>
80006ab6:	d7 03       	nop
80006ab8:	41 09       	lddsp	r9,sp[0x40]
80006aba:	59 f8       	cp.w	r8,31
80006abc:	e0 89 00 13 	brgt	80006ae2 <_vfprintf_r+0x147a>
80006ac0:	f2 cb ff fc 	sub	r11,r9,-4
80006ac4:	51 0b       	stdsp	sp[0x40],r11
80006ac6:	72 09       	ld.w	r9,r9[0x0]
80006ac8:	fa c6 f9 44 	sub	r6,sp,-1724
80006acc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006ad0:	2f f8       	sub	r8,-1
80006ad2:	f7 49 fd 88 	st.w	r11[-632],r9
80006ad6:	fb 48 06 b4 	st.w	sp[1716],r8
80006ada:	14 97       	mov	r7,r10
80006adc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006ae0:	c0 58       	rjmp	80006aea <_vfprintf_r+0x1482>
80006ae2:	92 18       	ld.sh	r8,r9[0x2]
80006ae4:	14 97       	mov	r7,r10
80006ae6:	2f c9       	sub	r9,-4
80006ae8:	51 09       	stdsp	sp[0x40],r9
80006aea:	5c 78       	castu.h	r8
80006aec:	50 18       	stdsp	sp[0x4],r8
80006aee:	c4 68       	rjmp	80006b7a <_vfprintf_r+0x1512>
80006af0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006af4:	40 3c       	lddsp	r12,sp[0xc]
80006af6:	58 0c       	cp.w	r12,0
80006af8:	c1 d0       	breq	80006b32 <_vfprintf_r+0x14ca>
80006afa:	10 36       	cp.w	r6,r8
80006afc:	c0 64       	brge	80006b08 <_vfprintf_r+0x14a0>
80006afe:	fa cb f9 44 	sub	r11,sp,-1724
80006b02:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b06:	c1 f8       	rjmp	80006b44 <_vfprintf_r+0x14dc>
80006b08:	fa c8 f9 50 	sub	r8,sp,-1712
80006b0c:	1a d8       	st.w	--sp,r8
80006b0e:	fa c8 fa b8 	sub	r8,sp,-1352
80006b12:	0c 9b       	mov	r11,r6
80006b14:	1a d8       	st.w	--sp,r8
80006b16:	fa c8 fb b4 	sub	r8,sp,-1100
80006b1a:	04 9a       	mov	r10,r2
80006b1c:	1a d8       	st.w	--sp,r8
80006b1e:	0a 9c       	mov	r12,r5
80006b20:	fa c8 f9 40 	sub	r8,sp,-1728
80006b24:	fa c9 ff b4 	sub	r9,sp,-76
80006b28:	fe b0 f4 08 	rcall	80005338 <get_arg>
80006b2c:	2f dd       	sub	sp,-12
80006b2e:	78 0b       	ld.w	r11,r12[0x0]
80006b30:	c2 48       	rjmp	80006b78 <_vfprintf_r+0x1510>
80006b32:	ee ca ff ff 	sub	r10,r7,-1
80006b36:	10 37       	cp.w	r7,r8
80006b38:	c0 94       	brge	80006b4a <_vfprintf_r+0x14e2>
80006b3a:	fa c9 f9 44 	sub	r9,sp,-1724
80006b3e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006b42:	14 97       	mov	r7,r10
80006b44:	ec fb fd 88 	ld.w	r11,r6[-632]
80006b48:	c1 88       	rjmp	80006b78 <_vfprintf_r+0x1510>
80006b4a:	41 09       	lddsp	r9,sp[0x40]
80006b4c:	59 f8       	cp.w	r8,31
80006b4e:	e0 89 00 11 	brgt	80006b70 <_vfprintf_r+0x1508>
80006b52:	f2 cb ff fc 	sub	r11,r9,-4
80006b56:	51 0b       	stdsp	sp[0x40],r11
80006b58:	fa c6 f9 44 	sub	r6,sp,-1724
80006b5c:	72 0b       	ld.w	r11,r9[0x0]
80006b5e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006b62:	f3 4b fd 88 	st.w	r9[-632],r11
80006b66:	2f f8       	sub	r8,-1
80006b68:	14 97       	mov	r7,r10
80006b6a:	fb 48 06 b4 	st.w	sp[1716],r8
80006b6e:	c0 58       	rjmp	80006b78 <_vfprintf_r+0x1510>
80006b70:	72 0b       	ld.w	r11,r9[0x0]
80006b72:	14 97       	mov	r7,r10
80006b74:	2f c9       	sub	r9,-4
80006b76:	51 09       	stdsp	sp[0x40],r9
80006b78:	50 1b       	stdsp	sp[0x4],r11
80006b7a:	30 0e       	mov	lr,0
80006b7c:	50 0e       	stdsp	sp[0x0],lr
80006b7e:	40 08       	lddsp	r8,sp[0x0]
80006b80:	40 1c       	lddsp	r12,sp[0x4]
80006b82:	18 48       	or	r8,r12
80006b84:	5f 18       	srne	r8
80006b86:	e7 e8 00 08 	and	r8,r3,r8
80006b8a:	c0 70       	breq	80006b98 <_vfprintf_r+0x1530>
80006b8c:	33 08       	mov	r8,48
80006b8e:	fb 60 06 b9 	st.b	sp[1721],r0
80006b92:	a1 b3       	sbr	r3,0x1
80006b94:	fb 68 06 b8 	st.b	sp[1720],r8
80006b98:	30 28       	mov	r8,2
80006b9a:	30 09       	mov	r9,0
80006b9c:	fb 69 06 bb 	st.b	sp[1723],r9
80006ba0:	40 2b       	lddsp	r11,sp[0x8]
80006ba2:	58 0b       	cp.w	r11,0
80006ba4:	c0 25       	brlt	80006ba8 <_vfprintf_r+0x1540>
80006ba6:	a7 d3       	cbr	r3,0x7
80006ba8:	40 2a       	lddsp	r10,sp[0x8]
80006baa:	40 09       	lddsp	r9,sp[0x0]
80006bac:	58 0a       	cp.w	r10,0
80006bae:	5f 1a       	srne	r10
80006bb0:	40 16       	lddsp	r6,sp[0x4]
80006bb2:	fa c2 f9 78 	sub	r2,sp,-1672
80006bb6:	0c 49       	or	r9,r6
80006bb8:	5f 19       	srne	r9
80006bba:	f5 e9 10 09 	or	r9,r10,r9
80006bbe:	c5 c0       	breq	80006c76 <_vfprintf_r+0x160e>
80006bc0:	30 19       	mov	r9,1
80006bc2:	f2 08 18 00 	cp.b	r8,r9
80006bc6:	c0 60       	breq	80006bd2 <_vfprintf_r+0x156a>
80006bc8:	30 29       	mov	r9,2
80006bca:	f2 08 18 00 	cp.b	r8,r9
80006bce:	c0 41       	brne	80006bd6 <_vfprintf_r+0x156e>
80006bd0:	c3 c8       	rjmp	80006c48 <_vfprintf_r+0x15e0>
80006bd2:	04 96       	mov	r6,r2
80006bd4:	c3 08       	rjmp	80006c34 <_vfprintf_r+0x15cc>
80006bd6:	04 96       	mov	r6,r2
80006bd8:	fa e8 00 00 	ld.d	r8,sp[0]
80006bdc:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006be0:	2d 0a       	sub	r10,-48
80006be2:	0c fa       	st.b	--r6,r10
80006be4:	f0 0b 16 03 	lsr	r11,r8,0x3
80006be8:	f2 0c 16 03 	lsr	r12,r9,0x3
80006bec:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80006bf0:	18 99       	mov	r9,r12
80006bf2:	16 98       	mov	r8,r11
80006bf4:	58 08       	cp.w	r8,0
80006bf6:	5c 29       	cpc	r9
80006bf8:	cf 21       	brne	80006bdc <_vfprintf_r+0x1574>
80006bfa:	fa e9 00 00 	st.d	sp[0],r8
80006bfe:	ed b3 00 00 	bld	r3,0x0
80006c02:	c4 51       	brne	80006c8c <_vfprintf_r+0x1624>
80006c04:	33 09       	mov	r9,48
80006c06:	f2 0a 18 00 	cp.b	r10,r9
80006c0a:	c4 10       	breq	80006c8c <_vfprintf_r+0x1624>
80006c0c:	0c f9       	st.b	--r6,r9
80006c0e:	c3 f8       	rjmp	80006c8c <_vfprintf_r+0x1624>
80006c10:	fa ea 00 00 	ld.d	r10,sp[0]
80006c14:	30 a8       	mov	r8,10
80006c16:	30 09       	mov	r9,0
80006c18:	e0 a0 18 2d 	rcall	80009c72 <__avr32_umod64>
80006c1c:	30 a8       	mov	r8,10
80006c1e:	2d 0a       	sub	r10,-48
80006c20:	30 09       	mov	r9,0
80006c22:	ac 8a       	st.b	r6[0x0],r10
80006c24:	fa ea 00 00 	ld.d	r10,sp[0]
80006c28:	e0 a0 16 dc 	rcall	800099e0 <__avr32_udiv64>
80006c2c:	16 99       	mov	r9,r11
80006c2e:	14 98       	mov	r8,r10
80006c30:	fa e9 00 00 	st.d	sp[0],r8
80006c34:	20 16       	sub	r6,1
80006c36:	fa ea 00 00 	ld.d	r10,sp[0]
80006c3a:	58 9a       	cp.w	r10,9
80006c3c:	5c 2b       	cpc	r11
80006c3e:	fe 9b ff e9 	brhi	80006c10 <_vfprintf_r+0x15a8>
80006c42:	1b f8       	ld.ub	r8,sp[0x7]
80006c44:	2d 08       	sub	r8,-48
80006c46:	c2 08       	rjmp	80006c86 <_vfprintf_r+0x161e>
80006c48:	04 96       	mov	r6,r2
80006c4a:	fa e8 00 00 	ld.d	r8,sp[0]
80006c4e:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006c52:	40 de       	lddsp	lr,sp[0x34]
80006c54:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80006c58:	0c fa       	st.b	--r6,r10
80006c5a:	f2 0b 16 04 	lsr	r11,r9,0x4
80006c5e:	f0 0a 16 04 	lsr	r10,r8,0x4
80006c62:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006c66:	16 99       	mov	r9,r11
80006c68:	14 98       	mov	r8,r10
80006c6a:	58 08       	cp.w	r8,0
80006c6c:	5c 29       	cpc	r9
80006c6e:	cf 01       	brne	80006c4e <_vfprintf_r+0x15e6>
80006c70:	fa e9 00 00 	st.d	sp[0],r8
80006c74:	c0 c8       	rjmp	80006c8c <_vfprintf_r+0x1624>
80006c76:	58 08       	cp.w	r8,0
80006c78:	c0 91       	brne	80006c8a <_vfprintf_r+0x1622>
80006c7a:	ed b3 00 00 	bld	r3,0x0
80006c7e:	c0 61       	brne	80006c8a <_vfprintf_r+0x1622>
80006c80:	fa c6 f9 79 	sub	r6,sp,-1671
80006c84:	33 08       	mov	r8,48
80006c86:	ac 88       	st.b	r6[0x0],r8
80006c88:	c0 28       	rjmp	80006c8c <_vfprintf_r+0x1624>
80006c8a:	04 96       	mov	r6,r2
80006c8c:	0c 12       	sub	r2,r6
80006c8e:	c1 c8       	rjmp	80006cc6 <_vfprintf_r+0x165e>
80006c90:	50 a7       	stdsp	sp[0x28],r7
80006c92:	50 80       	stdsp	sp[0x20],r0
80006c94:	40 94       	lddsp	r4,sp[0x24]
80006c96:	0c 97       	mov	r7,r6
80006c98:	10 90       	mov	r0,r8
80006c9a:	04 95       	mov	r5,r2
80006c9c:	40 41       	lddsp	r1,sp[0x10]
80006c9e:	58 08       	cp.w	r8,0
80006ca0:	e0 80 04 50 	breq	80007540 <_vfprintf_r+0x1ed8>
80006ca4:	fb 68 06 60 	st.b	sp[1632],r8
80006ca8:	30 0c       	mov	r12,0
80006caa:	30 08       	mov	r8,0
80006cac:	30 12       	mov	r2,1
80006cae:	fb 68 06 bb 	st.b	sp[1723],r8
80006cb2:	50 2c       	stdsp	sp[0x8],r12
80006cb4:	fa c6 f9 a0 	sub	r6,sp,-1632
80006cb8:	c0 78       	rjmp	80006cc6 <_vfprintf_r+0x165e>
80006cba:	30 0b       	mov	r11,0
80006cbc:	50 2b       	stdsp	sp[0x8],r11
80006cbe:	c0 48       	rjmp	80006cc6 <_vfprintf_r+0x165e>
80006cc0:	40 22       	lddsp	r2,sp[0x8]
80006cc2:	30 0a       	mov	r10,0
80006cc4:	50 2a       	stdsp	sp[0x8],r10
80006cc6:	40 29       	lddsp	r9,sp[0x8]
80006cc8:	e4 09 0c 49 	max	r9,r2,r9
80006ccc:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006cd0:	50 39       	stdsp	sp[0xc],r9
80006cd2:	06 9e       	mov	lr,r3
80006cd4:	30 09       	mov	r9,0
80006cd6:	e2 1e 00 02 	andl	lr,0x2,COH
80006cda:	f2 08 18 00 	cp.b	r8,r9
80006cde:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80006ce2:	f7 b8 01 ff 	subne	r8,-1
80006ce6:	fb f8 1a 03 	st.wne	sp[0xc],r8
80006cea:	06 9b       	mov	r11,r3
80006cec:	58 0e       	cp.w	lr,0
80006cee:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80006cf2:	f7 bc 01 fe 	subne	r12,-2
80006cf6:	fb fc 1a 03 	st.wne	sp[0xc],r12
80006cfa:	e2 1b 00 84 	andl	r11,0x84,COH
80006cfe:	50 fe       	stdsp	sp[0x3c],lr
80006d00:	50 9b       	stdsp	sp[0x24],r11
80006d02:	c4 71       	brne	80006d90 <_vfprintf_r+0x1728>
80006d04:	40 8a       	lddsp	r10,sp[0x20]
80006d06:	40 39       	lddsp	r9,sp[0xc]
80006d08:	12 1a       	sub	r10,r9
80006d0a:	50 4a       	stdsp	sp[0x10],r10
80006d0c:	58 0a       	cp.w	r10,0
80006d0e:	e0 89 00 20 	brgt	80006d4e <_vfprintf_r+0x16e6>
80006d12:	c3 f8       	rjmp	80006d90 <_vfprintf_r+0x1728>
80006d14:	2f 09       	sub	r9,-16
80006d16:	2f f8       	sub	r8,-1
80006d18:	fe ce c0 28 	sub	lr,pc,-16344
80006d1c:	31 0c       	mov	r12,16
80006d1e:	fb 49 06 90 	st.w	sp[1680],r9
80006d22:	89 0e       	st.w	r4[0x0],lr
80006d24:	89 1c       	st.w	r4[0x4],r12
80006d26:	fb 48 06 8c 	st.w	sp[1676],r8
80006d2a:	58 78       	cp.w	r8,7
80006d2c:	e0 89 00 04 	brgt	80006d34 <_vfprintf_r+0x16cc>
80006d30:	2f 84       	sub	r4,-8
80006d32:	c0 b8       	rjmp	80006d48 <_vfprintf_r+0x16e0>
80006d34:	fa ca f9 78 	sub	r10,sp,-1672
80006d38:	02 9b       	mov	r11,r1
80006d3a:	0a 9c       	mov	r12,r5
80006d3c:	fe b0 f4 88 	rcall	8000564c <__sprint_r>
80006d40:	e0 81 04 10 	brne	80007560 <_vfprintf_r+0x1ef8>
80006d44:	fa c4 f9 e0 	sub	r4,sp,-1568
80006d48:	40 4b       	lddsp	r11,sp[0x10]
80006d4a:	21 0b       	sub	r11,16
80006d4c:	50 4b       	stdsp	sp[0x10],r11
80006d4e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006d52:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006d56:	fe ca c0 66 	sub	r10,pc,-16282
80006d5a:	40 4e       	lddsp	lr,sp[0x10]
80006d5c:	59 0e       	cp.w	lr,16
80006d5e:	fe 99 ff db 	brgt	80006d14 <_vfprintf_r+0x16ac>
80006d62:	1c 09       	add	r9,lr
80006d64:	2f f8       	sub	r8,-1
80006d66:	89 0a       	st.w	r4[0x0],r10
80006d68:	fb 49 06 90 	st.w	sp[1680],r9
80006d6c:	89 1e       	st.w	r4[0x4],lr
80006d6e:	fb 48 06 8c 	st.w	sp[1676],r8
80006d72:	58 78       	cp.w	r8,7
80006d74:	e0 89 00 04 	brgt	80006d7c <_vfprintf_r+0x1714>
80006d78:	2f 84       	sub	r4,-8
80006d7a:	c0 b8       	rjmp	80006d90 <_vfprintf_r+0x1728>
80006d7c:	fa ca f9 78 	sub	r10,sp,-1672
80006d80:	02 9b       	mov	r11,r1
80006d82:	0a 9c       	mov	r12,r5
80006d84:	fe b0 f4 64 	rcall	8000564c <__sprint_r>
80006d88:	e0 81 03 ec 	brne	80007560 <_vfprintf_r+0x1ef8>
80006d8c:	fa c4 f9 e0 	sub	r4,sp,-1568
80006d90:	30 09       	mov	r9,0
80006d92:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006d96:	f2 08 18 00 	cp.b	r8,r9
80006d9a:	c1 f0       	breq	80006dd8 <_vfprintf_r+0x1770>
80006d9c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006da0:	fa c9 f9 45 	sub	r9,sp,-1723
80006da4:	2f f8       	sub	r8,-1
80006da6:	89 09       	st.w	r4[0x0],r9
80006da8:	fb 48 06 90 	st.w	sp[1680],r8
80006dac:	30 19       	mov	r9,1
80006dae:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006db2:	89 19       	st.w	r4[0x4],r9
80006db4:	2f f8       	sub	r8,-1
80006db6:	fb 48 06 8c 	st.w	sp[1676],r8
80006dba:	58 78       	cp.w	r8,7
80006dbc:	e0 89 00 04 	brgt	80006dc4 <_vfprintf_r+0x175c>
80006dc0:	2f 84       	sub	r4,-8
80006dc2:	c0 b8       	rjmp	80006dd8 <_vfprintf_r+0x1770>
80006dc4:	fa ca f9 78 	sub	r10,sp,-1672
80006dc8:	02 9b       	mov	r11,r1
80006dca:	0a 9c       	mov	r12,r5
80006dcc:	fe b0 f4 40 	rcall	8000564c <__sprint_r>
80006dd0:	e0 81 03 c8 	brne	80007560 <_vfprintf_r+0x1ef8>
80006dd4:	fa c4 f9 e0 	sub	r4,sp,-1568
80006dd8:	40 fc       	lddsp	r12,sp[0x3c]
80006dda:	58 0c       	cp.w	r12,0
80006ddc:	c1 f0       	breq	80006e1a <_vfprintf_r+0x17b2>
80006dde:	fa f8 06 90 	ld.w	r8,sp[1680]
80006de2:	fa c9 f9 48 	sub	r9,sp,-1720
80006de6:	2f e8       	sub	r8,-2
80006de8:	89 09       	st.w	r4[0x0],r9
80006dea:	fb 48 06 90 	st.w	sp[1680],r8
80006dee:	30 29       	mov	r9,2
80006df0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006df4:	89 19       	st.w	r4[0x4],r9
80006df6:	2f f8       	sub	r8,-1
80006df8:	fb 48 06 8c 	st.w	sp[1676],r8
80006dfc:	58 78       	cp.w	r8,7
80006dfe:	e0 89 00 04 	brgt	80006e06 <_vfprintf_r+0x179e>
80006e02:	2f 84       	sub	r4,-8
80006e04:	c0 b8       	rjmp	80006e1a <_vfprintf_r+0x17b2>
80006e06:	fa ca f9 78 	sub	r10,sp,-1672
80006e0a:	02 9b       	mov	r11,r1
80006e0c:	0a 9c       	mov	r12,r5
80006e0e:	fe b0 f4 1f 	rcall	8000564c <__sprint_r>
80006e12:	e0 81 03 a7 	brne	80007560 <_vfprintf_r+0x1ef8>
80006e16:	fa c4 f9 e0 	sub	r4,sp,-1568
80006e1a:	40 9b       	lddsp	r11,sp[0x24]
80006e1c:	e0 4b 00 80 	cp.w	r11,128
80006e20:	c4 81       	brne	80006eb0 <_vfprintf_r+0x1848>
80006e22:	40 8a       	lddsp	r10,sp[0x20]
80006e24:	40 39       	lddsp	r9,sp[0xc]
80006e26:	12 1a       	sub	r10,r9
80006e28:	50 4a       	stdsp	sp[0x10],r10
80006e2a:	58 0a       	cp.w	r10,0
80006e2c:	e0 89 00 21 	brgt	80006e6e <_vfprintf_r+0x1806>
80006e30:	c4 08       	rjmp	80006eb0 <_vfprintf_r+0x1848>
80006e32:	2f 09       	sub	r9,-16
80006e34:	2f f8       	sub	r8,-1
80006e36:	fe ce c1 36 	sub	lr,pc,-16074
80006e3a:	31 0c       	mov	r12,16
80006e3c:	fb 49 06 90 	st.w	sp[1680],r9
80006e40:	89 0e       	st.w	r4[0x0],lr
80006e42:	89 1c       	st.w	r4[0x4],r12
80006e44:	fb 48 06 8c 	st.w	sp[1676],r8
80006e48:	58 78       	cp.w	r8,7
80006e4a:	e0 89 00 05 	brgt	80006e54 <_vfprintf_r+0x17ec>
80006e4e:	2f 84       	sub	r4,-8
80006e50:	c0 c8       	rjmp	80006e68 <_vfprintf_r+0x1800>
80006e52:	d7 03       	nop
80006e54:	fa ca f9 78 	sub	r10,sp,-1672
80006e58:	02 9b       	mov	r11,r1
80006e5a:	0a 9c       	mov	r12,r5
80006e5c:	fe b0 f3 f8 	rcall	8000564c <__sprint_r>
80006e60:	e0 81 03 80 	brne	80007560 <_vfprintf_r+0x1ef8>
80006e64:	fa c4 f9 e0 	sub	r4,sp,-1568
80006e68:	40 4b       	lddsp	r11,sp[0x10]
80006e6a:	21 0b       	sub	r11,16
80006e6c:	50 4b       	stdsp	sp[0x10],r11
80006e6e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006e72:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006e76:	fe ca c1 76 	sub	r10,pc,-16010
80006e7a:	40 4e       	lddsp	lr,sp[0x10]
80006e7c:	59 0e       	cp.w	lr,16
80006e7e:	fe 99 ff da 	brgt	80006e32 <_vfprintf_r+0x17ca>
80006e82:	1c 09       	add	r9,lr
80006e84:	2f f8       	sub	r8,-1
80006e86:	89 0a       	st.w	r4[0x0],r10
80006e88:	fb 49 06 90 	st.w	sp[1680],r9
80006e8c:	89 1e       	st.w	r4[0x4],lr
80006e8e:	fb 48 06 8c 	st.w	sp[1676],r8
80006e92:	58 78       	cp.w	r8,7
80006e94:	e0 89 00 04 	brgt	80006e9c <_vfprintf_r+0x1834>
80006e98:	2f 84       	sub	r4,-8
80006e9a:	c0 b8       	rjmp	80006eb0 <_vfprintf_r+0x1848>
80006e9c:	fa ca f9 78 	sub	r10,sp,-1672
80006ea0:	02 9b       	mov	r11,r1
80006ea2:	0a 9c       	mov	r12,r5
80006ea4:	fe b0 f3 d4 	rcall	8000564c <__sprint_r>
80006ea8:	e0 81 03 5c 	brne	80007560 <_vfprintf_r+0x1ef8>
80006eac:	fa c4 f9 e0 	sub	r4,sp,-1568
80006eb0:	40 2c       	lddsp	r12,sp[0x8]
80006eb2:	04 1c       	sub	r12,r2
80006eb4:	50 2c       	stdsp	sp[0x8],r12
80006eb6:	58 0c       	cp.w	r12,0
80006eb8:	e0 89 00 20 	brgt	80006ef8 <_vfprintf_r+0x1890>
80006ebc:	c3 f8       	rjmp	80006f3a <_vfprintf_r+0x18d2>
80006ebe:	2f 09       	sub	r9,-16
80006ec0:	2f f8       	sub	r8,-1
80006ec2:	fe cb c1 c2 	sub	r11,pc,-15934
80006ec6:	31 0a       	mov	r10,16
80006ec8:	fb 49 06 90 	st.w	sp[1680],r9
80006ecc:	89 0b       	st.w	r4[0x0],r11
80006ece:	89 1a       	st.w	r4[0x4],r10
80006ed0:	fb 48 06 8c 	st.w	sp[1676],r8
80006ed4:	58 78       	cp.w	r8,7
80006ed6:	e0 89 00 04 	brgt	80006ede <_vfprintf_r+0x1876>
80006eda:	2f 84       	sub	r4,-8
80006edc:	c0 b8       	rjmp	80006ef2 <_vfprintf_r+0x188a>
80006ede:	fa ca f9 78 	sub	r10,sp,-1672
80006ee2:	02 9b       	mov	r11,r1
80006ee4:	0a 9c       	mov	r12,r5
80006ee6:	fe b0 f3 b3 	rcall	8000564c <__sprint_r>
80006eea:	e0 81 03 3b 	brne	80007560 <_vfprintf_r+0x1ef8>
80006eee:	fa c4 f9 e0 	sub	r4,sp,-1568
80006ef2:	40 29       	lddsp	r9,sp[0x8]
80006ef4:	21 09       	sub	r9,16
80006ef6:	50 29       	stdsp	sp[0x8],r9
80006ef8:	fa f9 06 90 	ld.w	r9,sp[1680]
80006efc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006f00:	fe ca c2 00 	sub	r10,pc,-15872
80006f04:	40 2e       	lddsp	lr,sp[0x8]
80006f06:	59 0e       	cp.w	lr,16
80006f08:	fe 99 ff db 	brgt	80006ebe <_vfprintf_r+0x1856>
80006f0c:	1c 09       	add	r9,lr
80006f0e:	2f f8       	sub	r8,-1
80006f10:	89 0a       	st.w	r4[0x0],r10
80006f12:	fb 49 06 90 	st.w	sp[1680],r9
80006f16:	89 1e       	st.w	r4[0x4],lr
80006f18:	fb 48 06 8c 	st.w	sp[1676],r8
80006f1c:	58 78       	cp.w	r8,7
80006f1e:	e0 89 00 04 	brgt	80006f26 <_vfprintf_r+0x18be>
80006f22:	2f 84       	sub	r4,-8
80006f24:	c0 b8       	rjmp	80006f3a <_vfprintf_r+0x18d2>
80006f26:	fa ca f9 78 	sub	r10,sp,-1672
80006f2a:	02 9b       	mov	r11,r1
80006f2c:	0a 9c       	mov	r12,r5
80006f2e:	fe b0 f3 8f 	rcall	8000564c <__sprint_r>
80006f32:	e0 81 03 17 	brne	80007560 <_vfprintf_r+0x1ef8>
80006f36:	fa c4 f9 e0 	sub	r4,sp,-1568
80006f3a:	ed b3 00 08 	bld	r3,0x8
80006f3e:	c0 b0       	breq	80006f54 <_vfprintf_r+0x18ec>
80006f40:	fa f8 06 90 	ld.w	r8,sp[1680]
80006f44:	89 12       	st.w	r4[0x4],r2
80006f46:	89 06       	st.w	r4[0x0],r6
80006f48:	f0 02 00 02 	add	r2,r8,r2
80006f4c:	fb 42 06 90 	st.w	sp[1680],r2
80006f50:	e0 8f 01 d4 	bral	800072f8 <_vfprintf_r+0x1c90>
80006f54:	e0 40 00 65 	cp.w	r0,101
80006f58:	e0 8a 01 d6 	brle	80007304 <_vfprintf_r+0x1c9c>
80006f5c:	30 08       	mov	r8,0
80006f5e:	30 09       	mov	r9,0
80006f60:	40 5b       	lddsp	r11,sp[0x14]
80006f62:	40 7a       	lddsp	r10,sp[0x1c]
80006f64:	e0 a0 13 37 	rcall	800095d2 <__avr32_f64_cmp_eq>
80006f68:	c7 90       	breq	8000705a <_vfprintf_r+0x19f2>
80006f6a:	fa f8 06 90 	ld.w	r8,sp[1680]
80006f6e:	fe c9 c2 82 	sub	r9,pc,-15742
80006f72:	2f f8       	sub	r8,-1
80006f74:	89 09       	st.w	r4[0x0],r9
80006f76:	fb 48 06 90 	st.w	sp[1680],r8
80006f7a:	30 19       	mov	r9,1
80006f7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006f80:	89 19       	st.w	r4[0x4],r9
80006f82:	2f f8       	sub	r8,-1
80006f84:	fb 48 06 8c 	st.w	sp[1676],r8
80006f88:	58 78       	cp.w	r8,7
80006f8a:	e0 89 00 05 	brgt	80006f94 <_vfprintf_r+0x192c>
80006f8e:	2f 84       	sub	r4,-8
80006f90:	c0 c8       	rjmp	80006fa8 <_vfprintf_r+0x1940>
80006f92:	d7 03       	nop
80006f94:	fa ca f9 78 	sub	r10,sp,-1672
80006f98:	02 9b       	mov	r11,r1
80006f9a:	0a 9c       	mov	r12,r5
80006f9c:	fe b0 f3 58 	rcall	8000564c <__sprint_r>
80006fa0:	e0 81 02 e0 	brne	80007560 <_vfprintf_r+0x1ef8>
80006fa4:	fa c4 f9 e0 	sub	r4,sp,-1568
80006fa8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006fac:	40 6c       	lddsp	r12,sp[0x18]
80006fae:	18 38       	cp.w	r8,r12
80006fb0:	c0 55       	brlt	80006fba <_vfprintf_r+0x1952>
80006fb2:	ed b3 00 00 	bld	r3,0x0
80006fb6:	e0 81 02 6b 	brne	8000748c <_vfprintf_r+0x1e24>
80006fba:	fa f8 06 90 	ld.w	r8,sp[1680]
80006fbe:	2f f8       	sub	r8,-1
80006fc0:	40 cb       	lddsp	r11,sp[0x30]
80006fc2:	fb 48 06 90 	st.w	sp[1680],r8
80006fc6:	30 19       	mov	r9,1
80006fc8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006fcc:	89 0b       	st.w	r4[0x0],r11
80006fce:	2f f8       	sub	r8,-1
80006fd0:	89 19       	st.w	r4[0x4],r9
80006fd2:	fb 48 06 8c 	st.w	sp[1676],r8
80006fd6:	58 78       	cp.w	r8,7
80006fd8:	e0 89 00 04 	brgt	80006fe0 <_vfprintf_r+0x1978>
80006fdc:	2f 84       	sub	r4,-8
80006fde:	c0 b8       	rjmp	80006ff4 <_vfprintf_r+0x198c>
80006fe0:	fa ca f9 78 	sub	r10,sp,-1672
80006fe4:	02 9b       	mov	r11,r1
80006fe6:	0a 9c       	mov	r12,r5
80006fe8:	fe b0 f3 32 	rcall	8000564c <__sprint_r>
80006fec:	e0 81 02 ba 	brne	80007560 <_vfprintf_r+0x1ef8>
80006ff0:	fa c4 f9 e0 	sub	r4,sp,-1568
80006ff4:	40 66       	lddsp	r6,sp[0x18]
80006ff6:	20 16       	sub	r6,1
80006ff8:	58 06       	cp.w	r6,0
80006ffa:	e0 89 00 1d 	brgt	80007034 <_vfprintf_r+0x19cc>
80006ffe:	e0 8f 02 47 	bral	8000748c <_vfprintf_r+0x1e24>
80007002:	2f 09       	sub	r9,-16
80007004:	2f f8       	sub	r8,-1
80007006:	fb 49 06 90 	st.w	sp[1680],r9
8000700a:	89 02       	st.w	r4[0x0],r2
8000700c:	89 10       	st.w	r4[0x4],r0
8000700e:	fb 48 06 8c 	st.w	sp[1676],r8
80007012:	58 78       	cp.w	r8,7
80007014:	e0 89 00 04 	brgt	8000701c <_vfprintf_r+0x19b4>
80007018:	2f 84       	sub	r4,-8
8000701a:	c0 b8       	rjmp	80007030 <_vfprintf_r+0x19c8>
8000701c:	fa ca f9 78 	sub	r10,sp,-1672
80007020:	02 9b       	mov	r11,r1
80007022:	0a 9c       	mov	r12,r5
80007024:	fe b0 f3 14 	rcall	8000564c <__sprint_r>
80007028:	e0 81 02 9c 	brne	80007560 <_vfprintf_r+0x1ef8>
8000702c:	fa c4 f9 e0 	sub	r4,sp,-1568
80007030:	21 06       	sub	r6,16
80007032:	c0 48       	rjmp	8000703a <_vfprintf_r+0x19d2>
80007034:	fe c2 c3 34 	sub	r2,pc,-15564
80007038:	31 00       	mov	r0,16
8000703a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000703e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007042:	fe ca c3 42 	sub	r10,pc,-15550
80007046:	59 06       	cp.w	r6,16
80007048:	fe 99 ff dd 	brgt	80007002 <_vfprintf_r+0x199a>
8000704c:	0c 09       	add	r9,r6
8000704e:	89 0a       	st.w	r4[0x0],r10
80007050:	fb 49 06 90 	st.w	sp[1680],r9
80007054:	2f f8       	sub	r8,-1
80007056:	89 16       	st.w	r4[0x4],r6
80007058:	c5 39       	rjmp	800072fe <_vfprintf_r+0x1c96>
8000705a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000705e:	58 0a       	cp.w	r10,0
80007060:	e0 89 00 92 	brgt	80007184 <_vfprintf_r+0x1b1c>
80007064:	fa f8 06 90 	ld.w	r8,sp[1680]
80007068:	fe c9 c3 7c 	sub	r9,pc,-15492
8000706c:	2f f8       	sub	r8,-1
8000706e:	89 09       	st.w	r4[0x0],r9
80007070:	fb 48 06 90 	st.w	sp[1680],r8
80007074:	30 19       	mov	r9,1
80007076:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000707a:	89 19       	st.w	r4[0x4],r9
8000707c:	2f f8       	sub	r8,-1
8000707e:	fb 48 06 8c 	st.w	sp[1676],r8
80007082:	58 78       	cp.w	r8,7
80007084:	e0 89 00 04 	brgt	8000708c <_vfprintf_r+0x1a24>
80007088:	2f 84       	sub	r4,-8
8000708a:	c0 b8       	rjmp	800070a0 <_vfprintf_r+0x1a38>
8000708c:	fa ca f9 78 	sub	r10,sp,-1672
80007090:	02 9b       	mov	r11,r1
80007092:	0a 9c       	mov	r12,r5
80007094:	fe b0 f2 dc 	rcall	8000564c <__sprint_r>
80007098:	e0 81 02 64 	brne	80007560 <_vfprintf_r+0x1ef8>
8000709c:	fa c4 f9 e0 	sub	r4,sp,-1568
800070a0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800070a4:	58 08       	cp.w	r8,0
800070a6:	c0 81       	brne	800070b6 <_vfprintf_r+0x1a4e>
800070a8:	40 6a       	lddsp	r10,sp[0x18]
800070aa:	58 0a       	cp.w	r10,0
800070ac:	c0 51       	brne	800070b6 <_vfprintf_r+0x1a4e>
800070ae:	ed b3 00 00 	bld	r3,0x0
800070b2:	e0 81 01 ed 	brne	8000748c <_vfprintf_r+0x1e24>
800070b6:	40 c9       	lddsp	r9,sp[0x30]
800070b8:	fa f8 06 90 	ld.w	r8,sp[1680]
800070bc:	2f f8       	sub	r8,-1
800070be:	89 09       	st.w	r4[0x0],r9
800070c0:	fb 48 06 90 	st.w	sp[1680],r8
800070c4:	30 19       	mov	r9,1
800070c6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800070ca:	89 19       	st.w	r4[0x4],r9
800070cc:	2f f8       	sub	r8,-1
800070ce:	fb 48 06 8c 	st.w	sp[1676],r8
800070d2:	58 78       	cp.w	r8,7
800070d4:	e0 89 00 04 	brgt	800070dc <_vfprintf_r+0x1a74>
800070d8:	2f 84       	sub	r4,-8
800070da:	c0 b8       	rjmp	800070f0 <_vfprintf_r+0x1a88>
800070dc:	fa ca f9 78 	sub	r10,sp,-1672
800070e0:	02 9b       	mov	r11,r1
800070e2:	0a 9c       	mov	r12,r5
800070e4:	fe b0 f2 b4 	rcall	8000564c <__sprint_r>
800070e8:	e0 81 02 3c 	brne	80007560 <_vfprintf_r+0x1ef8>
800070ec:	fa c4 f9 e0 	sub	r4,sp,-1568
800070f0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800070f4:	5c 32       	neg	r2
800070f6:	58 02       	cp.w	r2,0
800070f8:	e0 89 00 1d 	brgt	80007132 <_vfprintf_r+0x1aca>
800070fc:	c3 d8       	rjmp	80007176 <_vfprintf_r+0x1b0e>
800070fe:	2f 09       	sub	r9,-16
80007100:	2f f8       	sub	r8,-1
80007102:	31 0e       	mov	lr,16
80007104:	fb 49 06 90 	st.w	sp[1680],r9
80007108:	89 00       	st.w	r4[0x0],r0
8000710a:	89 1e       	st.w	r4[0x4],lr
8000710c:	fb 48 06 8c 	st.w	sp[1676],r8
80007110:	58 78       	cp.w	r8,7
80007112:	e0 89 00 04 	brgt	8000711a <_vfprintf_r+0x1ab2>
80007116:	2f 84       	sub	r4,-8
80007118:	c0 b8       	rjmp	8000712e <_vfprintf_r+0x1ac6>
8000711a:	fa ca f9 78 	sub	r10,sp,-1672
8000711e:	02 9b       	mov	r11,r1
80007120:	0a 9c       	mov	r12,r5
80007122:	fe b0 f2 95 	rcall	8000564c <__sprint_r>
80007126:	e0 81 02 1d 	brne	80007560 <_vfprintf_r+0x1ef8>
8000712a:	fa c4 f9 e0 	sub	r4,sp,-1568
8000712e:	21 02       	sub	r2,16
80007130:	c0 38       	rjmp	80007136 <_vfprintf_r+0x1ace>
80007132:	fe c0 c4 32 	sub	r0,pc,-15310
80007136:	fa f9 06 90 	ld.w	r9,sp[1680]
8000713a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000713e:	fe ca c4 3e 	sub	r10,pc,-15298
80007142:	59 02       	cp.w	r2,16
80007144:	fe 99 ff dd 	brgt	800070fe <_vfprintf_r+0x1a96>
80007148:	04 09       	add	r9,r2
8000714a:	2f f8       	sub	r8,-1
8000714c:	89 0a       	st.w	r4[0x0],r10
8000714e:	fb 49 06 90 	st.w	sp[1680],r9
80007152:	89 12       	st.w	r4[0x4],r2
80007154:	fb 48 06 8c 	st.w	sp[1676],r8
80007158:	58 78       	cp.w	r8,7
8000715a:	e0 89 00 04 	brgt	80007162 <_vfprintf_r+0x1afa>
8000715e:	2f 84       	sub	r4,-8
80007160:	c0 b8       	rjmp	80007176 <_vfprintf_r+0x1b0e>
80007162:	fa ca f9 78 	sub	r10,sp,-1672
80007166:	02 9b       	mov	r11,r1
80007168:	0a 9c       	mov	r12,r5
8000716a:	fe b0 f2 71 	rcall	8000564c <__sprint_r>
8000716e:	e0 81 01 f9 	brne	80007560 <_vfprintf_r+0x1ef8>
80007172:	fa c4 f9 e0 	sub	r4,sp,-1568
80007176:	40 6c       	lddsp	r12,sp[0x18]
80007178:	fa f8 06 90 	ld.w	r8,sp[1680]
8000717c:	89 06       	st.w	r4[0x0],r6
8000717e:	89 1c       	st.w	r4[0x4],r12
80007180:	18 08       	add	r8,r12
80007182:	cb 98       	rjmp	800072f4 <_vfprintf_r+0x1c8c>
80007184:	fa f9 06 90 	ld.w	r9,sp[1680]
80007188:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000718c:	40 6b       	lddsp	r11,sp[0x18]
8000718e:	16 3a       	cp.w	r10,r11
80007190:	c6 f5       	brlt	8000726e <_vfprintf_r+0x1c06>
80007192:	16 09       	add	r9,r11
80007194:	2f f8       	sub	r8,-1
80007196:	89 06       	st.w	r4[0x0],r6
80007198:	fb 49 06 90 	st.w	sp[1680],r9
8000719c:	89 1b       	st.w	r4[0x4],r11
8000719e:	fb 48 06 8c 	st.w	sp[1676],r8
800071a2:	58 78       	cp.w	r8,7
800071a4:	e0 89 00 04 	brgt	800071ac <_vfprintf_r+0x1b44>
800071a8:	2f 84       	sub	r4,-8
800071aa:	c0 b8       	rjmp	800071c0 <_vfprintf_r+0x1b58>
800071ac:	fa ca f9 78 	sub	r10,sp,-1672
800071b0:	02 9b       	mov	r11,r1
800071b2:	0a 9c       	mov	r12,r5
800071b4:	fe b0 f2 4c 	rcall	8000564c <__sprint_r>
800071b8:	e0 81 01 d4 	brne	80007560 <_vfprintf_r+0x1ef8>
800071bc:	fa c4 f9 e0 	sub	r4,sp,-1568
800071c0:	fa f6 06 ac 	ld.w	r6,sp[1708]
800071c4:	40 6a       	lddsp	r10,sp[0x18]
800071c6:	14 16       	sub	r6,r10
800071c8:	58 06       	cp.w	r6,0
800071ca:	e0 89 00 1c 	brgt	80007202 <_vfprintf_r+0x1b9a>
800071ce:	c3 d8       	rjmp	80007248 <_vfprintf_r+0x1be0>
800071d0:	2f 09       	sub	r9,-16
800071d2:	2f f8       	sub	r8,-1
800071d4:	fb 49 06 90 	st.w	sp[1680],r9
800071d8:	89 02       	st.w	r4[0x0],r2
800071da:	89 10       	st.w	r4[0x4],r0
800071dc:	fb 48 06 8c 	st.w	sp[1676],r8
800071e0:	58 78       	cp.w	r8,7
800071e2:	e0 89 00 04 	brgt	800071ea <_vfprintf_r+0x1b82>
800071e6:	2f 84       	sub	r4,-8
800071e8:	c0 b8       	rjmp	800071fe <_vfprintf_r+0x1b96>
800071ea:	fa ca f9 78 	sub	r10,sp,-1672
800071ee:	02 9b       	mov	r11,r1
800071f0:	0a 9c       	mov	r12,r5
800071f2:	fe b0 f2 2d 	rcall	8000564c <__sprint_r>
800071f6:	e0 81 01 b5 	brne	80007560 <_vfprintf_r+0x1ef8>
800071fa:	fa c4 f9 e0 	sub	r4,sp,-1568
800071fe:	21 06       	sub	r6,16
80007200:	c0 48       	rjmp	80007208 <_vfprintf_r+0x1ba0>
80007202:	fe c2 c5 02 	sub	r2,pc,-15102
80007206:	31 00       	mov	r0,16
80007208:	fa f9 06 90 	ld.w	r9,sp[1680]
8000720c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007210:	fe ca c5 10 	sub	r10,pc,-15088
80007214:	59 06       	cp.w	r6,16
80007216:	fe 99 ff dd 	brgt	800071d0 <_vfprintf_r+0x1b68>
8000721a:	0c 09       	add	r9,r6
8000721c:	2f f8       	sub	r8,-1
8000721e:	89 0a       	st.w	r4[0x0],r10
80007220:	fb 49 06 90 	st.w	sp[1680],r9
80007224:	89 16       	st.w	r4[0x4],r6
80007226:	fb 48 06 8c 	st.w	sp[1676],r8
8000722a:	58 78       	cp.w	r8,7
8000722c:	e0 89 00 04 	brgt	80007234 <_vfprintf_r+0x1bcc>
80007230:	2f 84       	sub	r4,-8
80007232:	c0 b8       	rjmp	80007248 <_vfprintf_r+0x1be0>
80007234:	fa ca f9 78 	sub	r10,sp,-1672
80007238:	02 9b       	mov	r11,r1
8000723a:	0a 9c       	mov	r12,r5
8000723c:	fe b0 f2 08 	rcall	8000564c <__sprint_r>
80007240:	e0 81 01 90 	brne	80007560 <_vfprintf_r+0x1ef8>
80007244:	fa c4 f9 e0 	sub	r4,sp,-1568
80007248:	ed b3 00 00 	bld	r3,0x0
8000724c:	e0 81 01 20 	brne	8000748c <_vfprintf_r+0x1e24>
80007250:	40 c9       	lddsp	r9,sp[0x30]
80007252:	fa f8 06 90 	ld.w	r8,sp[1680]
80007256:	2f f8       	sub	r8,-1
80007258:	89 09       	st.w	r4[0x0],r9
8000725a:	fb 48 06 90 	st.w	sp[1680],r8
8000725e:	30 19       	mov	r9,1
80007260:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007264:	89 19       	st.w	r4[0x4],r9
80007266:	2f f8       	sub	r8,-1
80007268:	fb 48 06 8c 	st.w	sp[1676],r8
8000726c:	c0 29       	rjmp	80007470 <_vfprintf_r+0x1e08>
8000726e:	14 09       	add	r9,r10
80007270:	2f f8       	sub	r8,-1
80007272:	fb 49 06 90 	st.w	sp[1680],r9
80007276:	89 06       	st.w	r4[0x0],r6
80007278:	89 1a       	st.w	r4[0x4],r10
8000727a:	fb 48 06 8c 	st.w	sp[1676],r8
8000727e:	58 78       	cp.w	r8,7
80007280:	e0 89 00 04 	brgt	80007288 <_vfprintf_r+0x1c20>
80007284:	2f 84       	sub	r4,-8
80007286:	c0 b8       	rjmp	8000729c <_vfprintf_r+0x1c34>
80007288:	fa ca f9 78 	sub	r10,sp,-1672
8000728c:	02 9b       	mov	r11,r1
8000728e:	0a 9c       	mov	r12,r5
80007290:	fe b0 f1 de 	rcall	8000564c <__sprint_r>
80007294:	e0 81 01 66 	brne	80007560 <_vfprintf_r+0x1ef8>
80007298:	fa c4 f9 e0 	sub	r4,sp,-1568
8000729c:	40 c8       	lddsp	r8,sp[0x30]
8000729e:	89 08       	st.w	r4[0x0],r8
800072a0:	fa f8 06 90 	ld.w	r8,sp[1680]
800072a4:	2f f8       	sub	r8,-1
800072a6:	30 19       	mov	r9,1
800072a8:	fb 48 06 90 	st.w	sp[1680],r8
800072ac:	89 19       	st.w	r4[0x4],r9
800072ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
800072b2:	2f f8       	sub	r8,-1
800072b4:	fb 48 06 8c 	st.w	sp[1676],r8
800072b8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800072bc:	58 78       	cp.w	r8,7
800072be:	e0 89 00 04 	brgt	800072c6 <_vfprintf_r+0x1c5e>
800072c2:	2f 84       	sub	r4,-8
800072c4:	c0 b8       	rjmp	800072da <_vfprintf_r+0x1c72>
800072c6:	fa ca f9 78 	sub	r10,sp,-1672
800072ca:	02 9b       	mov	r11,r1
800072cc:	0a 9c       	mov	r12,r5
800072ce:	fe b0 f1 bf 	rcall	8000564c <__sprint_r>
800072d2:	e0 81 01 47 	brne	80007560 <_vfprintf_r+0x1ef8>
800072d6:	fa c4 f9 e0 	sub	r4,sp,-1568
800072da:	04 06       	add	r6,r2
800072dc:	fa f8 06 ac 	ld.w	r8,sp[1708]
800072e0:	89 06       	st.w	r4[0x0],r6
800072e2:	fa f9 06 90 	ld.w	r9,sp[1680]
800072e6:	40 66       	lddsp	r6,sp[0x18]
800072e8:	40 6e       	lddsp	lr,sp[0x18]
800072ea:	10 16       	sub	r6,r8
800072ec:	f2 08 01 08 	sub	r8,r9,r8
800072f0:	89 16       	st.w	r4[0x4],r6
800072f2:	1c 08       	add	r8,lr
800072f4:	fb 48 06 90 	st.w	sp[1680],r8
800072f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800072fc:	2f f8       	sub	r8,-1
800072fe:	fb 48 06 8c 	st.w	sp[1676],r8
80007302:	cb 78       	rjmp	80007470 <_vfprintf_r+0x1e08>
80007304:	40 6c       	lddsp	r12,sp[0x18]
80007306:	58 1c       	cp.w	r12,1
80007308:	e0 89 00 06 	brgt	80007314 <_vfprintf_r+0x1cac>
8000730c:	ed b3 00 00 	bld	r3,0x0
80007310:	e0 81 00 85 	brne	8000741a <_vfprintf_r+0x1db2>
80007314:	fa f8 06 90 	ld.w	r8,sp[1680]
80007318:	2f f8       	sub	r8,-1
8000731a:	30 19       	mov	r9,1
8000731c:	fb 48 06 90 	st.w	sp[1680],r8
80007320:	89 06       	st.w	r4[0x0],r6
80007322:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007326:	89 19       	st.w	r4[0x4],r9
80007328:	2f f8       	sub	r8,-1
8000732a:	fb 48 06 8c 	st.w	sp[1676],r8
8000732e:	58 78       	cp.w	r8,7
80007330:	e0 89 00 04 	brgt	80007338 <_vfprintf_r+0x1cd0>
80007334:	2f 84       	sub	r4,-8
80007336:	c0 b8       	rjmp	8000734c <_vfprintf_r+0x1ce4>
80007338:	fa ca f9 78 	sub	r10,sp,-1672
8000733c:	02 9b       	mov	r11,r1
8000733e:	0a 9c       	mov	r12,r5
80007340:	fe b0 f1 86 	rcall	8000564c <__sprint_r>
80007344:	e0 81 01 0e 	brne	80007560 <_vfprintf_r+0x1ef8>
80007348:	fa c4 f9 e0 	sub	r4,sp,-1568
8000734c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007350:	2f f8       	sub	r8,-1
80007352:	40 cb       	lddsp	r11,sp[0x30]
80007354:	fb 48 06 90 	st.w	sp[1680],r8
80007358:	30 19       	mov	r9,1
8000735a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000735e:	89 0b       	st.w	r4[0x0],r11
80007360:	2f f8       	sub	r8,-1
80007362:	89 19       	st.w	r4[0x4],r9
80007364:	fb 48 06 8c 	st.w	sp[1676],r8
80007368:	58 78       	cp.w	r8,7
8000736a:	e0 89 00 05 	brgt	80007374 <_vfprintf_r+0x1d0c>
8000736e:	2f 84       	sub	r4,-8
80007370:	c0 c8       	rjmp	80007388 <_vfprintf_r+0x1d20>
80007372:	d7 03       	nop
80007374:	fa ca f9 78 	sub	r10,sp,-1672
80007378:	02 9b       	mov	r11,r1
8000737a:	0a 9c       	mov	r12,r5
8000737c:	fe b0 f1 68 	rcall	8000564c <__sprint_r>
80007380:	e0 81 00 f0 	brne	80007560 <_vfprintf_r+0x1ef8>
80007384:	fa c4 f9 e0 	sub	r4,sp,-1568
80007388:	30 08       	mov	r8,0
8000738a:	30 09       	mov	r9,0
8000738c:	40 5b       	lddsp	r11,sp[0x14]
8000738e:	40 7a       	lddsp	r10,sp[0x1c]
80007390:	e0 a0 11 21 	rcall	800095d2 <__avr32_f64_cmp_eq>
80007394:	40 68       	lddsp	r8,sp[0x18]
80007396:	20 18       	sub	r8,1
80007398:	58 0c       	cp.w	r12,0
8000739a:	c0 d1       	brne	800073b4 <_vfprintf_r+0x1d4c>
8000739c:	2f f6       	sub	r6,-1
8000739e:	89 18       	st.w	r4[0x4],r8
800073a0:	89 06       	st.w	r4[0x0],r6
800073a2:	fa f6 06 90 	ld.w	r6,sp[1680]
800073a6:	10 06       	add	r6,r8
800073a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073ac:	fb 46 06 90 	st.w	sp[1680],r6
800073b0:	2f f8       	sub	r8,-1
800073b2:	c3 18       	rjmp	80007414 <_vfprintf_r+0x1dac>
800073b4:	10 96       	mov	r6,r8
800073b6:	58 08       	cp.w	r8,0
800073b8:	e0 89 00 1c 	brgt	800073f0 <_vfprintf_r+0x1d88>
800073bc:	c4 b8       	rjmp	80007452 <_vfprintf_r+0x1dea>
800073be:	2f 09       	sub	r9,-16
800073c0:	2f f8       	sub	r8,-1
800073c2:	fb 49 06 90 	st.w	sp[1680],r9
800073c6:	89 02       	st.w	r4[0x0],r2
800073c8:	89 10       	st.w	r4[0x4],r0
800073ca:	fb 48 06 8c 	st.w	sp[1676],r8
800073ce:	58 78       	cp.w	r8,7
800073d0:	e0 89 00 04 	brgt	800073d8 <_vfprintf_r+0x1d70>
800073d4:	2f 84       	sub	r4,-8
800073d6:	c0 b8       	rjmp	800073ec <_vfprintf_r+0x1d84>
800073d8:	fa ca f9 78 	sub	r10,sp,-1672
800073dc:	02 9b       	mov	r11,r1
800073de:	0a 9c       	mov	r12,r5
800073e0:	fe b0 f1 36 	rcall	8000564c <__sprint_r>
800073e4:	e0 81 00 be 	brne	80007560 <_vfprintf_r+0x1ef8>
800073e8:	fa c4 f9 e0 	sub	r4,sp,-1568
800073ec:	21 06       	sub	r6,16
800073ee:	c0 48       	rjmp	800073f6 <_vfprintf_r+0x1d8e>
800073f0:	fe c2 c6 f0 	sub	r2,pc,-14608
800073f4:	31 00       	mov	r0,16
800073f6:	fa f9 06 90 	ld.w	r9,sp[1680]
800073fa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073fe:	fe ca c6 fe 	sub	r10,pc,-14594
80007402:	59 06       	cp.w	r6,16
80007404:	fe 99 ff dd 	brgt	800073be <_vfprintf_r+0x1d56>
80007408:	0c 09       	add	r9,r6
8000740a:	89 0a       	st.w	r4[0x0],r10
8000740c:	fb 49 06 90 	st.w	sp[1680],r9
80007410:	2f f8       	sub	r8,-1
80007412:	89 16       	st.w	r4[0x4],r6
80007414:	fb 48 06 8c 	st.w	sp[1676],r8
80007418:	c0 e8       	rjmp	80007434 <_vfprintf_r+0x1dcc>
8000741a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000741e:	2f f8       	sub	r8,-1
80007420:	30 19       	mov	r9,1
80007422:	fb 48 06 90 	st.w	sp[1680],r8
80007426:	89 06       	st.w	r4[0x0],r6
80007428:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000742c:	89 19       	st.w	r4[0x4],r9
8000742e:	2f f8       	sub	r8,-1
80007430:	fb 48 06 8c 	st.w	sp[1676],r8
80007434:	58 78       	cp.w	r8,7
80007436:	e0 89 00 04 	brgt	8000743e <_vfprintf_r+0x1dd6>
8000743a:	2f 84       	sub	r4,-8
8000743c:	c0 b8       	rjmp	80007452 <_vfprintf_r+0x1dea>
8000743e:	fa ca f9 78 	sub	r10,sp,-1672
80007442:	02 9b       	mov	r11,r1
80007444:	0a 9c       	mov	r12,r5
80007446:	fe b0 f1 03 	rcall	8000564c <__sprint_r>
8000744a:	e0 81 00 8b 	brne	80007560 <_vfprintf_r+0x1ef8>
8000744e:	fa c4 f9 e0 	sub	r4,sp,-1568
80007452:	40 ea       	lddsp	r10,sp[0x38]
80007454:	fa f8 06 90 	ld.w	r8,sp[1680]
80007458:	14 08       	add	r8,r10
8000745a:	fa c9 f9 64 	sub	r9,sp,-1692
8000745e:	fb 48 06 90 	st.w	sp[1680],r8
80007462:	89 1a       	st.w	r4[0x4],r10
80007464:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007468:	89 09       	st.w	r4[0x0],r9
8000746a:	2f f8       	sub	r8,-1
8000746c:	fb 48 06 8c 	st.w	sp[1676],r8
80007470:	58 78       	cp.w	r8,7
80007472:	e0 89 00 04 	brgt	8000747a <_vfprintf_r+0x1e12>
80007476:	2f 84       	sub	r4,-8
80007478:	c0 a8       	rjmp	8000748c <_vfprintf_r+0x1e24>
8000747a:	fa ca f9 78 	sub	r10,sp,-1672
8000747e:	02 9b       	mov	r11,r1
80007480:	0a 9c       	mov	r12,r5
80007482:	fe b0 f0 e5 	rcall	8000564c <__sprint_r>
80007486:	c6 d1       	brne	80007560 <_vfprintf_r+0x1ef8>
80007488:	fa c4 f9 e0 	sub	r4,sp,-1568
8000748c:	e2 13 00 04 	andl	r3,0x4,COH
80007490:	c3 f0       	breq	8000750e <_vfprintf_r+0x1ea6>
80007492:	40 86       	lddsp	r6,sp[0x20]
80007494:	40 39       	lddsp	r9,sp[0xc]
80007496:	12 16       	sub	r6,r9
80007498:	58 06       	cp.w	r6,0
8000749a:	e0 89 00 1a 	brgt	800074ce <_vfprintf_r+0x1e66>
8000749e:	c3 88       	rjmp	8000750e <_vfprintf_r+0x1ea6>
800074a0:	2f 09       	sub	r9,-16
800074a2:	2f f8       	sub	r8,-1
800074a4:	fb 49 06 90 	st.w	sp[1680],r9
800074a8:	89 03       	st.w	r4[0x0],r3
800074aa:	89 12       	st.w	r4[0x4],r2
800074ac:	fb 48 06 8c 	st.w	sp[1676],r8
800074b0:	58 78       	cp.w	r8,7
800074b2:	e0 89 00 04 	brgt	800074ba <_vfprintf_r+0x1e52>
800074b6:	2f 84       	sub	r4,-8
800074b8:	c0 98       	rjmp	800074ca <_vfprintf_r+0x1e62>
800074ba:	00 9a       	mov	r10,r0
800074bc:	02 9b       	mov	r11,r1
800074be:	0a 9c       	mov	r12,r5
800074c0:	fe b0 f0 c6 	rcall	8000564c <__sprint_r>
800074c4:	c4 e1       	brne	80007560 <_vfprintf_r+0x1ef8>
800074c6:	fa c4 f9 e0 	sub	r4,sp,-1568
800074ca:	21 06       	sub	r6,16
800074cc:	c0 68       	rjmp	800074d8 <_vfprintf_r+0x1e70>
800074ce:	fe c3 c7 de 	sub	r3,pc,-14370
800074d2:	31 02       	mov	r2,16
800074d4:	fa c0 f9 78 	sub	r0,sp,-1672
800074d8:	fa f9 06 90 	ld.w	r9,sp[1680]
800074dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800074e0:	fe ca c7 f0 	sub	r10,pc,-14352
800074e4:	59 06       	cp.w	r6,16
800074e6:	fe 99 ff dd 	brgt	800074a0 <_vfprintf_r+0x1e38>
800074ea:	0c 09       	add	r9,r6
800074ec:	2f f8       	sub	r8,-1
800074ee:	89 0a       	st.w	r4[0x0],r10
800074f0:	89 16       	st.w	r4[0x4],r6
800074f2:	fb 49 06 90 	st.w	sp[1680],r9
800074f6:	fb 48 06 8c 	st.w	sp[1676],r8
800074fa:	58 78       	cp.w	r8,7
800074fc:	e0 8a 00 09 	brle	8000750e <_vfprintf_r+0x1ea6>
80007500:	fa ca f9 78 	sub	r10,sp,-1672
80007504:	02 9b       	mov	r11,r1
80007506:	0a 9c       	mov	r12,r5
80007508:	fe b0 f0 a2 	rcall	8000564c <__sprint_r>
8000750c:	c2 a1       	brne	80007560 <_vfprintf_r+0x1ef8>
8000750e:	40 bc       	lddsp	r12,sp[0x2c]
80007510:	40 36       	lddsp	r6,sp[0xc]
80007512:	40 8e       	lddsp	lr,sp[0x20]
80007514:	ec 0e 0c 48 	max	r8,r6,lr
80007518:	10 0c       	add	r12,r8
8000751a:	50 bc       	stdsp	sp[0x2c],r12
8000751c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007520:	58 08       	cp.w	r8,0
80007522:	c0 80       	breq	80007532 <_vfprintf_r+0x1eca>
80007524:	fa ca f9 78 	sub	r10,sp,-1672
80007528:	02 9b       	mov	r11,r1
8000752a:	0a 9c       	mov	r12,r5
8000752c:	fe b0 f0 90 	rcall	8000564c <__sprint_r>
80007530:	c1 81       	brne	80007560 <_vfprintf_r+0x1ef8>
80007532:	30 0b       	mov	r11,0
80007534:	fa c4 f9 e0 	sub	r4,sp,-1568
80007538:	fb 4b 06 8c 	st.w	sp[1676],r11
8000753c:	fe 9f f1 23 	bral	80005782 <_vfprintf_r+0x11a>
80007540:	fa f8 06 90 	ld.w	r8,sp[1680]
80007544:	58 08       	cp.w	r8,0
80007546:	c0 80       	breq	80007556 <_vfprintf_r+0x1eee>
80007548:	0a 9c       	mov	r12,r5
8000754a:	fa ca f9 78 	sub	r10,sp,-1672
8000754e:	02 9b       	mov	r11,r1
80007550:	fe b0 f0 7e 	rcall	8000564c <__sprint_r>
80007554:	c0 61       	brne	80007560 <_vfprintf_r+0x1ef8>
80007556:	30 08       	mov	r8,0
80007558:	fb 48 06 8c 	st.w	sp[1676],r8
8000755c:	c0 28       	rjmp	80007560 <_vfprintf_r+0x1ef8>
8000755e:	40 41       	lddsp	r1,sp[0x10]
80007560:	82 68       	ld.sh	r8,r1[0xc]
80007562:	ed b8 00 06 	bld	r8,0x6
80007566:	c0 31       	brne	8000756c <_vfprintf_r+0x1f04>
80007568:	3f fa       	mov	r10,-1
8000756a:	50 ba       	stdsp	sp[0x2c],r10
8000756c:	40 bc       	lddsp	r12,sp[0x2c]
8000756e:	fe 3d f9 44 	sub	sp,-1724
80007572:	d8 32       	popm	r0-r7,pc

80007574 <_write_r>:
80007574:	d4 21       	pushm	r4-r7,lr
80007576:	16 98       	mov	r8,r11
80007578:	18 97       	mov	r7,r12
8000757a:	10 9c       	mov	r12,r8
8000757c:	30 08       	mov	r8,0
8000757e:	14 9b       	mov	r11,r10
80007580:	e0 66 19 f4 	mov	r6,6644
80007584:	12 9a       	mov	r10,r9
80007586:	8d 08       	st.w	r6[0x0],r8
80007588:	fe b0 ee 78 	rcall	80005278 <_write>
8000758c:	5b fc       	cp.w	r12,-1
8000758e:	c0 51       	brne	80007598 <_write_r+0x24>
80007590:	6c 08       	ld.w	r8,r6[0x0]
80007592:	58 08       	cp.w	r8,0
80007594:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007598:	d8 22       	popm	r4-r7,pc
8000759a:	d7 03       	nop

8000759c <__swsetup_r>:
8000759c:	d4 21       	pushm	r4-r7,lr
8000759e:	e0 68 00 fc 	mov	r8,252
800075a2:	18 96       	mov	r6,r12
800075a4:	16 97       	mov	r7,r11
800075a6:	70 0c       	ld.w	r12,r8[0x0]
800075a8:	58 0c       	cp.w	r12,0
800075aa:	c0 60       	breq	800075b6 <__swsetup_r+0x1a>
800075ac:	78 68       	ld.w	r8,r12[0x18]
800075ae:	58 08       	cp.w	r8,0
800075b0:	c0 31       	brne	800075b6 <__swsetup_r+0x1a>
800075b2:	fe b0 e8 f9 	rcall	800047a4 <__sinit>
800075b6:	fe c8 cb e2 	sub	r8,pc,-13342
800075ba:	10 37       	cp.w	r7,r8
800075bc:	c0 61       	brne	800075c8 <__swsetup_r+0x2c>
800075be:	e0 68 00 fc 	mov	r8,252
800075c2:	70 08       	ld.w	r8,r8[0x0]
800075c4:	70 07       	ld.w	r7,r8[0x0]
800075c6:	c1 28       	rjmp	800075ea <__swsetup_r+0x4e>
800075c8:	fe c8 cb d4 	sub	r8,pc,-13356
800075cc:	10 37       	cp.w	r7,r8
800075ce:	c0 61       	brne	800075da <__swsetup_r+0x3e>
800075d0:	e0 68 00 fc 	mov	r8,252
800075d4:	70 08       	ld.w	r8,r8[0x0]
800075d6:	70 17       	ld.w	r7,r8[0x4]
800075d8:	c0 98       	rjmp	800075ea <__swsetup_r+0x4e>
800075da:	fe c8 cb c6 	sub	r8,pc,-13370
800075de:	10 37       	cp.w	r7,r8
800075e0:	c0 51       	brne	800075ea <__swsetup_r+0x4e>
800075e2:	e0 68 00 fc 	mov	r8,252
800075e6:	70 08       	ld.w	r8,r8[0x0]
800075e8:	70 27       	ld.w	r7,r8[0x8]
800075ea:	8e 68       	ld.sh	r8,r7[0xc]
800075ec:	ed b8 00 03 	bld	r8,0x3
800075f0:	c1 e0       	breq	8000762c <__swsetup_r+0x90>
800075f2:	ed b8 00 04 	bld	r8,0x4
800075f6:	c3 e1       	brne	80007672 <__swsetup_r+0xd6>
800075f8:	ed b8 00 02 	bld	r8,0x2
800075fc:	c1 51       	brne	80007626 <__swsetup_r+0x8a>
800075fe:	6e db       	ld.w	r11,r7[0x34]
80007600:	58 0b       	cp.w	r11,0
80007602:	c0 a0       	breq	80007616 <__swsetup_r+0x7a>
80007604:	ee c8 ff bc 	sub	r8,r7,-68
80007608:	10 3b       	cp.w	r11,r8
8000760a:	c0 40       	breq	80007612 <__swsetup_r+0x76>
8000760c:	0c 9c       	mov	r12,r6
8000760e:	fe b0 e9 65 	rcall	800048d8 <_free_r>
80007612:	30 08       	mov	r8,0
80007614:	8f d8       	st.w	r7[0x34],r8
80007616:	8e 68       	ld.sh	r8,r7[0xc]
80007618:	e0 18 ff db 	andl	r8,0xffdb
8000761c:	ae 68       	st.h	r7[0xc],r8
8000761e:	30 08       	mov	r8,0
80007620:	8f 18       	st.w	r7[0x4],r8
80007622:	6e 48       	ld.w	r8,r7[0x10]
80007624:	8f 08       	st.w	r7[0x0],r8
80007626:	8e 68       	ld.sh	r8,r7[0xc]
80007628:	a3 b8       	sbr	r8,0x3
8000762a:	ae 68       	st.h	r7[0xc],r8
8000762c:	6e 48       	ld.w	r8,r7[0x10]
8000762e:	58 08       	cp.w	r8,0
80007630:	c0 b1       	brne	80007646 <__swsetup_r+0xaa>
80007632:	8e 68       	ld.sh	r8,r7[0xc]
80007634:	e2 18 02 80 	andl	r8,0x280,COH
80007638:	e0 48 02 00 	cp.w	r8,512
8000763c:	c0 50       	breq	80007646 <__swsetup_r+0xaa>
8000763e:	0c 9c       	mov	r12,r6
80007640:	0e 9b       	mov	r11,r7
80007642:	fe b0 ea 47 	rcall	80004ad0 <__smakebuf_r>
80007646:	8e 69       	ld.sh	r9,r7[0xc]
80007648:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000764c:	c0 70       	breq	8000765a <__swsetup_r+0xbe>
8000764e:	30 08       	mov	r8,0
80007650:	8f 28       	st.w	r7[0x8],r8
80007652:	6e 58       	ld.w	r8,r7[0x14]
80007654:	5c 38       	neg	r8
80007656:	8f 68       	st.w	r7[0x18],r8
80007658:	c0 68       	rjmp	80007664 <__swsetup_r+0xc8>
8000765a:	ed b9 00 01 	bld	r9,0x1
8000765e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80007662:	8f 28       	st.w	r7[0x8],r8
80007664:	6e 48       	ld.w	r8,r7[0x10]
80007666:	58 08       	cp.w	r8,0
80007668:	c0 61       	brne	80007674 <__swsetup_r+0xd8>
8000766a:	8e 68       	ld.sh	r8,r7[0xc]
8000766c:	ed b8 00 07 	bld	r8,0x7
80007670:	c0 21       	brne	80007674 <__swsetup_r+0xd8>
80007672:	dc 2a       	popm	r4-r7,pc,r12=-1
80007674:	d8 2a       	popm	r4-r7,pc,r12=0
80007676:	d7 03       	nop

80007678 <_close_r>:
80007678:	d4 21       	pushm	r4-r7,lr
8000767a:	30 08       	mov	r8,0
8000767c:	18 97       	mov	r7,r12
8000767e:	e0 66 19 f4 	mov	r6,6644
80007682:	16 9c       	mov	r12,r11
80007684:	8d 08       	st.w	r6[0x0],r8
80007686:	fe b0 ed db 	rcall	8000523c <_close>
8000768a:	5b fc       	cp.w	r12,-1
8000768c:	c0 51       	brne	80007696 <_close_r+0x1e>
8000768e:	6c 08       	ld.w	r8,r6[0x0]
80007690:	58 08       	cp.w	r8,0
80007692:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007696:	d8 22       	popm	r4-r7,pc

80007698 <quorem>:
80007698:	d4 31       	pushm	r0-r7,lr
8000769a:	20 2d       	sub	sp,8
8000769c:	18 97       	mov	r7,r12
8000769e:	78 48       	ld.w	r8,r12[0x10]
800076a0:	76 46       	ld.w	r6,r11[0x10]
800076a2:	0c 38       	cp.w	r8,r6
800076a4:	c0 34       	brge	800076aa <quorem+0x12>
800076a6:	30 0c       	mov	r12,0
800076a8:	c8 58       	rjmp	800077b2 <quorem+0x11a>
800076aa:	ec c2 ff fc 	sub	r2,r6,-4
800076ae:	f6 c3 ff ec 	sub	r3,r11,-20
800076b2:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800076b6:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800076ba:	2f f9       	sub	r9,-1
800076bc:	20 16       	sub	r6,1
800076be:	f8 09 0d 08 	divu	r8,r12,r9
800076c2:	f6 02 00 22 	add	r2,r11,r2<<0x2
800076c6:	ee c4 ff ec 	sub	r4,r7,-20
800076ca:	10 95       	mov	r5,r8
800076cc:	58 08       	cp.w	r8,0
800076ce:	c4 10       	breq	80007750 <quorem+0xb8>
800076d0:	30 09       	mov	r9,0
800076d2:	06 9a       	mov	r10,r3
800076d4:	08 98       	mov	r8,r4
800076d6:	12 91       	mov	r1,r9
800076d8:	50 0b       	stdsp	sp[0x0],r11
800076da:	70 0e       	ld.w	lr,r8[0x0]
800076dc:	b1 8e       	lsr	lr,0x10
800076de:	50 1e       	stdsp	sp[0x4],lr
800076e0:	15 0e       	ld.w	lr,r10++
800076e2:	fc 00 16 10 	lsr	r0,lr,0x10
800076e6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800076ea:	ea 0e 03 41 	mac	r1,r5,lr
800076ee:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800076f2:	b1 81       	lsr	r1,0x10
800076f4:	40 1b       	lddsp	r11,sp[0x4]
800076f6:	ea 00 02 40 	mul	r0,r5,r0
800076fa:	e2 00 00 00 	add	r0,r1,r0
800076fe:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80007702:	02 1b       	sub	r11,r1
80007704:	50 1b       	stdsp	sp[0x4],r11
80007706:	70 0b       	ld.w	r11,r8[0x0]
80007708:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000770c:	02 09       	add	r9,r1
8000770e:	f2 0e 01 0e 	sub	lr,r9,lr
80007712:	b0 1e       	st.h	r8[0x2],lr
80007714:	fc 09 14 10 	asr	r9,lr,0x10
80007718:	40 1e       	lddsp	lr,sp[0x4]
8000771a:	fc 09 00 09 	add	r9,lr,r9
8000771e:	b0 09       	st.h	r8[0x0],r9
80007720:	e0 01 16 10 	lsr	r1,r0,0x10
80007724:	2f c8       	sub	r8,-4
80007726:	b1 49       	asr	r9,0x10
80007728:	04 3a       	cp.w	r10,r2
8000772a:	fe 98 ff d8 	brls	800076da <quorem+0x42>
8000772e:	40 0b       	lddsp	r11,sp[0x0]
80007730:	58 0c       	cp.w	r12,0
80007732:	c0 f1       	brne	80007750 <quorem+0xb8>
80007734:	ec c8 ff fb 	sub	r8,r6,-5
80007738:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000773c:	c0 28       	rjmp	80007740 <quorem+0xa8>
8000773e:	20 16       	sub	r6,1
80007740:	20 48       	sub	r8,4
80007742:	08 38       	cp.w	r8,r4
80007744:	e0 88 00 05 	brls	8000774e <quorem+0xb6>
80007748:	70 09       	ld.w	r9,r8[0x0]
8000774a:	58 09       	cp.w	r9,0
8000774c:	cf 90       	breq	8000773e <quorem+0xa6>
8000774e:	8f 46       	st.w	r7[0x10],r6
80007750:	0e 9c       	mov	r12,r7
80007752:	e0 a0 08 36 	rcall	800087be <__mcmp>
80007756:	c2 d5       	brlt	800077b0 <quorem+0x118>
80007758:	2f f5       	sub	r5,-1
8000775a:	08 98       	mov	r8,r4
8000775c:	30 09       	mov	r9,0
8000775e:	07 0b       	ld.w	r11,r3++
80007760:	f6 0a 16 10 	lsr	r10,r11,0x10
80007764:	70 0c       	ld.w	r12,r8[0x0]
80007766:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000776a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000776e:	14 1e       	sub	lr,r10
80007770:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007774:	16 1a       	sub	r10,r11
80007776:	12 0a       	add	r10,r9
80007778:	b0 1a       	st.h	r8[0x2],r10
8000777a:	b1 4a       	asr	r10,0x10
8000777c:	fc 0a 00 09 	add	r9,lr,r10
80007780:	b0 09       	st.h	r8[0x0],r9
80007782:	2f c8       	sub	r8,-4
80007784:	b1 49       	asr	r9,0x10
80007786:	04 33       	cp.w	r3,r2
80007788:	fe 98 ff eb 	brls	8000775e <quorem+0xc6>
8000778c:	ec c8 ff fb 	sub	r8,r6,-5
80007790:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007794:	58 09       	cp.w	r9,0
80007796:	c0 d1       	brne	800077b0 <quorem+0x118>
80007798:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000779c:	c0 28       	rjmp	800077a0 <quorem+0x108>
8000779e:	20 16       	sub	r6,1
800077a0:	20 48       	sub	r8,4
800077a2:	08 38       	cp.w	r8,r4
800077a4:	e0 88 00 05 	brls	800077ae <quorem+0x116>
800077a8:	70 09       	ld.w	r9,r8[0x0]
800077aa:	58 09       	cp.w	r9,0
800077ac:	cf 90       	breq	8000779e <quorem+0x106>
800077ae:	8f 46       	st.w	r7[0x10],r6
800077b0:	0a 9c       	mov	r12,r5
800077b2:	2f ed       	sub	sp,-8
800077b4:	d8 32       	popm	r0-r7,pc
800077b6:	d7 03       	nop

800077b8 <_dtoa_r>:
800077b8:	d4 31       	pushm	r0-r7,lr
800077ba:	21 ad       	sub	sp,104
800077bc:	fa c4 ff 74 	sub	r4,sp,-140
800077c0:	18 97       	mov	r7,r12
800077c2:	16 95       	mov	r5,r11
800077c4:	68 2c       	ld.w	r12,r4[0x8]
800077c6:	50 c9       	stdsp	sp[0x30],r9
800077c8:	68 16       	ld.w	r6,r4[0x4]
800077ca:	68 09       	ld.w	r9,r4[0x0]
800077cc:	50 e8       	stdsp	sp[0x38],r8
800077ce:	14 94       	mov	r4,r10
800077d0:	51 2c       	stdsp	sp[0x48],r12
800077d2:	fa e5 00 08 	st.d	sp[8],r4
800077d6:	51 59       	stdsp	sp[0x54],r9
800077d8:	6e 95       	ld.w	r5,r7[0x24]
800077da:	58 05       	cp.w	r5,0
800077dc:	c0 91       	brne	800077ee <_dtoa_r+0x36>
800077de:	31 0c       	mov	r12,16
800077e0:	e0 a0 07 46 	rcall	8000866c <malloc>
800077e4:	99 35       	st.w	r12[0xc],r5
800077e6:	8f 9c       	st.w	r7[0x24],r12
800077e8:	99 15       	st.w	r12[0x4],r5
800077ea:	99 25       	st.w	r12[0x8],r5
800077ec:	99 05       	st.w	r12[0x0],r5
800077ee:	6e 99       	ld.w	r9,r7[0x24]
800077f0:	72 08       	ld.w	r8,r9[0x0]
800077f2:	58 08       	cp.w	r8,0
800077f4:	c0 f0       	breq	80007812 <_dtoa_r+0x5a>
800077f6:	72 1a       	ld.w	r10,r9[0x4]
800077f8:	91 1a       	st.w	r8[0x4],r10
800077fa:	30 1a       	mov	r10,1
800077fc:	72 19       	ld.w	r9,r9[0x4]
800077fe:	f4 09 09 49 	lsl	r9,r10,r9
80007802:	10 9b       	mov	r11,r8
80007804:	91 29       	st.w	r8[0x8],r9
80007806:	0e 9c       	mov	r12,r7
80007808:	e0 a0 07 f4 	rcall	800087f0 <_Bfree>
8000780c:	6e 98       	ld.w	r8,r7[0x24]
8000780e:	30 09       	mov	r9,0
80007810:	91 09       	st.w	r8[0x0],r9
80007812:	40 28       	lddsp	r8,sp[0x8]
80007814:	10 94       	mov	r4,r8
80007816:	58 08       	cp.w	r8,0
80007818:	c0 64       	brge	80007824 <_dtoa_r+0x6c>
8000781a:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000781e:	50 28       	stdsp	sp[0x8],r8
80007820:	30 18       	mov	r8,1
80007822:	c0 28       	rjmp	80007826 <_dtoa_r+0x6e>
80007824:	30 08       	mov	r8,0
80007826:	8d 08       	st.w	r6[0x0],r8
80007828:	fc 1c 7f f0 	movh	r12,0x7ff0
8000782c:	40 26       	lddsp	r6,sp[0x8]
8000782e:	0c 98       	mov	r8,r6
80007830:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007834:	18 38       	cp.w	r8,r12
80007836:	c1 e1       	brne	80007872 <_dtoa_r+0xba>
80007838:	e0 68 27 0f 	mov	r8,9999
8000783c:	41 5b       	lddsp	r11,sp[0x54]
8000783e:	97 08       	st.w	r11[0x0],r8
80007840:	40 3a       	lddsp	r10,sp[0xc]
80007842:	58 0a       	cp.w	r10,0
80007844:	c0 71       	brne	80007852 <_dtoa_r+0x9a>
80007846:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000784a:	c0 41       	brne	80007852 <_dtoa_r+0x9a>
8000784c:	fe cc ca 3c 	sub	r12,pc,-13764
80007850:	c0 38       	rjmp	80007856 <_dtoa_r+0x9e>
80007852:	fe cc ca 36 	sub	r12,pc,-13770
80007856:	41 29       	lddsp	r9,sp[0x48]
80007858:	58 09       	cp.w	r9,0
8000785a:	e0 80 05 9a 	breq	8000838e <_dtoa_r+0xbd6>
8000785e:	f8 c8 ff fd 	sub	r8,r12,-3
80007862:	30 09       	mov	r9,0
80007864:	11 8a       	ld.ub	r10,r8[0x0]
80007866:	f2 0a 18 00 	cp.b	r10,r9
8000786a:	c1 a0       	breq	8000789e <_dtoa_r+0xe6>
8000786c:	f8 c8 ff f8 	sub	r8,r12,-8
80007870:	c1 78       	rjmp	8000789e <_dtoa_r+0xe6>
80007872:	fa ea 00 08 	ld.d	r10,sp[8]
80007876:	30 08       	mov	r8,0
80007878:	fa eb 00 3c 	st.d	sp[60],r10
8000787c:	30 09       	mov	r9,0
8000787e:	e0 a0 0e aa 	rcall	800095d2 <__avr32_f64_cmp_eq>
80007882:	c1 20       	breq	800078a6 <_dtoa_r+0xee>
80007884:	30 18       	mov	r8,1
80007886:	41 5a       	lddsp	r10,sp[0x54]
80007888:	95 08       	st.w	r10[0x0],r8
8000788a:	41 29       	lddsp	r9,sp[0x48]
8000788c:	fe c8 cb a0 	sub	r8,pc,-13408
80007890:	58 09       	cp.w	r9,0
80007892:	c0 41       	brne	8000789a <_dtoa_r+0xe2>
80007894:	10 9c       	mov	r12,r8
80007896:	e0 8f 05 7c 	bral	8000838e <_dtoa_r+0xbd6>
8000789a:	10 9c       	mov	r12,r8
8000789c:	2f f8       	sub	r8,-1
8000789e:	41 25       	lddsp	r5,sp[0x48]
800078a0:	8b 08       	st.w	r5[0x0],r8
800078a2:	e0 8f 05 76 	bral	8000838e <_dtoa_r+0xbd6>
800078a6:	fa c8 ff 9c 	sub	r8,sp,-100
800078aa:	fa c9 ff a0 	sub	r9,sp,-96
800078ae:	fa ea 00 3c 	ld.d	r10,sp[60]
800078b2:	0e 9c       	mov	r12,r7
800078b4:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800078b8:	e0 a0 07 ea 	rcall	8000888c <__d2b>
800078bc:	18 93       	mov	r3,r12
800078be:	58 05       	cp.w	r5,0
800078c0:	c0 d0       	breq	800078da <_dtoa_r+0x122>
800078c2:	fa ea 00 3c 	ld.d	r10,sp[60]
800078c6:	30 04       	mov	r4,0
800078c8:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800078cc:	ea c5 03 ff 	sub	r5,r5,1023
800078d0:	10 9b       	mov	r11,r8
800078d2:	51 74       	stdsp	sp[0x5c],r4
800078d4:	ea 1b 3f f0 	orh	r11,0x3ff0
800078d8:	c2 58       	rjmp	80007922 <_dtoa_r+0x16a>
800078da:	41 88       	lddsp	r8,sp[0x60]
800078dc:	41 9c       	lddsp	r12,sp[0x64]
800078de:	10 0c       	add	r12,r8
800078e0:	f8 c5 fb ce 	sub	r5,r12,-1074
800078e4:	e0 45 00 20 	cp.w	r5,32
800078e8:	e0 8a 00 0e 	brle	80007904 <_dtoa_r+0x14c>
800078ec:	f8 cc fb ee 	sub	r12,r12,-1042
800078f0:	40 3b       	lddsp	r11,sp[0xc]
800078f2:	ea 08 11 40 	rsub	r8,r5,64
800078f6:	f6 0c 0a 4c 	lsr	r12,r11,r12
800078fa:	ec 08 09 46 	lsl	r6,r6,r8
800078fe:	0c 4c       	or	r12,r6
80007900:	c0 78       	rjmp	8000790e <_dtoa_r+0x156>
80007902:	d7 03       	nop
80007904:	ea 0c 11 20 	rsub	r12,r5,32
80007908:	40 3a       	lddsp	r10,sp[0xc]
8000790a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000790e:	e0 a0 0d ee 	rcall	800094ea <__avr32_u32_to_f64>
80007912:	fc 18 fe 10 	movh	r8,0xfe10
80007916:	30 19       	mov	r9,1
80007918:	ea c5 04 33 	sub	r5,r5,1075
8000791c:	f0 0b 00 0b 	add	r11,r8,r11
80007920:	51 79       	stdsp	sp[0x5c],r9
80007922:	30 08       	mov	r8,0
80007924:	fc 19 3f f8 	movh	r9,0x3ff8
80007928:	e0 a0 0c 7a 	rcall	8000921c <__avr32_f64_sub>
8000792c:	e0 68 43 61 	mov	r8,17249
80007930:	ea 18 63 6f 	orh	r8,0x636f
80007934:	e0 69 87 a7 	mov	r9,34727
80007938:	ea 19 3f d2 	orh	r9,0x3fd2
8000793c:	e0 a0 0b 84 	rcall	80009044 <__avr32_f64_mul>
80007940:	e0 68 c8 b3 	mov	r8,51379
80007944:	ea 18 8b 60 	orh	r8,0x8b60
80007948:	e0 69 8a 28 	mov	r9,35368
8000794c:	ea 19 3f c6 	orh	r9,0x3fc6
80007950:	e0 a0 0d 34 	rcall	800093b8 <__avr32_f64_add>
80007954:	0a 9c       	mov	r12,r5
80007956:	14 90       	mov	r0,r10
80007958:	16 91       	mov	r1,r11
8000795a:	e0 a0 0d cc 	rcall	800094f2 <__avr32_s32_to_f64>
8000795e:	e0 68 79 fb 	mov	r8,31227
80007962:	ea 18 50 9f 	orh	r8,0x509f
80007966:	e0 69 44 13 	mov	r9,17427
8000796a:	ea 19 3f d3 	orh	r9,0x3fd3
8000796e:	e0 a0 0b 6b 	rcall	80009044 <__avr32_f64_mul>
80007972:	14 98       	mov	r8,r10
80007974:	16 99       	mov	r9,r11
80007976:	00 9a       	mov	r10,r0
80007978:	02 9b       	mov	r11,r1
8000797a:	e0 a0 0d 1f 	rcall	800093b8 <__avr32_f64_add>
8000797e:	14 90       	mov	r0,r10
80007980:	16 91       	mov	r1,r11
80007982:	e0 a0 0d a1 	rcall	800094c4 <__avr32_f64_to_s32>
80007986:	30 08       	mov	r8,0
80007988:	18 96       	mov	r6,r12
8000798a:	30 09       	mov	r9,0
8000798c:	00 9a       	mov	r10,r0
8000798e:	02 9b       	mov	r11,r1
80007990:	e0 a0 0e 68 	rcall	80009660 <__avr32_f64_cmp_lt>
80007994:	c0 c0       	breq	800079ac <_dtoa_r+0x1f4>
80007996:	0c 9c       	mov	r12,r6
80007998:	e0 a0 0d ad 	rcall	800094f2 <__avr32_s32_to_f64>
8000799c:	14 98       	mov	r8,r10
8000799e:	16 99       	mov	r9,r11
800079a0:	00 9a       	mov	r10,r0
800079a2:	02 9b       	mov	r11,r1
800079a4:	e0 a0 0e 17 	rcall	800095d2 <__avr32_f64_cmp_eq>
800079a8:	f7 b6 00 01 	subeq	r6,1
800079ac:	59 66       	cp.w	r6,22
800079ae:	e0 88 00 05 	brls	800079b8 <_dtoa_r+0x200>
800079b2:	30 18       	mov	r8,1
800079b4:	51 48       	stdsp	sp[0x50],r8
800079b6:	c1 38       	rjmp	800079dc <_dtoa_r+0x224>
800079b8:	fe c8 cb 4c 	sub	r8,pc,-13492
800079bc:	fa ea 00 3c 	ld.d	r10,sp[60]
800079c0:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800079c4:	e0 a0 0e 4e 	rcall	80009660 <__avr32_f64_cmp_lt>
800079c8:	f9 b4 00 00 	moveq	r4,0
800079cc:	fb f4 0a 14 	st.weq	sp[0x50],r4
800079d0:	f7 b6 01 01 	subne	r6,1
800079d4:	f9 bc 01 00 	movne	r12,0
800079d8:	fb fc 1a 14 	st.wne	sp[0x50],r12
800079dc:	41 90       	lddsp	r0,sp[0x64]
800079de:	20 10       	sub	r0,1
800079e0:	0a 10       	sub	r0,r5
800079e2:	c0 46       	brmi	800079ea <_dtoa_r+0x232>
800079e4:	50 40       	stdsp	sp[0x10],r0
800079e6:	30 00       	mov	r0,0
800079e8:	c0 48       	rjmp	800079f0 <_dtoa_r+0x238>
800079ea:	30 0b       	mov	r11,0
800079ec:	5c 30       	neg	r0
800079ee:	50 4b       	stdsp	sp[0x10],r11
800079f0:	ec 02 11 00 	rsub	r2,r6,0
800079f4:	58 06       	cp.w	r6,0
800079f6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800079fa:	f5 d6 e4 0a 	addge	r10,r10,r6
800079fe:	fb fa 4a 04 	st.wge	sp[0x10],r10
80007a02:	fb f6 4a 11 	st.wge	sp[0x44],r6
80007a06:	f9 b2 04 00 	movge	r2,0
80007a0a:	e1 d6 e5 10 	sublt	r0,r0,r6
80007a0e:	f9 b9 05 00 	movlt	r9,0
80007a12:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80007a16:	40 c8       	lddsp	r8,sp[0x30]
80007a18:	58 98       	cp.w	r8,9
80007a1a:	e0 8b 00 20 	brhi	80007a5a <_dtoa_r+0x2a2>
80007a1e:	58 58       	cp.w	r8,5
80007a20:	f9 b4 0a 01 	movle	r4,1
80007a24:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80007a28:	f7 b5 09 04 	subgt	r5,4
80007a2c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007a30:	f9 b4 09 00 	movgt	r4,0
80007a34:	40 cc       	lddsp	r12,sp[0x30]
80007a36:	58 3c       	cp.w	r12,3
80007a38:	c2 d0       	breq	80007a92 <_dtoa_r+0x2da>
80007a3a:	e0 89 00 05 	brgt	80007a44 <_dtoa_r+0x28c>
80007a3e:	58 2c       	cp.w	r12,2
80007a40:	c1 01       	brne	80007a60 <_dtoa_r+0x2a8>
80007a42:	c1 88       	rjmp	80007a72 <_dtoa_r+0x2ba>
80007a44:	40 cb       	lddsp	r11,sp[0x30]
80007a46:	58 4b       	cp.w	r11,4
80007a48:	c0 60       	breq	80007a54 <_dtoa_r+0x29c>
80007a4a:	58 5b       	cp.w	r11,5
80007a4c:	c0 a1       	brne	80007a60 <_dtoa_r+0x2a8>
80007a4e:	30 1a       	mov	r10,1
80007a50:	50 da       	stdsp	sp[0x34],r10
80007a52:	c2 28       	rjmp	80007a96 <_dtoa_r+0x2de>
80007a54:	30 19       	mov	r9,1
80007a56:	50 d9       	stdsp	sp[0x34],r9
80007a58:	c0 f8       	rjmp	80007a76 <_dtoa_r+0x2be>
80007a5a:	30 08       	mov	r8,0
80007a5c:	30 14       	mov	r4,1
80007a5e:	50 c8       	stdsp	sp[0x30],r8
80007a60:	3f f5       	mov	r5,-1
80007a62:	30 1c       	mov	r12,1
80007a64:	30 0b       	mov	r11,0
80007a66:	50 95       	stdsp	sp[0x24],r5
80007a68:	50 dc       	stdsp	sp[0x34],r12
80007a6a:	0a 91       	mov	r1,r5
80007a6c:	31 28       	mov	r8,18
80007a6e:	50 eb       	stdsp	sp[0x38],r11
80007a70:	c2 08       	rjmp	80007ab0 <_dtoa_r+0x2f8>
80007a72:	30 0a       	mov	r10,0
80007a74:	50 da       	stdsp	sp[0x34],r10
80007a76:	40 e9       	lddsp	r9,sp[0x38]
80007a78:	58 09       	cp.w	r9,0
80007a7a:	e0 89 00 07 	brgt	80007a88 <_dtoa_r+0x2d0>
80007a7e:	30 18       	mov	r8,1
80007a80:	50 98       	stdsp	sp[0x24],r8
80007a82:	10 91       	mov	r1,r8
80007a84:	50 e8       	stdsp	sp[0x38],r8
80007a86:	c1 58       	rjmp	80007ab0 <_dtoa_r+0x2f8>
80007a88:	40 e5       	lddsp	r5,sp[0x38]
80007a8a:	50 95       	stdsp	sp[0x24],r5
80007a8c:	0a 91       	mov	r1,r5
80007a8e:	0a 98       	mov	r8,r5
80007a90:	c1 08       	rjmp	80007ab0 <_dtoa_r+0x2f8>
80007a92:	30 0c       	mov	r12,0
80007a94:	50 dc       	stdsp	sp[0x34],r12
80007a96:	40 eb       	lddsp	r11,sp[0x38]
80007a98:	ec 0b 00 0b 	add	r11,r6,r11
80007a9c:	50 9b       	stdsp	sp[0x24],r11
80007a9e:	16 98       	mov	r8,r11
80007aa0:	2f f8       	sub	r8,-1
80007aa2:	58 08       	cp.w	r8,0
80007aa4:	e0 89 00 05 	brgt	80007aae <_dtoa_r+0x2f6>
80007aa8:	10 91       	mov	r1,r8
80007aaa:	30 18       	mov	r8,1
80007aac:	c0 28       	rjmp	80007ab0 <_dtoa_r+0x2f8>
80007aae:	10 91       	mov	r1,r8
80007ab0:	30 09       	mov	r9,0
80007ab2:	6e 9a       	ld.w	r10,r7[0x24]
80007ab4:	95 19       	st.w	r10[0x4],r9
80007ab6:	30 49       	mov	r9,4
80007ab8:	c0 68       	rjmp	80007ac4 <_dtoa_r+0x30c>
80007aba:	d7 03       	nop
80007abc:	6a 1a       	ld.w	r10,r5[0x4]
80007abe:	a1 79       	lsl	r9,0x1
80007ac0:	2f fa       	sub	r10,-1
80007ac2:	8b 1a       	st.w	r5[0x4],r10
80007ac4:	6e 95       	ld.w	r5,r7[0x24]
80007ac6:	f2 ca ff ec 	sub	r10,r9,-20
80007aca:	10 3a       	cp.w	r10,r8
80007acc:	fe 98 ff f8 	brls	80007abc <_dtoa_r+0x304>
80007ad0:	6a 1b       	ld.w	r11,r5[0x4]
80007ad2:	0e 9c       	mov	r12,r7
80007ad4:	e0 a0 06 a6 	rcall	80008820 <_Balloc>
80007ad8:	58 e1       	cp.w	r1,14
80007ada:	5f 88       	srls	r8
80007adc:	8b 0c       	st.w	r5[0x0],r12
80007ade:	f1 e4 00 04 	and	r4,r8,r4
80007ae2:	6e 98       	ld.w	r8,r7[0x24]
80007ae4:	70 08       	ld.w	r8,r8[0x0]
80007ae6:	50 88       	stdsp	sp[0x20],r8
80007ae8:	e0 80 01 82 	breq	80007dec <_dtoa_r+0x634>
80007aec:	58 06       	cp.w	r6,0
80007aee:	e0 8a 00 43 	brle	80007b74 <_dtoa_r+0x3bc>
80007af2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80007af6:	fe c8 cc 8a 	sub	r8,pc,-13174
80007afa:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80007afe:	fa e5 00 18 	st.d	sp[24],r4
80007b02:	ec 04 14 04 	asr	r4,r6,0x4
80007b06:	ed b4 00 04 	bld	r4,0x4
80007b0a:	c0 30       	breq	80007b10 <_dtoa_r+0x358>
80007b0c:	30 25       	mov	r5,2
80007b0e:	c1 08       	rjmp	80007b2e <_dtoa_r+0x376>
80007b10:	fe c8 cb dc 	sub	r8,pc,-13348
80007b14:	f0 e8 00 20 	ld.d	r8,r8[32]
80007b18:	fa ea 00 3c 	ld.d	r10,sp[60]
80007b1c:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80007b20:	e0 a0 0d d4 	rcall	800096c8 <__avr32_f64_div>
80007b24:	30 35       	mov	r5,3
80007b26:	14 98       	mov	r8,r10
80007b28:	16 99       	mov	r9,r11
80007b2a:	fa e9 00 08 	st.d	sp[8],r8
80007b2e:	fe cc cb fa 	sub	r12,pc,-13318
80007b32:	50 a3       	stdsp	sp[0x28],r3
80007b34:	0c 93       	mov	r3,r6
80007b36:	18 96       	mov	r6,r12
80007b38:	c0 f8       	rjmp	80007b56 <_dtoa_r+0x39e>
80007b3a:	fa ea 00 18 	ld.d	r10,sp[24]
80007b3e:	ed b4 00 00 	bld	r4,0x0
80007b42:	c0 81       	brne	80007b52 <_dtoa_r+0x39a>
80007b44:	ec e8 00 00 	ld.d	r8,r6[0]
80007b48:	2f f5       	sub	r5,-1
80007b4a:	e0 a0 0a 7d 	rcall	80009044 <__avr32_f64_mul>
80007b4e:	fa eb 00 18 	st.d	sp[24],r10
80007b52:	a1 54       	asr	r4,0x1
80007b54:	2f 86       	sub	r6,-8
80007b56:	58 04       	cp.w	r4,0
80007b58:	cf 11       	brne	80007b3a <_dtoa_r+0x382>
80007b5a:	fa e8 00 18 	ld.d	r8,sp[24]
80007b5e:	fa ea 00 08 	ld.d	r10,sp[8]
80007b62:	06 96       	mov	r6,r3
80007b64:	e0 a0 0d b2 	rcall	800096c8 <__avr32_f64_div>
80007b68:	40 a3       	lddsp	r3,sp[0x28]
80007b6a:	14 98       	mov	r8,r10
80007b6c:	16 99       	mov	r9,r11
80007b6e:	fa e9 00 08 	st.d	sp[8],r8
80007b72:	c2 f8       	rjmp	80007bd0 <_dtoa_r+0x418>
80007b74:	ec 08 11 00 	rsub	r8,r6,0
80007b78:	c0 31       	brne	80007b7e <_dtoa_r+0x3c6>
80007b7a:	30 25       	mov	r5,2
80007b7c:	c2 a8       	rjmp	80007bd0 <_dtoa_r+0x418>
80007b7e:	fe cc cc 4a 	sub	r12,pc,-13238
80007b82:	f0 04 14 04 	asr	r4,r8,0x4
80007b86:	50 1c       	stdsp	sp[0x4],r12
80007b88:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007b8c:	fe c9 cd 20 	sub	r9,pc,-13024
80007b90:	fa ea 00 3c 	ld.d	r10,sp[60]
80007b94:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007b98:	e0 a0 0a 56 	rcall	80009044 <__avr32_f64_mul>
80007b9c:	40 1c       	lddsp	r12,sp[0x4]
80007b9e:	50 63       	stdsp	sp[0x18],r3
80007ba0:	30 25       	mov	r5,2
80007ba2:	0c 93       	mov	r3,r6
80007ba4:	fa eb 00 08 	st.d	sp[8],r10
80007ba8:	18 96       	mov	r6,r12
80007baa:	c0 f8       	rjmp	80007bc8 <_dtoa_r+0x410>
80007bac:	fa ea 00 08 	ld.d	r10,sp[8]
80007bb0:	ed b4 00 00 	bld	r4,0x0
80007bb4:	c0 81       	brne	80007bc4 <_dtoa_r+0x40c>
80007bb6:	ec e8 00 00 	ld.d	r8,r6[0]
80007bba:	2f f5       	sub	r5,-1
80007bbc:	e0 a0 0a 44 	rcall	80009044 <__avr32_f64_mul>
80007bc0:	fa eb 00 08 	st.d	sp[8],r10
80007bc4:	a1 54       	asr	r4,0x1
80007bc6:	2f 86       	sub	r6,-8
80007bc8:	58 04       	cp.w	r4,0
80007bca:	cf 11       	brne	80007bac <_dtoa_r+0x3f4>
80007bcc:	06 96       	mov	r6,r3
80007bce:	40 63       	lddsp	r3,sp[0x18]
80007bd0:	41 4a       	lddsp	r10,sp[0x50]
80007bd2:	58 0a       	cp.w	r10,0
80007bd4:	c2 a0       	breq	80007c28 <_dtoa_r+0x470>
80007bd6:	fa e8 00 08 	ld.d	r8,sp[8]
80007bda:	58 01       	cp.w	r1,0
80007bdc:	5f 94       	srgt	r4
80007bde:	fa e9 00 18 	st.d	sp[24],r8
80007be2:	30 08       	mov	r8,0
80007be4:	fc 19 3f f0 	movh	r9,0x3ff0
80007be8:	fa ea 00 18 	ld.d	r10,sp[24]
80007bec:	e0 a0 0d 3a 	rcall	80009660 <__avr32_f64_cmp_lt>
80007bf0:	f9 bc 00 00 	moveq	r12,0
80007bf4:	f9 bc 01 01 	movne	r12,1
80007bf8:	e9 ec 00 0c 	and	r12,r4,r12
80007bfc:	c1 60       	breq	80007c28 <_dtoa_r+0x470>
80007bfe:	40 98       	lddsp	r8,sp[0x24]
80007c00:	58 08       	cp.w	r8,0
80007c02:	e0 8a 00 f1 	brle	80007de4 <_dtoa_r+0x62c>
80007c06:	30 08       	mov	r8,0
80007c08:	fc 19 40 24 	movh	r9,0x4024
80007c0c:	ec c4 00 01 	sub	r4,r6,1
80007c10:	fa ea 00 18 	ld.d	r10,sp[24]
80007c14:	2f f5       	sub	r5,-1
80007c16:	50 64       	stdsp	sp[0x18],r4
80007c18:	e0 a0 0a 16 	rcall	80009044 <__avr32_f64_mul>
80007c1c:	40 94       	lddsp	r4,sp[0x24]
80007c1e:	14 98       	mov	r8,r10
80007c20:	16 99       	mov	r9,r11
80007c22:	fa e9 00 08 	st.d	sp[8],r8
80007c26:	c0 38       	rjmp	80007c2c <_dtoa_r+0x474>
80007c28:	50 66       	stdsp	sp[0x18],r6
80007c2a:	02 94       	mov	r4,r1
80007c2c:	0a 9c       	mov	r12,r5
80007c2e:	e0 a0 0c 62 	rcall	800094f2 <__avr32_s32_to_f64>
80007c32:	fa e8 00 08 	ld.d	r8,sp[8]
80007c36:	e0 a0 0a 07 	rcall	80009044 <__avr32_f64_mul>
80007c3a:	30 08       	mov	r8,0
80007c3c:	fc 19 40 1c 	movh	r9,0x401c
80007c40:	e0 a0 0b bc 	rcall	800093b8 <__avr32_f64_add>
80007c44:	14 98       	mov	r8,r10
80007c46:	16 99       	mov	r9,r11
80007c48:	fa e9 00 28 	st.d	sp[40],r8
80007c4c:	fc 18 fc c0 	movh	r8,0xfcc0
80007c50:	40 a5       	lddsp	r5,sp[0x28]
80007c52:	10 05       	add	r5,r8
80007c54:	50 a5       	stdsp	sp[0x28],r5
80007c56:	58 04       	cp.w	r4,0
80007c58:	c2 11       	brne	80007c9a <_dtoa_r+0x4e2>
80007c5a:	fa ea 00 08 	ld.d	r10,sp[8]
80007c5e:	30 08       	mov	r8,0
80007c60:	fc 19 40 14 	movh	r9,0x4014
80007c64:	e0 a0 0a dc 	rcall	8000921c <__avr32_f64_sub>
80007c68:	40 bc       	lddsp	r12,sp[0x2c]
80007c6a:	fa eb 00 08 	st.d	sp[8],r10
80007c6e:	14 98       	mov	r8,r10
80007c70:	16 99       	mov	r9,r11
80007c72:	18 9a       	mov	r10,r12
80007c74:	0a 9b       	mov	r11,r5
80007c76:	e0 a0 0c f5 	rcall	80009660 <__avr32_f64_cmp_lt>
80007c7a:	e0 81 02 54 	brne	80008122 <_dtoa_r+0x96a>
80007c7e:	0a 98       	mov	r8,r5
80007c80:	40 b9       	lddsp	r9,sp[0x2c]
80007c82:	ee 18 80 00 	eorh	r8,0x8000
80007c86:	fa ea 00 08 	ld.d	r10,sp[8]
80007c8a:	10 95       	mov	r5,r8
80007c8c:	12 98       	mov	r8,r9
80007c8e:	0a 99       	mov	r9,r5
80007c90:	e0 a0 0c e8 	rcall	80009660 <__avr32_f64_cmp_lt>
80007c94:	e0 81 02 3e 	brne	80008110 <_dtoa_r+0x958>
80007c98:	ca 68       	rjmp	80007de4 <_dtoa_r+0x62c>
80007c9a:	fe c9 ce 2e 	sub	r9,pc,-12754
80007c9e:	e8 c8 00 01 	sub	r8,r4,1
80007ca2:	40 d5       	lddsp	r5,sp[0x34]
80007ca4:	58 05       	cp.w	r5,0
80007ca6:	c4 f0       	breq	80007d44 <_dtoa_r+0x58c>
80007ca8:	30 0c       	mov	r12,0
80007caa:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007cae:	51 3c       	stdsp	sp[0x4c],r12
80007cb0:	30 0a       	mov	r10,0
80007cb2:	fc 1b 3f e0 	movh	r11,0x3fe0
80007cb6:	e0 a0 0d 09 	rcall	800096c8 <__avr32_f64_div>
80007cba:	fa e8 00 28 	ld.d	r8,sp[40]
80007cbe:	40 85       	lddsp	r5,sp[0x20]
80007cc0:	e0 a0 0a ae 	rcall	8000921c <__avr32_f64_sub>
80007cc4:	fa eb 00 28 	st.d	sp[40],r10
80007cc8:	fa ea 00 08 	ld.d	r10,sp[8]
80007ccc:	e0 a0 0b fc 	rcall	800094c4 <__avr32_f64_to_s32>
80007cd0:	51 6c       	stdsp	sp[0x58],r12
80007cd2:	e0 a0 0c 10 	rcall	800094f2 <__avr32_s32_to_f64>
80007cd6:	14 98       	mov	r8,r10
80007cd8:	16 99       	mov	r9,r11
80007cda:	fa ea 00 08 	ld.d	r10,sp[8]
80007cde:	e0 a0 0a 9f 	rcall	8000921c <__avr32_f64_sub>
80007ce2:	fa eb 00 08 	st.d	sp[8],r10
80007ce6:	41 68       	lddsp	r8,sp[0x58]
80007ce8:	2d 08       	sub	r8,-48
80007cea:	0a c8       	st.b	r5++,r8
80007cec:	41 39       	lddsp	r9,sp[0x4c]
80007cee:	2f f9       	sub	r9,-1
80007cf0:	51 39       	stdsp	sp[0x4c],r9
80007cf2:	fa e8 00 28 	ld.d	r8,sp[40]
80007cf6:	e0 a0 0c b5 	rcall	80009660 <__avr32_f64_cmp_lt>
80007cfa:	e0 81 03 39 	brne	8000836c <_dtoa_r+0xbb4>
80007cfe:	fa e8 00 08 	ld.d	r8,sp[8]
80007d02:	30 0a       	mov	r10,0
80007d04:	fc 1b 3f f0 	movh	r11,0x3ff0
80007d08:	e0 a0 0a 8a 	rcall	8000921c <__avr32_f64_sub>
80007d0c:	fa e8 00 28 	ld.d	r8,sp[40]
80007d10:	e0 a0 0c a8 	rcall	80009660 <__avr32_f64_cmp_lt>
80007d14:	fa ea 00 28 	ld.d	r10,sp[40]
80007d18:	30 08       	mov	r8,0
80007d1a:	fc 19 40 24 	movh	r9,0x4024
80007d1e:	e0 81 00 da 	brne	80007ed2 <_dtoa_r+0x71a>
80007d22:	41 3c       	lddsp	r12,sp[0x4c]
80007d24:	08 3c       	cp.w	r12,r4
80007d26:	c5 f4       	brge	80007de4 <_dtoa_r+0x62c>
80007d28:	e0 a0 09 8e 	rcall	80009044 <__avr32_f64_mul>
80007d2c:	30 08       	mov	r8,0
80007d2e:	fa eb 00 28 	st.d	sp[40],r10
80007d32:	fc 19 40 24 	movh	r9,0x4024
80007d36:	fa ea 00 08 	ld.d	r10,sp[8]
80007d3a:	e0 a0 09 85 	rcall	80009044 <__avr32_f64_mul>
80007d3e:	fa eb 00 08 	st.d	sp[8],r10
80007d42:	cc 3b       	rjmp	80007cc8 <_dtoa_r+0x510>
80007d44:	40 85       	lddsp	r5,sp[0x20]
80007d46:	08 05       	add	r5,r4
80007d48:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80007d4c:	51 35       	stdsp	sp[0x4c],r5
80007d4e:	fa e8 00 28 	ld.d	r8,sp[40]
80007d52:	40 85       	lddsp	r5,sp[0x20]
80007d54:	e0 a0 09 78 	rcall	80009044 <__avr32_f64_mul>
80007d58:	fa eb 00 28 	st.d	sp[40],r10
80007d5c:	fa ea 00 08 	ld.d	r10,sp[8]
80007d60:	e0 a0 0b b2 	rcall	800094c4 <__avr32_f64_to_s32>
80007d64:	51 6c       	stdsp	sp[0x58],r12
80007d66:	e0 a0 0b c6 	rcall	800094f2 <__avr32_s32_to_f64>
80007d6a:	14 98       	mov	r8,r10
80007d6c:	16 99       	mov	r9,r11
80007d6e:	fa ea 00 08 	ld.d	r10,sp[8]
80007d72:	e0 a0 0a 55 	rcall	8000921c <__avr32_f64_sub>
80007d76:	fa eb 00 08 	st.d	sp[8],r10
80007d7a:	41 68       	lddsp	r8,sp[0x58]
80007d7c:	2d 08       	sub	r8,-48
80007d7e:	0a c8       	st.b	r5++,r8
80007d80:	41 3c       	lddsp	r12,sp[0x4c]
80007d82:	18 35       	cp.w	r5,r12
80007d84:	c2 81       	brne	80007dd4 <_dtoa_r+0x61c>
80007d86:	30 08       	mov	r8,0
80007d88:	fc 19 3f e0 	movh	r9,0x3fe0
80007d8c:	fa ea 00 28 	ld.d	r10,sp[40]
80007d90:	e0 a0 0b 14 	rcall	800093b8 <__avr32_f64_add>
80007d94:	40 85       	lddsp	r5,sp[0x20]
80007d96:	fa e8 00 08 	ld.d	r8,sp[8]
80007d9a:	08 05       	add	r5,r4
80007d9c:	e0 a0 0c 62 	rcall	80009660 <__avr32_f64_cmp_lt>
80007da0:	e0 81 00 99 	brne	80007ed2 <_dtoa_r+0x71a>
80007da4:	fa e8 00 28 	ld.d	r8,sp[40]
80007da8:	30 0a       	mov	r10,0
80007daa:	fc 1b 3f e0 	movh	r11,0x3fe0
80007dae:	e0 a0 0a 37 	rcall	8000921c <__avr32_f64_sub>
80007db2:	14 98       	mov	r8,r10
80007db4:	16 99       	mov	r9,r11
80007db6:	fa ea 00 08 	ld.d	r10,sp[8]
80007dba:	e0 a0 0c 53 	rcall	80009660 <__avr32_f64_cmp_lt>
80007dbe:	c1 30       	breq	80007de4 <_dtoa_r+0x62c>
80007dc0:	33 09       	mov	r9,48
80007dc2:	0a 98       	mov	r8,r5
80007dc4:	11 7a       	ld.ub	r10,--r8
80007dc6:	f2 0a 18 00 	cp.b	r10,r9
80007dca:	e0 81 02 d1 	brne	8000836c <_dtoa_r+0xbb4>
80007dce:	10 95       	mov	r5,r8
80007dd0:	cf 9b       	rjmp	80007dc2 <_dtoa_r+0x60a>
80007dd2:	d7 03       	nop
80007dd4:	30 08       	mov	r8,0
80007dd6:	fc 19 40 24 	movh	r9,0x4024
80007dda:	e0 a0 09 35 	rcall	80009044 <__avr32_f64_mul>
80007dde:	fa eb 00 08 	st.d	sp[8],r10
80007de2:	cb db       	rjmp	80007d5c <_dtoa_r+0x5a4>
80007de4:	fa ea 00 3c 	ld.d	r10,sp[60]
80007de8:	fa eb 00 08 	st.d	sp[8],r10
80007dec:	58 e6       	cp.w	r6,14
80007dee:	5f ab       	srle	r11
80007df0:	41 8a       	lddsp	r10,sp[0x60]
80007df2:	30 08       	mov	r8,0
80007df4:	f4 09 11 ff 	rsub	r9,r10,-1
80007df8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80007dfc:	f0 09 18 00 	cp.b	r9,r8
80007e00:	e0 80 00 82 	breq	80007f04 <_dtoa_r+0x74c>
80007e04:	40 ea       	lddsp	r10,sp[0x38]
80007e06:	58 01       	cp.w	r1,0
80007e08:	5f a9       	srle	r9
80007e0a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80007e0e:	fe ca cf a2 	sub	r10,pc,-12382
80007e12:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80007e16:	fa e5 00 10 	st.d	sp[16],r4
80007e1a:	f0 09 18 00 	cp.b	r9,r8
80007e1e:	c1 40       	breq	80007e46 <_dtoa_r+0x68e>
80007e20:	58 01       	cp.w	r1,0
80007e22:	e0 81 01 77 	brne	80008110 <_dtoa_r+0x958>
80007e26:	30 08       	mov	r8,0
80007e28:	fc 19 40 14 	movh	r9,0x4014
80007e2c:	08 9a       	mov	r10,r4
80007e2e:	0a 9b       	mov	r11,r5
80007e30:	e0 a0 09 0a 	rcall	80009044 <__avr32_f64_mul>
80007e34:	fa e8 00 08 	ld.d	r8,sp[8]
80007e38:	e0 a0 0b e0 	rcall	800095f8 <__avr32_f64_cmp_ge>
80007e3c:	e0 81 01 6a 	brne	80008110 <_dtoa_r+0x958>
80007e40:	02 92       	mov	r2,r1
80007e42:	e0 8f 01 72 	bral	80008126 <_dtoa_r+0x96e>
80007e46:	40 85       	lddsp	r5,sp[0x20]
80007e48:	30 14       	mov	r4,1
80007e4a:	fa e8 00 10 	ld.d	r8,sp[16]
80007e4e:	fa ea 00 08 	ld.d	r10,sp[8]
80007e52:	e0 a0 0c 3b 	rcall	800096c8 <__avr32_f64_div>
80007e56:	e0 a0 0b 37 	rcall	800094c4 <__avr32_f64_to_s32>
80007e5a:	18 92       	mov	r2,r12
80007e5c:	e0 a0 0b 4b 	rcall	800094f2 <__avr32_s32_to_f64>
80007e60:	fa e8 00 10 	ld.d	r8,sp[16]
80007e64:	e0 a0 08 f0 	rcall	80009044 <__avr32_f64_mul>
80007e68:	14 98       	mov	r8,r10
80007e6a:	16 99       	mov	r9,r11
80007e6c:	fa ea 00 08 	ld.d	r10,sp[8]
80007e70:	e0 a0 09 d6 	rcall	8000921c <__avr32_f64_sub>
80007e74:	fa eb 00 08 	st.d	sp[8],r10
80007e78:	e4 c8 ff d0 	sub	r8,r2,-48
80007e7c:	0a c8       	st.b	r5++,r8
80007e7e:	fc 19 40 24 	movh	r9,0x4024
80007e82:	30 08       	mov	r8,0
80007e84:	02 34       	cp.w	r4,r1
80007e86:	c3 31       	brne	80007eec <_dtoa_r+0x734>
80007e88:	fa e8 00 08 	ld.d	r8,sp[8]
80007e8c:	e0 a0 0a 96 	rcall	800093b8 <__avr32_f64_add>
80007e90:	16 91       	mov	r1,r11
80007e92:	14 90       	mov	r0,r10
80007e94:	14 98       	mov	r8,r10
80007e96:	02 99       	mov	r9,r1
80007e98:	fa ea 00 10 	ld.d	r10,sp[16]
80007e9c:	e0 a0 0b e2 	rcall	80009660 <__avr32_f64_cmp_lt>
80007ea0:	c1 a1       	brne	80007ed4 <_dtoa_r+0x71c>
80007ea2:	fa e8 00 10 	ld.d	r8,sp[16]
80007ea6:	00 9a       	mov	r10,r0
80007ea8:	02 9b       	mov	r11,r1
80007eaa:	e0 a0 0b 94 	rcall	800095d2 <__avr32_f64_cmp_eq>
80007eae:	e0 80 02 5e 	breq	8000836a <_dtoa_r+0xbb2>
80007eb2:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80007eb6:	c0 f1       	brne	80007ed4 <_dtoa_r+0x71c>
80007eb8:	e0 8f 02 59 	bral	8000836a <_dtoa_r+0xbb2>
80007ebc:	40 8a       	lddsp	r10,sp[0x20]
80007ebe:	14 38       	cp.w	r8,r10
80007ec0:	c0 30       	breq	80007ec6 <_dtoa_r+0x70e>
80007ec2:	10 95       	mov	r5,r8
80007ec4:	c0 98       	rjmp	80007ed6 <_dtoa_r+0x71e>
80007ec6:	33 08       	mov	r8,48
80007ec8:	40 89       	lddsp	r9,sp[0x20]
80007eca:	2f f6       	sub	r6,-1
80007ecc:	b2 88       	st.b	r9[0x0],r8
80007ece:	40 88       	lddsp	r8,sp[0x20]
80007ed0:	c0 88       	rjmp	80007ee0 <_dtoa_r+0x728>
80007ed2:	40 66       	lddsp	r6,sp[0x18]
80007ed4:	33 99       	mov	r9,57
80007ed6:	0a 98       	mov	r8,r5
80007ed8:	11 7a       	ld.ub	r10,--r8
80007eda:	f2 0a 18 00 	cp.b	r10,r9
80007ede:	ce f0       	breq	80007ebc <_dtoa_r+0x704>
80007ee0:	50 66       	stdsp	sp[0x18],r6
80007ee2:	11 89       	ld.ub	r9,r8[0x0]
80007ee4:	2f f9       	sub	r9,-1
80007ee6:	b0 89       	st.b	r8[0x0],r9
80007ee8:	e0 8f 02 42 	bral	8000836c <_dtoa_r+0xbb4>
80007eec:	e0 a0 08 ac 	rcall	80009044 <__avr32_f64_mul>
80007ef0:	2f f4       	sub	r4,-1
80007ef2:	fa eb 00 08 	st.d	sp[8],r10
80007ef6:	30 08       	mov	r8,0
80007ef8:	30 09       	mov	r9,0
80007efa:	e0 a0 0b 6c 	rcall	800095d2 <__avr32_f64_cmp_eq>
80007efe:	ca 60       	breq	80007e4a <_dtoa_r+0x692>
80007f00:	e0 8f 02 35 	bral	8000836a <_dtoa_r+0xbb2>
80007f04:	40 d8       	lddsp	r8,sp[0x34]
80007f06:	58 08       	cp.w	r8,0
80007f08:	c0 51       	brne	80007f12 <_dtoa_r+0x75a>
80007f0a:	04 98       	mov	r8,r2
80007f0c:	00 95       	mov	r5,r0
80007f0e:	40 d4       	lddsp	r4,sp[0x34]
80007f10:	c3 78       	rjmp	80007f7e <_dtoa_r+0x7c6>
80007f12:	40 c5       	lddsp	r5,sp[0x30]
80007f14:	58 15       	cp.w	r5,1
80007f16:	e0 89 00 0f 	brgt	80007f34 <_dtoa_r+0x77c>
80007f1a:	41 74       	lddsp	r4,sp[0x5c]
80007f1c:	58 04       	cp.w	r4,0
80007f1e:	c0 40       	breq	80007f26 <_dtoa_r+0x76e>
80007f20:	f4 c9 fb cd 	sub	r9,r10,-1075
80007f24:	c0 48       	rjmp	80007f2c <_dtoa_r+0x774>
80007f26:	41 99       	lddsp	r9,sp[0x64]
80007f28:	f2 09 11 36 	rsub	r9,r9,54
80007f2c:	04 98       	mov	r8,r2
80007f2e:	00 95       	mov	r5,r0
80007f30:	c1 c8       	rjmp	80007f68 <_dtoa_r+0x7b0>
80007f32:	d7 03       	nop
80007f34:	e2 c8 00 01 	sub	r8,r1,1
80007f38:	58 01       	cp.w	r1,0
80007f3a:	e0 05 17 40 	movge	r5,r0
80007f3e:	e2 09 17 40 	movge	r9,r1
80007f42:	e1 d1 e5 15 	sublt	r5,r0,r1
80007f46:	f9 b9 05 00 	movlt	r9,0
80007f4a:	10 32       	cp.w	r2,r8
80007f4c:	e5 d8 e4 18 	subge	r8,r2,r8
80007f50:	f1 d2 e5 18 	sublt	r8,r8,r2
80007f54:	e5 d8 e5 02 	addlt	r2,r2,r8
80007f58:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80007f5c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80007f60:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80007f64:	f9 b8 05 00 	movlt	r8,0
80007f68:	40 4b       	lddsp	r11,sp[0x10]
80007f6a:	12 0b       	add	r11,r9
80007f6c:	50 08       	stdsp	sp[0x0],r8
80007f6e:	50 4b       	stdsp	sp[0x10],r11
80007f70:	12 00       	add	r0,r9
80007f72:	30 1b       	mov	r11,1
80007f74:	0e 9c       	mov	r12,r7
80007f76:	e0 a0 06 0b 	rcall	80008b8c <__i2b>
80007f7a:	40 08       	lddsp	r8,sp[0x0]
80007f7c:	18 94       	mov	r4,r12
80007f7e:	40 4a       	lddsp	r10,sp[0x10]
80007f80:	58 05       	cp.w	r5,0
80007f82:	5f 99       	srgt	r9
80007f84:	58 0a       	cp.w	r10,0
80007f86:	5f 9a       	srgt	r10
80007f88:	f5 e9 00 09 	and	r9,r10,r9
80007f8c:	c0 80       	breq	80007f9c <_dtoa_r+0x7e4>
80007f8e:	40 4c       	lddsp	r12,sp[0x10]
80007f90:	f8 05 0d 49 	min	r9,r12,r5
80007f94:	12 1c       	sub	r12,r9
80007f96:	12 10       	sub	r0,r9
80007f98:	50 4c       	stdsp	sp[0x10],r12
80007f9a:	12 15       	sub	r5,r9
80007f9c:	58 02       	cp.w	r2,0
80007f9e:	e0 8a 00 27 	brle	80007fec <_dtoa_r+0x834>
80007fa2:	40 db       	lddsp	r11,sp[0x34]
80007fa4:	58 0b       	cp.w	r11,0
80007fa6:	c1 d0       	breq	80007fe0 <_dtoa_r+0x828>
80007fa8:	58 08       	cp.w	r8,0
80007faa:	e0 8a 00 17 	brle	80007fd8 <_dtoa_r+0x820>
80007fae:	10 9a       	mov	r10,r8
80007fb0:	50 08       	stdsp	sp[0x0],r8
80007fb2:	08 9b       	mov	r11,r4
80007fb4:	0e 9c       	mov	r12,r7
80007fb6:	e0 a0 06 31 	rcall	80008c18 <__pow5mult>
80007fba:	06 9a       	mov	r10,r3
80007fbc:	18 9b       	mov	r11,r12
80007fbe:	18 94       	mov	r4,r12
80007fc0:	0e 9c       	mov	r12,r7
80007fc2:	e0 a0 05 65 	rcall	80008a8c <__multiply>
80007fc6:	18 99       	mov	r9,r12
80007fc8:	06 9b       	mov	r11,r3
80007fca:	50 19       	stdsp	sp[0x4],r9
80007fcc:	0e 9c       	mov	r12,r7
80007fce:	e0 a0 04 11 	rcall	800087f0 <_Bfree>
80007fd2:	40 19       	lddsp	r9,sp[0x4]
80007fd4:	40 08       	lddsp	r8,sp[0x0]
80007fd6:	12 93       	mov	r3,r9
80007fd8:	e4 08 01 0a 	sub	r10,r2,r8
80007fdc:	c0 80       	breq	80007fec <_dtoa_r+0x834>
80007fde:	c0 28       	rjmp	80007fe2 <_dtoa_r+0x82a>
80007fe0:	04 9a       	mov	r10,r2
80007fe2:	06 9b       	mov	r11,r3
80007fe4:	0e 9c       	mov	r12,r7
80007fe6:	e0 a0 06 19 	rcall	80008c18 <__pow5mult>
80007fea:	18 93       	mov	r3,r12
80007fec:	30 1b       	mov	r11,1
80007fee:	0e 9c       	mov	r12,r7
80007ff0:	e0 a0 05 ce 	rcall	80008b8c <__i2b>
80007ff4:	41 1a       	lddsp	r10,sp[0x44]
80007ff6:	18 92       	mov	r2,r12
80007ff8:	58 0a       	cp.w	r10,0
80007ffa:	e0 8a 00 07 	brle	80008008 <_dtoa_r+0x850>
80007ffe:	18 9b       	mov	r11,r12
80008000:	0e 9c       	mov	r12,r7
80008002:	e0 a0 06 0b 	rcall	80008c18 <__pow5mult>
80008006:	18 92       	mov	r2,r12
80008008:	40 c9       	lddsp	r9,sp[0x30]
8000800a:	58 19       	cp.w	r9,1
8000800c:	e0 89 00 14 	brgt	80008034 <_dtoa_r+0x87c>
80008010:	40 38       	lddsp	r8,sp[0xc]
80008012:	58 08       	cp.w	r8,0
80008014:	c1 01       	brne	80008034 <_dtoa_r+0x87c>
80008016:	40 29       	lddsp	r9,sp[0x8]
80008018:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000801c:	c0 c1       	brne	80008034 <_dtoa_r+0x87c>
8000801e:	12 98       	mov	r8,r9
80008020:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008024:	c0 80       	breq	80008034 <_dtoa_r+0x87c>
80008026:	40 4c       	lddsp	r12,sp[0x10]
80008028:	30 1b       	mov	r11,1
8000802a:	2f fc       	sub	r12,-1
8000802c:	2f f0       	sub	r0,-1
8000802e:	50 4c       	stdsp	sp[0x10],r12
80008030:	50 6b       	stdsp	sp[0x18],r11
80008032:	c0 38       	rjmp	80008038 <_dtoa_r+0x880>
80008034:	30 0a       	mov	r10,0
80008036:	50 6a       	stdsp	sp[0x18],r10
80008038:	41 19       	lddsp	r9,sp[0x44]
8000803a:	58 09       	cp.w	r9,0
8000803c:	c0 31       	brne	80008042 <_dtoa_r+0x88a>
8000803e:	30 1c       	mov	r12,1
80008040:	c0 98       	rjmp	80008052 <_dtoa_r+0x89a>
80008042:	64 48       	ld.w	r8,r2[0x10]
80008044:	2f c8       	sub	r8,-4
80008046:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000804a:	e0 a0 03 43 	rcall	800086d0 <__hi0bits>
8000804e:	f8 0c 11 20 	rsub	r12,r12,32
80008052:	40 4b       	lddsp	r11,sp[0x10]
80008054:	f8 0b 00 08 	add	r8,r12,r11
80008058:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000805c:	c0 c0       	breq	80008074 <_dtoa_r+0x8bc>
8000805e:	f0 08 11 20 	rsub	r8,r8,32
80008062:	58 48       	cp.w	r8,4
80008064:	e0 8a 00 06 	brle	80008070 <_dtoa_r+0x8b8>
80008068:	20 48       	sub	r8,4
8000806a:	10 0b       	add	r11,r8
8000806c:	50 4b       	stdsp	sp[0x10],r11
8000806e:	c0 78       	rjmp	8000807c <_dtoa_r+0x8c4>
80008070:	58 48       	cp.w	r8,4
80008072:	c0 70       	breq	80008080 <_dtoa_r+0x8c8>
80008074:	40 4a       	lddsp	r10,sp[0x10]
80008076:	2e 48       	sub	r8,-28
80008078:	10 0a       	add	r10,r8
8000807a:	50 4a       	stdsp	sp[0x10],r10
8000807c:	10 00       	add	r0,r8
8000807e:	10 05       	add	r5,r8
80008080:	58 00       	cp.w	r0,0
80008082:	e0 8a 00 08 	brle	80008092 <_dtoa_r+0x8da>
80008086:	06 9b       	mov	r11,r3
80008088:	00 9a       	mov	r10,r0
8000808a:	0e 9c       	mov	r12,r7
8000808c:	e0 a0 04 bc 	rcall	80008a04 <__lshift>
80008090:	18 93       	mov	r3,r12
80008092:	40 49       	lddsp	r9,sp[0x10]
80008094:	58 09       	cp.w	r9,0
80008096:	e0 8a 00 08 	brle	800080a6 <_dtoa_r+0x8ee>
8000809a:	04 9b       	mov	r11,r2
8000809c:	12 9a       	mov	r10,r9
8000809e:	0e 9c       	mov	r12,r7
800080a0:	e0 a0 04 b2 	rcall	80008a04 <__lshift>
800080a4:	18 92       	mov	r2,r12
800080a6:	41 48       	lddsp	r8,sp[0x50]
800080a8:	58 08       	cp.w	r8,0
800080aa:	c1 b0       	breq	800080e0 <_dtoa_r+0x928>
800080ac:	04 9b       	mov	r11,r2
800080ae:	06 9c       	mov	r12,r3
800080b0:	e0 a0 03 87 	rcall	800087be <__mcmp>
800080b4:	c1 64       	brge	800080e0 <_dtoa_r+0x928>
800080b6:	06 9b       	mov	r11,r3
800080b8:	30 09       	mov	r9,0
800080ba:	30 aa       	mov	r10,10
800080bc:	0e 9c       	mov	r12,r7
800080be:	e0 a0 05 6f 	rcall	80008b9c <__multadd>
800080c2:	20 16       	sub	r6,1
800080c4:	18 93       	mov	r3,r12
800080c6:	40 dc       	lddsp	r12,sp[0x34]
800080c8:	58 0c       	cp.w	r12,0
800080ca:	c0 31       	brne	800080d0 <_dtoa_r+0x918>
800080cc:	40 91       	lddsp	r1,sp[0x24]
800080ce:	c0 98       	rjmp	800080e0 <_dtoa_r+0x928>
800080d0:	08 9b       	mov	r11,r4
800080d2:	40 91       	lddsp	r1,sp[0x24]
800080d4:	30 09       	mov	r9,0
800080d6:	30 aa       	mov	r10,10
800080d8:	0e 9c       	mov	r12,r7
800080da:	e0 a0 05 61 	rcall	80008b9c <__multadd>
800080de:	18 94       	mov	r4,r12
800080e0:	58 01       	cp.w	r1,0
800080e2:	5f a9       	srle	r9
800080e4:	40 cb       	lddsp	r11,sp[0x30]
800080e6:	58 2b       	cp.w	r11,2
800080e8:	5f 98       	srgt	r8
800080ea:	f3 e8 00 08 	and	r8,r9,r8
800080ee:	c2 50       	breq	80008138 <_dtoa_r+0x980>
800080f0:	58 01       	cp.w	r1,0
800080f2:	c1 11       	brne	80008114 <_dtoa_r+0x95c>
800080f4:	04 9b       	mov	r11,r2
800080f6:	02 99       	mov	r9,r1
800080f8:	30 5a       	mov	r10,5
800080fa:	0e 9c       	mov	r12,r7
800080fc:	e0 a0 05 50 	rcall	80008b9c <__multadd>
80008100:	18 92       	mov	r2,r12
80008102:	18 9b       	mov	r11,r12
80008104:	06 9c       	mov	r12,r3
80008106:	e0 a0 03 5c 	rcall	800087be <__mcmp>
8000810a:	e0 89 00 0f 	brgt	80008128 <_dtoa_r+0x970>
8000810e:	c0 38       	rjmp	80008114 <_dtoa_r+0x95c>
80008110:	30 02       	mov	r2,0
80008112:	04 94       	mov	r4,r2
80008114:	40 ea       	lddsp	r10,sp[0x38]
80008116:	30 09       	mov	r9,0
80008118:	5c da       	com	r10
8000811a:	40 85       	lddsp	r5,sp[0x20]
8000811c:	50 6a       	stdsp	sp[0x18],r10
8000811e:	50 49       	stdsp	sp[0x10],r9
80008120:	c0 f9       	rjmp	8000833e <_dtoa_r+0xb86>
80008122:	08 92       	mov	r2,r4
80008124:	40 66       	lddsp	r6,sp[0x18]
80008126:	04 94       	mov	r4,r2
80008128:	2f f6       	sub	r6,-1
8000812a:	50 66       	stdsp	sp[0x18],r6
8000812c:	33 18       	mov	r8,49
8000812e:	40 85       	lddsp	r5,sp[0x20]
80008130:	0a c8       	st.b	r5++,r8
80008132:	30 08       	mov	r8,0
80008134:	50 48       	stdsp	sp[0x10],r8
80008136:	c0 49       	rjmp	8000833e <_dtoa_r+0xb86>
80008138:	40 dc       	lddsp	r12,sp[0x34]
8000813a:	58 0c       	cp.w	r12,0
8000813c:	e0 80 00 b5 	breq	800082a6 <_dtoa_r+0xaee>
80008140:	58 05       	cp.w	r5,0
80008142:	e0 8a 00 08 	brle	80008152 <_dtoa_r+0x99a>
80008146:	08 9b       	mov	r11,r4
80008148:	0a 9a       	mov	r10,r5
8000814a:	0e 9c       	mov	r12,r7
8000814c:	e0 a0 04 5c 	rcall	80008a04 <__lshift>
80008150:	18 94       	mov	r4,r12
80008152:	40 6b       	lddsp	r11,sp[0x18]
80008154:	58 0b       	cp.w	r11,0
80008156:	c0 31       	brne	8000815c <_dtoa_r+0x9a4>
80008158:	08 9c       	mov	r12,r4
8000815a:	c1 38       	rjmp	80008180 <_dtoa_r+0x9c8>
8000815c:	68 1b       	ld.w	r11,r4[0x4]
8000815e:	0e 9c       	mov	r12,r7
80008160:	e0 a0 03 60 	rcall	80008820 <_Balloc>
80008164:	68 4a       	ld.w	r10,r4[0x10]
80008166:	18 95       	mov	r5,r12
80008168:	e8 cb ff f4 	sub	r11,r4,-12
8000816c:	2f ea       	sub	r10,-2
8000816e:	2f 4c       	sub	r12,-12
80008170:	a3 6a       	lsl	r10,0x2
80008172:	fe b0 e7 29 	rcall	80004fc4 <memcpy>
80008176:	0a 9b       	mov	r11,r5
80008178:	30 1a       	mov	r10,1
8000817a:	0e 9c       	mov	r12,r7
8000817c:	e0 a0 04 44 	rcall	80008a04 <__lshift>
80008180:	50 44       	stdsp	sp[0x10],r4
80008182:	40 3a       	lddsp	r10,sp[0xc]
80008184:	30 19       	mov	r9,1
80008186:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000818a:	18 94       	mov	r4,r12
8000818c:	50 da       	stdsp	sp[0x34],r10
8000818e:	40 85       	lddsp	r5,sp[0x20]
80008190:	50 99       	stdsp	sp[0x24],r9
80008192:	50 26       	stdsp	sp[0x8],r6
80008194:	50 e1       	stdsp	sp[0x38],r1
80008196:	04 9b       	mov	r11,r2
80008198:	06 9c       	mov	r12,r3
8000819a:	fe b0 fa 7f 	rcall	80007698 <quorem>
8000819e:	40 4b       	lddsp	r11,sp[0x10]
800081a0:	f8 c0 ff d0 	sub	r0,r12,-48
800081a4:	06 9c       	mov	r12,r3
800081a6:	e0 a0 03 0c 	rcall	800087be <__mcmp>
800081aa:	08 9a       	mov	r10,r4
800081ac:	50 6c       	stdsp	sp[0x18],r12
800081ae:	04 9b       	mov	r11,r2
800081b0:	0e 9c       	mov	r12,r7
800081b2:	e0 a0 03 c1 	rcall	80008934 <__mdiff>
800081b6:	18 91       	mov	r1,r12
800081b8:	78 38       	ld.w	r8,r12[0xc]
800081ba:	58 08       	cp.w	r8,0
800081bc:	c0 30       	breq	800081c2 <_dtoa_r+0xa0a>
800081be:	30 16       	mov	r6,1
800081c0:	c0 68       	rjmp	800081cc <_dtoa_r+0xa14>
800081c2:	18 9b       	mov	r11,r12
800081c4:	06 9c       	mov	r12,r3
800081c6:	e0 a0 02 fc 	rcall	800087be <__mcmp>
800081ca:	18 96       	mov	r6,r12
800081cc:	0e 9c       	mov	r12,r7
800081ce:	02 9b       	mov	r11,r1
800081d0:	e0 a0 03 10 	rcall	800087f0 <_Bfree>
800081d4:	40 cc       	lddsp	r12,sp[0x30]
800081d6:	ed ec 10 08 	or	r8,r6,r12
800081da:	c0 d1       	brne	800081f4 <_dtoa_r+0xa3c>
800081dc:	40 db       	lddsp	r11,sp[0x34]
800081de:	58 0b       	cp.w	r11,0
800081e0:	c0 a1       	brne	800081f4 <_dtoa_r+0xa3c>
800081e2:	40 26       	lddsp	r6,sp[0x8]
800081e4:	e0 40 00 39 	cp.w	r0,57
800081e8:	c3 00       	breq	80008248 <_dtoa_r+0xa90>
800081ea:	40 6a       	lddsp	r10,sp[0x18]
800081ec:	58 0a       	cp.w	r10,0
800081ee:	e0 89 00 24 	brgt	80008236 <_dtoa_r+0xa7e>
800081f2:	c2 f8       	rjmp	80008250 <_dtoa_r+0xa98>
800081f4:	40 69       	lddsp	r9,sp[0x18]
800081f6:	58 09       	cp.w	r9,0
800081f8:	c0 85       	brlt	80008208 <_dtoa_r+0xa50>
800081fa:	12 98       	mov	r8,r9
800081fc:	40 cc       	lddsp	r12,sp[0x30]
800081fe:	18 48       	or	r8,r12
80008200:	c1 d1       	brne	8000823a <_dtoa_r+0xa82>
80008202:	40 db       	lddsp	r11,sp[0x34]
80008204:	58 0b       	cp.w	r11,0
80008206:	c1 a1       	brne	8000823a <_dtoa_r+0xa82>
80008208:	0c 99       	mov	r9,r6
8000820a:	40 26       	lddsp	r6,sp[0x8]
8000820c:	58 09       	cp.w	r9,0
8000820e:	e0 8a 00 21 	brle	80008250 <_dtoa_r+0xa98>
80008212:	06 9b       	mov	r11,r3
80008214:	30 1a       	mov	r10,1
80008216:	0e 9c       	mov	r12,r7
80008218:	e0 a0 03 f6 	rcall	80008a04 <__lshift>
8000821c:	04 9b       	mov	r11,r2
8000821e:	18 93       	mov	r3,r12
80008220:	e0 a0 02 cf 	rcall	800087be <__mcmp>
80008224:	e0 89 00 06 	brgt	80008230 <_dtoa_r+0xa78>
80008228:	c1 41       	brne	80008250 <_dtoa_r+0xa98>
8000822a:	ed b0 00 00 	bld	r0,0x0
8000822e:	c1 11       	brne	80008250 <_dtoa_r+0xa98>
80008230:	e0 40 00 39 	cp.w	r0,57
80008234:	c0 a0       	breq	80008248 <_dtoa_r+0xa90>
80008236:	2f f0       	sub	r0,-1
80008238:	c0 c8       	rjmp	80008250 <_dtoa_r+0xa98>
8000823a:	58 06       	cp.w	r6,0
8000823c:	e0 8a 00 0c 	brle	80008254 <_dtoa_r+0xa9c>
80008240:	40 26       	lddsp	r6,sp[0x8]
80008242:	e0 40 00 39 	cp.w	r0,57
80008246:	c0 41       	brne	8000824e <_dtoa_r+0xa96>
80008248:	33 98       	mov	r8,57
8000824a:	0a c8       	st.b	r5++,r8
8000824c:	c6 78       	rjmp	8000831a <_dtoa_r+0xb62>
8000824e:	2f f0       	sub	r0,-1
80008250:	0a c0       	st.b	r5++,r0
80008252:	c7 58       	rjmp	8000833c <_dtoa_r+0xb84>
80008254:	0a c0       	st.b	r5++,r0
80008256:	40 9a       	lddsp	r10,sp[0x24]
80008258:	40 e9       	lddsp	r9,sp[0x38]
8000825a:	12 3a       	cp.w	r10,r9
8000825c:	c4 30       	breq	800082e2 <_dtoa_r+0xb2a>
8000825e:	06 9b       	mov	r11,r3
80008260:	30 09       	mov	r9,0
80008262:	30 aa       	mov	r10,10
80008264:	0e 9c       	mov	r12,r7
80008266:	e0 a0 04 9b 	rcall	80008b9c <__multadd>
8000826a:	40 48       	lddsp	r8,sp[0x10]
8000826c:	18 93       	mov	r3,r12
8000826e:	08 38       	cp.w	r8,r4
80008270:	c0 91       	brne	80008282 <_dtoa_r+0xaca>
80008272:	10 9b       	mov	r11,r8
80008274:	30 09       	mov	r9,0
80008276:	30 aa       	mov	r10,10
80008278:	0e 9c       	mov	r12,r7
8000827a:	e0 a0 04 91 	rcall	80008b9c <__multadd>
8000827e:	50 4c       	stdsp	sp[0x10],r12
80008280:	c0 e8       	rjmp	8000829c <_dtoa_r+0xae4>
80008282:	40 4b       	lddsp	r11,sp[0x10]
80008284:	30 09       	mov	r9,0
80008286:	30 aa       	mov	r10,10
80008288:	0e 9c       	mov	r12,r7
8000828a:	e0 a0 04 89 	rcall	80008b9c <__multadd>
8000828e:	08 9b       	mov	r11,r4
80008290:	50 4c       	stdsp	sp[0x10],r12
80008292:	30 09       	mov	r9,0
80008294:	30 aa       	mov	r10,10
80008296:	0e 9c       	mov	r12,r7
80008298:	e0 a0 04 82 	rcall	80008b9c <__multadd>
8000829c:	18 94       	mov	r4,r12
8000829e:	40 9c       	lddsp	r12,sp[0x24]
800082a0:	2f fc       	sub	r12,-1
800082a2:	50 9c       	stdsp	sp[0x24],r12
800082a4:	c7 9b       	rjmp	80008196 <_dtoa_r+0x9de>
800082a6:	30 18       	mov	r8,1
800082a8:	06 90       	mov	r0,r3
800082aa:	40 85       	lddsp	r5,sp[0x20]
800082ac:	08 93       	mov	r3,r4
800082ae:	0c 94       	mov	r4,r6
800082b0:	10 96       	mov	r6,r8
800082b2:	04 9b       	mov	r11,r2
800082b4:	00 9c       	mov	r12,r0
800082b6:	fe b0 f9 f1 	rcall	80007698 <quorem>
800082ba:	2d 0c       	sub	r12,-48
800082bc:	0a cc       	st.b	r5++,r12
800082be:	02 36       	cp.w	r6,r1
800082c0:	c0 a4       	brge	800082d4 <_dtoa_r+0xb1c>
800082c2:	00 9b       	mov	r11,r0
800082c4:	30 09       	mov	r9,0
800082c6:	30 aa       	mov	r10,10
800082c8:	0e 9c       	mov	r12,r7
800082ca:	2f f6       	sub	r6,-1
800082cc:	e0 a0 04 68 	rcall	80008b9c <__multadd>
800082d0:	18 90       	mov	r0,r12
800082d2:	cf 0b       	rjmp	800082b2 <_dtoa_r+0xafa>
800082d4:	08 96       	mov	r6,r4
800082d6:	30 0b       	mov	r11,0
800082d8:	06 94       	mov	r4,r3
800082da:	50 4b       	stdsp	sp[0x10],r11
800082dc:	00 93       	mov	r3,r0
800082de:	18 90       	mov	r0,r12
800082e0:	c0 28       	rjmp	800082e4 <_dtoa_r+0xb2c>
800082e2:	40 26       	lddsp	r6,sp[0x8]
800082e4:	06 9b       	mov	r11,r3
800082e6:	30 1a       	mov	r10,1
800082e8:	0e 9c       	mov	r12,r7
800082ea:	e0 a0 03 8d 	rcall	80008a04 <__lshift>
800082ee:	04 9b       	mov	r11,r2
800082f0:	18 93       	mov	r3,r12
800082f2:	e0 a0 02 66 	rcall	800087be <__mcmp>
800082f6:	e0 89 00 12 	brgt	8000831a <_dtoa_r+0xb62>
800082fa:	c1 b1       	brne	80008330 <_dtoa_r+0xb78>
800082fc:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008300:	c0 d1       	brne	8000831a <_dtoa_r+0xb62>
80008302:	c1 78       	rjmp	80008330 <_dtoa_r+0xb78>
80008304:	40 89       	lddsp	r9,sp[0x20]
80008306:	12 38       	cp.w	r8,r9
80008308:	c0 30       	breq	8000830e <_dtoa_r+0xb56>
8000830a:	10 95       	mov	r5,r8
8000830c:	c0 88       	rjmp	8000831c <_dtoa_r+0xb64>
8000830e:	2f f6       	sub	r6,-1
80008310:	50 66       	stdsp	sp[0x18],r6
80008312:	33 18       	mov	r8,49
80008314:	40 8c       	lddsp	r12,sp[0x20]
80008316:	b8 88       	st.b	r12[0x0],r8
80008318:	c1 38       	rjmp	8000833e <_dtoa_r+0xb86>
8000831a:	33 9a       	mov	r10,57
8000831c:	0a 98       	mov	r8,r5
8000831e:	11 79       	ld.ub	r9,--r8
80008320:	f4 09 18 00 	cp.b	r9,r10
80008324:	cf 00       	breq	80008304 <_dtoa_r+0xb4c>
80008326:	2f f9       	sub	r9,-1
80008328:	b0 89       	st.b	r8[0x0],r9
8000832a:	c0 98       	rjmp	8000833c <_dtoa_r+0xb84>
8000832c:	10 95       	mov	r5,r8
8000832e:	c0 28       	rjmp	80008332 <_dtoa_r+0xb7a>
80008330:	33 09       	mov	r9,48
80008332:	0a 98       	mov	r8,r5
80008334:	11 7a       	ld.ub	r10,--r8
80008336:	f2 0a 18 00 	cp.b	r10,r9
8000833a:	cf 90       	breq	8000832c <_dtoa_r+0xb74>
8000833c:	50 66       	stdsp	sp[0x18],r6
8000833e:	04 9b       	mov	r11,r2
80008340:	0e 9c       	mov	r12,r7
80008342:	e0 a0 02 57 	rcall	800087f0 <_Bfree>
80008346:	58 04       	cp.w	r4,0
80008348:	c1 20       	breq	8000836c <_dtoa_r+0xbb4>
8000834a:	40 4b       	lddsp	r11,sp[0x10]
8000834c:	08 3b       	cp.w	r11,r4
8000834e:	5f 19       	srne	r9
80008350:	58 0b       	cp.w	r11,0
80008352:	5f 18       	srne	r8
80008354:	f3 e8 00 08 	and	r8,r9,r8
80008358:	c0 40       	breq	80008360 <_dtoa_r+0xba8>
8000835a:	0e 9c       	mov	r12,r7
8000835c:	e0 a0 02 4a 	rcall	800087f0 <_Bfree>
80008360:	08 9b       	mov	r11,r4
80008362:	0e 9c       	mov	r12,r7
80008364:	e0 a0 02 46 	rcall	800087f0 <_Bfree>
80008368:	c0 28       	rjmp	8000836c <_dtoa_r+0xbb4>
8000836a:	50 66       	stdsp	sp[0x18],r6
8000836c:	0e 9c       	mov	r12,r7
8000836e:	06 9b       	mov	r11,r3
80008370:	e0 a0 02 40 	rcall	800087f0 <_Bfree>
80008374:	30 08       	mov	r8,0
80008376:	aa 88       	st.b	r5[0x0],r8
80008378:	40 68       	lddsp	r8,sp[0x18]
8000837a:	41 5a       	lddsp	r10,sp[0x54]
8000837c:	2f f8       	sub	r8,-1
8000837e:	41 29       	lddsp	r9,sp[0x48]
80008380:	95 08       	st.w	r10[0x0],r8
80008382:	40 8c       	lddsp	r12,sp[0x20]
80008384:	58 09       	cp.w	r9,0
80008386:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000838a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000838e:	2e 6d       	sub	sp,-104
80008390:	d8 32       	popm	r0-r7,pc
80008392:	d7 03       	nop

80008394 <__errno>:
80008394:	e0 68 00 fc 	mov	r8,252
80008398:	70 0c       	ld.w	r12,r8[0x0]
8000839a:	2f 4c       	sub	r12,-12
8000839c:	5e fc       	retal	r12
8000839e:	d7 03       	nop

800083a0 <__sfvwrite_r>:
800083a0:	d4 31       	pushm	r0-r7,lr
800083a2:	20 3d       	sub	sp,12
800083a4:	14 94       	mov	r4,r10
800083a6:	18 95       	mov	r5,r12
800083a8:	16 97       	mov	r7,r11
800083aa:	74 28       	ld.w	r8,r10[0x8]
800083ac:	58 08       	cp.w	r8,0
800083ae:	e0 80 01 44 	breq	80008636 <__sfvwrite_r+0x296>
800083b2:	96 68       	ld.sh	r8,r11[0xc]
800083b4:	ed b8 00 03 	bld	r8,0x3
800083b8:	c0 41       	brne	800083c0 <__sfvwrite_r+0x20>
800083ba:	76 48       	ld.w	r8,r11[0x10]
800083bc:	58 08       	cp.w	r8,0
800083be:	c0 c1       	brne	800083d6 <__sfvwrite_r+0x36>
800083c0:	0e 9b       	mov	r11,r7
800083c2:	0a 9c       	mov	r12,r5
800083c4:	fe b0 f8 ec 	rcall	8000759c <__swsetup_r>
800083c8:	c0 70       	breq	800083d6 <__sfvwrite_r+0x36>
800083ca:	8e 68       	ld.sh	r8,r7[0xc]
800083cc:	a7 a8       	sbr	r8,0x6
800083ce:	ae 68       	st.h	r7[0xc],r8
800083d0:	30 98       	mov	r8,9
800083d2:	8b 38       	st.w	r5[0xc],r8
800083d4:	c2 f9       	rjmp	80008632 <__sfvwrite_r+0x292>
800083d6:	8e 63       	ld.sh	r3,r7[0xc]
800083d8:	68 00       	ld.w	r0,r4[0x0]
800083da:	06 96       	mov	r6,r3
800083dc:	e2 16 00 02 	andl	r6,0x2,COH
800083e0:	c2 10       	breq	80008422 <__sfvwrite_r+0x82>
800083e2:	30 03       	mov	r3,0
800083e4:	e0 62 04 00 	mov	r2,1024
800083e8:	06 96       	mov	r6,r3
800083ea:	c0 48       	rjmp	800083f2 <__sfvwrite_r+0x52>
800083ec:	60 03       	ld.w	r3,r0[0x0]
800083ee:	60 16       	ld.w	r6,r0[0x4]
800083f0:	2f 80       	sub	r0,-8
800083f2:	58 06       	cp.w	r6,0
800083f4:	cf c0       	breq	800083ec <__sfvwrite_r+0x4c>
800083f6:	e0 46 04 00 	cp.w	r6,1024
800083fa:	ec 09 17 80 	movls	r9,r6
800083fe:	e4 09 17 b0 	movhi	r9,r2
80008402:	06 9a       	mov	r10,r3
80008404:	6e a8       	ld.w	r8,r7[0x28]
80008406:	6e 8b       	ld.w	r11,r7[0x20]
80008408:	0a 9c       	mov	r12,r5
8000840a:	5d 18       	icall	r8
8000840c:	18 16       	sub	r6,r12
8000840e:	58 0c       	cp.w	r12,0
80008410:	e0 8a 01 0e 	brle	8000862c <__sfvwrite_r+0x28c>
80008414:	68 28       	ld.w	r8,r4[0x8]
80008416:	18 18       	sub	r8,r12
80008418:	89 28       	st.w	r4[0x8],r8
8000841a:	e0 80 01 0e 	breq	80008636 <__sfvwrite_r+0x296>
8000841e:	18 03       	add	r3,r12
80008420:	ce 9b       	rjmp	800083f2 <__sfvwrite_r+0x52>
80008422:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80008426:	c0 70       	breq	80008434 <__sfvwrite_r+0x94>
80008428:	50 06       	stdsp	sp[0x0],r6
8000842a:	0c 93       	mov	r3,r6
8000842c:	0c 91       	mov	r1,r6
8000842e:	50 15       	stdsp	sp[0x4],r5
80008430:	08 92       	mov	r2,r4
80008432:	c9 d8       	rjmp	8000856c <__sfvwrite_r+0x1cc>
80008434:	06 96       	mov	r6,r3
80008436:	08 91       	mov	r1,r4
80008438:	c0 48       	rjmp	80008440 <__sfvwrite_r+0xa0>
8000843a:	60 03       	ld.w	r3,r0[0x0]
8000843c:	60 16       	ld.w	r6,r0[0x4]
8000843e:	2f 80       	sub	r0,-8
80008440:	58 06       	cp.w	r6,0
80008442:	cf c0       	breq	8000843a <__sfvwrite_r+0x9a>
80008444:	8e 68       	ld.sh	r8,r7[0xc]
80008446:	6e 24       	ld.w	r4,r7[0x8]
80008448:	10 99       	mov	r9,r8
8000844a:	e2 19 02 00 	andl	r9,0x200,COH
8000844e:	c5 60       	breq	800084fa <__sfvwrite_r+0x15a>
80008450:	08 36       	cp.w	r6,r4
80008452:	c4 53       	brcs	800084dc <__sfvwrite_r+0x13c>
80008454:	10 99       	mov	r9,r8
80008456:	e2 19 04 80 	andl	r9,0x480,COH
8000845a:	c4 10       	breq	800084dc <__sfvwrite_r+0x13c>
8000845c:	6e 4b       	ld.w	r11,r7[0x10]
8000845e:	6e 09       	ld.w	r9,r7[0x0]
80008460:	16 19       	sub	r9,r11
80008462:	50 09       	stdsp	sp[0x0],r9
80008464:	6e 59       	ld.w	r9,r7[0x14]
80008466:	10 9c       	mov	r12,r8
80008468:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000846c:	30 28       	mov	r8,2
8000846e:	f4 08 0c 08 	divs	r8,r10,r8
80008472:	fa e9 00 04 	st.d	sp[4],r8
80008476:	10 94       	mov	r4,r8
80008478:	40 09       	lddsp	r9,sp[0x0]
8000847a:	e2 1c 04 00 	andl	r12,0x400,COH
8000847e:	2f f9       	sub	r9,-1
80008480:	0c 09       	add	r9,r6
80008482:	12 38       	cp.w	r8,r9
80008484:	f2 04 17 30 	movlo	r4,r9
80008488:	58 0c       	cp.w	r12,0
8000848a:	c1 10       	breq	800084ac <__sfvwrite_r+0x10c>
8000848c:	08 9b       	mov	r11,r4
8000848e:	0a 9c       	mov	r12,r5
80008490:	fe b0 e3 80 	rcall	80004b90 <_malloc_r>
80008494:	18 92       	mov	r2,r12
80008496:	c1 50       	breq	800084c0 <__sfvwrite_r+0x120>
80008498:	40 0a       	lddsp	r10,sp[0x0]
8000849a:	6e 4b       	ld.w	r11,r7[0x10]
8000849c:	fe b0 e5 94 	rcall	80004fc4 <memcpy>
800084a0:	8e 68       	ld.sh	r8,r7[0xc]
800084a2:	e0 18 fb 7f 	andl	r8,0xfb7f
800084a6:	a7 b8       	sbr	r8,0x7
800084a8:	ae 68       	st.h	r7[0xc],r8
800084aa:	c0 e8       	rjmp	800084c6 <__sfvwrite_r+0x126>
800084ac:	08 9a       	mov	r10,r4
800084ae:	0a 9c       	mov	r12,r5
800084b0:	e0 a0 04 0e 	rcall	80008ccc <_realloc_r>
800084b4:	18 92       	mov	r2,r12
800084b6:	c0 81       	brne	800084c6 <__sfvwrite_r+0x126>
800084b8:	6e 4b       	ld.w	r11,r7[0x10]
800084ba:	0a 9c       	mov	r12,r5
800084bc:	fe b0 e2 0e 	rcall	800048d8 <_free_r>
800084c0:	30 c8       	mov	r8,12
800084c2:	8b 38       	st.w	r5[0xc],r8
800084c4:	cb 48       	rjmp	8000862c <__sfvwrite_r+0x28c>
800084c6:	40 0a       	lddsp	r10,sp[0x0]
800084c8:	40 09       	lddsp	r9,sp[0x0]
800084ca:	e8 0a 01 0a 	sub	r10,r4,r10
800084ce:	e4 09 00 08 	add	r8,r2,r9
800084d2:	8f 54       	st.w	r7[0x14],r4
800084d4:	8f 2a       	st.w	r7[0x8],r10
800084d6:	8f 08       	st.w	r7[0x0],r8
800084d8:	8f 42       	st.w	r7[0x10],r2
800084da:	0c 94       	mov	r4,r6
800084dc:	08 36       	cp.w	r6,r4
800084de:	ec 04 17 30 	movlo	r4,r6
800084e2:	06 9b       	mov	r11,r3
800084e4:	08 9a       	mov	r10,r4
800084e6:	6e 0c       	ld.w	r12,r7[0x0]
800084e8:	cd 5c       	rcall	80008692 <memmove>
800084ea:	6e 08       	ld.w	r8,r7[0x0]
800084ec:	08 08       	add	r8,r4
800084ee:	8f 08       	st.w	r7[0x0],r8
800084f0:	6e 28       	ld.w	r8,r7[0x8]
800084f2:	08 18       	sub	r8,r4
800084f4:	0c 94       	mov	r4,r6
800084f6:	8f 28       	st.w	r7[0x8],r8
800084f8:	c2 e8       	rjmp	80008554 <__sfvwrite_r+0x1b4>
800084fa:	08 36       	cp.w	r6,r4
800084fc:	5f ba       	srhi	r10
800084fe:	6e 0c       	ld.w	r12,r7[0x0]
80008500:	6e 48       	ld.w	r8,r7[0x10]
80008502:	10 3c       	cp.w	r12,r8
80008504:	5f b8       	srhi	r8
80008506:	f5 e8 00 08 	and	r8,r10,r8
8000850a:	f2 08 18 00 	cp.b	r8,r9
8000850e:	c0 d0       	breq	80008528 <__sfvwrite_r+0x188>
80008510:	06 9b       	mov	r11,r3
80008512:	08 9a       	mov	r10,r4
80008514:	cb fc       	rcall	80008692 <memmove>
80008516:	6e 08       	ld.w	r8,r7[0x0]
80008518:	08 08       	add	r8,r4
8000851a:	0e 9b       	mov	r11,r7
8000851c:	8f 08       	st.w	r7[0x0],r8
8000851e:	0a 9c       	mov	r12,r5
80008520:	fe b0 e0 6a 	rcall	800045f4 <_fflush_r>
80008524:	c1 80       	breq	80008554 <__sfvwrite_r+0x1b4>
80008526:	c8 38       	rjmp	8000862c <__sfvwrite_r+0x28c>
80008528:	6e 59       	ld.w	r9,r7[0x14]
8000852a:	12 36       	cp.w	r6,r9
8000852c:	c0 a3       	brcs	80008540 <__sfvwrite_r+0x1a0>
8000852e:	6e a8       	ld.w	r8,r7[0x28]
80008530:	06 9a       	mov	r10,r3
80008532:	6e 8b       	ld.w	r11,r7[0x20]
80008534:	0a 9c       	mov	r12,r5
80008536:	5d 18       	icall	r8
80008538:	18 94       	mov	r4,r12
8000853a:	e0 89 00 0d 	brgt	80008554 <__sfvwrite_r+0x1b4>
8000853e:	c7 78       	rjmp	8000862c <__sfvwrite_r+0x28c>
80008540:	0c 9a       	mov	r10,r6
80008542:	06 9b       	mov	r11,r3
80008544:	ca 7c       	rcall	80008692 <memmove>
80008546:	6e 08       	ld.w	r8,r7[0x0]
80008548:	0c 08       	add	r8,r6
8000854a:	0c 94       	mov	r4,r6
8000854c:	8f 08       	st.w	r7[0x0],r8
8000854e:	6e 28       	ld.w	r8,r7[0x8]
80008550:	0c 18       	sub	r8,r6
80008552:	8f 28       	st.w	r7[0x8],r8
80008554:	62 28       	ld.w	r8,r1[0x8]
80008556:	08 18       	sub	r8,r4
80008558:	83 28       	st.w	r1[0x8],r8
8000855a:	c6 e0       	breq	80008636 <__sfvwrite_r+0x296>
8000855c:	08 16       	sub	r6,r4
8000855e:	08 03       	add	r3,r4
80008560:	c7 0b       	rjmp	80008440 <__sfvwrite_r+0xa0>
80008562:	60 03       	ld.w	r3,r0[0x0]
80008564:	60 11       	ld.w	r1,r0[0x4]
80008566:	30 08       	mov	r8,0
80008568:	2f 80       	sub	r0,-8
8000856a:	50 08       	stdsp	sp[0x0],r8
8000856c:	58 01       	cp.w	r1,0
8000856e:	cf a0       	breq	80008562 <__sfvwrite_r+0x1c2>
80008570:	40 0a       	lddsp	r10,sp[0x0]
80008572:	58 0a       	cp.w	r10,0
80008574:	c1 71       	brne	800085a2 <__sfvwrite_r+0x202>
80008576:	02 9a       	mov	r10,r1
80008578:	30 ab       	mov	r11,10
8000857a:	06 9c       	mov	r12,r3
8000857c:	c8 0c       	rcall	8000867c <memchr>
8000857e:	f9 b8 01 01 	movne	r8,1
80008582:	f9 d8 e1 06 	addne	r6,r12,r8
80008586:	ed d3 e1 16 	subne	r6,r6,r3
8000858a:	f9 b9 01 01 	movne	r9,1
8000858e:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008592:	f9 b8 00 01 	moveq	r8,1
80008596:	e3 d8 e0 06 	addeq	r6,r1,r8
8000859a:	f9 b8 00 01 	moveq	r8,1
8000859e:	fb f8 0a 00 	st.weq	sp[0x0],r8
800085a2:	02 36       	cp.w	r6,r1
800085a4:	ec 04 17 80 	movls	r4,r6
800085a8:	e2 04 17 b0 	movhi	r4,r1
800085ac:	6e 59       	ld.w	r9,r7[0x14]
800085ae:	6e 25       	ld.w	r5,r7[0x8]
800085b0:	f2 05 00 05 	add	r5,r9,r5
800085b4:	0a 34       	cp.w	r4,r5
800085b6:	5f 9a       	srgt	r10
800085b8:	6e 0c       	ld.w	r12,r7[0x0]
800085ba:	6e 48       	ld.w	r8,r7[0x10]
800085bc:	10 3c       	cp.w	r12,r8
800085be:	5f b8       	srhi	r8
800085c0:	f5 e8 00 08 	and	r8,r10,r8
800085c4:	30 0a       	mov	r10,0
800085c6:	f4 08 18 00 	cp.b	r8,r10
800085ca:	c0 d0       	breq	800085e4 <__sfvwrite_r+0x244>
800085cc:	06 9b       	mov	r11,r3
800085ce:	0a 9a       	mov	r10,r5
800085d0:	c6 1c       	rcall	80008692 <memmove>
800085d2:	6e 08       	ld.w	r8,r7[0x0]
800085d4:	0a 08       	add	r8,r5
800085d6:	0e 9b       	mov	r11,r7
800085d8:	8f 08       	st.w	r7[0x0],r8
800085da:	40 1c       	lddsp	r12,sp[0x4]
800085dc:	fe b0 e0 0c 	rcall	800045f4 <_fflush_r>
800085e0:	c1 70       	breq	8000860e <__sfvwrite_r+0x26e>
800085e2:	c2 58       	rjmp	8000862c <__sfvwrite_r+0x28c>
800085e4:	12 34       	cp.w	r4,r9
800085e6:	c0 a5       	brlt	800085fa <__sfvwrite_r+0x25a>
800085e8:	6e a8       	ld.w	r8,r7[0x28]
800085ea:	06 9a       	mov	r10,r3
800085ec:	6e 8b       	ld.w	r11,r7[0x20]
800085ee:	40 1c       	lddsp	r12,sp[0x4]
800085f0:	5d 18       	icall	r8
800085f2:	18 95       	mov	r5,r12
800085f4:	e0 89 00 0d 	brgt	8000860e <__sfvwrite_r+0x26e>
800085f8:	c1 a8       	rjmp	8000862c <__sfvwrite_r+0x28c>
800085fa:	08 9a       	mov	r10,r4
800085fc:	06 9b       	mov	r11,r3
800085fe:	c4 ac       	rcall	80008692 <memmove>
80008600:	6e 08       	ld.w	r8,r7[0x0]
80008602:	08 08       	add	r8,r4
80008604:	08 95       	mov	r5,r4
80008606:	8f 08       	st.w	r7[0x0],r8
80008608:	6e 28       	ld.w	r8,r7[0x8]
8000860a:	08 18       	sub	r8,r4
8000860c:	8f 28       	st.w	r7[0x8],r8
8000860e:	0a 16       	sub	r6,r5
80008610:	c0 71       	brne	8000861e <__sfvwrite_r+0x27e>
80008612:	0e 9b       	mov	r11,r7
80008614:	40 1c       	lddsp	r12,sp[0x4]
80008616:	fe b0 df ef 	rcall	800045f4 <_fflush_r>
8000861a:	c0 91       	brne	8000862c <__sfvwrite_r+0x28c>
8000861c:	50 06       	stdsp	sp[0x0],r6
8000861e:	64 28       	ld.w	r8,r2[0x8]
80008620:	0a 18       	sub	r8,r5
80008622:	85 28       	st.w	r2[0x8],r8
80008624:	c0 90       	breq	80008636 <__sfvwrite_r+0x296>
80008626:	0a 11       	sub	r1,r5
80008628:	0a 03       	add	r3,r5
8000862a:	ca 1b       	rjmp	8000856c <__sfvwrite_r+0x1cc>
8000862c:	8e 68       	ld.sh	r8,r7[0xc]
8000862e:	a7 a8       	sbr	r8,0x6
80008630:	ae 68       	st.h	r7[0xc],r8
80008632:	3f fc       	mov	r12,-1
80008634:	c0 28       	rjmp	80008638 <__sfvwrite_r+0x298>
80008636:	30 0c       	mov	r12,0
80008638:	2f dd       	sub	sp,-12
8000863a:	d8 32       	popm	r0-r7,pc

8000863c <_localeconv_r>:
8000863c:	fe cc d8 1c 	sub	r12,pc,-10212
80008640:	5e fc       	retal	r12
80008642:	d7 03       	nop

80008644 <_lseek_r>:
80008644:	d4 21       	pushm	r4-r7,lr
80008646:	16 98       	mov	r8,r11
80008648:	18 97       	mov	r7,r12
8000864a:	10 9c       	mov	r12,r8
8000864c:	30 08       	mov	r8,0
8000864e:	14 9b       	mov	r11,r10
80008650:	e0 66 19 f4 	mov	r6,6644
80008654:	12 9a       	mov	r10,r9
80008656:	8d 08       	st.w	r6[0x0],r8
80008658:	fe b0 e5 fc 	rcall	80005250 <_lseek>
8000865c:	5b fc       	cp.w	r12,-1
8000865e:	c0 51       	brne	80008668 <_lseek_r+0x24>
80008660:	6c 08       	ld.w	r8,r6[0x0]
80008662:	58 08       	cp.w	r8,0
80008664:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008668:	d8 22       	popm	r4-r7,pc
8000866a:	d7 03       	nop

8000866c <malloc>:
8000866c:	d4 01       	pushm	lr
8000866e:	e0 68 00 fc 	mov	r8,252
80008672:	18 9b       	mov	r11,r12
80008674:	70 0c       	ld.w	r12,r8[0x0]
80008676:	fe b0 e2 8d 	rcall	80004b90 <_malloc_r>
8000867a:	d8 02       	popm	pc

8000867c <memchr>:
8000867c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80008680:	c0 68       	rjmp	8000868c <memchr+0x10>
80008682:	20 1a       	sub	r10,1
80008684:	19 88       	ld.ub	r8,r12[0x0]
80008686:	16 38       	cp.w	r8,r11
80008688:	5e 0c       	reteq	r12
8000868a:	2f fc       	sub	r12,-1
8000868c:	58 0a       	cp.w	r10,0
8000868e:	cf a1       	brne	80008682 <memchr+0x6>
80008690:	5e fa       	retal	r10

80008692 <memmove>:
80008692:	d4 01       	pushm	lr
80008694:	18 3b       	cp.w	r11,r12
80008696:	c1 92       	brcc	800086c8 <memmove+0x36>
80008698:	f6 0a 00 09 	add	r9,r11,r10
8000869c:	12 3c       	cp.w	r12,r9
8000869e:	c1 52       	brcc	800086c8 <memmove+0x36>
800086a0:	f8 0a 00 0b 	add	r11,r12,r10
800086a4:	30 08       	mov	r8,0
800086a6:	c0 68       	rjmp	800086b2 <memmove+0x20>
800086a8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800086ac:	20 1a       	sub	r10,1
800086ae:	f6 08 0b 0e 	st.b	r11[r8],lr
800086b2:	20 18       	sub	r8,1
800086b4:	58 0a       	cp.w	r10,0
800086b6:	cf 91       	brne	800086a8 <memmove+0x16>
800086b8:	d8 02       	popm	pc
800086ba:	f6 08 07 09 	ld.ub	r9,r11[r8]
800086be:	20 1a       	sub	r10,1
800086c0:	f8 08 0b 09 	st.b	r12[r8],r9
800086c4:	2f f8       	sub	r8,-1
800086c6:	c0 28       	rjmp	800086ca <memmove+0x38>
800086c8:	30 08       	mov	r8,0
800086ca:	58 0a       	cp.w	r10,0
800086cc:	cf 71       	brne	800086ba <memmove+0x28>
800086ce:	d8 02       	popm	pc

800086d0 <__hi0bits>:
800086d0:	18 98       	mov	r8,r12
800086d2:	e0 1c 00 00 	andl	r12,0x0
800086d6:	f0 09 15 10 	lsl	r9,r8,0x10
800086da:	58 0c       	cp.w	r12,0
800086dc:	f2 08 17 00 	moveq	r8,r9
800086e0:	f9 bc 00 10 	moveq	r12,16
800086e4:	f9 bc 01 00 	movne	r12,0
800086e8:	10 9a       	mov	r10,r8
800086ea:	f0 09 15 08 	lsl	r9,r8,0x8
800086ee:	e6 1a ff 00 	andh	r10,0xff00,COH
800086f2:	f7 bc 00 f8 	subeq	r12,-8
800086f6:	f2 08 17 00 	moveq	r8,r9
800086fa:	10 9a       	mov	r10,r8
800086fc:	f0 09 15 04 	lsl	r9,r8,0x4
80008700:	e6 1a f0 00 	andh	r10,0xf000,COH
80008704:	f7 bc 00 fc 	subeq	r12,-4
80008708:	f2 08 17 00 	moveq	r8,r9
8000870c:	10 9a       	mov	r10,r8
8000870e:	f0 09 15 02 	lsl	r9,r8,0x2
80008712:	e6 1a c0 00 	andh	r10,0xc000,COH
80008716:	f7 bc 00 fe 	subeq	r12,-2
8000871a:	f2 08 17 00 	moveq	r8,r9
8000871e:	58 08       	cp.w	r8,0
80008720:	5e 5c       	retlt	r12
80008722:	ed b8 00 1e 	bld	r8,0x1e
80008726:	f9 bc 01 20 	movne	r12,32
8000872a:	f7 bc 00 ff 	subeq	r12,-1
8000872e:	5e fc       	retal	r12

80008730 <__lo0bits>:
80008730:	18 99       	mov	r9,r12
80008732:	78 08       	ld.w	r8,r12[0x0]
80008734:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80008738:	c1 50       	breq	80008762 <__lo0bits+0x32>
8000873a:	ed b8 00 00 	bld	r8,0x0
8000873e:	c0 21       	brne	80008742 <__lo0bits+0x12>
80008740:	5e fd       	retal	0
80008742:	10 9b       	mov	r11,r8
80008744:	f0 0a 16 01 	lsr	r10,r8,0x1
80008748:	e2 1b 00 02 	andl	r11,0x2,COH
8000874c:	a3 88       	lsr	r8,0x2
8000874e:	58 0b       	cp.w	r11,0
80008750:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008754:	f9 bc 01 01 	movne	r12,1
80008758:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000875c:	f9 bc 00 02 	moveq	r12,2
80008760:	5e fc       	retal	r12
80008762:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008766:	f0 0b 16 10 	lsr	r11,r8,0x10
8000876a:	58 0a       	cp.w	r10,0
8000876c:	f6 08 17 00 	moveq	r8,r11
80008770:	f9 bc 00 10 	moveq	r12,16
80008774:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80008778:	f0 0a 16 08 	lsr	r10,r8,0x8
8000877c:	58 0b       	cp.w	r11,0
8000877e:	f7 bc 00 f8 	subeq	r12,-8
80008782:	f4 08 17 00 	moveq	r8,r10
80008786:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000878a:	f0 0a 16 04 	lsr	r10,r8,0x4
8000878e:	58 0b       	cp.w	r11,0
80008790:	f7 bc 00 fc 	subeq	r12,-4
80008794:	f4 08 17 00 	moveq	r8,r10
80008798:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000879c:	f0 0a 16 02 	lsr	r10,r8,0x2
800087a0:	58 0b       	cp.w	r11,0
800087a2:	f7 bc 00 fe 	subeq	r12,-2
800087a6:	f4 08 17 00 	moveq	r8,r10
800087aa:	ed b8 00 00 	bld	r8,0x0
800087ae:	c0 60       	breq	800087ba <__lo0bits+0x8a>
800087b0:	a1 98       	lsr	r8,0x1
800087b2:	c0 31       	brne	800087b8 <__lo0bits+0x88>
800087b4:	32 0c       	mov	r12,32
800087b6:	5e fc       	retal	r12
800087b8:	2f fc       	sub	r12,-1
800087ba:	93 08       	st.w	r9[0x0],r8
800087bc:	5e fc       	retal	r12

800087be <__mcmp>:
800087be:	d4 01       	pushm	lr
800087c0:	18 98       	mov	r8,r12
800087c2:	76 49       	ld.w	r9,r11[0x10]
800087c4:	78 4c       	ld.w	r12,r12[0x10]
800087c6:	12 1c       	sub	r12,r9
800087c8:	c1 31       	brne	800087ee <__mcmp+0x30>
800087ca:	2f b9       	sub	r9,-5
800087cc:	a3 69       	lsl	r9,0x2
800087ce:	12 0b       	add	r11,r9
800087d0:	f0 09 00 09 	add	r9,r8,r9
800087d4:	2e c8       	sub	r8,-20
800087d6:	13 4e       	ld.w	lr,--r9
800087d8:	17 4a       	ld.w	r10,--r11
800087da:	14 3e       	cp.w	lr,r10
800087dc:	c0 60       	breq	800087e8 <__mcmp+0x2a>
800087de:	f9 bc 03 ff 	movlo	r12,-1
800087e2:	f9 bc 02 01 	movhs	r12,1
800087e6:	d8 02       	popm	pc
800087e8:	10 39       	cp.w	r9,r8
800087ea:	fe 9b ff f6 	brhi	800087d6 <__mcmp+0x18>
800087ee:	d8 02       	popm	pc

800087f0 <_Bfree>:
800087f0:	d4 21       	pushm	r4-r7,lr
800087f2:	18 97       	mov	r7,r12
800087f4:	16 95       	mov	r5,r11
800087f6:	78 96       	ld.w	r6,r12[0x24]
800087f8:	58 06       	cp.w	r6,0
800087fa:	c0 81       	brne	8000880a <_Bfree+0x1a>
800087fc:	31 0c       	mov	r12,16
800087fe:	c3 7f       	rcall	8000866c <malloc>
80008800:	99 36       	st.w	r12[0xc],r6
80008802:	8f 9c       	st.w	r7[0x24],r12
80008804:	99 16       	st.w	r12[0x4],r6
80008806:	99 26       	st.w	r12[0x8],r6
80008808:	99 06       	st.w	r12[0x0],r6
8000880a:	58 05       	cp.w	r5,0
8000880c:	c0 90       	breq	8000881e <_Bfree+0x2e>
8000880e:	6a 19       	ld.w	r9,r5[0x4]
80008810:	6e 98       	ld.w	r8,r7[0x24]
80008812:	70 38       	ld.w	r8,r8[0xc]
80008814:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80008818:	8b 0a       	st.w	r5[0x0],r10
8000881a:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000881e:	d8 22       	popm	r4-r7,pc

80008820 <_Balloc>:
80008820:	d4 21       	pushm	r4-r7,lr
80008822:	18 97       	mov	r7,r12
80008824:	16 96       	mov	r6,r11
80008826:	78 95       	ld.w	r5,r12[0x24]
80008828:	58 05       	cp.w	r5,0
8000882a:	c0 81       	brne	8000883a <_Balloc+0x1a>
8000882c:	31 0c       	mov	r12,16
8000882e:	c1 ff       	rcall	8000866c <malloc>
80008830:	99 35       	st.w	r12[0xc],r5
80008832:	8f 9c       	st.w	r7[0x24],r12
80008834:	99 15       	st.w	r12[0x4],r5
80008836:	99 25       	st.w	r12[0x8],r5
80008838:	99 05       	st.w	r12[0x0],r5
8000883a:	6e 95       	ld.w	r5,r7[0x24]
8000883c:	6a 38       	ld.w	r8,r5[0xc]
8000883e:	58 08       	cp.w	r8,0
80008840:	c0 b1       	brne	80008856 <_Balloc+0x36>
80008842:	31 0a       	mov	r10,16
80008844:	30 4b       	mov	r11,4
80008846:	0e 9c       	mov	r12,r7
80008848:	e0 a0 03 d2 	rcall	80008fec <_calloc_r>
8000884c:	8b 3c       	st.w	r5[0xc],r12
8000884e:	6e 98       	ld.w	r8,r7[0x24]
80008850:	70 3c       	ld.w	r12,r8[0xc]
80008852:	58 0c       	cp.w	r12,0
80008854:	c1 b0       	breq	8000888a <_Balloc+0x6a>
80008856:	6e 98       	ld.w	r8,r7[0x24]
80008858:	70 38       	ld.w	r8,r8[0xc]
8000885a:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000885e:	70 0c       	ld.w	r12,r8[0x0]
80008860:	58 0c       	cp.w	r12,0
80008862:	c0 40       	breq	8000886a <_Balloc+0x4a>
80008864:	78 09       	ld.w	r9,r12[0x0]
80008866:	91 09       	st.w	r8[0x0],r9
80008868:	c0 e8       	rjmp	80008884 <_Balloc+0x64>
8000886a:	0e 9c       	mov	r12,r7
8000886c:	30 17       	mov	r7,1
8000886e:	0e 9b       	mov	r11,r7
80008870:	ee 06 09 47 	lsl	r7,r7,r6
80008874:	ee ca ff fb 	sub	r10,r7,-5
80008878:	a3 6a       	lsl	r10,0x2
8000887a:	e0 a0 03 b9 	rcall	80008fec <_calloc_r>
8000887e:	c0 60       	breq	8000888a <_Balloc+0x6a>
80008880:	99 16       	st.w	r12[0x4],r6
80008882:	99 27       	st.w	r12[0x8],r7
80008884:	30 08       	mov	r8,0
80008886:	99 38       	st.w	r12[0xc],r8
80008888:	99 48       	st.w	r12[0x10],r8
8000888a:	d8 22       	popm	r4-r7,pc

8000888c <__d2b>:
8000888c:	d4 31       	pushm	r0-r7,lr
8000888e:	20 2d       	sub	sp,8
80008890:	16 93       	mov	r3,r11
80008892:	12 96       	mov	r6,r9
80008894:	10 95       	mov	r5,r8
80008896:	14 92       	mov	r2,r10
80008898:	30 1b       	mov	r11,1
8000889a:	cc 3f       	rcall	80008820 <_Balloc>
8000889c:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800088a0:	50 09       	stdsp	sp[0x0],r9
800088a2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800088a6:	f0 01 16 14 	lsr	r1,r8,0x14
800088aa:	fc 1a 00 10 	movh	r10,0x10
800088ae:	f3 da e1 39 	orne	r9,r9,r10
800088b2:	fb f9 1a 00 	st.wne	sp[0x0],r9
800088b6:	18 94       	mov	r4,r12
800088b8:	58 02       	cp.w	r2,0
800088ba:	c1 d0       	breq	800088f4 <__d2b+0x68>
800088bc:	fa cc ff f8 	sub	r12,sp,-8
800088c0:	18 d2       	st.w	--r12,r2
800088c2:	c3 7f       	rcall	80008730 <__lo0bits>
800088c4:	40 18       	lddsp	r8,sp[0x4]
800088c6:	c0 d0       	breq	800088e0 <__d2b+0x54>
800088c8:	40 09       	lddsp	r9,sp[0x0]
800088ca:	f8 0a 11 20 	rsub	r10,r12,32
800088ce:	f2 0a 09 4a 	lsl	r10,r9,r10
800088d2:	f5 e8 10 08 	or	r8,r10,r8
800088d6:	89 58       	st.w	r4[0x14],r8
800088d8:	f2 0c 0a 49 	lsr	r9,r9,r12
800088dc:	50 09       	stdsp	sp[0x0],r9
800088de:	c0 28       	rjmp	800088e2 <__d2b+0x56>
800088e0:	89 58       	st.w	r4[0x14],r8
800088e2:	40 08       	lddsp	r8,sp[0x0]
800088e4:	58 08       	cp.w	r8,0
800088e6:	f9 b3 01 02 	movne	r3,2
800088ea:	f9 b3 00 01 	moveq	r3,1
800088ee:	89 68       	st.w	r4[0x18],r8
800088f0:	89 43       	st.w	r4[0x10],r3
800088f2:	c0 88       	rjmp	80008902 <__d2b+0x76>
800088f4:	1a 9c       	mov	r12,sp
800088f6:	c1 df       	rcall	80008730 <__lo0bits>
800088f8:	30 13       	mov	r3,1
800088fa:	40 08       	lddsp	r8,sp[0x0]
800088fc:	2e 0c       	sub	r12,-32
800088fe:	89 43       	st.w	r4[0x10],r3
80008900:	89 58       	st.w	r4[0x14],r8
80008902:	58 01       	cp.w	r1,0
80008904:	c0 90       	breq	80008916 <__d2b+0x8a>
80008906:	e2 c1 04 33 	sub	r1,r1,1075
8000890a:	18 01       	add	r1,r12
8000890c:	8d 01       	st.w	r6[0x0],r1
8000890e:	f8 0c 11 35 	rsub	r12,r12,53
80008912:	8b 0c       	st.w	r5[0x0],r12
80008914:	c0 c8       	rjmp	8000892c <__d2b+0xa0>
80008916:	e6 c8 ff fc 	sub	r8,r3,-4
8000891a:	f8 cc 04 32 	sub	r12,r12,1074
8000891e:	a5 73       	lsl	r3,0x5
80008920:	8d 0c       	st.w	r6[0x0],r12
80008922:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80008926:	cd 5e       	rcall	800086d0 <__hi0bits>
80008928:	18 13       	sub	r3,r12
8000892a:	8b 03       	st.w	r5[0x0],r3
8000892c:	08 9c       	mov	r12,r4
8000892e:	2f ed       	sub	sp,-8
80008930:	d8 32       	popm	r0-r7,pc
80008932:	d7 03       	nop

80008934 <__mdiff>:
80008934:	d4 31       	pushm	r0-r7,lr
80008936:	74 48       	ld.w	r8,r10[0x10]
80008938:	76 45       	ld.w	r5,r11[0x10]
8000893a:	16 97       	mov	r7,r11
8000893c:	14 96       	mov	r6,r10
8000893e:	10 15       	sub	r5,r8
80008940:	c1 31       	brne	80008966 <__mdiff+0x32>
80008942:	2f b8       	sub	r8,-5
80008944:	ee ce ff ec 	sub	lr,r7,-20
80008948:	a3 68       	lsl	r8,0x2
8000894a:	f4 08 00 0b 	add	r11,r10,r8
8000894e:	ee 08 00 08 	add	r8,r7,r8
80008952:	11 4a       	ld.w	r10,--r8
80008954:	17 49       	ld.w	r9,--r11
80008956:	12 3a       	cp.w	r10,r9
80008958:	c0 30       	breq	8000895e <__mdiff+0x2a>
8000895a:	c0 e2       	brcc	80008976 <__mdiff+0x42>
8000895c:	c0 78       	rjmp	8000896a <__mdiff+0x36>
8000895e:	1c 38       	cp.w	r8,lr
80008960:	fe 9b ff f9 	brhi	80008952 <__mdiff+0x1e>
80008964:	c4 98       	rjmp	800089f6 <__mdiff+0xc2>
80008966:	58 05       	cp.w	r5,0
80008968:	c0 64       	brge	80008974 <__mdiff+0x40>
8000896a:	0e 98       	mov	r8,r7
8000896c:	30 15       	mov	r5,1
8000896e:	0c 97       	mov	r7,r6
80008970:	10 96       	mov	r6,r8
80008972:	c0 28       	rjmp	80008976 <__mdiff+0x42>
80008974:	30 05       	mov	r5,0
80008976:	6e 1b       	ld.w	r11,r7[0x4]
80008978:	c5 4f       	rcall	80008820 <_Balloc>
8000897a:	6e 49       	ld.w	r9,r7[0x10]
8000897c:	6c 44       	ld.w	r4,r6[0x10]
8000897e:	99 35       	st.w	r12[0xc],r5
80008980:	2f b4       	sub	r4,-5
80008982:	f2 c5 ff fb 	sub	r5,r9,-5
80008986:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000898a:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000898e:	2e c6       	sub	r6,-20
80008990:	2e c7       	sub	r7,-20
80008992:	f8 c8 ff ec 	sub	r8,r12,-20
80008996:	30 0a       	mov	r10,0
80008998:	0f 0e       	ld.w	lr,r7++
8000899a:	0d 0b       	ld.w	r11,r6++
8000899c:	fc 02 16 10 	lsr	r2,lr,0x10
800089a0:	f6 03 16 10 	lsr	r3,r11,0x10
800089a4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800089a8:	e4 03 01 03 	sub	r3,r2,r3
800089ac:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800089b0:	fc 0b 01 0b 	sub	r11,lr,r11
800089b4:	f6 0a 00 0a 	add	r10,r11,r10
800089b8:	b0 1a       	st.h	r8[0x2],r10
800089ba:	b1 4a       	asr	r10,0x10
800089bc:	e6 0a 00 0a 	add	r10,r3,r10
800089c0:	b0 0a       	st.h	r8[0x0],r10
800089c2:	2f c8       	sub	r8,-4
800089c4:	b1 4a       	asr	r10,0x10
800089c6:	08 36       	cp.w	r6,r4
800089c8:	ce 83       	brcs	80008998 <__mdiff+0x64>
800089ca:	c0 d8       	rjmp	800089e4 <__mdiff+0xb0>
800089cc:	0f 0b       	ld.w	r11,r7++
800089ce:	f6 0e 16 10 	lsr	lr,r11,0x10
800089d2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800089d6:	16 0a       	add	r10,r11
800089d8:	b0 1a       	st.h	r8[0x2],r10
800089da:	b1 4a       	asr	r10,0x10
800089dc:	1c 0a       	add	r10,lr
800089de:	b0 0a       	st.h	r8[0x0],r10
800089e0:	2f c8       	sub	r8,-4
800089e2:	b1 4a       	asr	r10,0x10
800089e4:	0a 37       	cp.w	r7,r5
800089e6:	cf 33       	brcs	800089cc <__mdiff+0x98>
800089e8:	c0 28       	rjmp	800089ec <__mdiff+0xb8>
800089ea:	20 19       	sub	r9,1
800089ec:	11 4a       	ld.w	r10,--r8
800089ee:	58 0a       	cp.w	r10,0
800089f0:	cf d0       	breq	800089ea <__mdiff+0xb6>
800089f2:	99 49       	st.w	r12[0x10],r9
800089f4:	d8 32       	popm	r0-r7,pc
800089f6:	30 0b       	mov	r11,0
800089f8:	c1 4f       	rcall	80008820 <_Balloc>
800089fa:	30 18       	mov	r8,1
800089fc:	99 48       	st.w	r12[0x10],r8
800089fe:	30 08       	mov	r8,0
80008a00:	99 58       	st.w	r12[0x14],r8
80008a02:	d8 32       	popm	r0-r7,pc

80008a04 <__lshift>:
80008a04:	d4 31       	pushm	r0-r7,lr
80008a06:	16 97       	mov	r7,r11
80008a08:	76 46       	ld.w	r6,r11[0x10]
80008a0a:	f4 02 14 05 	asr	r2,r10,0x5
80008a0e:	2f f6       	sub	r6,-1
80008a10:	14 93       	mov	r3,r10
80008a12:	18 94       	mov	r4,r12
80008a14:	04 06       	add	r6,r2
80008a16:	76 1b       	ld.w	r11,r11[0x4]
80008a18:	6e 28       	ld.w	r8,r7[0x8]
80008a1a:	c0 38       	rjmp	80008a20 <__lshift+0x1c>
80008a1c:	2f fb       	sub	r11,-1
80008a1e:	a1 78       	lsl	r8,0x1
80008a20:	10 36       	cp.w	r6,r8
80008a22:	fe 99 ff fd 	brgt	80008a1c <__lshift+0x18>
80008a26:	08 9c       	mov	r12,r4
80008a28:	cf ce       	rcall	80008820 <_Balloc>
80008a2a:	30 09       	mov	r9,0
80008a2c:	18 95       	mov	r5,r12
80008a2e:	f8 c8 ff ec 	sub	r8,r12,-20
80008a32:	12 9a       	mov	r10,r9
80008a34:	c0 38       	rjmp	80008a3a <__lshift+0x36>
80008a36:	10 aa       	st.w	r8++,r10
80008a38:	2f f9       	sub	r9,-1
80008a3a:	04 39       	cp.w	r9,r2
80008a3c:	cf d5       	brlt	80008a36 <__lshift+0x32>
80008a3e:	6e 4b       	ld.w	r11,r7[0x10]
80008a40:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008a44:	2f bb       	sub	r11,-5
80008a46:	ee c9 ff ec 	sub	r9,r7,-20
80008a4a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80008a4e:	58 03       	cp.w	r3,0
80008a50:	c1 30       	breq	80008a76 <__lshift+0x72>
80008a52:	e6 0c 11 20 	rsub	r12,r3,32
80008a56:	30 0a       	mov	r10,0
80008a58:	72 02       	ld.w	r2,r9[0x0]
80008a5a:	e4 03 09 42 	lsl	r2,r2,r3
80008a5e:	04 4a       	or	r10,r2
80008a60:	10 aa       	st.w	r8++,r10
80008a62:	13 0a       	ld.w	r10,r9++
80008a64:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008a68:	16 39       	cp.w	r9,r11
80008a6a:	cf 73       	brcs	80008a58 <__lshift+0x54>
80008a6c:	91 0a       	st.w	r8[0x0],r10
80008a6e:	58 0a       	cp.w	r10,0
80008a70:	c0 70       	breq	80008a7e <__lshift+0x7a>
80008a72:	2f f6       	sub	r6,-1
80008a74:	c0 58       	rjmp	80008a7e <__lshift+0x7a>
80008a76:	13 0a       	ld.w	r10,r9++
80008a78:	10 aa       	st.w	r8++,r10
80008a7a:	16 39       	cp.w	r9,r11
80008a7c:	cf d3       	brcs	80008a76 <__lshift+0x72>
80008a7e:	08 9c       	mov	r12,r4
80008a80:	20 16       	sub	r6,1
80008a82:	0e 9b       	mov	r11,r7
80008a84:	8b 46       	st.w	r5[0x10],r6
80008a86:	cb 5e       	rcall	800087f0 <_Bfree>
80008a88:	0a 9c       	mov	r12,r5
80008a8a:	d8 32       	popm	r0-r7,pc

80008a8c <__multiply>:
80008a8c:	d4 31       	pushm	r0-r7,lr
80008a8e:	20 2d       	sub	sp,8
80008a90:	76 49       	ld.w	r9,r11[0x10]
80008a92:	74 48       	ld.w	r8,r10[0x10]
80008a94:	16 96       	mov	r6,r11
80008a96:	14 95       	mov	r5,r10
80008a98:	10 39       	cp.w	r9,r8
80008a9a:	ec 08 17 50 	movlt	r8,r6
80008a9e:	ea 06 17 50 	movlt	r6,r5
80008aa2:	f0 05 17 50 	movlt	r5,r8
80008aa6:	6c 28       	ld.w	r8,r6[0x8]
80008aa8:	76 43       	ld.w	r3,r11[0x10]
80008aaa:	74 42       	ld.w	r2,r10[0x10]
80008aac:	76 1b       	ld.w	r11,r11[0x4]
80008aae:	e4 03 00 07 	add	r7,r2,r3
80008ab2:	10 37       	cp.w	r7,r8
80008ab4:	f7 bb 09 ff 	subgt	r11,-1
80008ab8:	cb 4e       	rcall	80008820 <_Balloc>
80008aba:	ee c4 ff fb 	sub	r4,r7,-5
80008abe:	f8 c9 ff ec 	sub	r9,r12,-20
80008ac2:	f8 04 00 24 	add	r4,r12,r4<<0x2
80008ac6:	30 0a       	mov	r10,0
80008ac8:	12 98       	mov	r8,r9
80008aca:	c0 28       	rjmp	80008ace <__multiply+0x42>
80008acc:	10 aa       	st.w	r8++,r10
80008ace:	08 38       	cp.w	r8,r4
80008ad0:	cf e3       	brcs	80008acc <__multiply+0x40>
80008ad2:	2f b3       	sub	r3,-5
80008ad4:	2f b2       	sub	r2,-5
80008ad6:	ec 03 00 23 	add	r3,r6,r3<<0x2
80008ada:	ea 02 00 22 	add	r2,r5,r2<<0x2
80008ade:	ec cb ff ec 	sub	r11,r6,-20
80008ae2:	50 12       	stdsp	sp[0x4],r2
80008ae4:	ea ca ff ec 	sub	r10,r5,-20
80008ae8:	c4 48       	rjmp	80008b70 <__multiply+0xe4>
80008aea:	94 95       	ld.uh	r5,r10[0x2]
80008aec:	58 05       	cp.w	r5,0
80008aee:	c2 00       	breq	80008b2e <__multiply+0xa2>
80008af0:	12 98       	mov	r8,r9
80008af2:	16 96       	mov	r6,r11
80008af4:	30 0e       	mov	lr,0
80008af6:	50 09       	stdsp	sp[0x0],r9
80008af8:	0d 02       	ld.w	r2,r6++
80008afa:	e4 00 16 10 	lsr	r0,r2,0x10
80008afe:	70 01       	ld.w	r1,r8[0x0]
80008b00:	70 09       	ld.w	r9,r8[0x0]
80008b02:	b1 81       	lsr	r1,0x10
80008b04:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80008b08:	e0 05 03 41 	mac	r1,r0,r5
80008b0c:	ab 32       	mul	r2,r5
80008b0e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008b12:	00 02       	add	r2,r0
80008b14:	e4 0e 00 0e 	add	lr,r2,lr
80008b18:	b0 1e       	st.h	r8[0x2],lr
80008b1a:	b1 8e       	lsr	lr,0x10
80008b1c:	1c 01       	add	r1,lr
80008b1e:	b0 01       	st.h	r8[0x0],r1
80008b20:	e2 0e 16 10 	lsr	lr,r1,0x10
80008b24:	2f c8       	sub	r8,-4
80008b26:	06 36       	cp.w	r6,r3
80008b28:	ce 83       	brcs	80008af8 <__multiply+0x6c>
80008b2a:	40 09       	lddsp	r9,sp[0x0]
80008b2c:	91 0e       	st.w	r8[0x0],lr
80008b2e:	94 86       	ld.uh	r6,r10[0x0]
80008b30:	58 06       	cp.w	r6,0
80008b32:	c1 d0       	breq	80008b6c <__multiply+0xe0>
80008b34:	72 02       	ld.w	r2,r9[0x0]
80008b36:	12 98       	mov	r8,r9
80008b38:	16 9e       	mov	lr,r11
80008b3a:	30 05       	mov	r5,0
80008b3c:	b0 12       	st.h	r8[0x2],r2
80008b3e:	1d 01       	ld.w	r1,lr++
80008b40:	90 82       	ld.uh	r2,r8[0x0]
80008b42:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80008b46:	ad 30       	mul	r0,r6
80008b48:	e0 02 00 02 	add	r2,r0,r2
80008b4c:	e4 05 00 05 	add	r5,r2,r5
80008b50:	b0 05       	st.h	r8[0x0],r5
80008b52:	b1 85       	lsr	r5,0x10
80008b54:	b1 81       	lsr	r1,0x10
80008b56:	2f c8       	sub	r8,-4
80008b58:	ad 31       	mul	r1,r6
80008b5a:	90 92       	ld.uh	r2,r8[0x2]
80008b5c:	e2 02 00 02 	add	r2,r1,r2
80008b60:	0a 02       	add	r2,r5
80008b62:	e4 05 16 10 	lsr	r5,r2,0x10
80008b66:	06 3e       	cp.w	lr,r3
80008b68:	ce a3       	brcs	80008b3c <__multiply+0xb0>
80008b6a:	91 02       	st.w	r8[0x0],r2
80008b6c:	2f ca       	sub	r10,-4
80008b6e:	2f c9       	sub	r9,-4
80008b70:	40 18       	lddsp	r8,sp[0x4]
80008b72:	10 3a       	cp.w	r10,r8
80008b74:	cb b3       	brcs	80008aea <__multiply+0x5e>
80008b76:	c0 28       	rjmp	80008b7a <__multiply+0xee>
80008b78:	20 17       	sub	r7,1
80008b7a:	58 07       	cp.w	r7,0
80008b7c:	e0 8a 00 05 	brle	80008b86 <__multiply+0xfa>
80008b80:	09 48       	ld.w	r8,--r4
80008b82:	58 08       	cp.w	r8,0
80008b84:	cf a0       	breq	80008b78 <__multiply+0xec>
80008b86:	99 47       	st.w	r12[0x10],r7
80008b88:	2f ed       	sub	sp,-8
80008b8a:	d8 32       	popm	r0-r7,pc

80008b8c <__i2b>:
80008b8c:	d4 21       	pushm	r4-r7,lr
80008b8e:	16 97       	mov	r7,r11
80008b90:	30 1b       	mov	r11,1
80008b92:	c4 7e       	rcall	80008820 <_Balloc>
80008b94:	30 19       	mov	r9,1
80008b96:	99 57       	st.w	r12[0x14],r7
80008b98:	99 49       	st.w	r12[0x10],r9
80008b9a:	d8 22       	popm	r4-r7,pc

80008b9c <__multadd>:
80008b9c:	d4 31       	pushm	r0-r7,lr
80008b9e:	30 08       	mov	r8,0
80008ba0:	12 95       	mov	r5,r9
80008ba2:	16 97       	mov	r7,r11
80008ba4:	18 96       	mov	r6,r12
80008ba6:	76 44       	ld.w	r4,r11[0x10]
80008ba8:	f6 c9 ff ec 	sub	r9,r11,-20
80008bac:	72 0b       	ld.w	r11,r9[0x0]
80008bae:	f6 0c 16 10 	lsr	r12,r11,0x10
80008bb2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008bb6:	f4 0c 02 4c 	mul	r12,r10,r12
80008bba:	f4 0b 03 45 	mac	r5,r10,r11
80008bbe:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80008bc2:	b1 85       	lsr	r5,0x10
80008bc4:	18 05       	add	r5,r12
80008bc6:	ea 0c 15 10 	lsl	r12,r5,0x10
80008bca:	f8 0b 00 0b 	add	r11,r12,r11
80008bce:	12 ab       	st.w	r9++,r11
80008bd0:	2f f8       	sub	r8,-1
80008bd2:	b1 85       	lsr	r5,0x10
80008bd4:	08 38       	cp.w	r8,r4
80008bd6:	ce b5       	brlt	80008bac <__multadd+0x10>
80008bd8:	58 05       	cp.w	r5,0
80008bda:	c1 c0       	breq	80008c12 <__multadd+0x76>
80008bdc:	6e 28       	ld.w	r8,r7[0x8]
80008bde:	10 34       	cp.w	r4,r8
80008be0:	c1 35       	brlt	80008c06 <__multadd+0x6a>
80008be2:	6e 1b       	ld.w	r11,r7[0x4]
80008be4:	0c 9c       	mov	r12,r6
80008be6:	2f fb       	sub	r11,-1
80008be8:	c1 ce       	rcall	80008820 <_Balloc>
80008bea:	6e 4a       	ld.w	r10,r7[0x10]
80008bec:	ee cb ff f4 	sub	r11,r7,-12
80008bf0:	18 93       	mov	r3,r12
80008bf2:	2f ea       	sub	r10,-2
80008bf4:	2f 4c       	sub	r12,-12
80008bf6:	a3 6a       	lsl	r10,0x2
80008bf8:	fe b0 e1 e6 	rcall	80004fc4 <memcpy>
80008bfc:	0e 9b       	mov	r11,r7
80008bfe:	0c 9c       	mov	r12,r6
80008c00:	fe b0 fd f8 	rcall	800087f0 <_Bfree>
80008c04:	06 97       	mov	r7,r3
80008c06:	e8 c8 ff ff 	sub	r8,r4,-1
80008c0a:	2f b4       	sub	r4,-5
80008c0c:	8f 48       	st.w	r7[0x10],r8
80008c0e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008c12:	0e 9c       	mov	r12,r7
80008c14:	d8 32       	popm	r0-r7,pc
80008c16:	d7 03       	nop

80008c18 <__pow5mult>:
80008c18:	d4 31       	pushm	r0-r7,lr
80008c1a:	14 96       	mov	r6,r10
80008c1c:	18 97       	mov	r7,r12
80008c1e:	16 94       	mov	r4,r11
80008c20:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008c24:	c0 90       	breq	80008c36 <__pow5mult+0x1e>
80008c26:	20 18       	sub	r8,1
80008c28:	fe c9 dd c8 	sub	r9,pc,-8760
80008c2c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008c30:	30 09       	mov	r9,0
80008c32:	cb 5f       	rcall	80008b9c <__multadd>
80008c34:	18 94       	mov	r4,r12
80008c36:	a3 46       	asr	r6,0x2
80008c38:	c3 40       	breq	80008ca0 <__pow5mult+0x88>
80008c3a:	6e 95       	ld.w	r5,r7[0x24]
80008c3c:	58 05       	cp.w	r5,0
80008c3e:	c0 91       	brne	80008c50 <__pow5mult+0x38>
80008c40:	31 0c       	mov	r12,16
80008c42:	fe b0 fd 15 	rcall	8000866c <malloc>
80008c46:	99 35       	st.w	r12[0xc],r5
80008c48:	8f 9c       	st.w	r7[0x24],r12
80008c4a:	99 15       	st.w	r12[0x4],r5
80008c4c:	99 25       	st.w	r12[0x8],r5
80008c4e:	99 05       	st.w	r12[0x0],r5
80008c50:	6e 93       	ld.w	r3,r7[0x24]
80008c52:	66 25       	ld.w	r5,r3[0x8]
80008c54:	58 05       	cp.w	r5,0
80008c56:	c0 c1       	brne	80008c6e <__pow5mult+0x56>
80008c58:	e0 6b 02 71 	mov	r11,625
80008c5c:	0e 9c       	mov	r12,r7
80008c5e:	c9 7f       	rcall	80008b8c <__i2b>
80008c60:	87 2c       	st.w	r3[0x8],r12
80008c62:	30 08       	mov	r8,0
80008c64:	18 95       	mov	r5,r12
80008c66:	99 08       	st.w	r12[0x0],r8
80008c68:	c0 38       	rjmp	80008c6e <__pow5mult+0x56>
80008c6a:	06 9c       	mov	r12,r3
80008c6c:	18 95       	mov	r5,r12
80008c6e:	ed b6 00 00 	bld	r6,0x0
80008c72:	c0 b1       	brne	80008c88 <__pow5mult+0x70>
80008c74:	08 9b       	mov	r11,r4
80008c76:	0a 9a       	mov	r10,r5
80008c78:	0e 9c       	mov	r12,r7
80008c7a:	c0 9f       	rcall	80008a8c <__multiply>
80008c7c:	08 9b       	mov	r11,r4
80008c7e:	18 93       	mov	r3,r12
80008c80:	0e 9c       	mov	r12,r7
80008c82:	06 94       	mov	r4,r3
80008c84:	fe b0 fd b6 	rcall	800087f0 <_Bfree>
80008c88:	a1 56       	asr	r6,0x1
80008c8a:	c0 b0       	breq	80008ca0 <__pow5mult+0x88>
80008c8c:	6a 03       	ld.w	r3,r5[0x0]
80008c8e:	58 03       	cp.w	r3,0
80008c90:	ce d1       	brne	80008c6a <__pow5mult+0x52>
80008c92:	0a 9a       	mov	r10,r5
80008c94:	0a 9b       	mov	r11,r5
80008c96:	0e 9c       	mov	r12,r7
80008c98:	cf ae       	rcall	80008a8c <__multiply>
80008c9a:	8b 0c       	st.w	r5[0x0],r12
80008c9c:	99 03       	st.w	r12[0x0],r3
80008c9e:	ce 7b       	rjmp	80008c6c <__pow5mult+0x54>
80008ca0:	08 9c       	mov	r12,r4
80008ca2:	d8 32       	popm	r0-r7,pc

80008ca4 <_read_r>:
80008ca4:	d4 21       	pushm	r4-r7,lr
80008ca6:	16 98       	mov	r8,r11
80008ca8:	18 97       	mov	r7,r12
80008caa:	10 9c       	mov	r12,r8
80008cac:	30 08       	mov	r8,0
80008cae:	14 9b       	mov	r11,r10
80008cb0:	e0 66 19 f4 	mov	r6,6644
80008cb4:	12 9a       	mov	r10,r9
80008cb6:	8d 08       	st.w	r6[0x0],r8
80008cb8:	fe b0 e2 d6 	rcall	80005264 <_read>
80008cbc:	5b fc       	cp.w	r12,-1
80008cbe:	c0 51       	brne	80008cc8 <_read_r+0x24>
80008cc0:	6c 08       	ld.w	r8,r6[0x0]
80008cc2:	58 08       	cp.w	r8,0
80008cc4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008cc8:	d8 22       	popm	r4-r7,pc
80008cca:	d7 03       	nop

80008ccc <_realloc_r>:
80008ccc:	d4 31       	pushm	r0-r7,lr
80008cce:	20 1d       	sub	sp,4
80008cd0:	16 94       	mov	r4,r11
80008cd2:	18 92       	mov	r2,r12
80008cd4:	14 9b       	mov	r11,r10
80008cd6:	58 04       	cp.w	r4,0
80008cd8:	c0 51       	brne	80008ce2 <_realloc_r+0x16>
80008cda:	fe b0 df 5b 	rcall	80004b90 <_malloc_r>
80008cde:	18 95       	mov	r5,r12
80008ce0:	c5 59       	rjmp	80008f8a <_realloc_r+0x2be>
80008ce2:	50 0a       	stdsp	sp[0x0],r10
80008ce4:	fe b0 e2 1b 	rcall	8000511a <__malloc_lock>
80008ce8:	40 0b       	lddsp	r11,sp[0x0]
80008cea:	e8 c1 00 08 	sub	r1,r4,8
80008cee:	f6 c6 ff f5 	sub	r6,r11,-11
80008cf2:	62 1c       	ld.w	r12,r1[0x4]
80008cf4:	59 66       	cp.w	r6,22
80008cf6:	f9 b6 08 10 	movls	r6,16
80008cfa:	f9 b8 0b f8 	movhi	r8,-8
80008cfe:	ed d8 eb 26 	andhi	r6,r6,r8
80008d02:	16 36       	cp.w	r6,r11
80008d04:	5f 38       	srlo	r8
80008d06:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008d0a:	c0 50       	breq	80008d14 <_realloc_r+0x48>
80008d0c:	30 c8       	mov	r8,12
80008d0e:	30 05       	mov	r5,0
80008d10:	85 38       	st.w	r2[0xc],r8
80008d12:	c3 c9       	rjmp	80008f8a <_realloc_r+0x2be>
80008d14:	18 90       	mov	r0,r12
80008d16:	e0 10 ff fc 	andl	r0,0xfffc
80008d1a:	0c 30       	cp.w	r0,r6
80008d1c:	e0 84 01 0c 	brge	80008f34 <_realloc_r+0x268>
80008d20:	e0 68 01 00 	mov	r8,256
80008d24:	e2 00 00 09 	add	r9,r1,r0
80008d28:	70 25       	ld.w	r5,r8[0x8]
80008d2a:	0a 39       	cp.w	r9,r5
80008d2c:	c0 90       	breq	80008d3e <_realloc_r+0x72>
80008d2e:	72 1a       	ld.w	r10,r9[0x4]
80008d30:	a1 ca       	cbr	r10,0x0
80008d32:	f2 0a 00 0a 	add	r10,r9,r10
80008d36:	74 1a       	ld.w	r10,r10[0x4]
80008d38:	ed ba 00 00 	bld	r10,0x0
80008d3c:	c2 20       	breq	80008d80 <_realloc_r+0xb4>
80008d3e:	72 1a       	ld.w	r10,r9[0x4]
80008d40:	e0 1a ff fc 	andl	r10,0xfffc
80008d44:	f4 00 00 03 	add	r3,r10,r0
80008d48:	0a 39       	cp.w	r9,r5
80008d4a:	c1 31       	brne	80008d70 <_realloc_r+0xa4>
80008d4c:	ec c7 ff f0 	sub	r7,r6,-16
80008d50:	0e 33       	cp.w	r3,r7
80008d52:	c1 95       	brlt	80008d84 <_realloc_r+0xb8>
80008d54:	e2 06 00 09 	add	r9,r1,r6
80008d58:	0c 13       	sub	r3,r6
80008d5a:	a1 a3       	sbr	r3,0x0
80008d5c:	93 13       	st.w	r9[0x4],r3
80008d5e:	91 29       	st.w	r8[0x8],r9
80008d60:	04 9c       	mov	r12,r2
80008d62:	62 18       	ld.w	r8,r1[0x4]
80008d64:	08 95       	mov	r5,r4
80008d66:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008d6a:	10 46       	or	r6,r8
80008d6c:	83 16       	st.w	r1[0x4],r6
80008d6e:	c0 c9       	rjmp	80008f86 <_realloc_r+0x2ba>
80008d70:	0c 33       	cp.w	r3,r6
80008d72:	c0 95       	brlt	80008d84 <_realloc_r+0xb8>
80008d74:	72 28       	ld.w	r8,r9[0x8]
80008d76:	02 97       	mov	r7,r1
80008d78:	72 39       	ld.w	r9,r9[0xc]
80008d7a:	93 28       	st.w	r9[0x8],r8
80008d7c:	91 39       	st.w	r8[0xc],r9
80008d7e:	cd d8       	rjmp	80008f38 <_realloc_r+0x26c>
80008d80:	30 0a       	mov	r10,0
80008d82:	14 99       	mov	r9,r10
80008d84:	ed bc 00 00 	bld	r12,0x0
80008d88:	e0 80 00 96 	breq	80008eb4 <_realloc_r+0x1e8>
80008d8c:	62 07       	ld.w	r7,r1[0x0]
80008d8e:	e2 07 01 07 	sub	r7,r1,r7
80008d92:	6e 1c       	ld.w	r12,r7[0x4]
80008d94:	e0 1c ff fc 	andl	r12,0xfffc
80008d98:	58 09       	cp.w	r9,0
80008d9a:	c5 70       	breq	80008e48 <_realloc_r+0x17c>
80008d9c:	f8 00 00 03 	add	r3,r12,r0
80008da0:	0a 39       	cp.w	r9,r5
80008da2:	c4 81       	brne	80008e32 <_realloc_r+0x166>
80008da4:	14 03       	add	r3,r10
80008da6:	ec c9 ff f0 	sub	r9,r6,-16
80008daa:	12 33       	cp.w	r3,r9
80008dac:	c4 e5       	brlt	80008e48 <_realloc_r+0x17c>
80008dae:	6e 3a       	ld.w	r10,r7[0xc]
80008db0:	6e 29       	ld.w	r9,r7[0x8]
80008db2:	95 29       	st.w	r10[0x8],r9
80008db4:	93 3a       	st.w	r9[0xc],r10
80008db6:	ee c5 ff f8 	sub	r5,r7,-8
80008dba:	e0 ca 00 04 	sub	r10,r0,4
80008dbe:	e0 4a 00 24 	cp.w	r10,36
80008dc2:	e0 8b 00 25 	brhi	80008e0c <_realloc_r+0x140>
80008dc6:	0a 99       	mov	r9,r5
80008dc8:	59 3a       	cp.w	r10,19
80008dca:	e0 88 00 1a 	brls	80008dfe <_realloc_r+0x132>
80008dce:	09 09       	ld.w	r9,r4++
80008dd0:	8b 09       	st.w	r5[0x0],r9
80008dd2:	09 09       	ld.w	r9,r4++
80008dd4:	8f 39       	st.w	r7[0xc],r9
80008dd6:	ee c9 ff f0 	sub	r9,r7,-16
80008dda:	59 ba       	cp.w	r10,27
80008ddc:	e0 88 00 11 	brls	80008dfe <_realloc_r+0x132>
80008de0:	09 0b       	ld.w	r11,r4++
80008de2:	93 0b       	st.w	r9[0x0],r11
80008de4:	09 09       	ld.w	r9,r4++
80008de6:	8f 59       	st.w	r7[0x14],r9
80008de8:	ee c9 ff e8 	sub	r9,r7,-24
80008dec:	e0 4a 00 24 	cp.w	r10,36
80008df0:	c0 71       	brne	80008dfe <_realloc_r+0x132>
80008df2:	09 0a       	ld.w	r10,r4++
80008df4:	93 0a       	st.w	r9[0x0],r10
80008df6:	ee c9 ff e0 	sub	r9,r7,-32
80008dfa:	09 0a       	ld.w	r10,r4++
80008dfc:	8f 7a       	st.w	r7[0x1c],r10
80008dfe:	09 0a       	ld.w	r10,r4++
80008e00:	12 aa       	st.w	r9++,r10
80008e02:	68 0a       	ld.w	r10,r4[0x0]
80008e04:	93 0a       	st.w	r9[0x0],r10
80008e06:	68 1a       	ld.w	r10,r4[0x4]
80008e08:	93 1a       	st.w	r9[0x4],r10
80008e0a:	c0 78       	rjmp	80008e18 <_realloc_r+0x14c>
80008e0c:	50 08       	stdsp	sp[0x0],r8
80008e0e:	08 9b       	mov	r11,r4
80008e10:	0a 9c       	mov	r12,r5
80008e12:	fe b0 fc 40 	rcall	80008692 <memmove>
80008e16:	40 08       	lddsp	r8,sp[0x0]
80008e18:	ee 06 00 09 	add	r9,r7,r6
80008e1c:	0c 13       	sub	r3,r6
80008e1e:	a1 a3       	sbr	r3,0x0
80008e20:	93 13       	st.w	r9[0x4],r3
80008e22:	91 29       	st.w	r8[0x8],r9
80008e24:	04 9c       	mov	r12,r2
80008e26:	6e 18       	ld.w	r8,r7[0x4]
80008e28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008e2c:	10 46       	or	r6,r8
80008e2e:	8f 16       	st.w	r7[0x4],r6
80008e30:	ca b8       	rjmp	80008f86 <_realloc_r+0x2ba>
80008e32:	14 03       	add	r3,r10
80008e34:	0c 33       	cp.w	r3,r6
80008e36:	c0 95       	brlt	80008e48 <_realloc_r+0x17c>
80008e38:	72 28       	ld.w	r8,r9[0x8]
80008e3a:	72 39       	ld.w	r9,r9[0xc]
80008e3c:	93 28       	st.w	r9[0x8],r8
80008e3e:	91 39       	st.w	r8[0xc],r9
80008e40:	6e 28       	ld.w	r8,r7[0x8]
80008e42:	6e 39       	ld.w	r9,r7[0xc]
80008e44:	c0 88       	rjmp	80008e54 <_realloc_r+0x188>
80008e46:	d7 03       	nop
80008e48:	f8 00 00 03 	add	r3,r12,r0
80008e4c:	0c 33       	cp.w	r3,r6
80008e4e:	c3 35       	brlt	80008eb4 <_realloc_r+0x1e8>
80008e50:	6e 39       	ld.w	r9,r7[0xc]
80008e52:	6e 28       	ld.w	r8,r7[0x8]
80008e54:	93 28       	st.w	r9[0x8],r8
80008e56:	91 39       	st.w	r8[0xc],r9
80008e58:	e0 ca 00 04 	sub	r10,r0,4
80008e5c:	ee cc ff f8 	sub	r12,r7,-8
80008e60:	e0 4a 00 24 	cp.w	r10,36
80008e64:	e0 8b 00 24 	brhi	80008eac <_realloc_r+0x1e0>
80008e68:	59 3a       	cp.w	r10,19
80008e6a:	e0 88 00 1a 	brls	80008e9e <_realloc_r+0x1d2>
80008e6e:	09 08       	ld.w	r8,r4++
80008e70:	99 08       	st.w	r12[0x0],r8
80008e72:	09 08       	ld.w	r8,r4++
80008e74:	8f 38       	st.w	r7[0xc],r8
80008e76:	ee cc ff f0 	sub	r12,r7,-16
80008e7a:	59 ba       	cp.w	r10,27
80008e7c:	e0 88 00 11 	brls	80008e9e <_realloc_r+0x1d2>
80008e80:	09 08       	ld.w	r8,r4++
80008e82:	99 08       	st.w	r12[0x0],r8
80008e84:	09 08       	ld.w	r8,r4++
80008e86:	8f 58       	st.w	r7[0x14],r8
80008e88:	ee cc ff e8 	sub	r12,r7,-24
80008e8c:	e0 4a 00 24 	cp.w	r10,36
80008e90:	c0 71       	brne	80008e9e <_realloc_r+0x1d2>
80008e92:	09 08       	ld.w	r8,r4++
80008e94:	99 08       	st.w	r12[0x0],r8
80008e96:	ee cc ff e0 	sub	r12,r7,-32
80008e9a:	09 08       	ld.w	r8,r4++
80008e9c:	8f 78       	st.w	r7[0x1c],r8
80008e9e:	09 08       	ld.w	r8,r4++
80008ea0:	18 a8       	st.w	r12++,r8
80008ea2:	68 08       	ld.w	r8,r4[0x0]
80008ea4:	99 08       	st.w	r12[0x0],r8
80008ea6:	68 18       	ld.w	r8,r4[0x4]
80008ea8:	99 18       	st.w	r12[0x4],r8
80008eaa:	c4 78       	rjmp	80008f38 <_realloc_r+0x26c>
80008eac:	08 9b       	mov	r11,r4
80008eae:	fe b0 fb f2 	rcall	80008692 <memmove>
80008eb2:	c4 38       	rjmp	80008f38 <_realloc_r+0x26c>
80008eb4:	04 9c       	mov	r12,r2
80008eb6:	fe b0 de 6d 	rcall	80004b90 <_malloc_r>
80008eba:	18 95       	mov	r5,r12
80008ebc:	c3 a0       	breq	80008f30 <_realloc_r+0x264>
80008ebe:	62 18       	ld.w	r8,r1[0x4]
80008ec0:	f8 c9 00 08 	sub	r9,r12,8
80008ec4:	a1 c8       	cbr	r8,0x0
80008ec6:	e2 08 00 08 	add	r8,r1,r8
80008eca:	10 39       	cp.w	r9,r8
80008ecc:	c0 71       	brne	80008eda <_realloc_r+0x20e>
80008ece:	72 13       	ld.w	r3,r9[0x4]
80008ed0:	02 97       	mov	r7,r1
80008ed2:	e0 13 ff fc 	andl	r3,0xfffc
80008ed6:	00 03       	add	r3,r0
80008ed8:	c3 08       	rjmp	80008f38 <_realloc_r+0x26c>
80008eda:	e0 ca 00 04 	sub	r10,r0,4
80008ede:	e0 4a 00 24 	cp.w	r10,36
80008ee2:	e0 8b 00 20 	brhi	80008f22 <_realloc_r+0x256>
80008ee6:	08 99       	mov	r9,r4
80008ee8:	18 98       	mov	r8,r12
80008eea:	59 3a       	cp.w	r10,19
80008eec:	e0 88 00 14 	brls	80008f14 <_realloc_r+0x248>
80008ef0:	13 0b       	ld.w	r11,r9++
80008ef2:	10 ab       	st.w	r8++,r11
80008ef4:	13 0b       	ld.w	r11,r9++
80008ef6:	10 ab       	st.w	r8++,r11
80008ef8:	59 ba       	cp.w	r10,27
80008efa:	e0 88 00 0d 	brls	80008f14 <_realloc_r+0x248>
80008efe:	13 0b       	ld.w	r11,r9++
80008f00:	10 ab       	st.w	r8++,r11
80008f02:	13 0b       	ld.w	r11,r9++
80008f04:	10 ab       	st.w	r8++,r11
80008f06:	e0 4a 00 24 	cp.w	r10,36
80008f0a:	c0 51       	brne	80008f14 <_realloc_r+0x248>
80008f0c:	13 0a       	ld.w	r10,r9++
80008f0e:	10 aa       	st.w	r8++,r10
80008f10:	13 0a       	ld.w	r10,r9++
80008f12:	10 aa       	st.w	r8++,r10
80008f14:	13 0a       	ld.w	r10,r9++
80008f16:	10 aa       	st.w	r8++,r10
80008f18:	72 0a       	ld.w	r10,r9[0x0]
80008f1a:	91 0a       	st.w	r8[0x0],r10
80008f1c:	72 19       	ld.w	r9,r9[0x4]
80008f1e:	91 19       	st.w	r8[0x4],r9
80008f20:	c0 48       	rjmp	80008f28 <_realloc_r+0x25c>
80008f22:	08 9b       	mov	r11,r4
80008f24:	fe b0 fb b7 	rcall	80008692 <memmove>
80008f28:	08 9b       	mov	r11,r4
80008f2a:	04 9c       	mov	r12,r2
80008f2c:	fe b0 dc d6 	rcall	800048d8 <_free_r>
80008f30:	04 9c       	mov	r12,r2
80008f32:	c2 a8       	rjmp	80008f86 <_realloc_r+0x2ba>
80008f34:	00 93       	mov	r3,r0
80008f36:	02 97       	mov	r7,r1
80008f38:	e6 06 01 09 	sub	r9,r3,r6
80008f3c:	6e 18       	ld.w	r8,r7[0x4]
80008f3e:	58 f9       	cp.w	r9,15
80008f40:	e0 88 00 16 	brls	80008f6c <_realloc_r+0x2a0>
80008f44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008f48:	ed e8 10 08 	or	r8,r6,r8
80008f4c:	8f 18       	st.w	r7[0x4],r8
80008f4e:	12 98       	mov	r8,r9
80008f50:	a1 a8       	sbr	r8,0x0
80008f52:	ee 06 00 0b 	add	r11,r7,r6
80008f56:	f6 09 00 09 	add	r9,r11,r9
80008f5a:	97 18       	st.w	r11[0x4],r8
80008f5c:	72 18       	ld.w	r8,r9[0x4]
80008f5e:	a1 a8       	sbr	r8,0x0
80008f60:	2f 8b       	sub	r11,-8
80008f62:	93 18       	st.w	r9[0x4],r8
80008f64:	04 9c       	mov	r12,r2
80008f66:	fe b0 dc b9 	rcall	800048d8 <_free_r>
80008f6a:	c0 b8       	rjmp	80008f80 <_realloc_r+0x2b4>
80008f6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008f70:	e7 e8 10 08 	or	r8,r3,r8
80008f74:	8f 18       	st.w	r7[0x4],r8
80008f76:	ee 03 00 03 	add	r3,r7,r3
80008f7a:	66 18       	ld.w	r8,r3[0x4]
80008f7c:	a1 a8       	sbr	r8,0x0
80008f7e:	87 18       	st.w	r3[0x4],r8
80008f80:	04 9c       	mov	r12,r2
80008f82:	ee c5 ff f8 	sub	r5,r7,-8
80008f86:	fe b0 e0 cb 	rcall	8000511c <__malloc_unlock>
80008f8a:	0a 9c       	mov	r12,r5
80008f8c:	2f fd       	sub	sp,-4
80008f8e:	d8 32       	popm	r0-r7,pc

80008f90 <__isinfd>:
80008f90:	14 98       	mov	r8,r10
80008f92:	fc 19 7f f0 	movh	r9,0x7ff0
80008f96:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008f9a:	f0 0b 11 00 	rsub	r11,r8,0
80008f9e:	f7 e8 10 08 	or	r8,r11,r8
80008fa2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80008fa6:	f2 08 01 08 	sub	r8,r9,r8
80008faa:	f0 0c 11 00 	rsub	r12,r8,0
80008fae:	f9 e8 10 08 	or	r8,r12,r8
80008fb2:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008fb6:	2f fc       	sub	r12,-1
80008fb8:	5e fc       	retal	r12

80008fba <__isnand>:
80008fba:	14 98       	mov	r8,r10
80008fbc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008fc0:	f0 0c 11 00 	rsub	r12,r8,0
80008fc4:	10 4c       	or	r12,r8
80008fc6:	fc 18 7f f0 	movh	r8,0x7ff0
80008fca:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008fce:	f0 0c 01 0c 	sub	r12,r8,r12
80008fd2:	bf 9c       	lsr	r12,0x1f
80008fd4:	5e fc       	retal	r12

80008fd6 <strlen>:
80008fd6:	30 09       	mov	r9,0
80008fd8:	18 98       	mov	r8,r12
80008fda:	c0 28       	rjmp	80008fde <strlen+0x8>
80008fdc:	2f f8       	sub	r8,-1
80008fde:	11 8a       	ld.ub	r10,r8[0x0]
80008fe0:	f2 0a 18 00 	cp.b	r10,r9
80008fe4:	cf c1       	brne	80008fdc <strlen+0x6>
80008fe6:	f0 0c 01 0c 	sub	r12,r8,r12
80008fea:	5e fc       	retal	r12

80008fec <_calloc_r>:
80008fec:	d4 21       	pushm	r4-r7,lr
80008fee:	f4 0b 02 4b 	mul	r11,r10,r11
80008ff2:	fe b0 dd cf 	rcall	80004b90 <_malloc_r>
80008ff6:	18 97       	mov	r7,r12
80008ff8:	c2 30       	breq	8000903e <_calloc_r+0x52>
80008ffa:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008ffe:	e0 1a ff fc 	andl	r10,0xfffc
80009002:	20 4a       	sub	r10,4
80009004:	e0 4a 00 24 	cp.w	r10,36
80009008:	e0 8b 00 18 	brhi	80009038 <_calloc_r+0x4c>
8000900c:	18 98       	mov	r8,r12
8000900e:	59 3a       	cp.w	r10,19
80009010:	e0 88 00 0f 	brls	8000902e <_calloc_r+0x42>
80009014:	30 09       	mov	r9,0
80009016:	10 a9       	st.w	r8++,r9
80009018:	10 a9       	st.w	r8++,r9
8000901a:	59 ba       	cp.w	r10,27
8000901c:	e0 88 00 09 	brls	8000902e <_calloc_r+0x42>
80009020:	10 a9       	st.w	r8++,r9
80009022:	10 a9       	st.w	r8++,r9
80009024:	e0 4a 00 24 	cp.w	r10,36
80009028:	c0 31       	brne	8000902e <_calloc_r+0x42>
8000902a:	10 a9       	st.w	r8++,r9
8000902c:	10 a9       	st.w	r8++,r9
8000902e:	30 09       	mov	r9,0
80009030:	10 a9       	st.w	r8++,r9
80009032:	91 19       	st.w	r8[0x4],r9
80009034:	91 09       	st.w	r8[0x0],r9
80009036:	c0 48       	rjmp	8000903e <_calloc_r+0x52>
80009038:	30 0b       	mov	r11,0
8000903a:	fe b0 e0 69 	rcall	8000510c <memset>
8000903e:	0e 9c       	mov	r12,r7
80009040:	d8 22       	popm	r4-r7,pc
80009042:	d7 03       	nop

80009044 <__avr32_f64_mul>:
80009044:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80009048:	e0 80 00 dc 	breq	80009200 <__avr32_f64_mul_op1_zero>
8000904c:	d4 21       	pushm	r4-r7,lr
8000904e:	f7 e9 20 0e 	eor	lr,r11,r9
80009052:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009056:	30 15       	mov	r5,1
80009058:	c4 30       	breq	800090de <__avr32_f64_mul_op1_subnormal>
8000905a:	ab 6b       	lsl	r11,0xa
8000905c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009060:	ab 6a       	lsl	r10,0xa
80009062:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80009066:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000906a:	c5 c0       	breq	80009122 <__avr32_f64_mul_op2_subnormal>
8000906c:	a1 78       	lsl	r8,0x1
8000906e:	5c f9       	rol	r9
80009070:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80009074:	e0 47 07 ff 	cp.w	r7,2047
80009078:	c7 70       	breq	80009166 <__avr32_f64_mul_op_nan_or_inf>
8000907a:	e0 46 07 ff 	cp.w	r6,2047
8000907e:	c7 40       	breq	80009166 <__avr32_f64_mul_op_nan_or_inf>
80009080:	ee 06 00 0c 	add	r12,r7,r6
80009084:	e0 2c 03 fe 	sub	r12,1022
80009088:	f6 08 06 44 	mulu.d	r4,r11,r8
8000908c:	f4 09 07 44 	macu.d	r4,r10,r9
80009090:	f4 08 06 46 	mulu.d	r6,r10,r8
80009094:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009098:	08 07       	add	r7,r4
8000909a:	f4 05 00 4a 	adc	r10,r10,r5
8000909e:	5c 0b       	acr	r11
800090a0:	ed bb 00 14 	bld	r11,0x14
800090a4:	c0 50       	breq	800090ae <__avr32_f64_mul+0x6a>
800090a6:	a1 77       	lsl	r7,0x1
800090a8:	5c fa       	rol	r10
800090aa:	5c fb       	rol	r11
800090ac:	20 1c       	sub	r12,1
800090ae:	58 0c       	cp.w	r12,0
800090b0:	e0 8a 00 6f 	brle	8000918e <__avr32_f64_mul_res_subnormal>
800090b4:	e0 4c 07 ff 	cp.w	r12,2047
800090b8:	e0 84 00 9c 	brge	800091f0 <__avr32_f64_mul_res_inf>
800090bc:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800090c0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800090c4:	ef e6 12 17 	or	r7,r7,r6>>0x1
800090c8:	ee 17 80 00 	eorh	r7,0x8000
800090cc:	f1 b7 04 20 	satu	r7,0x1
800090d0:	0e 0a       	add	r10,r7
800090d2:	5c 0b       	acr	r11
800090d4:	ed be 00 1f 	bld	lr,0x1f
800090d8:	ef bb 00 1f 	bst	r11,0x1f
800090dc:	d8 22       	popm	r4-r7,pc

800090de <__avr32_f64_mul_op1_subnormal>:
800090de:	e4 1b 00 0f 	andh	r11,0xf
800090e2:	f4 0c 12 00 	clz	r12,r10
800090e6:	f6 06 12 00 	clz	r6,r11
800090ea:	f7 bc 03 e1 	sublo	r12,-31
800090ee:	f8 06 17 30 	movlo	r6,r12
800090f2:	f7 b6 02 01 	subhs	r6,1
800090f6:	e0 46 00 20 	cp.w	r6,32
800090fa:	c0 d4       	brge	80009114 <__avr32_f64_mul_op1_subnormal+0x36>
800090fc:	ec 0c 11 20 	rsub	r12,r6,32
80009100:	f6 06 09 4b 	lsl	r11,r11,r6
80009104:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009108:	18 4b       	or	r11,r12
8000910a:	f4 06 09 4a 	lsl	r10,r10,r6
8000910e:	20 b6       	sub	r6,11
80009110:	0c 17       	sub	r7,r6
80009112:	ca ab       	rjmp	80009066 <__avr32_f64_mul+0x22>
80009114:	f4 06 09 4b 	lsl	r11,r10,r6
80009118:	c6 40       	breq	800091e0 <__avr32_f64_mul_res_zero>
8000911a:	30 0a       	mov	r10,0
8000911c:	20 b6       	sub	r6,11
8000911e:	0c 17       	sub	r7,r6
80009120:	ca 3b       	rjmp	80009066 <__avr32_f64_mul+0x22>

80009122 <__avr32_f64_mul_op2_subnormal>:
80009122:	e4 19 00 0f 	andh	r9,0xf
80009126:	f0 0c 12 00 	clz	r12,r8
8000912a:	f2 05 12 00 	clz	r5,r9
8000912e:	f7 bc 03 ea 	sublo	r12,-22
80009132:	f8 05 17 30 	movlo	r5,r12
80009136:	f7 b5 02 0a 	subhs	r5,10
8000913a:	e0 45 00 20 	cp.w	r5,32
8000913e:	c0 d4       	brge	80009158 <__avr32_f64_mul_op2_subnormal+0x36>
80009140:	ea 0c 11 20 	rsub	r12,r5,32
80009144:	f2 05 09 49 	lsl	r9,r9,r5
80009148:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000914c:	18 49       	or	r9,r12
8000914e:	f0 05 09 48 	lsl	r8,r8,r5
80009152:	20 25       	sub	r5,2
80009154:	0a 16       	sub	r6,r5
80009156:	c8 fb       	rjmp	80009074 <__avr32_f64_mul+0x30>
80009158:	f0 05 09 49 	lsl	r9,r8,r5
8000915c:	c4 20       	breq	800091e0 <__avr32_f64_mul_res_zero>
8000915e:	30 08       	mov	r8,0
80009160:	20 25       	sub	r5,2
80009162:	0a 16       	sub	r6,r5
80009164:	c8 8b       	rjmp	80009074 <__avr32_f64_mul+0x30>

80009166 <__avr32_f64_mul_op_nan_or_inf>:
80009166:	e4 19 00 0f 	andh	r9,0xf
8000916a:	e4 1b 00 0f 	andh	r11,0xf
8000916e:	14 4b       	or	r11,r10
80009170:	10 49       	or	r9,r8
80009172:	e0 47 07 ff 	cp.w	r7,2047
80009176:	c0 91       	brne	80009188 <__avr32_f64_mul_op1_not_naninf>
80009178:	58 0b       	cp.w	r11,0
8000917a:	c3 81       	brne	800091ea <__avr32_f64_mul_res_nan>
8000917c:	e0 46 07 ff 	cp.w	r6,2047
80009180:	c3 81       	brne	800091f0 <__avr32_f64_mul_res_inf>
80009182:	58 09       	cp.w	r9,0
80009184:	c3 60       	breq	800091f0 <__avr32_f64_mul_res_inf>
80009186:	c3 28       	rjmp	800091ea <__avr32_f64_mul_res_nan>

80009188 <__avr32_f64_mul_op1_not_naninf>:
80009188:	58 09       	cp.w	r9,0
8000918a:	c3 30       	breq	800091f0 <__avr32_f64_mul_res_inf>
8000918c:	c2 f8       	rjmp	800091ea <__avr32_f64_mul_res_nan>

8000918e <__avr32_f64_mul_res_subnormal>:
8000918e:	5c 3c       	neg	r12
80009190:	2f fc       	sub	r12,-1
80009192:	f1 bc 04 c0 	satu	r12,0x6
80009196:	e0 4c 00 20 	cp.w	r12,32
8000919a:	c1 14       	brge	800091bc <__avr32_f64_mul_res_subnormal+0x2e>
8000919c:	f8 08 11 20 	rsub	r8,r12,32
800091a0:	0e 46       	or	r6,r7
800091a2:	ee 0c 0a 47 	lsr	r7,r7,r12
800091a6:	f4 08 09 49 	lsl	r9,r10,r8
800091aa:	12 47       	or	r7,r9
800091ac:	f4 0c 0a 4a 	lsr	r10,r10,r12
800091b0:	f6 08 09 49 	lsl	r9,r11,r8
800091b4:	12 4a       	or	r10,r9
800091b6:	f6 0c 0a 4b 	lsr	r11,r11,r12
800091ba:	c8 3b       	rjmp	800090c0 <__avr32_f64_mul+0x7c>
800091bc:	f8 08 11 20 	rsub	r8,r12,32
800091c0:	f9 b9 00 00 	moveq	r9,0
800091c4:	c0 30       	breq	800091ca <__avr32_f64_mul_res_subnormal+0x3c>
800091c6:	f6 08 09 49 	lsl	r9,r11,r8
800091ca:	0e 46       	or	r6,r7
800091cc:	ed ea 10 16 	or	r6,r6,r10<<0x1
800091d0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800091d4:	f3 ea 10 07 	or	r7,r9,r10
800091d8:	f6 0c 0a 4a 	lsr	r10,r11,r12
800091dc:	30 0b       	mov	r11,0
800091de:	c7 1b       	rjmp	800090c0 <__avr32_f64_mul+0x7c>

800091e0 <__avr32_f64_mul_res_zero>:
800091e0:	1c 9b       	mov	r11,lr
800091e2:	e6 1b 80 00 	andh	r11,0x8000,COH
800091e6:	30 0a       	mov	r10,0
800091e8:	d8 22       	popm	r4-r7,pc

800091ea <__avr32_f64_mul_res_nan>:
800091ea:	3f fb       	mov	r11,-1
800091ec:	3f fa       	mov	r10,-1
800091ee:	d8 22       	popm	r4-r7,pc

800091f0 <__avr32_f64_mul_res_inf>:
800091f0:	f0 6b 00 00 	mov	r11,-1048576
800091f4:	ed be 00 1f 	bld	lr,0x1f
800091f8:	ef bb 00 1f 	bst	r11,0x1f
800091fc:	30 0a       	mov	r10,0
800091fe:	d8 22       	popm	r4-r7,pc

80009200 <__avr32_f64_mul_op1_zero>:
80009200:	f7 e9 20 0b 	eor	r11,r11,r9
80009204:	e6 1b 80 00 	andh	r11,0x8000,COH
80009208:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000920c:	e0 4c 07 ff 	cp.w	r12,2047
80009210:	5e 1c       	retne	r12
80009212:	3f fa       	mov	r10,-1
80009214:	3f fb       	mov	r11,-1
80009216:	5e fc       	retal	r12

80009218 <__avr32_f64_sub_from_add>:
80009218:	ee 19 80 00 	eorh	r9,0x8000

8000921c <__avr32_f64_sub>:
8000921c:	f7 e9 20 0c 	eor	r12,r11,r9
80009220:	e0 86 00 ca 	brmi	800093b4 <__avr32_f64_add_from_sub>
80009224:	eb cd 40 e0 	pushm	r5-r7,lr
80009228:	16 9c       	mov	r12,r11
8000922a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000922e:	bf db       	cbr	r11,0x1f
80009230:	bf d9       	cbr	r9,0x1f
80009232:	10 3a       	cp.w	r10,r8
80009234:	f2 0b 13 00 	cpc	r11,r9
80009238:	c0 92       	brcc	8000924a <__avr32_f64_sub+0x2e>
8000923a:	16 97       	mov	r7,r11
8000923c:	12 9b       	mov	r11,r9
8000923e:	0e 99       	mov	r9,r7
80009240:	14 97       	mov	r7,r10
80009242:	10 9a       	mov	r10,r8
80009244:	0e 98       	mov	r8,r7
80009246:	ee 1c 80 00 	eorh	r12,0x8000
8000924a:	f6 07 16 14 	lsr	r7,r11,0x14
8000924e:	ab 7b       	lsl	r11,0xb
80009250:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009254:	ab 7a       	lsl	r10,0xb
80009256:	bf bb       	sbr	r11,0x1f
80009258:	f2 06 16 14 	lsr	r6,r9,0x14
8000925c:	c4 40       	breq	800092e4 <__avr32_f64_sub_opL_subnormal>
8000925e:	ab 79       	lsl	r9,0xb
80009260:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009264:	ab 78       	lsl	r8,0xb
80009266:	bf b9       	sbr	r9,0x1f

80009268 <__avr32_f64_sub_opL_subnormal_done>:
80009268:	e0 47 07 ff 	cp.w	r7,2047
8000926c:	c4 f0       	breq	8000930a <__avr32_f64_sub_opH_nan_or_inf>
8000926e:	0e 26       	rsub	r6,r7
80009270:	c1 20       	breq	80009294 <__avr32_f64_sub_shift_done>
80009272:	ec 05 11 20 	rsub	r5,r6,32
80009276:	e0 46 00 20 	cp.w	r6,32
8000927a:	c7 c2       	brcc	80009372 <__avr32_f64_sub_longshift>
8000927c:	f0 05 09 4e 	lsl	lr,r8,r5
80009280:	f2 05 09 45 	lsl	r5,r9,r5
80009284:	f0 06 0a 48 	lsr	r8,r8,r6
80009288:	f2 06 0a 49 	lsr	r9,r9,r6
8000928c:	0a 48       	or	r8,r5
8000928e:	58 0e       	cp.w	lr,0
80009290:	5f 1e       	srne	lr
80009292:	1c 48       	or	r8,lr

80009294 <__avr32_f64_sub_shift_done>:
80009294:	10 1a       	sub	r10,r8
80009296:	f6 09 01 4b 	sbc	r11,r11,r9
8000929a:	f6 06 12 00 	clz	r6,r11
8000929e:	c0 e0       	breq	800092ba <__avr32_f64_sub_longnormalize_done>
800092a0:	c7 83       	brcs	80009390 <__avr32_f64_sub_longnormalize>
800092a2:	ec 0e 11 20 	rsub	lr,r6,32
800092a6:	f6 06 09 4b 	lsl	r11,r11,r6
800092aa:	f4 0e 0a 4e 	lsr	lr,r10,lr
800092ae:	1c 4b       	or	r11,lr
800092b0:	f4 06 09 4a 	lsl	r10,r10,r6
800092b4:	0c 17       	sub	r7,r6
800092b6:	e0 8a 00 39 	brle	80009328 <__avr32_f64_sub_subnormal_result>

800092ba <__avr32_f64_sub_longnormalize_done>:
800092ba:	f4 09 15 15 	lsl	r9,r10,0x15
800092be:	ab 9a       	lsr	r10,0xb
800092c0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800092c4:	ab 9b       	lsr	r11,0xb
800092c6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800092ca:	18 4b       	or	r11,r12

800092cc <__avr32_f64_sub_round>:
800092cc:	fc 17 80 00 	movh	r7,0x8000
800092d0:	ed ba 00 00 	bld	r10,0x0
800092d4:	f7 b7 01 ff 	subne	r7,-1
800092d8:	0e 39       	cp.w	r9,r7
800092da:	5f 29       	srhs	r9
800092dc:	12 0a       	add	r10,r9
800092de:	5c 0b       	acr	r11
800092e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800092e4 <__avr32_f64_sub_opL_subnormal>:
800092e4:	ab 79       	lsl	r9,0xb
800092e6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800092ea:	ab 78       	lsl	r8,0xb
800092ec:	f3 e8 10 0e 	or	lr,r9,r8
800092f0:	f9 b6 01 01 	movne	r6,1
800092f4:	ee 0e 11 00 	rsub	lr,r7,0
800092f8:	f9 b7 00 01 	moveq	r7,1
800092fc:	ef bb 00 1f 	bst	r11,0x1f
80009300:	f7 ea 10 0e 	or	lr,r11,r10
80009304:	f9 b7 00 00 	moveq	r7,0
80009308:	cb 0b       	rjmp	80009268 <__avr32_f64_sub_opL_subnormal_done>

8000930a <__avr32_f64_sub_opH_nan_or_inf>:
8000930a:	bf db       	cbr	r11,0x1f
8000930c:	f7 ea 10 0e 	or	lr,r11,r10
80009310:	c0 81       	brne	80009320 <__avr32_f64_sub_return_nan>
80009312:	e0 46 07 ff 	cp.w	r6,2047
80009316:	c0 50       	breq	80009320 <__avr32_f64_sub_return_nan>
80009318:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000931c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009320 <__avr32_f64_sub_return_nan>:
80009320:	3f fa       	mov	r10,-1
80009322:	3f fb       	mov	r11,-1
80009324:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009328 <__avr32_f64_sub_subnormal_result>:
80009328:	5c 37       	neg	r7
8000932a:	2f f7       	sub	r7,-1
8000932c:	f1 b7 04 c0 	satu	r7,0x6
80009330:	e0 47 00 20 	cp.w	r7,32
80009334:	c1 14       	brge	80009356 <__avr32_f64_sub_subnormal_result+0x2e>
80009336:	ee 08 11 20 	rsub	r8,r7,32
8000933a:	f4 08 09 49 	lsl	r9,r10,r8
8000933e:	5f 16       	srne	r6
80009340:	f4 07 0a 4a 	lsr	r10,r10,r7
80009344:	0c 4a       	or	r10,r6
80009346:	f6 08 09 49 	lsl	r9,r11,r8
8000934a:	f5 e9 10 0a 	or	r10,r10,r9
8000934e:	f4 07 0a 4b 	lsr	r11,r10,r7
80009352:	30 07       	mov	r7,0
80009354:	cb 3b       	rjmp	800092ba <__avr32_f64_sub_longnormalize_done>
80009356:	ee 08 11 40 	rsub	r8,r7,64
8000935a:	f6 08 09 49 	lsl	r9,r11,r8
8000935e:	14 49       	or	r9,r10
80009360:	5f 16       	srne	r6
80009362:	f6 07 0a 4a 	lsr	r10,r11,r7
80009366:	0c 4a       	or	r10,r6
80009368:	30 0b       	mov	r11,0
8000936a:	30 07       	mov	r7,0
8000936c:	ca 7b       	rjmp	800092ba <__avr32_f64_sub_longnormalize_done>
8000936e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009372 <__avr32_f64_sub_longshift>:
80009372:	f1 b6 04 c0 	satu	r6,0x6
80009376:	f0 0e 17 00 	moveq	lr,r8
8000937a:	c0 40       	breq	80009382 <__avr32_f64_sub_longshift+0x10>
8000937c:	f2 05 09 4e 	lsl	lr,r9,r5
80009380:	10 4e       	or	lr,r8
80009382:	f2 06 0a 48 	lsr	r8,r9,r6
80009386:	30 09       	mov	r9,0
80009388:	58 0e       	cp.w	lr,0
8000938a:	5f 1e       	srne	lr
8000938c:	1c 48       	or	r8,lr
8000938e:	c8 3b       	rjmp	80009294 <__avr32_f64_sub_shift_done>

80009390 <__avr32_f64_sub_longnormalize>:
80009390:	f4 06 12 00 	clz	r6,r10
80009394:	f9 b7 03 00 	movlo	r7,0
80009398:	f9 b6 03 00 	movlo	r6,0
8000939c:	f9 bc 03 00 	movlo	r12,0
800093a0:	f7 b6 02 e0 	subhs	r6,-32
800093a4:	f4 06 09 4b 	lsl	r11,r10,r6
800093a8:	30 0a       	mov	r10,0
800093aa:	0c 17       	sub	r7,r6
800093ac:	fe 9a ff be 	brle	80009328 <__avr32_f64_sub_subnormal_result>
800093b0:	c8 5b       	rjmp	800092ba <__avr32_f64_sub_longnormalize_done>
800093b2:	d7 03       	nop

800093b4 <__avr32_f64_add_from_sub>:
800093b4:	ee 19 80 00 	eorh	r9,0x8000

800093b8 <__avr32_f64_add>:
800093b8:	f7 e9 20 0c 	eor	r12,r11,r9
800093bc:	fe 96 ff 2e 	brmi	80009218 <__avr32_f64_sub_from_add>
800093c0:	eb cd 40 e0 	pushm	r5-r7,lr
800093c4:	16 9c       	mov	r12,r11
800093c6:	e6 1c 80 00 	andh	r12,0x8000,COH
800093ca:	bf db       	cbr	r11,0x1f
800093cc:	bf d9       	cbr	r9,0x1f
800093ce:	12 3b       	cp.w	r11,r9
800093d0:	c0 72       	brcc	800093de <__avr32_f64_add+0x26>
800093d2:	16 97       	mov	r7,r11
800093d4:	12 9b       	mov	r11,r9
800093d6:	0e 99       	mov	r9,r7
800093d8:	14 97       	mov	r7,r10
800093da:	10 9a       	mov	r10,r8
800093dc:	0e 98       	mov	r8,r7
800093de:	30 0e       	mov	lr,0
800093e0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800093e4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800093e8:	b5 ab       	sbr	r11,0x14
800093ea:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800093ee:	c5 f0       	breq	800094ac <__avr32_f64_add_op2_subnormal>
800093f0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800093f4:	b5 a9       	sbr	r9,0x14
800093f6:	e0 47 07 ff 	cp.w	r7,2047
800093fa:	c2 50       	breq	80009444 <__avr32_f64_add_opH_nan_or_inf>
800093fc:	0e 26       	rsub	r6,r7
800093fe:	c0 f0       	breq	8000941c <__avr32_f64_add_shift_done>
80009400:	ec 05 11 20 	rsub	r5,r6,32
80009404:	e0 46 00 20 	cp.w	r6,32
80009408:	c3 52       	brcc	80009472 <__avr32_f64_add_longshift>
8000940a:	f0 05 09 4e 	lsl	lr,r8,r5
8000940e:	f2 05 09 45 	lsl	r5,r9,r5
80009412:	f0 06 0a 48 	lsr	r8,r8,r6
80009416:	f2 06 0a 49 	lsr	r9,r9,r6
8000941a:	0a 48       	or	r8,r5

8000941c <__avr32_f64_add_shift_done>:
8000941c:	10 0a       	add	r10,r8
8000941e:	f6 09 00 4b 	adc	r11,r11,r9
80009422:	ed bb 00 15 	bld	r11,0x15
80009426:	c3 40       	breq	8000948e <__avr32_f64_add_res_of>

80009428 <__avr32_f64_add_res_of_done>:
80009428:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000942c:	18 4b       	or	r11,r12

8000942e <__avr32_f64_add_round>:
8000942e:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009432:	18 4e       	or	lr,r12
80009434:	ee 1e 80 00 	eorh	lr,0x8000
80009438:	f1 be 04 20 	satu	lr,0x1
8000943c:	1c 0a       	add	r10,lr
8000943e:	5c 0b       	acr	r11
80009440:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009444 <__avr32_f64_add_opH_nan_or_inf>:
80009444:	b5 cb       	cbr	r11,0x14
80009446:	f7 ea 10 0e 	or	lr,r11,r10
8000944a:	c1 01       	brne	8000946a <__avr32_f64_add_return_nan>
8000944c:	e0 46 07 ff 	cp.w	r6,2047
80009450:	c0 30       	breq	80009456 <__avr32_f64_add_opL_nan_or_inf>
80009452:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009456 <__avr32_f64_add_opL_nan_or_inf>:
80009456:	b5 c9       	cbr	r9,0x14
80009458:	f3 e8 10 0e 	or	lr,r9,r8
8000945c:	c0 71       	brne	8000946a <__avr32_f64_add_return_nan>
8000945e:	30 0a       	mov	r10,0
80009460:	fc 1b 7f f0 	movh	r11,0x7ff0
80009464:	18 4b       	or	r11,r12
80009466:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000946a <__avr32_f64_add_return_nan>:
8000946a:	3f fa       	mov	r10,-1
8000946c:	3f fb       	mov	r11,-1
8000946e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009472 <__avr32_f64_add_longshift>:
80009472:	f1 b6 04 c0 	satu	r6,0x6
80009476:	f0 0e 17 00 	moveq	lr,r8
8000947a:	c0 60       	breq	80009486 <__avr32_f64_add_longshift+0x14>
8000947c:	f2 05 09 4e 	lsl	lr,r9,r5
80009480:	58 08       	cp.w	r8,0
80009482:	5f 18       	srne	r8
80009484:	10 4e       	or	lr,r8
80009486:	f2 06 0a 48 	lsr	r8,r9,r6
8000948a:	30 09       	mov	r9,0
8000948c:	cc 8b       	rjmp	8000941c <__avr32_f64_add_shift_done>

8000948e <__avr32_f64_add_res_of>:
8000948e:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009492:	a1 9b       	lsr	r11,0x1
80009494:	5d 0a       	ror	r10
80009496:	5d 0e       	ror	lr
80009498:	2f f7       	sub	r7,-1
8000949a:	e0 47 07 ff 	cp.w	r7,2047
8000949e:	f9 ba 00 00 	moveq	r10,0
800094a2:	f9 bb 00 00 	moveq	r11,0
800094a6:	f9 be 00 00 	moveq	lr,0
800094aa:	cb fb       	rjmp	80009428 <__avr32_f64_add_res_of_done>

800094ac <__avr32_f64_add_op2_subnormal>:
800094ac:	30 16       	mov	r6,1
800094ae:	58 07       	cp.w	r7,0
800094b0:	ca 31       	brne	800093f6 <__avr32_f64_add+0x3e>
800094b2:	b5 cb       	cbr	r11,0x14
800094b4:	10 0a       	add	r10,r8
800094b6:	f6 09 00 4b 	adc	r11,r11,r9
800094ba:	18 4b       	or	r11,r12
800094bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800094c0 <__avr32_f64_to_u32>:
800094c0:	58 0b       	cp.w	r11,0
800094c2:	5e 6d       	retmi	0

800094c4 <__avr32_f64_to_s32>:
800094c4:	f6 0c 15 01 	lsl	r12,r11,0x1
800094c8:	b5 9c       	lsr	r12,0x15
800094ca:	e0 2c 03 ff 	sub	r12,1023
800094ce:	5e 3d       	retlo	0
800094d0:	f8 0c 11 1f 	rsub	r12,r12,31
800094d4:	16 99       	mov	r9,r11
800094d6:	ab 7b       	lsl	r11,0xb
800094d8:	bf bb       	sbr	r11,0x1f
800094da:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800094de:	f6 0c 0a 4b 	lsr	r11,r11,r12
800094e2:	a1 79       	lsl	r9,0x1
800094e4:	5e 2b       	reths	r11
800094e6:	5c 3b       	neg	r11
800094e8:	5e fb       	retal	r11

800094ea <__avr32_u32_to_f64>:
800094ea:	f8 cb 00 00 	sub	r11,r12,0
800094ee:	30 0c       	mov	r12,0
800094f0:	c0 38       	rjmp	800094f6 <__avr32_s32_to_f64+0x4>

800094f2 <__avr32_s32_to_f64>:
800094f2:	18 9b       	mov	r11,r12
800094f4:	5c 4b       	abs	r11
800094f6:	30 0a       	mov	r10,0
800094f8:	5e 0b       	reteq	r11
800094fa:	d4 01       	pushm	lr
800094fc:	e0 69 04 1e 	mov	r9,1054
80009500:	f6 08 12 00 	clz	r8,r11
80009504:	c1 70       	breq	80009532 <__avr32_s32_to_f64+0x40>
80009506:	c0 c3       	brcs	8000951e <__avr32_s32_to_f64+0x2c>
80009508:	f0 0e 11 20 	rsub	lr,r8,32
8000950c:	f6 08 09 4b 	lsl	r11,r11,r8
80009510:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009514:	1c 4b       	or	r11,lr
80009516:	f4 08 09 4a 	lsl	r10,r10,r8
8000951a:	10 19       	sub	r9,r8
8000951c:	c0 b8       	rjmp	80009532 <__avr32_s32_to_f64+0x40>
8000951e:	f4 08 12 00 	clz	r8,r10
80009522:	f9 b8 03 00 	movlo	r8,0
80009526:	f7 b8 02 e0 	subhs	r8,-32
8000952a:	f4 08 09 4b 	lsl	r11,r10,r8
8000952e:	30 0a       	mov	r10,0
80009530:	10 19       	sub	r9,r8
80009532:	58 09       	cp.w	r9,0
80009534:	e0 89 00 30 	brgt	80009594 <__avr32_s32_to_f64+0xa2>
80009538:	5c 39       	neg	r9
8000953a:	2f f9       	sub	r9,-1
8000953c:	e0 49 00 36 	cp.w	r9,54
80009540:	c0 43       	brcs	80009548 <__avr32_s32_to_f64+0x56>
80009542:	30 0b       	mov	r11,0
80009544:	30 0a       	mov	r10,0
80009546:	c2 68       	rjmp	80009592 <__avr32_s32_to_f64+0xa0>
80009548:	2f 69       	sub	r9,-10
8000954a:	f2 08 11 20 	rsub	r8,r9,32
8000954e:	e0 49 00 20 	cp.w	r9,32
80009552:	c0 b2       	brcc	80009568 <__avr32_s32_to_f64+0x76>
80009554:	f4 08 09 4e 	lsl	lr,r10,r8
80009558:	f6 08 09 48 	lsl	r8,r11,r8
8000955c:	f4 09 0a 4a 	lsr	r10,r10,r9
80009560:	f6 09 0a 4b 	lsr	r11,r11,r9
80009564:	10 4b       	or	r11,r8
80009566:	c0 88       	rjmp	80009576 <__avr32_s32_to_f64+0x84>
80009568:	f6 08 09 4e 	lsl	lr,r11,r8
8000956c:	14 4e       	or	lr,r10
8000956e:	16 9a       	mov	r10,r11
80009570:	30 0b       	mov	r11,0
80009572:	f4 09 0a 4a 	lsr	r10,r10,r9
80009576:	ed ba 00 00 	bld	r10,0x0
8000957a:	c0 92       	brcc	8000958c <__avr32_s32_to_f64+0x9a>
8000957c:	1c 7e       	tst	lr,lr
8000957e:	c0 41       	brne	80009586 <__avr32_s32_to_f64+0x94>
80009580:	ed ba 00 01 	bld	r10,0x1
80009584:	c0 42       	brcc	8000958c <__avr32_s32_to_f64+0x9a>
80009586:	2f fa       	sub	r10,-1
80009588:	f7 bb 02 ff 	subhs	r11,-1
8000958c:	5c fc       	rol	r12
8000958e:	5d 0b       	ror	r11
80009590:	5d 0a       	ror	r10
80009592:	d8 02       	popm	pc
80009594:	e0 68 03 ff 	mov	r8,1023
80009598:	ed ba 00 0b 	bld	r10,0xb
8000959c:	f7 b8 00 ff 	subeq	r8,-1
800095a0:	10 0a       	add	r10,r8
800095a2:	5c 0b       	acr	r11
800095a4:	f7 b9 03 fe 	sublo	r9,-2
800095a8:	e0 49 07 ff 	cp.w	r9,2047
800095ac:	c0 55       	brlt	800095b6 <__avr32_s32_to_f64+0xc4>
800095ae:	30 0a       	mov	r10,0
800095b0:	fc 1b ff e0 	movh	r11,0xffe0
800095b4:	c0 c8       	rjmp	800095cc <__floatsidf_return_op1>
800095b6:	ed bb 00 1f 	bld	r11,0x1f
800095ba:	f7 b9 01 01 	subne	r9,1
800095be:	ab 9a       	lsr	r10,0xb
800095c0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800095c4:	a1 7b       	lsl	r11,0x1
800095c6:	ab 9b       	lsr	r11,0xb
800095c8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800095cc <__floatsidf_return_op1>:
800095cc:	a1 7c       	lsl	r12,0x1
800095ce:	5d 0b       	ror	r11
800095d0:	d8 02       	popm	pc

800095d2 <__avr32_f64_cmp_eq>:
800095d2:	10 3a       	cp.w	r10,r8
800095d4:	f2 0b 13 00 	cpc	r11,r9
800095d8:	c0 80       	breq	800095e8 <__avr32_f64_cmp_eq+0x16>
800095da:	a1 7b       	lsl	r11,0x1
800095dc:	a1 79       	lsl	r9,0x1
800095de:	14 4b       	or	r11,r10
800095e0:	12 4b       	or	r11,r9
800095e2:	10 4b       	or	r11,r8
800095e4:	5e 0f       	reteq	1
800095e6:	5e fd       	retal	0
800095e8:	a1 7b       	lsl	r11,0x1
800095ea:	fc 1c ff e0 	movh	r12,0xffe0
800095ee:	58 0a       	cp.w	r10,0
800095f0:	f8 0b 13 00 	cpc	r11,r12
800095f4:	5e 8f       	retls	1
800095f6:	5e fd       	retal	0

800095f8 <__avr32_f64_cmp_ge>:
800095f8:	1a de       	st.w	--sp,lr
800095fa:	1a d7       	st.w	--sp,r7
800095fc:	a1 7b       	lsl	r11,0x1
800095fe:	5f 3c       	srlo	r12
80009600:	a1 79       	lsl	r9,0x1
80009602:	5f 37       	srlo	r7
80009604:	5c fc       	rol	r12
80009606:	fc 1e ff e0 	movh	lr,0xffe0
8000960a:	58 0a       	cp.w	r10,0
8000960c:	fc 0b 13 00 	cpc	r11,lr
80009610:	e0 8b 00 1d 	brhi	8000964a <__avr32_f64_cmp_ge+0x52>
80009614:	58 08       	cp.w	r8,0
80009616:	fc 09 13 00 	cpc	r9,lr
8000961a:	e0 8b 00 18 	brhi	8000964a <__avr32_f64_cmp_ge+0x52>
8000961e:	58 0b       	cp.w	r11,0
80009620:	f5 ba 00 00 	subfeq	r10,0
80009624:	c1 50       	breq	8000964e <__avr32_f64_cmp_ge+0x56>
80009626:	1b 07       	ld.w	r7,sp++
80009628:	1b 0e       	ld.w	lr,sp++
8000962a:	58 3c       	cp.w	r12,3
8000962c:	c0 a0       	breq	80009640 <__avr32_f64_cmp_ge+0x48>
8000962e:	58 1c       	cp.w	r12,1
80009630:	c0 33       	brcs	80009636 <__avr32_f64_cmp_ge+0x3e>
80009632:	5e 0f       	reteq	1
80009634:	5e 1d       	retne	0
80009636:	10 3a       	cp.w	r10,r8
80009638:	f2 0b 13 00 	cpc	r11,r9
8000963c:	5e 2f       	reths	1
8000963e:	5e 3d       	retlo	0
80009640:	14 38       	cp.w	r8,r10
80009642:	f6 09 13 00 	cpc	r9,r11
80009646:	5e 2f       	reths	1
80009648:	5e 3d       	retlo	0
8000964a:	1b 07       	ld.w	r7,sp++
8000964c:	d8 0a       	popm	pc,r12=0
8000964e:	58 17       	cp.w	r7,1
80009650:	5f 0c       	sreq	r12
80009652:	58 09       	cp.w	r9,0
80009654:	f5 b8 00 00 	subfeq	r8,0
80009658:	1b 07       	ld.w	r7,sp++
8000965a:	1b 0e       	ld.w	lr,sp++
8000965c:	5e 0f       	reteq	1
8000965e:	5e fc       	retal	r12

80009660 <__avr32_f64_cmp_lt>:
80009660:	1a de       	st.w	--sp,lr
80009662:	1a d7       	st.w	--sp,r7
80009664:	a1 7b       	lsl	r11,0x1
80009666:	5f 3c       	srlo	r12
80009668:	a1 79       	lsl	r9,0x1
8000966a:	5f 37       	srlo	r7
8000966c:	5c fc       	rol	r12
8000966e:	fc 1e ff e0 	movh	lr,0xffe0
80009672:	58 0a       	cp.w	r10,0
80009674:	fc 0b 13 00 	cpc	r11,lr
80009678:	e0 8b 00 1d 	brhi	800096b2 <__avr32_f64_cmp_lt+0x52>
8000967c:	58 08       	cp.w	r8,0
8000967e:	fc 09 13 00 	cpc	r9,lr
80009682:	e0 8b 00 18 	brhi	800096b2 <__avr32_f64_cmp_lt+0x52>
80009686:	58 0b       	cp.w	r11,0
80009688:	f5 ba 00 00 	subfeq	r10,0
8000968c:	c1 50       	breq	800096b6 <__avr32_f64_cmp_lt+0x56>
8000968e:	1b 07       	ld.w	r7,sp++
80009690:	1b 0e       	ld.w	lr,sp++
80009692:	58 3c       	cp.w	r12,3
80009694:	c0 a0       	breq	800096a8 <__avr32_f64_cmp_lt+0x48>
80009696:	58 1c       	cp.w	r12,1
80009698:	c0 33       	brcs	8000969e <__avr32_f64_cmp_lt+0x3e>
8000969a:	5e 0d       	reteq	0
8000969c:	5e 1f       	retne	1
8000969e:	10 3a       	cp.w	r10,r8
800096a0:	f2 0b 13 00 	cpc	r11,r9
800096a4:	5e 2d       	reths	0
800096a6:	5e 3f       	retlo	1
800096a8:	14 38       	cp.w	r8,r10
800096aa:	f6 09 13 00 	cpc	r9,r11
800096ae:	5e 2d       	reths	0
800096b0:	5e 3f       	retlo	1
800096b2:	1b 07       	ld.w	r7,sp++
800096b4:	d8 0a       	popm	pc,r12=0
800096b6:	58 17       	cp.w	r7,1
800096b8:	5f 1c       	srne	r12
800096ba:	58 09       	cp.w	r9,0
800096bc:	f5 b8 00 00 	subfeq	r8,0
800096c0:	1b 07       	ld.w	r7,sp++
800096c2:	1b 0e       	ld.w	lr,sp++
800096c4:	5e 0d       	reteq	0
800096c6:	5e fc       	retal	r12

800096c8 <__avr32_f64_div>:
800096c8:	eb cd 40 ff 	pushm	r0-r7,lr
800096cc:	f7 e9 20 0e 	eor	lr,r11,r9
800096d0:	f6 07 16 14 	lsr	r7,r11,0x14
800096d4:	a9 7b       	lsl	r11,0x9
800096d6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800096da:	a9 7a       	lsl	r10,0x9
800096dc:	bd bb       	sbr	r11,0x1d
800096de:	e4 1b 3f ff 	andh	r11,0x3fff
800096e2:	ab d7       	cbr	r7,0xb
800096e4:	e0 80 00 cc 	breq	8000987c <__avr32_f64_div_round_subnormal+0x54>
800096e8:	e0 47 07 ff 	cp.w	r7,2047
800096ec:	e0 84 00 b5 	brge	80009856 <__avr32_f64_div_round_subnormal+0x2e>
800096f0:	f2 06 16 14 	lsr	r6,r9,0x14
800096f4:	a9 79       	lsl	r9,0x9
800096f6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800096fa:	a9 78       	lsl	r8,0x9
800096fc:	bd b9       	sbr	r9,0x1d
800096fe:	e4 19 3f ff 	andh	r9,0x3fff
80009702:	ab d6       	cbr	r6,0xb
80009704:	e0 80 00 e2 	breq	800098c8 <__avr32_f64_div_round_subnormal+0xa0>
80009708:	e0 46 07 ff 	cp.w	r6,2047
8000970c:	e0 84 00 b2 	brge	80009870 <__avr32_f64_div_round_subnormal+0x48>
80009710:	0c 17       	sub	r7,r6
80009712:	fe 37 fc 01 	sub	r7,-1023
80009716:	fc 1c 80 00 	movh	r12,0x8000
8000971a:	f8 03 16 01 	lsr	r3,r12,0x1
8000971e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80009722:	5c d4       	com	r4
80009724:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80009728:	e6 09 06 44 	mulu.d	r4,r3,r9
8000972c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009730:	e6 05 06 44 	mulu.d	r4,r3,r5
80009734:	ea 03 15 02 	lsl	r3,r5,0x2
80009738:	e6 09 06 44 	mulu.d	r4,r3,r9
8000973c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009740:	e6 05 06 44 	mulu.d	r4,r3,r5
80009744:	ea 03 15 02 	lsl	r3,r5,0x2
80009748:	e6 09 06 44 	mulu.d	r4,r3,r9
8000974c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009750:	e6 05 06 44 	mulu.d	r4,r3,r5
80009754:	ea 03 15 02 	lsl	r3,r5,0x2
80009758:	e6 08 06 40 	mulu.d	r0,r3,r8
8000975c:	e4 09 07 40 	macu.d	r0,r2,r9
80009760:	e6 09 06 44 	mulu.d	r4,r3,r9
80009764:	02 04       	add	r4,r1
80009766:	5c 05       	acr	r5
80009768:	a3 65       	lsl	r5,0x2
8000976a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000976e:	a3 64       	lsl	r4,0x2
80009770:	5c 34       	neg	r4
80009772:	f8 05 01 45 	sbc	r5,r12,r5
80009776:	e6 04 06 40 	mulu.d	r0,r3,r4
8000977a:	e4 05 07 40 	macu.d	r0,r2,r5
8000977e:	e6 05 06 44 	mulu.d	r4,r3,r5
80009782:	02 04       	add	r4,r1
80009784:	5c 05       	acr	r5
80009786:	ea 03 15 02 	lsl	r3,r5,0x2
8000978a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000978e:	e8 02 15 02 	lsl	r2,r4,0x2
80009792:	e6 08 06 40 	mulu.d	r0,r3,r8
80009796:	e4 09 07 40 	macu.d	r0,r2,r9
8000979a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000979e:	02 04       	add	r4,r1
800097a0:	5c 05       	acr	r5
800097a2:	a3 65       	lsl	r5,0x2
800097a4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800097a8:	a3 64       	lsl	r4,0x2
800097aa:	5c 34       	neg	r4
800097ac:	f8 05 01 45 	sbc	r5,r12,r5
800097b0:	e6 04 06 40 	mulu.d	r0,r3,r4
800097b4:	e4 05 07 40 	macu.d	r0,r2,r5
800097b8:	e6 05 06 44 	mulu.d	r4,r3,r5
800097bc:	02 04       	add	r4,r1
800097be:	5c 05       	acr	r5
800097c0:	ea 03 15 02 	lsl	r3,r5,0x2
800097c4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800097c8:	e8 02 15 02 	lsl	r2,r4,0x2
800097cc:	e6 0a 06 40 	mulu.d	r0,r3,r10
800097d0:	e4 0b 07 40 	macu.d	r0,r2,r11
800097d4:	e6 0b 06 42 	mulu.d	r2,r3,r11
800097d8:	02 02       	add	r2,r1
800097da:	5c 03       	acr	r3
800097dc:	ed b3 00 1c 	bld	r3,0x1c
800097e0:	c0 90       	breq	800097f2 <__avr32_f64_div+0x12a>
800097e2:	a1 72       	lsl	r2,0x1
800097e4:	5c f3       	rol	r3
800097e6:	20 17       	sub	r7,1
800097e8:	a3 9a       	lsr	r10,0x3
800097ea:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800097ee:	a3 9b       	lsr	r11,0x3
800097f0:	c0 58       	rjmp	800097fa <__avr32_f64_div+0x132>
800097f2:	a5 8a       	lsr	r10,0x4
800097f4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800097f8:	a5 8b       	lsr	r11,0x4
800097fa:	58 07       	cp.w	r7,0
800097fc:	e0 8a 00 8b 	brle	80009912 <__avr32_f64_div_res_subnormal>
80009800:	e0 12 ff 00 	andl	r2,0xff00
80009804:	e8 12 00 80 	orl	r2,0x80
80009808:	e6 08 06 40 	mulu.d	r0,r3,r8
8000980c:	e4 09 07 40 	macu.d	r0,r2,r9
80009810:	e4 08 06 44 	mulu.d	r4,r2,r8
80009814:	e6 09 06 48 	mulu.d	r8,r3,r9
80009818:	00 05       	add	r5,r0
8000981a:	f0 01 00 48 	adc	r8,r8,r1
8000981e:	5c 09       	acr	r9
80009820:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009824:	58 04       	cp.w	r4,0
80009826:	5c 25       	cpc	r5

80009828 <__avr32_f64_div_round_subnormal>:
80009828:	f4 08 13 00 	cpc	r8,r10
8000982c:	f6 09 13 00 	cpc	r9,r11
80009830:	5f 36       	srlo	r6
80009832:	f8 06 17 00 	moveq	r6,r12
80009836:	e4 0a 16 08 	lsr	r10,r2,0x8
8000983a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000983e:	e6 0b 16 08 	lsr	r11,r3,0x8
80009842:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009846:	ed be 00 1f 	bld	lr,0x1f
8000984a:	ef bb 00 1f 	bst	r11,0x1f
8000984e:	0c 0a       	add	r10,r6
80009850:	5c 0b       	acr	r11
80009852:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009856:	e4 1b 00 0f 	andh	r11,0xf
8000985a:	14 4b       	or	r11,r10
8000985c:	e0 81 00 a7 	brne	800099aa <__avr32_f64_div_res_subnormal+0x98>
80009860:	f2 06 16 14 	lsr	r6,r9,0x14
80009864:	ab d6       	cbr	r6,0xb
80009866:	e0 46 07 ff 	cp.w	r6,2047
8000986a:	e0 81 00 a4 	brne	800099b2 <__avr32_f64_div_res_subnormal+0xa0>
8000986e:	c9 e8       	rjmp	800099aa <__avr32_f64_div_res_subnormal+0x98>
80009870:	e4 19 00 0f 	andh	r9,0xf
80009874:	10 49       	or	r9,r8
80009876:	e0 81 00 9a 	brne	800099aa <__avr32_f64_div_res_subnormal+0x98>
8000987a:	c9 28       	rjmp	8000999e <__avr32_f64_div_res_subnormal+0x8c>
8000987c:	a3 7b       	lsl	r11,0x3
8000987e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80009882:	a3 7a       	lsl	r10,0x3
80009884:	f5 eb 10 04 	or	r4,r10,r11
80009888:	e0 80 00 a0 	breq	800099c8 <__avr32_f64_div_op1_zero>
8000988c:	f6 04 12 00 	clz	r4,r11
80009890:	c1 70       	breq	800098be <__avr32_f64_div_round_subnormal+0x96>
80009892:	c0 c3       	brcs	800098aa <__avr32_f64_div_round_subnormal+0x82>
80009894:	e8 05 11 20 	rsub	r5,r4,32
80009898:	f6 04 09 4b 	lsl	r11,r11,r4
8000989c:	f4 05 0a 45 	lsr	r5,r10,r5
800098a0:	0a 4b       	or	r11,r5
800098a2:	f4 04 09 4a 	lsl	r10,r10,r4
800098a6:	08 17       	sub	r7,r4
800098a8:	c0 b8       	rjmp	800098be <__avr32_f64_div_round_subnormal+0x96>
800098aa:	f4 04 12 00 	clz	r4,r10
800098ae:	f9 b4 03 00 	movlo	r4,0
800098b2:	f7 b4 02 e0 	subhs	r4,-32
800098b6:	f4 04 09 4b 	lsl	r11,r10,r4
800098ba:	30 0a       	mov	r10,0
800098bc:	08 17       	sub	r7,r4
800098be:	a3 8a       	lsr	r10,0x2
800098c0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800098c4:	a3 8b       	lsr	r11,0x2
800098c6:	c1 1b       	rjmp	800096e8 <__avr32_f64_div+0x20>
800098c8:	a3 79       	lsl	r9,0x3
800098ca:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800098ce:	a3 78       	lsl	r8,0x3
800098d0:	f3 e8 10 04 	or	r4,r9,r8
800098d4:	c6 f0       	breq	800099b2 <__avr32_f64_div_res_subnormal+0xa0>
800098d6:	f2 04 12 00 	clz	r4,r9
800098da:	c1 70       	breq	80009908 <__avr32_f64_div_round_subnormal+0xe0>
800098dc:	c0 c3       	brcs	800098f4 <__avr32_f64_div_round_subnormal+0xcc>
800098de:	e8 05 11 20 	rsub	r5,r4,32
800098e2:	f2 04 09 49 	lsl	r9,r9,r4
800098e6:	f0 05 0a 45 	lsr	r5,r8,r5
800098ea:	0a 49       	or	r9,r5
800098ec:	f0 04 09 48 	lsl	r8,r8,r4
800098f0:	08 16       	sub	r6,r4
800098f2:	c0 b8       	rjmp	80009908 <__avr32_f64_div_round_subnormal+0xe0>
800098f4:	f0 04 12 00 	clz	r4,r8
800098f8:	f9 b4 03 00 	movlo	r4,0
800098fc:	f7 b4 02 e0 	subhs	r4,-32
80009900:	f0 04 09 49 	lsl	r9,r8,r4
80009904:	30 08       	mov	r8,0
80009906:	08 16       	sub	r6,r4
80009908:	a3 88       	lsr	r8,0x2
8000990a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000990e:	a3 89       	lsr	r9,0x2
80009910:	cf ca       	rjmp	80009708 <__avr32_f64_div+0x40>

80009912 <__avr32_f64_div_res_subnormal>:
80009912:	5c 37       	neg	r7
80009914:	2f f7       	sub	r7,-1
80009916:	f1 b7 04 c0 	satu	r7,0x6
8000991a:	e0 47 00 20 	cp.w	r7,32
8000991e:	c1 54       	brge	80009948 <__avr32_f64_div_res_subnormal+0x36>
80009920:	ee 06 11 20 	rsub	r6,r7,32
80009924:	e4 07 0a 42 	lsr	r2,r2,r7
80009928:	e6 06 09 4c 	lsl	r12,r3,r6
8000992c:	18 42       	or	r2,r12
8000992e:	e6 07 0a 43 	lsr	r3,r3,r7
80009932:	f4 06 09 41 	lsl	r1,r10,r6
80009936:	f4 07 0a 4a 	lsr	r10,r10,r7
8000993a:	f6 06 09 4c 	lsl	r12,r11,r6
8000993e:	18 4a       	or	r10,r12
80009940:	f6 07 0a 4b 	lsr	r11,r11,r7
80009944:	30 00       	mov	r0,0
80009946:	c1 58       	rjmp	80009970 <__avr32_f64_div_res_subnormal+0x5e>
80009948:	ee 06 11 20 	rsub	r6,r7,32
8000994c:	f9 b0 00 00 	moveq	r0,0
80009950:	f9 bc 00 00 	moveq	r12,0
80009954:	c0 50       	breq	8000995e <__avr32_f64_div_res_subnormal+0x4c>
80009956:	f4 06 09 40 	lsl	r0,r10,r6
8000995a:	f6 06 09 4c 	lsl	r12,r11,r6
8000995e:	e6 07 0a 42 	lsr	r2,r3,r7
80009962:	30 03       	mov	r3,0
80009964:	f4 07 0a 41 	lsr	r1,r10,r7
80009968:	18 41       	or	r1,r12
8000996a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000996e:	30 0b       	mov	r11,0
80009970:	e0 12 ff 00 	andl	r2,0xff00
80009974:	e8 12 00 80 	orl	r2,0x80
80009978:	e6 08 06 46 	mulu.d	r6,r3,r8
8000997c:	e4 09 07 46 	macu.d	r6,r2,r9
80009980:	e4 08 06 44 	mulu.d	r4,r2,r8
80009984:	e6 09 06 48 	mulu.d	r8,r3,r9
80009988:	0c 05       	add	r5,r6
8000998a:	f0 07 00 48 	adc	r8,r8,r7
8000998e:	5c 09       	acr	r9
80009990:	30 07       	mov	r7,0
80009992:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009996:	00 34       	cp.w	r4,r0
80009998:	e2 05 13 00 	cpc	r5,r1
8000999c:	c4 6b       	rjmp	80009828 <__avr32_f64_div_round_subnormal>
8000999e:	1c 9b       	mov	r11,lr
800099a0:	e6 1b 80 00 	andh	r11,0x8000,COH
800099a4:	30 0a       	mov	r10,0
800099a6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800099aa:	3f fb       	mov	r11,-1
800099ac:	30 0a       	mov	r10,0
800099ae:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800099b2:	f5 eb 10 04 	or	r4,r10,r11
800099b6:	c0 90       	breq	800099c8 <__avr32_f64_div_op1_zero>
800099b8:	1c 9b       	mov	r11,lr
800099ba:	e6 1b 80 00 	andh	r11,0x8000,COH
800099be:	ea 1b 7f f0 	orh	r11,0x7ff0
800099c2:	30 0a       	mov	r10,0
800099c4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800099c8 <__avr32_f64_div_op1_zero>:
800099c8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800099cc:	ce f0       	breq	800099aa <__avr32_f64_div_res_subnormal+0x98>
800099ce:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800099d2:	e0 44 07 ff 	cp.w	r4,2047
800099d6:	ce 41       	brne	8000999e <__avr32_f64_div_res_subnormal+0x8c>
800099d8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800099dc:	ce 10       	breq	8000999e <__avr32_f64_div_res_subnormal+0x8c>
800099de:	ce 6b       	rjmp	800099aa <__avr32_f64_div_res_subnormal+0x98>

800099e0 <__avr32_udiv64>:
800099e0:	d4 31       	pushm	r0-r7,lr
800099e2:	1a 97       	mov	r7,sp
800099e4:	20 2d       	sub	sp,8
800099e6:	10 9e       	mov	lr,r8
800099e8:	12 95       	mov	r5,r9
800099ea:	14 96       	mov	r6,r10
800099ec:	58 09       	cp.w	r9,0
800099ee:	c4 91       	brne	80009a80 <__avr32_udiv64+0xa0>
800099f0:	16 38       	cp.w	r8,r11
800099f2:	e0 88 00 57 	brls	80009aa0 <__avr32_udiv64+0xc0>
800099f6:	f0 08 12 00 	clz	r8,r8
800099fa:	c0 d0       	breq	80009a14 <__avr32_udiv64+0x34>
800099fc:	f6 08 09 4b 	lsl	r11,r11,r8
80009a00:	f0 09 11 20 	rsub	r9,r8,32
80009a04:	fc 08 09 4e 	lsl	lr,lr,r8
80009a08:	f4 09 0a 49 	lsr	r9,r10,r9
80009a0c:	f4 08 09 46 	lsl	r6,r10,r8
80009a10:	f3 eb 10 0b 	or	r11,r9,r11
80009a14:	fc 05 16 10 	lsr	r5,lr,0x10
80009a18:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80009a1c:	f6 05 0d 0a 	divu	r10,r11,r5
80009a20:	ec 08 16 10 	lsr	r8,r6,0x10
80009a24:	14 99       	mov	r9,r10
80009a26:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80009a2a:	b9 3a       	mul	r10,r12
80009a2c:	10 3a       	cp.w	r10,r8
80009a2e:	e0 88 00 0c 	brls	80009a46 <__avr32_udiv64+0x66>
80009a32:	20 19       	sub	r9,1
80009a34:	1c 08       	add	r8,lr
80009a36:	10 3e       	cp.w	lr,r8
80009a38:	e0 8b 00 07 	brhi	80009a46 <__avr32_udiv64+0x66>
80009a3c:	10 3a       	cp.w	r10,r8
80009a3e:	f7 b9 0b 01 	subhi	r9,1
80009a42:	f1 de eb 08 	addhi	r8,r8,lr
80009a46:	f0 0a 01 0b 	sub	r11,r8,r10
80009a4a:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80009a4e:	f6 05 0d 0a 	divu	r10,r11,r5
80009a52:	ed eb 11 06 	or	r6,r6,r11<<0x10
80009a56:	14 98       	mov	r8,r10
80009a58:	f4 0c 02 4c 	mul	r12,r10,r12
80009a5c:	0c 3c       	cp.w	r12,r6
80009a5e:	e0 88 00 0a 	brls	80009a72 <__avr32_udiv64+0x92>
80009a62:	20 18       	sub	r8,1
80009a64:	1c 06       	add	r6,lr
80009a66:	0c 3e       	cp.w	lr,r6
80009a68:	e0 8b 00 05 	brhi	80009a72 <__avr32_udiv64+0x92>
80009a6c:	0c 3c       	cp.w	r12,r6
80009a6e:	f7 b8 0b 01 	subhi	r8,1
80009a72:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80009a76:	30 0c       	mov	r12,0
80009a78:	16 9a       	mov	r10,r11
80009a7a:	18 9b       	mov	r11,r12
80009a7c:	2f ed       	sub	sp,-8
80009a7e:	d8 32       	popm	r0-r7,pc
80009a80:	16 39       	cp.w	r9,r11
80009a82:	e0 8b 00 51 	brhi	80009b24 <__avr32_udiv64+0x144>
80009a86:	f2 0c 12 00 	clz	r12,r9
80009a8a:	c5 31       	brne	80009b30 <__avr32_udiv64+0x150>
80009a8c:	14 38       	cp.w	r8,r10
80009a8e:	5f 89       	srls	r9
80009a90:	16 35       	cp.w	r5,r11
80009a92:	5f 38       	srlo	r8
80009a94:	10 49       	or	r9,r8
80009a96:	f8 09 18 00 	cp.b	r9,r12
80009a9a:	c4 50       	breq	80009b24 <__avr32_udiv64+0x144>
80009a9c:	30 1b       	mov	r11,1
80009a9e:	c4 58       	rjmp	80009b28 <__avr32_udiv64+0x148>
80009aa0:	58 08       	cp.w	r8,0
80009aa2:	c0 51       	brne	80009aac <__avr32_udiv64+0xcc>
80009aa4:	30 19       	mov	r9,1
80009aa6:	f2 08 0d 08 	divu	r8,r9,r8
80009aaa:	10 9e       	mov	lr,r8
80009aac:	fc 08 12 00 	clz	r8,lr
80009ab0:	e0 81 00 91 	brne	80009bd2 <__avr32_udiv64+0x1f2>
80009ab4:	1c 1b       	sub	r11,lr
80009ab6:	fc 05 16 10 	lsr	r5,lr,0x10
80009aba:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80009abe:	30 1c       	mov	r12,1
80009ac0:	f6 05 0d 0a 	divu	r10,r11,r5
80009ac4:	ec 08 16 10 	lsr	r8,r6,0x10
80009ac8:	f4 09 02 43 	mul	r3,r10,r9
80009acc:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80009ad0:	14 9b       	mov	r11,r10
80009ad2:	10 33       	cp.w	r3,r8
80009ad4:	e0 88 00 0c 	brls	80009aec <__avr32_udiv64+0x10c>
80009ad8:	20 1b       	sub	r11,1
80009ada:	1c 08       	add	r8,lr
80009adc:	10 3e       	cp.w	lr,r8
80009ade:	e0 8b 00 07 	brhi	80009aec <__avr32_udiv64+0x10c>
80009ae2:	10 33       	cp.w	r3,r8
80009ae4:	f7 bb 0b 01 	subhi	r11,1
80009ae8:	f1 de eb 08 	addhi	r8,r8,lr
80009aec:	f0 03 01 03 	sub	r3,r8,r3
80009af0:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80009af4:	e6 05 0d 02 	divu	r2,r3,r5
80009af8:	ed e3 11 06 	or	r6,r6,r3<<0x10
80009afc:	04 98       	mov	r8,r2
80009afe:	e4 09 02 49 	mul	r9,r2,r9
80009b02:	0c 39       	cp.w	r9,r6
80009b04:	e0 88 00 0a 	brls	80009b18 <__avr32_udiv64+0x138>
80009b08:	20 18       	sub	r8,1
80009b0a:	1c 06       	add	r6,lr
80009b0c:	0c 3e       	cp.w	lr,r6
80009b0e:	e0 8b 00 05 	brhi	80009b18 <__avr32_udiv64+0x138>
80009b12:	0c 39       	cp.w	r9,r6
80009b14:	f7 b8 0b 01 	subhi	r8,1
80009b18:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80009b1c:	16 9a       	mov	r10,r11
80009b1e:	18 9b       	mov	r11,r12
80009b20:	2f ed       	sub	sp,-8
80009b22:	d8 32       	popm	r0-r7,pc
80009b24:	30 0b       	mov	r11,0
80009b26:	16 9c       	mov	r12,r11
80009b28:	16 9a       	mov	r10,r11
80009b2a:	18 9b       	mov	r11,r12
80009b2c:	2f ed       	sub	sp,-8
80009b2e:	d8 32       	popm	r0-r7,pc
80009b30:	f2 0c 09 45 	lsl	r5,r9,r12
80009b34:	f8 0e 11 20 	rsub	lr,r12,32
80009b38:	f0 0c 09 43 	lsl	r3,r8,r12
80009b3c:	f4 0e 0a 46 	lsr	r6,r10,lr
80009b40:	f0 0e 0a 48 	lsr	r8,r8,lr
80009b44:	f6 0e 0a 4e 	lsr	lr,r11,lr
80009b48:	0a 48       	or	r8,r5
80009b4a:	f0 01 16 10 	lsr	r1,r8,0x10
80009b4e:	fc 01 0d 04 	divu	r4,lr,r1
80009b52:	ee e5 ff f8 	st.d	r7[-8],r4
80009b56:	f6 0c 09 49 	lsl	r9,r11,r12
80009b5a:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80009b5e:	ed e9 10 09 	or	r9,r6,r9
80009b62:	08 96       	mov	r6,r4
80009b64:	f2 0e 16 10 	lsr	lr,r9,0x10
80009b68:	ee f4 ff f8 	ld.w	r4,r7[-8]
80009b6c:	ec 05 02 4b 	mul	r11,r6,r5
80009b70:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80009b74:	1c 3b       	cp.w	r11,lr
80009b76:	e0 88 00 07 	brls	80009b84 <__avr32_udiv64+0x1a4>
80009b7a:	20 16       	sub	r6,1
80009b7c:	10 0e       	add	lr,r8
80009b7e:	1c 38       	cp.w	r8,lr
80009b80:	e0 88 00 6d 	brls	80009c5a <__avr32_udiv64+0x27a>
80009b84:	16 1e       	sub	lr,r11
80009b86:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80009b8a:	fc 01 0d 00 	divu	r0,lr,r1
80009b8e:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80009b92:	00 9b       	mov	r11,r0
80009b94:	e0 05 02 4e 	mul	lr,r0,r5
80009b98:	12 3e       	cp.w	lr,r9
80009b9a:	e0 88 00 07 	brls	80009ba8 <__avr32_udiv64+0x1c8>
80009b9e:	20 1b       	sub	r11,1
80009ba0:	10 09       	add	r9,r8
80009ba2:	12 38       	cp.w	r8,r9
80009ba4:	e0 88 00 55 	brls	80009c4e <__avr32_udiv64+0x26e>
80009ba8:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80009bac:	1c 19       	sub	r9,lr
80009bae:	f6 03 06 42 	mulu.d	r2,r11,r3
80009bb2:	06 39       	cp.w	r9,r3
80009bb4:	c0 93       	brcs	80009bc6 <__avr32_udiv64+0x1e6>
80009bb6:	5f 09       	sreq	r9
80009bb8:	f4 0c 09 4c 	lsl	r12,r10,r12
80009bbc:	04 3c       	cp.w	r12,r2
80009bbe:	5f 38       	srlo	r8
80009bc0:	f3 e8 00 08 	and	r8,r9,r8
80009bc4:	c0 20       	breq	80009bc8 <__avr32_udiv64+0x1e8>
80009bc6:	20 1b       	sub	r11,1
80009bc8:	30 0c       	mov	r12,0
80009bca:	16 9a       	mov	r10,r11
80009bcc:	18 9b       	mov	r11,r12
80009bce:	2f ed       	sub	sp,-8
80009bd0:	d8 32       	popm	r0-r7,pc
80009bd2:	f6 08 09 49 	lsl	r9,r11,r8
80009bd6:	fc 08 09 4e 	lsl	lr,lr,r8
80009bda:	f0 01 11 20 	rsub	r1,r8,32
80009bde:	fc 05 16 10 	lsr	r5,lr,0x10
80009be2:	f4 01 0a 42 	lsr	r2,r10,r1
80009be6:	f6 01 0a 41 	lsr	r1,r11,r1
80009bea:	12 42       	or	r2,r9
80009bec:	e2 05 0d 00 	divu	r0,r1,r5
80009bf0:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80009bf4:	e4 06 16 10 	lsr	r6,r2,0x10
80009bf8:	00 93       	mov	r3,r0
80009bfa:	ed e1 11 06 	or	r6,r6,r1<<0x10
80009bfe:	e0 09 02 4c 	mul	r12,r0,r9
80009c02:	0c 3c       	cp.w	r12,r6
80009c04:	e0 88 00 07 	brls	80009c12 <__avr32_udiv64+0x232>
80009c08:	20 13       	sub	r3,1
80009c0a:	1c 06       	add	r6,lr
80009c0c:	0c 3e       	cp.w	lr,r6
80009c0e:	e0 88 00 2c 	brls	80009c66 <__avr32_udiv64+0x286>
80009c12:	ec 0c 01 01 	sub	r1,r6,r12
80009c16:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80009c1a:	e2 05 0d 00 	divu	r0,r1,r5
80009c1e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009c22:	00 9c       	mov	r12,r0
80009c24:	e0 09 02 41 	mul	r1,r0,r9
80009c28:	16 31       	cp.w	r1,r11
80009c2a:	e0 88 00 0c 	brls	80009c42 <__avr32_udiv64+0x262>
80009c2e:	20 1c       	sub	r12,1
80009c30:	1c 0b       	add	r11,lr
80009c32:	16 3e       	cp.w	lr,r11
80009c34:	e0 8b 00 07 	brhi	80009c42 <__avr32_udiv64+0x262>
80009c38:	16 31       	cp.w	r1,r11
80009c3a:	f7 bc 0b 01 	subhi	r12,1
80009c3e:	f7 de eb 0b 	addhi	r11,r11,lr
80009c42:	f4 08 09 46 	lsl	r6,r10,r8
80009c46:	02 1b       	sub	r11,r1
80009c48:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80009c4c:	c3 ab       	rjmp	80009ac0 <__avr32_udiv64+0xe0>
80009c4e:	12 3e       	cp.w	lr,r9
80009c50:	f3 d8 eb 09 	addhi	r9,r9,r8
80009c54:	f7 bb 0b 01 	subhi	r11,1
80009c58:	ca 8b       	rjmp	80009ba8 <__avr32_udiv64+0x1c8>
80009c5a:	1c 3b       	cp.w	r11,lr
80009c5c:	f7 b6 0b 01 	subhi	r6,1
80009c60:	fd d8 eb 0e 	addhi	lr,lr,r8
80009c64:	c9 0b       	rjmp	80009b84 <__avr32_udiv64+0x1a4>
80009c66:	0c 3c       	cp.w	r12,r6
80009c68:	f7 b3 0b 01 	subhi	r3,1
80009c6c:	ed de eb 06 	addhi	r6,r6,lr
80009c70:	cd 1b       	rjmp	80009c12 <__avr32_udiv64+0x232>

80009c72 <__avr32_umod64>:
80009c72:	d4 31       	pushm	r0-r7,lr
80009c74:	1a 97       	mov	r7,sp
80009c76:	20 2d       	sub	sp,8
80009c78:	10 9c       	mov	r12,r8
80009c7a:	12 95       	mov	r5,r9
80009c7c:	14 9e       	mov	lr,r10
80009c7e:	16 93       	mov	r3,r11
80009c80:	16 96       	mov	r6,r11
80009c82:	58 09       	cp.w	r9,0
80009c84:	c4 41       	brne	80009d0c <__avr32_umod64+0x9a>
80009c86:	16 38       	cp.w	r8,r11
80009c88:	e0 88 00 5a 	brls	80009d3c <__avr32_umod64+0xca>
80009c8c:	f0 08 12 00 	clz	r8,r8
80009c90:	c0 d0       	breq	80009caa <__avr32_umod64+0x38>
80009c92:	f6 08 09 46 	lsl	r6,r11,r8
80009c96:	f8 08 09 4c 	lsl	r12,r12,r8
80009c9a:	f0 0b 11 20 	rsub	r11,r8,32
80009c9e:	f4 08 09 4e 	lsl	lr,r10,r8
80009ca2:	f4 0b 0a 4b 	lsr	r11,r10,r11
80009ca6:	f7 e6 10 06 	or	r6,r11,r6
80009caa:	f8 0a 16 10 	lsr	r10,r12,0x10
80009cae:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009cb2:	ec 0a 0d 02 	divu	r2,r6,r10
80009cb6:	fc 09 16 10 	lsr	r9,lr,0x10
80009cba:	ea 02 02 4b 	mul	r11,r5,r2
80009cbe:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009cc2:	12 3b       	cp.w	r11,r9
80009cc4:	e0 88 00 09 	brls	80009cd6 <__avr32_umod64+0x64>
80009cc8:	18 09       	add	r9,r12
80009cca:	12 3c       	cp.w	r12,r9
80009ccc:	e0 8b 00 05 	brhi	80009cd6 <__avr32_umod64+0x64>
80009cd0:	12 3b       	cp.w	r11,r9
80009cd2:	f3 dc eb 09 	addhi	r9,r9,r12
80009cd6:	f2 0b 01 0b 	sub	r11,r9,r11
80009cda:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009cde:	f6 0a 0d 0a 	divu	r10,r11,r10
80009ce2:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009ce6:	ea 0a 02 4a 	mul	r10,r5,r10
80009cea:	1c 3a       	cp.w	r10,lr
80009cec:	e0 88 00 09 	brls	80009cfe <__avr32_umod64+0x8c>
80009cf0:	18 0e       	add	lr,r12
80009cf2:	1c 3c       	cp.w	r12,lr
80009cf4:	e0 8b 00 05 	brhi	80009cfe <__avr32_umod64+0x8c>
80009cf8:	1c 3a       	cp.w	r10,lr
80009cfa:	fd dc eb 0e 	addhi	lr,lr,r12
80009cfe:	fc 0a 01 0a 	sub	r10,lr,r10
80009d02:	30 0b       	mov	r11,0
80009d04:	f4 08 0a 4a 	lsr	r10,r10,r8
80009d08:	2f ed       	sub	sp,-8
80009d0a:	d8 32       	popm	r0-r7,pc
80009d0c:	16 39       	cp.w	r9,r11
80009d0e:	fe 9b ff fd 	brhi	80009d08 <__avr32_umod64+0x96>
80009d12:	f2 09 12 00 	clz	r9,r9
80009d16:	c4 61       	brne	80009da2 <__avr32_umod64+0x130>
80009d18:	14 38       	cp.w	r8,r10
80009d1a:	5f 8b       	srls	r11
80009d1c:	06 35       	cp.w	r5,r3
80009d1e:	5f 3a       	srlo	r10
80009d20:	f7 ea 10 0a 	or	r10,r11,r10
80009d24:	f2 0a 18 00 	cp.b	r10,r9
80009d28:	c0 60       	breq	80009d34 <__avr32_umod64+0xc2>
80009d2a:	fc 08 01 0a 	sub	r10,lr,r8
80009d2e:	e6 05 01 46 	sbc	r6,r3,r5
80009d32:	14 9e       	mov	lr,r10
80009d34:	0c 9b       	mov	r11,r6
80009d36:	1c 9a       	mov	r10,lr
80009d38:	2f ed       	sub	sp,-8
80009d3a:	d8 32       	popm	r0-r7,pc
80009d3c:	58 08       	cp.w	r8,0
80009d3e:	c0 51       	brne	80009d48 <__avr32_umod64+0xd6>
80009d40:	30 19       	mov	r9,1
80009d42:	f2 08 0d 08 	divu	r8,r9,r8
80009d46:	10 9c       	mov	r12,r8
80009d48:	f8 08 12 00 	clz	r8,r12
80009d4c:	e0 81 00 84 	brne	80009e54 <__avr32_umod64+0x1e2>
80009d50:	ec 0c 01 0b 	sub	r11,r6,r12
80009d54:	f8 03 16 10 	lsr	r3,r12,0x10
80009d58:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009d5c:	f6 03 0d 0a 	divu	r10,r11,r3
80009d60:	fc 09 16 10 	lsr	r9,lr,0x10
80009d64:	ea 0a 02 4a 	mul	r10,r5,r10
80009d68:	f3 eb 11 09 	or	r9,r9,r11<<0x10
80009d6c:	12 3a       	cp.w	r10,r9
80009d6e:	e0 88 00 09 	brls	80009d80 <__avr32_umod64+0x10e>
80009d72:	18 09       	add	r9,r12
80009d74:	12 3c       	cp.w	r12,r9
80009d76:	e0 8b 00 05 	brhi	80009d80 <__avr32_umod64+0x10e>
80009d7a:	12 3a       	cp.w	r10,r9
80009d7c:	f3 dc eb 09 	addhi	r9,r9,r12
80009d80:	14 19       	sub	r9,r10
80009d82:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009d86:	f2 03 0d 02 	divu	r2,r9,r3
80009d8a:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009d8e:	ea 02 02 4a 	mul	r10,r5,r2
80009d92:	1c 3a       	cp.w	r10,lr
80009d94:	fe 98 ff b5 	brls	80009cfe <__avr32_umod64+0x8c>
80009d98:	18 0e       	add	lr,r12
80009d9a:	1c 3c       	cp.w	r12,lr
80009d9c:	fe 9b ff b1 	brhi	80009cfe <__avr32_umod64+0x8c>
80009da0:	ca cb       	rjmp	80009cf8 <__avr32_umod64+0x86>
80009da2:	f2 0e 11 20 	rsub	lr,r9,32
80009da6:	ea 09 09 45 	lsl	r5,r5,r9
80009daa:	f6 09 09 4b 	lsl	r11,r11,r9
80009dae:	e6 0e 0a 43 	lsr	r3,r3,lr
80009db2:	f0 09 09 41 	lsl	r1,r8,r9
80009db6:	f4 09 09 42 	lsl	r2,r10,r9
80009dba:	f0 0e 0a 48 	lsr	r8,r8,lr
80009dbe:	f4 0e 0a 4a 	lsr	r10,r10,lr
80009dc2:	0a 48       	or	r8,r5
80009dc4:	16 4a       	or	r10,r11
80009dc6:	f0 06 16 10 	lsr	r6,r8,0x10
80009dca:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80009dce:	e6 06 0d 04 	divu	r4,r3,r6
80009dd2:	f4 03 16 10 	lsr	r3,r10,0x10
80009dd6:	08 9b       	mov	r11,r4
80009dd8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009ddc:	e8 0c 02 45 	mul	r5,r4,r12
80009de0:	06 35       	cp.w	r5,r3
80009de2:	e0 88 00 07 	brls	80009df0 <__avr32_umod64+0x17e>
80009de6:	20 1b       	sub	r11,1
80009de8:	10 03       	add	r3,r8
80009dea:	06 38       	cp.w	r8,r3
80009dec:	e0 88 00 72 	brls	80009ed0 <__avr32_umod64+0x25e>
80009df0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009df4:	0a 13       	sub	r3,r5
80009df6:	e6 06 0d 04 	divu	r4,r3,r6
80009dfa:	f5 e5 11 06 	or	r6,r10,r5<<0x10
80009dfe:	e8 0c 02 4c 	mul	r12,r4,r12
80009e02:	08 9a       	mov	r10,r4
80009e04:	0c 3c       	cp.w	r12,r6
80009e06:	e0 88 00 07 	brls	80009e14 <__avr32_umod64+0x1a2>
80009e0a:	20 1a       	sub	r10,1
80009e0c:	10 06       	add	r6,r8
80009e0e:	0c 38       	cp.w	r8,r6
80009e10:	e0 88 00 5a 	brls	80009ec4 <__avr32_umod64+0x252>
80009e14:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
80009e18:	18 16       	sub	r6,r12
80009e1a:	f6 01 06 4a 	mulu.d	r10,r11,r1
80009e1e:	14 9c       	mov	r12,r10
80009e20:	16 36       	cp.w	r6,r11
80009e22:	c0 73       	brcs	80009e30 <__avr32_umod64+0x1be>
80009e24:	5f 05       	sreq	r5
80009e26:	14 32       	cp.w	r2,r10
80009e28:	5f 3a       	srlo	r10
80009e2a:	eb ea 00 0a 	and	r10,r5,r10
80009e2e:	c0 60       	breq	80009e3a <__avr32_umod64+0x1c8>
80009e30:	f8 01 01 04 	sub	r4,r12,r1
80009e34:	f6 08 01 4b 	sbc	r11,r11,r8
80009e38:	08 9c       	mov	r12,r4
80009e3a:	e4 0c 01 0a 	sub	r10,r2,r12
80009e3e:	ec 0b 01 46 	sbc	r6,r6,r11
80009e42:	ec 09 0a 4b 	lsr	r11,r6,r9
80009e46:	f4 09 0a 4a 	lsr	r10,r10,r9
80009e4a:	ec 0e 09 46 	lsl	r6,r6,lr
80009e4e:	0c 4a       	or	r10,r6
80009e50:	2f ed       	sub	sp,-8
80009e52:	d8 32       	popm	r0-r7,pc
80009e54:	f0 01 11 20 	rsub	r1,r8,32
80009e58:	f4 01 0a 4b 	lsr	r11,r10,r1
80009e5c:	f8 08 09 4c 	lsl	r12,r12,r8
80009e60:	ec 08 09 49 	lsl	r9,r6,r8
80009e64:	ec 01 0a 41 	lsr	r1,r6,r1
80009e68:	f7 e9 10 09 	or	r9,r11,r9
80009e6c:	f8 03 16 10 	lsr	r3,r12,0x10
80009e70:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009e74:	e2 03 0d 00 	divu	r0,r1,r3
80009e78:	f2 0b 16 10 	lsr	r11,r9,0x10
80009e7c:	ea 00 02 4e 	mul	lr,r5,r0
80009e80:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009e84:	16 3e       	cp.w	lr,r11
80009e86:	e0 88 00 06 	brls	80009e92 <__avr32_umod64+0x220>
80009e8a:	18 0b       	add	r11,r12
80009e8c:	16 3c       	cp.w	r12,r11
80009e8e:	e0 88 00 27 	brls	80009edc <__avr32_umod64+0x26a>
80009e92:	f6 0e 01 01 	sub	r1,r11,lr
80009e96:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80009e9a:	e2 03 0d 00 	divu	r0,r1,r3
80009e9e:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80009ea2:	ea 00 02 4b 	mul	r11,r5,r0
80009ea6:	12 3b       	cp.w	r11,r9
80009ea8:	e0 88 00 09 	brls	80009eba <__avr32_umod64+0x248>
80009eac:	18 09       	add	r9,r12
80009eae:	12 3c       	cp.w	r12,r9
80009eb0:	e0 8b 00 05 	brhi	80009eba <__avr32_umod64+0x248>
80009eb4:	12 3b       	cp.w	r11,r9
80009eb6:	f3 dc eb 09 	addhi	r9,r9,r12
80009eba:	f2 0b 01 0b 	sub	r11,r9,r11
80009ebe:	f4 08 09 4e 	lsl	lr,r10,r8
80009ec2:	c4 db       	rjmp	80009d5c <__avr32_umod64+0xea>
80009ec4:	0c 3c       	cp.w	r12,r6
80009ec6:	f7 ba 0b 01 	subhi	r10,1
80009eca:	ed d8 eb 06 	addhi	r6,r6,r8
80009ece:	ca 3b       	rjmp	80009e14 <__avr32_umod64+0x1a2>
80009ed0:	06 35       	cp.w	r5,r3
80009ed2:	f7 bb 0b 01 	subhi	r11,1
80009ed6:	e7 d8 eb 03 	addhi	r3,r3,r8
80009eda:	c8 bb       	rjmp	80009df0 <__avr32_umod64+0x17e>
80009edc:	16 3e       	cp.w	lr,r11
80009ede:	f7 dc eb 0b 	addhi	r11,r11,r12
80009ee2:	cd 8b       	rjmp	80009e92 <__avr32_umod64+0x220>

Disassembly of section .exception:

8000a000 <_evba>:
8000a000:	c0 08       	rjmp	8000a000 <_evba>
	...

8000a004 <_handle_TLB_Multiple_Hit>:
8000a004:	c0 08       	rjmp	8000a004 <_handle_TLB_Multiple_Hit>
	...

8000a008 <_handle_Bus_Error_Data_Fetch>:
8000a008:	c0 08       	rjmp	8000a008 <_handle_Bus_Error_Data_Fetch>
	...

8000a00c <_handle_Bus_Error_Instruction_Fetch>:
8000a00c:	c0 08       	rjmp	8000a00c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a010 <_handle_NMI>:
8000a010:	c0 08       	rjmp	8000a010 <_handle_NMI>
	...

8000a014 <_handle_Instruction_Address>:
8000a014:	c0 08       	rjmp	8000a014 <_handle_Instruction_Address>
	...

8000a018 <_handle_ITLB_Protection>:
8000a018:	c0 08       	rjmp	8000a018 <_handle_ITLB_Protection>
	...

8000a01c <_handle_Breakpoint>:
8000a01c:	c0 08       	rjmp	8000a01c <_handle_Breakpoint>
	...

8000a020 <_handle_Illegal_Opcode>:
8000a020:	c0 08       	rjmp	8000a020 <_handle_Illegal_Opcode>
	...

8000a024 <_handle_Unimplemented_Instruction>:
8000a024:	c0 08       	rjmp	8000a024 <_handle_Unimplemented_Instruction>
	...

8000a028 <_handle_Privilege_Violation>:
8000a028:	c0 08       	rjmp	8000a028 <_handle_Privilege_Violation>
	...

8000a02c <_handle_Floating_Point>:
8000a02c:	c0 08       	rjmp	8000a02c <_handle_Floating_Point>
	...

8000a030 <_handle_Coprocessor_Absent>:
8000a030:	c0 08       	rjmp	8000a030 <_handle_Coprocessor_Absent>
	...

8000a034 <_handle_Data_Address_Read>:
8000a034:	c0 08       	rjmp	8000a034 <_handle_Data_Address_Read>
	...

8000a038 <_handle_Data_Address_Write>:
8000a038:	c0 08       	rjmp	8000a038 <_handle_Data_Address_Write>
	...

8000a03c <_handle_DTLB_Protection_Read>:
8000a03c:	c0 08       	rjmp	8000a03c <_handle_DTLB_Protection_Read>
	...

8000a040 <_handle_DTLB_Protection_Write>:
8000a040:	c0 08       	rjmp	8000a040 <_handle_DTLB_Protection_Write>
	...

8000a044 <_handle_DTLB_Modified>:
8000a044:	c0 08       	rjmp	8000a044 <_handle_DTLB_Modified>
	...

8000a050 <_handle_ITLB_Miss>:
8000a050:	c0 08       	rjmp	8000a050 <_handle_ITLB_Miss>
	...

8000a060 <_handle_DTLB_Miss_Read>:
8000a060:	c0 08       	rjmp	8000a060 <_handle_DTLB_Miss_Read>
	...

8000a070 <_handle_DTLB_Miss_Write>:
8000a070:	c0 08       	rjmp	8000a070 <_handle_DTLB_Miss_Write>
	...

8000a100 <_handle_Supervisor_Call>:
8000a100:	c0 08       	rjmp	8000a100 <_handle_Supervisor_Call>
8000a102:	d7 03       	nop

8000a104 <_int0>:
8000a104:	30 0c       	mov	r12,0
8000a106:	fe b0 c1 8d 	rcall	80002420 <_get_interrupt_handler>
8000a10a:	58 0c       	cp.w	r12,0
8000a10c:	f8 0f 17 10 	movne	pc,r12
8000a110:	d6 03       	rete

8000a112 <_int1>:
8000a112:	30 1c       	mov	r12,1
8000a114:	fe b0 c1 86 	rcall	80002420 <_get_interrupt_handler>
8000a118:	58 0c       	cp.w	r12,0
8000a11a:	f8 0f 17 10 	movne	pc,r12
8000a11e:	d6 03       	rete

8000a120 <_int2>:
8000a120:	30 2c       	mov	r12,2
8000a122:	fe b0 c1 7f 	rcall	80002420 <_get_interrupt_handler>
8000a126:	58 0c       	cp.w	r12,0
8000a128:	f8 0f 17 10 	movne	pc,r12
8000a12c:	d6 03       	rete

8000a12e <_int3>:
8000a12e:	30 3c       	mov	r12,3
8000a130:	fe b0 c1 78 	rcall	80002420 <_get_interrupt_handler>
8000a134:	58 0c       	cp.w	r12,0
8000a136:	f8 0f 17 10 	movne	pc,r12
8000a13a:	d6 03       	rete
8000a13c:	d7 03       	nop
8000a13e:	d7 03       	nop
8000a140:	d7 03       	nop
8000a142:	d7 03       	nop
8000a144:	d7 03       	nop
8000a146:	d7 03       	nop
8000a148:	d7 03       	nop
8000a14a:	d7 03       	nop
8000a14c:	d7 03       	nop
8000a14e:	d7 03       	nop
8000a150:	d7 03       	nop
8000a152:	d7 03       	nop
8000a154:	d7 03       	nop
8000a156:	d7 03       	nop
8000a158:	d7 03       	nop
8000a15a:	d7 03       	nop
8000a15c:	d7 03       	nop
8000a15e:	d7 03       	nop
8000a160:	d7 03       	nop
8000a162:	d7 03       	nop
8000a164:	d7 03       	nop
8000a166:	d7 03       	nop
8000a168:	d7 03       	nop
8000a16a:	d7 03       	nop
8000a16c:	d7 03       	nop
8000a16e:	d7 03       	nop
8000a170:	d7 03       	nop
8000a172:	d7 03       	nop
8000a174:	d7 03       	nop
8000a176:	d7 03       	nop
8000a178:	d7 03       	nop
8000a17a:	d7 03       	nop
8000a17c:	d7 03       	nop
8000a17e:	d7 03       	nop
8000a180:	d7 03       	nop
8000a182:	d7 03       	nop
8000a184:	d7 03       	nop
8000a186:	d7 03       	nop
8000a188:	d7 03       	nop
8000a18a:	d7 03       	nop
8000a18c:	d7 03       	nop
8000a18e:	d7 03       	nop
8000a190:	d7 03       	nop
8000a192:	d7 03       	nop
8000a194:	d7 03       	nop
8000a196:	d7 03       	nop
8000a198:	d7 03       	nop
8000a19a:	d7 03       	nop
8000a19c:	d7 03       	nop
8000a19e:	d7 03       	nop
8000a1a0:	d7 03       	nop
8000a1a2:	d7 03       	nop
8000a1a4:	d7 03       	nop
8000a1a6:	d7 03       	nop
8000a1a8:	d7 03       	nop
8000a1aa:	d7 03       	nop
8000a1ac:	d7 03       	nop
8000a1ae:	d7 03       	nop
8000a1b0:	d7 03       	nop
8000a1b2:	d7 03       	nop
8000a1b4:	d7 03       	nop
8000a1b6:	d7 03       	nop
8000a1b8:	d7 03       	nop
8000a1ba:	d7 03       	nop
8000a1bc:	d7 03       	nop
8000a1be:	d7 03       	nop
8000a1c0:	d7 03       	nop
8000a1c2:	d7 03       	nop
8000a1c4:	d7 03       	nop
8000a1c6:	d7 03       	nop
8000a1c8:	d7 03       	nop
8000a1ca:	d7 03       	nop
8000a1cc:	d7 03       	nop
8000a1ce:	d7 03       	nop
8000a1d0:	d7 03       	nop
8000a1d2:	d7 03       	nop
8000a1d4:	d7 03       	nop
8000a1d6:	d7 03       	nop
8000a1d8:	d7 03       	nop
8000a1da:	d7 03       	nop
8000a1dc:	d7 03       	nop
8000a1de:	d7 03       	nop
8000a1e0:	d7 03       	nop
8000a1e2:	d7 03       	nop
8000a1e4:	d7 03       	nop
8000a1e6:	d7 03       	nop
8000a1e8:	d7 03       	nop
8000a1ea:	d7 03       	nop
8000a1ec:	d7 03       	nop
8000a1ee:	d7 03       	nop
8000a1f0:	d7 03       	nop
8000a1f2:	d7 03       	nop
8000a1f4:	d7 03       	nop
8000a1f6:	d7 03       	nop
8000a1f8:	d7 03       	nop
8000a1fa:	d7 03       	nop
8000a1fc:	d7 03       	nop
8000a1fe:	d7 03       	nop
