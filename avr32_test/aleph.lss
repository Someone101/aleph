
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000f0c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003000  80003000  00003400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000330  80003200  80003200  00003600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000700  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000013d4  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000fc90  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001954  00000000  00000000  000150c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000abbf  00000000  00000000  00016a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012a0  00000000  00000000  000215d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f0d  00000000  00000000  00022878  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000394c  00000000  00000000  00025785  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00919bd5  00000000  00000000  000290d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 00003878  00000000  00000000  00942ca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f1 2c 	sub	pc,pc,-3796

Disassembly of section .text:

80002004 <sdramc_init>:
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
80002004:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002008:	ee 78 42 3f 	mov	r8,999999
8000200c:	f8 08 00 09 	add	r9,r12,r8
80002010:	e0 68 de 83 	mov	r8,56963
80002014:	ea 18 43 1b 	orh	r8,0x431b
80002018:	f2 08 06 48 	mulu.d	r8,r9,r8
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
8000201c:	18 96       	mov	r6,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000201e:	f2 07 16 12 	lsr	r7,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002022:	32 7b       	mov	r11,39
80002024:	fe cc ee 24 	sub	r12,pc,-4572
80002028:	cf bc       	rcall	8000221e <gpio_enable_module>
  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();

  // Enable SDRAM mode for CS1.
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
8000202a:	fe 68 10 00 	mov	r8,-126976
8000202e:	f0 f9 01 24 	ld.w	r9,r8[292]
80002032:	a1 b9       	sbr	r9,0x1
80002034:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80002038:	f0 f8 01 24 	ld.w	r8,r8[292]
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000203c:	e0 68 4d d3 	mov	r8,19923
80002040:	ea 18 10 62 	orh	r8,0x1062
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002044:	ee 05 15 03 	lsl	r5,r7,0x3
80002048:	ea 07 00 03 	add	r3,r5,r7
8000204c:	ee 03 00 23 	add	r3,r7,r3<<0x2
80002050:	e6 c3 fc 19 	sub	r3,r3,-999
80002054:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002058:	ee 09 15 04 	lsl	r9,r7,0x4
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000205c:	e6 0b 15 12 	lsl	r11,r3,0x12
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002060:	0e 19       	sub	r9,r7
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002062:	f2 03 15 02 	lsl	r3,r9,0x2
80002066:	e6 c3 fc 19 	sub	r3,r3,-999
8000206a:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000206e:	f2 c9 fc 19 	sub	r9,r9,-999
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002072:	e6 0e 15 06 	lsl	lr,r3,0x6
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002076:	f2 08 06 42 	mulu.d	r2,r9,r8
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000207a:	ee 0c 15 05 	lsl	r12,r7,0x5
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000207e:	e6 09 16 06 	lsr	r9,r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002082:	0e 0c       	add	r12,r7
80002084:	0e 15       	sub	r5,r7
80002086:	ee 0c 00 13 	add	r3,r7,r12<<0x1
8000208a:	a1 75       	lsl	r5,0x1
8000208c:	e6 c3 fc 19 	sub	r3,r3,-999
80002090:	ea c5 fc 19 	sub	r5,r5,-999
80002094:	e6 08 06 42 	mulu.d	r2,r3,r8
80002098:	ea 08 06 44 	mulu.d	r4,r5,r8
8000209c:	e6 08 16 06 	lsr	r8,r3,0x6
800020a0:	a3 65       	lsl	r5,0x2
800020a2:	bd 68       	lsl	r8,0x1c
800020a4:	e2 15 0f 00 	andl	r5,0xf00,COH
800020a8:	e8 18 00 d9 	orl	r8,0xd9
800020ac:	0a 48       	or	r8,r5
800020ae:	e2 1e f0 00 	andl	lr,0xf000,COH
800020b2:	f1 ee 10 0e 	or	lr,r8,lr
800020b6:	f2 08 15 10 	lsl	r8,r9,0x10
800020ba:	e6 18 00 0f 	andh	r8,0xf,COH
800020be:	10 4e       	or	lr,r8
800020c0:	f2 08 15 14 	lsl	r8,r9,0x14
800020c4:	e6 18 00 f0 	andh	r8,0xf0,COH
800020c8:	fd e8 10 08 	or	r8,lr,r8
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020cc:	fe 6a 20 00 	mov	r10,-122880
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
800020d0:	e6 1b 0f 00 	andh	r11,0xf00,COH
800020d4:	f1 eb 10 0b 	or	r11,r8,r11
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020d8:	95 2b       	st.w	r10[0x8],r11
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800020da:	74 28       	ld.w	r8,r10[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800020dc:	30 18       	mov	r8,1
800020de:	95 08       	st.w	r10[0x0],r8
  AVR32_SDRAMC.mr;
800020e0:	74 08       	ld.w	r8,r10[0x0]
  sdram[0];
800020e2:	fc 18 d0 00 	movh	r8,0xd000
800020e6:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
800020e8:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800020ec:	ee 0a 10 64 	mul	r10,r7,100
800020f0:	f0 0a 00 0a 	add	r10,r8,r10

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800020f4:	14 38       	cp.w	r8,r10
800020f6:	e0 88 00 06 	brls	80002102 <sdramc_init+0xfe>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800020fa:	e1 b8 00 42 	mfsr	r8,0x108
800020fe:	10 3a       	cp.w	r10,r8
80002100:	cf d3       	brcs	800020fa <sdramc_init+0xf6>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002102:	e1 b8 00 42 	mfsr	r8,0x108
80002106:	10 3a       	cp.w	r10,r8
80002108:	fe 9b ff fd 	brhi	80002102 <sdramc_init+0xfe>

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
8000210c:	fe 68 20 00 	mov	r8,-122880
80002110:	30 2a       	mov	r10,2
80002112:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002114:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002116:	fc 18 d0 00 	movh	r8,0xd000
8000211a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000211c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002120:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002124:	12 38       	cp.w	r8,r9
80002126:	e0 88 00 06 	brls	80002132 <sdramc_init+0x12e>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
8000212a:	e1 b8 00 42 	mfsr	r8,0x108
8000212e:	10 39       	cp.w	r9,r8
80002130:	cf d3       	brcs	8000212a <sdramc_init+0x126>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002132:	e1 b8 00 42 	mfsr	r8,0x108
80002136:	10 39       	cp.w	r9,r8
80002138:	fe 9b ff fd 	brhi	80002132 <sdramc_init+0x12e>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
8000213c:	fe 68 20 00 	mov	r8,-122880
80002140:	30 4a       	mov	r10,4
80002142:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002144:	70 08       	ld.w	r8,r8[0x0]
80002146:	f8 09 15 01 	lsl	r9,r12,0x1
8000214a:	e0 68 4d d3 	mov	r8,19923
8000214e:	ea 18 10 62 	orh	r8,0x1062
80002152:	f2 c9 fc 19 	sub	r9,r9,-999
80002156:	30 0a       	mov	r10,0
80002158:	f2 08 06 48 	mulu.d	r8,r9,r8
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
8000215c:	fc 1b d0 00 	movh	r11,0xd000
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
80002160:	f2 0c 16 06 	lsr	r12,r9,0x6
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002164:	96 08       	ld.sh	r8,r11[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002166:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000216a:	f0 0c 00 09 	add	r9,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000216e:	12 38       	cp.w	r8,r9
80002170:	e0 88 00 06 	brls	8000217c <sdramc_init+0x178>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002174:	e1 b8 00 42 	mfsr	r8,0x108
80002178:	10 39       	cp.w	r9,r8
8000217a:	cf d3       	brcs	80002174 <sdramc_init+0x170>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
8000217c:	e1 b8 00 42 	mfsr	r8,0x108
80002180:	10 39       	cp.w	r9,r8
80002182:	fe 9b ff fd 	brhi	8000217c <sdramc_init+0x178>
80002186:	2f fa       	sub	r10,-1
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80002188:	58 2a       	cp.w	r10,2
8000218a:	ce d1       	brne	80002164 <sdramc_init+0x160>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
8000218c:	fe 68 20 00 	mov	r8,-122880
80002190:	30 39       	mov	r9,3
80002192:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
80002194:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002196:	fc 18 d0 00 	movh	r8,0xd000
8000219a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000219c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800021a0:	e0 69 4d d3 	mov	r9,19923
800021a4:	ea 19 10 62 	orh	r9,0x1062
800021a8:	ee 0b 15 01 	lsl	r11,r7,0x1
800021ac:	f6 cb fc 19 	sub	r11,r11,-999
800021b0:	f6 09 06 4a 	mulu.d	r10,r11,r9
800021b4:	f6 09 16 06 	lsr	r9,r11,0x6
800021b8:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800021bc:	12 38       	cp.w	r8,r9
800021be:	e0 88 00 06 	brls	800021ca <sdramc_init+0x1c6>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800021c2:	e1 b8 00 42 	mfsr	r8,0x108
800021c6:	10 39       	cp.w	r9,r8
800021c8:	cf d3       	brcs	800021c2 <sdramc_init+0x1be>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
800021ca:	e1 b8 00 42 	mfsr	r8,0x108
800021ce:	10 39       	cp.w	r9,r8
800021d0:	fe 9b ff fd 	brhi	800021ca <sdramc_init+0x1c6>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800021d4:	30 09       	mov	r9,0
800021d6:	fe 68 20 00 	mov	r8,-122880
800021da:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
800021dc:	70 09       	ld.w	r9,r8[0x0]
  sdram[0];
800021de:	fc 19 d0 00 	movh	r9,0xd000
800021e2:	92 09       	ld.sh	r9,r9[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800021e4:	e0 69 1e 84 	mov	r9,7812
800021e8:	e0 6b de 83 	mov	r11,56963
800021ec:	ea 1b 43 1b 	orh	r11,0x431b
800021f0:	ec 0b 06 4a 	mulu.d	r10,r6,r11
800021f4:	b3 8b       	lsr	r11,0x12
800021f6:	b3 3b       	mul	r11,r9
800021f8:	e0 69 4d d3 	mov	r9,19923
800021fc:	ea 19 10 62 	orh	r9,0x1062
80002200:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002204:	f6 09 16 06 	lsr	r9,r11,0x6
80002208:	91 19       	st.w	r8[0x4],r9
  AVR32_SDRAMC.tr;
8000220a:	70 18       	ld.w	r8,r8[0x4]
}
8000220c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80002210 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002210:	fe 68 14 00 	mov	r8,-125952
80002214:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002216:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000221a:	91 09       	st.w	r8[0x0],r9
}
8000221c:	5e fc       	retal	r12

8000221e <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000221e:	eb cd 40 f8 	pushm	r3-r7,lr
80002222:	18 98       	mov	r8,r12
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002224:	58 0b       	cp.w	r11,0
80002226:	c3 c0       	breq	8000229e <gpio_enable_module+0x80>
80002228:	30 0e       	mov	lr,0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
8000222a:	30 16       	mov	r6,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000222c:	1c 9c       	mov	r12,lr
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000222e:	30 15       	mov	r5,1
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002230:	30 24       	mov	r4,2
80002232:	30 33       	mov	r3,3
80002234:	c0 d8       	rjmp	8000224e <gpio_enable_module+0x30>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002236:	ea 07 09 4a 	lsl	r10,r5,r7
8000223a:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000223c:	93 aa       	st.w	r9[0x28],r10
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000223e:	93 2a       	st.w	r9[0x8],r10
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002240:	2f fe       	sub	lr,-1
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002242:	30 09       	mov	r9,0
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002244:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002246:	1c 3b       	cp.w	r11,lr
80002248:	e0 88 00 1a 	brls	8000227c <gpio_enable_module+0x5e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000224c:	2f e8       	sub	r8,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000224e:	11 87       	ld.ub	r7,r8[0x0]
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002250:	11 9a       	ld.ub	r10,r8[0x1]
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002252:	ee 09 16 05 	lsr	r9,r7,0x5
80002256:	a9 69       	lsl	r9,0x8
80002258:	e0 29 f0 00 	sub	r9,61440

  // Enable the correct function.
  switch (function)
8000225c:	ec 0a 18 00 	cp.b	r10,r6
80002260:	c1 00       	breq	80002280 <gpio_enable_module+0x62>
80002262:	ce a3       	brcs	80002236 <gpio_enable_module+0x18>
80002264:	e8 0a 18 00 	cp.b	r10,r4
80002268:	c1 60       	breq	80002294 <gpio_enable_module+0x76>
8000226a:	e6 0a 18 00 	cp.b	r10,r3
8000226e:	c0 e0       	breq	8000228a <gpio_enable_module+0x6c>
80002270:	30 19       	mov	r9,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002272:	2f fe       	sub	lr,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002274:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002276:	1c 3b       	cp.w	r11,lr
80002278:	fe 9b ff ea 	brhi	8000224c <gpio_enable_module+0x2e>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
8000227c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002280:	ea 07 09 4a 	lsl	r10,r5,r7
80002284:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002286:	93 aa       	st.w	r9[0x28],r10
80002288:	cd bb       	rjmp	8000223e <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000228a:	ea 07 09 4a 	lsl	r10,r5,r7
8000228e:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002290:	93 9a       	st.w	r9[0x24],r10
80002292:	cd 6b       	rjmp	8000223e <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002294:	ea 07 09 4a 	lsl	r10,r5,r7
80002298:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000229a:	93 9a       	st.w	r9[0x24],r10
8000229c:	cd 1b       	rjmp	8000223e <gpio_enable_module+0x20>
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000229e:	16 9c       	mov	r12,r11
800022a0:	ce eb       	rjmp	8000227c <gpio_enable_module+0x5e>

800022a2 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800022a2:	c0 08       	rjmp	800022a2 <_unhandled_interrupt>

800022a4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800022a4:	eb cd 40 c0 	pushm	r6-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800022a8:	fe c8 f2 a8 	sub	r8,pc,-3416
800022ac:	e3 b8 00 01 	mtsr	0x4,r8
800022b0:	fe c6 f1 ac 	sub	r6,pc,-3668
800022b4:	fe ce f0 64 	sub	lr,pc,-3996

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800022b8:	10 16       	sub	r6,r8
800022ba:	30 0c       	mov	r12,0
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
800022bc:	fe cb 00 1a 	sub	r11,pc,26

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800022c0:	fe 77 08 00 	mov	r7,-63488
800022c4:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800022c6:	58 0a       	cp.w	r10,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800022c8:	c0 70       	breq	800022d6 <INTC_init_interrupts+0x32>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800022ca:	7c 19       	ld.w	r9,lr[0x4]
800022cc:	30 08       	mov	r8,0

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800022ce:	12 ab       	st.w	r9++,r11
800022d0:	2f f8       	sub	r8,-1
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800022d2:	14 38       	cp.w	r8,r10
800022d4:	cf d3       	brcs	800022ce <INTC_init_interrupts+0x2a>
800022d6:	ee 0c 09 26 	st.w	r7[r12<<0x2],r6
800022da:	2f 8e       	sub	lr,-8
800022dc:	2f fc       	sub	r12,-1
800022de:	59 4c       	cp.w	r12,20
800022e0:	cf 21       	brne	800022c4 <INTC_init_interrupts+0x20>
800022e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e6:	d7 03       	nop

800022e8 <_get_interrupt_handler>:
800022e8:	e0 68 00 83 	mov	r8,131
800022ec:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800022f0:	fe 78 08 00 	mov	r8,-63488
800022f4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800022f8:	f2 ca ff c0 	sub	r10,r9,-64
800022fc:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002300:	58 0c       	cp.w	r12,0
80002302:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002304:	fe c8 f0 b4 	sub	r8,pc,-3916
80002308:	f8 0c 12 00 	clz	r12,r12
8000230c:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002310:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002314:	72 18       	ld.w	r8,r9[0x4]
80002316:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000231a:	5e fc       	retal	r12

8000231c <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
8000231c:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002320:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002322:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002324:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
80002326:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
8000232a:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
8000232e:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002332:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002336:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
8000233a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000233e <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
8000233e:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002342:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002344:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002348:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
8000234c:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
80002350:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
80002354:	5e fc       	retal	r12

80002356 <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80002356:	2f 8b       	sub	r11,-8
80002358:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
8000235c:	a1 a8       	sbr	r8,0x0
8000235e:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
80002362:	5e fc       	retal	r12

80002364 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80002364:	79 58       	ld.w	r8,r12[0x54]
80002366:	ed b8 00 00 	bld	r8,0x0
8000236a:	cf d1       	brne	80002364 <pm_wait_for_pll0_locked>
}
8000236c:	5e fc       	retal	r12

8000236e <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
8000236e:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002370:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002374:	99 08       	st.w	r12[0x0],r8
}
80002376:	5e fc       	retal	r12

80002378 <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002378:	ec 5b bb 9f 	cp.w	r11,899999
8000237c:	e0 8b 00 18 	brhi	800023ac <pm_switch_to_osc0+0x34>
80002380:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002382:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002384:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002388:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000238a:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000238c:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002390:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002392:	78 08       	ld.w	r8,r12[0x0]
80002394:	a3 a8       	sbr	r8,0x2
80002396:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002398:	79 58       	ld.w	r8,r12[0x54]
8000239a:	ed b8 00 07 	bld	r8,0x7
8000239e:	cf d1       	brne	80002398 <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800023a0:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800023a2:	30 19       	mov	r9,1
800023a4:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800023a8:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
800023aa:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800023ac:	e0 68 c6 bf 	mov	r8,50879
800023b0:	ea 18 00 2d 	orh	r8,0x2d
800023b4:	10 3b       	cp.w	r11,r8
800023b6:	e0 88 00 0c 	brls	800023ce <pm_switch_to_osc0+0x56>
800023ba:	e0 68 12 00 	mov	r8,4608
800023be:	ea 18 00 7a 	orh	r8,0x7a
800023c2:	10 3b       	cp.w	r11,r8
800023c4:	f9 bb 03 06 	movlo	r11,6
800023c8:	f9 bb 02 07 	movhs	r11,7
800023cc:	cd bb       	rjmp	80002382 <pm_switch_to_osc0+0xa>
800023ce:	30 5b       	mov	r11,5
800023d0:	cd 9b       	rjmp	80002382 <pm_switch_to_osc0+0xa>

800023d2 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800023d2:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800023d4:	f6 08 15 04 	lsl	r8,r11,0x4
800023d8:	14 38       	cp.w	r8,r10
800023da:	e0 8b 00 26 	brhi	80002426 <usart_set_async_baudrate+0x54>
800023de:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800023e0:	f0 09 16 01 	lsr	r9,r8,0x1
800023e4:	f2 0a 00 39 	add	r9,r9,r10<<0x3
800023e8:	f2 08 0d 08 	divu	r8,r9,r8
800023ec:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800023ee:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800023f0:	f0 cb 00 01 	sub	r11,r8,1
800023f4:	e0 4b ff fe 	cp.w	r11,65534
800023f8:	e0 8b 00 1b 	brhi	8000242e <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800023fc:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800023fe:	e8 6b 00 00 	mov	r11,524288
80002402:	e4 1a ff f7 	andh	r10,0xfff7
80002406:	e0 1a fe cf 	andl	r10,0xfecf
8000240a:	59 0e       	cp.w	lr,16
8000240c:	f6 0e 17 10 	movne	lr,r11
80002410:	f9 be 00 00 	moveq	lr,0
80002414:	fd ea 10 0a 	or	r10,lr,r10
80002418:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8000241a:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
8000241e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002422:	99 88       	st.w	r12[0x20],r8
80002424:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002426:	f6 08 15 03 	lsl	r8,r11,0x3
8000242a:	30 8e       	mov	lr,8
8000242c:	cd ab       	rjmp	800023e0 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000242e:	da 0a       	popm	pc,r12=1

80002430 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002430:	17 8a       	ld.ub	r10,r11[0x0]
80002432:	58 0a       	cp.w	r10,0
80002434:	5e 0c       	reteq	r12
80002436:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002438:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
8000243a:	ed b8 00 01 	bld	r8,0x1
8000243e:	c0 91       	brne	80002450 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002440:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002444:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002446:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002448:	17 8a       	ld.ub	r10,r11[0x0]
8000244a:	58 0a       	cp.w	r10,0
8000244c:	cf 51       	brne	80002436 <usart_write_line+0x6>
8000244e:	5e fc       	retal	r12
80002450:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002452:	e0 49 27 10 	cp.w	r9,10000
80002456:	cf 11       	brne	80002438 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002458:	2f fb       	sub	r11,-1
8000245a:	cf 7b       	rjmp	80002448 <usart_write_line+0x18>

8000245c <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000245c:	eb cd 40 e0 	pushm	r5-r7,lr
80002460:	18 97       	mov	r7,r12
80002462:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002464:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002468:	ed b8 00 10 	bld	r8,0x10
8000246c:	c2 e1       	brne	800024c8 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
8000246e:	3f f8       	mov	r8,-1
80002470:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002472:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002474:	30 08       	mov	r8,0
80002476:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
80002478:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
8000247a:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000247c:	ea 68 61 0c 	mov	r8,680204
80002480:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002482:	58 06       	cp.w	r6,0
80002484:	c2 00       	breq	800024c4 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
80002486:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002488:	30 49       	mov	r9,4
8000248a:	f2 08 18 00 	cp.b	r8,r9
8000248e:	e0 88 00 1b 	brls	800024c4 <usart_init_rs232+0x68>
80002492:	30 95       	mov	r5,9
80002494:	ea 08 18 00 	cp.b	r8,r5
80002498:	e0 8b 00 16 	brhi	800024c4 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8000249c:	0d d9       	ld.ub	r9,r6[0x5]
8000249e:	30 78       	mov	r8,7
800024a0:	f0 09 18 00 	cp.b	r9,r8
800024a4:	e0 8b 00 10 	brhi	800024c4 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
800024a8:	8c 39       	ld.sh	r9,r6[0x6]
800024aa:	e0 68 01 01 	mov	r8,257
800024ae:	f0 09 19 00 	cp.h	r9,r8
800024b2:	e0 8b 00 09 	brhi	800024c4 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
800024b6:	ed 39 00 08 	ld.ub	r9,r6[8]
800024ba:	30 38       	mov	r8,3
800024bc:	f0 09 18 00 	cp.b	r9,r8
800024c0:	e0 88 00 0a 	brls	800024d4 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800024c4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800024c8:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800024ca:	3f f8       	mov	r8,-1
800024cc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800024ce:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800024d0:	d5 03       	csrf	0x10
800024d2:	cd 1b       	rjmp	80002474 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800024d4:	6c 0b       	ld.w	r11,r6[0x0]
800024d6:	0e 9c       	mov	r12,r7
800024d8:	c7 df       	rcall	800023d2 <usart_set_async_baudrate>
800024da:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800024dc:	cf 40       	breq	800024c4 <usart_init_rs232+0x68>
800024de:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800024e0:	ea 08 18 00 	cp.b	r8,r5
800024e4:	c2 a0       	breq	80002538 <usart_init_rs232+0xdc>
800024e6:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800024e8:	20 58       	sub	r8,5
800024ea:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800024ee:	8f 18       	st.w	r7[0x4],r8
800024f0:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800024f2:	ed 3a 00 08 	ld.ub	r10,r6[8]
800024f6:	0d d8       	ld.ub	r8,r6[0x5]
800024f8:	a9 78       	lsl	r8,0x9
800024fa:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800024fe:	12 48       	or	r8,r9
80002500:	8f 18       	st.w	r7[0x4],r8
80002502:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002504:	8c 38       	ld.sh	r8,r6[0x6]
80002506:	f2 08 19 00 	cp.h	r8,r9
8000250a:	e0 88 00 11 	brls	8000252c <usart_init_rs232+0xd0>
8000250e:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002510:	ad b9       	sbr	r9,0xd
80002512:	8f 19       	st.w	r7[0x4],r9
80002514:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002516:	20 28       	sub	r8,2
80002518:	8f a8       	st.w	r7[0x28],r8
8000251a:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000251c:	e0 18 ff f0 	andl	r8,0xfff0
80002520:	8f 18       	st.w	r7[0x4],r8
80002522:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002524:	35 08       	mov	r8,80
80002526:	8f 08       	st.w	r7[0x0],r8
80002528:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000252c:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000252e:	5c 78       	castu.h	r8
80002530:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002534:	8f 18       	st.w	r7[0x4],r8
80002536:	cf 2b       	rjmp	8000251a <usart_init_rs232+0xbe>
80002538:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000253a:	b1 b8       	sbr	r8,0x11
8000253c:	8f 18       	st.w	r7[0x4],r8
8000253e:	cd 9b       	rjmp	800024f0 <usart_init_rs232+0x94>

80002540 <print_dbg_hex>:
  print_short_hex(DBG_USART, n);
}


void print_dbg_hex(unsigned long n)
{
80002540:	d4 01       	pushm	lr
80002542:	20 3d       	sub	sp,12

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80002544:	fe c8 f2 54 	sub	r8,pc,-3500
80002548:	f8 09 16 1c 	lsr	r9,r12,0x1c
8000254c:	f0 09 07 09 	ld.ub	r9,r8[r9]
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80002550:	ba 89       	st.b	sp[0x0],r9
80002552:	30 09       	mov	r9,0
80002554:	fb 69 00 08 	st.b	sp[8],r9
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80002558:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
8000255c:	f0 09 07 09 	ld.ub	r9,r8[r9]
80002560:	ba f9       	st.b	sp[0x7],r9
80002562:	f3 dc c0 84 	bfextu	r9,r12,0x4,0x4
80002566:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000256a:	ba e9       	st.b	sp[0x6],r9
8000256c:	f3 dc c1 04 	bfextu	r9,r12,0x8,0x4
80002570:	f0 09 07 09 	ld.ub	r9,r8[r9]
80002574:	ba d9       	st.b	sp[0x5],r9
80002576:	f3 dc c1 84 	bfextu	r9,r12,0xc,0x4
8000257a:	f0 09 07 09 	ld.ub	r9,r8[r9]
8000257e:	ba c9       	st.b	sp[0x4],r9
80002580:	f3 dc c2 04 	bfextu	r9,r12,0x10,0x4
80002584:	f0 09 07 09 	ld.ub	r9,r8[r9]
80002588:	ba b9       	st.b	sp[0x3],r9
8000258a:	f3 dc c2 84 	bfextu	r9,r12,0x14,0x4
8000258e:	f9 dc c3 04 	bfextu	r12,r12,0x18,0x4
80002592:	f0 09 07 09 	ld.ub	r9,r8[r9]
80002596:	f0 0c 07 08 	ld.ub	r8,r8[r12]
8000259a:	ba a9       	st.b	sp[0x2],r9


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000259c:	ba 98       	st.b	sp[0x1],r8
8000259e:	1a 9b       	mov	r11,sp
800025a0:	fe 7c 18 00 	mov	r12,-59392
800025a4:	c4 6f       	rcall	80002430 <usart_write_line>

void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
}
800025a6:	2f dd       	sub	sp,-12
800025a8:	d8 02       	popm	pc
800025aa:	d7 03       	nop

800025ac <print_dbg_ulong>:
800025ac:	eb cd 40 c0 	pushm	r6-r7,lr
800025b0:	20 3d       	sub	sp,12
800025b2:	30 08       	mov	r8,0
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
800025b4:	30 a9       	mov	r9,10
800025b6:	fb 68 00 0a 	st.b	sp[10],r8
800025ba:	1a 9b       	mov	r11,sp
  do
  {
    tmp[--i] = '0' + n % 10;
800025bc:	e0 6e cc cd 	mov	lr,52429
800025c0:	ea 1e cc cc 	orh	lr,0xcccc
800025c4:	f8 0e 06 46 	mulu.d	r6,r12,lr
800025c8:	20 19       	sub	r9,1
800025ca:	0e 98       	mov	r8,r7
800025cc:	a3 98       	lsr	r8,0x3
800025ce:	f0 08 00 2a 	add	r10,r8,r8<<0x2
800025d2:	f8 0a 01 1c 	sub	r12,r12,r10<<0x1
800025d6:	2d 0c       	sub	r12,-48
800025d8:	f6 09 0b 0c 	st.b	r11[r9],r12
    n /= 10;
800025dc:	10 9c       	mov	r12,r8
  } while (n);
800025de:	58 08       	cp.w	r8,0
800025e0:	cf 21       	brne	800025c4 <print_dbg_ulong+0x18>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800025e2:	12 0b       	add	r11,r9
800025e4:	fe 7c 18 00 	mov	r12,-59392
800025e8:	c2 4f       	rcall	80002430 <usart_write_line>
800025ea:	2f dd       	sub	sp,-12

void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
}
800025ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800025f0 <print_dbg>:
800025f0:	d4 01       	pushm	lr
800025f2:	18 9b       	mov	r11,r12
800025f4:	fe 7c 18 00 	mov	r12,-59392


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800025f8:	c1 cf       	rcall	80002430 <usart_write_line>
800025fa:	d8 02       	popm	pc

800025fc <init_clocks>:
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
}


// initialize clocks
void init_clocks(void) {
800025fc:	d4 01       	pushm	lr
  /// from 251e...
  // Switch to OSC0 to speed up  booting
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pm_switch_to_osc0( &AVR32_PM, FOSC0, OSC0_STARTUP );
800025fe:	30 3a       	mov	r10,3
80002600:	e0 6b 1b 00 	mov	r11,6912
80002604:	ea 1b 00 b7 	orh	r11,0xb7
80002608:	fe 7c 0c 00 	mov	r12,-62464
8000260c:	cb 6e       	rcall	80002378 <pm_switch_to_osc0>
8000260e:	31 0e       	mov	lr,16

  // Set PLL0 (fed from OSC0 = 12 MHz) to 132 MHz
  pm_pll_setup( &AVR32_PM,
80002610:	30 08       	mov	r8,0
80002612:	1a de       	st.w	--sp,lr
80002614:	10 9b       	mov	r11,r8
80002616:	30 89       	mov	r9,8
80002618:	30 aa       	mov	r10,10
8000261a:	fe 7c 0c 00 	mov	r12,-62464
8000261e:	c7 fe       	rcall	8000231c <pm_pll_setup>
80002620:	30 08       	mov	r8,0
80002622:	30 19       	mov	r9,1
		16 ); // lockcount.


  // Set PLL operating range and divider (fpll = fvco/2)
  // -> PLL0 output = 66 MHz
  pm_pll_set_option( &AVR32_PM,
80002624:	10 9b       	mov	r11,r8
80002626:	12 9a       	mov	r10,r9
80002628:	fe 7c 0c 00 	mov	r12,-62464
8000262c:	c8 9e       	rcall	8000233e <pm_pll_set_option>
8000262e:	30 0b       	mov	r11,0
80002630:	fe 7c 0c 00 	mov	r12,-62464
		     1,  // pll_freq.
		     1,  // pll_div2.
		     0 ); // pll_wbwdisable.

  // start PLL0 and wait for the lock
  pm_pll_enable( &AVR32_PM, 0 );
80002634:	c9 1e       	rcall	80002356 <pm_pll_enable>
80002636:	fe 7c 0c 00 	mov	r12,-62464
8000263a:	c9 5e       	rcall	80002364 <pm_wait_for_pll0_locked>
8000263c:	30 1c       	mov	r12,1
  pm_wait_for_pll0_locked( &AVR32_PM );
8000263e:	fe b0 fd e9 	rcall	80002210 <flashc_set_wait_state>
80002642:	30 2b       	mov	r11,2
80002644:	fe 7c 0c 00 	mov	r12,-62464

  // By default, all peripheral clocks to run at master clock rate

  // Set one waitstate for the flash.  Necessary for > 33MHz CPU freq.
  flashc_set_wait_state( 1 );
80002648:	c9 3e       	rcall	8000236e <pm_switch_to_clock>
8000264a:	2f fd       	sub	sp,-4

  // Switch to PLL0 as the master clock
  pm_switch_to_clock( &AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0) ;
8000264c:	d8 02       	popm	pc
8000264e:	d7 03       	nop

80002650 <init_dbg_usart>:
80002650:	d4 01       	pushm	lr
80002652:	30 2b       	mov	r11,2
80002654:	fe cc f3 48 	sub	r12,pc,-3256
#endif

  // intitialize millisecond delay engine
  delay_init(sysclk_get_cpu_hz());
  */
}
80002658:	fe b0 fd e3 	rcall	8000221e <gpio_enable_module>
8000265c:	e0 6a e2 90 	mov	r10,58000
80002660:	ea 1a 00 7d 	orh	r10,0x7d
80002664:	fe cb f3 64 	sub	r11,pc,-3228
80002668:	fe 7c 18 00 	mov	r12,-59392
8000266c:	cf 8e       	rcall	8000245c <usart_init_rs232>
8000266e:	d8 02       	popm	pc

80002670 <main>:
  } // if event
}


////main function
int main (void) {
80002670:	d4 21       	pushm	r4-r7,lr
80002672:	20 2d       	sub	sp,8
  volatile u64 delay;
  
  // switch to osc0 for main clock
  //  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP); 
  // initialize clocks:
  init_clocks();
80002674:	cc 4f       	rcall	800025fc <init_clocks>
80002676:	c1 7e       	rcall	800022a4 <INTC_init_interrupts>
  
  // initialize Interrupt Controller
  INTC_init_interrupts();
80002678:	d3 03       	ssrf	0x10
8000267a:	ce bf       	rcall	80002650 <init_dbg_usart>

  // disable interrupts
  Disable_global_interrupt();
8000267c:	e0 6c e2 90 	mov	r12,58000

  // initialize RS232 debug uart
  init_dbg_usart();
80002680:	ea 1c 00 7d 	orh	r12,0x7d
  
  // intialize encoders
  //  init_encoders();

  // initialize sdram
  sdramc_init(FMCK_HZ);
80002684:	fe b0 fc c0 	rcall	80002004 <sdramc_init>
80002688:	d5 03       	csrf	0x10
8000268a:	fe cc f3 7a 	sub	r12,pc,-3206
  //sdramc_init(FOSC0);
  //memory manager
  //init_mem();
  
  // Enable all interrupts.
  Enable_global_interrupt();
8000268e:	cb 1f       	rcall	800025f0 <print_dbg>
// display hmatrix SFR contents
static void show_hmatrix_sfr(void) {
  u32* reg;

  reg = AVR32_HMATRIX_SFR;
  print_dbg("\r\n HMATRIX_SFR:   ");
80002690:	fe cc f3 6c 	sub	r12,pc,-3220
80002694:	ca ef       	rcall	800025f0 <print_dbg>
80002696:	30 0c       	mov	r12,0
  print_dbg("address:");
80002698:	c5 4f       	rcall	80002540 <print_dbg_hex>
8000269a:	fe cc f3 6a 	sub	r12,pc,-3222
8000269e:	ca 9f       	rcall	800025f0 <print_dbg>
  print_dbg_hex(reg);
800026a0:	30 08       	mov	r8,0
800026a2:	70 0c       	ld.w	r12,r8[0x0]
800026a4:	c4 ef       	rcall	80002540 <print_dbg_hex>
  print_dbg(" ; value:");
800026a6:	fe cc f3 6a 	sub	r12,pc,-3222
800026aa:	ca 3f       	rcall	800025f0 <print_dbg>
800026ac:	fe cc f3 88 	sub	r12,pc,-3192
  print_dbg_hex(*reg);
800026b0:	ca 0f       	rcall	800025f0 <print_dbg>
800026b2:	e0 6c 01 10 	mov	r12,272

  reg = AVR32_HMATRIX_SFR0;
  print_dbg("\r\n HMATRIX_SFR0:  ");
800026b6:	c4 5f       	rcall	80002540 <print_dbg_hex>
800026b8:	fe cc f3 88 	sub	r12,pc,-3192
800026bc:	c9 af       	rcall	800025f0 <print_dbg>
  print_dbg("address:");
800026be:	e0 68 01 10 	mov	r8,272
800026c2:	70 0c       	ld.w	r12,r8[0x0]
800026c4:	c3 ef       	rcall	80002540 <print_dbg_hex>
  print_dbg_hex(reg);
800026c6:	fe cc f3 76 	sub	r12,pc,-3210
800026ca:	c9 3f       	rcall	800025f0 <print_dbg>
800026cc:	fe cc f3 a8 	sub	r12,pc,-3160
  print_dbg(" ; value:");
800026d0:	c9 0f       	rcall	800025f0 <print_dbg>
800026d2:	e0 6c 01 14 	mov	r12,276
  print_dbg_hex(*reg);
800026d6:	c3 5f       	rcall	80002540 <print_dbg_hex>
800026d8:	fe cc f3 a8 	sub	r12,pc,-3160
800026dc:	c8 af       	rcall	800025f0 <print_dbg>
800026de:	e0 68 01 14 	mov	r8,276

  reg = AVR32_HMATRIX_SFR1;
  print_dbg("\r\n HMATRIX_SFR1:  ");
800026e2:	70 0c       	ld.w	r12,r8[0x0]
800026e4:	c2 ef       	rcall	80002540 <print_dbg_hex>
800026e6:	fe cc f3 82 	sub	r12,pc,-3198
  print_dbg("address:");
800026ea:	c8 3f       	rcall	800025f0 <print_dbg>
800026ec:	fe cc f3 c8 	sub	r12,pc,-3128
  print_dbg_hex(reg);
800026f0:	c8 0f       	rcall	800025f0 <print_dbg>
800026f2:	e0 6c 01 18 	mov	r12,280
800026f6:	c2 5f       	rcall	80002540 <print_dbg_hex>
  print_dbg(" ; value:");
800026f8:	fe cc f3 c8 	sub	r12,pc,-3128
800026fc:	c7 af       	rcall	800025f0 <print_dbg>
800026fe:	e0 68 01 18 	mov	r8,280
  print_dbg_hex(*reg);
80002702:	70 0c       	ld.w	r12,r8[0x0]
80002704:	c1 ef       	rcall	80002540 <print_dbg_hex>
80002706:	fe cc f3 8e 	sub	r12,pc,-3186

  reg = AVR32_HMATRIX_SFR2;
  print_dbg("\r\n HMATRIX_SFR2:  ");
8000270a:	c7 3f       	rcall	800025f0 <print_dbg>
8000270c:	fe cc f3 e8 	sub	r12,pc,-3096
80002710:	c7 0f       	rcall	800025f0 <print_dbg>
  print_dbg("address:");
80002712:	e0 6c 01 1c 	mov	r12,284
80002716:	c1 5f       	rcall	80002540 <print_dbg_hex>
80002718:	fe cc f3 e8 	sub	r12,pc,-3096
  print_dbg_hex(reg);
8000271c:	c6 af       	rcall	800025f0 <print_dbg>
8000271e:	e0 68 01 1c 	mov	r8,284
  print_dbg(" ; value:");
80002722:	70 0c       	ld.w	r12,r8[0x0]
80002724:	c0 ef       	rcall	80002540 <print_dbg_hex>
80002726:	fe cc f3 9a 	sub	r12,pc,-3174
  print_dbg_hex(*reg);
8000272a:	c6 3f       	rcall	800025f0 <print_dbg>
8000272c:	fe cc f4 08 	sub	r12,pc,-3064
80002730:	c6 0f       	rcall	800025f0 <print_dbg>
80002732:	e0 6c 01 20 	mov	r12,288

  reg = AVR32_HMATRIX_SFR3;
  print_dbg("\r\n HMATRIX_SFR3:  ");
80002736:	c0 5f       	rcall	80002540 <print_dbg_hex>
80002738:	fe cc f4 08 	sub	r12,pc,-3064
  print_dbg("address:");
8000273c:	c5 af       	rcall	800025f0 <print_dbg>
8000273e:	e0 68 01 20 	mov	r8,288
80002742:	70 0c       	ld.w	r12,r8[0x0]
  print_dbg_hex(reg);
80002744:	cf ee       	rcall	80002540 <print_dbg_hex>
80002746:	fe cc f3 a6 	sub	r12,pc,-3162
8000274a:	c5 3f       	rcall	800025f0 <print_dbg>
  print_dbg(" ; value:");
8000274c:	fe cc f4 28 	sub	r12,pc,-3032
80002750:	c5 0f       	rcall	800025f0 <print_dbg>
80002752:	e0 6c 01 24 	mov	r12,292
  print_dbg_hex(*reg);
80002756:	cf 5e       	rcall	80002540 <print_dbg_hex>
80002758:	fe cc f4 28 	sub	r12,pc,-3032
8000275c:	c4 af       	rcall	800025f0 <print_dbg>

  reg = AVR32_HMATRIX_SFR4;
  print_dbg("\r\n HMATRIX_SFR4:  ");
8000275e:	e0 68 01 24 	mov	r8,292
80002762:	70 0c       	ld.w	r12,r8[0x0]
80002764:	ce ee       	rcall	80002540 <print_dbg_hex>
  print_dbg("address:");
80002766:	fe cc f3 b2 	sub	r12,pc,-3150
8000276a:	c4 3f       	rcall	800025f0 <print_dbg>
8000276c:	fe cc f4 48 	sub	r12,pc,-3000
  print_dbg_hex(reg);
80002770:	c4 0f       	rcall	800025f0 <print_dbg>
80002772:	e0 6c 01 28 	mov	r12,296
  print_dbg(" ; value:");
80002776:	ce 5e       	rcall	80002540 <print_dbg_hex>
80002778:	fe cc f4 48 	sub	r12,pc,-3000
8000277c:	c3 af       	rcall	800025f0 <print_dbg>
  print_dbg_hex(*reg);
8000277e:	e0 68 01 28 	mov	r8,296
80002782:	70 0c       	ld.w	r12,r8[0x0]
80002784:	cd ee       	rcall	80002540 <print_dbg_hex>
80002786:	fe cc f3 be 	sub	r12,pc,-3138

  reg = AVR32_HMATRIX_SFR5;
  print_dbg("\r\n HMATRIX_SFR5:  ");
8000278a:	c3 3f       	rcall	800025f0 <print_dbg>
8000278c:	fe cc f4 68 	sub	r12,pc,-2968
  print_dbg("address:");
80002790:	c3 0f       	rcall	800025f0 <print_dbg>
80002792:	e0 6c 01 2c 	mov	r12,300
  print_dbg_hex(reg);
80002796:	cd 5e       	rcall	80002540 <print_dbg_hex>
80002798:	fe cc f4 68 	sub	r12,pc,-2968
8000279c:	c2 af       	rcall	800025f0 <print_dbg>
  print_dbg(" ; value:");
8000279e:	e0 68 01 2c 	mov	r8,300
800027a2:	70 0c       	ld.w	r12,r8[0x0]
  print_dbg_hex(*reg);
800027a4:	cc ee       	rcall	80002540 <print_dbg_hex>
800027a6:	fe cc f3 ca 	sub	r12,pc,-3126
800027aa:	c2 3f       	rcall	800025f0 <print_dbg>
800027ac:	fe cc f4 88 	sub	r12,pc,-2936

  reg = AVR32_HMATRIX_SFR6;
  print_dbg("\r\n HMATRIX_SFR6:  ");
800027b0:	c2 0f       	rcall	800025f0 <print_dbg>
800027b2:	e0 6c 01 30 	mov	r12,304
  print_dbg("address:");
800027b6:	cc 5e       	rcall	80002540 <print_dbg_hex>
800027b8:	fe cc f4 88 	sub	r12,pc,-2936
  print_dbg_hex(reg);
800027bc:	c1 af       	rcall	800025f0 <print_dbg>
800027be:	e0 68 01 30 	mov	r8,304
  print_dbg(" ; value:");
800027c2:	70 0c       	ld.w	r12,r8[0x0]
800027c4:	cb ee       	rcall	80002540 <print_dbg_hex>
800027c6:	fe cc f3 d6 	sub	r12,pc,-3114
  print_dbg_hex(*reg);
800027ca:	c1 3f       	rcall	800025f0 <print_dbg>
800027cc:	fe cc f4 a8 	sub	r12,pc,-2904
800027d0:	c1 0f       	rcall	800025f0 <print_dbg>

  reg = AVR32_HMATRIX_SFR7;
  print_dbg("\r\n HMATRIX_SFR7:  ");
800027d2:	e0 6c 01 34 	mov	r12,308
800027d6:	cb 5e       	rcall	80002540 <print_dbg_hex>
  print_dbg("address:");
800027d8:	fe cc f4 a8 	sub	r12,pc,-2904
800027dc:	c0 af       	rcall	800025f0 <print_dbg>
  print_dbg_hex(reg);
800027de:	e0 68 01 34 	mov	r8,308
800027e2:	70 0c       	ld.w	r12,r8[0x0]
800027e4:	ca ee       	rcall	80002540 <print_dbg_hex>
  print_dbg(" ; value:");
800027e6:	fe cc f3 e2 	sub	r12,pc,-3102
800027ea:	c0 3f       	rcall	800025f0 <print_dbg>
  print_dbg_hex(*reg);
800027ec:	fe cc f4 c8 	sub	r12,pc,-2872
800027f0:	c0 0f       	rcall	800025f0 <print_dbg>
800027f2:	e0 6c 01 38 	mov	r12,312

  reg = AVR32_HMATRIX_SFR8;
  print_dbg("\r\n HMATRIX_SFR8:  ");
800027f6:	ca 5e       	rcall	80002540 <print_dbg_hex>
800027f8:	fe cc f4 c8 	sub	r12,pc,-2872
  print_dbg("address:");
800027fc:	cf ae       	rcall	800025f0 <print_dbg>
800027fe:	e0 68 01 38 	mov	r8,312
  print_dbg_hex(reg);
80002802:	70 0c       	ld.w	r12,r8[0x0]
80002804:	c9 ee       	rcall	80002540 <print_dbg_hex>
80002806:	fe cc f3 ee 	sub	r12,pc,-3090
  print_dbg(" ; value:");
8000280a:	cf 3e       	rcall	800025f0 <print_dbg>
8000280c:	fe cc f4 e8 	sub	r12,pc,-2840
  print_dbg_hex(*reg);
80002810:	cf 0e       	rcall	800025f0 <print_dbg>
80002812:	e0 6c 01 3c 	mov	r12,316
80002816:	c9 5e       	rcall	80002540 <print_dbg_hex>
80002818:	fe cc f4 e8 	sub	r12,pc,-2840

  reg = AVR32_HMATRIX_SFR9;
  print_dbg("\r\n HMATRIX_SFR9:  ");
8000281c:	ce ae       	rcall	800025f0 <print_dbg>
8000281e:	e0 68 01 3c 	mov	r8,316
  print_dbg("address:");
80002822:	70 0c       	ld.w	r12,r8[0x0]
80002824:	c8 ee       	rcall	80002540 <print_dbg_hex>
  print_dbg_hex(reg);
80002826:	fe cc f3 fa 	sub	r12,pc,-3078
8000282a:	ce 3e       	rcall	800025f0 <print_dbg>
8000282c:	fe cc f5 08 	sub	r12,pc,-2808
  print_dbg(" ; value:");
80002830:	ce 0e       	rcall	800025f0 <print_dbg>
80002832:	e0 6c 01 40 	mov	r12,320
  print_dbg_hex(*reg);
80002836:	c8 5e       	rcall	80002540 <print_dbg_hex>
80002838:	fe cc f5 08 	sub	r12,pc,-2808
8000283c:	cd ae       	rcall	800025f0 <print_dbg>

  reg = AVR32_HMATRIX_SFR10;
  print_dbg("\r\n HMATRIX_SFR10: ");
8000283e:	e0 68 01 40 	mov	r8,320
80002842:	70 0c       	ld.w	r12,r8[0x0]
  print_dbg("address:");
80002844:	c7 ee       	rcall	80002540 <print_dbg_hex>
80002846:	fe cc f4 06 	sub	r12,pc,-3066
  print_dbg_hex(reg);
8000284a:	cd 3e       	rcall	800025f0 <print_dbg>
8000284c:	fe cc f5 28 	sub	r12,pc,-2776
80002850:	cd 0e       	rcall	800025f0 <print_dbg>
  print_dbg(" ; value:");
80002852:	e0 6c 01 44 	mov	r12,324
80002856:	c7 5e       	rcall	80002540 <print_dbg_hex>
  print_dbg_hex(*reg);
80002858:	fe cc f5 28 	sub	r12,pc,-2776
8000285c:	cc ae       	rcall	800025f0 <print_dbg>
8000285e:	e0 68 01 44 	mov	r8,324

  reg = AVR32_HMATRIX_SFR11;
  print_dbg("\r\n HMATRIX_SFR11: ");
80002862:	70 0c       	ld.w	r12,r8[0x0]
80002864:	c6 ee       	rcall	80002540 <print_dbg_hex>
80002866:	fe cc f4 12 	sub	r12,pc,-3054
  print_dbg("address:");
8000286a:	cc 3e       	rcall	800025f0 <print_dbg>
8000286c:	fe cc f5 48 	sub	r12,pc,-2744
  print_dbg_hex(reg);
80002870:	cc 0e       	rcall	800025f0 <print_dbg>
80002872:	e0 6c 01 48 	mov	r12,328
  print_dbg(" ; value:");
80002876:	c6 5e       	rcall	80002540 <print_dbg_hex>
80002878:	fe cc f5 48 	sub	r12,pc,-2744
  print_dbg_hex(*reg);
8000287c:	cb ae       	rcall	800025f0 <print_dbg>
8000287e:	e0 68 01 48 	mov	r8,328
80002882:	70 0c       	ld.w	r12,r8[0x0]
80002884:	c5 ee       	rcall	80002540 <print_dbg_hex>

  reg = AVR32_HMATRIX_SFR12;
  print_dbg("\r\n HMATRIX_SFR12: ");
80002886:	fe cc f4 1e 	sub	r12,pc,-3042
8000288a:	cb 3e       	rcall	800025f0 <print_dbg>
  print_dbg("address:");
8000288c:	fe cc f5 68 	sub	r12,pc,-2712
80002890:	cb 0e       	rcall	800025f0 <print_dbg>
  print_dbg_hex(reg);
80002892:	e0 6c 01 4c 	mov	r12,332
80002896:	c5 5e       	rcall	80002540 <print_dbg_hex>
80002898:	fe cc f5 68 	sub	r12,pc,-2712
  print_dbg(" ; value:");
8000289c:	ca ae       	rcall	800025f0 <print_dbg>
8000289e:	e0 68 01 4c 	mov	r8,332
  print_dbg_hex(*reg);
800028a2:	70 0c       	ld.w	r12,r8[0x0]
800028a4:	c4 ee       	rcall	80002540 <print_dbg_hex>
800028a6:	fe cc f4 2a 	sub	r12,pc,-3030

  reg = AVR32_HMATRIX_SFR13;
  print_dbg("\r\n HMATRIX_SFR13: ");
800028aa:	ca 3e       	rcall	800025f0 <print_dbg>
800028ac:	30 1c       	mov	r12,1
800028ae:	c1 fc       	rcall	800028ec <sdram_test>
  print_dbg("address:");
800028b0:	fe cc f4 30 	sub	r12,pc,-3024
800028b4:	e0 66 27 10 	mov	r6,10000
  print_dbg_hex(reg);
800028b8:	c9 ce       	rcall	800025f0 <print_dbg>
800028ba:	3f f4       	mov	r4,-1
800028bc:	30 07       	mov	r7,0
  print_dbg(" ; value:");
800028be:	3f f5       	mov	r5,-1
800028c0:	30 0c       	mov	r12,0
800028c2:	c1 5c       	rcall	800028ec <sdram_test>
  print_dbg_hex(*reg);
800028c4:	fa e7 00 00 	st.d	sp[0],r6
800028c8:	fa e8 00 00 	ld.d	r8,sp[0]
800028cc:	58 08       	cp.w	r8,0

  reg = AVR32_HMATRIX_SFR14;
  print_dbg("\r\n HMATRIX_SFR14: ");
800028ce:	5c 29       	cpc	r9
800028d0:	cf 80       	breq	800028c0 <main+0x250>
800028d2:	fa e8 00 00 	ld.d	r8,sp[0]
  print_dbg("address:");
800028d6:	08 08       	add	r8,r4
800028d8:	f2 05 00 49 	adc	r9,r9,r5
  print_dbg_hex(reg);
800028dc:	fa e9 00 00 	st.d	sp[0],r8
800028e0:	fa e8 00 00 	ld.d	r8,sp[0]
  print_dbg(" ; value:");
800028e4:	58 08       	cp.w	r8,0
800028e6:	5c 29       	cpc	r9
  print_dbg_hex(*reg);
800028e8:	ce c0       	breq	800028c0 <main+0x250>
800028ea:	cf 4b       	rjmp	800028d2 <main+0x262>

800028ec <sdram_test>:
  usart_write_line(DBG_USART, "\r\n");
}

*/

void sdram_test(u8 print) {
800028ec:	d4 21       	pushm	r4-r7,lr
800028ee:	18 96       	mov	r6,r12
  //  const u32 numWords = SDRAM_SIZE >> 2;
  const u32 numWords = 16;
  u32 i;
  u32 read;
  u32 errors = 0;
  if(print) {
800028f0:	58 0c       	cp.w	r12,0
800028f2:	e0 81 00 c6 	brne	80002a7e <sdram_test+0x192>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
800028f6:	fc 19 d0 00 	movh	r9,0xd000
800028fa:	93 0c       	st.w	r9[0x0],r12
800028fc:	30 48       	mov	r8,4
800028fe:	ea 18 d0 00 	orh	r8,0xd000
80002902:	30 1a       	mov	r10,1
80002904:	91 0a       	st.w	r8[0x0],r10
80002906:	30 2b       	mov	r11,2
80002908:	30 8a       	mov	r10,8
8000290a:	ea 1a d0 00 	orh	r10,0xd000
8000290e:	95 0b       	st.w	r10[0x0],r11
80002910:	30 3b       	mov	r11,3
80002912:	30 ca       	mov	r10,12
80002914:	ea 1a d0 00 	orh	r10,0xd000
80002918:	95 0b       	st.w	r10[0x0],r11
8000291a:	30 4b       	mov	r11,4
8000291c:	31 0a       	mov	r10,16
8000291e:	ea 1a d0 00 	orh	r10,0xd000
80002922:	95 0b       	st.w	r10[0x0],r11
80002924:	30 5b       	mov	r11,5
80002926:	31 4a       	mov	r10,20
80002928:	ea 1a d0 00 	orh	r10,0xd000
8000292c:	95 0b       	st.w	r10[0x0],r11
8000292e:	30 6b       	mov	r11,6
80002930:	31 8a       	mov	r10,24
80002932:	ea 1a d0 00 	orh	r10,0xd000
80002936:	95 0b       	st.w	r10[0x0],r11
80002938:	30 7b       	mov	r11,7
8000293a:	31 ca       	mov	r10,28
8000293c:	ea 1a d0 00 	orh	r10,0xd000
80002940:	95 0b       	st.w	r10[0x0],r11
80002942:	30 8b       	mov	r11,8
80002944:	32 0a       	mov	r10,32
80002946:	ea 1a d0 00 	orh	r10,0xd000
8000294a:	95 0b       	st.w	r10[0x0],r11
8000294c:	30 9b       	mov	r11,9
8000294e:	32 4a       	mov	r10,36
80002950:	ea 1a d0 00 	orh	r10,0xd000
80002954:	95 0b       	st.w	r10[0x0],r11
80002956:	30 ab       	mov	r11,10
80002958:	32 8a       	mov	r10,40
8000295a:	ea 1a d0 00 	orh	r10,0xd000
8000295e:	95 0b       	st.w	r10[0x0],r11
80002960:	30 bb       	mov	r11,11
80002962:	32 ca       	mov	r10,44
80002964:	ea 1a d0 00 	orh	r10,0xd000
80002968:	95 0b       	st.w	r10[0x0],r11
8000296a:	30 cb       	mov	r11,12
8000296c:	33 0a       	mov	r10,48
8000296e:	ea 1a d0 00 	orh	r10,0xd000
80002972:	95 0b       	st.w	r10[0x0],r11
80002974:	30 db       	mov	r11,13
80002976:	33 4a       	mov	r10,52
80002978:	ea 1a d0 00 	orh	r10,0xd000
8000297c:	95 0b       	st.w	r10[0x0],r11
8000297e:	30 eb       	mov	r11,14
80002980:	33 8a       	mov	r10,56
80002982:	ea 1a d0 00 	orh	r10,0xd000
80002986:	95 0b       	st.w	r10[0x0],r11
80002988:	30 fb       	mov	r11,15
8000298a:	33 ca       	mov	r10,60
8000298c:	ea 1a d0 00 	orh	r10,0xd000
80002990:	95 0b       	st.w	r10[0x0],r11
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002992:	72 09       	ld.w	r9,r9[0x0]
80002994:	70 08       	ld.w	r8,r8[0x0]
80002996:	58 09       	cp.w	r9,0
80002998:	5f 17       	srne	r7
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
8000299a:	58 18       	cp.w	r8,1
8000299c:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029a0:	30 88       	mov	r8,8
800029a2:	ea 18 d0 00 	orh	r8,0xd000
800029a6:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029a8:	58 28       	cp.w	r8,2
800029aa:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029ae:	30 c8       	mov	r8,12
800029b0:	ea 18 d0 00 	orh	r8,0xd000
800029b4:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029b6:	58 38       	cp.w	r8,3
800029b8:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029bc:	31 08       	mov	r8,16
800029be:	ea 18 d0 00 	orh	r8,0xd000
800029c2:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029c4:	58 48       	cp.w	r8,4
800029c6:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029ca:	31 48       	mov	r8,20
800029cc:	ea 18 d0 00 	orh	r8,0xd000
800029d0:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029d2:	58 58       	cp.w	r8,5
800029d4:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029d8:	31 88       	mov	r8,24
800029da:	ea 18 d0 00 	orh	r8,0xd000
800029de:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029e0:	58 68       	cp.w	r8,6
800029e2:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029e6:	31 c8       	mov	r8,28
800029e8:	ea 18 d0 00 	orh	r8,0xd000
800029ec:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029ee:	58 78       	cp.w	r8,7
800029f0:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
800029f4:	32 08       	mov	r8,32
800029f6:	ea 18 d0 00 	orh	r8,0xd000
800029fa:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
800029fc:	58 88       	cp.w	r8,8
800029fe:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a02:	32 48       	mov	r8,36
80002a04:	ea 18 d0 00 	orh	r8,0xd000
80002a08:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002a0a:	58 98       	cp.w	r8,9
80002a0c:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a10:	32 88       	mov	r8,40
80002a12:	ea 18 d0 00 	orh	r8,0xd000
80002a16:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002a18:	58 a8       	cp.w	r8,10
80002a1a:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a1e:	32 c8       	mov	r8,44
80002a20:	ea 18 d0 00 	orh	r8,0xd000
80002a24:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002a26:	58 b8       	cp.w	r8,11
80002a28:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a2c:	33 08       	mov	r8,48
80002a2e:	ea 18 d0 00 	orh	r8,0xd000
80002a32:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002a34:	58 c8       	cp.w	r8,12
80002a36:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a3a:	33 48       	mov	r8,52
80002a3c:	ea 18 d0 00 	orh	r8,0xd000
80002a40:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002a42:	58 d8       	cp.w	r8,13
80002a44:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a48:	33 88       	mov	r8,56
80002a4a:	ea 18 d0 00 	orh	r8,0xd000
80002a4e:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002a50:	58 e8       	cp.w	r8,14
80002a52:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002a56:	33 c8       	mov	r8,60
80002a58:	ea 18 d0 00 	orh	r8,0xd000
80002a5c:	70 08       	ld.w	r8,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
80002a5e:	58 f8       	cp.w	r8,15
80002a60:	c0 20       	breq	80002a64 <sdram_test+0x178>
      errors++;
80002a62:	2f f7       	sub	r7,-1
    }
  }
  
  if(errors != 0) {
80002a64:	58 07       	cp.w	r7,0
80002a66:	c0 50       	breq	80002a70 <sdram_test+0x184>
    if(print) {
80002a68:	58 06       	cp.w	r6,0
80002a6a:	e0 81 02 28 	brne	80002eba <sdram_test+0x5ce>
80002a6e:	d8 22       	popm	r4-r7,pc
      print_dbg("\r\n");
    //    screen_line(0, 0, "SDRAM test: corrupted words! :(", 0xf);
    //    screen_int(0, FONT_CHARH, errors, 0xf);
    }
  } else {
    if(print) {
80002a70:	58 06       	cp.w	r6,0
80002a72:	cf e0       	breq	80002a6e <sdram_test+0x182>
	print_dbg("\r\nSDRAM test completed OK!");
80002a74:	fe cc f5 60 	sub	r12,pc,-2720
80002a78:	fe b0 fd bc 	rcall	800025f0 <print_dbg>
80002a7c:	d8 22       	popm	r4-r7,pc
  const u32 numWords = 16;
  u32 i;
  u32 read;
  u32 errors = 0;
  if(print) {
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
80002a7e:	fe cc f5 e6 	sub	r12,pc,-2586
80002a82:	fe b0 fd b7 	rcall	800025f0 <print_dbg>
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002a86:	30 05       	mov	r5,0
80002a88:	fc 17 d0 00 	movh	r7,0xd000
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002a8c:	fe cc f5 cc 	sub	r12,pc,-2612
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002a90:	8f 05       	st.w	r7[0x0],r5
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002a92:	fe b0 fd af 	rcall	800025f0 <print_dbg>
80002a96:	0a 9c       	mov	r12,r5
80002a98:	fe b0 fd 8a 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002a9c:	30 14       	mov	r4,1
80002a9e:	30 45       	mov	r5,4
80002aa0:	ea 15 d0 00 	orh	r5,0xd000
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002aa4:	fe cc f5 e4 	sub	r12,pc,-2588
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002aa8:	8b 04       	st.w	r5[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002aaa:	fe b0 fd a3 	rcall	800025f0 <print_dbg>
80002aae:	08 9c       	mov	r12,r4
80002ab0:	fe b0 fd 7e 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002ab4:	30 88       	mov	r8,8
80002ab6:	ea 18 d0 00 	orh	r8,0xd000
80002aba:	30 24       	mov	r4,2
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002abc:	fe cc f5 fc 	sub	r12,pc,-2564
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002ac0:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002ac2:	fe b0 fd 97 	rcall	800025f0 <print_dbg>
80002ac6:	08 9c       	mov	r12,r4
80002ac8:	fe b0 fd 72 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002acc:	30 c8       	mov	r8,12
80002ace:	ea 18 d0 00 	orh	r8,0xd000
80002ad2:	30 34       	mov	r4,3
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002ad4:	fe cc f6 14 	sub	r12,pc,-2540
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002ad8:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002ada:	fe b0 fd 8b 	rcall	800025f0 <print_dbg>
80002ade:	08 9c       	mov	r12,r4
80002ae0:	fe b0 fd 66 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002ae4:	31 08       	mov	r8,16
80002ae6:	ea 18 d0 00 	orh	r8,0xd000
80002aea:	30 44       	mov	r4,4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002aec:	fe cc f6 2c 	sub	r12,pc,-2516
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002af0:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002af2:	fe b0 fd 7f 	rcall	800025f0 <print_dbg>
80002af6:	08 9c       	mov	r12,r4
80002af8:	fe b0 fd 5a 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002afc:	31 48       	mov	r8,20
80002afe:	ea 18 d0 00 	orh	r8,0xd000
80002b02:	30 54       	mov	r4,5
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b04:	fe cc f6 44 	sub	r12,pc,-2492
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b08:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b0a:	fe b0 fd 73 	rcall	800025f0 <print_dbg>
80002b0e:	08 9c       	mov	r12,r4
80002b10:	fe b0 fd 4e 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b14:	31 88       	mov	r8,24
80002b16:	ea 18 d0 00 	orh	r8,0xd000
80002b1a:	30 64       	mov	r4,6
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b1c:	fe cc f6 5c 	sub	r12,pc,-2468
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b20:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b22:	fe b0 fd 67 	rcall	800025f0 <print_dbg>
80002b26:	08 9c       	mov	r12,r4
80002b28:	fe b0 fd 42 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b2c:	31 c8       	mov	r8,28
80002b2e:	ea 18 d0 00 	orh	r8,0xd000
80002b32:	30 74       	mov	r4,7
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b34:	fe cc f6 74 	sub	r12,pc,-2444
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b38:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b3a:	fe b0 fd 5b 	rcall	800025f0 <print_dbg>
80002b3e:	08 9c       	mov	r12,r4
80002b40:	fe b0 fd 36 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b44:	32 08       	mov	r8,32
80002b46:	ea 18 d0 00 	orh	r8,0xd000
80002b4a:	30 84       	mov	r4,8
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b4c:	fe cc f6 8c 	sub	r12,pc,-2420
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b50:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b52:	fe b0 fd 4f 	rcall	800025f0 <print_dbg>
80002b56:	08 9c       	mov	r12,r4
80002b58:	fe b0 fd 2a 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b5c:	32 48       	mov	r8,36
80002b5e:	ea 18 d0 00 	orh	r8,0xd000
80002b62:	30 94       	mov	r4,9
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b64:	fe cc f6 a4 	sub	r12,pc,-2396
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b68:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b6a:	fe b0 fd 43 	rcall	800025f0 <print_dbg>
80002b6e:	08 9c       	mov	r12,r4
80002b70:	fe b0 fd 1e 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b74:	32 88       	mov	r8,40
80002b76:	ea 18 d0 00 	orh	r8,0xd000
80002b7a:	30 a4       	mov	r4,10
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b7c:	fe cc f6 bc 	sub	r12,pc,-2372
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b80:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b82:	fe b0 fd 37 	rcall	800025f0 <print_dbg>
80002b86:	08 9c       	mov	r12,r4
80002b88:	fe b0 fd 12 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b8c:	32 c8       	mov	r8,44
80002b8e:	ea 18 d0 00 	orh	r8,0xd000
80002b92:	30 b4       	mov	r4,11
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b94:	fe cc f6 d4 	sub	r12,pc,-2348
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002b98:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002b9a:	fe b0 fd 2b 	rcall	800025f0 <print_dbg>
80002b9e:	08 9c       	mov	r12,r4
80002ba0:	fe b0 fd 06 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002ba4:	33 08       	mov	r8,48
80002ba6:	ea 18 d0 00 	orh	r8,0xd000
80002baa:	30 c4       	mov	r4,12
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bac:	fe cc f6 ec 	sub	r12,pc,-2324
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002bb0:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bb2:	fe b0 fd 1f 	rcall	800025f0 <print_dbg>
80002bb6:	08 9c       	mov	r12,r4
80002bb8:	fe b0 fc fa 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002bbc:	33 48       	mov	r8,52
80002bbe:	ea 18 d0 00 	orh	r8,0xd000
80002bc2:	30 d4       	mov	r4,13
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bc4:	fe cc f7 04 	sub	r12,pc,-2300
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002bc8:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bca:	fe b0 fd 13 	rcall	800025f0 <print_dbg>
80002bce:	08 9c       	mov	r12,r4
80002bd0:	fe b0 fc ee 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002bd4:	33 88       	mov	r8,56
80002bd6:	ea 18 d0 00 	orh	r8,0xd000
80002bda:	30 e4       	mov	r4,14
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bdc:	fe cc f7 1c 	sub	r12,pc,-2276
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002be0:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002be2:	fe b0 fd 07 	rcall	800025f0 <print_dbg>
80002be6:	08 9c       	mov	r12,r4
80002be8:	fe b0 fc e2 	rcall	800025ac <print_dbg_ulong>
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002bec:	33 c8       	mov	r8,60
80002bee:	ea 18 d0 00 	orh	r8,0xd000
80002bf2:	30 f4       	mov	r4,15
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bf4:	fe cc f7 34 	sub	r12,pc,-2252
    print_dbg("\r\nstarting SDRAM test (4096 words)...");
    // screen_line(0, 0, "starting SDRAM test (full)...", 0xf);
  }

  for(i=0; i<numWords; i++) {
    sdram[i] = i;
80002bf8:	91 04       	st.w	r8[0x0],r4
    if(print) {
      print_dbg("\r\n write: "); print_dbg_ulong(i);
80002bfa:	fe b0 fc fb 	rcall	800025f0 <print_dbg>
80002bfe:	08 9c       	mov	r12,r4
80002c00:	fe b0 fc d6 	rcall	800025ac <print_dbg_ulong>
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c04:	fe cc f7 38 	sub	r12,pc,-2248
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002c08:	6e 07       	ld.w	r7,r7[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c0a:	fe b0 fc f3 	rcall	800025f0 <print_dbg>
80002c0e:	0e 9c       	mov	r12,r7
80002c10:	fe b0 fc ce 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002c14:	fe cc f7 3c 	sub	r12,pc,-2244
80002c18:	fe b0 fc ec 	rcall	800025f0 <print_dbg>
80002c1c:	f9 d7 c0 08 	bfextu	r12,r7,0x0,0x8
80002c20:	fe b0 fc c6 	rcall	800025ac <print_dbg_ulong>
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c24:	fe cc f7 58 	sub	r12,pc,-2216
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002c28:	6a 05       	ld.w	r5,r5[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c2a:	fe b0 fc e3 	rcall	800025f0 <print_dbg>
80002c2e:	0a 9c       	mov	r12,r5
80002c30:	fe b0 fc be 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002c34:	fe cc f7 5c 	sub	r12,pc,-2212
80002c38:	fe b0 fc dc 	rcall	800025f0 <print_dbg>
80002c3c:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002c40:	58 07       	cp.w	r7,0
80002c42:	5f 17       	srne	r7
80002c44:	fe b0 fc b4 	rcall	800025ac <print_dbg_ulong>
    }
    if(i != read) {
80002c48:	58 15       	cp.w	r5,1
80002c4a:	c0 20       	breq	80002c4e <sdram_test+0x362>
      errors++;
80002c4c:	2f f7       	sub	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002c4e:	30 88       	mov	r8,8
80002c50:	ea 18 d0 00 	orh	r8,0xd000
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c54:	fe cc f7 88 	sub	r12,pc,-2168
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002c58:	70 05       	ld.w	r5,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c5a:	fe b0 fc cb 	rcall	800025f0 <print_dbg>
80002c5e:	0a 9c       	mov	r12,r5
80002c60:	fe b0 fc a6 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002c64:	fe cc f7 8c 	sub	r12,pc,-2164
80002c68:	fe b0 fc c4 	rcall	800025f0 <print_dbg>
80002c6c:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002c70:	fe b0 fc 9e 	rcall	800025ac <print_dbg_ulong>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002c74:	30 c8       	mov	r8,12
80002c76:	ea 18 d0 00 	orh	r8,0xd000
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002c7a:	58 25       	cp.w	r5,2
80002c7c:	f7 b7 01 ff 	subne	r7,-1
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c80:	fe cc f7 b4 	sub	r12,pc,-2124
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002c84:	70 05       	ld.w	r5,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002c86:	fe b0 fc b5 	rcall	800025f0 <print_dbg>
80002c8a:	0a 9c       	mov	r12,r5
80002c8c:	fe b0 fc 90 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002c90:	fe cc f7 b8 	sub	r12,pc,-2120
80002c94:	fe b0 fc ae 	rcall	800025f0 <print_dbg>
80002c98:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002c9c:	fe b0 fc 88 	rcall	800025ac <print_dbg_ulong>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002ca0:	31 08       	mov	r8,16
80002ca2:	ea 18 d0 00 	orh	r8,0xd000
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002ca6:	58 35       	cp.w	r5,3
80002ca8:	f7 b7 01 ff 	subne	r7,-1
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002cac:	fe cc f7 e0 	sub	r12,pc,-2080
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002cb0:	70 05       	ld.w	r5,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002cb2:	fe b0 fc 9f 	rcall	800025f0 <print_dbg>
80002cb6:	0a 9c       	mov	r12,r5
80002cb8:	fe b0 fc 7a 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002cbc:	fe cc f7 e4 	sub	r12,pc,-2076
80002cc0:	fe b0 fc 98 	rcall	800025f0 <print_dbg>
80002cc4:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002cc8:	fe b0 fc 72 	rcall	800025ac <print_dbg_ulong>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002ccc:	31 48       	mov	r8,20
80002cce:	ea 18 d0 00 	orh	r8,0xd000
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002cd2:	58 45       	cp.w	r5,4
80002cd4:	f7 b7 01 ff 	subne	r7,-1
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002cd8:	fe cc f8 0c 	sub	r12,pc,-2036
80002cdc:	70 05       	ld.w	r5,r8[0x0]
80002cde:	fe b0 fc 89 	rcall	800025f0 <print_dbg>
80002ce2:	0a 9c       	mov	r12,r5
80002ce4:	fe b0 fc 64 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002ce8:	fe cc f8 10 	sub	r12,pc,-2032
80002cec:	fe b0 fc 82 	rcall	800025f0 <print_dbg>
80002cf0:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002cf4:	fe b0 fc 5c 	rcall	800025ac <print_dbg_ulong>
80002cf8:	31 88       	mov	r8,24
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002cfa:	ea 18 d0 00 	orh	r8,0xd000
80002cfe:	58 55       	cp.w	r5,5
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002d00:	f7 b7 01 ff 	subne	r7,-1
80002d04:	fe cc f8 38 	sub	r12,pc,-1992
80002d08:	70 05       	ld.w	r5,r8[0x0]
80002d0a:	fe b0 fc 73 	rcall	800025f0 <print_dbg>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002d0e:	0a 9c       	mov	r12,r5
80002d10:	fe b0 fc 4e 	rcall	800025ac <print_dbg_ulong>
80002d14:	fe cc f8 3c 	sub	r12,pc,-1988
80002d18:	fe b0 fc 6c 	rcall	800025f0 <print_dbg>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002d1c:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002d20:	fe b0 fc 46 	rcall	800025ac <print_dbg_ulong>
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002d24:	31 c8       	mov	r8,28
80002d26:	ea 18 d0 00 	orh	r8,0xd000
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002d2a:	58 65       	cp.w	r5,6
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002d2c:	f7 b7 01 ff 	subne	r7,-1
80002d30:	fe cc f8 64 	sub	r12,pc,-1948
80002d34:	70 05       	ld.w	r5,r8[0x0]
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002d36:	fe b0 fc 5d 	rcall	800025f0 <print_dbg>
80002d3a:	0a 9c       	mov	r12,r5
80002d3c:	fe b0 fc 38 	rcall	800025ac <print_dbg_ulong>
80002d40:	fe cc f8 68 	sub	r12,pc,-1944
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002d44:	fe b0 fc 56 	rcall	800025f0 <print_dbg>
80002d48:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002d4c:	fe b0 fc 30 	rcall	800025ac <print_dbg_ulong>
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002d50:	32 08       	mov	r8,32
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002d52:	ea 18 d0 00 	orh	r8,0xd000
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002d56:	58 75       	cp.w	r5,7
80002d58:	f7 b7 01 ff 	subne	r7,-1
80002d5c:	fe cc f8 90 	sub	r12,pc,-1904
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002d60:	70 05       	ld.w	r5,r8[0x0]
80002d62:	fe b0 fc 47 	rcall	800025f0 <print_dbg>
80002d66:	0a 9c       	mov	r12,r5
80002d68:	fe b0 fc 22 	rcall	800025ac <print_dbg_ulong>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002d6c:	fe cc f8 94 	sub	r12,pc,-1900
80002d70:	fe b0 fc 40 	rcall	800025f0 <print_dbg>
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002d74:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002d78:	fe b0 fc 1a 	rcall	800025ac <print_dbg_ulong>
80002d7c:	32 48       	mov	r8,36
80002d7e:	ea 18 d0 00 	orh	r8,0xd000
80002d82:	58 85       	cp.w	r5,8
80002d84:	f7 b7 01 ff 	subne	r7,-1
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002d88:	fe cc f8 bc 	sub	r12,pc,-1860
80002d8c:	70 05       	ld.w	r5,r8[0x0]
80002d8e:	fe b0 fc 31 	rcall	800025f0 <print_dbg>
80002d92:	0a 9c       	mov	r12,r5
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002d94:	fe b0 fc 0c 	rcall	800025ac <print_dbg_ulong>
80002d98:	fe cc f8 c0 	sub	r12,pc,-1856
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002d9c:	fe b0 fc 2a 	rcall	800025f0 <print_dbg>
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002da0:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002da4:	fe b0 fc 04 	rcall	800025ac <print_dbg_ulong>
80002da8:	32 88       	mov	r8,40
80002daa:	ea 18 d0 00 	orh	r8,0xd000
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002dae:	58 95       	cp.w	r5,9
80002db0:	f7 b7 01 ff 	subne	r7,-1
80002db4:	fe cc f8 e8 	sub	r12,pc,-1816
80002db8:	70 05       	ld.w	r5,r8[0x0]
80002dba:	fe b0 fc 1b 	rcall	800025f0 <print_dbg>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002dbe:	0a 9c       	mov	r12,r5
80002dc0:	fe b0 fb f6 	rcall	800025ac <print_dbg_ulong>
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002dc4:	fe cc f8 ec 	sub	r12,pc,-1812
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002dc8:	fe b0 fc 14 	rcall	800025f0 <print_dbg>
80002dcc:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002dd0:	fe b0 fb ee 	rcall	800025ac <print_dbg_ulong>
80002dd4:	32 c8       	mov	r8,44
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002dd6:	ea 18 d0 00 	orh	r8,0xd000
80002dda:	58 a5       	cp.w	r5,10
80002ddc:	f7 b7 01 ff 	subne	r7,-1
80002de0:	fe cc f9 14 	sub	r12,pc,-1772
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002de4:	70 05       	ld.w	r5,r8[0x0]
80002de6:	fe b0 fc 05 	rcall	800025f0 <print_dbg>
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002dea:	0a 9c       	mov	r12,r5
80002dec:	fe b0 fb e0 	rcall	800025ac <print_dbg_ulong>
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002df0:	fe cc f9 18 	sub	r12,pc,-1768
80002df4:	fe b0 fb fe 	rcall	800025f0 <print_dbg>
80002df8:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002dfc:	fe b0 fb d8 	rcall	800025ac <print_dbg_ulong>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002e00:	33 08       	mov	r8,48
80002e02:	ea 18 d0 00 	orh	r8,0xd000
80002e06:	58 b5       	cp.w	r5,11
80002e08:	f7 b7 01 ff 	subne	r7,-1
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002e0c:	fe cc f9 40 	sub	r12,pc,-1728
80002e10:	70 05       	ld.w	r5,r8[0x0]
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002e12:	fe b0 fb ef 	rcall	800025f0 <print_dbg>
80002e16:	0a 9c       	mov	r12,r5
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002e18:	fe b0 fb ca 	rcall	800025ac <print_dbg_ulong>
80002e1c:	fe cc f9 44 	sub	r12,pc,-1724
80002e20:	fe b0 fb e8 	rcall	800025f0 <print_dbg>
80002e24:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002e28:	fe b0 fb c2 	rcall	800025ac <print_dbg_ulong>
80002e2c:	33 48       	mov	r8,52
80002e2e:	ea 18 d0 00 	orh	r8,0xd000
80002e32:	58 c5       	cp.w	r5,12
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002e34:	f7 b7 01 ff 	subne	r7,-1
80002e38:	fe cc f9 6c 	sub	r12,pc,-1684
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002e3c:	70 05       	ld.w	r5,r8[0x0]
80002e3e:	fe b0 fb d9 	rcall	800025f0 <print_dbg>
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002e42:	0a 9c       	mov	r12,r5
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002e44:	fe b0 fb b4 	rcall	800025ac <print_dbg_ulong>
80002e48:	fe cc f9 70 	sub	r12,pc,-1680
80002e4c:	fe b0 fb d2 	rcall	800025f0 <print_dbg>
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002e50:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002e54:	fe b0 fb ac 	rcall	800025ac <print_dbg_ulong>
80002e58:	33 88       	mov	r8,56
80002e5a:	ea 18 d0 00 	orh	r8,0xd000
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002e5e:	58 d5       	cp.w	r5,13
80002e60:	f7 b7 01 ff 	subne	r7,-1
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
    }
    if(i != read) {
      errors++;
80002e64:	fe cc f9 98 	sub	r12,pc,-1640
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002e68:	70 05       	ld.w	r5,r8[0x0]
      print_dbg("\r\n write: "); print_dbg_ulong(i);
    }
  }

  for(i=0; i<numWords; i++) {
    read = sdram[i];
80002e6a:	fe b0 fb c3 	rcall	800025f0 <print_dbg>
    if(print) {
      print_dbg("\r\n read: "); print_dbg_ulong(read);
80002e6e:	0a 9c       	mov	r12,r5
80002e70:	fe b0 fb 9e 	rcall	800025ac <print_dbg_ulong>
80002e74:	fe cc f9 9c 	sub	r12,pc,-1636
      print_dbg(" , last byte: "); print_dbg_ulong(read & 0xff);
80002e78:	fe b0 fb bc 	rcall	800025f0 <print_dbg>
80002e7c:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002e80:	fe b0 fb 96 	rcall	800025ac <print_dbg_ulong>
    }
    if(i != read) {
80002e84:	33 c8       	mov	r8,60
80002e86:	ea 18 d0 00 	orh	r8,0xd000
80002e8a:	58 e5       	cp.w	r5,14
80002e8c:	f7 b7 01 ff 	subne	r7,-1
    }
  }
  
  if(errors != 0) {
    if(print) {
      print_dbg("\r\nSDRAM test: corrupted words! :( \r\n");
80002e90:	fe cc f9 c4 	sub	r12,pc,-1596
      print_dbg_ulong(errors);
80002e94:	70 05       	ld.w	r5,r8[0x0]
80002e96:	fe b0 fb ad 	rcall	800025f0 <print_dbg>
      print_dbg("\r\n");
80002e9a:	0a 9c       	mov	r12,r5
80002e9c:	fe b0 fb 88 	rcall	800025ac <print_dbg_ulong>
80002ea0:	fe cc f9 c8 	sub	r12,pc,-1592
80002ea4:	fe b0 fb a6 	rcall	800025f0 <print_dbg>
80002ea8:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002eac:	fe b0 fb 80 	rcall	800025ac <print_dbg_ulong>
80002eb0:	58 f5       	cp.w	r5,15
80002eb2:	fe 91 fd d8 	brne	80002a62 <sdram_test+0x176>
80002eb6:	fe 9f fd d7 	bral	80002a64 <sdram_test+0x178>
80002eba:	fe cc f9 d2 	sub	r12,pc,-1582
80002ebe:	fe b0 fb 99 	rcall	800025f0 <print_dbg>
80002ec2:	0e 9c       	mov	r12,r7
80002ec4:	fe b0 fb 74 	rcall	800025ac <print_dbg_ulong>
80002ec8:	fe cc f9 b8 	sub	r12,pc,-1608
80002ecc:	fe b0 fb 92 	rcall	800025f0 <print_dbg>
80002ed0:	d8 22       	popm	r4-r7,pc
80002ed2:	d7 03       	nop

80002ed4 <_stext>:
80002ed4:	e0 7d 00 00 	mov	sp,65536
80002ed8:	fe c0 fe d8 	sub	r0,pc,-296
80002edc:	e3 b0 00 01 	mtsr	0x4,r0
80002ee0:	d5 53       	csrf	0x15
80002ee2:	30 80       	mov	r0,8
80002ee4:	30 81       	mov	r1,8
80002ee6:	02 30       	cp.w	r0,r1
80002ee8:	c0 72       	brcc	80002ef6 <idata_load_loop_end>
80002eea:	fe c2 f9 ba 	sub	r2,pc,-1606

80002eee <idata_load_loop>:
80002eee:	a5 05       	ld.d	r4,r2++
80002ef0:	a1 24       	st.d	r0++,r4
80002ef2:	02 30       	cp.w	r0,r1
80002ef4:	cf d3       	brcs	80002eee <idata_load_loop>

80002ef6 <idata_load_loop_end>:
80002ef6:	30 80       	mov	r0,8
80002ef8:	e0 61 00 f8 	mov	r1,248
80002efc:	02 30       	cp.w	r0,r1
80002efe:	c0 62       	brcc	80002f0a <udata_clear_loop_end>
80002f00:	30 02       	mov	r2,0
80002f02:	30 03       	mov	r3,0

80002f04 <udata_clear_loop>:
80002f04:	a1 22       	st.d	r0++,r2
80002f06:	02 30       	cp.w	r0,r1
80002f08:	cf e3       	brcs	80002f04 <udata_clear_loop>

80002f0a <udata_clear_loop_end>:
80002f0a:	fe cf 08 9a 	sub	pc,pc,2202
80002f0e:	d7 03       	nop

Disassembly of section .exception:

80003000 <_evba>:
80003000:	c0 08       	rjmp	80003000 <_evba>
	...

80003004 <_handle_TLB_Multiple_Hit>:
80003004:	c0 08       	rjmp	80003004 <_handle_TLB_Multiple_Hit>
	...

80003008 <_handle_Bus_Error_Data_Fetch>:
80003008:	c0 08       	rjmp	80003008 <_handle_Bus_Error_Data_Fetch>
	...

8000300c <_handle_Bus_Error_Instruction_Fetch>:
8000300c:	c0 08       	rjmp	8000300c <_handle_Bus_Error_Instruction_Fetch>
	...

80003010 <_handle_NMI>:
80003010:	c0 08       	rjmp	80003010 <_handle_NMI>
	...

80003014 <_handle_Instruction_Address>:
80003014:	c0 08       	rjmp	80003014 <_handle_Instruction_Address>
	...

80003018 <_handle_ITLB_Protection>:
80003018:	c0 08       	rjmp	80003018 <_handle_ITLB_Protection>
	...

8000301c <_handle_Breakpoint>:
8000301c:	c0 08       	rjmp	8000301c <_handle_Breakpoint>
	...

80003020 <_handle_Illegal_Opcode>:
80003020:	c0 08       	rjmp	80003020 <_handle_Illegal_Opcode>
	...

80003024 <_handle_Unimplemented_Instruction>:
80003024:	c0 08       	rjmp	80003024 <_handle_Unimplemented_Instruction>
	...

80003028 <_handle_Privilege_Violation>:
80003028:	c0 08       	rjmp	80003028 <_handle_Privilege_Violation>
	...

8000302c <_handle_Floating_Point>:
8000302c:	c0 08       	rjmp	8000302c <_handle_Floating_Point>
	...

80003030 <_handle_Coprocessor_Absent>:
80003030:	c0 08       	rjmp	80003030 <_handle_Coprocessor_Absent>
	...

80003034 <_handle_Data_Address_Read>:
80003034:	c0 08       	rjmp	80003034 <_handle_Data_Address_Read>
	...

80003038 <_handle_Data_Address_Write>:
80003038:	c0 08       	rjmp	80003038 <_handle_Data_Address_Write>
	...

8000303c <_handle_DTLB_Protection_Read>:
8000303c:	c0 08       	rjmp	8000303c <_handle_DTLB_Protection_Read>
	...

80003040 <_handle_DTLB_Protection_Write>:
80003040:	c0 08       	rjmp	80003040 <_handle_DTLB_Protection_Write>
	...

80003044 <_handle_DTLB_Modified>:
80003044:	c0 08       	rjmp	80003044 <_handle_DTLB_Modified>
	...

80003050 <_handle_ITLB_Miss>:
80003050:	c0 08       	rjmp	80003050 <_handle_ITLB_Miss>
	...

80003060 <_handle_DTLB_Miss_Read>:
80003060:	c0 08       	rjmp	80003060 <_handle_DTLB_Miss_Read>
	...

80003070 <_handle_DTLB_Miss_Write>:
80003070:	c0 08       	rjmp	80003070 <_handle_DTLB_Miss_Write>
	...

80003100 <_handle_Supervisor_Call>:
80003100:	c0 08       	rjmp	80003100 <_handle_Supervisor_Call>
80003102:	d7 03       	nop

80003104 <_int0>:
80003104:	30 0c       	mov	r12,0
80003106:	fe b0 f8 f1 	rcall	800022e8 <_get_interrupt_handler>
8000310a:	58 0c       	cp.w	r12,0
8000310c:	f8 0f 17 10 	movne	pc,r12
80003110:	d6 03       	rete

80003112 <_int1>:
80003112:	30 1c       	mov	r12,1
80003114:	fe b0 f8 ea 	rcall	800022e8 <_get_interrupt_handler>
80003118:	58 0c       	cp.w	r12,0
8000311a:	f8 0f 17 10 	movne	pc,r12
8000311e:	d6 03       	rete

80003120 <_int2>:
80003120:	30 2c       	mov	r12,2
80003122:	fe b0 f8 e3 	rcall	800022e8 <_get_interrupt_handler>
80003126:	58 0c       	cp.w	r12,0
80003128:	f8 0f 17 10 	movne	pc,r12
8000312c:	d6 03       	rete

8000312e <_int3>:
8000312e:	30 3c       	mov	r12,3
80003130:	fe b0 f8 dc 	rcall	800022e8 <_get_interrupt_handler>
80003134:	58 0c       	cp.w	r12,0
80003136:	f8 0f 17 10 	movne	pc,r12
8000313a:	d6 03       	rete
8000313c:	d7 03       	nop
8000313e:	d7 03       	nop
80003140:	d7 03       	nop
80003142:	d7 03       	nop
80003144:	d7 03       	nop
80003146:	d7 03       	nop
80003148:	d7 03       	nop
8000314a:	d7 03       	nop
8000314c:	d7 03       	nop
8000314e:	d7 03       	nop
80003150:	d7 03       	nop
80003152:	d7 03       	nop
80003154:	d7 03       	nop
80003156:	d7 03       	nop
80003158:	d7 03       	nop
8000315a:	d7 03       	nop
8000315c:	d7 03       	nop
8000315e:	d7 03       	nop
80003160:	d7 03       	nop
80003162:	d7 03       	nop
80003164:	d7 03       	nop
80003166:	d7 03       	nop
80003168:	d7 03       	nop
8000316a:	d7 03       	nop
8000316c:	d7 03       	nop
8000316e:	d7 03       	nop
80003170:	d7 03       	nop
80003172:	d7 03       	nop
80003174:	d7 03       	nop
80003176:	d7 03       	nop
80003178:	d7 03       	nop
8000317a:	d7 03       	nop
8000317c:	d7 03       	nop
8000317e:	d7 03       	nop
80003180:	d7 03       	nop
80003182:	d7 03       	nop
80003184:	d7 03       	nop
80003186:	d7 03       	nop
80003188:	d7 03       	nop
8000318a:	d7 03       	nop
8000318c:	d7 03       	nop
8000318e:	d7 03       	nop
80003190:	d7 03       	nop
80003192:	d7 03       	nop
80003194:	d7 03       	nop
80003196:	d7 03       	nop
80003198:	d7 03       	nop
8000319a:	d7 03       	nop
8000319c:	d7 03       	nop
8000319e:	d7 03       	nop
800031a0:	d7 03       	nop
800031a2:	d7 03       	nop
800031a4:	d7 03       	nop
800031a6:	d7 03       	nop
800031a8:	d7 03       	nop
800031aa:	d7 03       	nop
800031ac:	d7 03       	nop
800031ae:	d7 03       	nop
800031b0:	d7 03       	nop
800031b2:	d7 03       	nop
800031b4:	d7 03       	nop
800031b6:	d7 03       	nop
800031b8:	d7 03       	nop
800031ba:	d7 03       	nop
800031bc:	d7 03       	nop
800031be:	d7 03       	nop
800031c0:	d7 03       	nop
800031c2:	d7 03       	nop
800031c4:	d7 03       	nop
800031c6:	d7 03       	nop
800031c8:	d7 03       	nop
800031ca:	d7 03       	nop
800031cc:	d7 03       	nop
800031ce:	d7 03       	nop
800031d0:	d7 03       	nop
800031d2:	d7 03       	nop
800031d4:	d7 03       	nop
800031d6:	d7 03       	nop
800031d8:	d7 03       	nop
800031da:	d7 03       	nop
800031dc:	d7 03       	nop
800031de:	d7 03       	nop
800031e0:	d7 03       	nop
800031e2:	d7 03       	nop
800031e4:	d7 03       	nop
800031e6:	d7 03       	nop
800031e8:	d7 03       	nop
800031ea:	d7 03       	nop
800031ec:	d7 03       	nop
800031ee:	d7 03       	nop
800031f0:	d7 03       	nop
800031f2:	d7 03       	nop
800031f4:	d7 03       	nop
800031f6:	d7 03       	nop
800031f8:	d7 03       	nop
800031fa:	d7 03       	nop
800031fc:	d7 03       	nop
800031fe:	d7 03       	nop
