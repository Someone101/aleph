
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e5e  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000af0  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000001  00000008  80009cf0  0000a408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  00000009  80009cf1  0000a409  2**0
                  ALLOC
  8 .bss          00001c58  00000010  00000010  00000000  2**2
                  ALLOC
  9 .heap         0000d398  00001c68  00001c68  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a409  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000011e8  00000000  00000000  0000a439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000032dd  00000000  00000000  0000b621  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001ef83  00000000  00000000  0000e8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000043c4  00000000  00000000  0002d881  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001db78  00000000  00000000  00031c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000034a8  00000000  00000000  0004f7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005ae3  00000000  00000000  00052c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000ac20  00000000  00000000  0005874b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 01b5231e  00000000  00000000  0006336b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 000071b8  00000000  00000000  01bb5689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf 95 c8 	sub	pc,pc,-27192

Disassembly of section .text:

80002004 <sdramc_init>:
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
80002004:	eb cd 40 fc 	pushm	r2-r7,lr
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002008:	ee 78 42 3f 	mov	r8,999999
8000200c:	f8 08 00 09 	add	r9,r12,r8
80002010:	e0 68 de 83 	mov	r8,56963
80002014:	ea 18 43 1b 	orh	r8,0x431b
80002018:	f2 08 06 48 	mulu.d	r8,r9,r8
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
8000201c:	18 96       	mov	r6,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8000201e:	f2 07 16 12 	lsr	r7,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002022:	32 7b       	mov	r11,39
80002024:	fe cc 8e 24 	sub	r12,pc,-29148
80002028:	c7 2d       	rcall	8000230c <gpio_enable_module>
  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();

  // Enable SDRAM mode for CS1.
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
8000202a:	fe 68 10 00 	mov	r8,-126976
8000202e:	f0 f9 01 24 	ld.w	r9,r8[292]
80002032:	a1 b9       	sbr	r9,0x1
80002034:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80002038:	f0 f8 01 24 	ld.w	r8,r8[292]
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000203c:	e0 68 4d d3 	mov	r8,19923
80002040:	ea 18 10 62 	orh	r8,0x1062
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002044:	ee 05 15 03 	lsl	r5,r7,0x3
80002048:	ea 07 00 03 	add	r3,r5,r7
8000204c:	ee 03 00 23 	add	r3,r7,r3<<0x2
80002050:	e6 c3 fc 19 	sub	r3,r3,-999
80002054:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002058:	ee 09 15 04 	lsl	r9,r7,0x4
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000205c:	e6 0b 15 12 	lsl	r11,r3,0x12
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002060:	0e 19       	sub	r9,r7
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002062:	f2 03 15 02 	lsl	r3,r9,0x2
80002066:	e6 c3 fc 19 	sub	r3,r3,-999
8000206a:	e6 08 06 42 	mulu.d	r2,r3,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000206e:	f2 c9 fc 19 	sub	r9,r9,-999
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002072:	e6 0e 15 06 	lsl	lr,r3,0x6
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
80002076:	f2 08 06 42 	mulu.d	r2,r9,r8
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000207a:	ee 0c 15 05 	lsl	r12,r7,0x5
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000207e:	e6 09 16 06 	lsr	r9,r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002082:	0e 0c       	add	r12,r7
80002084:	0e 15       	sub	r5,r7
80002086:	ee 0c 00 13 	add	r3,r7,r12<<0x1
8000208a:	a1 75       	lsl	r5,0x1
8000208c:	e6 c3 fc 19 	sub	r3,r3,-999
80002090:	ea c5 fc 19 	sub	r5,r5,-999
80002094:	e6 08 06 42 	mulu.d	r2,r3,r8
80002098:	ea 08 06 44 	mulu.d	r4,r5,r8
8000209c:	e6 08 16 06 	lsr	r8,r3,0x6
800020a0:	a3 65       	lsl	r5,0x2
800020a2:	bd 68       	lsl	r8,0x1c
800020a4:	e2 15 0f 00 	andl	r5,0xf00,COH
800020a8:	e8 18 00 d9 	orl	r8,0xd9
800020ac:	0a 48       	or	r8,r5
800020ae:	e2 1e f0 00 	andl	lr,0xf000,COH
800020b2:	f1 ee 10 0e 	or	lr,r8,lr
800020b6:	f2 08 15 10 	lsl	r8,r9,0x10
800020ba:	e6 18 00 0f 	andh	r8,0xf,COH
800020be:	10 4e       	or	lr,r8
800020c0:	f2 08 15 14 	lsl	r8,r9,0x14
800020c4:	e6 18 00 f0 	andh	r8,0xf0,COH
800020c8:	fd e8 10 08 	or	r8,lr,r8
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020cc:	fe 6a 20 00 	mov	r10,-122880
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
800020d0:	e6 1b 0f 00 	andh	r11,0xf00,COH
800020d4:	f1 eb 10 0b 	or	r11,r8,r11
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020d8:	95 2b       	st.w	r10[0x8],r11
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800020da:	74 28       	ld.w	r8,r10[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800020dc:	30 18       	mov	r8,1
800020de:	95 08       	st.w	r10[0x0],r8
  AVR32_SDRAMC.mr;
800020e0:	74 08       	ld.w	r8,r10[0x0]
  sdram[0];
800020e2:	fc 18 d0 00 	movh	r8,0xd000
800020e6:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
800020e8:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800020ec:	ee 0a 10 64 	mul	r10,r7,100
800020f0:	f0 0a 00 0a 	add	r10,r8,r10

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800020f4:	14 38       	cp.w	r8,r10
800020f6:	e0 88 00 06 	brls	80002102 <sdramc_init+0xfe>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800020fa:	e1 b8 00 42 	mfsr	r8,0x108
800020fe:	10 3a       	cp.w	r10,r8
80002100:	cf d3       	brcs	800020fa <sdramc_init+0xf6>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002102:	e1 b8 00 42 	mfsr	r8,0x108
80002106:	10 3a       	cp.w	r10,r8
80002108:	fe 9b ff fd 	brhi	80002102 <sdramc_init+0xfe>

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
8000210c:	fe 68 20 00 	mov	r8,-122880
80002110:	30 2a       	mov	r10,2
80002112:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002114:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002116:	fc 18 d0 00 	movh	r8,0xd000
8000211a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000211c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002120:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002124:	12 38       	cp.w	r8,r9
80002126:	e0 88 00 06 	brls	80002132 <sdramc_init+0x12e>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
8000212a:	e1 b8 00 42 	mfsr	r8,0x108
8000212e:	10 39       	cp.w	r9,r8
80002130:	cf d3       	brcs	8000212a <sdramc_init+0x126>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002132:	e1 b8 00 42 	mfsr	r8,0x108
80002136:	10 39       	cp.w	r9,r8
80002138:	fe 9b ff fd 	brhi	80002132 <sdramc_init+0x12e>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
8000213c:	fe 68 20 00 	mov	r8,-122880
80002140:	30 4a       	mov	r10,4
80002142:	91 0a       	st.w	r8[0x0],r10
  AVR32_SDRAMC.mr;
80002144:	70 08       	ld.w	r8,r8[0x0]
80002146:	f8 09 15 01 	lsl	r9,r12,0x1
8000214a:	e0 68 4d d3 	mov	r8,19923
8000214e:	ea 18 10 62 	orh	r8,0x1062
80002152:	f2 c9 fc 19 	sub	r9,r9,-999
80002156:	30 0a       	mov	r10,0
80002158:	f2 08 06 48 	mulu.d	r8,r9,r8
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
8000215c:	fc 1b d0 00 	movh	r11,0xd000
  sdram[0];
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
80002160:	f2 0c 16 06 	lsr	r12,r9,0x6
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002164:	96 08       	ld.sh	r8,r11[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002166:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000216a:	f0 0c 00 09 	add	r9,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000216e:	12 38       	cp.w	r8,r9
80002170:	e0 88 00 06 	brls	8000217c <sdramc_init+0x178>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002174:	e1 b8 00 42 	mfsr	r8,0x108
80002178:	10 39       	cp.w	r9,r8
8000217a:	cf d3       	brcs	80002174 <sdramc_init+0x170>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
8000217c:	e1 b8 00 42 	mfsr	r8,0x108
80002180:	10 39       	cp.w	r9,r8
80002182:	fe 9b ff fd 	brhi	8000217c <sdramc_init+0x178>
80002186:	2f fa       	sub	r10,-1
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80002188:	58 2a       	cp.w	r10,2
8000218a:	ce d1       	brne	80002164 <sdramc_init+0x160>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
8000218c:	fe 68 20 00 	mov	r8,-122880
80002190:	30 39       	mov	r9,3
80002192:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
80002194:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002196:	fc 18 d0 00 	movh	r8,0xd000
8000219a:	90 08       	ld.sh	r8,r8[0x0]
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000219c:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
800021a0:	e0 69 4d d3 	mov	r9,19923
800021a4:	ea 19 10 62 	orh	r9,0x1062
800021a8:	ee 0b 15 01 	lsl	r11,r7,0x1
800021ac:	f6 cb fc 19 	sub	r11,r11,-999
800021b0:	f6 09 06 4a 	mulu.d	r10,r11,r9
800021b4:	f6 09 16 06 	lsr	r9,r11,0x6
800021b8:	f0 09 00 09 	add	r9,r8,r9

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
800021bc:	12 38       	cp.w	r8,r9
800021be:	e0 88 00 06 	brls	800021ca <sdramc_init+0x1c6>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
800021c2:	e1 b8 00 42 	mfsr	r8,0x108
800021c6:	10 39       	cp.w	r9,r8
800021c8:	cf d3       	brcs	800021c2 <sdramc_init+0x1be>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
800021ca:	e1 b8 00 42 	mfsr	r8,0x108
800021ce:	10 39       	cp.w	r9,r8
800021d0:	fe 9b ff fd 	brhi	800021ca <sdramc_init+0x1c6>
  AVR32_SDRAMC.mr;
  sdram[0];
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800021d4:	30 09       	mov	r9,0
800021d6:	fe 68 20 00 	mov	r8,-122880
800021da:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
800021dc:	70 09       	ld.w	r9,r8[0x0]
  sdram[0];
800021de:	fc 19 d0 00 	movh	r9,0xd000
800021e2:	92 09       	ld.sh	r9,r9[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800021e4:	e0 69 1e 84 	mov	r9,7812
800021e8:	e0 6b de 83 	mov	r11,56963
800021ec:	ea 1b 43 1b 	orh	r11,0x431b
800021f0:	ec 0b 06 4a 	mulu.d	r10,r6,r11
800021f4:	b3 8b       	lsr	r11,0x12
800021f6:	b3 3b       	mul	r11,r9
800021f8:	e0 69 4d d3 	mov	r9,19923
800021fc:	ea 19 10 62 	orh	r9,0x1062
80002200:	f6 09 06 4a 	mulu.d	r10,r11,r9
80002204:	f6 09 16 06 	lsr	r9,r11,0x6
80002208:	91 19       	st.w	r8[0x4],r9
  AVR32_SDRAMC.tr;
8000220a:	70 18       	ld.w	r8,r8[0x4]
}
8000220c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80002210 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002210:	fe 68 14 00 	mov	r8,-125952
80002214:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002216:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000221a:	91 09       	st.w	r8[0x0],r9
}
8000221c:	5e fc       	retal	r12

8000221e <gpio_enable_pin_pull_up>:


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->puers = 1 << (pin & 0x1F);
8000221e:	30 18       	mov	r8,1
80002220:	f0 0c 09 48 	lsl	r8,r8,r12
#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002224:	a5 9c       	lsr	r12,0x5
80002226:	a9 6c       	lsl	r12,0x8
80002228:	e0 2c f0 00 	sub	r12,61440
  gpio_port->puers = 1 << (pin & 0x1F);
8000222c:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002230:	5e fc       	retal	r12

80002232 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002232:	f8 08 16 05 	lsr	r8,r12,0x5
80002236:	a9 68       	lsl	r8,0x8
80002238:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000223c:	71 88       	ld.w	r8,r8[0x60]
8000223e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002242:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002246:	5e fc       	retal	r12

80002248 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002248:	30 18       	mov	r8,1
8000224a:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000224e:	a5 9c       	lsr	r12,0x5
80002250:	a9 6c       	lsl	r12,0x8
80002252:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002256:	f9 48 00 54 	st.w	r12[84],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000225a:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000225e:	99 18       	st.w	r12[0x4],r8
}
80002260:	5e fc       	retal	r12

80002262 <gpio_clr_gpio_pin>:
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002262:	30 18       	mov	r8,1
80002264:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002268:	a5 9c       	lsr	r12,0x5
8000226a:	a9 6c       	lsl	r12,0x8
8000226c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002270:	f9 48 00 58 	st.w	r12[88],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80002274:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002278:	99 18       	st.w	r12[0x4],r8
}
8000227a:	5e fc       	retal	r12

8000227c <gpio_tgl_gpio_pin>:
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000227c:	30 18       	mov	r8,1
8000227e:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
}

void gpio_tgl_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002282:	a5 9c       	lsr	r12,0x5
80002284:	a9 6c       	lsl	r12,0x8
80002286:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000228a:	f9 48 00 5c 	st.w	r12[92],r8
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000228e:	f9 48 00 44 	st.w	r12[68],r8
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002292:	99 18       	st.w	r12[0x4],r8
}
80002294:	5e fc       	retal	r12

80002296 <gpio_enable_pin_interrupt>:
int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002296:	30 1a       	mov	r10,1
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80002298:	f8 08 16 05 	lsr	r8,r12,0x5

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
8000229c:	f4 0c 09 49 	lsl	r9,r10,r12
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
800022a0:	a9 68       	lsl	r8,0x8
800022a2:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
800022a6:	f1 49 00 c4 	st.w	r8[196],r9
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
800022aa:	14 3b       	cp.w	r11,r10
800022ac:	c0 c0       	breq	800022c4 <gpio_enable_pin_interrupt+0x2e>
800022ae:	c0 82       	brcc	800022be <gpio_enable_pin_interrupt+0x28>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800022b0:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800022b4:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022b8:	f1 49 00 94 	st.w	r8[148],r9
800022bc:	5e fd       	retal	0
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Configure the edge detector.
  switch (mode)
800022be:	58 2b       	cp.w	r11,2
800022c0:	c0 90       	breq	800022d2 <gpio_enable_pin_interrupt+0x3c>
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1s = 1 << (pin & 0x1F);
800022c2:	5e fa       	retal	r10
    gpio_port->imr0c = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
800022c4:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800022c8:	f1 49 00 b8 	st.w	r8[184],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022cc:	f1 49 00 94 	st.w	r8[148],r9
800022d0:	5e fd       	retal	0
    gpio_port->imr0s = 1 << (pin & 0x1F);
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800022d2:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800022d6:	f1 49 00 b4 	st.w	r8[180],r9
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
800022da:	f1 49 00 94 	st.w	r8[148],r9
800022de:	5e fd       	retal	0

800022e0 <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022e0:	f8 08 16 05 	lsr	r8,r12,0x5
800022e4:	a9 68       	lsl	r8,0x8
800022e6:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800022ea:	f0 f8 00 d0 	ld.w	r8,r8[208]
800022ee:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800022f2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800022f6:	5e fc       	retal	r12

800022f8 <gpio_clear_pin_interrupt_flag>:
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800022f8:	30 18       	mov	r8,1
800022fa:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800022fe:	a5 9c       	lsr	r12,0x5
80002300:	a9 6c       	lsl	r12,0x8
80002302:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
80002306:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
8000230a:	5e fc       	retal	r12

8000230c <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000230c:	eb cd 40 f8 	pushm	r3-r7,lr
80002310:	18 98       	mov	r8,r12
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002312:	58 0b       	cp.w	r11,0
80002314:	c3 c0       	breq	8000238c <gpio_enable_module+0x80>
80002316:	30 0e       	mov	lr,0
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
80002318:	30 16       	mov	r6,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000231a:	1c 9c       	mov	r12,lr
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000231c:	30 15       	mov	r5,1
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
8000231e:	30 24       	mov	r4,2
80002320:	30 33       	mov	r3,3
80002322:	c0 d8       	rjmp	8000233c <gpio_enable_module+0x30>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002324:	ea 07 09 4a 	lsl	r10,r5,r7
80002328:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000232a:	93 aa       	st.w	r9[0x28],r10
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
8000232c:	93 2a       	st.w	r9[0x8],r10
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
8000232e:	2f fe       	sub	lr,-1
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002330:	30 09       	mov	r9,0
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002332:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002334:	1c 3b       	cp.w	r11,lr
80002336:	e0 88 00 1a 	brls	8000236a <gpio_enable_module+0x5e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000233a:	2f e8       	sub	r8,-2
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000233c:	11 87       	ld.ub	r7,r8[0x0]
int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];

  // Enable the correct function.
  switch (function)
8000233e:	11 9a       	ld.ub	r10,r8[0x1]
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002340:	ee 09 16 05 	lsr	r9,r7,0x5
80002344:	a9 69       	lsl	r9,0x8
80002346:	e0 29 f0 00 	sub	r9,61440

  // Enable the correct function.
  switch (function)
8000234a:	ec 0a 18 00 	cp.b	r10,r6
8000234e:	c1 00       	breq	8000236e <gpio_enable_module+0x62>
80002350:	ce a3       	brcs	80002324 <gpio_enable_module+0x18>
80002352:	e8 0a 18 00 	cp.b	r10,r4
80002356:	c1 60       	breq	80002382 <gpio_enable_module+0x76>
80002358:	e6 0a 18 00 	cp.b	r10,r3
8000235c:	c0 e0       	breq	80002378 <gpio_enable_module+0x6c>
8000235e:	30 19       	mov	r9,1
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002360:	2f fe       	sub	lr,-1
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002362:	12 4c       	or	r12,r9
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002364:	1c 3b       	cp.w	r11,lr
80002366:	fe 9b ff ea 	brhi	8000233a <gpio_enable_module+0x2e>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
8000236a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000236e:	ea 07 09 4a 	lsl	r10,r5,r7
80002372:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002374:	93 aa       	st.w	r9[0x28],r10
80002376:	cd bb       	rjmp	8000232c <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002378:	ea 07 09 4a 	lsl	r10,r5,r7
8000237c:	93 5a       	st.w	r9[0x14],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
8000237e:	93 9a       	st.w	r9[0x24],r10
80002380:	cd 6b       	rjmp	8000232c <gpio_enable_module+0x20>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002382:	ea 07 09 4a 	lsl	r10,r5,r7
80002386:	93 6a       	st.w	r9[0x18],r10
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002388:	93 9a       	st.w	r9[0x24],r10
8000238a:	cd 1b       	rjmp	8000232c <gpio_enable_module+0x20>
  uint32_t i;

  for (i = 0; i < size; i++)
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
8000238c:	16 9c       	mov	r12,r11
8000238e:	ce eb       	rjmp	8000236a <gpio_enable_module+0x5e>

80002390 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002390:	c0 08       	rjmp	80002390 <_unhandled_interrupt>
80002392:	d7 03       	nop

80002394 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002394:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002398:	fe c8 91 48 	sub	r8,pc,-28344
8000239c:	a5 9b       	lsr	r11,0x5
8000239e:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800023a2:	70 18       	ld.w	r8,r8[0x4]
800023a4:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800023a8:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
800023aa:	c1 20       	breq	800023ce <INTC_register_interrupt+0x3a>
800023ac:	58 1a       	cp.w	r10,1
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
800023ae:	c1 b0       	breq	800023e4 <INTC_register_interrupt+0x50>
800023b0:	58 2a       	cp.w	r10,2
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800023b2:	c2 50       	breq	800023fc <INTC_register_interrupt+0x68>
800023b4:	fe c9 92 86 	sub	r9,pc,-28026
800023b8:	fe c8 93 b8 	sub	r8,pc,-27720
800023bc:	f2 08 01 08 	sub	r8,r9,r8
800023c0:	fe 79 08 00 	mov	r9,-63488
800023c4:	ea 18 c0 00 	orh	r8,0xc000
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800023c8:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800023cc:	5e fc       	retal	r12
800023ce:	fe 78 08 00 	mov	r8,-63488
800023d2:	fe c9 93 d2 	sub	r9,pc,-27694
800023d6:	fe ca 92 d2 	sub	r10,pc,-27950
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800023da:	f4 09 01 09 	sub	r9,r10,r9
800023de:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
800023e2:	5e fc       	retal	r12
800023e4:	fe c9 92 d2 	sub	r9,pc,-27950
800023e8:	fe c8 93 e8 	sub	r8,pc,-27672
800023ec:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800023f0:	fe 79 08 00 	mov	r9,-63488
800023f4:	bf a8       	sbr	r8,0x1e
800023f6:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800023fa:	5e fc       	retal	r12
800023fc:	fe c9 92 dc 	sub	r9,pc,-27940
80002400:	fe c8 94 00 	sub	r8,pc,-27648
80002404:	f2 08 01 08 	sub	r8,r9,r8
80002408:	fe 79 08 00 	mov	r9,-63488
8000240c:	bf b8       	sbr	r8,0x1f
8000240e:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002412:	5e fc       	retal	r12

80002414 <INTC_init_interrupts>:
80002414:	eb cd 40 c0 	pushm	r6-r7,lr
80002418:	fe c8 94 18 	sub	r8,pc,-27624
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000241c:	e3 b8 00 01 	mtsr	0x4,r8
80002420:	fe c6 93 1c 	sub	r6,pc,-27876
80002424:	fe ce 91 d4 	sub	lr,pc,-28204

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002428:	10 16       	sub	r6,r8
8000242a:	30 0c       	mov	r12,0
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000242c:	fe cb 00 9c 	sub	r11,pc,156

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002430:	fe 77 08 00 	mov	r7,-63488
80002434:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002436:	58 0a       	cp.w	r10,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002438:	c0 70       	breq	80002446 <INTC_init_interrupts+0x32>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000243a:	7c 19       	ld.w	r9,lr[0x4]
8000243c:	30 08       	mov	r8,0

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000243e:	12 ab       	st.w	r9++,r11
80002440:	2f f8       	sub	r8,-1
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002442:	14 38       	cp.w	r8,r10
80002444:	cf d3       	brcs	8000243e <INTC_init_interrupts+0x2a>
80002446:	ee 0c 09 26 	st.w	r7[r12<<0x2],r6
8000244a:	2f 8e       	sub	lr,-8
8000244c:	2f fc       	sub	r12,-1
8000244e:	59 4c       	cp.w	r12,20
80002450:	cf 21       	brne	80002434 <INTC_init_interrupts+0x20>
80002452:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002456:	d7 03       	nop

80002458 <_get_interrupt_handler>:
80002458:	e0 68 00 83 	mov	r8,131
8000245c:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002460:	fe 78 08 00 	mov	r8,-63488
80002464:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002468:	f2 ca ff c0 	sub	r10,r9,-64
8000246c:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002470:	58 0c       	cp.w	r12,0
80002472:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002474:	fe c8 92 24 	sub	r8,pc,-28124
80002478:	f8 0c 12 00 	clz	r12,r12
8000247c:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002480:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002484:	72 18       	ld.w	r8,r9[0x4]
80002486:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000248a:	5e fc       	retal	r12

8000248c <pdca_disable>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000248c:	58 ec       	cp.w	r12,14
8000248e:	e0 8b 00 08 	brhi	8000249e <pdca_disable+0x12>


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002492:	a7 6c       	lsl	r12,0x6
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002494:	30 28       	mov	r8,2


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80002496:	e0 3c 00 00 	sub	r12,65536
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8000249a:	99 58       	st.w	r12[0x14],r8

}
8000249c:	5e fc       	retal	r12
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000249e:	3f fc       	mov	r12,-1
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800024a0:	30 28       	mov	r8,2
800024a2:	99 58       	st.w	r12[0x14],r8

}
800024a4:	5e fc       	retal	r12

800024a6 <pdca_disable_interrupt_transfer_complete>:
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800024a6:	58 ec       	cp.w	r12,14
800024a8:	e0 88 00 0c 	brls	800024c0 <pdca_disable_interrupt_transfer_complete+0x1a>
800024ac:	3f fc       	mov	r12,-1
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800024ae:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800024b2:	ed b8 00 10 	bld	r8,0x10
800024b6:	c0 d1       	brne	800024d0 <pdca_disable_interrupt_transfer_complete+0x2a>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800024b8:	30 28       	mov	r8,2
800024ba:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
800024bc:	78 b8       	ld.w	r8,r12[0x2c]
800024be:	5e fc       	retal	r12


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800024c0:	a7 6c       	lsl	r12,0x6
800024c2:	e0 3c 00 00 	sub	r12,65536
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800024c6:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800024ca:	ed b8 00 10 	bld	r8,0x10
800024ce:	cf 50       	breq	800024b8 <pdca_disable_interrupt_transfer_complete+0x12>
800024d0:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800024d2:	30 28       	mov	r8,2
800024d4:	99 98       	st.w	r12[0x24],r8
  pdca_channel->isr;
800024d6:	78 b8       	ld.w	r8,r12[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800024d8:	d5 03       	csrf	0x10
800024da:	5e fc       	retal	r12

800024dc <pdca_init_channel>:
  return pdca_channel;
}


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
800024dc:	d4 01       	pushm	lr


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800024de:	f8 09 15 06 	lsl	r9,r12,0x6
800024e2:	e0 39 00 00 	sub	r9,65536

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800024e6:	58 ec       	cp.w	r12,14
800024e8:	f9 b8 0b ff 	movhi	r8,-1
800024ec:	f0 0e 17 b0 	movhi	lr,r8
800024f0:	f2 08 17 80 	movls	r8,r9
800024f4:	f2 0e 17 80 	movls	lr,r9
void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800024f8:	e1 ba 00 00 	mfsr	r10,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800024fc:	ed ba 00 10 	bld	r10,0x10
80002500:	c3 21       	brne	80002564 <pdca_init_channel+0x88>
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002502:	30 2a       	mov	r10,2
80002504:	9d 9a       	st.w	lr[0x24],r10
  pdca_channel->isr;
80002506:	7c ba       	ld.w	r10,lr[0x2c]
volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80002508:	58 fc       	cp.w	r12,15
8000250a:	f9 b9 02 ff 	movhs	r9,-1
void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000250e:	e1 ba 00 00 	mfsr	r10,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
80002512:	ed ba 00 10 	bld	r10,0x10
80002516:	c2 11       	brne	80002558 <pdca_init_channel+0x7c>
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80002518:	30 1a       	mov	r10,1
8000251a:	93 9a       	st.w	r9[0x24],r10
  pdca_channel->isr;
8000251c:	72 b9       	ld.w	r9,r9[0x2c]
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000251e:	e1 b9 00 00 	mfsr	r9,0x0
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002522:	ee 19 00 01 	eorh	r9,0x1
80002526:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1

  if (global_interrupt_enabled) cpu_irq_disable();
8000252a:	c1 51       	brne	80002554 <pdca_init_channel+0x78>
  pdca_channel->mar = (unsigned long)opt->addr;
8000252c:	76 0a       	ld.w	r10,r11[0x0]
8000252e:	91 0a       	st.w	r8[0x0],r10
  pdca_channel->tcr = opt->size;
80002530:	76 1a       	ld.w	r10,r11[0x4]
80002532:	91 2a       	st.w	r8[0x8],r10
  pdca_channel->psr = opt->pid;
80002534:	76 4a       	ld.w	r10,r11[0x10]
80002536:	91 1a       	st.w	r8[0x4],r10
  pdca_channel->marr = (unsigned long)opt->r_addr;
80002538:	76 2a       	ld.w	r10,r11[0x8]
8000253a:	91 3a       	st.w	r8[0xc],r10
  pdca_channel->tcrr = opt->r_size;
8000253c:	76 3a       	ld.w	r10,r11[0xc]
8000253e:	91 4a       	st.w	r8[0x10],r10
  pdca_channel->mr =
80002540:	76 5a       	ld.w	r10,r11[0x14]
80002542:	91 6a       	st.w	r8[0x18],r10
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002544:	e0 6a 01 00 	mov	r10,256
80002548:	91 5a       	st.w	r8[0x14],r10
  pdca_channel->isr;
8000254a:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
8000254c:	58 09       	cp.w	r9,0
8000254e:	c0 20       	breq	80002552 <pdca_init_channel+0x76>
80002550:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
}
80002552:	d8 0a       	popm	pc,r12=0
  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002554:	d3 03       	ssrf	0x10
80002556:	ce bb       	rjmp	8000252c <pdca_init_channel+0x50>
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002558:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
8000255a:	30 1a       	mov	r10,1
8000255c:	93 9a       	st.w	r9[0x24],r10
  pdca_channel->isr;
8000255e:	72 b9       	ld.w	r9,r9[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80002560:	d5 03       	csrf	0x10
80002562:	cd eb       	rjmp	8000251e <pdca_init_channel+0x42>
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);

  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
80002564:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002566:	30 2a       	mov	r10,2
80002568:	9d 9a       	st.w	lr[0x24],r10
  pdca_channel->isr;
8000256a:	7c ba       	ld.w	r10,lr[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
8000256c:	d5 03       	csrf	0x10
8000256e:	cc db       	rjmp	80002508 <pdca_init_channel+0x2c>

80002570 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002570:	eb cd 40 80 	pushm	r7,lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002574:	30 07       	mov	r7,0
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002576:	40 2e       	lddsp	lr,sp[0x8]
  u_avr32_pm_pll.PLL.pllosc   = osc;
  u_avr32_pm_pll.PLL.plldiv   = div;
  u_avr32_pm_pll.PLL.pllmul   = mul;
  u_avr32_pm_pll.PLL.pllcount = lockcount;

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002578:	2f 8b       	sub	r11,-8
                  unsigned int osc,
                  unsigned int lockcount)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};

  u_avr32_pm_pll.PLL.pllosc   = osc;
8000257a:	ef d8 d0 21 	bfins	r7,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
8000257e:	ef d9 d1 04 	bfins	r7,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002582:	ef da d2 04 	bfins	r7,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002586:	ef de d3 06 	bfins	r7,lr,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
8000258a:	f8 0b 09 27 	st.w	r12[r11<<0x2],r7
}
8000258e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002592 <pm_pll_set_option>:
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002592:	f5 e9 10 19 	or	r9,r10,r9<<0x1
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002596:	2f 8b       	sub	r11,-8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002598:	f3 e8 10 28 	or	r8,r9,r8<<0x2
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
8000259c:	f8 0b 03 29 	ld.w	r9,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800025a0:	f3 d8 d0 43 	bfins	r9,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800025a4:	f8 0b 09 29 	st.w	r12[r11<<0x2],r9
}
800025a8:	5e fc       	retal	r12

800025aa <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800025aa:	2f 8b       	sub	r11,-8
800025ac:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800025b0:	a1 a8       	sbr	r8,0x0
800025b2:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800025b6:	5e fc       	retal	r12

800025b8 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800025b8:	79 58       	ld.w	r8,r12[0x54]
800025ba:	ed b8 00 00 	bld	r8,0x0
800025be:	cf d1       	brne	800025b8 <pm_wait_for_pll0_locked>
}
800025c0:	5e fc       	retal	r12

800025c2 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800025c2:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800025c4:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800025c8:	99 08       	st.w	r12[0x0],r8
}
800025ca:	5e fc       	retal	r12

800025cc <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800025cc:	ec 5b bb 9f 	cp.w	r11,899999
800025d0:	e0 8b 00 18 	brhi	80002600 <pm_switch_to_osc0+0x34>
800025d4:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800025d6:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800025d8:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800025dc:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800025de:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800025e0:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800025e4:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800025e6:	78 08       	ld.w	r8,r12[0x0]
800025e8:	a3 a8       	sbr	r8,0x2
800025ea:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800025ec:	79 58       	ld.w	r8,r12[0x54]
800025ee:	ed b8 00 07 	bld	r8,0x7
800025f2:	cf d1       	brne	800025ec <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800025f4:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800025f6:	30 19       	mov	r9,1
800025f8:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800025fc:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
800025fe:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002600:	e0 68 c6 bf 	mov	r8,50879
80002604:	ea 18 00 2d 	orh	r8,0x2d
80002608:	10 3b       	cp.w	r11,r8
8000260a:	e0 88 00 0c 	brls	80002622 <pm_switch_to_osc0+0x56>
8000260e:	e0 68 12 00 	mov	r8,4608
80002612:	ea 18 00 7a 	orh	r8,0x7a
80002616:	10 3b       	cp.w	r11,r8
80002618:	f9 bb 03 06 	movlo	r11,6
8000261c:	f9 bb 02 07 	movhs	r11,7
80002620:	cd bb       	rjmp	800025d6 <pm_switch_to_osc0+0xa>
80002622:	30 5b       	mov	r11,5
80002624:	cd 9b       	rjmp	800025d6 <pm_switch_to_osc0+0xa>

80002626 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
80002626:	f8 c9 00 01 	sub	r9,r12,1
8000262a:	f8 08 16 01 	lsr	r8,r12,0x1
8000262e:	f2 08 00 08 	add	r8,r9,r8
80002632:	f0 0b 00 0b 	add	r11,r8,r11
80002636:	f6 0c 0d 0a 	divu	r10,r11,r12
8000263a:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
8000263c:	f4 c8 00 01 	sub	r8,r10,1
80002640:	e0 48 00 fe 	cp.w	r8,254
80002644:	e0 8b 00 04 	brhi	8000264c <getBaudDiv+0x26>
    return -1;
  }

  return baudDiv;
80002648:	5c 8c       	casts.h	r12
}
8000264a:	5e fc       	retal	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);

  if (baudDiv <= 0 || baudDiv > 255) {
8000264c:	5e fe       	retal	-1

8000264e <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000264e:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002650:	30 1a       	mov	r10,1
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80002652:	18 98       	mov	r8,r12
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002654:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002658:	f4 09 18 00 	cp.b	r9,r10
8000265c:	e0 88 00 04 	brls	80002664 <spi_initMaster+0x16>
80002660:	30 2c       	mov	r12,2
80002662:	d8 02       	popm	pc
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002664:	e0 6a 00 80 	mov	r10,128
80002668:	99 0a       	st.w	r12[0x0],r10

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
8000266a:	30 0b       	mov	r11,0

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
8000266c:	70 1a       	ld.w	r10,r8[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
8000266e:	30 1e       	mov	lr,1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
  spi->mr = u_avr32_spi_mr.mr;
80002670:	16 9c       	mov	r12,r11
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
80002672:	f5 de d0 01 	bfins	r10,lr,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002676:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000267a:	30 f9       	mov	r9,15

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
  u_avr32_spi_mr.MR.mstr = 1;
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
  u_avr32_spi_mr.MR.llb = 0;
8000267c:	f5 db d0 e1 	bfins	r10,r11,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002680:	f5 d9 d2 04 	bfins	r10,r9,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
80002684:	91 1a       	st.w	r8[0x4],r10

  return SPI_OK;
}
80002686:	d8 02       	popm	pc

80002688 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80002688:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8000268a:	30 18       	mov	r8,1
8000268c:	f0 0b 18 00 	cp.b	r11,r8
80002690:	5f be       	srhi	lr
80002692:	f0 0a 18 00 	cp.b	r10,r8
80002696:	5f b8       	srhi	r8
80002698:	1c 48       	or	r8,lr
8000269a:	c0 a1       	brne	800026ae <spi_selectionMode+0x26>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
8000269c:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
8000269e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800026a2:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
800026a6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
800026aa:	99 18       	st.w	r12[0x4],r8
800026ac:	d8 0a       	popm	pc,r12=0
                               unsigned char pcs_decode,
                               unsigned char delay)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800026ae:	30 2c       	mov	r12,2
800026b0:	d8 02       	popm	pc

800026b2 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800026b2:	78 19       	ld.w	r9,r12[0x4]
  return SPI_OK;
}


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800026b4:	18 98       	mov	r8,r12
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800026b6:	ea 19 00 0f 	orh	r9,0xf
800026ba:	99 19       	st.w	r12[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800026bc:	78 1c       	ld.w	r12,r12[0x4]
800026be:	e2 1c 00 04 	andl	r12,0x4,COH
800026c2:	c0 80       	breq	800026d2 <spi_selectChip+0x20>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800026c4:	30 e9       	mov	r9,14
800026c6:	f2 0b 18 00 	cp.b	r11,r9
800026ca:	e0 88 00 12 	brls	800026ee <spi_selectChip+0x3c>
  } else {
    if (chip > 3) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800026ce:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
800026d0:	5e fc       	retal	r12
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
  } else {
    if (chip > 3) {
800026d2:	30 39       	mov	r9,3
800026d4:	f2 0b 18 00 	cp.b	r11,r9
800026d8:	fe 9b ff fb 	brhi	800026ce <spi_selectChip+0x1c>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800026dc:	70 19       	ld.w	r9,r8[0x4]
800026de:	2f 0b       	sub	r11,-16
800026e0:	30 1a       	mov	r10,1
800026e2:	f4 0b 09 4b 	lsl	r11,r10,r11
800026e6:	5c db       	com	r11
800026e8:	12 6b       	and	r11,r9
800026ea:	91 1b       	st.w	r8[0x4],r11
800026ec:	5e fc       	retal	r12
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
800026ee:	70 19       	ld.w	r9,r8[0x4]
800026f0:	b1 6b       	lsl	r11,0x10
800026f2:	30 0c       	mov	r12,0
800026f4:	ea 1b ff f0 	orh	r11,0xfff0
800026f8:	e8 1b ff ff 	orl	r11,0xffff
800026fc:	12 6b       	and	r11,r9
800026fe:	91 1b       	st.w	r8[0x4],r11
80002700:	5e fc       	retal	r12

80002702 <spi_unselectChip>:
  return SPI_OK;
}


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002702:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002704:	c0 58       	rjmp	8000270e <spi_unselectChip+0xc>
80002706:	2f f9       	sub	r9,-1
    if (!timeout--) {
80002708:	e0 49 3a 99 	cp.w	r9,15001
8000270c:	c0 d0       	breq	80002726 <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000270e:	78 48       	ld.w	r8,r12[0x10]
80002710:	ed b8 00 09 	bld	r8,0x9
80002714:	cf 91       	brne	80002706 <spi_unselectChip+0x4>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002716:	78 18       	ld.w	r8,r12[0x4]
80002718:	ea 18 00 0f 	orh	r8,0xf
8000271c:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000271e:	fc 18 01 00 	movh	r8,0x100
80002722:	99 08       	st.w	r12[0x0],r8
80002724:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002726:	5e ff       	retal	1

80002728 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80002728:	eb cd 40 fe 	pushm	r1-r7,lr
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000272c:	30 34       	mov	r4,3


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
8000272e:	16 97       	mov	r7,r11
80002730:	18 96       	mov	r6,r12
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002732:	f7 35 00 0c 	ld.ub	r5,r11[12]
80002736:	e8 05 18 00 	cp.b	r5,r4
8000273a:	e0 8b 00 09 	brhi	8000274c <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
8000273e:	f7 32 00 0b 	ld.ub	r2,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002742:	30 13       	mov	r3,1
80002744:	e6 02 18 00 	cp.b	r2,r3
80002748:	e0 88 00 05 	brls	80002752 <spi_setupChipReg+0x2a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
      break;
8000274c:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
8000274e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80002752:	f7 31 00 08 	ld.ub	r1,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80002756:	30 78       	mov	r8,7
80002758:	f0 01 18 00 	cp.b	r1,r8
8000275c:	fe 98 ff f8 	brls	8000274c <spi_setupChipReg+0x24>
80002760:	31 08       	mov	r8,16
80002762:	f0 01 18 00 	cp.b	r1,r8
80002766:	fe 9b ff f3 	brhi	8000274c <spi_setupChipReg+0x24>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000276a:	14 9b       	mov	r11,r10
8000276c:	6e 1c       	ld.w	r12,r7[0x4]
8000276e:	c5 cf       	rcall	80002626 <getBaudDiv>
80002770:	ce e5       	brlt	8000274c <spi_setupChipReg+0x24>

  if (baudDiv < 0) {
80002772:	0a 9a       	mov	r10,r5
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002774:	ec 1a 00 01 	eorl	r10,0x1
80002778:	30 08       	mov	r8,0
  if (baudDiv < 0) {
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
8000277a:	a1 95       	lsr	r5,0x1
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000277c:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80002780:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002784:	ef 3a 00 09 	ld.ub	r10,r7[9]
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002788:	20 81       	sub	r1,8
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000278a:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000278e:	0f 89       	ld.ub	r9,r7[0x0]
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
80002790:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002794:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002798:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000279c:	ef 3a 00 0a 	ld.ub	r10,r7[10]
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800027a0:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800027a4:	e6 09 18 00 	cp.b	r9,r3

  switch(options->reg) {
800027a8:	c0 f0       	breq	800027c6 <spi_setupChipReg+0x9e>
800027aa:	c0 b3       	brcs	800027c0 <spi_setupChipReg+0x98>
800027ac:	30 2a       	mov	r10,2
800027ae:	f4 09 18 00 	cp.b	r9,r10
800027b2:	c0 d0       	breq	800027cc <spi_setupChipReg+0xa4>
800027b4:	e8 09 18 00 	cp.b	r9,r4
800027b8:	cc a1       	brne	8000274c <spi_setupChipReg+0x24>
800027ba:	8d f8       	st.w	r6[0x3c],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800027bc:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027c0:	8d c8       	st.w	r6[0x30],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

  switch(options->reg) {
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
800027c2:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027c6:	8d d8       	st.w	r6[0x34],r8
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
800027c8:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027cc:	8d e8       	st.w	r6[0x38],r8
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
800027ce:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800027d2:	d7 03       	nop

800027d4 <spi_enable>:
800027d4:	30 18       	mov	r8,1
800027d6:	99 08       	st.w	r12[0x0],r8


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
800027d8:	5e fc       	retal	r12

800027da <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800027da:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800027dc:	c0 58       	rjmp	800027e6 <spi_write+0xc>
800027de:	2f f9       	sub	r9,-1
    if (!timeout--) {
800027e0:	e0 49 3a 99 	cp.w	r9,15001
800027e4:	c0 80       	breq	800027f4 <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800027e6:	78 48       	ld.w	r8,r12[0x10]
800027e8:	ed b8 00 01 	bld	r8,0x1
800027ec:	cf 91       	brne	800027de <spi_write+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800027ee:	5c 7b       	castu.h	r11
800027f0:	99 3b       	st.w	r12[0xc],r11
800027f2:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
800027f4:	5e ff       	retal	1

800027f6 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
800027f6:	30 09       	mov	r9,0
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800027f8:	c0 58       	rjmp	80002802 <spi_read+0xc>
800027fa:	2f f9       	sub	r9,-1
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
800027fc:	e0 49 3a 99 	cp.w	r9,15001
80002800:	c0 b0       	breq	80002816 <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80002802:	78 48       	ld.w	r8,r12[0x10]
80002804:	e2 18 02 01 	andl	r8,0x201,COH
80002808:	e0 48 02 01 	cp.w	r8,513
8000280c:	cf 71       	brne	800027fa <spi_read+0x4>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000280e:	78 28       	ld.w	r8,r12[0x8]
80002810:	30 0c       	mov	r12,0
80002812:	b6 08       	st.h	r11[0x0],r8

  return SPI_OK;
}
80002814:	5e fc       	retal	r12
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002816:	5e ff       	retal	1

80002818 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80002818:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000281a:	76 09       	ld.w	r9,r11[0x0]
8000281c:	58 29       	cp.w	r9,2
8000281e:	e0 8b 00 4b 	brhi	800028b4 <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002822:	76 18       	ld.w	r8,r11[0x4]
80002824:	10 9e       	mov	lr,r8
80002826:	e6 1e c0 00 	andh	lr,0xc000,COH
8000282a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000282e:	af ba       	sbr	r10,0xf
80002830:	1c 4a       	or	r10,lr
80002832:	10 9e       	mov	lr,r8
80002834:	e6 1e 30 00 	andh	lr,0x3000,COH
80002838:	1c 4a       	or	r10,lr
8000283a:	10 9e       	mov	lr,r8
8000283c:	e6 1e 0c 00 	andh	lr,0xc00,COH
80002840:	1c 4a       	or	r10,lr
80002842:	10 9e       	mov	lr,r8
80002844:	e6 1e 03 00 	andh	lr,0x300,COH
80002848:	1c 4a       	or	r10,lr
8000284a:	10 9e       	mov	lr,r8
8000284c:	e6 1e 00 c0 	andh	lr,0xc0,COH
80002850:	1c 4a       	or	r10,lr
80002852:	10 9e       	mov	lr,r8
80002854:	e6 1e 00 30 	andh	lr,0x30,COH
80002858:	1c 4a       	or	r10,lr
8000285a:	10 9e       	mov	lr,r8
8000285c:	e6 1e 00 0c 	andh	lr,0xc,COH
80002860:	1c 4a       	or	r10,lr
80002862:	10 9e       	mov	lr,r8
80002864:	e6 1e 00 03 	andh	lr,0x3,COH
80002868:	1c 4a       	or	r10,lr
8000286a:	10 9e       	mov	lr,r8
8000286c:	e2 1e 60 00 	andl	lr,0x6000,COH
80002870:	1c 4a       	or	r10,lr
80002872:	10 9e       	mov	lr,r8
80002874:	e2 1e 10 00 	andl	lr,0x1000,COH
80002878:	1c 4a       	or	r10,lr
8000287a:	10 9e       	mov	lr,r8
8000287c:	e2 1e 0c 00 	andl	lr,0xc00,COH
80002880:	1c 4a       	or	r10,lr
80002882:	10 9e       	mov	lr,r8
80002884:	e2 1e 03 00 	andl	lr,0x300,COH
80002888:	1c 4a       	or	r10,lr
8000288a:	10 9e       	mov	lr,r8
8000288c:	e2 1e 00 80 	andl	lr,0x80,COH
80002890:	10 9b       	mov	r11,r8
80002892:	1c 4a       	or	r10,lr
80002894:	e2 1b 00 08 	andl	r11,0x8,COH
80002898:	10 9e       	mov	lr,r8
8000289a:	a5 69       	lsl	r9,0x4
8000289c:	e2 1e 00 40 	andl	lr,0x40,COH
800028a0:	2f f9       	sub	r9,-1
800028a2:	1c 4a       	or	r10,lr
800028a4:	e2 18 00 30 	andl	r8,0x30,COH
800028a8:	f5 e8 10 08 	or	r8,r10,r8
800028ac:	16 48       	or	r8,r11
800028ae:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800028b2:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800028b4:	dc 0a       	popm	pc,r12=-1

800028b6 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028b6:	58 2b       	cp.w	r11,2
800028b8:	e0 8b 00 07 	brhi	800028c6 <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800028bc:	a7 6b       	lsl	r11,0x6
800028be:	16 0c       	add	r12,r11
800028c0:	30 58       	mov	r8,5
800028c2:	99 08       	st.w	r12[0x0],r8
800028c4:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028c6:	5e fe       	retal	-1

800028c8 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028c8:	58 2b       	cp.w	r11,2
800028ca:	e0 8b 00 07 	brhi	800028d8 <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800028ce:	a7 6b       	lsl	r11,0x6
800028d0:	2e 0b       	sub	r11,-32
800028d2:	16 0c       	add	r12,r11
800028d4:	78 0c       	ld.w	r12,r12[0x0]
}
800028d6:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028d8:	5e fe       	retal	-1

800028da <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800028da:	58 2b       	cp.w	r11,2
800028dc:	e0 8b 00 1a 	brhi	80002910 <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800028e0:	f6 08 15 04 	lsl	r8,r11,0x4
800028e4:	2f f8       	sub	r8,-1
800028e6:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800028ea:	ed b8 00 0f 	bld	r8,0xf
800028ee:	c0 e1       	brne	8000290a <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800028f0:	a7 6b       	lsl	r11,0x6
800028f2:	f8 0b 00 0b 	add	r11,r12,r11
800028f6:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800028fa:	2e 4b       	sub	r11,-28
800028fc:	76 08       	ld.w	r8,r11[0x0]
800028fe:	e0 18 00 00 	andl	r8,0x0
80002902:	f9 e8 10 08 	or	r8,r12,r8
80002906:	97 08       	st.w	r11[0x0],r8

  return value;
}
80002908:	5e fc       	retal	r12
8000290a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000290e:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002910:	5e fe       	retal	-1

80002912 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002912:	d4 31       	pushm	r0-r7,lr
80002914:	20 3d       	sub	sp,12
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002916:	e1 b8 00 00 	mfsr	r8,0x0
8000291a:	50 08       	stdsp	sp[0x0],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000291c:	58 2b       	cp.w	r11,2
8000291e:	e0 8b 00 74 	brhi	80002a06 <tc_configure_interrupts+0xf4>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002922:	74 0e       	ld.w	lr,r10[0x0]
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80002924:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002928:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000292c:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80002930:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80002934:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
80002938:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000293c:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002940:	e6 02 15 06 	lsl	r2,r3,0x6
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80002944:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002948:	e5 e8 10 72 	or	r2,r2,r8<<0x7
8000294c:	12 42       	or	r2,r9
8000294e:	e5 e4 10 52 	or	r2,r2,r4<<0x5
80002952:	e5 e5 10 42 	or	r2,r2,r5<<0x4
80002956:	e5 e6 10 32 	or	r2,r2,r6<<0x3
8000295a:	e5 e7 10 22 	or	r2,r2,r7<<0x2
8000295e:	e5 ee 10 12 	or	r2,r2,lr<<0x1
80002962:	50 22       	stdsp	sp[0x8],r2
80002964:	f6 02 15 06 	lsl	r2,r11,0x6
80002968:	40 21       	lddsp	r1,sp[0x8]
8000296a:	f8 02 00 00 	add	r0,r12,r2
8000296e:	2d c0       	sub	r0,-36
80002970:	81 01       	st.w	r0[0x0],r1
80002972:	40 01       	lddsp	r1,sp[0x0]
80002974:	ee 11 00 01 	eorh	r1,0x1
80002978:	e3 d1 c2 01 	bfextu	r1,r1,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000297c:	c4 71       	brne	80002a0a <tc_configure_interrupts+0xf8>
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000297e:	ec 19 00 01 	eorl	r9,0x1
80002982:	e0 6a 00 80 	mov	r10,128
80002986:	58 08       	cp.w	r8,0
80002988:	f4 08 17 00 	moveq	r8,r10
8000298c:	f9 b8 01 00 	movne	r8,0
80002990:	12 48       	or	r8,r9
80002992:	f8 02 00 02 	add	r2,r12,r2
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002996:	58 03       	cp.w	r3,0
80002998:	f9 b3 00 40 	moveq	r3,64
8000299c:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800029a0:	58 04       	cp.w	r4,0
800029a2:	f9 b4 00 20 	moveq	r4,32
800029a6:	f9 b4 01 00 	movne	r4,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029aa:	f1 e3 10 03 	or	r3,r8,r3
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800029ae:	58 05       	cp.w	r5,0
800029b0:	f9 b5 00 10 	moveq	r5,16
800029b4:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800029b8:	58 06       	cp.w	r6,0
800029ba:	f9 b6 00 08 	moveq	r6,8
800029be:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800029c2:	58 07       	cp.w	r7,0
800029c4:	f9 b7 00 04 	moveq	r7,4
800029c8:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800029cc:	58 0e       	cp.w	lr,0
800029ce:	f9 be 00 02 	moveq	lr,2
800029d2:	f9 be 01 00 	movne	lr,0
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029d6:	a7 6b       	lsl	r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029d8:	2d 82       	sub	r2,-40
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029da:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029dc:	e7 e4 10 04 	or	r4,r3,r4
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029e0:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800029e2:	e9 e5 10 05 	or	r5,r4,r5
800029e6:	eb e6 10 06 	or	r6,r5,r6
800029ea:	ed e7 10 07 	or	r7,r6,r7
800029ee:	ef ee 10 0e 	or	lr,r7,lr
800029f2:	85 0e       	st.w	r2[0x0],lr
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800029f4:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800029f6:	58 01       	cp.w	r1,0
800029f8:	c0 41       	brne	80002a00 <tc_configure_interrupts+0xee>
800029fa:	02 9c       	mov	r12,r1

  return 0;
}
800029fc:	2f dd       	sub	sp,-12
800029fe:	d8 32       	popm	r0-r7,pc
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
  if (global_interrupt_enabled) Enable_global_interrupt();
80002a00:	d5 03       	csrf	0x10
80002a02:	2f dd       	sub	sp,-12
80002a04:	d8 3a       	popm	r0-r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002a06:	2f dd       	sub	sp,-12
80002a08:	dc 3a       	popm	r0-r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002a0a:	d3 03       	ssrf	0x10
80002a0c:	74 0e       	ld.w	lr,r10[0x0]
80002a0e:	f3 de c0 01 	bfextu	r9,lr,0x0,0x1
80002a12:	f1 de c0 e1 	bfextu	r8,lr,0x7,0x1
80002a16:	e7 de c0 c1 	bfextu	r3,lr,0x6,0x1
80002a1a:	e9 de c0 a1 	bfextu	r4,lr,0x5,0x1
80002a1e:	eb de c0 81 	bfextu	r5,lr,0x4,0x1
80002a22:	ed de c0 61 	bfextu	r6,lr,0x3,0x1
80002a26:	ef de c0 41 	bfextu	r7,lr,0x2,0x1
80002a2a:	fd de c0 21 	bfextu	lr,lr,0x1,0x1
80002a2e:	ca 8b       	rjmp	8000297e <tc_configure_interrupts+0x6c>

80002a30 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002a30:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002a32:	f6 08 15 04 	lsl	r8,r11,0x4
80002a36:	14 38       	cp.w	r8,r10
80002a38:	e0 8b 00 26 	brhi	80002a84 <usart_set_async_baudrate+0x54>
80002a3c:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002a3e:	f0 09 16 01 	lsr	r9,r8,0x1
80002a42:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80002a46:	f2 08 0d 08 	divu	r8,r9,r8
80002a4a:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002a4c:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a4e:	f0 cb 00 01 	sub	r11,r8,1
80002a52:	e0 4b ff fe 	cp.w	r11,65534
80002a56:	e0 8b 00 1b 	brhi	80002a8c <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002a5a:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002a5c:	e8 6b 00 00 	mov	r11,524288
80002a60:	e4 1a ff f7 	andh	r10,0xfff7
80002a64:	e0 1a fe cf 	andl	r10,0xfecf
80002a68:	59 0e       	cp.w	lr,16
80002a6a:	f6 0e 17 10 	movne	lr,r11
80002a6e:	f9 be 00 00 	moveq	lr,0
80002a72:	fd ea 10 0a 	or	r10,lr,r10
80002a76:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002a78:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80002a7c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002a80:	99 88       	st.w	r12[0x20],r8
80002a82:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002a84:	f6 08 15 03 	lsl	r8,r11,0x3
80002a88:	30 8e       	mov	lr,8
80002a8a:	cd ab       	rjmp	80002a3e <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a8c:	da 0a       	popm	pc,r12=1

80002a8e <usart_spi_selectChip>:


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
80002a8e:	e4 68 00 00 	mov	r8,262144
80002a92:	99 08       	st.w	r12[0x0],r8

  return USART_SUCCESS;
}
80002a94:	5e fd       	retal	0

80002a96 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
80002a96:	30 09       	mov	r9,0
80002a98:	c0 58       	rjmp	80002aa2 <usart_spi_unselectChip+0xc>
80002a9a:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002a9c:	e0 49 27 10 	cp.w	r9,10000
80002aa0:	c0 90       	breq	80002ab2 <usart_spi_unselectChip+0x1c>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
80002aa2:	78 58       	ld.w	r8,r12[0x14]
  } while (!usart_tx_empty(usart));
80002aa4:	ed b8 00 09 	bld	r8,0x9
80002aa8:	cf 91       	brne	80002a9a <usart_spi_unselectChip+0x4>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
80002aaa:	e8 68 00 00 	mov	r8,524288
80002aae:	99 08       	st.w	r12[0x0],r8
80002ab0:	5e fd       	retal	0
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ab2:	5e fe       	retal	-1

80002ab4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002ab4:	30 09       	mov	r9,0
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002ab6:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ab8:	ed b8 00 01 	bld	r8,0x1
80002abc:	c0 51       	brne	80002ac6 <usart_putchar+0x12>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002abe:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002ac2:	99 7b       	st.w	r12[0x1c],r11
80002ac4:	5e fd       	retal	0
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002ac6:	2f f9       	sub	r9,-1
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ac8:	e0 49 27 10 	cp.w	r9,10000
80002acc:	cf 51       	brne	80002ab6 <usart_putchar+0x2>
80002ace:	5e fe       	retal	-1

80002ad0 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002ad0:	17 8a       	ld.ub	r10,r11[0x0]
80002ad2:	58 0a       	cp.w	r10,0
80002ad4:	5e 0c       	reteq	r12
80002ad6:	30 09       	mov	r9,0
80002ad8:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ada:	ed b8 00 01 	bld	r8,0x1
80002ade:	c0 91       	brne	80002af0 <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002ae0:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002ae4:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002ae6:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002ae8:	17 8a       	ld.ub	r10,r11[0x0]
80002aea:	58 0a       	cp.w	r10,0
80002aec:	cf 51       	brne	80002ad6 <usart_write_line+0x6>
80002aee:	5e fc       	retal	r12
80002af0:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002af2:	e0 49 27 10 	cp.w	r9,10000
80002af6:	cf 11       	brne	80002ad8 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002af8:	2f fb       	sub	r11,-1
80002afa:	cf 7b       	rjmp	80002ae8 <usart_write_line+0x18>

80002afc <usart_init_spi_master>:
  return USART_SUCCESS;
}


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
80002afc:	eb cd 40 c0 	pushm	r6-r7,lr
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002b00:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002b04:	ed b8 00 10 	bld	r8,0x10
80002b08:	c5 71       	brne	80002bb6 <usart_init_spi_master+0xba>
  usart->idr = 0xFFFFFFFF;
80002b0a:	3f f8       	mov	r8,-1
80002b0c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002b0e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002b10:	30 08       	mov	r8,0
80002b12:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002b14:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002b16:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002b18:	ea 68 61 0c 	mov	r8,680204
80002b1c:	99 08       	st.w	r12[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b1e:	58 0b       	cp.w	r11,0
80002b20:	c4 90       	breq	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
80002b22:	17 c8       	ld.ub	r8,r11[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b24:	30 49       	mov	r9,4
80002b26:	f2 08 18 00 	cp.b	r8,r9
80002b2a:	e0 88 00 44 	brls	80002bb2 <usart_init_spi_master+0xb6>
80002b2e:	30 99       	mov	r9,9
80002b30:	f2 08 18 00 	cp.b	r8,r9
80002b34:	e0 8b 00 3f 	brhi	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
80002b38:	17 d7       	ld.ub	r7,r11[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b3a:	30 3e       	mov	lr,3
80002b3c:	0e 96       	mov	r6,r7
80002b3e:	fc 07 18 00 	cp.b	r7,lr
80002b42:	e0 8b 00 38 	brhi	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
80002b46:	17 e6       	ld.ub	r6,r11[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b48:	fc 06 18 00 	cp.b	r6,lr
80002b4c:	e0 8b 00 33 	brhi	80002bb2 <usart_init_spi_master+0xb6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002b50:	76 0b       	ld.w	r11,r11[0x0]
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
80002b52:	f6 0e 16 01 	lsr	lr,r11,0x1
80002b56:	1c 0a       	add	r10,lr
80002b58:	f4 0b 0d 0a 	divu	r10,r10,r11

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002b5c:	f4 ce 00 04 	sub	lr,r10,4
80002b60:	e0 4e ff fb 	cp.w	lr,65531
80002b64:	e0 8b 00 27 	brhi	80002bb2 <usart_init_spi_master+0xb6>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
80002b68:	78 1e       	ld.w	lr,r12[0x4]
80002b6a:	e0 1e ff cf 	andl	lr,0xffcf
80002b6e:	99 1e       	st.w	r12[0x4],lr
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
80002b70:	99 8a       	st.w	r12[0x20],r10
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002b72:	f2 08 18 00 	cp.b	r8,r9
80002b76:	c2 60       	breq	80002bc2 <usart_init_spi_master+0xc6>
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002b78:	78 19       	ld.w	r9,r12[0x4]
80002b7a:	20 58       	sub	r8,5
80002b7c:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002b80:	99 18       	st.w	r12[0x4],r8
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002b82:	ee 08 16 01 	lsr	r8,r7,0x1
80002b86:	af 66       	lsl	r6,0xe
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002b88:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002b8c:	ed e8 11 06 	or	r6,r6,r8<<0x10
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002b90:	e0 69 01 0e 	mov	r9,270
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002b94:	78 18       	ld.w	r8,r12[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
80002b96:	58 07       	cp.w	r7,0
80002b98:	f9 b7 01 0e 	movne	r7,14
80002b9c:	f2 07 17 00 	moveq	r7,r9
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
80002ba0:	b3 a8       	sbr	r8,0x12
80002ba2:	ed e7 10 07 	or	r7,r6,r7
80002ba6:	0e 48       	or	r8,r7
80002ba8:	99 18       	st.w	r12[0x4],r8
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002baa:	35 08       	mov	r8,80
80002bac:	99 08       	st.w	r12[0x0],r8
80002bae:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002bb2:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002bb6:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002bb8:	3f f8       	mov	r8,-1
80002bba:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002bbc:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002bbe:	d5 03       	csrf	0x10
80002bc0:	ca 8b       	rjmp	80002b10 <usart_init_spi_master+0x14>
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002bc2:	78 18       	ld.w	r8,r12[0x4]
80002bc4:	b1 b8       	sbr	r8,0x11
80002bc6:	99 18       	st.w	r12[0x4],r8
80002bc8:	cd db       	rjmp	80002b82 <usart_init_spi_master+0x86>
80002bca:	d7 03       	nop

80002bcc <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002bcc:	eb cd 40 e0 	pushm	r5-r7,lr
80002bd0:	18 97       	mov	r7,r12
80002bd2:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002bd4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002bd8:	ed b8 00 10 	bld	r8,0x10
80002bdc:	c2 e1       	brne	80002c38 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
80002bde:	3f f8       	mov	r8,-1
80002be0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002be2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002be4:	30 08       	mov	r8,0
80002be6:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
80002be8:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
80002bea:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002bec:	ea 68 61 0c 	mov	r8,680204
80002bf0:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002bf2:	58 06       	cp.w	r6,0
80002bf4:	c2 00       	breq	80002c34 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
80002bf6:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002bf8:	30 49       	mov	r9,4
80002bfa:	f2 08 18 00 	cp.b	r8,r9
80002bfe:	e0 88 00 1b 	brls	80002c34 <usart_init_rs232+0x68>
80002c02:	30 95       	mov	r5,9
80002c04:	ea 08 18 00 	cp.b	r8,r5
80002c08:	e0 8b 00 16 	brhi	80002c34 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002c0c:	0d d9       	ld.ub	r9,r6[0x5]
80002c0e:	30 78       	mov	r8,7
80002c10:	f0 09 18 00 	cp.b	r9,r8
80002c14:	e0 8b 00 10 	brhi	80002c34 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
80002c18:	8c 39       	ld.sh	r9,r6[0x6]
80002c1a:	e0 68 01 01 	mov	r8,257
80002c1e:	f0 09 19 00 	cp.h	r9,r8
80002c22:	e0 8b 00 09 	brhi	80002c34 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
80002c26:	ed 39 00 08 	ld.ub	r9,r6[8]
80002c2a:	30 38       	mov	r8,3
80002c2c:	f0 09 18 00 	cp.b	r9,r8
80002c30:	e0 88 00 0a 	brls	80002c44 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002c34:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002c38:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002c3a:	3f f8       	mov	r8,-1
80002c3c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002c3e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002c40:	d5 03       	csrf	0x10
80002c42:	cd 1b       	rjmp	80002be4 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002c44:	6c 0b       	ld.w	r11,r6[0x0]
80002c46:	0e 9c       	mov	r12,r7
80002c48:	cf 4e       	rcall	80002a30 <usart_set_async_baudrate>
80002c4a:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002c4c:	cf 40       	breq	80002c34 <usart_init_rs232+0x68>
80002c4e:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002c50:	ea 08 18 00 	cp.b	r8,r5
80002c54:	c2 a0       	breq	80002ca8 <usart_init_rs232+0xdc>
80002c56:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002c58:	20 58       	sub	r8,5
80002c5a:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002c5e:	8f 18       	st.w	r7[0x4],r8
80002c60:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002c62:	ed 3a 00 08 	ld.ub	r10,r6[8]
80002c66:	0d d8       	ld.ub	r8,r6[0x5]
80002c68:	a9 78       	lsl	r8,0x9
80002c6a:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002c6e:	12 48       	or	r8,r9
80002c70:	8f 18       	st.w	r7[0x4],r8
80002c72:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002c74:	8c 38       	ld.sh	r8,r6[0x6]
80002c76:	f2 08 19 00 	cp.h	r8,r9
80002c7a:	e0 88 00 11 	brls	80002c9c <usart_init_rs232+0xd0>
80002c7e:	6e 19       	ld.w	r9,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002c80:	ad b9       	sbr	r9,0xd
80002c82:	8f 19       	st.w	r7[0x4],r9
80002c84:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002c86:	20 28       	sub	r8,2
80002c88:	8f a8       	st.w	r7[0x28],r8
80002c8a:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002c8c:	e0 18 ff f0 	andl	r8,0xfff0
80002c90:	8f 18       	st.w	r7[0x4],r8
80002c92:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002c94:	35 08       	mov	r8,80
80002c96:	8f 08       	st.w	r7[0x0],r8
80002c98:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002c9c:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002c9e:	5c 78       	castu.h	r8
80002ca0:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002ca4:	8f 18       	st.w	r7[0x4],r8
80002ca6:	cf 2b       	rjmp	80002c8a <usart_init_rs232+0xbe>
80002ca8:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002caa:	b1 b8       	sbr	r8,0x11
80002cac:	8f 18       	st.w	r7[0x4],r8
80002cae:	cd 9b       	rjmp	80002c60 <usart_init_rs232+0x94>

80002cb0 <fat_cache_clusterlist_reset>:
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002cb0:	3f f9       	mov	r9,-1
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002cb2:	e0 68 13 14 	mov	r8,4884
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80002cb6:	f1 69 00 15 	st.b	r8[21],r9
80002cba:	b0 a9       	st.b	r8[0x2],r9
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002cbc:	b0 99       	st.b	r8[0x1],r9
80002cbe:	f1 69 00 16 	st.b	r8[22],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002cc2:	30 09       	mov	r9,0
80002cc4:	f1 69 00 14 	st.b	r8[20],r9
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80002cc8:	e0 6a 15 92 	mov	r10,5522
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002ccc:	b4 89       	st.b	r10[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
   }
}
80002cce:	30 19       	mov	r9,1
80002cd0:	b0 89       	st.b	r8[0x0],r9
80002cd2:	5e fc       	retal	r12

80002cd4 <fat_cache_clusterlist_update_finish>:
80002cd4:	d4 21       	pushm	r4-r7,lr
80002cd6:	e0 68 15 40 	mov	r8,5440
//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80002cda:	e0 6e 15 e8 	mov	lr,5608

//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80002cde:	11 8a       	ld.ub	r10,r8[0x0]
80002ce0:	11 95       	ld.ub	r5,r8[0x1]
80002ce2:	e0 69 13 14 	mov	r9,4884
80002ce6:	e0 6b 15 92 	mov	r11,5522
80002cea:	17 8b       	ld.ub	r11,r11[0x0]
80002cec:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80002cf0:	a3 6b       	lsl	r11,0x2
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80002cf2:	f2 0b 00 08 	add	r8,r9,r11
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80002cf6:	f0 cc ff f8 	sub	r12,r8,-8

//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80002cfa:	7c 16       	ld.w	r6,lr[0x4]
80002cfc:	b0 aa       	st.b	r8[0x2],r10
80002cfe:	7c 07       	ld.w	r7,lr[0x0]
80002d00:	78 0e       	ld.w	lr,r12[0x0]
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80002d02:	fc 05 0d 04 	divu	r4,lr,r5
80002d06:	f5 d5 c0 08 	bfextu	r10,r5,0x0,0x8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80002d0a:	14 1e       	sub	lr,r10
80002d0c:	14 17       	sub	r7,r10
80002d0e:	99 0e       	st.w	r12[0x0],lr

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002d10:	91 37       	st.w	r8[0xc],r7
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80002d12:	f4 06 00 0c 	add	r12,r10,r6
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002d16:	91 4c       	st.w	r8[0x10],r12
80002d18:	13 8a       	ld.ub	r10,r9[0x0]
80002d1a:	11 9c       	ld.ub	r12,r8[0x1]
80002d1c:	11 88       	ld.ub	r8,r8[0x0]
80002d1e:	f0 0a 18 00 	cp.b	r10,r8
80002d22:	c0 c0       	breq	80002d3a <fat_cache_clusterlist_update_finish+0x66>
80002d24:	e0 6e 13 14 	mov	lr,4884
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80002d28:	f3 3a 00 14 	ld.ub	r10,r9[20]
80002d2c:	f0 0a 18 00 	cp.b	r10,r8
   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002d30:	c0 d0       	breq	80002d4a <fat_cache_clusterlist_update_finish+0x76>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002d32:	16 09       	add	r9,r11
80002d34:	30 08       	mov	r8,0
80002d36:	b2 98       	st.b	r9[0x1],r8
80002d38:	d8 22       	popm	r4-r7,pc
80002d3a:	13 9a       	ld.ub	r10,r9[0x1]
80002d3c:	f8 0a 18 00 	cp.b	r10,r12
   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002d40:	f7 ba 03 ff 	sublo	r10,-1
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002d44:	f3 fa 3e 01 	st.bcs	r9[0x1],r10
80002d48:	ce eb       	rjmp	80002d24 <fat_cache_clusterlist_update_finish+0x50>
80002d4a:	fd 38 00 15 	ld.ub	r8,lr[21]
80002d4e:	f0 0c 18 00 	cp.b	r12,r8
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80002d52:	f7 b8 0b ff 	subhi	r8,-1
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
}
80002d56:	fd f8 be 15 	st.bhi	lr[0x15],r8
80002d5a:	16 09       	add	r9,r11
80002d5c:	30 08       	mov	r8,0
80002d5e:	b2 98       	st.b	r9[0x1],r8
80002d60:	d8 22       	popm	r4-r7,pc
80002d62:	d7 03       	nop

80002d64 <fat_entry_check>:
80002d64:	e0 68 15 8c 	mov	r8,5516
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002d68:	90 99       	ld.uh	r9,r8[0x2]
80002d6a:	e0 68 13 40 	mov	r8,4928
80002d6e:	a5 79       	lsl	r9,0x5
80002d70:	f3 d9 c0 09 	bfextu	r9,r9,0x0,0x9
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();

   u8_first_byte = u8_ptr_entry[0];
   if ( FS_ENTRY_END == u8_first_byte )
80002d74:	10 09       	add	r9,r8
80002d76:	13 88       	ld.ub	r8,r9[0x0]
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80002d78:	58 08       	cp.w	r8,0
80002d7a:	c1 a0       	breq	80002dae <fat_entry_check+0x4a>
80002d7c:	e0 6a 15 90 	mov	r10,5520
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80002d80:	30 bb       	mov	r11,11
80002d82:	b4 8b       	st.b	r10[0x0],r11
80002d84:	3e 5a       	mov	r10,-27
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80002d86:	f4 08 18 00 	cp.b	r8,r10
80002d8a:	c1 10       	breq	80002dac <fat_entry_check+0x48>
80002d8c:	32 ea       	mov	r10,46
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check attribut
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80002d8e:	f4 08 18 00 	cp.b	r8,r10
80002d92:	c0 d0       	breq	80002dac <fat_entry_check+0x48>
80002d94:	f3 38 00 0b 	ld.ub	r8,r9[11]
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80002d98:	ed b8 00 03 	bld	r8,0x3
80002d9c:	c0 80       	breq	80002dac <fat_entry_check+0x48>
   {
      return (FS_DIR == b_type);
80002d9e:	ed b8 00 04 	bld	r8,0x4
80002da2:	5e 1c       	retne	r12
80002da4:	ec 1c 00 01 	eorl	r12,0x1
   u8_ptr_entry = fat_get_ptr_entry();

   u8_first_byte = u8_ptr_entry[0];
   if ( FS_ENTRY_END == u8_first_byte )
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80002da8:	5c 5c       	castu.b	r12
80002daa:	5e fc       	retal	r12
80002dac:	5e fd       	retal	0
80002dae:	10 9c       	mov	r12,r8
      return false;
80002db0:	30 a9       	mov	r9,10
80002db2:	e0 68 15 90 	mov	r8,5520
80002db6:	b0 89       	st.b	r8[0x0],r9
80002db8:	5e fc       	retal	r12
80002dba:	d7 03       	nop

80002dbc <fat_get_entry_info>:
80002dbc:	eb cd 40 c0 	pushm	r6-r7,lr
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002dc0:	e0 69 15 8c 	mov	r9,5516
80002dc4:	92 9b       	ld.uh	r11,r9[0x2]
80002dc6:	e0 69 13 40 	mov	r9,4928
80002dca:	a5 7b       	lsl	r11,0x5
80002dcc:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
   ptr_entry += (26-20);
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];

   // Get the size of file
   ptr_entry += (28-26);
80002dd0:	12 0b       	add	r11,r9
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
80002dd2:	f6 c9 ff e4 	sub	r9,r11,-28
   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80002dd6:	13 be       	ld.ub	lr,r9[0x3]
80002dd8:	e0 6c 13 00 	mov	r12,4864
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];

   // Get the size of file
   ptr_entry += (28-26);
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80002ddc:	f6 c7 ff ec 	sub	r7,r11,-20
   fs_g_nav_entry.u8_attr = ptr_entry[0];

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80002de0:	f8 c8 ff f8 	sub	r8,r12,-8
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80002de4:	b0 8e       	st.b	r8[0x0],lr
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80002de6:	0f 9e       	ld.ub	lr,r7[0x1]
   ptr_entry += (26-20);
80002de8:	f8 ca ff fc 	sub	r10,r12,-4
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80002dec:	b4 8e       	st.b	r10[0x0],lr
80002dee:	f6 ce ff e6 	sub	lr,r11,-26

   ptr_entry = fat_get_ptr_entry();

   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
80002df2:	1d 96       	ld.ub	r6,lr[0x1]
80002df4:	b4 a6       	st.b	r10[0x2],r6

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80002df6:	f7 3b 00 0b 	ld.ub	r11,r11[11]
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
   ptr_entry += (26-20);
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80002dfa:	b8 ab       	st.b	r12[0x2],r11
80002dfc:	0f 8b       	ld.ub	r11,r7[0x0]
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];

   // Get the size of file
   ptr_entry += (28-26);
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80002dfe:	b4 9b       	st.b	r10[0x1],r11
80002e00:	1d 8b       	ld.ub	r11,lr[0x0]
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80002e02:	b4 bb       	st.b	r10[0x3],r11
80002e04:	13 8a       	ld.ub	r10,r9[0x0]
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
80002e06:	b0 ba       	st.b	r8[0x3],r10
80002e08:	13 9a       	ld.ub	r10,r9[0x1]
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
}
80002e0a:	b0 aa       	st.b	r8[0x2],r10
80002e0c:	13 a9       	ld.ub	r9,r9[0x2]
80002e0e:	b0 99       	st.b	r8[0x1],r9
80002e10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80002e14 <fat_entry_is_dir>:
80002e14:	e0 68 15 90 	mov	r8,5520
80002e18:	30 d9       	mov	r9,13
80002e1a:	b0 89       	st.b	r8[0x0],r9
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80002e1c:	e0 68 13 00 	mov	r8,4864
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
80002e20:	11 ac       	ld.ub	r12,r8[0x2]
80002e22:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002e26:	5e fc       	retal	r12

80002e28 <fat_clear_entry_info_and_ptr>:
80002e28:	3f f9       	mov	r9,-1
80002e2a:	e0 68 15 40 	mov	r8,5440
//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80002e2e:	e0 6a 15 8c 	mov	r10,5516

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
80002e32:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
   if( !fs_g_nav.b_mode_nav_single )
80002e36:	b4 19       	st.h	r10[0x2],r9
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80002e38:	f1 39 00 2d 	ld.ub	r9,r8[45]
80002e3c:	58 09       	cp.w	r9,0
   }
   fs_g_nav_entry.u8_attr     = 0;
80002e3e:	f1 f9 0e 2c 	st.beq	r8[0x2c],r9
   fs_g_nav_entry.u32_cluster = 0;
   fs_g_nav_entry.u32_size    = 0;
   Fat_file_close();
80002e42:	e0 68 13 00 	mov	r8,4864
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
   }
   fs_g_nav_entry.u8_attr     = 0;
   fs_g_nav_entry.u32_cluster = 0;
   fs_g_nav_entry.u32_size    = 0;
80002e46:	30 09       	mov	r9,0
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
   if( !fs_g_nav.b_mode_nav_single )
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
   }
   fs_g_nav_entry.u8_attr     = 0;
80002e48:	b0 89       	st.b	r8[0x0],r9
   fs_g_nav_entry.u32_cluster = 0;
   fs_g_nav_entry.u32_size    = 0;
   Fat_file_close();
}
80002e4a:	91 19       	st.w	r8[0x4],r9
80002e4c:	91 29       	st.w	r8[0x8],r9
80002e4e:	b0 a9       	st.b	r8[0x2],r9
80002e50:	5e fc       	retal	r12
80002e52:	d7 03       	nop

80002e54 <fat_write_entry_file>:
80002e54:	e0 6a 13 40 	mov	r10,4928
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002e58:	e0 69 13 00 	mov	r9,4864
80002e5c:	e0 68 15 8c 	mov	r8,5516
80002e60:	90 98       	ld.uh	r8,r8[0x2]
80002e62:	a5 78       	lsl	r8,0x5
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the attribut
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
80002e64:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002e68:	14 08       	add	r8,r10

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80002e6a:	13 aa       	ld.ub	r10,r9[0x2]
80002e6c:	f1 6a 00 0b 	st.b	r8[11],r10
   //! Write the attribut
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80002e70:	f2 ca ff fc 	sub	r10,r9,-4
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80002e74:	15 9c       	ld.ub	r12,r10[0x1]
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
80002e76:	f0 cb ff ec 	sub	r11,r8,-20
   ptr_entry += (26-20);
80002e7a:	b6 8c       	st.b	r11[0x0],r12
80002e7c:	15 8c       	ld.ub	r12,r10[0x0]
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
80002e7e:	b6 9c       	st.b	r11[0x1],r12
80002e80:	f0 cb ff e6 	sub	r11,r8,-26

   //! Write the size of file
   ptr_entry += (28-26);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80002e84:	15 ac       	ld.ub	r12,r10[0x2]
   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
   ptr_entry += (26-20);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80002e86:	b6 9c       	st.b	r11[0x1],r12
   //! Write the size of file
   ptr_entry += (28-26);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
80002e88:	15 ba       	ld.ub	r10,r10[0x3]
   ptr_entry += (26-20);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);

   //! Write the size of file
   ptr_entry += (28-26);
80002e8a:	2f 89       	sub	r9,-8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
80002e8c:	b6 8a       	st.b	r11[0x0],r10

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80002e8e:	13 8a       	ld.ub	r10,r9[0x0]
80002e90:	2e 48       	sub	r8,-28
80002e92:	b0 ba       	st.b	r8[0x3],r10
80002e94:	e0 6a 15 c8 	mov	r10,5576
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);

   //! Write the size of file
   ptr_entry += (28-26);
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80002e98:	30 1b       	mov	r11,1
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80002e9a:	f5 6b 00 08 	st.b	r10[8],r11
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
80002e9e:	13 ba       	ld.ub	r10,r9[0x3]
80002ea0:	b0 8a       	st.b	r8[0x0],r10
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
}
80002ea2:	13 aa       	ld.ub	r10,r9[0x2]
80002ea4:	b0 9a       	st.b	r8[0x1],r10
80002ea6:	13 99       	ld.ub	r9,r9[0x1]
80002ea8:	b0 a9       	st.b	r8[0x2],r9
80002eaa:	5e fc       	retal	r12

80002eac <fat_entry_shortname>:
80002eac:	d4 31       	pushm	r0-r7,lr
80002eae:	20 1d       	sub	sp,4
80002eb0:	e0 68 15 90 	mov	r8,5520
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80002eb4:	31 69       	mov	r9,22
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80002eb6:	b0 89       	st.b	r8[0x0],r9
80002eb8:	e0 68 15 8c 	mov	r8,5516
80002ebc:	90 9e       	ld.uh	lr,r8[0x2]
80002ebe:	e0 68 13 40 	mov	r8,4928
80002ec2:	a5 7e       	lsl	lr,0x5
80002ec4:	fd de c0 09 	bfextu	lr,lr,0x0,0x9
80002ec8:	10 0e       	add	lr,r8
80002eca:	58 0a       	cp.w	r10,0
80002ecc:	c5 b1       	brne	80002f82 <fat_entry_shortname+0xd6>
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002ece:	30 18       	mov	r8,1
80002ed0:	14 99       	mov	r9,r10
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002ed2:	50 08       	stdsp	sp[0x0],r8
80002ed4:	30 b6       	mov	r6,11
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80002ed6:	19 8b       	ld.ub	r11,r12[0x0]
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80002ed8:	30 85       	mov	r5,8
80002eda:	32 04       	mov	r4,32
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002edc:	32 a7       	mov	r7,42
80002ede:	32 f0       	mov	r0,47
80002ee0:	35 c1       	mov	r1,92
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80002ee2:	ec 0a 18 00 	cp.b	r10,r6
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002ee6:	c2 40       	breq	80002f2e <fat_entry_shortname+0x82>
80002ee8:	fc 0a 07 08 	ld.ub	r8,lr[r10]
80002eec:	ea 0a 18 00 	cp.b	r10,r5
80002ef0:	c3 70       	breq	80002f5e <fat_entry_shortname+0xb2>
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80002ef2:	e8 08 18 00 	cp.b	r8,r4
80002ef6:	c1 80       	breq	80002f26 <fat_entry_shortname+0x7a>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80002ef8:	ee 0b 18 00 	cp.b	r11,r7
80002efc:	c1 20       	breq	80002f20 <fat_entry_shortname+0x74>
80002efe:	58 08       	cp.w	r8,0
80002f00:	c1 91       	brne	80002f32 <fat_entry_shortname+0x86>
80002f02:	e0 0b 18 00 	cp.b	r11,r0
80002f06:	5f 12       	srne	r2
80002f08:	e2 0b 18 00 	cp.b	r11,r1
80002f0c:	5f 13       	srne	r3
80002f0e:	06 62       	and	r2,r3

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80002f10:	f0 02 18 00 	cp.b	r2,r8
      }

      // For each characters
      if (0 == u8_entry_char)
      {
         if( g_b_string_length )
80002f14:	c0 f1       	brne	80002f32 <fat_entry_shortname+0x86>
80002f16:	e0 68 15 91 	mov	r8,5521
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
   }
}
80002f1a:	11 83       	ld.ub	r3,r8[0x0]
80002f1c:	58 03       	cp.w	r3,0
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80002f1e:	c7 51       	brne	80003008 <fat_entry_shortname+0x15c>
80002f20:	30 1c       	mov	r12,1
80002f22:	2f fd       	sub	sp,-4
80002f24:	d8 32       	popm	r0-r7,pc
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002f26:	ea 0a 18 00 	cp.b	r10,r5
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
80002f2a:	e0 88 00 1d 	brls	80002f64 <fat_entry_shortname+0xb8>
80002f2e:	30 08       	mov	r8,0
80002f30:	ce 4b       	rjmp	80002ef8 <fat_entry_shortname+0x4c>
80002f32:	f0 0b 18 00 	cp.b	r11,r8
80002f36:	c2 10       	breq	80002f78 <fat_entry_shortname+0xcc>
80002f38:	f0 c3 ff e0 	sub	r3,r8,-32
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
80002f3c:	06 3b       	cp.w	r11,r3
80002f3e:	c6 91       	brne	80003010 <fat_entry_shortname+0x164>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80002f40:	e0 63 15 91 	mov	r3,5521
80002f44:	07 83       	ld.ub	r3,r3[0x0]
80002f46:	58 08       	cp.w	r8,0
80002f48:	ce a0       	breq	80002f1c <fat_entry_shortname+0x70>
      }
      u8_pos_name++;
80002f4a:	58 03       	cp.w	r3,0
      u8_pos_entry++;
80002f4c:	f7 bc 00 ff 	subeq	r12,-1
80002f50:	f9 fb 08 00 	ld.ubeq	r11,r12[0x0]
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002f54:	2f f9       	sub	r9,-1
80002f56:	2f fa       	sub	r10,-1
80002f58:	5c 59       	castu.b	r9
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002f5a:	5c 5a       	castu.b	r10
80002f5c:	cc 3b       	rjmp	80002ee2 <fat_entry_shortname+0x36>
80002f5e:	40 03       	lddsp	r3,sp[0x0]
80002f60:	58 03       	cp.w	r3,0
80002f62:	cc 80       	breq	80002ef2 <fat_entry_shortname+0x46>
80002f64:	fd 38 00 08 	ld.ub	r8,lr[8]
80002f68:	e8 08 18 00 	cp.b	r8,r4
80002f6c:	ce 10       	breq	80002f2e <fat_entry_shortname+0x82>
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
80002f6e:	30 03       	mov	r3,0
80002f70:	30 7a       	mov	r10,7
80002f72:	32 e8       	mov	r8,46
80002f74:	50 03       	stdsp	sp[0x0],r3
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
80002f76:	cc 1b       	rjmp	80002ef8 <fat_entry_shortname+0x4c>

      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            if(u8_pos_name >= (u8_size_max-1))
80002f78:	e0 68 15 91 	mov	r8,5521
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
80002f7c:	11 83       	ld.ub	r3,r8[0x0]
80002f7e:	16 98       	mov	r8,r11
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002f80:	ce 3b       	rjmp	80002f46 <fat_entry_shortname+0x9a>
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002f82:	30 08       	mov	r8,0
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002f84:	20 1b       	sub	r11,1
         if( !g_b_string_length )
         {
            if(u8_pos_name >= (u8_size_max-1))
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80002f86:	30 12       	mov	r2,1
80002f88:	10 99       	mov	r9,r8
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80002f8a:	e0 67 15 91 	mov	r7,5521
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002f8e:	30 b6       	mov	r6,11
80002f90:	30 85       	mov	r5,8
80002f92:	32 04       	mov	r4,32
80002f94:	31 91       	mov	r1,25
80002f96:	c1 a8       	rjmp	80002fca <fat_entry_shortname+0x11e>
80002f98:	fc 08 07 0a 	ld.ub	r10,lr[r8]
         }
      }

      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80002f9c:	ea 08 18 00 	cp.b	r8,r5
         {
            if(u8_pos_name >= (u8_size_max-1))
80002fa0:	c1 a0       	breq	80002fd4 <fat_entry_shortname+0x128>
80002fa2:	e8 0a 18 00 	cp.b	r10,r4

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80002fa6:	c2 20       	breq	80002fea <fat_entry_shortname+0x13e>
80002fa8:	0f 83       	ld.ub	r3,r7[0x0]
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
80002faa:	58 03       	cp.w	r3,0
80002fac:	c0 61       	brne	80002fb8 <fat_entry_shortname+0x10c>
      }
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80002fae:	16 39       	cp.w	r9,r11
      u8_pos_entry++;
80002fb0:	c2 35       	brlt	80002ff6 <fat_entry_shortname+0x14a>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80002fb2:	06 9a       	mov	r10,r3
80002fb4:	b8 8a       	st.b	r12[0x0],r10
80002fb6:	0f 83       	ld.ub	r3,r7[0x0]
      }
      u8_pos_name++;
80002fb8:	58 0a       	cp.w	r10,0
      u8_pos_entry++;
80002fba:	cb 10       	breq	80002f1c <fat_entry_shortname+0x70>
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80002fbc:	2f f9       	sub	r9,-1
80002fbe:	2f f8       	sub	r8,-1
80002fc0:	58 03       	cp.w	r3,0
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002fc2:	f7 bc 00 ff 	subeq	r12,-1
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80002fc6:	5c 59       	castu.b	r9
80002fc8:	5c 58       	castu.b	r8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002fca:	ec 08 18 00 	cp.b	r8,r6
80002fce:	ce 51       	brne	80002f98 <fat_entry_shortname+0xec>
80002fd0:	30 0a       	mov	r10,0
80002fd2:	ce bb       	rjmp	80002fa8 <fat_entry_shortname+0xfc>
80002fd4:	58 02       	cp.w	r2,0
80002fd6:	ce 60       	breq	80002fa2 <fat_entry_shortname+0xf6>
80002fd8:	fd 3a 00 08 	ld.ub	r10,lr[8]
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80002fdc:	e8 0a 18 00 	cp.b	r10,r4
80002fe0:	cf 80       	breq	80002fd0 <fat_entry_shortname+0x124>
80002fe2:	30 78       	mov	r8,7
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80002fe4:	32 ea       	mov	r10,46
80002fe6:	30 02       	mov	r2,0
         if( !g_b_string_length )
         {
            if(u8_pos_name >= (u8_size_max-1))
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80002fe8:	ce 0b       	rjmp	80002fa8 <fat_entry_shortname+0xfc>
80002fea:	ea 08 18 00 	cp.b	r8,r5
80002fee:	fe 98 ff f5 	brls	80002fd8 <fat_entry_shortname+0x12c>
80002ff2:	30 0a       	mov	r10,0
               u8_entry_char += ('a'-'A');                           // display short name in down case
80002ff4:	cd ab       	rjmp	80002fa8 <fat_entry_shortname+0xfc>
80002ff6:	f4 c3 00 41 	sub	r3,r10,65
      // For each characters
      if (0 == u8_entry_char)
      {
         if( g_b_string_length )
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80002ffa:	e2 03 18 00 	cp.b	r3,r1
80002ffe:	fe 9b ff db 	brhi	80002fb4 <fat_entry_shortname+0x108>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      u8_pos_entry++;
   }
80003002:	2e 0a       	sub	r10,-32
80003004:	5c 5a       	castu.b	r10
80003006:	cd 7b       	rjmp	80002fb4 <fat_entry_shortname+0x108>
80003008:	2f f9       	sub	r9,-1
8000300a:	b8 09       	st.h	r12[0x0],r9
8000300c:	2f fd       	sub	sp,-4
8000300e:	da 3a       	popm	r0-r7,pc,r12=1
80003010:	30 0c       	mov	r12,0
80003012:	c8 8b       	rjmp	80002f22 <fat_entry_shortname+0x76>

80003014 <fat_entry_longname>:
80003014:	d4 31       	pushm	r0-r7,lr
80003016:	20 3d       	sub	sp,12
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
80003018:	e0 6e 13 40 	mov	lr,4928
8000301c:	e0 68 15 8c 	mov	r8,5516
80003020:	90 98       	ld.uh	r8,r8[0x2]
80003022:	a5 78       	lsl	r8,0x5
80003024:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003028:	1c 08       	add	r8,lr
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000302a:	3e 5e       	mov	lr,-27
8000302c:	11 87       	ld.ub	r7,r8[0x0]
8000302e:	fc 07 18 00 	cp.b	r7,lr
80003032:	5f 05       	sreq	r5
80003034:	30 0e       	mov	lr,0
80003036:	fc 07 18 00 	cp.b	r7,lr
8000303a:	5f 06       	sreq	r6
8000303c:	eb e6 10 06 	or	r6,r5,r6
80003040:	fc 06 18 00 	cp.b	r6,lr
80003044:	c0 71       	brne	80003052 <fat_entry_longname+0x3e>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80003046:	f1 36 00 0b 	ld.ub	r6,r8[11]
8000304a:	30 fe       	mov	lr,15
8000304c:	fc 06 18 00 	cp.b	r6,lr
80003050:	c0 80       	breq	80003060 <fat_entry_longname+0x4c>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80003052:	30 b9       	mov	r9,11
80003054:	e0 68 15 90 	mov	r8,5520
80003058:	30 0c       	mov	r12,0
8000305a:	b0 89       	st.b	r8[0x0],r9
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
   }
}
8000305c:	2f dd       	sub	sp,-12
8000305e:	d8 32       	popm	r0-r7,pc
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
      return false;
   }

   if( g_b_string_length )
80003060:	e0 6e 15 91 	mov	lr,5521
80003064:	1d 82       	ld.ub	r2,lr[0x0]
80003066:	58 02       	cp.w	r2,0
80003068:	c5 21       	brne	8000310c <fat_entry_longname+0xf8>
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
         return false;                          // Other entry long name
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
8000306a:	2f f8       	sub	r8,-1
8000306c:	fa c7 ff f6 	sub	r7,sp,-10
80003070:	fa c6 ff f5 	sub	r6,sp,-11
80003074:	58 0a       	cp.w	r10,0
80003076:	c5 41       	brne	8000311e <fat_entry_longname+0x10a>
80003078:	58 09       	cp.w	r9,0
8000307a:	c7 c1       	brne	80003172 <fat_entry_longname+0x15e>
8000307c:	19 8b       	ld.ub	r11,r12[0x0]
8000307e:	14 99       	mov	r9,r10
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80003080:	32 a4       	mov	r4,42
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003082:	30 43       	mov	r3,4
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80003084:	30 a1       	mov	r1,10
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80003086:	50 1a       	stdsp	sp[0x4],r10
80003088:	c1 38       	rjmp	800030ae <fat_entry_longname+0x9a>
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
8000308a:	e2 09 18 00 	cp.b	r9,r1
8000308e:	e0 80 00 e1 	breq	80003250 <fat_entry_longname+0x23c>
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80003092:	30 c0       	mov	r0,12
80003094:	e0 09 18 00 	cp.b	r9,r0
80003098:	e0 80 00 b5 	breq	80003202 <fat_entry_longname+0x1ee>
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
8000309c:	1d 82       	ld.ub	r2,lr[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
8000309e:	2f f9       	sub	r9,-1
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
800030a0:	58 02       	cp.w	r2,0
800030a2:	f7 bc 00 ff 	subeq	r12,-1
800030a6:	f9 fb 08 00 	ld.ubeq	r11,r12[0x0]
      }
      u8_pos_name++;
      ptr_entry+=2;
800030aa:	2f e8       	sub	r8,-2

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
800030ac:	5c 59       	castu.b	r9
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800030ae:	11 8a       	ld.ub	r10,r8[0x0]
800030b0:	ac 8a       	st.b	r6[0x0],r10
      MSB(u16_unicode_entry) = ptr_entry[1];
800030b2:	11 9a       	ld.ub	r10,r8[0x1]
800030b4:	ae 8a       	st.b	r7[0x0],r10
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800030b6:	e8 0b 19 00 	cp.h	r11,r4
800030ba:	e0 80 00 d9 	breq	8000326c <fat_entry_longname+0x258>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800030be:	9a 5a       	ld.sh	r10,sp[0xa]
800030c0:	58 0a       	cp.w	r10,0
800030c2:	c0 e1       	brne	800030de <fat_entry_longname+0xca>
800030c4:	32 f5       	mov	r5,47
800030c6:	ea 0b 19 00 	cp.h	r11,r5
800030ca:	5f 10       	srne	r0
800030cc:	35 c5       	mov	r5,92
800030ce:	ea 0b 19 00 	cp.h	r11,r5
800030d2:	5f 15       	srne	r5
800030d4:	0a 60       	and	r0,r5
800030d6:	14 95       	mov	r5,r10
800030d8:	f4 00 18 00 	cp.b	r0,r10
800030dc:	c6 a0       	breq	800031b0 <fat_entry_longname+0x19c>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
800030de:	e5 da c0 10 	bfextu	r2,r10,0x0,0x10
800030e2:	eb db c0 10 	bfextu	r5,r11,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800030e6:	e4 c0 ff e0 	sub	r0,r2,-32
800030ea:	00 35       	cp.w	r5,r0
800030ec:	c0 80       	breq	800030fc <fat_entry_longname+0xe8>
800030ee:	22 02       	sub	r2,32
800030f0:	04 35       	cp.w	r5,r2
800030f2:	c0 50       	breq	800030fc <fat_entry_longname+0xe8>
800030f4:	f4 0b 19 00 	cp.h	r11,r10
800030f8:	e0 81 00 d4 	brne	800032a0 <fat_entry_longname+0x28c>
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800030fc:	58 0a       	cp.w	r10,0
800030fe:	e0 80 00 db 	breq	800032b4 <fat_entry_longname+0x2a0>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003102:	e6 09 18 00 	cp.b	r9,r3
80003106:	cc 21       	brne	8000308a <fat_entry_longname+0x76>
         ptr_entry += 3;                        // Go to second character
80003108:	2f d8       	sub	r8,-3
8000310a:	cc 9b       	rjmp	8000309c <fat_entry_longname+0x88>
      return false;
   }

   if( g_b_string_length )
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000310c:	e2 17 00 40 	andl	r7,0x40,COH
80003110:	ca d1       	brne	8000306a <fat_entry_longname+0x56>
      if( 12 == u8_pos_name )
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
80003112:	31 09       	mov	r9,16
80003114:	e0 68 15 90 	mov	r8,5520
80003118:	0e 9c       	mov	r12,r7
            return false;                       // Other long name entry is present
8000311a:	b0 89       	st.b	r8[0x0],r9
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
8000311c:	ca 0b       	rjmp	8000305c <fat_entry_longname+0x48>
8000311e:	58 09       	cp.w	r9,0
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80003120:	c4 e0       	breq	800031bc <fat_entry_longname+0x1a8>
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
80003122:	20 1b       	sub	r11,1
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003124:	30 09       	mov	r9,0
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80003126:	30 44       	mov	r4,4
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80003128:	30 a3       	mov	r3,10
8000312a:	30 c1       	mov	r1,12
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000312c:	c1 b8       	rjmp	80003162 <fat_entry_longname+0x14e>
8000312e:	16 39       	cp.w	r9,r11
80003130:	e0 84 00 be 	brge	800032ac <fat_entry_longname+0x298>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
80003134:	9a 55       	ld.sh	r5,sp[0xa]
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80003136:	b8 85       	st.b	r12[0x0],r5
80003138:	58 05       	cp.w	r5,0
8000313a:	e0 80 00 bd 	breq	800032b4 <fat_entry_longname+0x2a0>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000313e:	e8 09 18 00 	cp.b	r9,r4
80003142:	e0 80 00 8f 	breq	80003260 <fat_entry_longname+0x24c>
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80003146:	e6 09 18 00 	cp.b	r9,r3
8000314a:	e0 80 00 89 	breq	8000325c <fat_entry_longname+0x248>
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
8000314e:	e2 09 18 00 	cp.b	r9,r1
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
80003152:	c5 90       	breq	80003204 <fat_entry_longname+0x1f0>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
80003154:	1d 82       	ld.ub	r2,lr[0x0]
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
80003156:	2f f9       	sub	r9,-1
80003158:	58 02       	cp.w	r2,0
8000315a:	f7 bc 00 ff 	subeq	r12,-1
      }
      u8_pos_name++;
8000315e:	2f e8       	sub	r8,-2
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003160:	5c 59       	castu.b	r9
80003162:	11 85       	ld.ub	r5,r8[0x0]
      MSB(u16_unicode_entry) = ptr_entry[1];
80003164:	ac 85       	st.b	r6[0x0],r5
80003166:	11 95       	ld.ub	r5,r8[0x1]
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80003168:	ae 85       	st.b	r7[0x0],r5
8000316a:	58 02       	cp.w	r2,0
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
8000316c:	ce 10       	breq	8000312e <fat_entry_longname+0x11a>
8000316e:	9a 55       	ld.sh	r5,sp[0xa]
80003170:	ce 4b       	rjmp	80003138 <fat_entry_longname+0x124>
      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
80003172:	19 8b       	ld.ub	r11,r12[0x0]
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80003174:	14 99       	mov	r9,r10
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003176:	32 a4       	mov	r4,42
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
80003178:	30 43       	mov	r3,4
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
8000317a:	30 a1       	mov	r1,10
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000317c:	50 0a       	stdsp	sp[0x0],r10
8000317e:	11 85       	ld.ub	r5,r8[0x0]
      MSB(u16_unicode_entry) = ptr_entry[1];
80003180:	ac 85       	st.b	r6[0x0],r5
80003182:	11 95       	ld.ub	r5,r8[0x1]
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80003184:	ae 85       	st.b	r7[0x0],r5
80003186:	e8 0b 19 00 	cp.h	r11,r4
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000318a:	c7 10       	breq	8000326c <fat_entry_longname+0x258>
8000318c:	9a 55       	ld.sh	r5,sp[0xa]
8000318e:	58 05       	cp.w	r5,0
80003190:	c4 71       	brne	8000321e <fat_entry_longname+0x20a>
80003192:	32 fa       	mov	r10,47
80003194:	f4 0b 19 00 	cp.h	r11,r10
80003198:	5f 10       	srne	r0
8000319a:	35 ca       	mov	r10,92
8000319c:	50 10       	stdsp	sp[0x4],r0
8000319e:	f4 0b 19 00 	cp.h	r11,r10
800031a2:	5f 10       	srne	r0
800031a4:	40 1a       	lddsp	r10,sp[0x4]
800031a6:	00 6a       	and	r10,r0
800031a8:	0a 90       	mov	r0,r5
800031aa:	ea 0a 18 00 	cp.b	r10,r5
         }
      }

      if( 0 == u16_unicode_entry)
      {
         if( g_b_string_length )
800031ae:	c3 81       	brne	8000321e <fat_entry_longname+0x20a>
800031b0:	58 02       	cp.w	r2,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
800031b2:	c5 d0       	breq	8000326c <fat_entry_longname+0x258>
800031b4:	2f f9       	sub	r9,-1
800031b6:	b8 09       	st.h	r12[0x0],r9
800031b8:	30 1c       	mov	r12,1
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800031ba:	c5 1b       	rjmp	8000305c <fat_entry_longname+0x48>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800031bc:	20 1b       	sub	r11,1
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
800031be:	30 44       	mov	r4,4
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
800031c0:	30 a3       	mov	r3,10
800031c2:	30 c1       	mov	r1,12
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800031c4:	c1 48       	rjmp	800031ec <fat_entry_longname+0x1d8>
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800031c6:	9a 55       	ld.sh	r5,sp[0xa]
800031c8:	58 05       	cp.w	r5,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800031ca:	c7 50       	breq	800032b4 <fat_entry_longname+0x2a0>
800031cc:	e8 09 18 00 	cp.b	r9,r4
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
800031d0:	c4 40       	breq	80003258 <fat_entry_longname+0x244>
800031d2:	e6 09 18 00 	cp.b	r9,r3
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
800031d6:	c3 f0       	breq	80003254 <fat_entry_longname+0x240>
800031d8:	e2 09 18 00 	cp.b	r9,r1
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
800031dc:	c1 40       	breq	80003204 <fat_entry_longname+0x1f0>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
800031de:	1d 82       	ld.ub	r2,lr[0x0]
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
800031e0:	2f f9       	sub	r9,-1
800031e2:	58 02       	cp.w	r2,0
800031e4:	f7 bc 00 ff 	subeq	r12,-1
      }
      u8_pos_name++;
800031e8:	2f e8       	sub	r8,-2
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800031ea:	5c 59       	castu.b	r9
800031ec:	11 85       	ld.ub	r5,r8[0x0]
      MSB(u16_unicode_entry) = ptr_entry[1];
800031ee:	ac 85       	st.b	r6[0x0],r5
800031f0:	11 95       	ld.ub	r5,r8[0x1]
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800031f2:	ae 85       	st.b	r7[0x0],r5
800031f4:	58 02       	cp.w	r2,0
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800031f6:	ce 81       	brne	800031c6 <fat_entry_longname+0x1b2>
800031f8:	16 39       	cp.w	r9,r11
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
800031fa:	c5 94       	brge	800032ac <fat_entry_longname+0x298>
800031fc:	9a 55       	ld.sh	r5,sp[0xa]
800031fe:	b8 85       	st.b	r12[0x0],r5
80003200:	ce 4b       	rjmp	800031c8 <fat_entry_longname+0x1b4>
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
80003202:	40 1a       	lddsp	r10,sp[0x4]
80003204:	f1 37 ff e2 	ld.ub	r7,r8[-30]
80003208:	e2 17 00 40 	andl	r7,0x40,COH
            return false;                       // Other long name entry is present
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
8000320c:	c8 30       	breq	80003112 <fat_entry_longname+0xfe>
8000320e:	58 0a       	cp.w	r10,0
80003210:	c3 00       	breq	80003270 <fat_entry_longname+0x25c>
80003212:	1d 88       	ld.ub	r8,lr[0x0]
80003214:	58 08       	cp.w	r8,0
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80003216:	c4 11       	brne	80003298 <fat_entry_longname+0x284>
80003218:	b8 98       	st.b	r12[0x1],r8
               }
               return true;
8000321a:	30 1c       	mov	r12,1
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000321c:	c2 0b       	rjmp	8000305c <fat_entry_longname+0x48>
8000321e:	ea 0b 19 00 	cp.h	r11,r5
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80003222:	c3 f1       	brne	800032a0 <fat_entry_longname+0x28c>
80003224:	58 05       	cp.w	r5,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003226:	c4 70       	breq	800032b4 <fat_entry_longname+0x2a0>
80003228:	e6 09 18 00 	cp.b	r9,r3
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
8000322c:	c1 e0       	breq	80003268 <fat_entry_longname+0x254>
8000322e:	e2 09 18 00 	cp.b	r9,r1
         ptr_entry += 2;                        // Go to third character

      if( 12 == u8_pos_name )
80003232:	c1 90       	breq	80003264 <fat_entry_longname+0x250>
80003234:	30 c5       	mov	r5,12
80003236:	ea 09 18 00 	cp.b	r9,r5
               return fat_check_eof_name(u16_unicode_szname);
            }
         }
      }

      if( !g_b_string_length )
8000323a:	c2 d0       	breq	80003294 <fat_entry_longname+0x280>
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
8000323c:	1d 82       	ld.ub	r2,lr[0x0]
         }
      }

      if( !g_b_string_length )
      {
         sz_name += (Is_unicode? 2 : 1 );
8000323e:	2f f9       	sub	r9,-1
80003240:	58 02       	cp.w	r2,0
80003242:	f7 bc 00 ff 	subeq	r12,-1
80003246:	f9 fb 08 00 	ld.ubeq	r11,r12[0x0]
      }
      u8_pos_name++;
8000324a:	2f e8       	sub	r8,-2
8000324c:	5c 59       	castu.b	r9
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character

      if( 10 == u8_pos_name )
         ptr_entry += 2;                        // Go to third character
8000324e:	c9 8b       	rjmp	8000317e <fat_entry_longname+0x16a>
80003250:	2f e8       	sub	r8,-2
80003252:	c2 5b       	rjmp	8000309c <fat_entry_longname+0x88>
80003254:	2f e8       	sub	r8,-2
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character
80003256:	cc 4b       	rjmp	800031de <fat_entry_longname+0x1ca>
80003258:	2f d8       	sub	r8,-3

      if( 10 == u8_pos_name )
         ptr_entry += 2;                        // Go to third character
8000325a:	cc 2b       	rjmp	800031de <fat_entry_longname+0x1ca>
8000325c:	2f e8       	sub	r8,-2
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character
8000325e:	c7 bb       	rjmp	80003154 <fat_entry_longname+0x140>
80003260:	2f d8       	sub	r8,-3

      if( 10 == u8_pos_name )
         ptr_entry += 2;                        // Go to third character
80003262:	c7 9b       	rjmp	80003154 <fat_entry_longname+0x140>
80003264:	2f e8       	sub	r8,-2
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
         ptr_entry += 3;                        // Go to second character
80003266:	ce bb       	rjmp	8000323c <fat_entry_longname+0x228>
80003268:	2f d8       	sub	r8,-3
      {
         sz_name += (Is_unicode? 2 : 1 );
      }
      u8_pos_name++;
      ptr_entry+=2;
   }
8000326a:	ce 9b       	rjmp	8000323c <fat_entry_longname+0x228>
8000326c:	30 1c       	mov	r12,1
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
               return true;
8000326e:	cf 7a       	rjmp	8000305c <fat_entry_longname+0x48>
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80003270:	19 98       	ld.ub	r8,r12[0x1]
80003272:	35 cb       	mov	r11,92
80003274:	f4 08 19 00 	cp.h	r8,r10
80003278:	5f 09       	sreq	r9
8000327a:	f6 08 19 00 	cp.h	r8,r11
8000327e:	5f 0b       	sreq	r11
80003280:	f7 e9 10 09 	or	r9,r11,r9
80003284:	f4 09 18 00 	cp.b	r9,r10
80003288:	cf 21       	brne	8000326c <fat_entry_longname+0x258>
8000328a:	32 f9       	mov	r9,47
8000328c:	f2 08 19 00 	cp.h	r8,r9
80003290:	5f 0c       	sreq	r12
80003292:	ce 5a       	rjmp	8000305c <fat_entry_longname+0x48>
80003294:	40 0a       	lddsp	r10,sp[0x0]
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
80003296:	cb 7b       	rjmp	80003204 <fat_entry_longname+0x1f0>
80003298:	30 e8       	mov	r8,14
8000329a:	b8 08       	st.h	r12[0x0],r8
               return true;
8000329c:	30 1c       	mov	r12,1
         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
8000329e:	cd fa       	rjmp	8000305c <fat_entry_longname+0x48>
800032a0:	31 69       	mov	r9,22
800032a2:	e0 68 15 90 	mov	r8,5520
           return false;
800032a6:	30 0c       	mov	r12,0
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800032a8:	b0 89       	st.b	r8[0x0],r9
800032aa:	cd 9a       	rjmp	8000305c <fat_entry_longname+0x48>
800032ac:	30 08       	mov	r8,0
               }
               return true;                     // the buffer is full
800032ae:	b8 88       	st.b	r12[0x0],r8
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800032b0:	30 1c       	mov	r12,1
800032b2:	cd 5a       	rjmp	8000305c <fat_entry_longname+0x48>
800032b4:	1d 82       	ld.ub	r2,lr[0x0]
800032b6:	c7 db       	rjmp	800031b0 <fat_entry_longname+0x19c>

800032b8 <fat_check_eof_name>:
800032b8:	30 08       	mov	r8,0
800032ba:	35 ca       	mov	r10,92
800032bc:	f0 0c 19 00 	cp.h	r12,r8
800032c0:	5f 09       	sreq	r9
800032c2:	f4 0c 19 00 	cp.h	r12,r10
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
800032c6:	5f 0a       	sreq	r10
800032c8:	f5 e9 10 09 	or	r9,r10,r9
800032cc:	f0 09 18 00 	cp.b	r9,r8
800032d0:	c0 61       	brne	800032dc <fat_check_eof_name+0x24>
800032d2:	32 f8       	mov	r8,47
800032d4:	f0 0c 19 00 	cp.h	r12,r8
800032d8:	5f 0c       	sreq	r12
}
800032da:	5e fc       	retal	r12
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
800032dc:	5e ff       	retal	1
800032de:	d7 03       	nop

800032e0 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
800032e0:	e0 68 15 8c 	mov	r8,5516
800032e4:	e0 6c 13 40 	mov	r12,4928
800032e8:	90 98       	ld.uh	r8,r8[0x2]
800032ea:	a5 78       	lsl	r8,0x5
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
800032ec:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800032f0:	10 0c       	add	r12,r8
800032f2:	5e fc       	retal	r12

800032f4 <fat_cache_reset>:
800032f4:	3f f9       	mov	r9,-1
800032f6:	e0 68 15 c8 	mov	r8,5576
//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
800032fa:	b0 89       	st.b	r8[0x0],r9
800032fc:	30 09       	mov	r9,0
800032fe:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003302:	3f f9       	mov	r9,-1
}
80003304:	91 39       	st.w	r8[0xc],r9
80003306:	5e fc       	retal	r12

80003308 <fat_cache_mark_sector_as_dirty>:
80003308:	30 19       	mov	r9,1
8000330a:	e0 68 15 c8 	mov	r8,5576

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
8000330e:	f1 69 00 08 	st.b	r8[8],r9
}
80003312:	5e fc       	retal	r12

80003314 <fat_invert_nav>:
80003314:	d4 21       	pushm	r4-r7,lr
80003316:	20 dd       	sub	sp,52
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80003318:	58 0c       	cp.w	r12,0
8000331a:	c5 e0       	breq	800033d6 <fat_invert_nav+0xc2>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
8000331c:	e0 68 15 40 	mov	r8,5440
80003320:	f0 ea 00 00 	ld.d	r10,r8[0]
80003324:	fa eb 00 00 	st.d	sp[0],r10
80003328:	f0 ea 00 08 	ld.d	r10,r8[8]
8000332c:	fa eb 00 08 	st.d	sp[8],r10
80003330:	f0 ea 00 10 	ld.d	r10,r8[16]
80003334:	fa eb 00 10 	st.d	sp[16],r10
80003338:	f0 ea 00 18 	ld.d	r10,r8[24]
8000333c:	fa eb 00 18 	st.d	sp[24],r10
80003340:	f0 ea 00 20 	ld.d	r10,r8[32]
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003344:	f8 c6 00 01 	sub	r6,r12,1

   if( u8_idnav == 0 )
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003348:	fa eb 00 20 	st.d	sp[32],r10
8000334c:	10 9c       	mov	r12,r8
8000334e:	f0 ea 00 28 	ld.d	r10,r8[40]
80003352:	fa eb 00 28 	st.d	sp[40],r10
80003356:	70 c8       	ld.w	r8,r8[0x30]
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003358:	50 c8       	stdsp	sp[0x30],r8

   if( u8_idnav == 0 )
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
8000335a:	e0 68 15 94 	mov	r8,5524
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
8000335e:	1a 97       	mov	r7,sp
80003360:	5c 56       	castu.b	r6
80003362:	33 4a       	mov	r10,52
80003364:	ec 0a 02 45 	mul	r5,r6,r10
80003368:	10 05       	add	r5,r8
8000336a:	0a 9b       	mov	r11,r5
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
8000336c:	e0 a0 2c d0 	rcall	80008d0c <memcpy>
80003370:	0a 9c       	mov	r12,r5
80003372:	33 4a       	mov	r10,52
80003374:	1a 9b       	mov	r11,sp

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
80003376:	e0 a0 2c cb 	rcall	80008d0c <memcpy>
8000337a:	e0 68 13 00 	mov	r8,4864
8000337e:	f0 e4 00 00 	ld.d	r4,r8[0]
80003382:	10 9c       	mov	r12,r8
80003384:	fa e5 00 00 	st.d	sp[0],r4
80003388:	f0 e8 00 08 	ld.d	r8,r8[8]
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000338c:	fa e9 00 08 	st.d	sp[8],r8
80003390:	e0 68 15 78 	mov	r8,5496
80003394:	31 0a       	mov	r10,16
80003396:	ec 05 15 04 	lsl	r5,r6,0x4
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
8000339a:	10 05       	add	r5,r8
8000339c:	0a 9b       	mov	r11,r5
8000339e:	e0 a0 2c b7 	rcall	80008d0c <memcpy>
800033a2:	31 0a       	mov	r10,16

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
800033a4:	1a 9b       	mov	r11,sp
800033a6:	0a 9c       	mov	r12,r5
800033a8:	e0 a0 2c b2 	rcall	80008d0c <memcpy>
800033ac:	30 4a       	mov	r10,4
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
800033ae:	e0 6b 15 8c 	mov	r11,5516
800033b2:	1a 9c       	mov	r12,sp
800033b4:	e0 a0 2c ac 	rcall	80008d0c <memcpy>
800033b8:	e0 68 15 88 	mov	r8,5512
800033bc:	30 4a       	mov	r10,4
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
800033be:	f0 06 00 26 	add	r6,r8,r6<<0x2
800033c2:	e0 6c 15 8c 	mov	r12,5516
800033c6:	0c 9b       	mov	r11,r6
}
800033c8:	e0 a0 2c a2 	rcall	80008d0c <memcpy>
800033cc:	1a 9b       	mov	r11,sp
800033ce:	0c 9c       	mov	r12,r6
800033d0:	30 4a       	mov	r10,4
800033d2:	e0 a0 2c 9d 	rcall	80008d0c <memcpy>
800033d6:	2f 3d       	sub	sp,-52
800033d8:	d8 22       	popm	r4-r7,pc
800033da:	d7 03       	nop

800033dc <fat_cache_flush>:
800033dc:	eb cd 40 e0 	pushm	r5-r7,lr
800033e0:	e0 65 15 c8 	mov	r5,5576
800033e4:	30 18       	mov	r8,1
800033e6:	eb 37 00 08 	ld.ub	r7,r5[8]
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800033ea:	f0 07 18 00 	cp.b	r7,r8
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
      {
         fs_g_status = FS_ERR_HW;
         return false;
800033ee:	c0 30       	breq	800033f4 <fat_cache_flush+0x18>
800033f0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800033f4:	30 08       	mov	r8,0
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800033f6:	0b 8c       	ld.ub	r12,r5[0x0]
800033f8:	eb 68 00 08 	st.b	r5[8],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800033fc:	e0 a0 1e ea 	rcall	800071d0 <mem_wr_protect>
80003400:	18 96       	mov	r6,r12
      {
         fs_g_status = FS_LUN_WP;
80003402:	c0 80       	breq	80003412 <fat_cache_flush+0x36>
80003404:	31 49       	mov	r9,20
80003406:	e0 68 15 90 	mov	r8,5520
         return false;
8000340a:	30 0c       	mov	r12,0
8000340c:	b0 89       	st.b	r8[0x0],r9
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000340e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003412:	0b 8c       	ld.ub	r12,r5[0x0]
80003414:	e0 6a 13 40 	mov	r10,4928
80003418:	6a 1b       	ld.w	r11,r5[0x4]
      {
         fs_g_status = FS_ERR_HW;
8000341a:	e0 a0 1e eb 	rcall	800071f0 <ram_2_memory>
8000341e:	ce 90       	breq	800033f0 <fat_cache_flush+0x14>
         return false;
80003420:	e0 68 15 90 	mov	r8,5520
80003424:	0c 9c       	mov	r12,r6
80003426:	b0 87       	st.b	r8[0x0],r7
80003428:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000342c <fat_cache_clear>:
8000342c:	d4 01       	pushm	lr
8000342e:	e0 6a 02 00 	mov	r10,512
80003432:	30 0b       	mov	r11,0
80003434:	e0 6c 13 40 	mov	r12,4928
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
80003438:	e0 a0 2d 0e 	rcall	80008e54 <memset>
}
8000343c:	d8 02       	popm	pc
8000343e:	d7 03       	nop

80003440 <fat_check_device>:
80003440:	d4 31       	pushm	r0-r7,lr
80003442:	e0 68 13 12 	mov	r8,4882
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80003446:	11 89       	ld.ub	r9,r8[0x0]
80003448:	30 08       	mov	r8,0
8000344a:	f0 09 18 00 	cp.b	r9,r8
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
8000344e:	c4 01       	brne	800034ce <fat_check_device+0x8e>
80003450:	e0 65 15 40 	mov	r5,5440
80003454:	3f f6       	mov	r6,-1
80003456:	0b 89       	ld.ub	r9,r5[0x0]
80003458:	ec 09 18 00 	cp.b	r9,r6
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000345c:	c3 a0       	breq	800034d0 <fat_check_device+0x90>
8000345e:	30 03       	mov	r3,0
      Fat_file_close();                            // By default the file is not open
80003460:	e0 60 15 8c 	mov	r0,5516
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003464:	06 97       	mov	r7,r3
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003466:	e0 61 13 00 	mov	r1,4864
8000346a:	e0 62 15 94 	mov	r2,5524
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000346e:	e0 64 15 c8 	mov	r4,5576

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003472:	12 9c       	mov	r12,r9
80003474:	e0 a0 1e a4 	rcall	800071bc <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003478:	e0 68 13 14 	mov	r8,4884
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000347c:	30 1a       	mov	r10,1
8000347e:	e0 6b 15 90 	mov	r11,5520
80003482:	58 0c       	cp.w	r12,0
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003484:	c2 50       	breq	800034ce <fat_check_device+0x8e>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003486:	a0 87       	st.b	r0[0x0],r7
80003488:	a2 87       	st.b	r1[0x0],r7
8000348a:	0b 89       	ld.ub	r9,r5[0x0]
8000348c:	05 8e       	ld.ub	lr,r2[0x0]
   fs_g_sectorcache.u8_dirty              = false;
8000348e:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003492:	c2 a0       	breq	800034e6 <fat_check_device+0xa6>
80003494:	09 8e       	ld.ub	lr,r4[0x0]
80003496:	f2 0e 18 00 	cp.b	lr,r9
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
8000349a:	e9 f6 0e 00 	st.beq	r4[0x0],r6
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
8000349e:	e9 f7 0e 08 	st.beq	r4[0x8],r7
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
800034a2:	f9 be 00 ff 	moveq	lr,-1
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800034a6:	e9 fe 0a 03 	st.weq	r4[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800034aa:	e0 6e 15 92 	mov	lr,5522
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800034ae:	bc 87       	st.b	lr[0x0],r7
800034b0:	f1 66 00 15 	st.b	r8[21],r6
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
800034b4:	b6 8a       	st.b	r11[0x0],r10
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800034b6:	b0 8a       	st.b	r8[0x0],r10
800034b8:	b0 a6       	st.b	r8[0x2],r6
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800034ba:	b0 96       	st.b	r8[0x1],r6
800034bc:	f1 67 00 14 	st.b	r8[20],r7
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
800034c0:	f1 66 00 16 	st.b	r8[22],r6
800034c4:	58 3c       	cp.w	r12,3
      return false;                                // No device selected
800034c6:	c0 b0       	breq	800034dc <fat_check_device+0x9c>
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
800034c8:	58 2c       	cp.w	r12,2
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
800034ca:	c1 50       	breq	800034f4 <fat_check_device+0xb4>
800034cc:	d8 3a       	popm	r0-r7,pc,r12=0
800034ce:	da 3a       	popm	r0-r7,pc,r12=1
800034d0:	30 19       	mov	r9,1
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
800034d2:	e0 68 15 90 	mov	r8,5520
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
800034d6:	30 0c       	mov	r12,0
800034d8:	b0 89       	st.b	r8[0x0],r9
800034da:	d8 32       	popm	r0-r7,pc
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800034dc:	2f f3       	sub	r3,-1
800034de:	e0 43 00 64 	cp.w	r3,100
800034e2:	cc 81       	brne	80003472 <fat_check_device+0x32>
800034e4:	cf 4b       	rjmp	800034cc <fat_check_device+0x8c>
800034e6:	e0 6e 15 88 	mov	lr,5512
800034ea:	bc 87       	st.b	lr[0x0],r7
800034ec:	e0 6e 15 78 	mov	lr,5496
800034f0:	bc 87       	st.b	lr[0x0],r7
800034f2:	cd 1b       	rjmp	80003494 <fat_check_device+0x54>
800034f4:	31 88       	mov	r8,24
800034f6:	30 0c       	mov	r12,0
800034f8:	b6 88       	st.b	r11[0x0],r8
800034fa:	d8 32       	popm	r0-r7,pc

800034fc <fat_cache_read_sector>:
800034fc:	eb cd 40 fc 	pushm	r2-r7,lr
80003500:	e0 66 15 40 	mov	r6,5440
80003504:	18 94       	mov	r4,r12
80003506:	e0 67 15 c8 	mov	r7,5576
8000350a:	0d 8c       	ld.ub	r12,r6[0x0]
8000350c:	0f 88       	ld.ub	r8,r7[0x0]
8000350e:	f8 08 18 00 	cp.b	r8,r12
80003512:	c1 90       	breq	80003544 <fat_cache_read_sector+0x48>
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80003514:	ef 35 00 08 	ld.ub	r5,r7[8]
80003518:	e0 62 15 c8 	mov	r2,5576
8000351c:	30 18       	mov	r8,1

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
8000351e:	f0 05 18 00 	cp.b	r5,r8
   fs_g_sectorcache.u8_dirty              = false;
80003522:	c1 90       	breq	80003554 <fat_cache_read_sector+0x58>
80003524:	3f f8       	mov	r8,-1
80003526:	ae 88       	st.b	r7[0x0],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003528:	30 08       	mov	r8,0
8000352a:	ef 68 00 08 	st.b	r7[8],r8

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000352e:	3f f8       	mov	r8,-1
80003530:	8f 38       	st.w	r7[0xc],r8
   if( b_load )
80003532:	e0 68 12 fc 	mov	r8,4860
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003536:	70 0b       	ld.w	r11,r8[0x0]
80003538:	8f 1b       	st.w	r7[0x4],r11
8000353a:	58 04       	cp.w	r4,0
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000353c:	c1 b1       	brne	80003572 <fat_cache_read_sector+0x76>
8000353e:	ae 8c       	st.b	r7[0x0],r12
80003540:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80003544:	e0 68 12 fc 	mov	r8,4860
80003548:	6e 19       	ld.w	r9,r7[0x4]
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000354a:	70 08       	ld.w	r8,r8[0x0]
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000354c:	10 39       	cp.w	r9,r8
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000354e:	ce 31       	brne	80003514 <fat_cache_read_sector+0x18>
80003550:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003554:	30 08       	mov	r8,0
80003556:	05 8c       	ld.ub	r12,r2[0x0]
80003558:	e5 68 00 08 	st.b	r2[8],r8
      {
         fs_g_status = FS_LUN_WP;
8000355c:	e0 a0 1e 3a 	rcall	800071d0 <mem_wr_protect>
80003560:	18 93       	mov	r3,r12
80003562:	c0 f0       	breq	80003580 <fat_cache_read_sector+0x84>
80003564:	31 49       	mov	r9,20
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003566:	e0 68 15 90 	mov	r8,5520
8000356a:	30 0c       	mov	r12,0
8000356c:	b0 89       	st.b	r8[0x0],r9
8000356e:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003572:	e0 6a 13 40 	mov	r10,4928
80003576:	e0 a0 1e 33 	rcall	800071dc <memory_2_ram>
8000357a:	c1 01       	brne	8000359a <fat_cache_read_sector+0x9e>
8000357c:	0d 8c       	ld.ub	r12,r6[0x0]
      {
         fs_g_status = FS_ERR_HW;
8000357e:	ce 0b       	rjmp	8000353e <fat_cache_read_sector+0x42>
80003580:	05 8c       	ld.ub	r12,r2[0x0]
80003582:	e0 6a 13 40 	mov	r10,4928
80003586:	64 1b       	ld.w	r11,r2[0x4]
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
80003588:	e0 a0 1e 34 	rcall	800071f0 <ram_2_memory>
8000358c:	c0 e0       	breq	800035a8 <fat_cache_read_sector+0xac>
8000358e:	e0 68 15 90 	mov	r8,5520
         return false;
80003592:	06 9c       	mov	r12,r3
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003594:	b0 85       	st.b	r8[0x0],r5
80003596:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000359a:	30 19       	mov	r9,1
8000359c:	e0 68 15 90 	mov	r8,5520
800035a0:	30 0c       	mov	r12,0
800035a2:	b0 89       	st.b	r8[0x0],r9
800035a4:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800035a8:	0d 8c       	ld.ub	r12,r6[0x0]
800035aa:	cb db       	rjmp	80003524 <fat_cache_read_sector+0x28>

800035ac <T.79>:
800035ac:	eb cd 40 f8 	pushm	r3-r7,lr
800035b0:	e0 66 15 40 	mov	r6,5440
800035b4:	e0 67 15 c8 	mov	r7,5576
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800035b8:	0d 8c       	ld.ub	r12,r6[0x0]
800035ba:	0f 88       	ld.ub	r8,r7[0x0]
800035bc:	f8 08 18 00 	cp.b	r8,r12
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800035c0:	c2 00       	breq	80003600 <T.79+0x54>
800035c2:	ef 35 00 08 	ld.ub	r5,r7[8]
800035c6:	e0 63 15 c8 	mov	r3,5576
800035ca:	30 18       	mov	r8,1

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800035cc:	f0 05 18 00 	cp.b	r5,r8
   fs_g_sectorcache.u8_dirty              = false;
800035d0:	c2 70       	breq	8000361e <T.79+0x72>
800035d2:	3f f8       	mov	r8,-1
800035d4:	ae 88       	st.b	r7[0x0],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800035d6:	30 08       	mov	r8,0
800035d8:	ef 68 00 08 	st.b	r7[8],r8
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
800035dc:	3f f8       	mov	r8,-1

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
800035de:	8f 38       	st.w	r7[0xc],r8
800035e0:	e0 68 12 fc 	mov	r8,4860
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
800035e4:	e0 6a 13 40 	mov	r10,4928
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
800035e8:	70 0b       	ld.w	r11,r8[0x0]
800035ea:	8f 1b       	st.w	r7[0x4],r11
800035ec:	e0 a0 1d f8 	rcall	800071dc <memory_2_ram>
   return true;
}
800035f0:	c1 01       	brne	80003610 <T.79+0x64>
800035f2:	0d 89       	ld.ub	r9,r6[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800035f4:	e0 68 15 c8 	mov	r8,5576
800035f8:	30 1c       	mov	r12,1
800035fa:	b0 89       	st.b	r8[0x0],r9
800035fc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003600:	e0 68 12 fc 	mov	r8,4860
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
80003604:	6e 19       	ld.w	r9,r7[0x4]
80003606:	70 08       	ld.w	r8,r8[0x0]
80003608:	10 39       	cp.w	r9,r8
8000360a:	cd c1       	brne	800035c2 <T.79+0x16>
8000360c:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003610:	30 19       	mov	r9,1
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003612:	e0 68 15 90 	mov	r8,5520
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003616:	30 0c       	mov	r12,0
80003618:	b0 89       	st.b	r8[0x0],r9
8000361a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
      {
         fs_g_status = FS_LUN_WP;
8000361e:	30 08       	mov	r8,0
80003620:	07 8c       	ld.ub	r12,r3[0x0]
80003622:	e7 68 00 08 	st.b	r3[8],r8
80003626:	e0 a0 1d d5 	rcall	800071d0 <mem_wr_protect>
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000362a:	18 94       	mov	r4,r12
8000362c:	c0 80       	breq	8000363c <T.79+0x90>
8000362e:	31 49       	mov	r9,20
80003630:	e0 68 15 90 	mov	r8,5520
80003634:	30 0c       	mov	r12,0
      {
         fs_g_status = FS_ERR_HW;
80003636:	b0 89       	st.b	r8[0x0],r9
80003638:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000363c:	07 8c       	ld.ub	r12,r3[0x0]
8000363e:	e0 6a 13 40 	mov	r10,4928
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003642:	66 1b       	ld.w	r11,r3[0x4]
80003644:	e0 a0 1d d6 	rcall	800071f0 <ram_2_memory>
80003648:	c0 70       	breq	80003656 <T.79+0xaa>
8000364a:	e0 68 15 90 	mov	r8,5520
8000364e:	08 9c       	mov	r12,r4
80003650:	b0 85       	st.b	r8[0x0],r5
80003652:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003656:	0d 8c       	ld.ub	r12,r6[0x0]
80003658:	cb db       	rjmp	800035d2 <T.79+0x26>
8000365a:	d7 03       	nop

8000365c <fat_check_noopen>:
8000365c:	d4 31       	pushm	r0-r7,lr
8000365e:	e0 68 13 12 	mov	r8,4882
80003662:	11 89       	ld.ub	r9,r8[0x0]
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80003664:	30 08       	mov	r8,0
80003666:	f0 09 18 00 	cp.b	r9,r8
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
8000366a:	c4 01       	brne	800036ea <fat_check_noopen+0x8e>
8000366c:	e0 64 15 40 	mov	r4,5440
80003670:	3f f6       	mov	r6,-1
80003672:	09 89       	ld.ub	r9,r4[0x0]
80003674:	ec 09 18 00 	cp.b	r9,r6
   {
      fs_g_status = FS_ERR_HW;
80003678:	c4 c0       	breq	80003710 <fat_check_noopen+0xb4>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000367a:	30 02       	mov	r2,0
      Fat_file_close();                            // By default the file is not open
8000367c:	e0 65 15 8c 	mov	r5,5516
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003680:	04 97       	mov	r7,r2
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003682:	e0 60 13 00 	mov	r0,4864
80003686:	e0 61 15 94 	mov	r1,5524
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000368a:	e0 63 15 c8 	mov	r3,5576

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
8000368e:	12 9c       	mov	r12,r9
80003690:	e0 a0 1d 96 	rcall	800071bc <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003694:	e0 68 13 14 	mov	r8,4884
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003698:	30 1a       	mov	r10,1
8000369a:	e0 6b 15 90 	mov	r11,5520
8000369e:	58 0c       	cp.w	r12,0
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800036a0:	c2 70       	breq	800036ee <fat_check_noopen+0x92>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800036a2:	aa 87       	st.b	r5[0x0],r7
800036a4:	a0 87       	st.b	r0[0x0],r7
800036a6:	09 89       	ld.ub	r9,r4[0x0]
800036a8:	03 8e       	ld.ub	lr,r1[0x0]
   fs_g_sectorcache.u8_dirty              = false;
800036aa:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800036ae:	c3 c0       	breq	80003726 <fat_check_noopen+0xca>
800036b0:	07 8e       	ld.ub	lr,r3[0x0]
800036b2:	f2 0e 18 00 	cp.b	lr,r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800036b6:	e7 f6 0e 00 	st.beq	r3[0x0],r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
800036ba:	e7 f7 0e 08 	st.beq	r3[0x8],r7
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800036be:	f9 be 00 ff 	moveq	lr,-1
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800036c2:	e7 fe 0a 03 	st.weq	r3[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800036c6:	f1 66 00 15 	st.b	r8[21],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800036ca:	b6 8a       	st.b	r11[0x0],r10
800036cc:	e0 6e 15 92 	mov	lr,5522
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
800036d0:	bc 87       	st.b	lr[0x0],r7
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800036d2:	b0 8a       	st.b	r8[0x0],r10
800036d4:	b0 a6       	st.b	r8[0x2],r6
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
      return true;
   if( Fat_file_is_open() )
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
      return false;
800036d6:	b0 96       	st.b	r8[0x1],r6
800036d8:	f1 67 00 14 	st.b	r8[20],r7
//!
bool  fat_check_noopen( void )
{
   if( !fat_check_device() )
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800036dc:	f1 66 00 16 	st.b	r8[22],r6
800036e0:	58 3c       	cp.w	r12,3
800036e2:	c1 d0       	breq	8000371c <fat_check_noopen+0xc0>
      return true;
   if( Fat_file_is_open() )
800036e4:	58 2c       	cp.w	r12,2
800036e6:	c2 70       	breq	80003734 <fat_check_noopen+0xd8>
800036e8:	da 3a       	popm	r0-r7,pc,r12=1
800036ea:	e0 65 15 8c 	mov	r5,5516
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
800036ee:	0b 89       	ld.ub	r9,r5[0x0]
800036f0:	30 08       	mov	r8,0
800036f2:	f0 09 18 00 	cp.b	r9,r8
      return false;
800036f6:	cf 90       	breq	800036e8 <fat_check_noopen+0x8c>
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
800036f8:	e0 69 13 00 	mov	r9,4864
800036fc:	13 89       	ld.ub	r9,r9[0x0]
800036fe:	f0 09 18 00 	cp.b	r9,r8
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003702:	cf 30       	breq	800036e8 <fat_check_noopen+0x8c>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003704:	30 59       	mov	r9,5
80003706:	e0 68 15 90 	mov	r8,5520
8000370a:	30 0c       	mov	r12,0
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
8000370c:	b0 89       	st.b	r8[0x0],r9
8000370e:	d8 32       	popm	r0-r7,pc
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003710:	30 19       	mov	r9,1
80003712:	e0 68 15 90 	mov	r8,5520
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003716:	30 1c       	mov	r12,1
80003718:	b0 89       	st.b	r8[0x0],r9
8000371a:	d8 32       	popm	r0-r7,pc
8000371c:	2f f2       	sub	r2,-1
8000371e:	e0 42 00 64 	cp.w	r2,100
80003722:	cb 61       	brne	8000368e <fat_check_noopen+0x32>
80003724:	ce 2b       	rjmp	800036e8 <fat_check_noopen+0x8c>
80003726:	e0 6e 15 88 	mov	lr,5512
8000372a:	bc 87       	st.b	lr[0x0],r7
8000372c:	e0 6e 15 78 	mov	lr,5496
80003730:	bc 87       	st.b	lr[0x0],r7
80003732:	cb fb       	rjmp	800036b0 <fat_check_noopen+0x54>
80003734:	31 88       	mov	r8,24
80003736:	30 1c       	mov	r12,1
80003738:	b6 88       	st.b	r11[0x0],r8
8000373a:	d8 32       	popm	r0-r7,pc

8000373c <fat_cluster_val>:
8000373c:	d4 31       	pushm	r0-r7,lr
8000373e:	20 5d       	sub	sp,20
80003740:	e0 64 15 8c 	mov	r4,5516
80003744:	18 95       	mov	r5,r12
80003746:	09 8a       	ld.ub	r10,r4[0x0]
80003748:	30 38       	mov	r8,3
8000374a:	f0 0a 18 00 	cp.b	r10,r8
8000374e:	e0 80 00 99 	breq	80003880 <fat_cluster_val+0x144>

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
   }
   else if ( Is_fat16 )
80003752:	30 28       	mov	r8,2
80003754:	f0 0a 18 00 	cp.b	r10,r8
80003758:	e0 80 00 a7 	breq	800038a6 <fat_cluster_val+0x16a>
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
   }
   else if ( Is_fat12 )
8000375c:	30 18       	mov	r8,1
8000375e:	f0 0a 18 00 	cp.b	r10,r8
80003762:	e0 80 00 ab 	breq	800038b8 <fat_cluster_val+0x17c>
80003766:	30 0b       	mov	r11,0
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80003768:	58 05       	cp.w	r5,0
8000376a:	c1 40       	breq	80003792 <fat_cluster_val+0x56>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
8000376c:	e0 68 15 74 	mov	r8,5492
80003770:	70 09       	ld.w	r9,r8[0x0]
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80003772:	12 3b       	cp.w	r11,r9
80003774:	f1 fb 3a 00 	st.wcs	r8[0x0],r11
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80003778:	e0 69 13 3c 	mov	r9,4924
8000377c:	72 08       	ld.w	r8,r9[0x0]
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
8000377e:	10 3b       	cp.w	r11,r8
80003780:	f3 fb ba 00 	st.whi	r9[0x0],r11
80003784:	f6 08 17 b0 	movhi	r8,r11
      }
      if ( Is_fat12 )
80003788:	30 1c       	mov	r12,1
8000378a:	f8 0a 18 00 	cp.b	r10,r12
8000378e:	e0 80 00 e4 	breq	80003956 <fat_cluster_val+0x21a>
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80003792:	e0 66 15 40 	mov	r6,5440
80003796:	e0 63 12 fc 	mov	r3,4860
8000379a:	6c 48       	ld.w	r8,r6[0x10]
8000379c:	10 0b       	add	r11,r8
8000379e:	87 0b       	st.w	r3[0x0],r11
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800037a0:	e0 67 15 c8 	mov	r7,5576
800037a4:	0d 8c       	ld.ub	r12,r6[0x0]
800037a6:	0f 88       	ld.ub	r8,r7[0x0]
800037a8:	f8 08 18 00 	cp.b	r8,r12
800037ac:	c0 51       	brne	800037b6 <fat_cluster_val+0x7a>
800037ae:	6e 18       	ld.w	r8,r7[0x4]
800037b0:	10 3b       	cp.w	r11,r8
800037b2:	e0 80 00 e1 	breq	80003974 <fat_cluster_val+0x238>
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800037b6:	ef 32 00 08 	ld.ub	r2,r7[8]
800037ba:	e0 68 15 c8 	mov	r8,5576
800037be:	30 19       	mov	r9,1
800037c0:	f2 02 18 00 	cp.b	r2,r9
800037c4:	e0 80 00 b8 	breq	80003934 <fat_cluster_val+0x1f8>
800037c8:	e0 61 13 40 	mov	r1,4928

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800037cc:	3f f8       	mov	r8,-1
800037ce:	ae 88       	st.b	r7[0x0],r8
   fs_g_sectorcache.u8_dirty              = false;
800037d0:	30 08       	mov	r8,0
800037d2:	ef 68 00 08 	st.b	r7[8],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800037d6:	3f f8       	mov	r8,-1

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
800037d8:	8f 1b       	st.w	r7[0x4],r11
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800037da:	8f 38       	st.w	r7[0xc],r8
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
800037dc:	e0 6a 13 40 	mov	r10,4928
800037e0:	e0 a0 1c fe 	rcall	800071dc <memory_2_ram>
800037e4:	c5 a1       	brne	80003898 <fat_cluster_val+0x15c>
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
800037e6:	0d 89       	ld.ub	r9,r6[0x0]
800037e8:	e0 68 15 c8 	mov	r8,5576
800037ec:	09 8a       	ld.ub	r10,r4[0x0]
800037ee:	b0 89       	st.b	r8[0x0],r9
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
   if( !fat_cache_read_sector( true ))
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
800037f0:	e0 68 13 10 	mov	r8,4880
800037f4:	90 0c       	ld.sh	r12,r8[0x0]
800037f6:	e5 dc c0 10 	bfextu	r2,r12,0x0,0x10
800037fa:	e2 02 00 02 	add	r2,r1,r2
   u8_data1 = u8_ptr_cluster[0];
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
   u8_data4 = u8_ptr_cluster[3];
800037fe:	e4 ce ff fd 	sub	lr,r2,-3
   if( !fat_cache_read_sector( true ))
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
80003802:	04 96       	mov	r6,r2
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
80003804:	e4 c9 ff fe 	sub	r9,r2,-2
   if( !fat_cache_read_sector( true ))
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
80003808:	0d 30       	ld.ub	r0,r6++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
   u8_data4 = u8_ptr_cluster[3];
8000380a:	50 2e       	stdsp	sp[0x8],lr
   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
   u8_data3 = u8_ptr_cluster[2];
8000380c:	13 8e       	ld.ub	lr,r9[0x0]

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
   u8_data1 = u8_ptr_cluster[0];
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
8000380e:	0d 8b       	ld.ub	r11,r6[0x0]
   u8_data3 = u8_ptr_cluster[2];
80003810:	50 4e       	stdsp	sp[0x10],lr
   u8_data4 = u8_ptr_cluster[3];
80003812:	40 2e       	lddsp	lr,sp[0x8]
80003814:	1d 8e       	ld.ub	lr,lr[0x0]
80003816:	50 3e       	stdsp	sp[0xc],lr

   if ( Is_fat12 )
80003818:	30 1e       	mov	lr,1
8000381a:	fc 0a 18 00 	cp.b	r10,lr
8000381e:	c7 80       	breq	8000390e <fat_cluster_val+0x1d2>
           return false;
         u8_data2 = fs_g_sector[0];
      }
   }

   if (false == b_mode)
80003820:	58 05       	cp.w	r5,0
80003822:	c1 91       	brne	80003854 <fat_cluster_val+0x118>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80003824:	e0 68 15 e0 	mov	r8,5600
80003828:	f0 ce ff f9 	sub	lr,r8,-7
8000382c:	bc 80       	st.b	lr[0x0],r0
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
8000382e:	f0 cc ff fa 	sub	r12,r8,-6
80003832:	b8 8b       	st.b	r12[0x0],r11
   }

   if (false == b_mode)
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80003834:	f0 c9 ff fc 	sub	r9,r8,-4
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32

      if ( Is_fat32 )
80003838:	30 3b       	mov	r11,3
8000383a:	f6 0a 18 00 	cp.b	r10,r11
8000383e:	e0 80 00 d5 	breq	800039e8 <fat_cluster_val+0x2ac>
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
         LSB3( fs_g_cluster.u32_val ) = 0;
80003842:	b2 85       	st.b	r9[0x0],r5
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80003844:	b2 95       	st.b	r9[0x1],r5
         LSB3( fs_g_cluster.u32_val ) = 0;

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80003846:	30 19       	mov	r9,1
80003848:	f2 0a 18 00 	cp.b	r10,r9
8000384c:	c4 60       	breq	800038d8 <fat_cluster_val+0x19c>
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
8000384e:	30 1c       	mov	r12,1
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
80003850:	2f bd       	sub	sp,-20
80003852:	d8 32       	popm	r0-r7,pc
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80003854:	30 1c       	mov	r12,1
80003856:	f8 0a 18 00 	cp.b	r10,r12
8000385a:	e0 80 00 90 	breq	8000397a <fat_cluster_val+0x23e>
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
8000385e:	e0 68 15 e0 	mov	r8,5600
80003862:	30 3c       	mov	r12,3
80003864:	2f c8       	sub	r8,-4
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80003866:	11 b5       	ld.ub	r5,r8[0x3]
         if ( Is_fat32 )
80003868:	11 ab       	ld.ub	r11,r8[0x2]
8000386a:	f8 0a 18 00 	cp.b	r10,r12
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
8000386e:	c4 60       	breq	800038fa <fat_cluster_val+0x1be>
      u8_ptr_cluster[1] = u8_data2;
80003870:	a4 85       	st.b	r2[0x0],r5

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80003872:	ac 8b       	st.b	r6[0x0],r11
80003874:	30 18       	mov	r8,1
80003876:	30 1c       	mov	r12,1
80003878:	ef 68 00 08 	st.b	r7[8],r8
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
8000387c:	2f bd       	sub	sp,-20
   if ( Is_fat32 )
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
8000387e:	d8 32       	popm	r0-r7,pc

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80003880:	e0 68 15 e0 	mov	r8,5600
80003884:	11 b9       	ld.ub	r9,r8[0x3]
80003886:	70 0b       	ld.w	r11,r8[0x0]
80003888:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
   if ( Is_fat32 )
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
8000388c:	e0 68 13 10 	mov	r8,4880

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80003890:	a3 69       	lsl	r9,0x2
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
80003892:	a7 9b       	lsr	r11,0x7
80003894:	b0 09       	st.h	r8[0x0],r9
80003896:	c6 9b       	rjmp	80003768 <fat_cluster_val+0x2c>
80003898:	30 19       	mov	r9,1
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
8000389a:	e0 68 15 90 	mov	r8,5520
   }
   else if ( Is_fat16 )
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
8000389e:	30 0c       	mov	r12,0
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
800038a0:	b0 89       	st.b	r8[0x0],r9
800038a2:	2f bd       	sub	sp,-20
800038a4:	d8 32       	popm	r0-r7,pc
800038a6:	e0 68 15 e0 	mov	r8,5600
   }
   else if ( Is_fat16 )
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
800038aa:	11 bb       	ld.ub	r11,r8[0x3]
   }
   else if ( Is_fat12 )
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
800038ac:	a1 7b       	lsl	r11,0x1
800038ae:	e0 69 13 10 	mov	r9,4880
800038b2:	b2 0b       	st.h	r9[0x0],r11
800038b4:	11 ab       	ld.ub	r11,r8[0x2]
800038b6:	c5 9b       	rjmp	80003768 <fat_cluster_val+0x2c>
800038b8:	e0 68 13 10 	mov	r8,4880
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800038bc:	e0 69 15 e0 	mov	r9,5600
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800038c0:	72 09       	ld.w	r9,r9[0x0]
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800038c2:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800038c6:	12 0b       	add	r11,r9
         LSB3( fs_g_cluster.u32_val ) = 0;

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800038c8:	b0 0b       	st.h	r8[0x0],r11
800038ca:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
800038ce:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
800038d2:	a1 9b       	lsr	r11,0x1
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
800038d4:	b0 89       	st.b	r8[0x0],r9
800038d6:	c4 9b       	rjmp	80003768 <fat_cluster_val+0x2c>
800038d8:	11 b8       	ld.ub	r8,r8[0x3]
         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
800038da:	ed b8 00 00 	bld	r8,0x0
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
800038de:	e0 81 00 8d 	brne	800039f8 <fat_cluster_val+0x2bc>
         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
800038e2:	19 88       	ld.ub	r8,r12[0x0]
800038e4:	f0 09 16 04 	lsr	r9,r8,0x4
800038e8:	b8 89       	st.b	r12[0x0],r9
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
         u8_data2 = LSB1( fs_g_cluster.u32_val );
         if ( Is_fat32 )
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
800038ea:	a5 68       	lsl	r8,0x4
800038ec:	1d 89       	ld.ub	r9,lr[0x0]
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
800038ee:	30 1c       	mov	r12,1
800038f0:	a5 89       	lsr	r9,0x4
800038f2:	f2 08 00 08 	add	r8,r9,r8
800038f6:	bc 88       	st.b	lr[0x0],r8
800038f8:	cc 2b       	rjmp	8000387c <fat_cluster_val+0x140>
800038fa:	11 9a       	ld.ub	r10,r8[0x1]
800038fc:	b2 8a       	st.b	r9[0x0],r10
   u8_data3 = u8_ptr_cluster[2];
   u8_data4 = u8_ptr_cluster[3];

   if ( Is_fat12 )
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800038fe:	40 39       	lddsp	r9,sp[0xc]
80003900:	e0 19 ff f0 	andl	r9,0xfff0
80003904:	11 88       	ld.ub	r8,r8[0x0]
80003906:	12 08       	add	r8,r9
      {  // Go to next sector
         fs_gu32_addrsector++;
80003908:	40 29       	lddsp	r9,sp[0x8]
8000390a:	b2 88       	st.b	r9[0x0],r8
         if( !fat_cache_read_sector( true ))
8000390c:	cb 2b       	rjmp	80003870 <fat_cluster_val+0x134>
8000390e:	e0 6e 01 ff 	mov	lr,511
80003912:	fc 0c 19 00 	cp.h	r12,lr
80003916:	c8 51       	brne	80003820 <fat_cluster_val+0xe4>
80003918:	66 0a       	ld.w	r10,r3[0x0]
8000391a:	2f fa       	sub	r10,-1
           return false;
         u8_data2 = fs_g_sector[0];
8000391c:	50 19       	stdsp	sp[0x4],r9
8000391e:	50 08       	stdsp	sp[0x0],r8
80003920:	87 0a       	st.w	r3[0x0],r10
80003922:	c4 5e       	rcall	800035ac <T.79>
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003924:	40 19       	lddsp	r9,sp[0x4]
80003926:	40 08       	lddsp	r8,sp[0x0]
80003928:	c7 f0       	breq	80003a26 <fat_cluster_val+0x2ea>
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000392a:	e0 6a 13 40 	mov	r10,4928
8000392e:	15 8b       	ld.ub	r11,r10[0x0]
80003930:	09 8a       	ld.ub	r10,r4[0x0]
80003932:	c7 7b       	rjmp	80003820 <fat_cluster_val+0xe4>
80003934:	30 09       	mov	r9,0
80003936:	f1 69 00 08 	st.b	r8[8],r9
      {
         fs_g_status = FS_LUN_WP;
8000393a:	11 8c       	ld.ub	r12,r8[0x0]
8000393c:	50 08       	stdsp	sp[0x0],r8
8000393e:	e0 a0 1c 49 	rcall	800071d0 <mem_wr_protect>
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
}
80003942:	40 08       	lddsp	r8,sp[0x0]
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
      }
      if ( Is_fat12 )
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003944:	18 90       	mov	r0,r12
80003946:	c4 40       	breq	800039ce <fat_cluster_val+0x292>
80003948:	31 49       	mov	r9,20
8000394a:	e0 68 15 90 	mov	r8,5520
8000394e:	30 0c       	mov	r12,0
80003950:	b0 89       	st.b	r8[0x0],r9
80003952:	2f bd       	sub	sp,-20
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80003954:	d8 32       	popm	r0-r7,pc
80003956:	e0 6c 13 10 	mov	r12,4880
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
8000395a:	98 0e       	ld.sh	lr,r12[0x0]
8000395c:	e0 6c 01 ff 	mov	r12,511
80003960:	f8 0e 19 00 	cp.h	lr,r12
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80003964:	fe 91 ff 17 	brne	80003792 <fat_cluster_val+0x56>
80003968:	f6 cc ff ff 	sub	r12,r11,-1
8000396c:	10 3c       	cp.w	r12,r8
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
8000396e:	f3 fc ba 00 	st.whi	r9[0x0],r12
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80003972:	c1 0b       	rjmp	80003792 <fat_cluster_val+0x56>
80003974:	e0 61 13 40 	mov	r1,4928
80003978:	c3 cb       	rjmp	800037f0 <fat_cluster_val+0xb4>
8000397a:	e0 69 15 e0 	mov	r9,5600
8000397e:	13 ba       	ld.ub	r10,r9[0x3]
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003980:	ed ba 00 00 	bld	r10,0x0
80003984:	c4 00       	breq	80003a04 <fat_cluster_val+0x2c8>
80003986:	2f c9       	sub	r9,-4
80003988:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000398c:	13 aa       	ld.ub	r10,r9[0x2]
         {
            fs_g_sector[0] = u8_data2;
            fat_cache_mark_sector_as_dirty();
            // Go to previous sector
            fs_gu32_addrsector--;
8000398e:	13 b5       	ld.ub	r5,r9[0x3]
80003990:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
         {
            fs_g_sector[0] = u8_data2;
80003994:	14 0b       	add	r11,r10
            fat_cache_mark_sector_as_dirty();
            // Go to previous sector
            fs_gu32_addrsector--;
80003996:	5c 5b       	castu.b	r11

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80003998:	90 09       	ld.sh	r9,r8[0x0]
8000399a:	e0 68 01 ff 	mov	r8,511
         {
            fs_g_sector[0] = u8_data2;
            fat_cache_mark_sector_as_dirty();
            // Go to previous sector
            fs_gu32_addrsector--;
            if( !fat_cache_read_sector( true ))
8000399e:	f0 09 19 00 	cp.h	r9,r8
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
800039a2:	fe 91 ff 67 	brne	80003870 <fat_cluster_val+0x134>
800039a6:	66 08       	ld.w	r8,r3[0x0]
800039a8:	20 18       	sub	r8,1

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800039aa:	30 16       	mov	r6,1
800039ac:	a2 8b       	st.b	r1[0x0],r11
800039ae:	87 08       	st.w	r3[0x0],r8
            if( !fat_cache_read_sector( true ))
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
            fat_cache_mark_sector_as_dirty();
            return true;
800039b0:	ef 66 00 08 	st.b	r7[8],r6
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800039b4:	fe b0 fd fc 	rcall	800035ac <T.79>
800039b8:	c3 70       	breq	80003a26 <fat_cluster_val+0x2ea>
800039ba:	e0 68 13 40 	mov	r8,4928
800039be:	30 1c       	mov	r12,1
      {
         fs_g_status = FS_ERR_HW;
800039c0:	f1 65 01 ff 	st.b	r8[511],r5
800039c4:	e0 68 15 c8 	mov	r8,5576
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32

      if ( Is_fat32 )
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
800039c8:	f1 66 00 08 	st.b	r8[8],r6
800039cc:	c5 8b       	rjmp	8000387c <fat_cluster_val+0x140>
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
800039ce:	e0 61 13 40 	mov	r1,4928
800039d2:	11 8c       	ld.ub	r12,r8[0x0]
800039d4:	70 1b       	ld.w	r11,r8[0x4]
800039d6:	02 9a       	mov	r10,r1
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
800039d8:	e0 a0 1c 0c 	rcall	800071f0 <ram_2_memory>
800039dc:	c2 20       	breq	80003a20 <fat_cluster_val+0x2e4>
800039de:	e0 68 15 90 	mov	r8,5520
800039e2:	00 9c       	mov	r12,r0
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800039e4:	b0 82       	st.b	r8[0x0],r2
800039e6:	c4 bb       	rjmp	8000387c <fat_cluster_val+0x140>
800039e8:	40 4b       	lddsp	r11,sp[0x10]
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800039ea:	30 1c       	mov	r12,1
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800039ec:	b2 9b       	st.b	r9[0x1],r11
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800039ee:	40 3a       	lddsp	r10,sp[0xc]
800039f0:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800039f4:	b2 88       	st.b	r9[0x0],r8
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800039f6:	c4 3b       	rjmp	8000387c <fat_cluster_val+0x140>
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800039f8:	19 88       	ld.ub	r8,r12[0x0]
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800039fa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
      if ( Is_fat12 )
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800039fe:	b8 88       	st.b	r12[0x0],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003a00:	30 1c       	mov	r12,1
80003a02:	c2 7b       	rjmp	80003850 <fat_cluster_val+0x114>
80003a04:	2f c9       	sub	r9,-4

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80003a06:	eb d0 c0 04 	bfextu	r5,r0,0x0,0x4
80003a0a:	13 aa       	ld.ub	r10,r9[0x2]
80003a0c:	13 b9       	ld.ub	r9,r9[0x3]
80003a0e:	a5 6a       	lsl	r10,0x4
80003a10:	f2 0b 16 04 	lsr	r11,r9,0x4
80003a14:	a5 69       	lsl	r9,0x4
80003a16:	14 0b       	add	r11,r10
80003a18:	12 05       	add	r5,r9
80003a1a:	5c 5b       	castu.b	r11
80003a1c:	5c 55       	castu.b	r5
80003a1e:	cb db       	rjmp	80003998 <fat_cluster_val+0x25c>
80003a20:	66 0b       	ld.w	r11,r3[0x0]
80003a22:	0d 8c       	ld.ub	r12,r6[0x0]
80003a24:	cd 4a       	rjmp	800037cc <fat_cluster_val+0x90>
80003a26:	30 0c       	mov	r12,0
80003a28:	c2 ab       	rjmp	8000387c <fat_cluster_val+0x140>
80003a2a:	d7 03       	nop

80003a2c <fat_check_mount_select>:
80003a2c:	d4 31       	pushm	r0-r7,lr
80003a2e:	e0 68 13 12 	mov	r8,4882
80003a32:	11 89       	ld.ub	r9,r8[0x0]
80003a34:	30 08       	mov	r8,0
80003a36:	f0 09 18 00 	cp.b	r9,r8
80003a3a:	c4 01       	brne	80003aba <fat_check_mount_select+0x8e>
80003a3c:	e0 64 15 40 	mov	r4,5440
80003a40:	3f f6       	mov	r6,-1
80003a42:	09 89       	ld.ub	r9,r4[0x0]

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003a44:	ec 09 18 00 	cp.b	r9,r6
   {
      fs_g_status = FS_ERR_HW;
80003a48:	c4 e0       	breq	80003ae4 <fat_check_mount_select+0xb8>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003a4a:	30 02       	mov	r2,0
      Fat_file_close();                            // By default the file is not open
80003a4c:	e0 65 15 8c 	mov	r5,5516
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003a50:	04 97       	mov	r7,r2
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003a52:	e0 60 13 00 	mov	r0,4864
80003a56:	e0 61 15 94 	mov	r1,5524
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003a5a:	e0 63 15 c8 	mov	r3,5576

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003a5e:	12 9c       	mov	r12,r9
80003a60:	e0 a0 1b ae 	rcall	800071bc <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003a64:	e0 68 13 14 	mov	r8,4884
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a68:	30 1a       	mov	r10,1
80003a6a:	e0 6b 15 90 	mov	r11,5520
80003a6e:	58 0c       	cp.w	r12,0
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003a70:	c2 70       	breq	80003abe <fat_check_mount_select+0x92>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003a72:	aa 87       	st.b	r5[0x0],r7
80003a74:	a0 87       	st.b	r0[0x0],r7
80003a76:	09 89       	ld.ub	r9,r4[0x0]
80003a78:	03 8e       	ld.ub	lr,r1[0x0]
   fs_g_sectorcache.u8_dirty              = false;
80003a7a:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003a7e:	c3 e0       	breq	80003afa <fat_check_mount_select+0xce>
80003a80:	07 8e       	ld.ub	lr,r3[0x0]
80003a82:	f2 0e 18 00 	cp.b	lr,r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003a86:	e7 f6 0e 00 	st.beq	r3[0x0],r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003a8a:	e7 f7 0e 08 	st.beq	r3[0x8],r7
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003a8e:	f9 be 00 ff 	moveq	lr,-1
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003a92:	e7 fe 0a 03 	st.weq	r3[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003a96:	f1 66 00 15 	st.b	r8[21],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003a9a:	b6 8a       	st.b	r11[0x0],r10
80003a9c:	e0 6e 15 92 	mov	lr,5522
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003aa0:	bc 87       	st.b	lr[0x0],r7
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003aa2:	b0 8a       	st.b	r8[0x0],r10
80003aa4:	b0 a6       	st.b	r8[0x2],r6
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003aa6:	b0 96       	st.b	r8[0x1],r6
80003aa8:	f1 67 00 14 	st.b	r8[20],r7
//!
bool  fat_check_mount( void )
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003aac:	f1 66 00 16 	st.b	r8[22],r6
80003ab0:	58 3c       	cp.w	r12,3
80003ab2:	c1 f0       	breq	80003af0 <fat_check_mount_select+0xc4>
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80003ab4:	58 2c       	cp.w	r12,2
80003ab6:	c2 f0       	breq	80003b14 <fat_check_mount_select+0xe8>
80003ab8:	d8 3a       	popm	r0-r7,pc,r12=0
80003aba:	e0 65 15 8c 	mov	r5,5516
80003abe:	0b 89       	ld.ub	r9,r5[0x0]
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
   {
      if( !fat_mount() )
80003ac0:	30 08       	mov	r8,0
80003ac2:	f0 09 18 00 	cp.b	r9,r8
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80003ac6:	c0 70       	breq	80003ad4 <fat_check_mount_select+0xa8>
80003ac8:	8a 19       	ld.sh	r9,r5[0x2]
80003aca:	3f f8       	mov	r8,-1
80003acc:	f0 09 19 00 	cp.h	r9,r8
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003ad0:	c1 c0       	breq	80003b08 <fat_check_mount_select+0xdc>
80003ad2:	da 3a       	popm	r0-r7,pc,r12=1
80003ad4:	e0 a0 06 bc 	rcall	8000484c <fat_mount>
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003ad8:	cf 81       	brne	80003ac8 <fat_check_mount_select+0x9c>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003ada:	30 e9       	mov	r9,14
80003adc:	e0 68 15 90 	mov	r8,5520
80003ae0:	b0 89       	st.b	r8[0x0],r9
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003ae2:	d8 32       	popm	r0-r7,pc
80003ae4:	30 19       	mov	r9,1
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003ae6:	e0 68 15 90 	mov	r8,5520
80003aea:	30 0c       	mov	r12,0
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003aec:	b0 89       	st.b	r8[0x0],r9
80003aee:	d8 32       	popm	r0-r7,pc
80003af0:	2f f2       	sub	r2,-1
80003af2:	e0 42 00 64 	cp.w	r2,100
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003af6:	cb 41       	brne	80003a5e <fat_check_mount_select+0x32>
80003af8:	ce 0b       	rjmp	80003ab8 <fat_check_mount_select+0x8c>
80003afa:	e0 6e 15 88 	mov	lr,5512
80003afe:	bc 87       	st.b	lr[0x0],r7
80003b00:	e0 6e 15 78 	mov	lr,5496
80003b04:	bc 87       	st.b	lr[0x0],r7
80003b06:	cb db       	rjmp	80003a80 <fat_check_mount_select+0x54>
80003b08:	30 f9       	mov	r9,15
80003b0a:	e0 68 15 90 	mov	r8,5520
80003b0e:	30 0c       	mov	r12,0
80003b10:	b0 89       	st.b	r8[0x0],r9
80003b12:	d8 32       	popm	r0-r7,pc
80003b14:	31 88       	mov	r8,24
80003b16:	30 0c       	mov	r12,0
80003b18:	b6 88       	st.b	r11[0x0],r8
80003b1a:	d8 32       	popm	r0-r7,pc

80003b1c <fat_check_mount_noopen>:
80003b1c:	d4 31       	pushm	r0-r7,lr
80003b1e:	e0 64 13 12 	mov	r4,4882
80003b22:	30 08       	mov	r8,0
80003b24:	09 89       	ld.ub	r9,r4[0x0]
80003b26:	f0 09 18 00 	cp.b	r9,r8
80003b2a:	c4 11       	brne	80003bac <fat_check_mount_noopen+0x90>
80003b2c:	e0 65 15 40 	mov	r5,5440
80003b30:	3f f6       	mov	r6,-1
80003b32:	0b 89       	ld.ub	r9,r5[0x0]

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003b34:	ec 09 18 00 	cp.b	r9,r6
   {
      fs_g_status = FS_ERR_HW;
80003b38:	e0 80 00 8b 	breq	80003c4e <fat_check_mount_noopen+0x132>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003b3c:	30 01       	mov	r1,0
      Fat_file_close();                            // By default the file is not open
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003b3e:	e0 63 15 8c 	mov	r3,5516
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003b42:	02 97       	mov	r7,r1
80003b44:	e0 60 15 94 	mov	r0,5524
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003b48:	e0 62 15 c8 	mov	r2,5576
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003b4c:	12 9c       	mov	r12,r9

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003b4e:	e0 a0 1b 37 	rcall	800071bc <mem_test_unit_ready>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003b52:	e0 68 13 14 	mov	r8,4884
80003b56:	30 1a       	mov	r10,1
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003b58:	e0 6b 15 90 	mov	r11,5520
80003b5c:	58 0c       	cp.w	r12,0
80003b5e:	c2 90       	breq	80003bb0 <fat_check_mount_noopen+0x94>
80003b60:	e0 6e 13 00 	mov	lr,4864

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003b64:	a6 87       	st.b	r3[0x0],r7
80003b66:	bc 87       	st.b	lr[0x0],r7
80003b68:	0b 89       	ld.ub	r9,r5[0x0]
80003b6a:	01 8e       	ld.ub	lr,r0[0x0]
   fs_g_sectorcache.u8_dirty              = false;
80003b6c:	f2 0e 18 00 	cp.b	lr,r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003b70:	c7 b0       	breq	80003c66 <fat_check_mount_noopen+0x14a>
80003b72:	05 8e       	ld.ub	lr,r2[0x0]
80003b74:	f2 0e 18 00 	cp.b	lr,r9
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003b78:	e5 f6 0e 00 	st.beq	r2[0x0],r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003b7c:	e5 f7 0e 08 	st.beq	r2[0x8],r7
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003b80:	f9 be 00 ff 	moveq	lr,-1
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003b84:	e5 fe 0a 03 	st.weq	r2[0xc],lr
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003b88:	f1 66 00 15 	st.b	r8[21],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003b8c:	b6 8a       	st.b	r11[0x0],r10
80003b8e:	e0 6e 15 92 	mov	lr,5522
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003b92:	bc 87       	st.b	lr[0x0],r7
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003b94:	b0 8a       	st.b	r8[0x0],r10
80003b96:	b0 a6       	st.b	r8[0x2],r6
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
      return true;
   if( Fat_file_is_open() )
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003b98:	b0 96       	st.b	r8[0x1],r6
80003b9a:	f1 67 00 14 	st.b	r8[20],r7
//!
bool  fat_check_mount( void )
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003b9e:	f1 66 00 16 	st.b	r8[22],r6
80003ba2:	58 3c       	cp.w	r12,3
80003ba4:	c5 b0       	breq	80003c5a <fat_check_mount_noopen+0x13e>
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80003ba6:	58 2c       	cp.w	r12,2
80003ba8:	c7 70       	breq	80003c96 <fat_check_mount_noopen+0x17a>
80003baa:	d8 3a       	popm	r0-r7,pc,r12=0
80003bac:	e0 63 15 8c 	mov	r3,5516
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003bb0:	07 89       	ld.ub	r9,r3[0x0]
80003bb2:	30 08       	mov	r8,0
80003bb4:	f0 09 18 00 	cp.b	r9,r8
80003bb8:	c4 30       	breq	80003c3e <fat_check_mount_noopen+0x122>
80003bba:	09 89       	ld.ub	r9,r4[0x0]
   {
      fs_g_status = FS_ERR_HW;
80003bbc:	30 08       	mov	r8,0
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003bbe:	f0 09 18 00 	cp.b	r9,r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003bc2:	c5 91       	brne	80003c74 <fat_check_mount_noopen+0x158>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003bc4:	e0 65 15 40 	mov	r5,5440
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003bc8:	3f f6       	mov	r6,-1
80003bca:	0b 89       	ld.ub	r9,r5[0x0]
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003bcc:	ec 09 18 00 	cp.b	r9,r6
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003bd0:	c7 70       	breq	80003cbe <fat_check_mount_noopen+0x1a2>

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
      if( CTRL_GOOD       == status )
80003bd2:	30 02       	mov	r2,0
80003bd4:	e0 60 13 00 	mov	r0,4864
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
80003bd8:	04 97       	mov	r7,r2
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003bda:	e0 61 15 94 	mov	r1,5524
80003bde:	e0 64 15 c8 	mov	r4,5576
80003be2:	12 9c       	mov	r12,r9
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003be4:	e0 a0 1a ec 	rcall	800071bc <mem_test_unit_ready>

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003be8:	e0 68 13 14 	mov	r8,4884
80003bec:	30 1a       	mov	r10,1
   fs_g_sectorcache.u8_dirty              = false;
80003bee:	e0 6b 15 90 	mov	r11,5520
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003bf2:	58 0c       	cp.w	r12,0
80003bf4:	c4 00       	breq	80003c74 <fat_check_mount_noopen+0x158>
80003bf6:	a6 87       	st.b	r3[0x0],r7
80003bf8:	a0 87       	st.b	r0[0x0],r7
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003bfa:	0b 89       	ld.ub	r9,r5[0x0]
80003bfc:	03 8e       	ld.ub	lr,r1[0x0]
      {
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003bfe:	f2 0e 18 00 	cp.b	lr,r9
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003c02:	c5 30       	breq	80003ca8 <fat_check_mount_noopen+0x18c>
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c04:	09 8e       	ld.ub	lr,r4[0x0]
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003c06:	f2 0e 18 00 	cp.b	lr,r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003c0a:	e9 f6 0e 00 	st.beq	r4[0x0],r6
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003c0e:	e9 f7 0e 08 	st.beq	r4[0x8],r7
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003c12:	f9 be 00 ff 	moveq	lr,-1
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003c16:	e9 fe 0a 03 	st.weq	r4[0xc],lr
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
      return true;
   if( Fat_file_is_open() )
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003c1a:	f1 66 00 15 	st.b	r8[21],r6
{
   if( !fat_check_device() )
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
   {
      if( !fat_mount() )
80003c1e:	b6 8a       	st.b	r11[0x0],r10
80003c20:	e0 6e 15 92 	mov	lr,5522
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80003c24:	bc 87       	st.b	lr[0x0],r7
80003c26:	b0 8a       	st.b	r8[0x0],r10
80003c28:	b0 a6       	st.b	r8[0x2],r6
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003c2a:	b0 96       	st.b	r8[0x1],r6
80003c2c:	f1 67 00 14 	st.b	r8[20],r7
80003c30:	f1 66 00 16 	st.b	r8[22],r6
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003c34:	58 3c       	cp.w	r12,3
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003c36:	c3 40       	breq	80003c9e <fat_check_mount_noopen+0x182>
80003c38:	58 2c       	cp.w	r12,2
80003c3a:	c3 e0       	breq	80003cb6 <fat_check_mount_noopen+0x19a>
80003c3c:	da 3a       	popm	r0-r7,pc,r12=1
80003c3e:	e0 a0 06 07 	rcall	8000484c <fat_mount>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003c42:	cb c1       	brne	80003bba <fat_check_mount_noopen+0x9e>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003c44:	30 e9       	mov	r9,14
80003c46:	e0 68 15 90 	mov	r8,5520
//!
bool  fat_check_noopen( void )
{
   if( !fat_check_device() )
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003c4a:	b0 89       	st.b	r8[0x0],r9
80003c4c:	d8 32       	popm	r0-r7,pc
80003c4e:	30 19       	mov	r9,1
80003c50:	e0 68 15 90 	mov	r8,5520
      return true;
   if( Fat_file_is_open() )
80003c54:	30 0c       	mov	r12,0
80003c56:	b0 89       	st.b	r8[0x0],r9
80003c58:	d8 32       	popm	r0-r7,pc
80003c5a:	2f f1       	sub	r1,-1
80003c5c:	e0 41 00 64 	cp.w	r1,100
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003c60:	fe 91 ff 76 	brne	80003b4c <fat_check_mount_noopen+0x30>
80003c64:	ca 3b       	rjmp	80003baa <fat_check_mount_noopen+0x8e>
80003c66:	e0 6e 15 88 	mov	lr,5512
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003c6a:	bc 87       	st.b	lr[0x0],r7
80003c6c:	e0 6e 15 78 	mov	lr,5496
         fat_cache_reset();
      }
      fat_cache_clusterlist_reset();

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
80003c70:	bc 87       	st.b	lr[0x0],r7
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003c72:	c8 0b       	rjmp	80003b72 <fat_check_mount_noopen+0x56>
80003c74:	07 89       	ld.ub	r9,r3[0x0]
80003c76:	30 08       	mov	r8,0
80003c78:	f0 09 18 00 	cp.b	r9,r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003c7c:	ce 00       	breq	80003c3c <fat_check_mount_noopen+0x120>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003c7e:	e0 69 13 00 	mov	r9,4864
80003c82:	13 89       	ld.ub	r9,r9[0x0]
      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003c84:	f0 09 18 00 	cp.b	r9,r8
80003c88:	cd a0       	breq	80003c3c <fat_check_mount_noopen+0x120>
80003c8a:	30 59       	mov	r9,5
   if( g_b_no_check_disk )
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
   {
      fs_g_status = FS_ERR_HW;
80003c8c:	e0 68 15 90 	mov	r8,5520
80003c90:	30 0c       	mov	r12,0
80003c92:	b0 89       	st.b	r8[0x0],r9
80003c94:	d8 32       	popm	r0-r7,pc
80003c96:	31 88       	mov	r8,24
80003c98:	30 0c       	mov	r12,0
80003c9a:	b6 88       	st.b	r11[0x0],r8
80003c9c:	d8 32       	popm	r0-r7,pc
80003c9e:	2f f2       	sub	r2,-1
80003ca0:	e0 42 00 64 	cp.w	r2,100
80003ca4:	c9 f1       	brne	80003be2 <fat_check_mount_noopen+0xc6>
80003ca6:	cc bb       	rjmp	80003c3c <fat_check_mount_noopen+0x120>
80003ca8:	e0 6e 15 88 	mov	lr,5512
80003cac:	bc 87       	st.b	lr[0x0],r7
80003cae:	e0 6e 15 78 	mov	lr,5496
80003cb2:	bc 87       	st.b	lr[0x0],r7
80003cb4:	ca 8b       	rjmp	80003c04 <fat_check_mount_noopen+0xe8>
80003cb6:	31 88       	mov	r8,24
80003cb8:	30 1c       	mov	r12,1
80003cba:	b6 88       	st.b	r11[0x0],r8
80003cbc:	d8 32       	popm	r0-r7,pc
80003cbe:	30 19       	mov	r9,1
80003cc0:	e0 68 15 90 	mov	r8,5520
80003cc4:	30 1c       	mov	r12,1
80003cc6:	b0 89       	st.b	r8[0x0],r9
80003cc8:	d8 32       	popm	r0-r7,pc
80003cca:	d7 03       	nop

80003ccc <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003ccc:	d4 31       	pushm	r0-r7,lr
80003cce:	20 9d       	sub	sp,36
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80003cd0:	30 88       	mov	r8,8
80003cd2:	e0 6e 15 90 	mov	lr,5520
80003cd6:	bc 88       	st.b	lr[0x0],r8

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80003cd8:	30 38       	mov	r8,3
80003cda:	f0 0c 18 00 	cp.b	r12,r8
80003cde:	5f 0a       	sreq	r10
80003ce0:	50 3a       	stdsp	sp[0xc],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80003ce2:	e0 63 15 8c 	mov	r3,5516
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003ce6:	18 94       	mov	r4,r12
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80003ce8:	07 89       	ld.ub	r9,r3[0x0]
80003cea:	f0 09 18 00 	cp.b	r9,r8
80003cee:	5f 08       	sreq	r8
80003cf0:	f5 e8 00 08 	and	r8,r10,r8
80003cf4:	e0 81 01 9f 	brne	80004032 <fat_cluster_list+0x366>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80003cf8:	e0 66 15 e8 	mov	r6,5608
80003cfc:	6c 08       	ld.w	r8,r6[0x0]
80003cfe:	58 08       	cp.w	r8,0
80003d00:	c7 b0       	breq	80003df6 <fat_cluster_list+0x12a>
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80003d02:	e0 67 15 e0 	mov	r7,5600
80003d06:	8f 08       	st.w	r7[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80003d08:	30 39       	mov	r9,3
80003d0a:	f2 04 18 00 	cp.b	r4,r9
80003d0e:	e0 81 02 00 	brne	8000410e <fat_cluster_list+0x442>
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003d12:	e0 6c 13 14 	mov	r12,4884
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003d16:	3f f8       	mov	r8,-1
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003d18:	50 4c       	stdsp	sp[0x10],r12
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003d1a:	f9 68 00 15 	st.b	r12[21],r8
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003d1e:	b8 a8       	st.b	r12[0x2],r8
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80003d20:	b8 98       	st.b	r12[0x1],r8
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80003d22:	f9 68 00 16 	st.b	r12[22],r8
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003d26:	30 08       	mov	r8,0
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003d28:	f9 68 00 14 	st.b	r12[20],r8
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003d2c:	e0 6b 15 92 	mov	r11,5522
80003d30:	b6 88       	st.b	r11[0x0],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003d32:	30 18       	mov	r8,1
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003d34:	50 6b       	stdsp	sp[0x18],r11
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80003d36:	b8 88       	st.b	r12[0x0],r8
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80003d38:	e0 a0 03 7e 	rcall	80004434 <fat_clear_info_fat_mod>
80003d3c:	e0 65 15 40 	mov	r5,5440
80003d40:	0b 9a       	ld.ub	r10,r5[0x1]
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80003d42:	3f f8       	mov	r8,-1
80003d44:	6c 19       	ld.w	r9,r6[0x4]
80003d46:	ac 88       	st.b	r6[0x0],r8
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003d48:	30 32       	mov	r2,3
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80003d4a:	e0 68 15 e8 	mov	r8,5608
80003d4e:	2f 98       	sub	r8,-7
80003d50:	50 28       	stdsp	sp[0x8],r8
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80003d52:	14 39       	cp.w	r9,r10
80003d54:	c2 02       	brcc	80003d94 <fat_cluster_list+0xc8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003d56:	6a 5c       	ld.w	r12,r5[0x14]
80003d58:	6a 4b       	ld.w	r11,r5[0x10]
80003d5a:	f8 0b 00 0b 	add	r11,r12,r11
80003d5e:	6e 08       	ld.w	r8,r7[0x0]
80003d60:	f6 09 00 09 	add	r9,r11,r9
80003d64:	f0 cb 00 02 	sub	r11,r8,2
80003d68:	f4 0b 03 49 	mac	r9,r10,r11
80003d6c:	8d 09       	st.w	r6[0x0],r9
80003d6e:	e0 61 15 e8 	mov	r1,5608
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80003d72:	30 29       	mov	r9,2
80003d74:	f2 04 18 00 	cp.b	r4,r9
80003d78:	e0 80 01 f5 	breq	80004162 <fat_cluster_list+0x496>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80003d7c:	40 2c       	lddsp	r12,sp[0x8]
80003d7e:	e0 6b 15 e8 	mov	r11,5608
80003d82:	19 89       	ld.ub	r9,r12[0x0]
80003d84:	f4 09 01 0e 	sub	lr,r10,r9
80003d88:	97 1e       	st.w	r11[0x4],lr

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003d8a:	30 19       	mov	r9,1
80003d8c:	f2 04 18 00 	cp.b	r4,r9
80003d90:	e0 80 00 a7 	breq	80003ede <fat_cluster_list+0x212>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80003d94:	30 0c       	mov	r12,0
80003d96:	fe b0 fc d3 	rcall	8000373c <fat_cluster_val>
80003d9a:	c7 20       	breq	80003e7e <fat_cluster_list+0x1b2>
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80003d9c:	6e 18       	ld.w	r8,r7[0x4]
80003d9e:	58 08       	cp.w	r8,0
80003da0:	c6 f0       	breq	80003e7e <fat_cluster_list+0x1b2>
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80003da2:	07 89       	ld.ub	r9,r3[0x0]
80003da4:	e4 09 18 00 	cp.b	r9,r2
80003da8:	e0 80 00 91 	breq	80003eca <fat_cluster_list+0x1fe>
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80003dac:	30 2a       	mov	r10,2
80003dae:	f4 09 18 00 	cp.b	r9,r10
80003db2:	e0 80 01 39 	breq	80004024 <fat_cluster_list+0x358>
    if (fs_g_cluster.u32_val >= 0xFFF8)
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80003db6:	30 1a       	mov	r10,1
80003db8:	f4 09 18 00 	cp.b	r9,r10
80003dbc:	c5 c0       	breq	80003e74 <fat_cluster_list+0x1a8>
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
   }  // End of main loop
80003dbe:	30 01       	mov	r1,0
      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
      if (FS_CLUS_BAD == u8_cluster_status)
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80003dc0:	e0 69 15 e8 	mov	r9,5608
80003dc4:	13 8a       	ld.ub	r10,r9[0x0]
80003dc6:	3f f9       	mov	r9,-1
80003dc8:	f2 0a 18 00 	cp.b	r10,r9
80003dcc:	c5 e0       	breq	80003e88 <fat_cluster_list+0x1bc>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80003dce:	30 19       	mov	r9,1
80003dd0:	f2 04 18 00 	cp.b	r4,r9
80003dd4:	e0 80 00 c5 	breq	80003f5e <fat_cluster_list+0x292>
               fat_cache_clusterlist_update_finish();
               return true;                              // End of segment
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80003dd8:	40 3c       	lddsp	r12,sp[0xc]
80003dda:	58 0c       	cp.w	r12,0
80003ddc:	e0 81 00 ca 	brne	80003f70 <fat_cluster_list+0x2a4>
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80003de0:	58 01       	cp.w	r1,0
80003de2:	e0 81 01 e6 	brne	800041ae <fat_cluster_list+0x4e2>
            fat_cache_clusterlist_update_finish();
            return true; // End of segment
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80003de6:	6c 18       	ld.w	r8,r6[0x4]
80003de8:	0b 99       	ld.ub	r9,r5[0x1]
80003dea:	10 09       	add	r9,r8
80003dec:	6e 18       	ld.w	r8,r7[0x4]
80003dee:	8d 19       	st.w	r6[0x4],r9
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80003df0:	8f 08       	st.w	r7[0x0],r8
80003df2:	0b 9a       	ld.ub	r10,r5[0x1]
   }  // End of main loop
80003df4:	ca fb       	rjmp	80003d52 <fat_cluster_list+0x86>
   }

   if ( 0 == fs_g_seg.u32_addr )
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80003df6:	40 39       	lddsp	r9,sp[0xc]
80003df8:	58 09       	cp.w	r9,0
80003dfa:	c4 21       	brne	80003e7e <fat_cluster_list+0x1b2>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80003dfc:	07 88       	ld.ub	r8,r3[0x0]
80003dfe:	30 19       	mov	r9,1
80003e00:	f0 ca 00 01 	sub	r10,r8,1
80003e04:	f2 0a 18 00 	cp.b	r10,r9
80003e08:	e0 88 01 87 	brls	80004116 <fat_cluster_list+0x44a>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
            return false;        // Position outside the root area
         }
      }
      if ( Is_fat32 )
80003e0c:	30 39       	mov	r9,3
80003e0e:	f2 08 18 00 	cp.b	r8,r9
80003e12:	e0 80 01 21 	breq	80004054 <fat_cluster_list+0x388>
80003e16:	e0 67 15 e0 	mov	r7,5600
80003e1a:	e0 65 15 40 	mov	r5,5440
80003e1e:	6e 08       	ld.w	r8,r7[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003e20:	e0 62 13 14 	mov	r2,4884
80003e24:	50 42       	stdsp	sp[0x10],r2
      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
      if (FS_CLUS_BAD == u8_cluster_status)
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80003e26:	6c 1c       	ld.w	r12,r6[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003e28:	40 4e       	lddsp	lr,sp[0x10]
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80003e2a:	0b 82       	ld.ub	r2,r5[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003e2c:	1d 89       	ld.ub	r9,lr[0x0]
80003e2e:	f2 0b 18 00 	cp.b	r11,r9
80003e32:	e0 80 01 28 	breq	80004082 <fat_cluster_list+0x3b6>
80003e36:	40 4e       	lddsp	lr,sp[0x10]
80003e38:	e0 61 13 14 	mov	r1,4884
80003e3c:	fd 3a 00 14 	ld.ub	r10,lr[20]
80003e40:	f6 0a 18 00 	cp.b	r10,r11
80003e44:	e0 80 01 0f 	breq	80004062 <fat_cluster_list+0x396>
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80003e48:	40 42       	lddsp	r2,sp[0x10]
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80003e4a:	f7 e9 20 09 	eor	r9,r11,r9
80003e4e:	5c 59       	castu.b	r9
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80003e50:	f2 09 00 2a 	add	r10,r9,r9<<0x2
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80003e54:	f4 ce ff ff 	sub	lr,r10,-1
80003e58:	e4 0e 09 28 	st.w	r2[lr<<0x2],r8
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80003e5c:	e4 0a 00 28 	add	r8,r2,r10<<0x2
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80003e60:	91 2c       	st.w	r8[0x8],r12
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80003e62:	b0 8b       	st.b	r8[0x0],r11
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
80003e64:	e0 6e 15 92 	mov	lr,5522
80003e68:	bc 89       	st.b	lr[0x0],r9
80003e6a:	50 6e       	stdsp	sp[0x18],lr
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
80003e6c:	3f f9       	mov	r9,-1
80003e6e:	b0 a9       	st.b	r8[0x2],r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80003e70:	0b 9a       	ld.ub	r10,r5[0x1]
80003e72:	c6 8b       	rjmp	80003d42 <fat_cluster_list+0x76>
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80003e74:	e0 48 0f f7 	cp.w	r8,4087
80003e78:	e0 8b 00 06 	brhi	80003e84 <fat_cluster_list+0x1b8>
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFF7)
80003e7c:	ca 11       	brne	80003dbe <fat_cluster_list+0xf2>
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
   }  // End of main loop
80003e7e:	30 0c       	mov	r12,0
}
80003e80:	2f 7d       	sub	sp,-36
80003e82:	d8 32       	popm	r0-r7,pc
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
   }  // End of main loop
80003e84:	30 21       	mov	r1,2
80003e86:	c9 db       	rjmp	80003dc0 <fat_cluster_list+0xf4>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80003e88:	58 01       	cp.w	r1,0
80003e8a:	e0 81 01 b0 	brne	800041ea <fat_cluster_list+0x51e>
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
            fs_g_status = FS_ERR_OUT_LIST;
            return false;
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80003e8e:	6c 1a       	ld.w	r10,r6[0x4]
80003e90:	0b 99       	ld.ub	r9,r5[0x1]
80003e92:	f4 09 01 09 	sub	r9,r10,r9
80003e96:	8d 19       	st.w	r6[0x4],r9
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80003e98:	40 3c       	lddsp	r12,sp[0xc]
80003e9a:	58 0c       	cp.w	r12,0
80003e9c:	ca a0       	breq	80003df0 <fat_cluster_list+0x124>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80003e9e:	58 09       	cp.w	r9,0
80003ea0:	ca 81       	brne	80003df0 <fat_cluster_list+0x124>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80003ea2:	e0 6b 15 e8 	mov	r11,5608
80003ea6:	97 08       	st.w	r11[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80003ea8:	e0 68 ff ff 	mov	r8,65535
80003eac:	ea 18 0f ff 	orh	r8,0xfff
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80003eb0:	30 1c       	mov	r12,1
         {
            if( fs_g_seg.u32_size_or_pos == 0)
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80003eb2:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80003eb4:	fe b0 fc 44 	rcall	8000373c <fat_cluster_val>
80003eb8:	ce 30       	breq	80003e7e <fat_cluster_list+0x1b2>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Resotre the next cluster
80003eba:	e0 69 15 e0 	mov	r9,5600
80003ebe:	e0 6a 15 e8 	mov	r10,5608
80003ec2:	74 08       	ld.w	r8,r10[0x0]
80003ec4:	93 18       	st.w	r9[0x4],r8
80003ec6:	74 19       	ld.w	r9,r10[0x4]
80003ec8:	c9 4b       	rjmp	80003df0 <fat_cluster_list+0x124>

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80003eca:	e0 6b ff f7 	mov	r11,65527
80003ece:	ea 1b 0f ff 	orh	r11,0xfff
80003ed2:	16 38       	cp.w	r8,r11
80003ed4:	fe 9b ff d8 	brhi	80003e84 <fat_cluster_list+0x1b8>
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
80003ed8:	fe 91 ff 73 	brne	80003dbe <fat_cluster_list+0xf2>
80003edc:	cd 1b       	rjmp	80003e7e <fat_cluster_list+0x1b2>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003ede:	07 8a       	ld.ub	r10,r3[0x0]
80003ee0:	f2 0a 18 00 	cp.b	r10,r9
80003ee4:	fe 90 ff 58 	breq	80003d94 <fat_cluster_list+0xc8>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80003ee8:	50 08       	stdsp	sp[0x0],r8
80003eea:	30 0c       	mov	r12,0
80003eec:	fe b0 fc 28 	rcall	8000373c <fat_cluster_val>
80003ef0:	40 08       	lddsp	r8,sp[0x0]
80003ef2:	cc 60       	breq	80003e7e <fat_cluster_list+0x1b2>
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003ef4:	08 90       	mov	r0,r4
   if ( Is_fat32 )
   {
      fs_g_u16_pos_fat += 4;
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003ef6:	e0 61 13 10 	mov	r1,4880
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003efa:	e0 69 02 00 	mov	r9,512
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003efe:	0a 94       	mov	r4,r5
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80003f00:	6e 0b       	ld.w	r11,r7[0x0]
80003f02:	f6 ca ff ff 	sub	r10,r11,-1
80003f06:	8f 0a       	st.w	r7[0x0],r10
80003f08:	6e 1c       	ld.w	r12,r7[0x4]
80003f0a:	18 3a       	cp.w	r10,r12
80003f0c:	e0 81 01 16 	brne	80004138 <fat_cluster_list+0x46c>
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003f10:	07 8c       	ld.ub	r12,r3[0x0]
80003f12:	e4 0c 18 00 	cp.b	r12,r2
80003f16:	c4 30       	breq	80003f9c <fat_cluster_list+0x2d0>
   {
      fs_g_u16_pos_fat += 4;
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003f18:	82 0b       	ld.sh	r11,r1[0x0]
80003f1a:	e0 6a 13 10 	mov	r10,4880
80003f1e:	2f eb       	sub	r11,-2
80003f20:	50 5a       	stdsp	sp[0x14],r10
80003f22:	5c 8b       	casts.h	r11
80003f24:	a2 0b       	st.h	r1[0x0],r11
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003f26:	f2 0b 19 00 	cp.h	r11,r9
80003f2a:	c4 30       	breq	80003fb0 <fat_cluster_list+0x2e4>
80003f2c:	5c 7b       	castu.h	r11
80003f2e:	e0 65 13 40 	mov	r5,4928
80003f32:	f6 ca ff ff 	sub	r10,r11,-1
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
80003f36:	ea 0a 07 0e 	ld.ub	lr,r5[r10]
      if( !fat_cache_read_sector( true ))
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003f3a:	ee ca ff fc 	sub	r10,r7,-4
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
80003f3e:	b4 ae       	st.b	r10[0x2],lr
      if( !fat_cache_read_sector( true ))
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003f40:	ea 0b 07 0e 	ld.ub	lr,r5[r11]
80003f44:	b4 be       	st.b	r10[0x3],lr
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32

   if ( Is_fat32 )
80003f46:	e4 0c 18 00 	cp.b	r12,r2
80003f4a:	cd b1       	brne	80003f00 <fat_cluster_list+0x234>
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003f4c:	e0 6c 13 40 	mov	r12,4928
80003f50:	f8 0b 00 0b 	add	r11,r12,r11
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80003f54:	17 bc       	ld.ub	r12,r11[0x3]
80003f56:	b4 8c       	st.b	r10[0x0],r12
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32

   if ( Is_fat32 )
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003f58:	17 ab       	ld.ub	r11,r11[0x2]
80003f5a:	b4 9b       	st.b	r10[0x1],r11
80003f5c:	cd 2b       	rjmp	80003f00 <fat_cluster_list+0x234>
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80003f5e:	6e 09       	ld.w	r9,r7[0x0]
80003f60:	2f f9       	sub	r9,-1
80003f62:	10 39       	cp.w	r9,r8
80003f64:	fe 90 ff 3e 	breq	80003de0 <fat_cluster_list+0x114>
            if (FS_CLUST_ACT_CLR == opt_action)
            {
               return fat_update_fat2();
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80003f68:	fe b0 f6 b6 	rcall	80002cd4 <fat_cache_clusterlist_update_finish>
80003f6c:	30 1c       	mov	r12,1
            return true; // End of segment
80003f6e:	c8 9b       	rjmp	80003e80 <fat_cluster_list+0x1b4>
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80003f70:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80003f72:	30 08       	mov	r8,0
80003f74:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80003f76:	6c 19       	ld.w	r9,r6[0x4]
80003f78:	0b 98       	ld.ub	r8,r5[0x1]
80003f7a:	10 39       	cp.w	r9,r8
80003f7c:	c0 82       	brcc	80003f8c <fat_cluster_list+0x2c0>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80003f7e:	e0 68 ff ff 	mov	r8,65535
80003f82:	ea 18 0f ff 	orh	r8,0xfff
80003f86:	e0 6b 15 e0 	mov	r11,5600
80003f8a:	97 18       	st.w	r11[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80003f8c:	30 1c       	mov	r12,1
80003f8e:	fe b0 fb d7 	rcall	8000373c <fat_cluster_val>
80003f92:	fe 90 ff 76 	breq	80003e7e <fat_cluster_list+0x1b2>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Resotre the next cluster
80003f96:	6c 08       	ld.w	r8,r6[0x0]
80003f98:	8f 18       	st.w	r7[0x4],r8
80003f9a:	c2 3b       	rjmp	80003de0 <fat_cluster_list+0x114>
bool  fat_cluster_readnext( void )
{
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
   {
      fs_g_u16_pos_fat += 4;
80003f9c:	82 0b       	ld.sh	r11,r1[0x0]
80003f9e:	e0 6e 13 10 	mov	lr,4880
80003fa2:	2f cb       	sub	r11,-4
80003fa4:	50 5e       	stdsp	sp[0x14],lr
80003fa6:	5c 8b       	casts.h	r11
80003fa8:	a2 0b       	st.h	r1[0x0],r11
      // Is_fat16
      fs_g_u16_pos_fat += 2;
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003faa:	f2 0b 19 00 	cp.h	r11,r9
80003fae:	cb f1       	brne	80003f2c <fat_cluster_list+0x260>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
      fs_gu32_addrsector++;
80003fb0:	e0 6a 12 fc 	mov	r10,4860

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003fb4:	30 0c       	mov	r12,0
      fs_gu32_addrsector++;
80003fb6:	74 0b       	ld.w	r11,r10[0x0]

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003fb8:	40 5e       	lddsp	lr,sp[0x14]
      fs_gu32_addrsector++;
80003fba:	2f fb       	sub	r11,-1

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003fbc:	bc 0c       	st.h	lr[0x0],r12
      fs_gu32_addrsector++;
80003fbe:	95 0b       	st.w	r10[0x0],r11
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80003fc0:	e0 6e 15 c8 	mov	lr,5576
80003fc4:	09 8c       	ld.ub	r12,r4[0x0]
80003fc6:	1d 8a       	ld.ub	r10,lr[0x0]
80003fc8:	f8 0a 18 00 	cp.b	r10,r12
80003fcc:	c3 b0       	breq	80004042 <fat_cluster_list+0x376>
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80003fce:	e0 6a 15 c8 	mov	r10,5576
80003fd2:	f5 3a 00 08 	ld.ub	r10,r10[8]
80003fd6:	50 7a       	stdsp	sp[0x1c],r10
80003fd8:	14 9e       	mov	lr,r10
80003fda:	30 1a       	mov	r10,1
80003fdc:	f4 0e 18 00 	cp.b	lr,r10
80003fe0:	e0 80 00 cb 	breq	80004176 <fat_cluster_list+0x4aa>
80003fe4:	e0 65 13 40 	mov	r5,4928

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003fe8:	3f fa       	mov	r10,-1

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003fea:	e0 6e 15 c8 	mov	lr,5576

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003fee:	bc 8a       	st.b	lr[0x0],r10
   fs_g_sectorcache.u8_dirty              = false;
80003ff0:	30 0a       	mov	r10,0
80003ff2:	fd 6a 00 08 	st.b	lr[8],r10
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003ff6:	3f fa       	mov	r10,-1
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003ff8:	50 19       	stdsp	sp[0x4],r9
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003ffa:	9d 3a       	st.w	lr[0xc],r10
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003ffc:	50 08       	stdsp	sp[0x0],r8

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003ffe:	9d 1b       	st.w	lr[0x4],r11
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80004000:	e0 6a 13 40 	mov	r10,4928
80004004:	e0 a0 18 ec 	rcall	800071dc <memory_2_ram>
80004008:	40 19       	lddsp	r9,sp[0x4]
8000400a:	40 08       	lddsp	r8,sp[0x0]
8000400c:	e0 81 00 a4 	brne	80004154 <fat_cluster_list+0x488>
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004010:	40 5a       	lddsp	r10,sp[0x14]
80004012:	94 8b       	ld.uh	r11,r10[0x0]
80004014:	09 8a       	ld.ub	r10,r4[0x0]
80004016:	e0 6e 15 c8 	mov	lr,5576
8000401a:	07 8c       	ld.ub	r12,r3[0x0]
8000401c:	bc 8a       	st.b	lr[0x0],r10
8000401e:	f6 ca ff ff 	sub	r10,r11,-1
80004022:	c8 ab       	rjmp	80003f36 <fat_cluster_list+0x26a>
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80004024:	e0 48 ff f7 	cp.w	r8,65527
80004028:	fe 9b ff 2e 	brhi	80003e84 <fat_cluster_list+0x1b8>
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
8000402c:	fe 91 fe c9 	brne	80003dbe <fat_cluster_list+0xf2>
80004030:	c2 7b       	rjmp	80003e7e <fat_cluster_list+0x1b2>
   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004032:	50 1b       	stdsp	sp[0x4],r11
80004034:	3f fc       	mov	r12,-1
80004036:	e0 a0 02 bb 	rcall	800045ac <fat_write_fat32_FSInfo>
8000403a:	40 1b       	lddsp	r11,sp[0x4]
8000403c:	fe 91 fe 5e 	brne	80003cf8 <fat_cluster_list+0x2c>
80004040:	c1 fb       	rjmp	80003e7e <fat_cluster_list+0x1b2>
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004042:	7c 1a       	ld.w	r10,lr[0x4]
80004044:	14 3b       	cp.w	r11,r10
80004046:	cc 41       	brne	80003fce <fat_cluster_list+0x302>
80004048:	30 1a       	mov	r10,1
8000404a:	30 0b       	mov	r11,0
8000404c:	e0 65 13 40 	mov	r5,4928
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004050:	07 8c       	ld.ub	r12,r3[0x0]
80004052:	c7 2b       	rjmp	80003f36 <fat_cluster_list+0x26a>
         }
      }
      if ( Is_fat32 )
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004054:	e0 67 15 e0 	mov	r7,5600
80004058:	e0 65 15 40 	mov	r5,5440
8000405c:	6a 68       	ld.w	r8,r5[0x18]
8000405e:	8f 08       	st.w	r7[0x0],r8
80004060:	ce 0a       	rjmp	80003e20 <fat_cluster_list+0x154>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004062:	e3 3a 00 16 	ld.ub	r10,r1[22]
80004066:	e4 0a 18 00 	cp.b	r10,r2
8000406a:	fe 91 fe ef 	brne	80003e48 <fat_cluster_list+0x17c>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
8000406e:	62 6a       	ld.w	r10,r1[0x18]
80004070:	10 3a       	cp.w	r10,r8
80004072:	fe 91 fe eb 	brne	80003e48 <fat_cluster_list+0x17c>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004076:	62 7a       	ld.w	r10,r1[0x1c]
80004078:	14 3c       	cp.w	r12,r10
8000407a:	fe 93 fe e7 	brlo	80003e48 <fat_cluster_list+0x17c>
8000407e:	30 12       	mov	r2,1
80004080:	c0 f8       	rjmp	8000409e <fat_cluster_list+0x3d2>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004082:	1d aa       	ld.ub	r10,lr[0x2]
80004084:	e4 0a 18 00 	cp.b	r10,r2
80004088:	fe 91 fe d7 	brne	80003e36 <fat_cluster_list+0x16a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
8000408c:	7c 1a       	ld.w	r10,lr[0x4]
8000408e:	10 3a       	cp.w	r10,r8
80004090:	fe 91 fe d3 	brne	80003e36 <fat_cluster_list+0x16a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004094:	7c 2a       	ld.w	r10,lr[0x8]
80004096:	14 3c       	cp.w	r12,r10
80004098:	fe 93 fe cf 	brlo	80003e36 <fat_cluster_list+0x16a>
8000409c:	30 02       	mov	r2,0
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
8000409e:	e4 00 15 02 	lsl	r0,r2,0x2
800040a2:	40 48       	lddsp	r8,sp[0x10]
800040a4:	04 00       	add	r0,r2
800040a6:	f8 0a 01 0a 	sub	r10,r12,r10
800040aa:	a3 60       	lsl	r0,0x2
800040ac:	e0 61 13 14 	mov	r1,4884
800040b0:	00 08       	add	r8,r0
800040b2:	70 4e       	ld.w	lr,r8[0x10]
800040b4:	14 3e       	cp.w	lr,r10
800040b6:	e0 88 00 c8 	brls	80004246 <fat_cluster_list+0x57a>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
800040ba:	14 1e       	sub	lr,r10
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
800040bc:	8d 1e       	st.w	r6[0x4],lr
800040be:	70 3c       	ld.w	r12,r8[0xc]
800040c0:	18 0a       	add	r10,r12
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
                  fs_g_u8_current_cache = u8_i;
800040c2:	8d 0a       	st.w	r6[0x0],r10
800040c4:	e0 6a 15 92 	mov	r10,5522

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800040c8:	b4 82       	st.b	r10[0x0],r2
800040ca:	11 9a       	ld.ub	r10,r8[0x1]
800040cc:	f2 0b 18 00 	cp.b	r11,r9
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800040d0:	c0 81       	brne	800040e0 <fat_cluster_list+0x414>
800040d2:	03 98       	ld.ub	r8,r1[0x1]
800040d4:	f4 08 18 00 	cp.b	r8,r10
800040d8:	f7 b8 03 ff 	sublo	r8,-1

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800040dc:	e3 f8 3e 01 	st.bcs	r1[0x1],r8
800040e0:	40 4c       	lddsp	r12,sp[0x10]
800040e2:	e0 68 13 14 	mov	r8,4884
800040e6:	f9 39 00 14 	ld.ub	r9,r12[20]
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
800040ea:	f6 09 18 00 	cp.b	r9,r11
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800040ee:	c0 91       	brne	80004100 <fat_cluster_list+0x434>
800040f0:	f1 39 00 15 	ld.ub	r9,r8[21]
800040f4:	f2 0a 18 00 	cp.b	r10,r9
800040f8:	f7 b9 0b ff 	subhi	r9,-1
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
800040fc:	f1 f9 be 15 	st.bhi	r8[0x15],r9
80004100:	40 4b       	lddsp	r11,sp[0x10]
80004102:	30 08       	mov	r8,0
80004104:	f6 00 00 00 	add	r0,r11,r0
80004108:	30 1c       	mov	r12,1
8000410a:	a0 98       	st.b	r0[0x1],r8
8000410c:	cb aa       	rjmp	80003e80 <fat_cluster_list+0x1b4>

      if ( Is_fat12 || Is_fat16 )
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
8000410e:	e0 65 15 40 	mov	r5,5440
80004112:	fe 9f fe 87 	bral	80003e20 <fat_cluster_list+0x154>
80004116:	e0 69 15 40 	mov	r9,5440
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
8000411a:	6c 18       	ld.w	r8,r6[0x4]
8000411c:	f3 1a 00 1a 	ld.uh	r10,r9[26]
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004120:	14 38       	cp.w	r8,r10
80004122:	c3 f2       	brcc	800041a0 <fat_cluster_list+0x4d4>
80004124:	10 1a       	sub	r10,r8
80004126:	30 1c       	mov	r12,1
80004128:	8d 1a       	st.w	r6[0x4],r10
8000412a:	f3 1a 00 18 	ld.uh	r10,r9[24]
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
8000412e:	72 49       	ld.w	r9,r9[0x10]
80004130:	12 08       	add	r8,r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004132:	14 08       	add	r8,r10
80004134:	8d 08       	st.w	r6[0x0],r8
80004136:	ca 5a       	rjmp	80003e80 <fat_cluster_list+0x1b4>
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004138:	e0 6a 15 e0 	mov	r10,5600
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
8000413c:	08 95       	mov	r5,r4
8000413e:	6c 19       	ld.w	r9,r6[0x4]
80004140:	f6 08 01 08 	sub	r8,r11,r8
                  break;
80004144:	95 0b       	st.w	r10[0x0],r11
80004146:	00 94       	mov	r4,r0
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
80004148:	0b 9a       	ld.ub	r10,r5[0x1]
8000414a:	b5 38       	mul	r8,r10
8000414c:	12 08       	add	r8,r9
8000414e:	8d 18       	st.w	r6[0x4],r8
80004150:	fe 9f fe 22 	bral	80003d94 <fat_cluster_list+0xc8>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004154:	e0 6c 15 90 	mov	r12,5520
80004158:	30 18       	mov	r8,1
8000415a:	b8 88       	st.b	r12[0x0],r8
            fat_cache_clusterlist_update_finish();
8000415c:	30 0c       	mov	r12,0
8000415e:	fe 9f fe 91 	bral	80003e80 <fat_cluster_list+0x1b4>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004162:	62 18       	ld.w	r8,r1[0x4]
            return true;
80004164:	f4 08 01 08 	sub	r8,r10,r8
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80004168:	83 18       	st.w	r1[0x4],r8
8000416a:	fe b0 f5 b5 	rcall	80002cd4 <fat_cache_clusterlist_update_finish>
8000416e:	30 1c       	mov	r12,1
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80004170:	83 1c       	st.w	r1[0x4],r12
80004172:	fe 9f fe 87 	bral	80003e80 <fat_cluster_list+0x1b4>
80004176:	e0 6e 15 c8 	mov	lr,5576
8000417a:	30 0a       	mov	r10,0
8000417c:	fd 6a 00 08 	st.b	lr[8],r10
80004180:	1d 8c       	ld.ub	r12,lr[0x0]
      {
         fs_g_status = FS_LUN_WP;
80004182:	50 19       	stdsp	sp[0x4],r9
80004184:	50 08       	stdsp	sp[0x0],r8
80004186:	e0 a0 18 25 	rcall	800071d0 <mem_wr_protect>
8000418a:	50 8c       	stdsp	sp[0x20],r12
8000418c:	40 19       	lddsp	r9,sp[0x4]
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
            return true;
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
8000418e:	40 08       	lddsp	r8,sp[0x0]
80004190:	c1 60       	breq	800041bc <fat_cluster_list+0x4f0>
80004192:	e0 6c 15 90 	mov	r12,5520
            return false;        // Position outside the root area
80004196:	31 48       	mov	r8,20
80004198:	b8 88       	st.b	r12[0x0],r8

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
8000419a:	30 0c       	mov	r12,0
8000419c:	fe 9f fe 72 	bral	80003e80 <fat_cluster_list+0x1b4>
800041a0:	31 a8       	mov	r8,26
            {
               return fat_update_fat2();
800041a2:	e0 62 15 90 	mov	r2,5520
800041a6:	40 3c       	lddsp	r12,sp[0xc]
800041a8:	a4 88       	st.b	r2[0x0],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800041aa:	fe 9f fe 6b 	bral	80003e80 <fat_cluster_list+0x1b4>
800041ae:	40 3a       	lddsp	r10,sp[0xc]
800041b0:	58 0a       	cp.w	r10,0
800041b2:	fe 90 fe db 	breq	80003f68 <fat_cluster_list+0x29c>
800041b6:	c4 9d       	rcall	80004448 <fat_update_fat2>
800041b8:	fe 9f fe 64 	bral	80003e80 <fat_cluster_list+0x1b4>
800041bc:	e0 6a 15 c8 	mov	r10,5576
800041c0:	e0 6e 15 c8 	mov	lr,5576
      {
         fs_g_status = FS_ERR_HW;
800041c4:	74 1b       	ld.w	r11,r10[0x4]
800041c6:	1d 8c       	ld.ub	r12,lr[0x0]
800041c8:	e0 65 13 40 	mov	r5,4928
800041cc:	50 19       	stdsp	sp[0x4],r9
800041ce:	50 08       	stdsp	sp[0x0],r8
         if (FS_CLUS_END == u8_cluster_status)
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
800041d0:	0a 9a       	mov	r10,r5
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800041d2:	e0 a0 18 0f 	rcall	800071f0 <ram_2_memory>
      if (0xFF == MSB0(fs_g_seg.u32_addr))
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
800041d6:	40 19       	lddsp	r9,sp[0x4]

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800041d8:	40 08       	lddsp	r8,sp[0x0]
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
800041da:	c3 10       	breq	8000423c <fat_cluster_list+0x570>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800041dc:	40 7a       	lddsp	r10,sp[0x1c]
         if (FS_CLUS_END == u8_cluster_status)
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
800041de:	e0 6b 15 90 	mov	r11,5520
800041e2:	40 8c       	lddsp	r12,sp[0x20]
800041e4:	b6 8a       	st.b	r11[0x0],r10
800041e6:	fe 9f fe 4d 	bral	80003e80 <fat_cluster_list+0x1b4>
800041ea:	40 69       	lddsp	r9,sp[0x18]
800041ec:	6e 08       	ld.w	r8,r7[0x0]
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800041ee:	13 8a       	ld.ub	r10,r9[0x0]
800041f0:	6c 17       	ld.w	r7,r6[0x4]
800041f2:	0b 99       	ld.ub	r9,r5[0x1]
800041f4:	8d 19       	st.w	r6[0x4],r9
800041f6:	6a 4b       	ld.w	r11,r5[0x10]
800041f8:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
800041fc:	40 42       	lddsp	r2,sp[0x10]
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
            if (FS_CLUST_ACT_CLR != opt_action)
800041fe:	e4 0a 00 2a 	add	r10,r2,r10<<0x2
80004202:	74 2c       	ld.w	r12,r10[0x8]
80004204:	0e 1c       	sub	r12,r7
               fat_cache_clusterlist_update_finish();
80004206:	95 2c       	st.w	r10[0x8],r12
80004208:	6a 5a       	ld.w	r10,r5[0x14]
8000420a:	16 0a       	add	r10,r11
8000420c:	f0 cb 00 02 	sub	r11,r8,2

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
            fs_g_status = FS_ERR_OUT_LIST;
80004210:	b7 39       	mul	r9,r11
80004212:	f4 09 00 09 	add	r9,r10,r9
80004216:	8d 09       	st.w	r6[0x0],r9
80004218:	30 39       	mov	r9,3
            return false;
8000421a:	f2 04 18 00 	cp.b	r4,r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000421e:	c0 60       	breq	8000422a <fat_cluster_list+0x55e>
80004220:	fe b0 f5 5a 	rcall	80002cd4 <fat_cache_clusterlist_update_finish>
80004224:	e0 68 15 e0 	mov	r8,5600
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004228:	70 08       	ld.w	r8,r8[0x0]
8000422a:	8d 08       	st.w	r6[0x0],r8
8000422c:	e0 6e 15 90 	mov	lr,5520
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004230:	31 a8       	mov	r8,26
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004232:	8d 17       	st.w	r6[0x4],r7
80004234:	bc 88       	st.b	lr[0x0],r8
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80004236:	30 0c       	mov	r12,0
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004238:	fe 9f fe 24 	bral	80003e80 <fat_cluster_list+0x1b4>
8000423c:	e0 6c 12 fc 	mov	r12,4860
80004240:	78 0b       	ld.w	r11,r12[0x0]
80004242:	09 8c       	ld.ub	r12,r4[0x0]
80004244:	cd 2a       	rjmp	80003fe8 <fat_cluster_list+0x31c>
                  fat_cache_clusterlist_update_select();
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the resultat in this cache
                  fs_g_u8_current_cache = u8_i;
80004246:	f0 cb ff f8 	sub	r11,r8,-8
8000424a:	76 09       	ld.w	r9,r11[0x0]
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
8000424c:	fc 09 00 09 	add	r9,lr,r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004250:	0b 9a       	ld.ub	r10,r5[0x1]
80004252:	f2 c1 00 01 	sub	r1,r9,1
80004256:	97 0c       	st.w	r11[0x0],r12
80004258:	e2 0a 0d 00 	divu	r0,r1,r10
8000425c:	f4 00 02 49 	mul	r9,r10,r0
80004260:	f8 09 01 09 	sub	r9,r12,r9
80004264:	8d 19       	st.w	r6[0x4],r9
80004266:	e0 69 15 92 	mov	r9,5522
8000426a:	b2 82       	st.b	r9[0x0],r2
8000426c:	50 69       	stdsp	sp[0x18],r9
8000426e:	3f f9       	mov	r9,-1
80004270:	b0 a9       	st.b	r8[0x2],r9
80004272:	70 39       	ld.w	r9,r8[0xc]
80004274:	6a 48       	ld.w	r8,r5[0x10]
80004276:	fc 09 00 09 	add	r9,lr,r9
8000427a:	20 19       	sub	r9,1
8000427c:	10 19       	sub	r9,r8
8000427e:	6a 58       	ld.w	r8,r5[0x14]
80004280:	10 19       	sub	r9,r8
80004282:	f2 0a 0d 08 	divu	r8,r9,r10
80004286:	2f e8       	sub	r8,-2
80004288:	8f 08       	st.w	r7[0x0],r8
8000428a:	fe 9f fd 5c 	bral	80003d42 <fat_cluster_list+0x76>
8000428e:	d7 03       	nop

80004290 <fat_read_dir>:
80004290:	eb cd 40 fe 	pushm	r1-r7,lr
80004294:	e0 68 15 8c 	mov	r8,5516
80004298:	e0 67 15 c8 	mov	r7,5576
8000429c:	90 95       	ld.uh	r5,r8[0x2]
8000429e:	e0 66 15 40 	mov	r6,5440
800042a2:	a5 85       	lsr	r5,0x4
800042a4:	0f 89       	ld.ub	r9,r7[0x0]
800042a6:	0d 88       	ld.ub	r8,r6[0x0]
800042a8:	f0 09 18 00 	cp.b	r9,r8
800042ac:	c0 d0       	breq	800042c6 <fat_read_dir+0x36>
800042ae:	6c 88       	ld.w	r8,r6[0x20]
800042b0:	e0 64 15 e8 	mov	r4,5608
800042b4:	30 0b       	mov	r11,0
800042b6:	89 08       	st.w	r4[0x0],r8
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
800042b8:	89 15       	st.w	r4[0x4],r5
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
         return true;
      }
   }
   return false;
}
800042ba:	30 2c       	mov	r12,2
800042bc:	fe b0 fd 08 	rcall	80003ccc <fat_cluster_list>

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
800042c0:	c0 91       	brne	800042d2 <fat_read_dir+0x42>
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800042c2:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800042c6:	6e 38       	ld.w	r8,r7[0xc]
800042c8:	6c 89       	ld.w	r9,r6[0x20]
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
800042ca:	12 38       	cp.w	r8,r9
800042cc:	c3 70       	breq	8000433a <fat_read_dir+0xaa>
800042ce:	12 98       	mov	r8,r9
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800042d0:	cf 0b       	rjmp	800042b0 <fat_read_dir+0x20>
800042d2:	68 0b       	ld.w	r11,r4[0x0]
800042d4:	e0 64 12 fc 	mov	r4,4860
800042d8:	89 0b       	st.w	r4[0x0],r11
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800042da:	0d 8c       	ld.ub	r12,r6[0x0]
800042dc:	0f 88       	ld.ub	r8,r7[0x0]
800042de:	f8 08 18 00 	cp.b	r8,r12
800042e2:	c1 f0       	breq	80004320 <fat_read_dir+0x90>
800042e4:	ef 33 00 08 	ld.ub	r3,r7[8]

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800042e8:	e0 61 15 c8 	mov	r1,5576
   fs_g_sectorcache.u8_dirty              = false;
800042ec:	30 18       	mov	r8,1
800042ee:	f0 03 18 00 	cp.b	r3,r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800042f2:	c2 90       	breq	80004344 <fat_read_dir+0xb4>

   // Delete informations about the caches
   fat_cache_reset();

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
800042f4:	3f f8       	mov	r8,-1
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
   fs_g_sectorcache.u8_dirty              = false;
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800042f6:	ae 88       	st.b	r7[0x0],r8
   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
800042f8:	30 08       	mov	r8,0
800042fa:	ef 68 00 08 	st.b	r7[8],r8
800042fe:	3f f8       	mov	r8,-1
         fs_g_status = FS_ERR_HW;
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004300:	8f 1b       	st.w	r7[0x4],r11
80004302:	8f 38       	st.w	r7[0xc],r8
80004304:	e0 6a 13 40 	mov	r10,4928
      fs_gu32_addrsector = fs_g_seg.u32_addr;
      if( fat_cache_read_sector( true ) )
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004308:	e0 a0 17 6a 	rcall	800071dc <memory_2_ram>
8000430c:	c1 01       	brne	8000432c <fat_read_dir+0x9c>
         return true;
8000430e:	0d 89       	ld.ub	r9,r6[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004310:	e0 68 15 c8 	mov	r8,5576
80004314:	b0 89       	st.b	r8[0x0],r9
80004316:	6c 88       	ld.w	r8,r6[0x20]
80004318:	8f 45       	st.w	r7[0x10],r5
   if( b_load )
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
      {
         fs_g_status = FS_ERR_HW;
8000431a:	8f 38       	st.w	r7[0xc],r8
8000431c:	30 1c       	mov	r12,1
8000431e:	cd 2b       	rjmp	800042c2 <fat_read_dir+0x32>
80004320:	e0 68 15 c8 	mov	r8,5576
80004324:	70 18       	ld.w	r8,r8[0x4]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004326:	10 3b       	cp.w	r11,r8
80004328:	cd e1       	brne	800042e4 <fat_read_dir+0x54>
8000432a:	cf 6b       	rjmp	80004316 <fat_read_dir+0x86>
8000432c:	30 19       	mov	r9,1
8000432e:	e0 68 15 90 	mov	r8,5520
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80004332:	30 0c       	mov	r12,0
bool  fat_cache_flush( void )
{
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80004334:	b0 89       	st.b	r8[0x0],r9
80004336:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000433a:	6e 49       	ld.w	r9,r7[0x10]
8000433c:	0a 39       	cp.w	r9,r5
8000433e:	cb 91       	brne	800042b0 <fat_read_dir+0x20>
      {
         fs_g_status = FS_LUN_WP;
80004340:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
80004344:	30 08       	mov	r8,0
80004346:	03 8c       	ld.ub	r12,r1[0x0]
80004348:	e3 68 00 08 	st.b	r1[8],r8
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000434c:	e0 a0 17 42 	rcall	800071d0 <mem_wr_protect>
80004350:	18 92       	mov	r2,r12
80004352:	c0 80       	breq	80004362 <fat_read_dir+0xd2>
80004354:	31 49       	mov	r9,20
80004356:	e0 68 15 90 	mov	r8,5520
      {
         fs_g_status = FS_ERR_HW;
8000435a:	30 0c       	mov	r12,0
8000435c:	b0 89       	st.b	r8[0x0],r9
8000435e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
      {
         fs_g_status = FS_LUN_WP;
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80004362:	03 8c       	ld.ub	r12,r1[0x0]
80004364:	e0 6a 13 40 	mov	r10,4928
80004368:	62 1b       	ld.w	r11,r1[0x4]
8000436a:	e0 a0 17 43 	rcall	800071f0 <ram_2_memory>
8000436e:	c0 70       	breq	8000437c <fat_read_dir+0xec>
80004370:	e0 68 15 90 	mov	r8,5520
80004374:	04 9c       	mov	r12,r2
80004376:	b0 83       	st.b	r8[0x0],r3
80004378:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000437c:	68 0b       	ld.w	r11,r4[0x0]
8000437e:	0d 8c       	ld.ub	r12,r6[0x0]
80004380:	cb ab       	rjmp	800042f4 <fat_read_dir+0x64>
80004382:	d7 03       	nop

80004384 <fat_read_file>:
80004384:	d4 21       	pushm	r4-r7,lr
80004386:	e0 66 13 00 	mov	r6,4864
8000438a:	18 97       	mov	r7,r12
8000438c:	6c 38       	ld.w	r8,r6[0xc]
8000438e:	30 29       	mov	r9,2
80004390:	f0 05 16 09 	lsr	r5,r8,0x9
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
80004394:	f2 0c 18 00 	cp.b	r12,r9
         return true;      // The internal cache contains the sector ascked
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80004398:	c1 80       	breq	800043c8 <fat_read_file+0x44>
8000439a:	30 39       	mov	r9,3
8000439c:	f2 0c 18 00 	cp.b	r12,r9
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
800043a0:	c1 00       	breq	800043c0 <fat_read_file+0x3c>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800043a2:	6c 19       	ld.w	r9,r6[0x4]
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
800043a4:	e0 68 15 e8 	mov	r8,5608
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800043a8:	30 1b       	mov	r11,1
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
800043aa:	91 15       	st.w	r8[0x4],r5
800043ac:	91 09       	st.w	r8[0x0],r9
800043ae:	0e 9c       	mov	r12,r7
800043b0:	fe b0 fc 8e 	rcall	80003ccc <fat_cluster_list>
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
800043b4:	c0 91       	brne	800043c6 <fat_read_file+0x42>
800043b6:	30 38       	mov	r8,3
800043b8:	f0 07 18 00 	cp.b	r7,r8
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
800043bc:	c2 90       	breq	8000440e <fat_read_file+0x8a>
800043be:	d8 2a       	popm	r4-r7,pc,r12=0
800043c0:	6c 19       	ld.w	r9,r6[0x4]
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
800043c2:	58 09       	cp.w	r9,0
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800043c4:	c2 01       	brne	80004404 <fat_read_file+0x80>
800043c6:	da 2a       	popm	r4-r7,pc,r12=1
800043c8:	e0 67 15 c8 	mov	r7,5576
800043cc:	e0 68 15 40 	mov	r8,5440
800043d0:	0f 89       	ld.ub	r9,r7[0x0]
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
800043d2:	11 88       	ld.ub	r8,r8[0x0]
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800043d4:	f0 09 18 00 	cp.b	r9,r8
800043d8:	c2 30       	breq	8000441e <fat_read_file+0x9a>
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
800043da:	6c 18       	ld.w	r8,r6[0x4]
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
800043dc:	e0 64 15 e8 	mov	r4,5608
800043e0:	30 1b       	mov	r11,1
800043e2:	89 08       	st.w	r4[0x0],r8
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
800043e4:	89 15       	st.w	r4[0x4],r5
800043e6:	16 9c       	mov	r12,r11
800043e8:	fe b0 fc 72 	rcall	80003ccc <fat_cluster_list>
         if( fat_cache_read_sector( true ) )
800043ec:	ce 90       	breq	800043be <fat_read_file+0x3a>
800043ee:	68 09       	ld.w	r9,r4[0x0]
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
800043f0:	e0 68 12 fc 	mov	r8,4860
800043f4:	91 09       	st.w	r8[0x0],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
800043f6:	fe b0 f8 db 	rcall	800035ac <T.79>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
800043fa:	ce 20       	breq	800043be <fat_read_file+0x3a>
800043fc:	6c 18       	ld.w	r8,r6[0x4]
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
800043fe:	8f 45       	st.w	r7[0x10],r5
80004400:	8f 38       	st.w	r7[0xc],r8
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80004402:	da 2a       	popm	r4-r7,pc,r12=1
80004404:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004408:	cc e0       	breq	800043a4 <fat_read_file+0x20>
8000440a:	2f f5       	sub	r5,-1
8000440c:	cc cb       	rjmp	800043a4 <fat_read_file+0x20>
8000440e:	e0 68 15 90 	mov	r8,5520
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
80004412:	11 89       	ld.ub	r9,r8[0x0]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004414:	31 a8       	mov	r8,26
80004416:	f0 09 18 00 	cp.b	r9,r8
8000441a:	5f 0c       	sreq	r12
8000441c:	d8 22       	popm	r4-r7,pc
8000441e:	6e 38       	ld.w	r8,r7[0xc]
80004420:	6c 19       	ld.w	r9,r6[0x4]
80004422:	12 38       	cp.w	r8,r9
80004424:	c0 30       	breq	8000442a <fat_read_file+0xa6>
80004426:	12 98       	mov	r8,r9
80004428:	cd ab       	rjmp	800043dc <fat_read_file+0x58>
8000442a:	6e 49       	ld.w	r9,r7[0x10]
8000442c:	0a 39       	cp.w	r9,r5
8000442e:	cd 71       	brne	800043dc <fat_read_file+0x58>
80004430:	cc bb       	rjmp	800043c6 <fat_read_file+0x42>
80004432:	d7 03       	nop

80004434 <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
80004434:	3f f9       	mov	r9,-1
80004436:	e0 68 15 74 	mov	r8,5492
   fs_g_u32_last_mod_fat = 0;
8000443a:	91 09       	st.w	r8[0x0],r9
8000443c:	30 09       	mov	r9,0
8000443e:	e0 68 13 3c 	mov	r8,4924
}
80004442:	91 09       	st.w	r8[0x0],r9
80004444:	5e fc       	retal	r12
80004446:	d7 03       	nop

80004448 <fat_update_fat2>:
80004448:	eb cd 40 fe 	pushm	r1-r7,lr
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000444c:	e0 65 15 74 	mov	r5,5492
80004450:	e0 62 13 3c 	mov	r2,4924
80004454:	6a 08       	ld.w	r8,r5[0x0]
80004456:	64 09       	ld.w	r9,r2[0x0]
80004458:	12 38       	cp.w	r8,r9
8000445a:	e0 8b 00 26 	brhi	800044a6 <fat_update_fat2+0x5e>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
8000445e:	e0 63 12 fc 	mov	r3,4860
     // Read FAT1
      if( !fat_cache_read_sector( true ))
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004462:	e0 64 15 40 	mov	r4,5440
80004466:	06 91       	mov	r1,r3
80004468:	08 97       	mov	r7,r4
8000446a:	0a 96       	mov	r6,r5
8000446c:	c1 48       	rjmp	80004494 <fat_update_fat2+0x4c>
8000446e:	6e 19       	ld.w	r9,r7[0x4]
80004470:	6e 48       	ld.w	r8,r7[0x10]
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004472:	f2 08 00 08 	add	r8,r9,r8
80004476:	6a 09       	ld.w	r9,r5[0x0]
80004478:	12 08       	add	r8,r9
8000447a:	30 0c       	mov	r12,0
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000447c:	83 08       	st.w	r1[0x0],r8
8000447e:	fe b0 f8 3f 	rcall	800034fc <fat_cache_read_sector>
     fs_g_u32_first_mod_fat++;
80004482:	c1 00       	breq	800044a2 <fat_update_fat2+0x5a>
80004484:	fe b0 f7 42 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004488:	6c 08       	ld.w	r8,r6[0x0]
8000448a:	2f f8       	sub	r8,-1
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
8000448c:	8d 08       	st.w	r6[0x0],r8
8000448e:	64 09       	ld.w	r9,r2[0x0]
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004490:	10 39       	cp.w	r9,r8
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004492:	c0 a3       	brcs	800044a6 <fat_update_fat2+0x5e>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004494:	68 49       	ld.w	r9,r4[0x10]
80004496:	12 08       	add	r8,r9
80004498:	30 1c       	mov	r12,1
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000449a:	87 08       	st.w	r3[0x0],r8
8000449c:	fe b0 f8 30 	rcall	800034fc <fat_cache_read_sector>
800044a0:	ce 71       	brne	8000446e <fat_update_fat2+0x26>
800044a2:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800044a6:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
800044aa:	d7 03       	nop

800044ac <fat_delete_file>:
800044ac:	eb cd 40 fe 	pushm	r1-r7,lr
800044b0:	30 05       	mov	r5,0
800044b2:	18 93       	mov	r3,r12
800044b4:	30 f7       	mov	r7,15
800044b6:	3e 54       	mov	r4,-27
800044b8:	e0 66 15 8c 	mov	r6,5516
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
800044bc:	c0 58       	rjmp	800044c6 <fat_delete_file+0x1a>
800044be:	8c 18       	ld.sh	r8,r6[0x2]
800044c0:	30 15       	mov	r5,1
800044c2:	20 18       	sub	r8,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800044c4:	ac 18       	st.h	r6[0x2],r8
800044c6:	ce 5e       	rcall	80004290 <fat_read_dir>
800044c8:	c2 00       	breq	80004508 <fat_delete_file+0x5c>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
800044ca:	fe b0 f7 0b 	rcall	800032e0 <fat_get_ptr_entry>
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800044ce:	f8 c2 ff f5 	sub	r2,r12,-11
      if( !fat_read_dir() )
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];
800044d2:	19 81       	ld.ub	r1,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800044d4:	05 88       	ld.ub	r8,r2[0x0]
800044d6:	ee 08 18 00 	cp.b	r8,r7
800044da:	c0 30       	breq	800044e0 <fat_delete_file+0x34>
800044dc:	58 05       	cp.w	r5,0
800044de:	c0 b1       	brne	800044f4 <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800044e0:	b8 84       	st.b	r12[0x0],r4
      fat_cache_mark_sector_as_dirty();
800044e2:	fe b0 f7 13 	rcall	80003308 <fat_cache_mark_sector_as_dirty>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
800044e6:	05 88       	ld.ub	r8,r2[0x0]
800044e8:	ee 08 18 00 	cp.b	r8,r7
800044ec:	ce 91       	brne	800044be <fat_delete_file+0x12>
800044ee:	e2 11 00 40 	andl	r1,0x40,COH
800044f2:	ce 60       	breq	800044be <fat_delete_file+0x12>

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
   }  // end of while(1)

   if( b_cluster_list )
800044f4:	58 03       	cp.w	r3,0
800044f6:	c0 31       	brne	800044fc <fat_delete_file+0x50>
800044f8:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
800044fc:	30 09       	mov	r9,0
800044fe:	e0 68 13 00 	mov	r8,4864
80004502:	30 3c       	mov	r12,3
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80004504:	91 39       	st.w	r8[0xc],r9
80004506:	c3 ff       	rcall	80004384 <fat_read_file>
         return false;
   }

   return true;
}
80004508:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

8000450c <fat_garbage_collector_entry>:
8000450c:	eb cd 40 fc 	pushm	r2-r7,lr
80004510:	20 8d       	sub	sp,32
80004512:	30 06       	mov	r6,0
80004514:	e0 65 15 8c 	mov	r5,5516
80004518:	0c 97       	mov	r7,r6
8000451a:	0a 92       	mov	r2,r5
8000451c:	3e 53       	mov	r3,-27
8000451e:	1a 94       	mov	r4,sp
80004520:	c2 08       	rjmp	80004560 <fat_garbage_collector_entry+0x54>
80004522:	fe b0 f6 df 	rcall	800032e0 <fat_get_ptr_entry>
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();

      if ( FS_ENTRY_END == *ptr_entry )
80004526:	19 88       	ld.ub	r8,r12[0x0]
80004528:	58 08       	cp.w	r8,0
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000452a:	c2 80       	breq	8000457a <fat_garbage_collector_entry+0x6e>
8000452c:	e6 08 18 00 	cp.b	r8,r3
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004530:	c1 60       	breq	8000455c <fat_garbage_collector_entry+0x50>
80004532:	18 9b       	mov	r11,r12
80004534:	32 0a       	mov	r10,32
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
80004536:	1a 9c       	mov	r12,sp
80004538:	ec 07 19 00 	cp.h	r7,r6
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
8000453c:	c0 e0       	breq	80004558 <fat_garbage_collector_entry+0x4c>
8000453e:	e0 a0 23 e7 	rcall	80008d0c <memcpy>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80004542:	a4 16       	st.h	r2[0x2],r6
80004544:	ca 6e       	rcall	80004290 <fat_read_dir>
80004546:	c1 70       	breq	80004574 <fat_garbage_collector_entry+0x68>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80004548:	fe b0 f6 cc 	rcall	800032e0 <fat_get_ptr_entry>
8000454c:	32 0a       	mov	r10,32
8000454e:	1a 9b       	mov	r11,sp
80004550:	e0 a0 23 de 	rcall	80008d0c <memcpy>
            fat_cache_mark_sector_as_dirty();
80004554:	fe b0 f6 da 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
         }
         u16_pos_new++;
80004558:	2f f6       	sub	r6,-1
8000455a:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
8000455c:	2f f7       	sub	r7,-1
8000455e:	5c 87       	casts.h	r7

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004560:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004562:	c9 7e       	rcall	80004290 <fat_read_dir>
80004564:	cd f1       	brne	80004522 <fat_garbage_collector_entry+0x16>
80004566:	e0 68 15 90 	mov	r8,5520
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000456a:	11 89       	ld.ub	r9,r8[0x0]
8000456c:	31 a8       	mov	r8,26
8000456e:	f0 09 18 00 	cp.b	r9,r8
80004572:	c0 40       	breq	8000457a <fat_garbage_collector_entry+0x6e>
            fat_cache_mark_sector_as_dirty();
         }
         u16_pos_new++;
      }
      u16_pos_old++;
   }  // end of while(1)
80004574:	2f 8d       	sub	sp,-32
80004576:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      if ( FS_ENTRY_END == *ptr_entry )
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000457a:	aa 16       	st.h	r5[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000457c:	ee 06 19 00 	cp.h	r6,r7
80004580:	c1 01       	brne	800045a0 <fat_garbage_collector_entry+0x94>
80004582:	c1 28       	rjmp	800045a6 <fat_garbage_collector_entry+0x9a>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004584:	fe b0 f6 ae 	rcall	800032e0 <fat_get_ptr_entry>
80004588:	32 0a       	mov	r10,32
8000458a:	30 0b       	mov	r11,0
8000458c:	e0 a0 24 64 	rcall	80008e54 <memset>
            fat_cache_mark_sector_as_dirty();
80004590:	fe b0 f6 bc 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80004594:	8a 18       	ld.sh	r8,r5[0x2]
80004596:	2f f8       	sub	r8,-1
80004598:	aa 18       	st.h	r5[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000459a:	ee 08 19 00 	cp.h	r8,r7
8000459e:	c0 40       	breq	800045a6 <fat_garbage_collector_entry+0x9a>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800045a0:	c7 8e       	rcall	80004290 <fat_read_dir>
800045a2:	cf 11       	brne	80004584 <fat_garbage_collector_entry+0x78>
800045a4:	ce 8b       	rjmp	80004574 <fat_garbage_collector_entry+0x68>
800045a6:	2f 8d       	sub	sp,-32
            fat_cache_mark_sector_as_dirty();
         }
         u16_pos_new++;
      }
      u16_pos_old++;
   }  // end of while(1)
800045a8:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1

800045ac <fat_write_fat32_FSInfo>:
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	20 1d       	sub	sp,4
800045b2:	e0 68 15 40 	mov	r8,5440
800045b6:	70 4a       	ld.w	r10,r8[0x10]
800045b8:	90 c9       	ld.uh	r9,r8[0x8]
800045ba:	e0 68 12 fc 	mov	r8,4860
800045be:	12 1a       	sub	r10,r9
800045c0:	50 0c       	stdsp	sp[0x0],r12
800045c2:	91 0a       	st.w	r8[0x0],r10
800045c4:	30 0c       	mov	r12,0
800045c6:	fe b0 f7 9b 	rcall	800034fc <fat_cache_read_sector>
800045ca:	c2 e0       	breq	80004626 <fat_write_fat32_FSInfo+0x7a>
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;

   if( !fat_cache_read_sector( false ))
      return false;
   fat_cache_mark_sector_as_dirty();
   fat_cache_clear();
800045cc:	fe b0 f6 9e 	rcall	80003308 <fat_cache_mark_sector_as_dirty>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
800045d0:	fe b0 f7 2e 	rcall	8000342c <fat_cache_clear>
800045d4:	30 4a       	mov	r10,4
800045d6:	e0 67 13 40 	mov	r7,4928
800045da:	fe cb b2 ea 	sub	r11,pc,-19734
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
800045de:	0e 9c       	mov	r12,r7
800045e0:	e0 a0 23 96 	rcall	80008d0c <memcpy>
800045e4:	30 4a       	mov	r10,4
800045e6:	fe cb b2 f2 	sub	r11,pc,-19726
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
800045ea:	ee cc fe 1c 	sub	r12,r7,-484
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
800045ee:	e0 a0 23 8f 	rcall	80008d0c <memcpy>
800045f2:	1b 89       	ld.ub	r9,sp[0x0]
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
800045f4:	ef 69 01 eb 	st.b	r7[491],r9
800045f8:	1b b9       	ld.ub	r9,sp[0x3]
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
800045fa:	ef 69 01 e8 	st.b	r7[488],r9
800045fe:	1b a9       	ld.ub	r9,sp[0x2]
80004600:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80004604:	1b 98       	ld.ub	r8,sp[0x1]
80004606:	30 4a       	mov	r10,4
80004608:	ef 68 01 ea 	st.b	r7[490],r8
8000460c:	e0 6b 00 ff 	mov	r11,255
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80004610:	ee cc fe 14 	sub	r12,r7,-492
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80004614:	e0 a0 24 20 	rcall	80008e54 <memset>
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80004618:	35 58       	mov	r8,85
8000461a:	30 1c       	mov	r12,1
   return true;
}
8000461c:	ef 68 01 fe 	st.b	r7[510],r8
80004620:	3a a8       	mov	r8,-86
80004622:	ef 68 01 ff 	st.b	r7[511],r8
80004626:	2f fd       	sub	sp,-4
80004628:	e3 cd 80 80 	ldm	sp++,r7,pc

8000462c <fat_create_short_entry_name>:
8000462c:	d4 31       	pushm	r0-r7,lr
8000462e:	20 9d       	sub	sp,36
80004630:	50 3b       	stdsp	sp[0xc],r11
80004632:	50 19       	stdsp	sp[0x4],r9
80004634:	18 97       	mov	r7,r12
80004636:	58 09       	cp.w	r9,0
80004638:	e0 80 00 fb 	breq	8000482e <fat_create_short_entry_name+0x202>
8000463c:	30 09       	mov	r9,0
8000463e:	50 29       	stdsp	sp[0x8],r9
80004640:	30 98       	mov	r8,9
80004642:	f0 0a 18 00 	cp.b	r10,r8
80004646:	e0 8b 00 e6 	brhi	80004812 <fat_create_short_entry_name+0x1e6>
8000464a:	30 58       	mov	r8,5
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
8000464c:	30 69       	mov	r9,6
8000464e:	50 88       	stdsp	sp[0x20],r8
80004650:	50 49       	stdsp	sp[0x10],r9
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80004652:	e0 68 cc cd 	mov	r8,52429
80004656:	ea 18 cc cc 	orh	r8,0xcccc
8000465a:	f4 08 06 44 	mulu.d	r4,r10,r8
8000465e:	ea 09 16 03 	lsr	r9,r5,0x3
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80004662:	e0 65 85 1f 	mov	r5,34079
80004666:	ea 15 51 eb 	orh	r5,0x51eb
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000466a:	f2 09 00 29 	add	r9,r9,r9<<0x2
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000466e:	f4 05 06 44 	mulu.d	r4,r10,r5
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80004672:	f4 09 01 19 	sub	r9,r10,r9<<0x1
80004676:	2d 09       	sub	r9,-48
80004678:	5c 59       	castu.b	r9
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000467a:	30 02       	mov	r2,0
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000467c:	50 59       	stdsp	sp[0x14],r9
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000467e:	30 16       	mov	r6,1
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80004680:	ea 09 16 05 	lsr	r9,r5,0x5
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80004684:	04 94       	mov	r4,r2
80004686:	f2 cb ff d0 	sub	r11,r9,-48
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
8000468a:	0c 93       	mov	r3,r6
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000468c:	5c 5b       	castu.b	r11
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000468e:	f2 09 10 64 	mul	r9,r9,100
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80004692:	50 7b       	stdsp	sp[0x1c],r11
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80004694:	f4 09 01 09 	sub	r9,r10,r9
         character = sz_name[0];
      }

      if( 1 == u8_step )
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80004698:	32 e0       	mov	r0,46
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000469a:	5c 59       	castu.b	r9
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
8000469c:	30 81       	mov	r1,8
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000469e:	f2 08 06 48 	mulu.d	r8,r9,r8
800046a2:	f2 08 16 03 	lsr	r8,r9,0x3
800046a6:	2d 08       	sub	r8,-48
800046a8:	5c 58       	castu.b	r8
800046aa:	50 68       	stdsp	sp[0x18],r8
      ptr_entry = fat_get_ptr_entry();
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
   else if( nb < 100 )  nb_digit = 2;
800046ac:	0f 85       	ld.ub	r5,r7[0x0]
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800046ae:	e6 06 18 00 	cp.b	r6,r3
800046b2:	c2 b0       	breq	80004708 <fat_create_short_entry_name+0xdc>
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
800046b4:	e2 06 18 00 	cp.b	r6,r1
800046b8:	c3 d0       	breq	80004732 <fat_create_short_entry_name+0x106>
         if( 0 == character )
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
800046ba:	30 78       	mov	r8,7
800046bc:	f0 06 18 00 	cp.b	r6,r8
800046c0:	c6 f0       	breq	8000479e <fat_create_short_entry_name+0x172>
         } else {
            sz_name += (Is_unicode? 2 : 1 );
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
800046c2:	30 68       	mov	r8,6
800046c4:	f0 06 18 00 	cp.b	r6,r8
800046c8:	c7 f0       	breq	800047c6 <fat_create_short_entry_name+0x19a>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
800046ca:	30 98       	mov	r8,9
800046cc:	f0 06 18 00 	cp.b	r6,r8
800046d0:	e0 80 00 87 	breq	800047de <fat_create_short_entry_name+0x1b2>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
800046d4:	30 58       	mov	r8,5
800046d6:	f0 06 18 00 	cp.b	r6,r8
800046da:	e0 81 00 8f 	brne	800047f8 <fat_create_short_entry_name+0x1cc>
800046de:	40 55       	lddsp	r5,sp[0x14]
800046e0:	30 66       	mov	r6,6
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
      }

      if( mode )
800046e2:	40 18       	lddsp	r8,sp[0x4]
800046e4:	58 08       	cp.w	r8,0
800046e6:	c6 c0       	breq	800047be <fat_create_short_entry_name+0x192>
      {
         // Record the short name in buffer
         *short_name = character;
800046e8:	40 39       	lddsp	r9,sp[0xc]
800046ea:	12 c5       	st.b	r9++,r5
800046ec:	50 39       	stdsp	sp[0xc],r9
         ptr_entry++;
      }
      u8_i++;

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
800046ee:	e4 08 15 07 	lsl	r8,r2,0x7
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
         ptr_entry++;
      }
      u8_i++;
800046f2:	2f f4       	sub	r4,-1

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
800046f4:	a1 92       	lsr	r2,0x1
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
         ptr_entry++;
      }
      u8_i++;
800046f6:	5c 54       	castu.b	r4

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
800046f8:	f0 02 00 02 	add	r2,r8,r2
      crc += character;                                  // add next char
800046fc:	0a 02       	add	r2,r5
800046fe:	0f 85       	ld.ub	r5,r7[0x0]
80004700:	5c 52       	castu.b	r2
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
80004702:	e6 06 18 00 	cp.b	r6,r3
80004706:	cd 71       	brne	800046b4 <fat_create_short_entry_name+0x88>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80004708:	40 48       	lddsp	r8,sp[0x10]
8000470a:	10 34       	cp.w	r4,r8
8000470c:	5f 09       	sreq	r9
8000470e:	e0 05 18 00 	cp.b	r5,r0
80004712:	5f 08       	sreq	r8
80004714:	f3 e8 10 08 	or	r8,r9,r8
80004718:	30 09       	mov	r9,0
8000471a:	f2 08 18 00 	cp.b	r8,r9
8000471e:	c0 30       	breq	80004724 <fat_create_short_entry_name+0xf8>
80004720:	30 26       	mov	r6,2
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80004722:	cc 6b       	rjmp	800046ae <fat_create_short_entry_name+0x82>
         character = sz_name[0];
      }

      if( 1 == u8_step )
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80004724:	0a 9c       	mov	r12,r5
80004726:	fe b0 f5 c9 	rcall	800032b8 <fat_check_eof_name>
8000472a:	c0 c0       	breq	80004742 <fat_create_short_entry_name+0x116>
8000472c:	0f 85       	ld.ub	r5,r7[0x0]
8000472e:	30 26       	mov	r6,2
80004730:	cb fb       	rjmp	800046ae <fat_create_short_entry_name+0x82>
            continue;
         }
      }
      if( 8 == u8_step )
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80004732:	30 b9       	mov	r9,11
80004734:	f2 04 18 00 	cp.b	r4,r9
80004738:	c4 10       	breq	800047ba <fat_create_short_entry_name+0x18e>
8000473a:	0a 9c       	mov	r12,r5
8000473c:	fe b0 f5 be 	rcall	800032b8 <fat_check_eof_name>
80004740:	c3 c1       	brne	800047b8 <fat_create_short_entry_name+0x18c>
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80004742:	ea c8 00 21 	sub	r8,r5,33
80004746:	35 d9       	mov	r9,93
80004748:	f2 08 18 00 	cp.b	r8,r9
8000474c:	e0 8b 00 33 	brhi	800047b2 <fat_create_short_entry_name+0x186>
      return 0;
   if( ('a'<=character) && (character<='z') )
80004750:	ea c8 00 61 	sub	r8,r5,97
80004754:	31 99       	mov	r9,25
80004756:	f2 08 18 00 	cp.b	r8,r9
8000475a:	e0 88 00 48 	brls	800047ea <fat_create_short_entry_name+0x1be>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
8000475e:	32 b8       	mov	r8,43
80004760:	f0 05 18 00 	cp.b	r5,r8
80004764:	c2 70       	breq	800047b2 <fat_create_short_entry_name+0x186>
80004766:	32 c8       	mov	r8,44
80004768:	f0 05 18 00 	cp.b	r5,r8
8000476c:	c2 30       	breq	800047b2 <fat_create_short_entry_name+0x186>
8000476e:	e0 05 18 00 	cp.b	r5,r0
80004772:	c2 00       	breq	800047b2 <fat_create_short_entry_name+0x186>
80004774:	33 b8       	mov	r8,59
80004776:	f0 05 18 00 	cp.b	r5,r8
8000477a:	c1 c0       	breq	800047b2 <fat_create_short_entry_name+0x186>
8000477c:	33 d8       	mov	r8,61
8000477e:	f0 05 18 00 	cp.b	r5,r8
80004782:	c1 80       	breq	800047b2 <fat_create_short_entry_name+0x186>
80004784:	35 b8       	mov	r8,91
80004786:	f0 05 18 00 	cp.b	r5,r8
8000478a:	c1 40       	breq	800047b2 <fat_create_short_entry_name+0x186>
8000478c:	35 d8       	mov	r8,93
8000478e:	f0 05 18 00 	cp.b	r5,r8
80004792:	c1 00       	breq	800047b2 <fat_create_short_entry_name+0x186>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
80004794:	2f f7       	sub	r7,-1
         if( 0 == character )
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80004796:	30 78       	mov	r8,7
80004798:	f0 06 18 00 	cp.b	r6,r8
8000479c:	c9 31       	brne	800046c2 <fat_create_short_entry_name+0x96>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000479e:	e0 05 18 00 	cp.b	r5,r0
800047a2:	c0 50       	breq	800047ac <fat_create_short_entry_name+0x180>
800047a4:	0a 9c       	mov	r12,r5
800047a6:	fe b0 f5 89 	rcall	800032b8 <fat_check_eof_name>
800047aa:	c0 40       	breq	800047b2 <fat_create_short_entry_name+0x186>
800047ac:	0f 85       	ld.ub	r5,r7[0x0]
800047ae:	30 86       	mov	r6,8
800047b0:	c7 fb       	rjmp	800046ae <fat_create_short_entry_name+0x82>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
800047b2:	2f f7       	sub	r7,-1
800047b4:	0f 85       	ld.ub	r5,r7[0x0]
800047b6:	c7 cb       	rjmp	800046ae <fat_create_short_entry_name+0x82>
            continue;
         }
      }
      if( 8 == u8_step )
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
800047b8:	0f 85       	ld.ub	r5,r7[0x0]
800047ba:	30 96       	mov	r6,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
800047bc:	c7 9b       	rjmp	800046ae <fat_create_short_entry_name+0x82>
         // Record the short name in buffer
         *short_name = character;
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
800047be:	40 28       	lddsp	r8,sp[0x8]
800047c0:	10 c5       	st.b	r8++,r5
800047c2:	50 28       	stdsp	sp[0x8],r8
800047c4:	c9 5b       	rjmp	800046ee <fat_create_short_entry_name+0xc2>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
800047c6:	e2 04 18 00 	cp.b	r4,r1
800047ca:	c1 e0       	breq	80004806 <fat_create_short_entry_name+0x1da>
800047cc:	32 05       	mov	r5,32
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
800047ce:	30 28       	mov	r8,2
800047d0:	f0 06 18 00 	cp.b	r6,r8
800047d4:	fb f6 00 08 	ld.weq	r6,sp[0x20]
800047d8:	f9 b5 00 7e 	moveq	r5,126
800047dc:	c8 3b       	rjmp	800046e2 <fat_create_short_entry_name+0xb6>
         }
         character = ' ';
      }
      if( 9 == u8_step )
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
800047de:	30 b9       	mov	r9,11
800047e0:	f2 04 18 00 	cp.b	r4,r9
800047e4:	c1 40       	breq	8000480c <fat_create_short_entry_name+0x1e0>
800047e6:	32 05       	mov	r5,32
800047e8:	c7 db       	rjmp	800046e2 <fat_create_short_entry_name+0xb6>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
800047ea:	22 05       	sub	r5,32
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
800047ec:	2f f7       	sub	r7,-1

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
800047ee:	5c 55       	castu.b	r5
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
         sz_name += (Is_unicode? 2 : 1 );
         if( 0 == character )
800047f0:	fe 91 ff 65 	brne	800046ba <fat_create_short_entry_name+0x8e>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800047f4:	0f 85       	ld.ub	r5,r7[0x0]
800047f6:	c5 cb       	rjmp	800046ae <fat_create_short_entry_name+0x82>
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
800047f8:	30 48       	mov	r8,4
800047fa:	f0 06 18 00 	cp.b	r6,r8
800047fe:	c2 01       	brne	8000483e <fat_create_short_entry_name+0x212>
80004800:	40 65       	lddsp	r5,sp[0x18]
80004802:	30 56       	mov	r6,5
80004804:	c6 fb       	rjmp	800046e2 <fat_create_short_entry_name+0xb6>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80004806:	0f 85       	ld.ub	r5,r7[0x0]
80004808:	30 76       	mov	r6,7
8000480a:	c5 2b       	rjmp	800046ae <fat_create_short_entry_name+0x82>
      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
      crc += character;                                  // add next char
   } // End of loop while
   return crc;
}
8000480c:	04 9c       	mov	r12,r2
8000480e:	2f 7d       	sub	sp,-36
80004810:	d8 32       	popm	r0-r7,pc
      ptr_entry = fat_get_ptr_entry();
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
   else if( nb < 100 )  nb_digit = 2;
80004812:	36 38       	mov	r8,99
80004814:	f4 08 18 00 	cp.b	r8,r10
80004818:	f9 b9 02 05 	movhs	r9,5
8000481c:	f9 b9 03 04 	movlo	r9,4
80004820:	f9 b8 02 04 	movhs	r8,4
80004824:	f9 b8 03 03 	movlo	r8,3
80004828:	50 49       	stdsp	sp[0x10],r9
8000482a:	50 88       	stdsp	sp[0x20],r8
8000482c:	c1 3b       	rjmp	80004652 <fat_create_short_entry_name+0x26>
   uint8_t nb_digit;

   if( !mode )
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
8000482e:	50 0a       	stdsp	sp[0x0],r10
80004830:	fe b0 f5 6c 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80004834:	fe b0 f5 56 	rcall	800032e0 <fat_get_ptr_entry>
80004838:	40 0a       	lddsp	r10,sp[0x0]
8000483a:	50 2c       	stdsp	sp[0x8],r12
8000483c:	c0 2b       	rjmp	80004640 <fat_create_short_entry_name+0x14>
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
8000483e:	30 38       	mov	r8,3
80004840:	f0 06 18 00 	cp.b	r6,r8
80004844:	cc 51       	brne	800047ce <fat_create_short_entry_name+0x1a2>
80004846:	40 75       	lddsp	r5,sp[0x1c]
80004848:	30 46       	mov	r6,4
8000484a:	c4 cb       	rjmp	800046e2 <fat_create_short_entry_name+0xb6>

8000484c <fat_mount>:
8000484c:	d4 31       	pushm	r0-r7,lr
8000484e:	20 5d       	sub	sp,20
80004850:	e0 6e 15 40 	mov	lr,5440
80004854:	30 06       	mov	r6,0
80004856:	9d 86       	st.w	lr[0x20],r6
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
   // No selected file
   fat_clear_entry_info_and_ptr();
80004858:	fe b0 f2 e8 	rcall	80002e28 <fat_clear_entry_info_and_ptr>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000485c:	e0 6b 15 8c 	mov	r11,5516
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80004860:	e0 62 12 fc 	mov	r2,4860
   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
   // No selected file
   fat_clear_entry_info_and_ptr();

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80004864:	b6 86       	st.b	r11[0x0],r6
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80004866:	85 06       	st.w	r2[0x0],r6

   // Check if the drive is availabled
   if( !fat_check_device() )
80004868:	fe b0 f5 ec 	rcall	80003440 <fat_check_device>
8000486c:	e0 80 01 9d 	breq	80004ba6 <fat_mount+0x35a>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80004870:	e0 67 13 40 	mov	r7,4928
80004874:	35 51       	mov	r1,85
80004876:	0e 98       	mov	r8,r7
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004878:	38 05       	mov	r5,-128
8000487a:	30 43       	mov	r3,4
8000487c:	30 14       	mov	r4,1
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
8000487e:	50 18       	stdsp	sp[0x4],r8
80004880:	30 1c       	mov	r12,1
80004882:	fe b0 f6 3d 	rcall	800034fc <fat_cache_read_sector>
80004886:	40 18       	lddsp	r8,sp[0x4]
80004888:	e0 80 01 8f 	breq	80004ba6 <fat_mount+0x35a>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
8000488c:	e0 6c 13 40 	mov	r12,4928
80004890:	ef 39 01 fe 	ld.ub	r9,r7[510]
80004894:	e2 09 18 00 	cp.b	r9,r1
80004898:	c0 80       	breq	800048a8 <fat_mount+0x5c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
8000489a:	f1 39 01 ff 	ld.ub	r9,r8[511]
8000489e:	3a aa       	mov	r10,-86
800048a0:	f4 09 18 00 	cp.b	r9,r10
800048a4:	e0 81 01 c7 	brne	80004c32 <fat_mount+0x3e6>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
800048a8:	64 0b       	ld.w	r11,r2[0x0]
800048aa:	58 0b       	cp.w	r11,0
800048ac:	e0 81 00 b9 	brne	80004a1e <fat_mount+0x1d2>
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800048b0:	ef 3a 01 be 	ld.ub	r10,r7[446]
800048b4:	ea 0a 18 00 	cp.b	r10,r5
800048b8:	5f 0e       	sreq	lr
800048ba:	f6 0a 18 00 	cp.b	r10,r11
800048be:	5f 0a       	sreq	r10
800048c0:	1c 4a       	or	r10,lr
800048c2:	f6 0a 18 00 	cp.b	r10,r11
800048c6:	c2 20       	breq	8000490a <fat_mount+0xbe>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
800048c8:	ef 3a 01 c2 	ld.ub	r10,r7[450]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800048cc:	e6 0a 18 00 	cp.b	r10,r3
800048d0:	5f 00       	sreq	r0
800048d2:	e8 0a 18 00 	cp.b	r10,r4
800048d6:	5f 0e       	sreq	lr
800048d8:	1c 40       	or	r0,lr
800048da:	f6 00 18 00 	cp.b	r0,r11
800048de:	e0 81 01 90 	brne	80004bfe <fat_mount+0x3b2>
800048e2:	30 69       	mov	r9,6
800048e4:	f2 0a 18 00 	cp.b	r10,r9
800048e8:	e0 80 01 8b 	breq	80004bfe <fat_mount+0x3b2>
800048ec:	30 e9       	mov	r9,14
800048ee:	f2 0a 18 00 	cp.b	r10,r9
800048f2:	e0 80 01 86 	breq	80004bfe <fat_mount+0x3b2>
800048f6:	30 b9       	mov	r9,11
800048f8:	f2 0a 18 00 	cp.b	r10,r9
800048fc:	e0 80 01 81 	breq	80004bfe <fat_mount+0x3b2>
80004900:	30 c9       	mov	r9,12
80004902:	f2 0a 18 00 	cp.b	r10,r9
80004906:	e0 80 01 7c 	breq	80004bfe <fat_mount+0x3b2>
8000490a:	ef 39 01 ce 	ld.ub	r9,r7[462]
8000490e:	ea 09 18 00 	cp.b	r9,r5
80004912:	5f 0a       	sreq	r10
80004914:	ec 09 18 00 	cp.b	r9,r6
80004918:	5f 09       	sreq	r9
8000491a:	14 49       	or	r9,r10
8000491c:	ec 09 18 00 	cp.b	r9,r6
80004920:	c2 30       	breq	80004966 <fat_mount+0x11a>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80004922:	ef 39 01 d2 	ld.ub	r9,r7[466]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004926:	e6 09 18 00 	cp.b	r9,r3
8000492a:	5f 0e       	sreq	lr
8000492c:	e8 09 18 00 	cp.b	r9,r4
80004930:	5f 0a       	sreq	r10
80004932:	fd ea 10 0a 	or	r10,lr,r10
80004936:	ec 0a 18 00 	cp.b	r10,r6
8000493a:	e0 81 01 38 	brne	80004baa <fat_mount+0x35e>
8000493e:	30 6a       	mov	r10,6
80004940:	f4 09 18 00 	cp.b	r9,r10
80004944:	e0 80 01 33 	breq	80004baa <fat_mount+0x35e>
80004948:	30 ea       	mov	r10,14
8000494a:	f4 09 18 00 	cp.b	r9,r10
8000494e:	e0 80 01 2e 	breq	80004baa <fat_mount+0x35e>
80004952:	30 ba       	mov	r10,11
80004954:	f4 09 18 00 	cp.b	r9,r10
80004958:	e0 80 01 29 	breq	80004baa <fat_mount+0x35e>
8000495c:	30 ca       	mov	r10,12
8000495e:	f4 09 18 00 	cp.b	r9,r10
80004962:	e0 80 01 24 	breq	80004baa <fat_mount+0x35e>
80004966:	ef 39 01 de 	ld.ub	r9,r7[478]
8000496a:	ea 09 18 00 	cp.b	r9,r5
8000496e:	5f 0a       	sreq	r10
80004970:	ec 09 18 00 	cp.b	r9,r6
80004974:	5f 09       	sreq	r9
80004976:	14 49       	or	r9,r10
80004978:	ec 09 18 00 	cp.b	r9,r6
8000497c:	c2 30       	breq	800049c2 <fat_mount+0x176>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
8000497e:	ef 39 01 e2 	ld.ub	r9,r7[482]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004982:	e6 09 18 00 	cp.b	r9,r3
80004986:	5f 0e       	sreq	lr
80004988:	e8 09 18 00 	cp.b	r9,r4
8000498c:	5f 0a       	sreq	r10
8000498e:	fd ea 10 0a 	or	r10,lr,r10
80004992:	ec 0a 18 00 	cp.b	r10,r6
80004996:	e0 81 01 2b 	brne	80004bec <fat_mount+0x3a0>
8000499a:	30 6a       	mov	r10,6
8000499c:	f4 09 18 00 	cp.b	r9,r10
800049a0:	e0 80 01 26 	breq	80004bec <fat_mount+0x3a0>
800049a4:	30 ea       	mov	r10,14
800049a6:	f4 09 18 00 	cp.b	r9,r10
800049aa:	e0 80 01 21 	breq	80004bec <fat_mount+0x3a0>
800049ae:	30 ba       	mov	r10,11
800049b0:	f4 09 18 00 	cp.b	r9,r10
800049b4:	e0 80 01 1c 	breq	80004bec <fat_mount+0x3a0>
800049b8:	30 ca       	mov	r10,12
800049ba:	f4 09 18 00 	cp.b	r9,r10
800049be:	e0 80 01 17 	breq	80004bec <fat_mount+0x3a0>
800049c2:	ef 39 01 ee 	ld.ub	r9,r7[494]
800049c6:	ea 09 18 00 	cp.b	r9,r5
800049ca:	5f 0a       	sreq	r10
800049cc:	ec 09 18 00 	cp.b	r9,r6
800049d0:	5f 09       	sreq	r9
800049d2:	14 49       	or	r9,r10
800049d4:	ec 09 18 00 	cp.b	r9,r6
800049d8:	c2 30       	breq	80004a1e <fat_mount+0x1d2>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
800049da:	ef 39 01 f2 	ld.ub	r9,r7[498]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800049de:	e6 09 18 00 	cp.b	r9,r3
800049e2:	5f 0e       	sreq	lr
800049e4:	e8 09 18 00 	cp.b	r9,r4
800049e8:	5f 0a       	sreq	r10
800049ea:	fd ea 10 0a 	or	r10,lr,r10
800049ee:	ec 0a 18 00 	cp.b	r10,r6
800049f2:	e0 81 01 0f 	brne	80004c10 <fat_mount+0x3c4>
800049f6:	30 6a       	mov	r10,6
800049f8:	f4 09 18 00 	cp.b	r9,r10
800049fc:	e0 80 01 0a 	breq	80004c10 <fat_mount+0x3c4>
80004a00:	30 ea       	mov	r10,14
80004a02:	f4 09 18 00 	cp.b	r9,r10
80004a06:	e0 80 01 05 	breq	80004c10 <fat_mount+0x3c4>
80004a0a:	30 ba       	mov	r10,11
80004a0c:	f4 09 18 00 	cp.b	r9,r10
80004a10:	e0 80 01 00 	breq	80004c10 <fat_mount+0x3c4>
80004a14:	30 ca       	mov	r10,12
80004a16:	f4 09 18 00 	cp.b	r9,r10
80004a1a:	e0 80 00 fb 	breq	80004c10 <fat_mount+0x3c4>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80004a1e:	e0 6a 13 40 	mov	r10,4928
80004a22:	19 89       	ld.ub	r9,r12[0x0]
80004a24:	3e b8       	mov	r8,-21
80004a26:	f0 09 18 00 	cp.b	r9,r8
80004a2a:	c0 80       	breq	80004a3a <fat_mount+0x1ee>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80004a2c:	30 39       	mov	r9,3
80004a2e:	e0 68 15 90 	mov	r8,5520
80004a32:	30 0c       	mov	r12,0
80004a34:	b0 89       	st.b	r8[0x0],r9
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
   }
   }

   return true;
}
80004a36:	2f bd       	sub	sp,-20
80004a38:	d8 32       	popm	r0-r7,pc
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80004a3a:	15 a9       	ld.ub	r9,r10[0x2]
80004a3c:	39 08       	mov	r8,-112
80004a3e:	f0 09 18 00 	cp.b	r9,r8
80004a42:	cf 51       	brne	80004a2c <fat_mount+0x1e0>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80004a44:	f5 38 00 15 	ld.ub	r8,r10[21]
80004a48:	e2 18 00 f0 	andl	r8,0xf0,COH
80004a4c:	e0 48 00 f0 	cp.w	r8,240
80004a50:	ce e1       	brne	80004a2c <fat_mount+0x1e0>
   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80004a52:	30 08       	mov	r8,0
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80004a54:	30 49       	mov	r9,4
   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80004a56:	50 38       	stdsp	sp[0xc],r8
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80004a58:	e0 68 15 90 	mov	r8,5520

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80004a5c:	f5 3e 00 0c 	ld.ub	lr,r10[12]
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80004a60:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80004a62:	a1 9e       	lsr	lr,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80004a64:	f5 38 00 0d 	ld.ub	r8,r10[13]
80004a68:	e0 69 15 40 	mov	r9,5440
80004a6c:	bd 38       	mul	r8,lr
80004a6e:	5c 58       	castu.b	r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80004a70:	b2 98       	st.b	r9[0x1],r8
80004a72:	fa c6 ff f1 	sub	r6,sp,-15
80004a76:	f5 39 00 16 	ld.ub	r9,r10[22]
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80004a7a:	ac 89       	st.b	r6[0x0],r9
80004a7c:	fa c7 ff f2 	sub	r7,sp,-14
80004a80:	f5 39 00 17 	ld.ub	r9,r10[23]
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80004a84:	ae 89       	st.b	r7[0x0],r9
80004a86:	fa c5 ff f4 	sub	r5,sp,-12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
80004a8a:	40 39       	lddsp	r9,sp[0xc]
80004a8c:	58 09       	cp.w	r9,0
80004a8e:	e0 80 00 d8 	breq	80004c3e <fat_mount+0x3f2>
80004a92:	fa c4 ff f3 	sub	r4,sp,-13
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80004a96:	bd 39       	mul	r9,lr
80004a98:	e0 60 15 40 	mov	r0,5440

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80004a9c:	81 19       	st.w	r0[0x4],r9
80004a9e:	e0 63 13 40 	mov	r3,4928
80004aa2:	f9 3a 00 13 	ld.ub	r10,r12[19]
80004aa6:	58 0a       	cp.w	r10,0
80004aa8:	e0 81 00 bd 	brne	80004c22 <fat_mount+0x3d6>
80004aac:	e7 32 00 14 	ld.ub	r2,r3[20]
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80004ab0:	58 02       	cp.w	r2,0
80004ab2:	e0 81 00 ba 	brne	80004c26 <fat_mount+0x3da>
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80004ab6:	e7 3a 00 20 	ld.ub	r10,r3[32]
80004aba:	ac 8a       	st.b	r6[0x0],r10
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80004abc:	e7 3a 00 21 	ld.ub	r10,r3[33]
80004ac0:	ae 8a       	st.b	r7[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80004ac2:	e7 3a 00 22 	ld.ub	r10,r3[34]
80004ac6:	a8 8a       	st.b	r4[0x0],r10
      LSB3( u32_tmp ) = 0;
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80004ac8:	e7 3a 00 23 	ld.ub	r10,r3[35]
80004acc:	aa 8a       	st.b	r5[0x0],r10
80004ace:	a1 79       	lsl	r9,0x1
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
      LSB2( u32_tmp ) = 0;
      LSB3( u32_tmp ) = 0;
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80004ad0:	e0 6a 15 40 	mov	r10,5440

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80004ad4:	f5 59 00 18 	st.h	r10[24],r9
80004ad8:	40 35       	lddsp	r5,sp[0xc]
80004ada:	f9 3a 00 11 	ld.ub	r10,r12[17]
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80004ade:	fa c7 ff ec 	sub	r7,sp,-20

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80004ae2:	0e fa       	st.b	--r7,r10
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80004ae4:	f9 36 00 12 	ld.ub	r6,r12[18]
   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80004ae8:	fa ca ff ee 	sub	r10,sp,-18
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80004aec:	fc 04 15 04 	lsl	r4,lr,0x4
80004af0:	b4 86       	st.b	r10[0x0],r6
80004af2:	fb 16 00 12 	ld.uh	r6,sp[18]
80004af6:	e8 06 00 06 	add	r6,r4,r6
80004afa:	a5 76       	lsl	r6,0x5
80004afc:	20 16       	sub	r6,1
80004afe:	e0 64 15 40 	mov	r4,5440
80004b02:	fc 03 15 09 	lsl	r3,lr,0x9
80004b06:	ec 03 0c 02 	divs	r2,r6,r3

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80004b0a:	fc 02 02 46 	mul	r6,lr,r2

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80004b0e:	e9 56 00 1a 	st.h	r4[26],r6
80004b12:	f9 34 00 0e 	ld.ub	r4,r12[14]
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80004b16:	ae 84       	st.b	r7[0x0],r4
80004b18:	e0 60 15 40 	mov	r0,5440
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80004b1c:	5c 76       	castu.h	r6
80004b1e:	0c 09       	add	r9,r6
80004b20:	81 59       	st.w	r0[0x14],r9
80004b22:	f9 37 00 0f 	ld.ub	r7,r12[15]
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80004b26:	b4 87       	st.b	r10[0x0],r7

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80004b28:	fb 0a 00 12 	ld.sh	r10,sp[18]
80004b2c:	f9 36 00 30 	ld.ub	r6,r12[48]
80004b30:	fc 0a 02 47 	mul	r7,lr,r10
80004b34:	5c 7a       	castu.h	r10
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80004b36:	5c 77       	castu.h	r7
80004b38:	0c 1a       	sub	r10,r6

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80004b3a:	0e 0b       	add	r11,r7

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80004b3c:	bd 3a       	mul	r10,lr

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80004b3e:	81 4b       	st.w	r0[0x10],r11
80004b40:	a0 4a       	st.h	r0[0x8],r10
80004b42:	58 08       	cp.w	r8,0
80004b44:	c3 10       	breq	80004ba6 <fat_mount+0x35a>

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80004b46:	ab 3e       	mul	lr,r5
80004b48:	30 1a       	mov	r10,1
80004b4a:	fc 07 01 07 	sub	r7,lr,r7
80004b4e:	ee 09 01 09 	sub	r9,r7,r9
80004b52:	f4 08 18 00 	cp.b	r8,r10
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80004b56:	c0 60       	breq	80004b62 <fat_mount+0x316>
80004b58:	a1 99       	lsr	r9,0x1
80004b5a:	a1 98       	lsr	r8,0x1
80004b5c:	f4 08 18 00 	cp.b	r8,r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80004b60:	cf c1       	brne	80004b58 <fat_mount+0x30c>
80004b62:	f2 c8 ff fe 	sub	r8,r9,-2
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80004b66:	e0 6e 15 40 	mov	lr,5440
80004b6a:	9d 38       	st.w	lr[0xc],r8
80004b6c:	e0 49 0f f4 	cp.w	r9,4084
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80004b70:	e0 88 00 77 	brls	80004c5e <fat_mount+0x412>
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80004b74:	e0 49 ff f4 	cp.w	r9,65524
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80004b78:	e0 88 00 79 	brls	80004c6a <fat_mount+0x41e>
80004b7c:	f9 39 00 2f 	ld.ub	r9,r12[47]
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80004b80:	e0 68 15 40 	mov	r8,5440
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80004b84:	2e 88       	sub	r8,-24
80004b86:	b0 89       	st.b	r8[0x0],r9
80004b88:	30 39       	mov	r9,3
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80004b8a:	e0 67 15 8c 	mov	r7,5516
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80004b8e:	ae 89       	st.b	r7[0x0],r9
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80004b90:	f9 39 00 2c 	ld.ub	r9,r12[44]
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80004b94:	b0 b9       	st.b	r8[0x3],r9
80004b96:	f9 39 00 2d 	ld.ub	r9,r12[45]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004b9a:	b0 a9       	st.b	r8[0x2],r9
80004b9c:	f9 39 00 2e 	ld.ub	r9,r12[46]
80004ba0:	30 1c       	mov	r12,1
80004ba2:	b0 99       	st.b	r8[0x1],r9
80004ba4:	c4 9b       	rjmp	80004a36 <fat_mount+0x1ea>
80004ba6:	2f bd       	sub	sp,-20
            }
         }
         if( u8_tmp != 4 )
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80004ba8:	d8 3a       	popm	r0-r7,pc,r12=0
80004baa:	e0 69 01 d9 	mov	r9,473
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80004bae:	e0 6a 01 d8 	mov	r10,472
80004bb2:	e0 6b 01 d7 	mov	r11,471
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80004bb6:	e0 6c 01 d6 	mov	r12,470
80004bba:	ee 0c 07 0c 	ld.ub	r12,r7[r12]
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80004bbe:	a4 bc       	st.b	r2[0x3],r12
80004bc0:	ee 0b 07 0b 	ld.ub	r11,r7[r11]
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80004bc4:	a4 ab       	st.b	r2[0x2],r11
80004bc6:	e0 6b 15 40 	mov	r11,5440
80004bca:	ee 0a 07 0a 	ld.ub	r10,r7[r10]
80004bce:	a4 9a       	st.b	r2[0x1],r10
80004bd0:	ee 09 07 09 	ld.ub	r9,r7[r9]
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80004bd4:	a4 89       	st.b	r2[0x0],r9
80004bd6:	17 8c       	ld.ub	r12,r11[0x0]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004bd8:	50 18       	stdsp	sp[0x4],r8
80004bda:	e0 a0 12 f7 	rcall	800071c8 <mem_sector_size>
80004bde:	64 09       	ld.w	r9,r2[0x0]
80004be0:	40 18       	lddsp	r8,sp[0x4]
80004be2:	f8 09 02 49 	mul	r9,r12,r9
80004be6:	85 09       	st.w	r2[0x0],r9
80004be8:	fe 9f fe 4b 	bral	8000487e <fat_mount+0x32>
80004bec:	e0 69 01 e9 	mov	r9,489
80004bf0:	e0 6a 01 e8 	mov	r10,488
80004bf4:	e0 6b 01 e7 	mov	r11,487
80004bf8:	e0 6c 01 e6 	mov	r12,486
80004bfc:	cd fb       	rjmp	80004bba <fat_mount+0x36e>
80004bfe:	e0 69 01 c9 	mov	r9,457
80004c02:	e0 6a 01 c8 	mov	r10,456
80004c06:	e0 6b 01 c7 	mov	r11,455
80004c0a:	e0 6c 01 c6 	mov	r12,454
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80004c0e:	cd 6b       	rjmp	80004bba <fat_mount+0x36e>
80004c10:	e0 69 01 f9 	mov	r9,505
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80004c14:	e0 6a 01 f8 	mov	r10,504
      LSB2( u32_tmp ) = 0;
80004c18:	e0 6b 01 f7 	mov	r11,503
      LSB3( u32_tmp ) = 0;
80004c1c:	e0 6c 01 f6 	mov	r12,502

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80004c20:	cc db       	rjmp	80004bba <fat_mount+0x36e>
80004c22:	e7 32 00 14 	ld.ub	r2,r3[20]
         return false;
80004c26:	ac 8a       	st.b	r6[0x0],r10
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80004c28:	ae 82       	st.b	r7[0x0],r2
80004c2a:	30 0a       	mov	r10,0
80004c2c:	a8 8a       	st.b	r4[0x0],r10
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80004c2e:	aa 8a       	st.b	r5[0x0],r10
80004c30:	c4 fb       	rjmp	80004ace <fat_mount+0x282>
80004c32:	30 29       	mov	r9,2
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80004c34:	e0 68 15 90 	mov	r8,5520
80004c38:	30 0c       	mov	r12,0
80004c3a:	b0 89       	st.b	r8[0x0],r9
80004c3c:	cf da       	rjmp	80004a36 <fat_mount+0x1ea>
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80004c3e:	f5 39 00 24 	ld.ub	r9,r10[36]
80004c42:	ac 89       	st.b	r6[0x0],r9
80004c44:	f5 39 00 25 	ld.ub	r9,r10[37]
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80004c48:	ae 89       	st.b	r7[0x0],r9
80004c4a:	f5 39 00 26 	ld.ub	r9,r10[38]
80004c4e:	fa c4 ff f3 	sub	r4,sp,-13
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80004c52:	a8 89       	st.b	r4[0x0],r9
80004c54:	f5 39 00 27 	ld.ub	r9,r10[39]
80004c58:	aa 89       	st.b	r5[0x0],r9
80004c5a:	40 39       	lddsp	r9,sp[0xc]
80004c5c:	c1 db       	rjmp	80004a96 <fat_mount+0x24a>
80004c5e:	30 18       	mov	r8,1
80004c60:	e0 6b 15 8c 	mov	r11,5516
80004c64:	30 1c       	mov	r12,1
80004c66:	b6 88       	st.b	r11[0x0],r8
80004c68:	ce 7a       	rjmp	80004a36 <fat_mount+0x1ea>
80004c6a:	30 28       	mov	r8,2
80004c6c:	e0 6a 15 8c 	mov	r10,5516
80004c70:	30 1c       	mov	r12,1
80004c72:	b4 88       	st.b	r10[0x0],r8
80004c74:	ce 1a       	rjmp	80004a36 <fat_mount+0x1ea>
80004c76:	d7 03       	nop

80004c78 <fat_find_short_entry_name>:
80004c78:	d4 31       	pushm	r0-r7,lr
80004c7a:	20 3d       	sub	sp,12
80004c7c:	30 07       	mov	r7,0
80004c7e:	18 92       	mov	r2,r12
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80004c80:	1a 96       	mov	r6,sp
80004c82:	e0 65 15 8c 	mov	r5,5516
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80004c86:	e0 63 15 90 	mov	r3,5520
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004c8a:	0e 94       	mov	r4,r7
80004c8c:	3e 51       	mov	r1,-27
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80004c8e:	30 b0       	mov	r0,11
80004c90:	c1 48       	rjmp	80004cb8 <fat_find_short_entry_name+0x40>
80004c92:	e2 08 18 00 	cp.b	r8,r1
80004c96:	c2 70       	breq	80004ce4 <fat_find_short_entry_name+0x6c>
80004c98:	f9 38 00 0b 	ld.ub	r8,r12[11]
80004c9c:	30 f9       	mov	r9,15
80004c9e:	f2 08 18 00 	cp.b	r8,r9
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80004ca2:	c2 10       	breq	80004ce4 <fat_find_short_entry_name+0x6c>
80004ca4:	a6 80       	st.b	r3[0x0],r0
80004ca6:	30 ba       	mov	r10,11
80004ca8:	1a 9b       	mov	r11,sp
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80004caa:	e0 a0 20 1e 	rcall	80008ce6 <memcmp>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80004cae:	c1 c1       	brne	80004ce6 <fat_find_short_entry_name+0x6e>
80004cb0:	3f f8       	mov	r8,-1
80004cb2:	f0 07 18 00 	cp.b	r7,r8
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80004cb6:	c2 30       	breq	80004cfc <fat_find_short_entry_name+0x84>
   while(1)
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80004cb8:	2f f7       	sub	r7,-1
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80004cba:	30 19       	mov	r9,1
80004cbc:	5c 57       	castu.b	r7
80004cbe:	1a 9b       	mov	r11,sp
80004cc0:	0e 9a       	mov	r10,r7
80004cc2:	04 9c       	mov	r12,r2
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80004cc4:	fe b0 fc b4 	rcall	8000462c <fat_create_short_entry_name>
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80004cc8:	aa 14       	st.h	r5[0x2],r4
80004cca:	fe b0 fa e3 	rcall	80004290 <fat_read_dir>
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80004cce:	c1 20       	breq	80004cf2 <fat_find_short_entry_name+0x7a>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80004cd0:	fe b0 f3 08 	rcall	800032e0 <fat_get_ptr_entry>
80004cd4:	19 88       	ld.ub	r8,r12[0x0]
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80004cd6:	58 08       	cp.w	r8,0
80004cd8:	cd d1       	brne	80004c92 <fat_find_short_entry_name+0x1a>
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
   }
}
80004cda:	30 a8       	mov	r8,10
80004cdc:	a6 88       	st.b	r3[0x0],r8
80004cde:	0e 9c       	mov	r12,r7
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004ce0:	2f dd       	sub	sp,-12
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80004ce2:	d8 32       	popm	r0-r7,pc
80004ce4:	a6 80       	st.b	r3[0x0],r0
80004ce6:	8a 18       	ld.sh	r8,r5[0x2]
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80004ce8:	2f f8       	sub	r8,-1
80004cea:	aa 18       	st.h	r5[0x2],r8
80004cec:	fe b0 fa d2 	rcall	80004290 <fat_read_dir>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80004cf0:	cf 01       	brne	80004cd0 <fat_find_short_entry_name+0x58>
80004cf2:	07 89       	ld.ub	r9,r3[0x0]
80004cf4:	31 a8       	mov	r8,26
80004cf6:	f0 09 18 00 	cp.b	r9,r8
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
80004cfa:	cf 20       	breq	80004cde <fat_find_short_entry_name+0x66>
80004cfc:	30 07       	mov	r7,0
80004cfe:	cf 0b       	rjmp	80004cde <fat_find_short_entry_name+0x66>

80004d00 <fat_initialize_dir>:
80004d00:	eb cd 40 f8 	pushm	r3-r7,lr
80004d04:	30 07       	mov	r7,0
80004d06:	e0 66 15 e8 	mov	r6,5608
80004d0a:	0e 9b       	mov	r11,r7
80004d0c:	8d 17       	st.w	r6[0x4],r7
80004d0e:	30 2c       	mov	r12,2
80004d10:	fe b0 f7 de 	rcall	80003ccc <fat_cluster_list>
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80004d14:	c2 10       	breq	80004d56 <fat_initialize_dir+0x56>
80004d16:	6c 09       	ld.w	r9,r6[0x0]
80004d18:	e0 65 15 40 	mov	r5,5440
80004d1c:	20 19       	sub	r9,1
80004d1e:	e0 66 12 fc 	mov	r6,4860
   for(  u8_loop = 0
80004d22:	0b 98       	ld.ub	r8,r5[0x1]
80004d24:	10 09       	add	r9,r8
80004d26:	8d 09       	st.w	r6[0x0],r9

      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
80004d28:	58 08       	cp.w	r8,0
80004d2a:	c0 d1       	brne	80004d44 <fat_initialize_dir+0x44>
      fs_gu32_addrsector--;         // go to previous sector
80004d2c:	c1 78       	rjmp	80004d5a <fat_initialize_dir+0x5a>
80004d2e:	fe b0 f2 ed 	rcall	80003308 <fat_cache_mark_sector_as_dirty>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80004d32:	6c 08       	ld.w	r8,r6[0x0]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80004d34:	20 18       	sub	r8,1
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80004d36:	8d 08       	st.w	r6[0x0],r8
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80004d38:	2f f7       	sub	r7,-1
80004d3a:	0b 98       	ld.ub	r8,r5[0x1]
80004d3c:	5c 57       	castu.b	r7
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
80004d3e:	ee 08 18 00 	cp.b	r8,r7
80004d42:	c0 c0       	breq	80004d5a <fat_initialize_dir+0x5a>
80004d44:	30 0c       	mov	r12,0
         return false;

      if(0 == u8_loop)
80004d46:	fe b0 f3 db 	rcall	800034fc <fat_cache_read_sector>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
80004d4a:	c0 60       	breq	80004d56 <fat_initialize_dir+0x56>
80004d4c:	58 07       	cp.w	r7,0
80004d4e:	cf 01       	brne	80004d2e <fat_initialize_dir+0x2e>
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );

   return true;
80004d50:	fe b0 f3 6e 	rcall	8000342c <fat_cache_clear>
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
      return false;
   fat_cache_mark_sector_as_dirty();
80004d54:	ce db       	rjmp	80004d2e <fat_initialize_dir+0x2e>
80004d56:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
80004d5a:	fe b0 f2 d7 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
80004d5e:	e0 69 13 40 	mov	r9,4928
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004d62:	32 e8       	mov	r8,46
80004d64:	12 97       	mov	r7,r9
80004d66:	0e c8       	st.b	r7++,r8
80004d68:	12 96       	mov	r6,r9
80004d6a:	5c 37       	neg	r7
80004d6c:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
80004d70:	e0 80 00 94 	breq	80004e98 <fat_initialize_dir+0x198>
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80004d74:	30 18       	mov	r8,1
80004d76:	32 0c       	mov	r12,32
80004d78:	f2 08 0b 0c 	st.b	r9[r8],r12
80004d7c:	2f f8       	sub	r8,-1
80004d7e:	5c 58       	castu.b	r8
80004d80:	f0 0a 11 0b 	rsub	r10,r8,11
80004d84:	f0 cb 00 01 	sub	r11,r8,1
80004d88:	5c 5a       	castu.b	r10
80004d8a:	ee 0b 18 00 	cp.b	r11,r7
80004d8e:	cf 53       	brcs	80004d78 <fat_initialize_dir+0x78>
80004d90:	ee 03 11 0a 	rsub	r3,r7,10
80004d94:	5c 53       	castu.b	r3
80004d96:	e6 0e 16 02 	lsr	lr,r3,0x2
80004d9a:	fc 04 15 02 	lsl	r4,lr,0x2
80004d9e:	c1 20       	breq	80004dc2 <fat_initialize_dir+0xc2>
80004da0:	2f f7       	sub	r7,-1
      fs_g_sector[u8_i]=' ';
80004da2:	30 0b       	mov	r11,0
80004da4:	f2 07 00 07 	add	r7,r9,r7
80004da8:	4b fc       	lddpc	r12,80004ea4 <fat_initialize_dir+0x1a4>
80004daa:	0e ac       	st.w	r7++,r12
80004dac:	2f fb       	sub	r11,-1
80004dae:	fc 0b 18 00 	cp.b	r11,lr
80004db2:	cf c3       	brcs	80004daa <fat_initialize_dir+0xaa>
80004db4:	08 08       	add	r8,r4
80004db6:	08 1a       	sub	r10,r4
80004db8:	5c 58       	castu.b	r8
80004dba:	5c 5a       	castu.b	r10
80004dbc:	e8 03 18 00 	cp.b	r3,r4
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80004dc0:	c0 a0       	breq	80004dd4 <fat_initialize_dir+0xd4>
80004dc2:	32 0b       	mov	r11,32
80004dc4:	f2 08 0b 0b 	st.b	r9[r8],r11
80004dc8:	20 1a       	sub	r10,1
80004dca:	2f f8       	sub	r8,-1
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80004dcc:	5c 5a       	castu.b	r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004dce:	5c 58       	castu.b	r8
80004dd0:	58 0a       	cp.w	r10,0
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80004dd2:	cf 91       	brne	80004dc4 <fat_initialize_dir+0xc4>
80004dd4:	32 e8       	mov	r8,46

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
80004dd6:	f3 68 00 21 	st.b	r9[33],r8
80004dda:	f3 68 00 20 	st.b	r9[32],r8
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80004dde:	31 08       	mov	r8,16
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
80004de0:	f3 68 00 0b 	st.b	r9[11],r8
80004de4:	e0 68 13 00 	mov	r8,4864
   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80004de8:	2f c8       	sub	r8,-4
80004dea:	11 8a       	ld.ub	r10,r8[0x0]
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
80004dec:	f3 6a 00 15 	st.b	r9[21],r10
80004df0:	11 ba       	ld.ub	r10,r8[0x3]
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80004df2:	f3 6a 00 1a 	st.b	r9[26],r10
80004df6:	11 aa       	ld.ub	r10,r8[0x2]
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004df8:	f3 6a 00 1b 	st.b	r9[27],r10
80004dfc:	11 98       	ld.ub	r8,r8[0x1]
80004dfe:	f3 68 00 14 	st.b	r9[20],r8
80004e02:	ec 07 11 de 	rsub	r7,r6,-34
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
80004e06:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80004e0a:	c4 a0       	breq	80004e9e <fat_initialize_dir+0x19e>
80004e0c:	30 28       	mov	r8,2
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80004e0e:	32 0c       	mov	r12,32
80004e10:	f2 08 00 0a 	add	r10,r9,r8
80004e14:	f5 6c 00 20 	st.b	r10[32],r12
80004e18:	2f f8       	sub	r8,-1
80004e1a:	5c 58       	castu.b	r8
80004e1c:	f0 0a 11 0b 	rsub	r10,r8,11
80004e20:	f0 cb 00 02 	sub	r11,r8,2
80004e24:	5c 5a       	castu.b	r10
80004e26:	ee 0b 18 00 	cp.b	r11,r7
80004e2a:	cf 33       	brcs	80004e10 <fat_initialize_dir+0x110>
80004e2c:	ee 04 11 09 	rsub	r4,r7,9
80004e30:	5c 54       	castu.b	r4
80004e32:	e8 0e 16 02 	lsr	lr,r4,0x2
80004e36:	fc 06 15 02 	lsl	r6,lr,0x2
80004e3a:	c1 20       	breq	80004e5e <fat_initialize_dir+0x15e>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
80004e3c:	2d e7       	sub	r7,-34
80004e3e:	30 0b       	mov	r11,0
80004e40:	f2 07 00 07 	add	r7,r9,r7
80004e44:	49 8c       	lddpc	r12,80004ea4 <fat_initialize_dir+0x1a4>
80004e46:	0e ac       	st.w	r7++,r12
80004e48:	2f fb       	sub	r11,-1
80004e4a:	fc 0b 18 00 	cp.b	r11,lr
80004e4e:	cf c3       	brcs	80004e46 <fat_initialize_dir+0x146>
80004e50:	0c 08       	add	r8,r6
80004e52:	0c 1a       	sub	r10,r6
80004e54:	5c 58       	castu.b	r8
80004e56:	5c 5a       	castu.b	r10
80004e58:	ec 04 18 00 	cp.b	r4,r6
80004e5c:	c0 b0       	breq	80004e72 <fat_initialize_dir+0x172>
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80004e5e:	32 0c       	mov	r12,32
80004e60:	f2 08 00 0b 	add	r11,r9,r8
80004e64:	f7 6c 00 20 	st.b	r11[32],r12
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
80004e68:	2f f8       	sub	r8,-1
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80004e6a:	20 1a       	sub	r10,1
80004e6c:	5c 58       	castu.b	r8
80004e6e:	5c 5a       	castu.b	r10
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
80004e70:	cf 81       	brne	80004e60 <fat_initialize_dir+0x160>
80004e72:	2e 05       	sub	r5,-32
80004e74:	0b 88       	ld.ub	r8,r5[0x0]
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
80004e76:	f3 68 00 35 	st.b	r9[53],r8
80004e7a:	31 08       	mov	r8,16
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80004e7c:	f3 68 00 2b 	st.b	r9[43],r8
80004e80:	0b b8       	ld.ub	r8,r5[0x3]
80004e82:	f3 68 00 3a 	st.b	r9[58],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
80004e86:	0b a8       	ld.ub	r8,r5[0x2]
80004e88:	30 1c       	mov	r12,1
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );

   return true;
80004e8a:	f3 68 00 3b 	st.b	r9[59],r8
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004e8e:	0b 98       	ld.ub	r8,r5[0x1]
80004e90:	f3 68 00 34 	st.b	r9[52],r8
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004e94:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004e98:	30 aa       	mov	r10,10
80004e9a:	30 18       	mov	r8,1
80004e9c:	c7 ab       	rjmp	80004d90 <fat_initialize_dir+0x90>
80004e9e:	30 9a       	mov	r10,9
80004ea0:	30 28       	mov	r8,2
80004ea2:	cc 5b       	rjmp	80004e2c <fat_initialize_dir+0x12c>
80004ea4:	20 20       	sub	r0,2
80004ea6:	20 20       	sub	r0,2

80004ea8 <fat_allocfreespace>:
80004ea8:	d4 31       	pushm	r0-r7,lr
80004eaa:	20 2d       	sub	sp,8
80004eac:	e0 6b 15 8c 	mov	r11,5516
80004eb0:	30 38       	mov	r8,3
80004eb2:	17 89       	ld.ub	r9,r11[0x0]
80004eb4:	f0 09 18 00 	cp.b	r9,r8
80004eb8:	c7 60       	breq	80004fa4 <fat_allocfreespace+0xfc>
80004eba:	e0 63 15 e8 	mov	r3,5608
80004ebe:	3f f8       	mov	r8,-1
80004ec0:	07 89       	ld.ub	r9,r3[0x0]
80004ec2:	f0 09 18 00 	cp.b	r9,r8
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
80004ec6:	c7 f0       	breq	80004fc4 <fat_allocfreespace+0x11c>
80004ec8:	66 0a       	ld.w	r10,r3[0x0]
80004eca:	e0 67 15 e0 	mov	r7,5600
80004ece:	2f fa       	sub	r10,-1
80004ed0:	e0 65 15 40 	mov	r5,5440
80004ed4:	e0 6b 15 74 	mov	r11,5492
80004ed8:	e0 68 13 3c 	mov	r8,4924
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
   fs_g_u32_last_mod_fat = 0;
80004edc:	8f 0a       	st.w	r7[0x0],r10
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
80004ede:	30 12       	mov	r2,1
   fs_g_u32_last_mod_fat = 0;
80004ee0:	6a 39       	ld.w	r9,r5[0xc]
80004ee2:	50 1b       	stdsp	sp[0x4],r11
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80004ee4:	50 08       	stdsp	sp[0x0],r8
80004ee6:	3f f8       	mov	r8,-1
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004ee8:	30 04       	mov	r4,0
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80004eea:	97 08       	st.w	r11[0x0],r8
80004eec:	40 0b       	lddsp	r11,sp[0x0]
80004eee:	97 04       	st.w	r11[0x0],r4
80004ef0:	12 3a       	cp.w	r10,r9
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004ef2:	c6 22       	brcc	80004fb6 <fat_allocfreespace+0x10e>
80004ef4:	e0 66 15 e0 	mov	r6,5600
         return false;

      if ( 0 == fs_g_cluster.u32_val )
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80004ef8:	e0 61 ff ff 	mov	r1,65535
         if( true == first_cluster_free_is_found )
80004efc:	ea 11 0f ff 	orh	r1,0xfff
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80004f00:	e0 60 15 e8 	mov	r0,5608
80004f04:	c3 48       	rjmp	80004f6c <fat_allocfreespace+0xc4>
80004f06:	6c 08       	ld.w	r8,r6[0x0]
80004f08:	8d 18       	st.w	r6[0x4],r8
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80004f0a:	58 04       	cp.w	r4,0
80004f0c:	c4 21       	brne	80004f90 <fat_allocfreespace+0xe8>
80004f0e:	e0 6a 15 e8 	mov	r10,5608
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80004f12:	3f fb       	mov	r11,-1
80004f14:	15 89       	ld.ub	r9,r10[0x0]
80004f16:	f6 09 18 00 	cp.b	r9,r11
80004f1a:	c1 30       	breq	80004f40 <fat_allocfreespace+0x98>
80004f1c:	66 08       	ld.w	r8,r3[0x0]
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004f1e:	58 08       	cp.w	r8,0
80004f20:	c4 01       	brne	80004fa0 <fat_allocfreespace+0xf8>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004f22:	e0 6a 15 8c 	mov	r10,5516
80004f26:	30 39       	mov	r9,3
80004f28:	15 88       	ld.ub	r8,r10[0x0]
80004f2a:	f2 08 18 00 	cp.b	r8,r9
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80004f2e:	e0 81 00 92 	brne	80005052 <fat_allocfreespace+0x1aa>
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004f32:	6a 68       	ld.w	r8,r5[0x18]
80004f34:	8d 08       	st.w	r6[0x0],r8
80004f36:	30 1c       	mov	r12,1
80004f38:	fe b0 f4 02 	rcall	8000373c <fat_cluster_val>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004f3c:	c3 80       	breq	80004fac <fat_allocfreespace+0x104>
80004f3e:	6e 18       	ld.w	r8,r7[0x4]
80004f40:	87 08       	st.w	r3[0x0],r8
80004f42:	8f 08       	st.w	r7[0x0],r8
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
            break;                        // Stop loop
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004f44:	8f 11       	st.w	r7[0x4],r1
80004f46:	30 1c       	mov	r12,1
80004f48:	fe b0 f3 fa 	rcall	8000373c <fat_cluster_val>
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
80004f4c:	c3 00       	breq	80004fac <fat_allocfreespace+0x104>
80004f4e:	66 19       	ld.w	r9,r3[0x4]

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
80004f50:	0b 98       	ld.ub	r8,r5[0x1]
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80004f52:	10 39       	cp.w	r9,r8
80004f54:	e0 88 00 45 	brls	80004fde <fat_allocfreespace+0x136>
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80004f58:	10 19       	sub	r9,r8
80004f5a:	30 14       	mov	r4,1
80004f5c:	81 19       	st.w	r0[0x4],r9
80004f5e:	6c 08       	ld.w	r8,r6[0x0]
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004f60:	2f f8       	sub	r8,-1
80004f62:	8f 08       	st.w	r7[0x0],r8
80004f64:	6a 39       	ld.w	r9,r5[0xc]
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80004f66:	10 39       	cp.w	r9,r8
80004f68:	e0 88 00 25 	brls	80004fb2 <fat_allocfreespace+0x10a>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
80004f6c:	30 0c       	mov	r12,0
80004f6e:	fe b0 f3 e7 	rcall	8000373c <fat_cluster_val>
            {
               fs_g_cluster.u32_pos += 500;
80004f72:	c1 d0       	breq	80004fac <fat_allocfreespace+0x104>
80004f74:	6e 18       	ld.w	r8,r7[0x4]
80004f76:	58 08       	cp.w	r8,0
80004f78:	cc 70       	breq	80004f06 <fat_allocfreespace+0x5e>
80004f7a:	58 04       	cp.w	r4,0
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
         if( true == first_cluster_free_is_found )
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80004f7c:	c3 51       	brne	80004fe6 <fat_allocfreespace+0x13e>
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004f7e:	58 02       	cp.w	r2,0
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
         if( true == first_cluster_free_is_found )
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80004f80:	c0 31       	brne	80004f86 <fat_allocfreespace+0xde>
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004f82:	6c 08       	ld.w	r8,r6[0x0]
80004f84:	ce eb       	rjmp	80004f60 <fat_allocfreespace+0xb8>
80004f86:	6c 08       	ld.w	r8,r6[0x0]
80004f88:	f0 c8 fe 0c 	sub	r8,r8,-500
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004f8c:	8d 08       	st.w	r6[0x0],r8
80004f8e:	ce 9b       	rjmp	80004f60 <fat_allocfreespace+0xb8>
   bool b_quick_find = true;

   if( Is_fat32 )
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004f90:	20 18       	sub	r8,1
80004f92:	30 1c       	mov	r12,1
80004f94:	8d 08       	st.w	r6[0x0],r8
80004f96:	fe b0 f3 d3 	rcall	8000373c <fat_cluster_val>
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
      return false;
   }

   return fat_update_fat2();
}
80004f9a:	c0 90       	breq	80004fac <fat_allocfreespace+0x104>
80004f9c:	6c 18       	ld.w	r8,r6[0x4]
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
80004f9e:	cd 2b       	rjmp	80004f42 <fat_allocfreespace+0x9a>
80004fa0:	8d 08       	st.w	r6[0x0],r8
   {
      if( b_quick_find )
80004fa2:	cc ab       	rjmp	80004f36 <fat_allocfreespace+0x8e>
80004fa4:	3f fc       	mov	r12,-1
80004fa6:	fe b0 fb 03 	rcall	800045ac <fat_write_fat32_FSInfo>

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80004faa:	c8 81       	brne	80004eba <fat_allocfreespace+0x12>
80004fac:	30 0c       	mov	r12,0
80004fae:	2f ed       	sub	sp,-8
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
80004fb0:	d8 32       	popm	r0-r7,pc
80004fb2:	58 04       	cp.w	r4,0
80004fb4:	c1 91       	brne	80004fe6 <fat_allocfreespace+0x13e>
80004fb6:	58 02       	cp.w	r2,0
80004fb8:	c4 40       	breq	80005040 <fat_allocfreespace+0x198>
80004fba:	30 02       	mov	r2,0
80004fbc:	30 2a       	mov	r10,2
80004fbe:	40 1b       	lddsp	r11,sp[0x4]
80004fc0:	8f 0a       	st.w	r7[0x0],r10
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80004fc2:	c9 2b       	rjmp	80004ee6 <fat_allocfreespace+0x3e>
80004fc4:	e0 65 15 40 	mov	r5,5440
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004fc8:	e0 6a 15 74 	mov	r10,5492
80004fcc:	e0 68 13 3c 	mov	r8,4924
80004fd0:	30 12       	mov	r2,1
80004fd2:	6a 39       	ld.w	r9,r5[0xc]
80004fd4:	e0 67 15 e0 	mov	r7,5600
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004fd8:	50 1a       	stdsp	sp[0x4],r10
80004fda:	50 08       	stdsp	sp[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004fdc:	cf 0b       	rjmp	80004fbc <fat_allocfreespace+0x114>
80004fde:	30 09       	mov	r9,0
80004fe0:	e0 68 15 e8 	mov	r8,5608
80004fe4:	91 19       	st.w	r8[0x4],r9
80004fe6:	40 1b       	lddsp	r11,sp[0x4]
80004fe8:	40 0a       	lddsp	r10,sp[0x0]
80004fea:	76 08       	ld.w	r8,r11[0x0]
80004fec:	74 09       	ld.w	r9,r10[0x0]
80004fee:	12 38       	cp.w	r8,r9
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004ff0:	e0 8b 00 2f 	brhi	8000504e <fat_allocfreespace+0x1a6>
80004ff4:	e0 64 12 fc 	mov	r4,4860
80004ff8:	e0 67 15 40 	mov	r7,5440
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80004ffc:	08 93       	mov	r3,r4
     fs_g_u32_first_mod_fat++;
80004ffe:	e0 66 15 74 	mov	r6,5492
80005002:	14 91       	mov	r1,r10
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005004:	16 92       	mov	r2,r11
80005006:	c1 58       	rjmp	80005030 <fat_allocfreespace+0x188>
80005008:	6e 19       	ld.w	r9,r7[0x4]
8000500a:	6e 48       	ld.w	r8,r7[0x10]
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
8000500c:	f2 08 00 08 	add	r8,r9,r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80005010:	64 09       	ld.w	r9,r2[0x0]
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005012:	12 08       	add	r8,r9
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80005014:	30 0c       	mov	r12,0
80005016:	87 08       	st.w	r3[0x0],r8
80005018:	fe b0 f2 72 	rcall	800034fc <fat_cache_read_sector>
      {
         // Retry in normal mode to scann all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
8000501c:	cc 80       	breq	80004fac <fat_allocfreespace+0x104>
8000501e:	fe b0 f1 75 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
80005022:	6c 08       	ld.w	r8,r6[0x0]
      return false;
   }

   return fat_update_fat2();
}
80005024:	2f f8       	sub	r8,-1
80005026:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005028:	62 09       	ld.w	r9,r1[0x0]
8000502a:	12 38       	cp.w	r8,r9
               if( 0 == fs_g_seg.u32_addr )
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
8000502c:	e0 8b 00 11 	brhi	8000504e <fat_allocfreespace+0x1a6>
80005030:	6a 49       	ld.w	r9,r5[0x10]
80005032:	12 08       	add	r8,r9
                     return false;
80005034:	30 1c       	mov	r12,1
80005036:	89 08       	st.w	r4[0x0],r8
80005038:	fe b0 f2 62 	rcall	800034fc <fat_cache_read_sector>
8000503c:	ce 61       	brne	80005008 <fat_allocfreespace+0x160>
8000503e:	cb 7b       	rjmp	80004fac <fat_allocfreespace+0x104>
80005040:	31 b9       	mov	r9,27
80005042:	e0 68 15 90 	mov	r8,5520
80005046:	04 9c       	mov	r12,r2
80005048:	b0 89       	st.b	r8[0x0],r9
8000504a:	2f ed       	sub	sp,-8
8000504c:	d8 32       	popm	r0-r7,pc
8000504e:	30 1c       	mov	r12,1
80005050:	ca fb       	rjmp	80004fae <fat_allocfreespace+0x106>
80005052:	31 b9       	mov	r9,27
80005054:	e0 68 15 90 	mov	r8,5520
80005058:	08 9c       	mov	r12,r4
8000505a:	b0 89       	st.b	r8[0x0],r9
8000505c:	ca 9b       	rjmp	80004fae <fat_allocfreespace+0x106>
8000505e:	d7 03       	nop

80005060 <fat_alloc_entry_free>:
80005060:	d4 31       	pushm	r0-r7,lr
80005062:	20 2d       	sub	sp,8
80005064:	e0 63 15 8c 	mov	r3,5516
//! @verbatim
//! OUT: Initialise the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
80005068:	30 08       	mov	r8,0
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000506a:	50 1c       	stdsp	sp[0x4],r12
8000506c:	a6 18       	st.h	r3[0x2],r8
8000506e:	50 0c       	stdsp	sp[0x0],r12
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005070:	30 04       	mov	r4,0
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80005072:	e0 60 15 90 	mov	r0,5520
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80005076:	e0 62 15 e8 	mov	r2,5608
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000507a:	30 11       	mov	r1,1
8000507c:	e0 65 15 40 	mov	r5,5440
80005080:	e0 67 12 fc 	mov	r7,4860
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005084:	fe b0 f9 06 	rcall	80004290 <fat_read_dir>
80005088:	18 96       	mov	r6,r12
8000508a:	c1 61       	brne	800050b6 <fat_alloc_entry_free+0x56>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000508c:	01 88       	ld.ub	r8,r0[0x0]
         if( !fat_allocfreespace())
8000508e:	31 a9       	mov	r9,26
80005090:	f2 08 18 00 	cp.b	r8,r9
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80005094:	c3 41       	brne	800050fc <fat_alloc_entry_free+0x9c>
80005096:	85 11       	st.w	r2[0x4],r1
               return false;
            if( !fat_garbage_collector_entry())
80005098:	c0 8f       	rcall	80004ea8 <fat_allocfreespace>
8000509a:	c2 b1       	brne	800050f0 <fat_alloc_entry_free+0x90>
8000509c:	58 04       	cp.w	r4,0
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000509e:	c2 f1       	brne	800050fc <fat_alloc_entry_free+0x9c>
800050a0:	fe b0 fa 36 	rcall	8000450c <fat_garbage_collector_entry>
800050a4:	c2 c0       	breq	800050fc <fat_alloc_entry_free+0x9c>
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800050a6:	40 18       	lddsp	r8,sp[0x4]
800050a8:	a6 14       	st.h	r3[0x2],r4
800050aa:	50 08       	stdsp	sp[0x0],r8
800050ac:	02 94       	mov	r4,r1

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
800050ae:	fe b0 f8 f1 	rcall	80004290 <fat_read_dir>
      if ( FS_ENTRY_END == *ptr_entry )
800050b2:	18 96       	mov	r6,r12
800050b4:	ce c0       	breq	8000508c <fat_alloc_entry_free+0x2c>
800050b6:	fe b0 f1 15 	rcall	800032e0 <fat_get_ptr_entry>
800050ba:	30 08       	mov	r8,0
      {  // The entry is free
         u8_nb_entry--;
800050bc:	19 89       	ld.ub	r9,r12[0x0]
800050be:	f0 09 18 00 	cp.b	r9,r8
800050c2:	c0 61       	brne	800050ce <fat_alloc_entry_free+0x6e>
         if( 0 == u8_nb_entry )
800050c4:	40 08       	lddsp	r8,sp[0x0]
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
800050c6:	20 18       	sub	r8,1
800050c8:	5c 58       	castu.b	r8
800050ca:	50 08       	stdsp	sp[0x0],r8
800050cc:	c3 70       	breq	8000513a <fat_alloc_entry_free+0xda>
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800050ce:	86 1c       	ld.sh	r12,r3[0x2]
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
800050d0:	2f fc       	sub	r12,-1
800050d2:	5c 8c       	casts.h	r12
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
            return false;
         }
         if( !fat_garbage_collector_entry())
800050d4:	a6 1c       	st.h	r3[0x2],r12
800050d6:	cd 71       	brne	80005084 <fat_alloc_entry_free+0x24>
800050d8:	58 04       	cp.w	r4,0
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
800050da:	c3 21       	brne	8000513e <fat_alloc_entry_free+0xde>
800050dc:	fe b0 fa 18 	rcall	8000450c <fat_garbage_collector_entry>
800050e0:	c0 e0       	breq	800050fc <fat_alloc_entry_free+0x9c>
800050e2:	e0 68 15 8c 	mov	r8,5516
bool  fat_clear_cluster( void )
{
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
800050e6:	40 19       	lddsp	r9,sp[0x4]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
800050e8:	b0 14       	st.h	r8[0x2],r4
800050ea:	50 09       	stdsp	sp[0x0],r9
800050ec:	30 14       	mov	r4,1
800050ee:	cc bb       	rjmp	80005084 <fat_alloc_entry_free+0x24>
800050f0:	85 16       	st.w	r2[0x4],r6
            return false;
         }
         if( !fat_garbage_collector_entry())
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
800050f2:	0c 9b       	mov	r11,r6
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
800050f4:	30 2c       	mov	r12,2
800050f6:	fe b0 f5 eb 	rcall	80003ccc <fat_cluster_list>
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
800050fa:	c0 41       	brne	80005102 <fat_alloc_entry_free+0xa2>
800050fc:	30 0c       	mov	r12,0
800050fe:	2f ed       	sub	sp,-8
80005100:	d8 32       	popm	r0-r7,pc
   for(  u8_loop = 0
80005102:	0b 98       	ld.ub	r8,r5[0x1]
80005104:	64 09       	ld.w	r9,r2[0x0]
80005106:	20 19       	sub	r9,1

      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
80005108:	10 09       	add	r9,r8
8000510a:	8f 09       	st.w	r7[0x0],r9
      fs_gu32_addrsector--;         // go to previous sector
8000510c:	58 08       	cp.w	r8,0
8000510e:	c0 d1       	brne	80005128 <fat_alloc_entry_free+0xc8>
80005110:	cb ab       	rjmp	80005084 <fat_alloc_entry_free+0x24>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80005112:	fe b0 f0 fb 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
80005116:	6e 08       	ld.w	r8,r7[0x0]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80005118:	20 18       	sub	r8,1
8000511a:	8f 08       	st.w	r7[0x0],r8
8000511c:	2f f6       	sub	r6,-1
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000511e:	0b 98       	ld.ub	r8,r5[0x1]
80005120:	5c 56       	castu.b	r6
80005122:	ec 08 18 00 	cp.b	r8,r6
         return false;

      if(0 == u8_loop)
80005126:	ca f0       	breq	80005084 <fat_alloc_entry_free+0x24>
80005128:	30 0c       	mov	r12,0
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
8000512a:	fe b0 f1 e9 	rcall	800034fc <fat_cache_read_sector>
8000512e:	ce 70       	breq	800050fc <fat_alloc_entry_free+0x9c>
      // Check entry
      ptr_entry = fat_get_ptr_entry();
      if ( FS_ENTRY_END == *ptr_entry )
      {  // The entry is free
         u8_nb_entry--;
         if( 0 == u8_nb_entry )
80005130:	58 06       	cp.w	r6,0
80005132:	cf 01       	brne	80005112 <fat_alloc_entry_free+0xb2>
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80005134:	fe b0 f1 7c 	rcall	8000342c <fat_cache_clear>
80005138:	ce db       	rjmp	80005112 <fat_alloc_entry_free+0xb2>
            return false;
8000513a:	30 1c       	mov	r12,1
8000513c:	ce 1b       	rjmp	800050fe <fat_alloc_entry_free+0x9e>
8000513e:	31 b9       	mov	r9,27
80005140:	e0 68 15 90 	mov	r8,5520
80005144:	b0 89       	st.b	r8[0x0],r9
80005146:	cd cb       	rjmp	800050fe <fat_alloc_entry_free+0x9e>

80005148 <fat_create_entry_file_name>:
80005148:	d4 31       	pushm	r0-r7,lr
8000514a:	20 7d       	sub	sp,28
8000514c:	30 2a       	mov	r10,2
8000514e:	50 2c       	stdsp	sp[0x8],r12
80005150:	50 1a       	stdsp	sp[0x4],r10
80005152:	18 96       	mov	r6,r12
80005154:	30 d5       	mov	r5,13
80005156:	33 a4       	mov	r4,58
80005158:	32 a3       	mov	r3,42
8000515a:	33 f2       	mov	r2,63
8000515c:	32 21       	mov	r1,34
8000515e:	33 c0       	mov	r0,60
80005160:	0d 87       	ld.ub	r7,r6[0x0]
80005162:	0e 9c       	mov	r12,r7
80005164:	fe b0 f0 aa 	rcall	800032b8 <fat_check_eof_name>
80005168:	c2 c1       	brne	800051c0 <fat_create_entry_file_name+0x78>
8000516a:	e8 07 19 00 	cp.h	r7,r4
8000516e:	c2 20       	breq	800051b2 <fat_create_entry_file_name+0x6a>
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
80005170:	e6 07 19 00 	cp.h	r7,r3
80005174:	c1 f0       	breq	800051b2 <fat_create_entry_file_name+0x6a>
80005176:	e4 07 19 00 	cp.h	r7,r2
8000517a:	c1 c0       	breq	800051b2 <fat_create_entry_file_name+0x6a>
8000517c:	e2 07 19 00 	cp.h	r7,r1
80005180:	c1 90       	breq	800051b2 <fat_create_entry_file_name+0x6a>
80005182:	e0 07 19 00 	cp.h	r7,r0
80005186:	c1 60       	breq	800051b2 <fat_create_entry_file_name+0x6a>
80005188:	33 e8       	mov	r8,62
8000518a:	f0 07 19 00 	cp.h	r7,r8
8000518e:	c1 20       	breq	800051b2 <fat_create_entry_file_name+0x6a>
80005190:	37 ca       	mov	r10,124
80005192:	f4 07 19 00 	cp.h	r7,r10
80005196:	c0 e0       	breq	800051b2 <fat_create_entry_file_name+0x6a>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
80005198:	58 05       	cp.w	r5,0
8000519a:	c0 50       	breq	800051a4 <fat_create_entry_file_name+0x5c>
8000519c:	20 15       	sub	r5,1
      {
         u8_nb_entry++;
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
8000519e:	2f f6       	sub	r6,-1
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800051a0:	5c 55       	castu.b	r5
800051a2:	cd fb       	rjmp	80005160 <fat_create_entry_file_name+0x18>
      {
         u8_nb_entry++;
800051a4:	40 18       	lddsp	r8,sp[0x4]
800051a6:	30 c5       	mov	r5,12
800051a8:	2f f8       	sub	r8,-1
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
800051aa:	2f f6       	sub	r6,-1
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800051ac:	5c 58       	castu.b	r8
800051ae:	50 18       	stdsp	sp[0x4],r8
800051b0:	cd 8b       	rjmp	80005160 <fat_create_entry_file_name+0x18>

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800051b2:	31 c9       	mov	r9,28
800051b4:	e0 68 15 90 	mov	r8,5520
800051b8:	30 0c       	mov	r12,0
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
}
800051ba:	b0 89       	st.b	r8[0x0],r9
800051bc:	2f 9d       	sub	sp,-28
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
   }
   if( 0x14 < u8_nb_entry )
800051be:	d8 32       	popm	r0-r7,pc
800051c0:	31 48       	mov	r8,20
800051c2:	40 19       	lddsp	r9,sp[0x4]
800051c4:	f0 09 18 00 	cp.b	r9,r8
800051c8:	e0 88 00 09 	brls	800051da <fat_create_entry_file_name+0x92>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
800051cc:	32 b9       	mov	r9,43
800051ce:	e0 68 15 90 	mov	r8,5520
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
}
800051d2:	30 0c       	mov	r12,0
800051d4:	b0 89       	st.b	r8[0x0],r9
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
   if( 0 == u8_nb_entry )
800051d6:	2f 9d       	sub	sp,-28
800051d8:	d8 32       	popm	r0-r7,pc
      return false;

   // Search a unik short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
800051da:	58 09       	cp.w	r9,0
800051dc:	c0 f0       	breq	800051fa <fat_create_entry_file_name+0xb2>
800051de:	40 2c       	lddsp	r12,sp[0x8]
800051e0:	fe b0 fd 4c 	rcall	80004c78 <fat_find_short_entry_name>
   if( 0 == u8_nb )
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800051e4:	18 97       	mov	r7,r12
800051e6:	c0 71       	brne	800051f4 <fat_create_entry_file_name+0xac>
800051e8:	32 a9       	mov	r9,42
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
}
800051ea:	e0 68 15 90 	mov	r8,5520
      fs_g_status = FS_ERR_FILE_EXIST;
      return false;  // All short name exist
   }

   // Alloc a space for entrys
   if( !fat_alloc_entry_free( u8_nb_entry ))
800051ee:	b0 89       	st.b	r8[0x0],r9
800051f0:	2f 9d       	sub	sp,-28
800051f2:	d8 32       	popm	r0-r7,pc
800051f4:	40 1c       	lddsp	r12,sp[0x4]
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
800051f6:	c3 5f       	rcall	80005060 <fat_alloc_entry_free>
800051f8:	c0 31       	brne	800051fe <fat_create_entry_file_name+0xb6>
   if( !fat_alloc_entry_free( u8_nb_entry ))
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
800051fa:	30 0c       	mov	r12,0
800051fc:	ce 0b       	rjmp	800051bc <fat_create_entry_file_name+0x74>
800051fe:	30 09       	mov	r9,0
80005200:	0e 9a       	mov	r10,r7
80005202:	40 2c       	lddsp	r12,sp[0x8]
80005204:	12 9b       	mov	r11,r9
80005206:	fe b0 fa 13 	rcall	8000462c <fat_create_short_entry_name>
   u8_nb_entry--;
8000520a:	50 5c       	stdsp	sp[0x14],r12
8000520c:	40 15       	lddsp	r5,sp[0x4]

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000520e:	20 15       	sub	r5,1
80005210:	5c 55       	castu.b	r5
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005212:	c7 e0       	breq	8000530e <fat_create_entry_file_name+0x1c6>
80005214:	e0 6a 15 8c 	mov	r10,5516
80005218:	ea c8 ff c0 	sub	r8,r5,-64
8000521c:	30 16       	mov	r6,1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000521e:	5c 58       	castu.b	r8
80005220:	50 1a       	stdsp	sp[0x4],r10

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005222:	50 48       	stdsp	sp[0x10],r8
80005224:	30 b7       	mov	r7,11
80005226:	14 99       	mov	r9,r10
      if( !fat_read_dir())
80005228:	92 18       	ld.sh	r8,r9[0x2]
8000522a:	20 18       	sub	r8,1
8000522c:	b2 18       	st.h	r9[0x2],r8
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
8000522e:	fe b0 f8 31 	rcall	80004290 <fat_read_dir>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005232:	ce 40       	breq	800051fa <fat_create_entry_file_name+0xb2>
80005234:	fe b0 f0 6a 	rcall	80003308 <fat_cache_mark_sector_as_dirty>
80005238:	40 48       	lddsp	r8,sp[0x10]
8000523a:	ea 06 18 00 	cp.b	r6,r5
{
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
8000523e:	f0 06 17 00 	moveq	r6,r8
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
80005242:	fe b0 f0 4f 	rcall	800032e0 <fat_get_ptr_entry>
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file
80005246:	18 c6       	st.b	r12++,r6
80005248:	50 06       	stdsp	sp[0x0],r6
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
8000524a:	30 02       	mov	r2,0
8000524c:	40 20       	lddsp	r0,sp[0x8]
8000524e:	30 18       	mov	r8,1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005250:	31 a4       	mov	r4,26
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
80005252:	30 ce       	mov	lr,12
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80005254:	04 9b       	mov	r11,r2
80005256:	31 f3       	mov	r3,31
80005258:	31 b1       	mov	r1,27
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
8000525a:	ee 08 18 00 	cp.b	r8,r7
8000525e:	c3 90       	breq	800052d0 <fat_create_entry_file_name+0x188>
80005260:	e8 08 18 00 	cp.b	r8,r4
80005264:	5f 0a       	sreq	r10
80005266:	fc 08 18 00 	cp.b	r8,lr
8000526a:	5f 09       	sreq	r9
8000526c:	f5 e9 10 09 	or	r9,r10,r9
80005270:	f6 09 18 00 	cp.b	r9,r11
80005274:	c2 41       	brne	800052bc <fat_create_entry_file_name+0x174>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005276:	e2 08 18 00 	cp.b	r8,r1
8000527a:	c3 b0       	breq	800052f0 <fat_create_entry_file_name+0x1a8>
8000527c:	30 d9       	mov	r9,13
         *ptr_entry = u8_crc;             // CRC field
         continue;
      }

      // fields with a character
      if( !b_end_of_name )
8000527e:	f2 08 18 00 	cp.b	r8,r9
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80005282:	c3 d0       	breq	800052fc <fat_create_entry_file_name+0x1b4>
         }
         if(('\\' == u16_tmp )
80005284:	58 02       	cp.w	r2,0
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80005286:	c3 81       	brne	800052f6 <fat_create_entry_file_name+0x1ae>
80005288:	01 89       	ld.ub	r9,r0[0x0]
         }
         if(('\\' == u16_tmp )
8000528a:	32 fa       	mov	r10,47
8000528c:	fb 59 00 1a 	st.h	sp[26],r9
80005290:	f4 09 19 00 	cp.h	r9,r10
80005294:	5f 06       	sreq	r6
80005296:	35 ca       	mov	r10,92
80005298:	f4 09 19 00 	cp.h	r9,r10
8000529c:	5f 0a       	sreq	r10
8000529e:	ed ea 10 0a 	or	r10,r6,r10
800052a2:	f6 0a 18 00 	cp.b	r10,r11
         }
         if( 0 == u16_tmp )
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800052a6:	c3 01       	brne	80005306 <fat_create_entry_file_name+0x1be>
800052a8:	58 09       	cp.w	r9,0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
         u8_id++;
800052aa:	5f 02       	sreq	r2
         }
         if( 0 == u16_tmp )
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800052ac:	fa c9 ff e6 	sub	r9,sp,-26
800052b0:	2f f8       	sub	r8,-1
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
800052b2:	13 9a       	ld.ub	r10,r9[0x1]
800052b4:	2f f0       	sub	r0,-1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800052b6:	18 ca       	st.b	r12++,r10
800052b8:	13 89       	ld.ub	r9,r9[0x0]
800052ba:	b8 89       	st.b	r12[0x0],r9
800052bc:	2f f8       	sub	r8,-1
800052be:	5c 58       	castu.b	r8
800052c0:	e6 08 18 00 	cp.b	r8,r3
   {
      // fields with no character
      if( 11 == u8_id)
800052c4:	e0 8b 00 0b 	brhi	800052da <fat_create_entry_file_name+0x192>
800052c8:	2f fc       	sub	r12,-1
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
800052ca:	ee 08 18 00 	cp.b	r8,r7
800052ce:	cc 91       	brne	80005260 <fat_create_entry_file_name+0x118>
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800052d0:	30 f6       	mov	r6,15
800052d2:	30 c8       	mov	r8,12
800052d4:	b8 86       	st.b	r12[0x0],r6
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
800052d6:	2f fc       	sub	r12,-1
800052d8:	cf 9b       	rjmp	800052ca <fat_create_entry_file_name+0x182>
800052da:	40 06       	lddsp	r6,sp[0x0]
800052dc:	2f f6       	sub	r6,-1
800052de:	5c 56       	castu.b	r6
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
800052e0:	ec 05 18 00 	cp.b	r5,r6
800052e4:	c1 83       	brcs	80005314 <fat_create_entry_file_name+0x1cc>
800052e6:	40 2a       	lddsp	r10,sp[0x8]
800052e8:	40 19       	lddsp	r9,sp[0x4]
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
  return true;
800052ea:	2f 3a       	sub	r10,-13
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800052ec:	50 2a       	stdsp	sp[0x8],r10
800052ee:	c9 db       	rjmp	80005228 <fat_create_entry_file_name+0xe0>
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
800052f0:	31 c8       	mov	r8,28
800052f2:	2f fc       	sub	r12,-1
800052f4:	ce bb       	rjmp	800052ca <fat_create_entry_file_name+0x182>
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
      {
         *ptr_entry = u8_crc;             // CRC field
800052f6:	3f f9       	mov	r9,-1
800052f8:	b8 89       	st.b	r12[0x0],r9
800052fa:	ce 1b       	rjmp	800052bc <fat_create_entry_file_name+0x174>
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800052fc:	40 5a       	lddsp	r10,sp[0x14]
800052fe:	30 e8       	mov	r8,14
            u16_tmp = sz_name[0];
         }
         if(('\\' == u16_tmp )
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80005300:	b8 8a       	st.b	r12[0x0],r10
80005302:	2f fc       	sub	r12,-1
80005304:	ce 3b       	rjmp	800052ca <fat_create_entry_file_name+0x182>
80005306:	fb 52 00 1a 	st.h	sp[26],r2
8000530a:	30 12       	mov	r2,1
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
8000530c:	cd 0b       	rjmp	800052ac <fat_create_entry_file_name+0x164>
8000530e:	e0 66 15 8c 	mov	r6,5516
80005312:	50 16       	stdsp	sp[0x4],r6
80005314:	40 19       	lddsp	r9,sp[0x4]
80005316:	30 1c       	mov	r12,1
  return true;
80005318:	92 18       	ld.sh	r8,r9[0x2]
8000531a:	f0 05 00 05 	add	r5,r8,r5
8000531e:	b2 15       	st.h	r9[0x2],r5
80005320:	c4 eb       	rjmp	800051bc <fat_create_entry_file_name+0x74>
80005322:	d7 03       	nop

80005324 <nav_drive_get>:
//!
//! @return    0 to nav_drive_nb()-1
//! @return    0xFF in case of no drive selected
//!
uint8_t    nav_drive_get( void )
{
80005324:	e0 68 15 40 	mov	r8,5440
      return 0xFF;
   return ((fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return (fs_g_nav.u8_lun);
#endif
}
80005328:	11 8c       	ld.ub	r12,r8[0x0]
8000532a:	5e fc       	retal	r12

8000532c <nav_file_lgt>:
8000532c:	e0 68 13 00 	mov	r8,4864
//! @return    Size of selected file (unit byte)
//!
uint32_t   nav_file_lgt( void )
{
   return fs_g_nav_entry.u32_size;
}
80005330:	70 2c       	ld.w	r12,r8[0x8]
80005332:	5e fc       	retal	r12

80005334 <nav_file_isdir>:
80005334:	d4 01       	pushm	lr
80005336:	fe b0 ed 6f 	rcall	80002e14 <fat_entry_is_dir>
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
   return fat_entry_is_dir();
}
8000533a:	d8 02       	popm	pc

8000533c <nav_file_name>:
8000533c:	d4 31       	pushm	r0-r7,lr
8000533e:	20 1d       	sub	sp,4
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80005340:	18 94       	mov	r4,r12
80005342:	16 96       	mov	r6,r11
80005344:	14 97       	mov	r7,r10
80005346:	12 92       	mov	r2,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80005348:	fe b0 f3 72 	rcall	80003a2c <fat_check_mount_select>
8000534c:	c2 70       	breq	8000539a <nav_file_name+0x5e>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000534e:	58 07       	cp.w	r7,0
80005350:	c2 81       	brne	800053a0 <nav_file_name+0x64>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
80005352:	e0 65 15 8c 	mov	r5,5516
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005356:	8a 13       	ld.sh	r3,r5[0x2]
80005358:	58 03       	cp.w	r3,0
8000535a:	c3 61       	brne	800053c6 <nav_file_name+0x8a>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000535c:	30 11       	mov	r1,1
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
8000535e:	30 09       	mov	r9,0
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005360:	31 00       	mov	r0,16

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
80005362:	50 09       	stdsp	sp[0x0],r9
80005364:	fe b0 f7 96 	rcall	80004290 <fat_read_dir>
         break; // error

      if ( b_readshortname )
80005368:	c1 90       	breq	8000539a <nav_file_name+0x5e>
8000536a:	58 01       	cp.w	r1,0
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
8000536c:	c3 71       	brne	800053da <nav_file_name+0x9e>
8000536e:	04 99       	mov	r9,r2
80005370:	0e 9a       	mov	r10,r7
80005372:	0c 9b       	mov	r11,r6
80005374:	08 9c       	mov	r12,r4
80005376:	fe b0 ee 4f 	rcall	80003014 <fat_entry_longname>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
8000537a:	c3 61       	brne	800053e6 <nav_file_name+0xaa>
8000537c:	e0 69 15 90 	mov	r9,5520
80005380:	13 88       	ld.ub	r8,r9[0x0]
80005382:	e0 08 18 00 	cp.b	r8,r0
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80005386:	c1 20       	breq	800053aa <nav_file_name+0x6e>
80005388:	aa 13       	st.h	r5[0x2],r3
8000538a:	30 b9       	mov	r9,11
8000538c:	f2 08 18 00 	cp.b	r8,r9

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
80005390:	c0 51       	brne	8000539a <nav_file_name+0x5e>
80005392:	30 11       	mov	r1,1
80005394:	fe b0 f7 7e 	rcall	80004290 <fat_read_dir>
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
}
80005398:	ce 91       	brne	8000536a <nav_file_name+0x2e>
8000539a:	30 0c       	mov	r12,0

   if ( !fat_check_mount_select())
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000539c:	2f fd       	sub	sp,-4
8000539e:	d8 32       	popm	r0-r7,pc
      {
         if( g_b_string_length )
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800053a0:	58 06       	cp.w	r6,0
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
}
800053a2:	cd 81       	brne	80005352 <nav_file_name+0x16>
800053a4:	30 1c       	mov	r12,1
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
800053a6:	2f fd       	sub	sp,-4
800053a8:	d8 32       	popm	r0-r7,pc
800053aa:	e0 69 15 91 	mov	r9,5521
800053ae:	13 88       	ld.ub	r8,r9[0x0]
800053b0:	30 09       	mov	r9,0
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800053b2:	f2 08 18 00 	cp.b	r8,r9
800053b6:	c0 d1       	brne	800053d0 <nav_file_name+0x94>
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800053b8:	20 d6       	sub	r6,13
800053ba:	2f 34       	sub	r4,-13
800053bc:	5c 56       	castu.b	r6
800053be:	8a 18       	ld.sh	r8,r5[0x2]
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800053c0:	20 18       	sub	r8,1
800053c2:	aa 18       	st.h	r5[0x2],r8
800053c4:	cd 0b       	rjmp	80005364 <nav_file_name+0x28>
800053c6:	e6 c8 00 01 	sub	r8,r3,1
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
800053ca:	30 01       	mov	r1,0
800053cc:	aa 18       	st.h	r5[0x2],r8
800053ce:	cc 8b       	rjmp	8000535e <nav_file_name+0x22>
800053d0:	40 08       	lddsp	r8,sp[0x0]
800053d2:	2f 38       	sub	r8,-13
         break; // error

      if ( b_readshortname )
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
800053d4:	5c 88       	casts.h	r8
800053d6:	50 08       	stdsp	sp[0x0],r8
800053d8:	cf 3b       	rjmp	800053be <nav_file_name+0x82>
800053da:	0e 9a       	mov	r10,r7
800053dc:	0c 9b       	mov	r11,r6
800053de:	08 9c       	mov	r12,r4
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
      {
         if( g_b_string_length )
800053e0:	fe b0 ed 66 	rcall	80002eac <fat_entry_shortname>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
800053e4:	cd cb       	rjmp	8000539c <nav_file_name+0x60>
800053e6:	e0 68 15 91 	mov	r8,5521
800053ea:	11 88       	ld.ub	r8,r8[0x0]
800053ec:	e2 08 18 00 	cp.b	r8,r1
800053f0:	e9 f8 12 00 	ld.shne	r8,r4[0x0]
800053f4:	fb f9 10 00 	ld.wne	r9,sp[0x0]
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800053f8:	f1 d9 e1 08 	addne	r8,r8,r9
800053fc:	e9 f8 1c 00 	st.hne	r4[0x0],r8
80005400:	aa 13       	st.h	r5[0x2],r3
80005402:	30 1c       	mov	r12,1
80005404:	cd 1b       	rjmp	800053a6 <nav_file_name+0x6a>
80005406:	d7 03       	nop

80005408 <nav_filelist_set>:
80005408:	d4 31       	pushm	r0-r7,lr
8000540a:	20 4d       	sub	sp,16
8000540c:	50 0c       	stdsp	sp[0x0],r12
8000540e:	16 95       	mov	r5,r11
80005410:	fe b0 f3 86 	rcall	80003b1c <fat_check_mount_noopen>
80005414:	e0 80 00 97 	breq	80005542 <nav_filelist_set+0x13a>
80005418:	e0 64 15 40 	mov	r4,5440
   if ( !fat_check_mount_noopen())
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000541c:	e0 67 15 8c 	mov	r7,5516

   if ( !fat_check_mount_noopen())
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80005420:	e9 08 00 24 	ld.sh	r8,r4[36]
80005424:	8e 19       	ld.sh	r9,r7[0x2]
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80005426:	30 06       	mov	r6,0
   b_save_entry_type       = fs_g_nav.b_mode_nav;
80005428:	50 19       	stdsp	sp[0x4],r9
8000542a:	50 28       	stdsp	sp[0x8],r8
8000542c:	e9 39 00 2c 	ld.ub	r9,r4[44]
80005430:	40 18       	lddsp	r8,sp[0x4]
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80005432:	50 39       	stdsp	sp[0xc],r9
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005434:	5c 88       	casts.h	r8
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005436:	3f e0       	mov	r0,-2
80005438:	0c 93       	mov	r3,r6
8000543a:	e0 61 15 90 	mov	r1,5520
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000543e:	31 a2       	mov	r2,26
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80005440:	c2 78       	rjmp	8000548e <nav_filelist_set+0x86>
80005442:	58 06       	cp.w	r6,0
80005444:	c2 71       	brne	80005492 <nav_filelist_set+0x8a>
80005446:	3f f9       	mov	r9,-1
80005448:	f2 08 19 00 	cp.h	r8,r9
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000544c:	e0 80 00 8b 	breq	80005562 <nav_filelist_set+0x15a>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005450:	58 08       	cp.w	r8,0
80005452:	c6 61       	brne	8000551e <nav_filelist_set+0x116>
80005454:	e9 38 00 2c 	ld.ub	r8,r4[44]
80005458:	e6 08 18 00 	cp.b	r8,r3
8000545c:	e0 80 00 83 	breq	80005562 <nav_filelist_set+0x15a>
80005460:	e0 69 15 40 	mov	r9,5440
80005464:	f3 38 00 2d 	ld.ub	r8,r9[45]
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
         }
      }

      if( !fat_read_dir())
80005468:	e6 08 18 00 	cp.b	r8,r3
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000546c:	c7 b1       	brne	80005562 <nav_filelist_set+0x15a>
8000546e:	30 16       	mov	r6,1
80005470:	fe b0 f7 10 	rcall	80004290 <fat_read_dir>
80005474:	c1 71       	brne	800054a2 <nav_filelist_set+0x9a>
      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
80005476:	e0 6a 15 90 	mov	r10,5520
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
8000547a:	03 88       	ld.ub	r8,r1[0x0]
8000547c:	e4 08 18 00 	cp.b	r8,r2
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
   b_save_entry_type       = fs_g_nav.b_mode_nav;
80005480:	c5 61       	brne	8000552c <nav_filelist_set+0x124>

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80005482:	58 06       	cp.w	r6,0
80005484:	c2 90       	breq	800054d6 <nav_filelist_set+0xce>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80005486:	e9 63 00 2c 	st.b	r4[44],r3
8000548a:	30 06       	mov	r6,0
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
            break;
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000548c:	8e 18       	ld.sh	r8,r7[0x2]
8000548e:	58 05       	cp.w	r5,0
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
         }
      }

      if( !fat_read_dir())
80005490:	cd 90       	breq	80005442 <nav_filelist_set+0x3a>
80005492:	e0 08 19 00 	cp.h	r8,r0
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
80005496:	c4 70       	breq	80005524 <nav_filelist_set+0x11c>
80005498:	2f f8       	sub	r8,-1
8000549a:	ae 18       	st.h	r7[0x2],r8
8000549c:	fe b0 f6 fa 	rcall	80004290 <fat_read_dir>
800054a0:	ce b0       	breq	80005476 <nav_filelist_set+0x6e>
800054a2:	e9 38 00 2c 	ld.ub	r8,r4[44]
         {
           // HERE, the file entry match with the type seached

           if( b_find_last_entry )
800054a6:	e6 08 18 00 	cp.b	r8,r3
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
800054aa:	5f 1c       	srne	r12
800054ac:	fe b0 ec 5c 	rcall	80002d64 <fat_entry_check>
              fs_g_nav.u16_pos_sel_file++;
           else
              fs_g_nav.u16_pos_sel_file--;
800054b0:	c2 80       	breq	80005500 <nav_filelist_set+0xf8>
800054b2:	58 06       	cp.w	r6,0
800054b4:	ce c1       	brne	8000548c <nav_filelist_set+0x84>
800054b6:	58 05       	cp.w	r5,0
800054b8:	c4 71       	brne	80005546 <nav_filelist_set+0x13e>

           if (0 == u16_nb)
800054ba:	e0 69 15 40 	mov	r9,5440
800054be:	f3 08 00 24 	ld.sh	r8,r9[36]
           {
              // It is the end of move then update file information
              fat_get_entry_info();
              return true;         // NB FILE FIND
           }
           u16_nb--;
800054c2:	20 18       	sub	r8,1
800054c4:	f3 58 00 24 	st.h	r9[36],r8
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
            continue;
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
800054c8:	40 08       	lddsp	r8,sp[0x0]
800054ca:	58 08       	cp.w	r8,0
800054cc:	c4 70       	breq	8000555a <nav_filelist_set+0x152>
800054ce:	20 18       	sub	r8,1
800054d0:	5c 88       	casts.h	r8
800054d2:	50 08       	stdsp	sp[0x0],r8
800054d4:	cd cb       	rjmp	8000548c <nav_filelist_set+0x84>
800054d6:	e9 38 00 2c 	ld.ub	r8,r4[44]
800054da:	30 19       	mov	r9,1
800054dc:	f2 08 18 00 	cp.b	r8,r9
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
            break;                        // end of search
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
800054e0:	c4 60       	breq	8000556c <nav_filelist_set+0x164>
            fs_g_nav.b_mode_nav = FS_FILE;
800054e2:	e0 69 15 40 	mov	r9,5440
800054e6:	f3 38 00 2d 	ld.ub	r8,r9[45]
800054ea:	e6 08 18 00 	cp.b	r8,r3
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800054ee:	c3 f1       	brne	8000556c <nav_filelist_set+0x164>
800054f0:	3f f8       	mov	r8,-1
800054f2:	e0 69 15 40 	mov	r9,5440
800054f6:	ae 18       	st.h	r7[0x2],r8
800054f8:	30 18       	mov	r8,1
800054fa:	f3 68 00 2c 	st.b	r9[44],r8
800054fe:	cc 7b       	rjmp	8000548c <nav_filelist_set+0x84>
80005500:	30 aa       	mov	r10,10
80005502:	03 88       	ld.ub	r8,r1[0x0]
80005504:	e4 08 18 00 	cp.b	r8,r2
80005508:	5f 09       	sreq	r9
               break;
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
8000550a:	f4 08 18 00 	cp.b	r8,r10
8000550e:	5f 08       	sreq	r8
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
80005510:	e0 6a 15 90 	mov	r10,5520
80005514:	10 49       	or	r9,r8
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
80005516:	e6 09 18 00 	cp.b	r9,r3
8000551a:	cb 90       	breq	8000548c <nav_filelist_set+0x84>
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000551c:	cb 3b       	rjmp	80005482 <nav_filelist_set+0x7a>
8000551e:	20 18       	sub	r8,1
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
80005520:	ae 18       	st.h	r7[0x2],r8
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80005522:	ca 7b       	rjmp	80005470 <nav_filelist_set+0x68>
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
80005524:	30 89       	mov	r9,8
80005526:	e0 68 15 90 	mov	r8,5520
8000552a:	b0 89       	st.b	r8[0x0],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
   return false;
}
8000552c:	40 19       	lddsp	r9,sp[0x4]
8000552e:	40 28       	lddsp	r8,sp[0x8]
           if( b_find_last_entry )
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
80005530:	ae 19       	st.h	r7[0x2],r9
80005532:	e9 58 00 24 	st.h	r4[36],r8
80005536:	40 39       	lddsp	r9,sp[0xc]
80005538:	30 0c       	mov	r12,0
8000553a:	58 09       	cp.w	r9,0
           else
              fs_g_nav.u16_pos_sel_file--;

           if (0 == u16_nb)
8000553c:	5f 18       	srne	r8
8000553e:	e9 68 00 2c 	st.b	r4[44],r8
           {
              // It is the end of move then update file information
              fat_get_entry_info();
80005542:	2f cd       	sub	sp,-16
80005544:	d8 32       	popm	r0-r7,pc
80005546:	e0 69 15 40 	mov	r9,5440
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
8000554a:	f3 08 00 24 	ld.sh	r8,r9[36]
8000554e:	2f f8       	sub	r8,-1
               break;
80005550:	f3 58 00 24 	st.h	r9[36],r8
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
80005554:	40 08       	lddsp	r8,sp[0x0]
            break;                        // end of search
80005556:	58 08       	cp.w	r8,0
80005558:	cb b1       	brne	800054ce <nav_filelist_set+0xc6>
8000555a:	fe b0 ec 31 	rcall	80002dbc <fat_get_entry_info>
8000555e:	2f cd       	sub	sp,-16
80005560:	da 3a       	popm	r0-r7,pc,r12=1
80005562:	30 99       	mov	r9,9
80005564:	e0 68 15 90 	mov	r8,5520
80005568:	b0 89       	st.b	r8[0x0],r9
8000556a:	ce 1b       	rjmp	8000552c <nav_filelist_set+0x124>
8000556c:	30 98       	mov	r8,9
8000556e:	b4 88       	st.b	r10[0x0],r8
80005570:	cd eb       	rjmp	8000552c <nav_filelist_set+0x124>
80005572:	d7 03       	nop

80005574 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80005574:	eb cd 40 c0 	pushm	r6-r7,lr
80005578:	18 96       	mov	r6,r12
8000557a:	16 97       	mov	r7,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000557c:	30 1b       	mov	r11,1
8000557e:	30 0c       	mov	r12,0
80005580:	c4 4f       	rcall	80005408 <nav_filelist_set>
80005582:	c0 80       	breq	80005592 <nav_filelist_findname+0x1e>
80005584:	30 0a       	mov	r10,0
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80005586:	0e 99       	mov	r9,r7
80005588:	14 9b       	mov	r11,r10
8000558a:	0c 9c       	mov	r12,r6
8000558c:	cd 8e       	rcall	8000533c <nav_file_name>
8000558e:	cf 70       	breq	8000557c <nav_filelist_findname+0x8>
80005590:	30 1c       	mov	r12,1
80005592:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         return true;
   }
}
80005596:	d7 03       	nop

80005598 <nav_filelist_reset>:
80005598:	d4 01       	pushm	lr
8000559a:	fe b0 f2 c1 	rcall	80003b1c <fat_check_mount_noopen>
8000559e:	c0 40       	breq	800055a6 <nav_filelist_reset+0xe>
800055a0:	fe b0 ec 44 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800055a4:	30 1c       	mov	r12,1
   return true;
}
800055a6:	d8 02       	popm	pc

800055a8 <nav_dir_gotoparent>:
800055a8:	eb cd 40 e0 	pushm	r5-r7,lr
800055ac:	fe b0 f2 b8 	rcall	80003b1c <fat_check_mount_noopen>
//!
bool  nav_dir_gotoparent( void )
{
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800055b0:	c1 30       	breq	800055d6 <nav_dir_gotoparent+0x2e>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800055b2:	e0 65 15 40 	mov	r5,5440
800055b6:	6a 8c       	ld.w	r12,r5[0x20]
800055b8:	58 0c       	cp.w	r12,0
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800055ba:	c0 71       	brne	800055c8 <nav_dir_gotoparent+0x20>
800055bc:	31 99       	mov	r9,25
800055be:	e0 68 15 90 	mov	r8,5520
      return false;
800055c2:	b0 89       	st.b	r8[0x0],r9
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800055c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800055c8:	30 19       	mov	r9,1
   if ( !fat_read_dir())
800055ca:	e0 68 15 8c 	mov	r8,5516
800055ce:	b0 19       	st.h	r8[0x2],r9
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
   return false;
800055d0:	fe b0 f6 60 	rcall	80004290 <fat_read_dir>

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
   if ( !fat_read_dir())
      return false;
   fat_get_entry_info();
800055d4:	c0 31       	brne	800055da <nav_dir_gotoparent+0x32>
800055d6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800055da:	fe b0 eb f1 	rcall	80002dbc <fat_get_entry_info>
800055de:	e0 67 13 00 	mov	r7,4864

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
800055e2:	6e 18       	ld.w	r8,r7[0x4]
800055e4:	6a 86       	ld.w	r6,r5[0x20]
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
800055e6:	8b 88       	st.w	r5[0x20],r8
800055e8:	cd 8f       	rcall	80005598 <nav_filelist_reset>
800055ea:	cf 60       	breq	800055d6 <nav_dir_gotoparent+0x2e>
800055ec:	eb 39 00 2d 	ld.ub	r9,r5[45]
800055f0:	30 08       	mov	r8,0
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800055f2:	f0 09 18 00 	cp.b	r9,r8
800055f6:	c0 a1       	brne	8000560a <nav_dir_gotoparent+0x62>
800055f8:	30 1b       	mov	r11,1
800055fa:	30 0c       	mov	r12,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
800055fc:	c0 6f       	rcall	80005408 <nav_filelist_set>
800055fe:	c0 c0       	breq	80005616 <nav_dir_gotoparent+0x6e>
80005600:	6e 18       	ld.w	r8,r7[0x4]
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
   return false;
80005602:	0c 38       	cp.w	r8,r6
80005604:	cf a1       	brne	800055f8 <nav_dir_gotoparent+0x50>
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80005606:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000560a:	eb 39 00 2c 	ld.ub	r9,r5[44]
8000560e:	f0 09 18 00 	cp.b	r9,r8
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
80005612:	cf 30       	breq	800055f8 <nav_dir_gotoparent+0x50>
80005614:	cf 9b       	rjmp	80005606 <nav_dir_gotoparent+0x5e>
80005616:	30 89       	mov	r9,8
   return false;
80005618:	e0 68 15 90 	mov	r8,5520
8000561c:	b0 89       	st.b	r8[0x0],r9
8000561e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005622:	d7 03       	nop

80005624 <nav_dir_name>:
80005624:	d4 31       	pushm	r0-r7,lr
80005626:	20 4d       	sub	sp,16
80005628:	18 91       	mov	r1,r12
8000562a:	16 90       	mov	r0,r11
8000562c:	fe b0 f2 78 	rcall	80003b1c <fat_check_mount_noopen>
80005630:	c0 f0       	breq	8000564e <nav_dir_name+0x2a>
80005632:	e0 67 15 40 	mov	r7,5440
80005636:	6e 86       	ld.w	r6,r7[0x20]
80005638:	58 06       	cp.w	r6,0
8000563a:	c3 51       	brne	800056a4 <nav_dir_name+0x80>
8000563c:	e0 68 15 91 	mov	r8,5521
      fs_g_nav_entry.u32_size             = save_u32_size              ;
   }
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
80005640:	11 88       	ld.ub	r8,r8[0x0]
80005642:	ec 08 18 00 	cp.b	r8,r6
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
80005646:	c0 60       	breq	80005652 <nav_dir_name+0x2e>
80005648:	30 38       	mov	r8,3
      }
      status = true;

   }
   return status;
}
8000564a:	30 1c       	mov	r12,1
8000564c:	a2 08       	st.h	r1[0x0],r8
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
8000564e:	2f cd       	sub	sp,-16
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
80005650:	d8 32       	popm	r0-r7,pc
80005652:	10 9a       	mov	r10,r8
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
80005654:	2f f1       	sub	r1,-1
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
80005656:	30 18       	mov	r8,1
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
80005658:	30 2c       	mov	r12,2
8000565a:	3f f6       	mov	r6,-1
8000565c:	10 9b       	mov	r11,r8
8000565e:	f0 c9 00 01 	sub	r9,r8,1
80005662:	f4 09 18 00 	cp.b	r9,r10
80005666:	c1 80       	breq	80005696 <nav_dir_name+0x72>
80005668:	f6 09 18 00 	cp.b	r9,r11
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
8000566c:	c0 a0       	breq	80005680 <nav_dir_name+0x5c>
8000566e:	30 09       	mov	r9,0
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
80005670:	e3 69 ff ff 	st.b	r1[-1],r9
80005674:	f8 08 18 00 	cp.b	r8,r12
80005678:	e0 88 00 07 	brls	80005686 <nav_dir_name+0x62>
8000567c:	2f cd       	sub	sp,-16
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
8000567e:	da 3a       	popm	r0-r7,pc,r12=1
80005680:	33 a9       	mov	r9,58
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
80005682:	e3 69 ff ff 	st.b	r1[-1],r9
80005686:	2f f8       	sub	r8,-1
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
80005688:	2f f1       	sub	r1,-1
8000568a:	5c 58       	castu.b	r8
8000568c:	f0 c9 00 01 	sub	r9,r8,1
80005690:	f4 09 18 00 	cp.b	r9,r10
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
80005694:	ce a1       	brne	80005668 <nav_dir_name+0x44>
80005696:	0f 89       	ld.ub	r9,r7[0x0]
80005698:	ec 09 18 00 	cp.b	r9,r6
      return 'X';
#if (FS_MULTI_PARTITION  ==  true)
   return ('A' + (fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return ('A' + fs_g_nav.u8_lun);
8000569c:	c2 a0       	breq	800056f0 <nav_dir_name+0xcc>
8000569e:	2b f9       	sub	r9,-65
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800056a0:	5c 59       	castu.b	r9
800056a2:	cf 0b       	rjmp	80005682 <nav_dir_name+0x5e>
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
800056a4:	ef 3a 00 2d 	ld.ub	r10,r7[45]
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800056a8:	ef 38 00 2c 	ld.ub	r8,r7[44]
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
800056ac:	30 09       	mov	r9,0
800056ae:	f2 08 18 00 	cp.b	r8,r9
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800056b2:	5f 18       	srne	r8
800056b4:	f2 0a 18 00 	cp.b	r10,r9
   if (0 != fs_g_nav.u32_cluster_sel_dir)
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
800056b8:	5f 19       	srne	r9
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
800056ba:	30 1a       	mov	r10,1
800056bc:	e0 65 13 00 	mov	r5,4864
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
800056c0:	ef 6a 00 2c 	st.b	r7[44],r10
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
800056c4:	ef 6a 00 2d 	st.b	r7[45],r10
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
800056c8:	6a 1a       	ld.w	r10,r5[0x4]
800056ca:	50 3a       	stdsp	sp[0xc],r10
      return false;

   if (0 != fs_g_nav.u32_cluster_sel_dir)
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
800056cc:	6a 2a       	ld.w	r10,r5[0x8]
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
800056ce:	50 09       	stdsp	sp[0x0],r9
      return false;

   if (0 != fs_g_nav.u32_cluster_sel_dir)
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
800056d0:	50 18       	stdsp	sp[0x4],r8
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
      save_u32_size              = fs_g_nav_entry.u32_size             ;
800056d2:	e0 64 15 8c 	mov	r4,5516
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
800056d6:	0b a2       	ld.ub	r2,r5[0x2]
800056d8:	88 13       	ld.sh	r3,r4[0x2]
800056da:	50 2a       	stdsp	sp[0x8],r10
800056dc:	c6 6f       	rcall	800055a8 <nav_dir_gotoparent>
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
800056de:	40 09       	lddsp	r9,sp[0x0]
800056e0:	40 18       	lddsp	r8,sp[0x4]
      fs_g_nav.b_mode_nav_single = true;
      fs_g_nav.b_mode_nav = FS_FILE;
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
800056e2:	c0 91       	brne	800056f4 <nav_dir_name+0xd0>
800056e4:	ef 68 00 2c 	st.b	r7[44],r8
      }
      status = true;

   }
   return status;
}
800056e8:	ef 69 00 2d 	st.b	r7[45],r9
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
800056ec:	2f cd       	sub	sp,-16
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
         return false;
      }
      fs_g_nav.b_mode_nav_single = b_mode_nav_single_save ;
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
800056ee:	d8 32       	popm	r0-r7,pc
800056f0:	35 89       	mov	r9,88
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
800056f2:	cb fb       	rjmp	80005670 <nav_dir_name+0x4c>
800056f4:	ef 68 00 2c 	st.b	r7[44],r8
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
         return false;
      }
      fs_g_nav.b_mode_nav_single = b_mode_nav_single_save ;
800056f8:	ef 08 00 1c 	ld.sh	r8,r7[28]
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
800056fc:	ef 69 00 2d 	st.b	r7[45],r9
80005700:	a8 18       	st.h	r4[0x2],r8
80005702:	30 1a       	mov	r10,1
80005704:	00 9b       	mov	r11,r0
80005706:	02 9c       	mov	r12,r1
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
      fs_g_nav_entry.u32_size             = save_u32_size              ;
80005708:	30 09       	mov	r9,0
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
8000570a:	c1 9e       	rcall	8000533c <nav_file_name>
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
8000570c:	40 28       	lddsp	r8,sp[0x8]
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
8000570e:	40 3a       	lddsp	r10,sp[0xc]
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
      fs_g_nav_entry.u32_size             = save_u32_size              ;
80005710:	a8 13       	st.h	r4[0x2],r3
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
80005712:	8f 86       	st.w	r7[0x20],r6
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
80005714:	8b 28       	st.w	r5[0x8],r8
80005716:	aa a2       	st.b	r5[0x2],r2
80005718:	8b 1a       	st.w	r5[0x4],r10
8000571a:	c9 ab       	rjmp	8000564e <nav_dir_name+0x2a>

8000571c <nav_partition_mount>:
8000571c:	d4 01       	pushm	lr
8000571e:	fe b0 ef 9f 	rcall	8000365c <fat_check_noopen>
80005722:	c0 a0       	breq	80005736 <nav_partition_mount+0x1a>
80005724:	e0 68 15 8c 	mov	r8,5516
80005728:	11 89       	ld.ub	r9,r8[0x0]
8000572a:	30 08       	mov	r8,0
8000572c:	f0 09 18 00 	cp.b	r9,r8
80005730:	c0 41       	brne	80005738 <nav_partition_mount+0x1c>
80005732:	fe b0 f8 8d 	rcall	8000484c <fat_mount>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
80005736:	d8 02       	popm	pc
80005738:	30 09       	mov	r9,0
8000573a:	e0 68 15 40 	mov	r8,5440
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
8000573e:	91 89       	st.w	r8[0x20],r9
80005740:	fe b0 eb 74 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
80005744:	da 0a       	popm	pc,r12=1
80005746:	d7 03       	nop

80005748 <nav_drive_set>:
80005748:	eb cd 40 80 	pushm	r7,lr
8000574c:	18 97       	mov	r7,r12
8000574e:	fe b0 ef 87 	rcall	8000365c <fat_check_noopen>
80005752:	c0 31       	brne	80005758 <nav_drive_set+0x10>
80005754:	e3 cd 80 80 	ldm	sp++,r7,pc
bool  nav_drive_set( uint8_t u8_number )
{
   if ( !fat_check_noopen() )
      return false;

   if (u8_number >= get_nb_lun() )
80005758:	e0 a0 0d 30 	rcall	800071b8 <get_nb_lun>
8000575c:	ee 0c 18 00 	cp.b	r12,r7
80005760:	e0 88 00 10 	brls	80005780 <nav_drive_set+0x38>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80005764:	e0 68 15 40 	mov	r8,5440
80005768:	11 89       	ld.ub	r9,r8[0x0]
8000576a:	ee 09 18 00 	cp.b	r9,r7
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
8000576e:	c1 00       	breq	8000578e <nav_drive_set+0x46>
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005770:	b0 87       	st.b	r8[0x0],r7
80005772:	30 09       	mov	r9,0
80005774:	e0 68 15 8c 	mov	r8,5516
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80005778:	30 1c       	mov	r12,1
8000577a:	b0 89       	st.b	r8[0x0],r9
   if ( !fat_check_noopen() )
      return false;

   if (u8_number >= get_nb_lun() )
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000577c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005780:	30 69       	mov	r9,6
80005782:	e0 68 15 90 	mov	r8,5520
      return false;
80005786:	30 0c       	mov	r12,0
   }

   if ( fs_g_nav.u8_lun == u8_number)
80005788:	b0 89       	st.b	r8[0x0],r9
8000578a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000578e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80005792:	d7 03       	nop

80005794 <nav_drive_nb>:
80005794:	d4 01       	pushm	lr
80005796:	e0 a0 0d 11 	rcall	800071b8 <get_nb_lun>
8000579a:	d8 02       	popm	pc

8000579c <nav_dir_root>:
8000579c:	d4 01       	pushm	lr
8000579e:	fe b0 ef 5f 	rcall	8000365c <fat_check_noopen>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
   if ( !fat_check_noopen() )
800057a2:	c0 a0       	breq	800057b6 <nav_dir_root+0x1a>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800057a4:	e0 68 15 8c 	mov	r8,5516
800057a8:	11 89       	ld.ub	r9,r8[0x0]
800057aa:	30 08       	mov	r8,0
800057ac:	f0 09 18 00 	cp.b	r9,r8
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
      return true;
   }

   return fat_mount();
800057b0:	c0 41       	brne	800057b8 <nav_dir_root+0x1c>
800057b2:	fe b0 f8 4d 	rcall	8000484c <fat_mount>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
800057b6:	d8 02       	popm	pc
800057b8:	30 09       	mov	r9,0
800057ba:	e0 68 15 40 	mov	r8,5440
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
800057be:	91 89       	st.w	r8[0x20],r9
800057c0:	fe b0 eb 34 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
800057c4:	da 0a       	popm	pc,r12=1
800057c6:	d7 03       	nop

800057c8 <nav_reset>:
800057c8:	eb cd 40 fc 	pushm	r2-r7,lr
800057cc:	e0 68 15 91 	mov	r8,5521
800057d0:	30 07       	mov	r7,0
800057d2:	b0 87       	st.b	r8[0x0],r7
800057d4:	e0 68 13 12 	mov	r8,4882
   g_b_unicode = true;
#endif
   g_b_string_length = false;
   g_b_no_check_disk = false;

   fat_cache_reset();
800057d8:	b0 87       	st.b	r8[0x0],r7
   fat_cache_clusterlist_reset();
800057da:	fe b0 ed 8d 	rcall	800032f4 <fat_cache_reset>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
800057de:	fe b0 ea 69 	rcall	80002cb0 <fat_cache_clusterlist_reset>
800057e2:	e0 66 16 08 	mov	r6,5640
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
800057e6:	0d 8c       	ld.ub	r12,r6[0x0]
800057e8:	58 0c       	cp.w	r12,0
      fat_invert_nav( u8_idnav );               // Select new navigator
800057ea:	c0 70       	breq	800057f8 <nav_reset+0x30>
800057ec:	fe b0 ed 94 	rcall	80003314 <fat_invert_nav>
      fs_g_u8_nav_selected = u8_idnav;
800057f0:	30 0c       	mov	r12,0
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800057f2:	fe b0 ed 91 	rcall	80003314 <fat_invert_nav>
800057f6:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
800057f8:	30 07       	mov	r7,0
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
800057fa:	e0 65 15 40 	mov	r5,5440
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
800057fe:	e0 62 15 8c 	mov	r2,5516
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005802:	3f f3       	mov	r3,-1
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80005804:	e0 64 13 00 	mov	r4,4864
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80005808:	0d 8c       	ld.ub	r12,r6[0x0]
8000580a:	eb 67 00 2d 	st.b	r5[45],r7
      fat_invert_nav( u8_idnav );               // Select new navigator
8000580e:	a4 87       	st.b	r2[0x0],r7
80005810:	aa 83       	st.b	r5[0x0],r3
#endif
      Fat_file_close();                            // By default no file is opened
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80005812:	a8 87       	st.b	r4[0x0],r7
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005814:	fe b0 ed 80 	rcall	80003314 <fat_invert_nav>
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80005818:	30 1c       	mov	r12,1
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
8000581a:	fe b0 ed 7d 	rcall	80003314 <fat_invert_nav>
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000581e:	ac 87       	st.b	r6[0x0],r7
80005820:	a4 87       	st.b	r2[0x0],r7
80005822:	aa 83       	st.b	r5[0x0],r3
80005824:	a8 87       	st.b	r4[0x0],r7
80005826:	eb 67 00 2d 	st.b	r5[45],r7
8000582a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000582e:	d7 03       	nop

80005830 <nav_file_create>:
80005830:	eb cd 40 c0 	pushm	r6-r7,lr
80005834:	18 97       	mov	r7,r12
80005836:	fe b0 f1 73 	rcall	80003b1c <fat_check_mount_noopen>
8000583a:	c0 31       	brne	80005840 <nav_file_create+0x10>
8000583c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005840:	fe b0 ea f4 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
80005844:	30 1b       	mov	r11,1
80005846:	30 0c       	mov	r12,0
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80005848:	fe b0 fd e0 	rcall	80005408 <nav_filelist_set>
8000584c:	18 96       	mov	r6,r12
8000584e:	c0 f0       	breq	8000586c <nav_file_create+0x3c>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80005850:	30 09       	mov	r9,0
80005852:	0e 9c       	mov	r12,r7
80005854:	12 9a       	mov	r10,r9
80005856:	12 9b       	mov	r11,r9
80005858:	fe b0 fd 72 	rcall	8000533c <nav_file_name>
8000585c:	cf 40       	breq	80005844 <nav_file_create+0x14>
   // Check if the name already exists
   if (!nav_filelist_reset())
      return false;
   if (nav_filelist_findname(sz_name , false))
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000585e:	32 a9       	mov	r9,42
80005860:	e0 68 15 90 	mov	r8,5520
80005864:	30 0c       	mov	r12,0
      return false;  // File exist -> it is not possible to create this name
80005866:	b0 89       	st.b	r8[0x0],r9
80005868:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   }
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
8000586c:	0e 9c       	mov	r12,r7
8000586e:	fe b0 fc 6d 	rcall	80005148 <fat_create_entry_file_name>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
80005872:	ce 50       	breq	8000583c <nav_file_create+0xc>
   fs_g_nav_entry.u32_size    = 0;     // The size is null
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
   fs_g_nav.b_mode_nav = FS_FILE;
80005874:	e0 68 13 00 	mov	r8,4864
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
80005878:	30 19       	mov	r9,1
   fs_g_nav_entry.u32_size    = 0;     // The size is null
8000587a:	b0 a6       	st.b	r8[0x2],r6
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
8000587c:	91 16       	st.w	r8[0x4],r6
   fs_g_nav.b_mode_nav = FS_FILE;
8000587e:	91 26       	st.w	r8[0x8],r6
80005880:	e0 68 15 40 	mov	r8,5440
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
   fs_g_nav_entry.u32_size    = 0;     // The size is null
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
80005884:	f1 69 00 2c 	st.b	r8[44],r9
80005888:	f1 09 00 24 	ld.sh	r9,r8[36]
   fs_g_nav.b_mode_nav = FS_FILE;
   return fat_cache_flush();
8000588c:	2f f9       	sub	r9,-1
8000588e:	f1 59 00 24 	st.h	r8[36],r9
80005892:	fe b0 ed a5 	rcall	800033dc <fat_cache_flush>
80005896:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000589a:	d7 03       	nop

8000589c <nav_filelist_first>:
8000589c:	eb cd 40 c0 	pushm	r6-r7,lr
800058a0:	18 97       	mov	r7,r12
800058a2:	fe b0 f1 3d 	rcall	80003b1c <fat_check_mount_noopen>
800058a6:	c0 31       	brne	800058ac <nav_filelist_first+0x10>
800058a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800058ac:	fe b0 ea be 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
800058b0:	e0 66 15 40 	mov	r6,5440
800058b4:	30 1b       	mov	r11,1
800058b6:	30 0c       	mov	r12,0
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800058b8:	fe b0 fd a8 	rcall	80005408 <nav_filelist_set>
   {
      if( b_type == fs_g_nav.b_mode_nav )
800058bc:	c0 70       	breq	800058ca <nav_filelist_first+0x2e>
800058be:	ed 38 00 2c 	ld.ub	r8,r6[44]
800058c2:	10 37       	cp.w	r7,r8
800058c4:	cf 81       	brne	800058b4 <nav_filelist_first+0x18>
800058c6:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
800058ca:	30 99       	mov	r9,9
800058cc:	e0 68 15 90 	mov	r8,5520
   return false;
}
800058d0:	b0 89       	st.b	r8[0x0],r9
800058d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800058d6:	d7 03       	nop

800058d8 <nav_filelist_nb>:
800058d8:	eb cd 40 fc 	pushm	r2-r7,lr
800058dc:	e0 66 15 40 	mov	r6,5440
800058e0:	18 92       	mov	r2,r12
800058e2:	ed 03 00 24 	ld.sh	r3,r6[36]
800058e6:	fe b0 f1 1b 	rcall	80003b1c <fat_check_mount_noopen>
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
800058ea:	c0 51       	brne	800058f4 <nav_filelist_nb+0x1c>
   // Return the value asked
   if( FS_FILE == b_type )
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
800058ec:	18 94       	mov	r4,r12
800058ee:	08 9c       	mov	r12,r4
800058f0:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800058f4:	30 04       	mov	r4,0
800058f6:	fe b0 ea 99 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
800058fa:	30 15       	mov	r5,1
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800058fc:	08 97       	mov	r7,r4
800058fe:	30 1b       	mov	r11,1
80005900:	30 0c       	mov	r12,0
80005902:	fe b0 fd 83 	rcall	80005408 <nav_filelist_set>
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
80005906:	c0 e0       	breq	80005922 <nav_filelist_nb+0x4a>
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80005908:	0e 99       	mov	r9,r7
8000590a:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000590e:	2f f9       	sub	r9,-1
80005910:	ea 08 18 00 	cp.b	r8,r5
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
80005914:	c0 40       	breq	8000591c <nav_filelist_nb+0x44>
80005916:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
         u16_save_number_file++;    // It is a file
8000591a:	cf 2b       	rjmp	800058fe <nav_filelist_nb+0x26>
8000591c:	2f f4       	sub	r4,-1
8000591e:	5c 84       	casts.h	r4
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
80005920:	ce fb       	rjmp	800058fe <nav_filelist_nb+0x26>
80005922:	fe b0 f0 fd 	rcall	80003b1c <fat_check_mount_noopen>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80005926:	c0 30       	breq	8000592c <nav_filelist_nb+0x54>
80005928:	fe b0 ea 80 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
   if ( u16_save_position != FS_NO_SEL )
8000592c:	3f f8       	mov	r8,-1
8000592e:	f0 03 19 00 	cp.h	r3,r8
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
80005932:	c0 60       	breq	8000593e <nav_filelist_nb+0x66>
80005934:	f9 d3 c0 10 	bfextu	r12,r3,0x0,0x10
80005938:	30 1b       	mov	r11,1
8000593a:	fe b0 fd 67 	rcall	80005408 <nav_filelist_set>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000593e:	58 02       	cp.w	r2,0
80005940:	cd 71       	brne	800058ee <nav_filelist_nb+0x16>
80005942:	0e 94       	mov	r4,r7
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80005944:	5c 84       	casts.h	r4
80005946:	08 9c       	mov	r12,r4
80005948:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

8000594c <nav_filelist_last>:
8000594c:	eb cd 40 fc 	pushm	r2-r7,lr
80005950:	e0 66 15 40 	mov	r6,5440
80005954:	18 93       	mov	r3,r12
80005956:	ed 02 00 24 	ld.sh	r2,r6[36]
8000595a:	fe b0 f0 e1 	rcall	80003b1c <fat_check_mount_noopen>

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
   if( 0 == u16_nb )
   {
      fs_g_status = FS_ERR_NO_FIND;
8000595e:	c0 81       	brne	8000596e <nav_filelist_last+0x22>
80005960:	30 99       	mov	r9,9
80005962:	e0 68 15 90 	mov	r8,5520
      return false;  // NO FILE FOUND
80005966:	30 0c       	mov	r12,0
80005968:	b0 89       	st.b	r8[0x0],r9
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000596a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000596e:	30 04       	mov	r4,0
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80005970:	fe b0 ea 5c 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80005974:	30 15       	mov	r5,1
80005976:	08 97       	mov	r7,r4
80005978:	30 1b       	mov	r11,1
8000597a:	30 0c       	mov	r12,0
8000597c:	fe b0 fd 46 	rcall	80005408 <nav_filelist_set>
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80005980:	c0 e0       	breq	8000599c <nav_filelist_last+0x50>
80005982:	0e 99       	mov	r9,r7
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
80005984:	ed 38 00 2c 	ld.ub	r8,r6[44]
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80005988:	2f f9       	sub	r9,-1
8000598a:	ea 08 18 00 	cp.b	r8,r5
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
8000598e:	c0 40       	breq	80005996 <nav_filelist_last+0x4a>
80005990:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
         u16_save_number_file++;    // It is a file
80005994:	cf 2b       	rjmp	80005978 <nav_filelist_last+0x2c>
80005996:	2f f4       	sub	r4,-1
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
80005998:	5c 84       	casts.h	r4
8000599a:	ce fb       	rjmp	80005978 <nav_filelist_last+0x2c>
8000599c:	fe b0 f0 c0 	rcall	80003b1c <fat_check_mount_noopen>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800059a0:	c0 30       	breq	800059a6 <nav_filelist_last+0x5a>
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
   if ( u16_save_position != FS_NO_SEL )
800059a2:	fe b0 ea 43 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
800059a6:	3f f8       	mov	r8,-1
800059a8:	f0 02 19 00 	cp.h	r2,r8
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
800059ac:	c0 60       	breq	800059b8 <nav_filelist_last+0x6c>
800059ae:	f9 d2 c0 10 	bfextu	r12,r2,0x0,0x10
800059b2:	30 1b       	mov	r11,1
   }
   // Return the value asked
   if( FS_FILE == b_type )
800059b4:	fe b0 fd 2a 	rcall	80005408 <nav_filelist_set>
800059b8:	58 03       	cp.w	r3,0
800059ba:	c0 31       	brne	800059c0 <nav_filelist_last+0x74>
{
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
   if( 0 == u16_nb )
800059bc:	0e 94       	mov	r4,r7
800059be:	5c 84       	casts.h	r4
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
   if ( !fat_check_mount_noopen())
800059c0:	58 04       	cp.w	r4,0
800059c2:	cc f0       	breq	80005960 <nav_filelist_last+0x14>
800059c4:	fe b0 f0 ac 	rcall	80003b1c <fat_check_mount_noopen>
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
}
800059c8:	c0 31       	brne	800059ce <nav_filelist_last+0x82>
{
   if ( !fat_check_mount_noopen())
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800059ca:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800059ce:	fe b0 ea 2d 	rcall	80002e28 <fat_clear_entry_info_and_ptr>
800059d2:	30 1b       	mov	r11,1
800059d4:	30 0c       	mov	r12,0
800059d6:	fe b0 fd 19 	rcall	80005408 <nav_filelist_set>
   {
      if( b_type == fs_g_nav.b_mode_nav )
800059da:	c1 30       	breq	80005a00 <nav_filelist_last+0xb4>
800059dc:	ed 38 00 2c 	ld.ub	r8,r6[44]
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
800059e0:	10 33       	cp.w	r3,r8
800059e2:	cf 81       	brne	800059d2 <nav_filelist_last+0x86>
800059e4:	30 18       	mov	r8,1
800059e6:	f0 04 19 00 	cp.h	r4,r8
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
800059ea:	c0 90       	breq	800059fc <nav_filelist_last+0xb0>
800059ec:	08 9c       	mov	r12,r4
800059ee:	30 1b       	mov	r11,1
800059f0:	20 2c       	sub	r12,2
800059f2:	5c 7c       	castu.h	r12
}
800059f4:	fe b0 fd 0a 	rcall	80005408 <nav_filelist_set>
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
800059f8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
800059fc:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005a00:	30 99       	mov	r9,9
80005a02:	e0 68 15 90 	mov	r8,5520
80005a06:	b0 89       	st.b	r8[0x0],r9
80005a08:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

80005a0c <nav_dir_make>:
80005a0c:	eb cd 40 c0 	pushm	r6-r7,lr
80005a10:	18 97       	mov	r7,r12
80005a12:	fe b0 f0 85 	rcall	80003b1c <fat_check_mount_noopen>
80005a16:	c0 31       	brne	80005a1c <nav_dir_make+0x10>
80005a18:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
{
   if ( !fat_check_mount_noopen())
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80005a1c:	0e 9c       	mov	r12,r7
80005a1e:	c0 9f       	rcall	80005830 <nav_file_create>
80005a20:	cf c0       	breq	80005a18 <nav_dir_make+0xc>
80005a22:	3f f8       	mov	r8,-1
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
80005a24:	e0 67 15 e8 	mov	r7,5608
80005a28:	ae 88       	st.b	r7[0x0],r8
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80005a2a:	30 18       	mov	r8,1
80005a2c:	8f 18       	st.w	r7[0x4],r8
   if ( !fat_allocfreespace())
80005a2e:	fe b0 fa 3d 	rcall	80004ea8 <fat_allocfreespace>
80005a32:	18 96       	mov	r6,r12
80005a34:	c1 80       	breq	80005a64 <nav_dir_make+0x58>
      fat_cache_flush();
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
80005a36:	6e 09       	ld.w	r9,r7[0x0]
80005a38:	e0 68 13 00 	mov	r8,4864
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
80005a3c:	91 19       	st.w	r8[0x4],r9
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80005a3e:	31 09       	mov	r9,16
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
80005a40:	30 07       	mov	r7,0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80005a42:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
80005a44:	91 27       	st.w	r8[0x8],r7
80005a46:	fe b0 f9 5d 	rcall	80004d00 <fat_initialize_dir>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
80005a4a:	ce 70       	breq	80005a18 <nav_dir_make+0xc>
80005a4c:	fe b0 f4 22 	rcall	80004290 <fat_read_dir>
      return false;
   fat_write_entry_file();
80005a50:	ce 40       	breq	80005a18 <nav_dir_make+0xc>
80005a52:	fe b0 ea 01 	rcall	80002e54 <fat_write_entry_file>
   if( !fat_cache_flush())
80005a56:	fe b0 ec c3 	rcall	800033dc <fat_cache_flush>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
80005a5a:	cd f0       	breq	80005a18 <nav_dir_make+0xc>
80005a5c:	0e 9c       	mov	r12,r7
80005a5e:	c7 7f       	rcall	8000594c <nav_filelist_last>
80005a60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
   if ( !fat_allocfreespace())
   {
      fat_delete_file( false );
80005a64:	fe b0 f5 24 	rcall	800044ac <fat_delete_file>
      fat_cache_flush();
80005a68:	fe b0 ec ba 	rcall	800033dc <fat_cache_flush>
80005a6c:	0c 9c       	mov	r12,r6
      return false;
80005a6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005a72:	d7 03       	nop

80005a74 <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
80005a74:	d4 01       	pushm	lr


void print_char(volatile avr32_usart_t *usart, int c)
{
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
80005a76:	18 9b       	mov	r11,r12
80005a78:	fe 7c 18 00 	mov	r12,-59392
80005a7c:	fe b0 e8 1c 	rcall	80002ab4 <usart_putchar>

void print_dbg_char(int c)
{
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
}
80005a80:	d8 02       	popm	pc
80005a82:	d7 03       	nop

80005a84 <print_dbg_ulong>:
80005a84:	eb cd 40 c0 	pushm	r6-r7,lr


void print_dbg_ulong(unsigned long n)
{
80005a88:	20 3d       	sub	sp,12
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80005a8a:	30 08       	mov	r8,0
80005a8c:	30 a9       	mov	r9,10
80005a8e:	fb 68 00 0a 	st.b	sp[10],r8
80005a92:	1a 9b       	mov	r11,sp
  do
  {
    tmp[--i] = '0' + n % 10;
80005a94:	e0 6e cc cd 	mov	lr,52429
80005a98:	ea 1e cc cc 	orh	lr,0xcccc
80005a9c:	f8 0e 06 46 	mulu.d	r6,r12,lr
80005aa0:	20 19       	sub	r9,1
80005aa2:	0e 98       	mov	r8,r7
80005aa4:	a3 98       	lsr	r8,0x3
80005aa6:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80005aaa:	f8 0a 01 1c 	sub	r12,r12,r10<<0x1
80005aae:	2d 0c       	sub	r12,-48
80005ab0:	f6 09 0b 0c 	st.b	r11[r9],r12
    n /= 10;
80005ab4:	10 9c       	mov	r12,r8
  } while (n);
80005ab6:	58 08       	cp.w	r8,0
80005ab8:	cf 21       	brne	80005a9c <print_dbg_ulong+0x18>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80005aba:	12 0b       	add	r11,r9
80005abc:	fe 7c 18 00 	mov	r12,-59392
80005ac0:	fe b0 e8 08 	rcall	80002ad0 <usart_write_line>

void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
}
80005ac4:	2f dd       	sub	sp,-12
80005ac6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005aca:	d7 03       	nop

80005acc <print_dbg>:
80005acc:	d4 01       	pushm	lr
80005ace:	18 9b       	mov	r11,r12


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80005ad0:	fe 7c 18 00 	mov	r12,-59392
80005ad4:	fe b0 e7 fe 	rcall	80002ad0 <usart_write_line>

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
80005ad8:	d8 02       	popm	pc
80005ada:	d7 03       	nop

80005adc <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80005adc:	eb cd 40 c0 	pushm	r6-r7,lr
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
80005ae0:	e0 69 18 22 	mov	r9,6178
80005ae4:	e0 68 18 24 	mov	r8,6180
80005ae8:	13 8b       	ld.ub	r11,r9[0x0]
80005aea:	11 dc       	ld.ub	r12,r8[0x5]
80005aec:	30 39       	mov	r9,3
80005aee:	f2 0b 18 00 	cp.b	r11,r9
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80005af2:	c4 60       	breq	80005b7e <sd_mmc_spi_get_capacity+0xa2>
80005af4:	11 fe       	ld.ub	lr,r8[0x7]
80005af6:	f1 37 00 08 	ld.ub	r7,r8[8]
80005afa:	a7 87       	lsr	r7,0x6
80005afc:	ee 0e 00 27 	add	r7,r7,lr<<0x2
80005b00:	11 ee       	ld.ub	lr,r8[0x6]
80005b02:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
    capacity = (uint64_t)c_size << 19;
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80005b06:	ab 6e       	lsl	lr,0xa
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80005b08:	f1 39 00 0a 	ld.ub	r9,r8[10]
80005b0c:	1c 07       	add	r7,lr
80005b0e:	f2 06 16 07 	lsr	r6,r9,0x7
80005b12:	2f f7       	sub	r7,-1
80005b14:	f1 3e 00 09 	ld.ub	lr,r8[9]
80005b18:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80005b1c:	ec 0e 00 1e 	add	lr,r6,lr<<0x1
80005b20:	2f ee       	sub	lr,-2
80005b22:	ee 0e 09 4e 	lsl	lr,r7,lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80005b26:	20 1e       	sub	lr,1
80005b28:	e0 6a 18 1c 	mov	r10,6172
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80005b2c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80005b30:	95 0e       	st.w	r10[0x0],lr
80005b32:	74 0e       	ld.w	lr,r10[0x0]
80005b34:	2f fe       	sub	lr,-1
80005b36:	fc 0c 09 4e 	lsl	lr,lr,r12
80005b3a:	1c 96       	mov	r6,lr
80005b3c:	30 0e       	mov	lr,0
80005b3e:	1c 97       	mov	r7,lr
    capacity_mult = 0;
80005b40:	e0 6e 18 10 	mov	lr,6160
80005b44:	fc e7 00 00 	st.d	lr[0],r6
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
80005b48:	e0 67 18 18 	mov	r7,6168
80005b4c:	30 0e       	mov	lr,0
80005b4e:	ae 0e       	st.h	r7[0x0],lr
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80005b50:	30 97       	mov	r7,9
80005b52:	ee 0c 18 00 	cp.b	r12,r7
80005b56:	e0 88 00 07 	brls	80005b64 <sd_mmc_spi_get_capacity+0x88>
    }
  }
  if (card_type == MMC_CARD)
80005b5a:	74 0e       	ld.w	lr,r10[0x0]
80005b5c:	20 9c       	sub	r12,9
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80005b5e:	fc 0c 09 4c 	lsl	r12,lr,r12
80005b62:	95 0c       	st.w	r10[0x0],r12
80005b64:	58 0b       	cp.w	r11,0
80005b66:	c3 51       	brne	80005bd0 <sd_mmc_spi_get_capacity+0xf4>
80005b68:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80005b6c:	f1 38 00 0b 	ld.ub	r8,r8[11]
80005b70:	f3 d9 c0 45 	bfextu	r9,r9,0x2,0x5
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80005b74:	a5 98       	lsr	r8,0x5
80005b76:	f1 ea 10 38 	or	r8,r8,r10<<0x3
80005b7a:	2f f8       	sub	r8,-1
80005b7c:	c3 28       	rjmp	80005be0 <sd_mmc_spi_get_capacity+0x104>
80005b7e:	f1 3e 00 08 	ld.ub	lr,r8[8]
80005b82:	f1 39 00 09 	ld.ub	r9,r8[9]
80005b86:	f3 ee 10 89 	or	r9,r9,lr<<0x8
    ++c_size;
80005b8a:	11 fe       	ld.ub	lr,r8[0x7]
    capacity = (uint64_t)c_size << 19;
80005b8c:	fd de c0 06 	bfextu	lr,lr,0x0,0x6
80005b90:	f3 ee 11 0e 	or	lr,r9,lr<<0x10
80005b94:	2f fe       	sub	lr,-1
80005b96:	fc 09 16 0d 	lsr	r9,lr,0xd
80005b9a:	fc 0a 15 13 	lsl	r10,lr,0x13
    capacity_mult = (c_size >> 13) & 0x01FF;
80005b9e:	e0 6c 18 10 	mov	r12,6160
80005ba2:	12 9b       	mov	r11,r9
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80005ba4:	f8 eb 00 00 	st.d	r12[0],r10
80005ba8:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80005bac:	e0 69 18 18 	mov	r9,6168
80005bb0:	b2 0a       	st.h	r9[0x0],r10
80005bb2:	f8 ea 00 00 	ld.d	r10,r12[0]
80005bb6:	92 0c       	ld.sh	r12,r9[0x0]
80005bb8:	f4 09 16 09 	lsr	r9,r10,0x9
80005bbc:	b7 7c       	lsl	r12,0x17
80005bbe:	f3 eb 11 79 	or	r9,r9,r11<<0x17
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
80005bc2:	20 19       	sub	r9,1
80005bc4:	18 09       	add	r9,r12
80005bc6:	e0 6a 18 1c 	mov	r10,6172
80005bca:	95 09       	st.w	r10[0x0],r9
80005bcc:	f1 39 00 0a 	ld.ub	r9,r8[10]
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80005bd0:	f1 38 00 0b 	ld.ub	r8,r8[11]
80005bd4:	a7 98       	lsr	r8,0x7
80005bd6:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
}
80005bda:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005bde:	30 18       	mov	r8,1
80005be0:	2f f9       	sub	r9,-1
80005be2:	b1 39       	mul	r9,r8
80005be4:	e0 68 18 1a 	mov	r8,6170
80005be8:	b0 09       	st.h	r8[0x0],r9
80005bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005bee:	d7 03       	nop

80005bf0 <sd_mmc_spi_write_close>:
80005bf0:	5e fc       	retal	r12
80005bf2:	d7 03       	nop

80005bf4 <sd_mmc_spi_read_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA read transfer
//! page programming.
//!
void sd_mmc_spi_read_close_PDCA (void)
{
80005bf4:	d4 01       	pushm	lr

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80005bf6:	e0 6b 00 ff 	mov	r11,255
80005bfa:	fe 7c 28 00 	mov	r12,-55296
80005bfe:	fe b0 e5 ee 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80005c02:	e0 6b 00 ff 	mov	r11,255
80005c06:	fe 7c 28 00 	mov	r12,-55296
80005c0a:	fe b0 e5 e8 	rcall	800027da <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80005c0e:	e0 6b 00 ff 	mov	r11,255
80005c12:	fe 7c 28 00 	mov	r12,-55296
80005c16:	fe b0 e5 e2 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80005c1a:	e0 6b 00 ff 	mov	r11,255
80005c1e:	fe 7c 28 00 	mov	r12,-55296
80005c22:	fe b0 e5 dc 	rcall	800027da <spi_write>

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80005c26:	30 1b       	mov	r11,1
80005c28:	fe 7c 28 00 	mov	r12,-55296
80005c2c:	fe b0 e5 6b 	rcall	80002702 <spi_unselectChip>

}
80005c30:	d8 02       	popm	pc
80005c32:	d7 03       	nop

80005c34 <sd_mmc_spi_wait_not_busy>:
80005c34:	d4 21       	pushm	r4-r7,lr
80005c36:	20 1d       	sub	sp,4
80005c38:	30 1b       	mov	r11,1
80005c3a:	fe 7c 28 00 	mov	r12,-55296
bool sd_mmc_spi_wait_not_busy(void)
{
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80005c3e:	fa c6 ff fe 	sub	r6,sp,-2
80005c42:	fe b0 e5 38 	rcall	800026b2 <spi_selectChip>
80005c46:	e0 65 18 34 	mov	r5,6196
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005c4a:	30 07       	mov	r7,0
80005c4c:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80005c4e:	c0 98       	rjmp	80005c60 <sd_mmc_spi_wait_not_busy+0x2c>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005c50:	1b b8       	ld.ub	r8,sp[0x3]
80005c52:	aa 88       	st.b	r5[0x0],r8
80005c54:	e8 08 18 00 	cp.b	r8,r4
  {
    retry++;
    if (retry == 200000)
80005c58:	c1 40       	breq	80005c80 <sd_mmc_spi_wait_not_busy+0x4c>
80005c5a:	e2 57 0d 40 	cp.w	r7,200000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005c5e:	c1 80       	breq	80005c8e <sd_mmc_spi_wait_not_busy+0x5a>
80005c60:	e0 6b 00 ff 	mov	r11,255
80005c64:	fe 7c 28 00 	mov	r12,-55296
80005c68:	fe b0 e5 b9 	rcall	800027da <spi_write>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005c6c:	0c 9b       	mov	r11,r6
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005c6e:	2f f7       	sub	r7,-1
80005c70:	fe 7c 28 00 	mov	r12,-55296
80005c74:	fe b0 e5 c1 	rcall	800027f6 <spi_read>
80005c78:	58 1c       	cp.w	r12,1
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80005c7a:	ce b1       	brne	80005c50 <sd_mmc_spi_wait_not_busy+0x1c>
80005c7c:	3f f8       	mov	r8,-1
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80005c7e:	aa 88       	st.b	r5[0x0],r8
80005c80:	30 1b       	mov	r11,1
80005c82:	fe 7c 28 00 	mov	r12,-55296
80005c86:	fe b0 e5 3e 	rcall	80002702 <spi_unselectChip>
80005c8a:	2f fd       	sub	sp,-4
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80005c8c:	da 2a       	popm	r4-r7,pc,r12=1
80005c8e:	30 1b       	mov	r11,1
80005c90:	fe 7c 28 00 	mov	r12,-55296
80005c94:	fe b0 e5 37 	rcall	80002702 <spi_unselectChip>
80005c98:	2f fd       	sub	sp,-4
80005c9a:	d8 2a       	popm	r4-r7,pc,r12=0

80005c9c <sd_mmc_spi_write_open>:
80005c9c:	d4 01       	pushm	lr
80005c9e:	e0 68 00 fc 	mov	r8,252
80005ca2:	a9 7c       	lsl	r12,0x9
80005ca4:	91 0c       	st.w	r8[0x0],r12
80005ca6:	cc 7f       	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80005ca8:	d8 02       	popm	pc
80005caa:	d7 03       	nop

80005cac <sd_mmc_spi_read_close>:
80005cac:	d4 01       	pushm	lr
80005cae:	cc 3f       	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
}
80005cb0:	d8 02       	popm	pc
80005cb2:	d7 03       	nop

80005cb4 <sd_mmc_spi_read_open>:
bool sd_mmc_spi_read_close (void)
{
  if (false == sd_mmc_spi_wait_not_busy())
    return false;
  return true;
}
80005cb4:	d4 01       	pushm	lr
80005cb6:	e0 68 00 fc 	mov	r8,252
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80005cba:	a9 7c       	lsl	r12,0x9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80005cbc:	91 0c       	st.w	r8[0x0],r12
80005cbe:	cb bf       	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
}
80005cc0:	d8 02       	popm	pc
80005cc2:	d7 03       	nop

80005cc4 <sd_mmc_spi_command>:
80005cc4:	eb cd 40 e0 	pushm	r5-r7,lr
80005cc8:	20 1d       	sub	sp,4
80005cca:	16 97       	mov	r7,r11
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80005ccc:	18 96       	mov	r6,r12
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80005cce:	e0 6b 00 ff 	mov	r11,255
80005cd2:	fe 7c 28 00 	mov	r12,-55296
80005cd6:	fe b0 e5 82 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80005cda:	fe 7c 28 00 	mov	r12,-55296
80005cde:	0c 9b       	mov	r11,r6
80005ce0:	a7 ab       	sbr	r11,0x6
80005ce2:	5c 5b       	castu.b	r11
80005ce4:	fe b0 e5 7b 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80005ce8:	ee 0b 16 18 	lsr	r11,r7,0x18
80005cec:	fe 7c 28 00 	mov	r12,-55296
80005cf0:	fe b0 e5 75 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg>>16);
80005cf4:	ee 0b 16 10 	lsr	r11,r7,0x10
80005cf8:	fe 7c 28 00 	mov	r12,-55296
80005cfc:	fe b0 e5 6f 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg>>8 );
80005d00:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80005d04:	fe 7c 28 00 	mov	r12,-55296
80005d08:	fe b0 e5 69 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI, arg    );
80005d0c:	0e 9b       	mov	r11,r7
80005d0e:	fe 7c 28 00 	mov	r12,-55296
80005d12:	5c 7b       	castu.h	r11
80005d14:	fe b0 e5 63 	rcall	800027da <spi_write>
  switch(command)
80005d18:	30 08       	mov	r8,0
80005d1a:	f0 06 18 00 	cp.b	r6,r8
80005d1e:	e0 80 00 ec 	breq	80005ef6 <sd_mmc_spi_command+0x232>
80005d22:	30 88       	mov	r8,8
80005d24:	f0 06 18 00 	cp.b	r6,r8
80005d28:	e0 80 00 ee 	breq	80005f04 <sd_mmc_spi_command+0x240>
         break;
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
         break;
      default:
         spi_write(SD_MMC_SPI, 0xff);
80005d2c:	e0 6b 00 ff 	mov	r11,255
80005d30:	fe 7c 28 00 	mov	r12,-55296
80005d34:	fe b0 e5 53 	rcall	800027da <spi_write>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d38:	e0 6b 00 ff 	mov	r11,255

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80005d3c:	e0 67 18 34 	mov	r7,6196
80005d40:	3f f5       	mov	r5,-1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d42:	fe 7c 28 00 	mov	r12,-55296

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80005d46:	ae 85       	st.b	r7[0x0],r5
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d48:	fe b0 e5 49 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005d4c:	fa c6 ff fe 	sub	r6,sp,-2
80005d50:	fe 7c 28 00 	mov	r12,-55296
80005d54:	0c 9b       	mov	r11,r6
80005d56:	fe b0 e5 50 	rcall	800027f6 <spi_read>
80005d5a:	58 1c       	cp.w	r12,1
80005d5c:	e0 80 00 db 	breq	80005f12 <sd_mmc_spi_command+0x24e>
     return 0xFF;
   return data_read;
80005d60:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d62:	ae 8c       	st.b	r7[0x0],r12
80005d64:	ea 0c 18 00 	cp.b	r12,r5
80005d68:	e0 81 00 c4 	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d6c:	e0 6b 00 ff 	mov	r11,255
80005d70:	fe 7c 28 00 	mov	r12,-55296
80005d74:	fe b0 e5 33 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005d78:	0c 9b       	mov	r11,r6
80005d7a:	fe 7c 28 00 	mov	r12,-55296
80005d7e:	fe b0 e5 3c 	rcall	800027f6 <spi_read>
80005d82:	58 1c       	cp.w	r12,1
80005d84:	e0 80 00 c9 	breq	80005f16 <sd_mmc_spi_command+0x252>
     return 0xFF;
   return data_read;
80005d88:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005d8a:	ae 8c       	st.b	r7[0x0],r12
80005d8c:	3f f8       	mov	r8,-1
80005d8e:	f0 0c 18 00 	cp.b	r12,r8
80005d92:	e0 81 00 af 	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005d96:	e0 6b 00 ff 	mov	r11,255
80005d9a:	fe 7c 28 00 	mov	r12,-55296
80005d9e:	fe b0 e5 1e 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005da2:	0c 9b       	mov	r11,r6
80005da4:	fe 7c 28 00 	mov	r12,-55296
80005da8:	fe b0 e5 27 	rcall	800027f6 <spi_read>
80005dac:	58 1c       	cp.w	r12,1
80005dae:	e0 80 00 b7 	breq	80005f1c <sd_mmc_spi_command+0x258>
     return 0xFF;
   return data_read;
80005db2:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005db4:	ae 8c       	st.b	r7[0x0],r12
80005db6:	3f f8       	mov	r8,-1
80005db8:	f0 0c 18 00 	cp.b	r12,r8
80005dbc:	e0 81 00 9a 	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005dc0:	e0 6b 00 ff 	mov	r11,255
80005dc4:	fe 7c 28 00 	mov	r12,-55296
80005dc8:	fe b0 e5 09 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005dcc:	0c 9b       	mov	r11,r6
80005dce:	fe 7c 28 00 	mov	r12,-55296
80005dd2:	fe b0 e5 12 	rcall	800027f6 <spi_read>
80005dd6:	58 1c       	cp.w	r12,1
80005dd8:	e0 80 00 a5 	breq	80005f22 <sd_mmc_spi_command+0x25e>
     return 0xFF;
   return data_read;
80005ddc:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005dde:	ae 8c       	st.b	r7[0x0],r12
80005de0:	3f f8       	mov	r8,-1
80005de2:	f0 0c 18 00 	cp.b	r12,r8
80005de6:	e0 81 00 85 	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005dea:	e0 6b 00 ff 	mov	r11,255
80005dee:	fe 7c 28 00 	mov	r12,-55296
80005df2:	fe b0 e4 f4 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005df6:	0c 9b       	mov	r11,r6
80005df8:	fe 7c 28 00 	mov	r12,-55296
80005dfc:	fe b0 e4 fd 	rcall	800027f6 <spi_read>
80005e00:	58 1c       	cp.w	r12,1
80005e02:	e0 80 00 93 	breq	80005f28 <sd_mmc_spi_command+0x264>
     return 0xFF;
   return data_read;
80005e06:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e08:	ae 8c       	st.b	r7[0x0],r12
80005e0a:	3f f8       	mov	r8,-1
80005e0c:	f0 0c 18 00 	cp.b	r12,r8
80005e10:	c7 01       	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005e12:	e0 6b 00 ff 	mov	r11,255
80005e16:	fe 7c 28 00 	mov	r12,-55296
80005e1a:	fe b0 e4 e0 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005e1e:	0c 9b       	mov	r11,r6
80005e20:	fe 7c 28 00 	mov	r12,-55296
80005e24:	fe b0 e4 e9 	rcall	800027f6 <spi_read>
80005e28:	58 1c       	cp.w	r12,1
80005e2a:	e0 80 00 82 	breq	80005f2e <sd_mmc_spi_command+0x26a>
     return 0xFF;
   return data_read;
80005e2e:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e30:	ae 8c       	st.b	r7[0x0],r12
80005e32:	3f f8       	mov	r8,-1
80005e34:	f0 0c 18 00 	cp.b	r12,r8
80005e38:	c5 c1       	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005e3a:	e0 6b 00 ff 	mov	r11,255
80005e3e:	fe 7c 28 00 	mov	r12,-55296
80005e42:	fe b0 e4 cc 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005e46:	0c 9b       	mov	r11,r6
80005e48:	fe 7c 28 00 	mov	r12,-55296
80005e4c:	fe b0 e4 d5 	rcall	800027f6 <spi_read>
80005e50:	58 1c       	cp.w	r12,1
80005e52:	c7 10       	breq	80005f34 <sd_mmc_spi_command+0x270>
     return 0xFF;
   return data_read;
80005e54:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e56:	ae 8c       	st.b	r7[0x0],r12
80005e58:	3f f8       	mov	r8,-1
80005e5a:	f0 0c 18 00 	cp.b	r12,r8
80005e5e:	c4 91       	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005e60:	e0 6b 00 ff 	mov	r11,255
80005e64:	fe 7c 28 00 	mov	r12,-55296
80005e68:	fe b0 e4 b9 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005e6c:	0c 9b       	mov	r11,r6
80005e6e:	fe 7c 28 00 	mov	r12,-55296
80005e72:	fe b0 e4 c2 	rcall	800027f6 <spi_read>
80005e76:	58 1c       	cp.w	r12,1
80005e78:	c6 10       	breq	80005f3a <sd_mmc_spi_command+0x276>
     return 0xFF;
   return data_read;
80005e7a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005e7c:	ae 8c       	st.b	r7[0x0],r12
80005e7e:	3f f8       	mov	r8,-1
80005e80:	f0 0c 18 00 	cp.b	r12,r8
80005e84:	c3 61       	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005e86:	e0 6b 00 ff 	mov	r11,255
80005e8a:	fe 7c 28 00 	mov	r12,-55296
80005e8e:	fe b0 e4 a6 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005e92:	0c 9b       	mov	r11,r6
80005e94:	fe 7c 28 00 	mov	r12,-55296
80005e98:	fe b0 e4 af 	rcall	800027f6 <spi_read>
80005e9c:	58 1c       	cp.w	r12,1
80005e9e:	c5 10       	breq	80005f40 <sd_mmc_spi_command+0x27c>
     return 0xFF;
   return data_read;
80005ea0:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005ea2:	ae 8c       	st.b	r7[0x0],r12
80005ea4:	3f f8       	mov	r8,-1
80005ea6:	f0 0c 18 00 	cp.b	r12,r8
80005eaa:	c2 31       	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005eac:	e0 6b 00 ff 	mov	r11,255
80005eb0:	fe 7c 28 00 	mov	r12,-55296
80005eb4:	fe b0 e4 93 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005eb8:	0c 9b       	mov	r11,r6
80005eba:	fe 7c 28 00 	mov	r12,-55296
80005ebe:	fe b0 e4 9c 	rcall	800027f6 <spi_read>
80005ec2:	58 1c       	cp.w	r12,1
80005ec4:	c4 10       	breq	80005f46 <sd_mmc_spi_command+0x282>
     return 0xFF;
   return data_read;
80005ec6:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005ec8:	ae 8c       	st.b	r7[0x0],r12
80005eca:	3f f8       	mov	r8,-1
80005ecc:	f0 0c 18 00 	cp.b	r12,r8
80005ed0:	c1 01       	brne	80005ef0 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005ed2:	e0 6b 00 ff 	mov	r11,255
80005ed6:	fe 7c 28 00 	mov	r12,-55296
80005eda:	fe b0 e4 80 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005ede:	0c 9b       	mov	r11,r6
80005ee0:	fe 7c 28 00 	mov	r12,-55296
80005ee4:	fe b0 e4 89 	rcall	800027f6 <spi_read>
80005ee8:	58 1c       	cp.w	r12,1
80005eea:	c3 10       	breq	80005f4c <sd_mmc_spi_command+0x288>
     return 0xFF;
   return data_read;
80005eec:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005eee:	ae 8c       	st.b	r7[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80005ef0:	2f fd       	sub	sp,-4
80005ef2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  spi_write(SD_MMC_SPI, arg>>8 );
  spi_write(SD_MMC_SPI, arg    );
  switch(command)
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80005ef6:	e0 6b 00 95 	mov	r11,149
80005efa:	fe 7c 28 00 	mov	r12,-55296
80005efe:	fe b0 e4 6e 	rcall	800027da <spi_write>
         break;
80005f02:	c1 bb       	rjmp	80005d38 <sd_mmc_spi_command+0x74>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
80005f04:	e0 6b 00 87 	mov	r11,135
80005f08:	fe 7c 28 00 	mov	r12,-55296
80005f0c:	fe b0 e4 67 	rcall	800027da <spi_write>
         break;
80005f10:	c1 4b       	rjmp	80005d38 <sd_mmc_spi_command+0x74>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005f12:	ae 85       	st.b	r7[0x0],r5
80005f14:	c2 cb       	rjmp	80005d6c <sd_mmc_spi_command+0xa8>
80005f16:	3f f8       	mov	r8,-1
80005f18:	ae 88       	st.b	r7[0x0],r8
80005f1a:	c3 eb       	rjmp	80005d96 <sd_mmc_spi_command+0xd2>
80005f1c:	3f f8       	mov	r8,-1
80005f1e:	ae 88       	st.b	r7[0x0],r8
80005f20:	c5 0b       	rjmp	80005dc0 <sd_mmc_spi_command+0xfc>
80005f22:	3f f8       	mov	r8,-1
80005f24:	ae 88       	st.b	r7[0x0],r8
80005f26:	c6 2b       	rjmp	80005dea <sd_mmc_spi_command+0x126>
80005f28:	3f f8       	mov	r8,-1
80005f2a:	ae 88       	st.b	r7[0x0],r8
80005f2c:	c7 3b       	rjmp	80005e12 <sd_mmc_spi_command+0x14e>
80005f2e:	3f f8       	mov	r8,-1
80005f30:	ae 88       	st.b	r7[0x0],r8
80005f32:	c8 4b       	rjmp	80005e3a <sd_mmc_spi_command+0x176>
80005f34:	3f f8       	mov	r8,-1
80005f36:	ae 88       	st.b	r7[0x0],r8
80005f38:	c9 4b       	rjmp	80005e60 <sd_mmc_spi_command+0x19c>
80005f3a:	3f f8       	mov	r8,-1
80005f3c:	ae 88       	st.b	r7[0x0],r8
80005f3e:	ca 4b       	rjmp	80005e86 <sd_mmc_spi_command+0x1c2>
80005f40:	3f f8       	mov	r8,-1
80005f42:	ae 88       	st.b	r7[0x0],r8
80005f44:	cb 4b       	rjmp	80005eac <sd_mmc_spi_command+0x1e8>
80005f46:	3f f8       	mov	r8,-1
80005f48:	ae 88       	st.b	r7[0x0],r8
80005f4a:	cc 4b       	rjmp	80005ed2 <sd_mmc_spi_command+0x20e>
80005f4c:	3f f8       	mov	r8,-1
80005f4e:	e0 6c 00 ff 	mov	r12,255
80005f52:	ae 88       	st.b	r7[0x0],r8
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80005f54:	2f fd       	sub	sp,-4
80005f56:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005f5a:	d7 03       	nop

80005f5c <sd_mmc_spi_read_sector_to_ram>:
80005f5c:	eb cd 40 fc 	pushm	r2-r7,lr
80005f60:	20 1d       	sub	sp,4
80005f62:	18 97       	mov	r7,r12
80005f64:	c6 8e       	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80005f66:	c0 41       	brne	80005f6e <sd_mmc_spi_read_sector_to_ram+0x12>
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80005f68:	2f fd       	sub	sp,-4

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  return true;   // Read done.
}
80005f6a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80005f6e:	30 1b       	mov	r11,1
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80005f70:	fe 7c 28 00 	mov	r12,-55296
80005f74:	fe b0 e3 9f 	rcall	800026b2 <spi_selectChip>
80005f78:	e0 68 18 22 	mov	r8,6178

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80005f7c:	11 89       	ld.ub	r9,r8[0x0]
80005f7e:	30 38       	mov	r8,3
80005f80:	f0 09 18 00 	cp.b	r9,r8
80005f84:	c7 00       	breq	80006064 <sd_mmc_spi_read_sector_to_ram+0x108>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80005f86:	e0 62 00 fc 	mov	r2,252
80005f8a:	31 1c       	mov	r12,17
80005f8c:	64 0b       	ld.w	r11,r2[0x0]
80005f8e:	e0 65 18 34 	mov	r5,6196
80005f92:	c9 9e       	rcall	80005cc4 <sd_mmc_spi_command>
  }

  // check for valid response
  if (r1 != 0x00)
80005f94:	aa 8c       	st.b	r5[0x0],r12
80005f96:	58 0c       	cp.w	r12,0
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
       return false;
80005f98:	c5 e1       	brne	80006054 <sd_mmc_spi_read_sector_to_ram+0xf8>
80005f9a:	18 96       	mov	r6,r12
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005f9c:	1a 94       	mov	r4,sp
80005f9e:	3f f3       	mov	r3,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80005fa0:	c0 a8       	rjmp	80005fb4 <sd_mmc_spi_read_sector_to_ram+0x58>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005fa2:	1b 98       	ld.ub	r8,sp[0x1]
80005fa4:	aa 88       	st.b	r5[0x0],r8
80005fa6:	e6 08 18 00 	cp.b	r8,r3

  // check for valid response
  if (r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
80005faa:	c1 41       	brne	80005fd2 <sd_mmc_spi_read_sector_to_ram+0x76>
  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
80005fac:	2f f6       	sub	r6,-1
80005fae:	e0 46 75 30 	cp.w	r6,30000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80005fb2:	c5 10       	breq	80006054 <sd_mmc_spi_read_sector_to_ram+0xf8>
80005fb4:	e0 6b 00 ff 	mov	r11,255
80005fb8:	fe 7c 28 00 	mov	r12,-55296
80005fbc:	fe b0 e4 0f 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80005fc0:	1a 9b       	mov	r11,sp
80005fc2:	fe 7c 28 00 	mov	r12,-55296
80005fc6:	fe b0 e4 18 	rcall	800027f6 <spi_read>
80005fca:	58 1c       	cp.w	r12,1
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80005fcc:	ce b1       	brne	80005fa2 <sd_mmc_spi_read_sector_to_ram+0x46>
80005fce:	aa 83       	st.b	r5[0x0],r3
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80005fd0:	ce eb       	rjmp	80005fac <sd_mmc_spi_read_sector_to_ram+0x50>
80005fd2:	3f e9       	mov	r9,-2
80005fd4:	f2 08 18 00 	cp.b	r8,r9
80005fd8:	c3 81       	brne	80006048 <sd_mmc_spi_read_sector_to_ram+0xec>
80005fda:	fa c5 ff fe 	sub	r5,sp,-2
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
80005fde:	ee c6 fe 00 	sub	r6,r7,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
80005fe2:	e0 6b 00 ff 	mov	r11,255
80005fe6:	fe 7c 28 00 	mov	r12,-55296
80005fea:	fe b0 e3 f8 	rcall	800027da <spi_write>
    spi_read(SD_MMC_SPI,&data_read);
80005fee:	0a 9b       	mov	r11,r5
80005ff0:	fe 7c 28 00 	mov	r12,-55296
80005ff4:	fe b0 e4 01 	rcall	800027f6 <spi_read>
    *_ram++=data_read;
80005ff8:	9a 18       	ld.sh	r8,sp[0x2]
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80005ffa:	0e c8       	st.b	r7++,r8
80005ffc:	0c 37       	cp.w	r7,r6
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80005ffe:	cf 21       	brne	80005fe2 <sd_mmc_spi_read_sector_to_ram+0x86>
80006000:	64 08       	ld.w	r8,r2[0x0]
80006002:	f0 c8 fe 00 	sub	r8,r8,-512

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80006006:	e0 6b 00 ff 	mov	r11,255
8000600a:	85 08       	st.w	r2[0x0],r8
8000600c:	fe 7c 28 00 	mov	r12,-55296
80006010:	fe b0 e3 e5 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80006014:	e0 6b 00 ff 	mov	r11,255
80006018:	fe 7c 28 00 	mov	r12,-55296
8000601c:	fe b0 e3 df 	rcall	800027da <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80006020:	e0 6b 00 ff 	mov	r11,255
80006024:	fe 7c 28 00 	mov	r12,-55296
80006028:	fe b0 e3 d9 	rcall	800027da <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
8000602c:	e0 6b 00 ff 	mov	r11,255
80006030:	fe 7c 28 00 	mov	r12,-55296
80006034:	fe b0 e3 d3 	rcall	800027da <spi_write>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006038:	30 1b       	mov	r11,1
8000603a:	fe 7c 28 00 	mov	r12,-55296
8000603e:	fe b0 e3 62 	rcall	80002702 <spi_unselectChip>
80006042:	2f fd       	sub	sp,-4
80006044:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
  {
    spi_write(SD_MMC_SPI,0xFF);
80006048:	e0 6b 00 ff 	mov	r11,255
8000604c:	fe 7c 28 00 	mov	r12,-55296
80006050:	fe b0 e3 c5 	rcall	800027da <spi_write>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006054:	30 1b       	mov	r11,1
80006056:	fe 7c 28 00 	mov	r12,-55296
8000605a:	fe b0 e3 54 	rcall	80002702 <spi_unselectChip>
8000605e:	2f fd       	sub	sp,-4
80006060:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80006064:	e0 62 00 fc 	mov	r2,252
80006068:	31 1c       	mov	r12,17
8000606a:	64 0b       	ld.w	r11,r2[0x0]
8000606c:	e0 65 18 34 	mov	r5,6196
80006070:	a9 9b       	lsr	r11,0x9
80006072:	c2 9e       	rcall	80005cc4 <sd_mmc_spi_command>
80006074:	aa 8c       	st.b	r5[0x0],r12
80006076:	c9 0b       	rjmp	80005f96 <sd_mmc_spi_read_sector_to_ram+0x3a>

80006078 <sd_mmc_spi_check_hc>:
80006078:	eb cd 40 e0 	pushm	r5-r7,lr
8000607c:	20 1d       	sub	sp,4
8000607e:	fe b0 fd db 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006082:	c0 61       	brne	8000608e <sd_mmc_spi_check_hc+0x16>
80006084:	3f f7       	mov	r7,-1
80006086:	0e 9c       	mov	r12,r7
80006088:	2f fd       	sub	sp,-4
8000608a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000608e:	30 1b       	mov	r11,1
80006090:	fe 7c 28 00 	mov	r12,-55296
80006094:	fe b0 e3 0f 	rcall	800026b2 <spi_selectChip>
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80006098:	30 0b       	mov	r11,0
8000609a:	33 ac       	mov	r12,58
8000609c:	e0 66 18 34 	mov	r6,6196
800060a0:	c1 2e       	rcall	80005cc4 <sd_mmc_spi_command>
800060a2:	ac 8c       	st.b	r6[0x0],r12
  // check for valid response
  if(r1 != 0) {
800060a4:	c5 41       	brne	8000614c <sd_mmc_spi_check_hc+0xd4>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800060a6:	e0 6b 00 ff 	mov	r11,255
800060aa:	fe 7c 28 00 	mov	r12,-55296
800060ae:	fe b0 e3 96 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800060b2:	fa c5 ff fe 	sub	r5,sp,-2
800060b6:	fe 7c 28 00 	mov	r12,-55296
800060ba:	0a 9b       	mov	r11,r5
800060bc:	fe b0 e3 9d 	rcall	800027f6 <spi_read>
800060c0:	58 1c       	cp.w	r12,1
800060c2:	c3 a0       	breq	80006136 <sd_mmc_spi_check_hc+0xbe>
800060c4:	1b b7       	ld.ub	r7,sp[0x3]
800060c6:	ef d7 c0 c1 	bfextu	r7,r7,0x6,0x1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800060ca:	e0 6b 00 ff 	mov	r11,255
800060ce:	fe 7c 28 00 	mov	r12,-55296
800060d2:	fe b0 e3 84 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800060d6:	0a 9b       	mov	r11,r5
800060d8:	fe 7c 28 00 	mov	r12,-55296
800060dc:	fe b0 e3 8d 	rcall	800027f6 <spi_read>
800060e0:	58 1c       	cp.w	r12,1
800060e2:	c3 20       	breq	80006146 <sd_mmc_spi_check_hc+0xce>
     return 0xFF;
   return data_read;
800060e4:	1b b8       	ld.ub	r8,sp[0x3]
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800060e6:	e0 6b 00 ff 	mov	r11,255
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800060ea:	ac 88       	st.b	r6[0x0],r8
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800060ec:	fe 7c 28 00 	mov	r12,-55296
800060f0:	fe b0 e3 75 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800060f4:	0a 9b       	mov	r11,r5
800060f6:	fe 7c 28 00 	mov	r12,-55296
800060fa:	fe b0 e3 7e 	rcall	800027f6 <spi_read>
800060fe:	58 1c       	cp.w	r12,1
80006100:	c2 00       	breq	80006140 <sd_mmc_spi_check_hc+0xc8>
     return 0xFF;
   return data_read;
80006102:	1b b8       	ld.ub	r8,sp[0x3]
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006104:	e0 6b 00 ff 	mov	r11,255
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006108:	ac 88       	st.b	r6[0x0],r8
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000610a:	fe 7c 28 00 	mov	r12,-55296
8000610e:	fe b0 e3 66 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006112:	0a 9b       	mov	r11,r5
80006114:	fe 7c 28 00 	mov	r12,-55296
80006118:	fe b0 e3 6f 	rcall	800027f6 <spi_read>
8000611c:	58 1c       	cp.w	r12,1
8000611e:	c0 e0       	breq	8000613a <sd_mmc_spi_check_hc+0xc2>
     return 0xFF;
   return data_read;
80006120:	1b b8       	ld.ub	r8,sp[0x3]
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006122:	ac 88       	st.b	r6[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006124:	30 1b       	mov	r11,1
80006126:	fe 7c 28 00 	mov	r12,-55296
8000612a:	fe b0 e2 ec 	rcall	80002702 <spi_unselectChip>
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000612e:	0e 9c       	mov	r12,r7
80006130:	2f fd       	sub	sp,-4
80006132:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006136:	18 97       	mov	r7,r12
80006138:	cc 9b       	rjmp	800060ca <sd_mmc_spi_check_hc+0x52>
8000613a:	e0 68 00 ff 	mov	r8,255
8000613e:	cf 2b       	rjmp	80006122 <sd_mmc_spi_check_hc+0xaa>
80006140:	e0 68 00 ff 	mov	r8,255
80006144:	ce 0b       	rjmp	80006104 <sd_mmc_spi_check_hc+0x8c>
80006146:	e0 68 00 ff 	mov	r8,255
8000614a:	cc eb       	rjmp	800060e6 <sd_mmc_spi_check_hc+0x6e>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000614c:	30 1b       	mov	r11,1
8000614e:	fe 7c 28 00 	mov	r12,-55296
80006152:	fe b0 e2 d8 	rcall	80002702 <spi_unselectChip>
80006156:	c9 7b       	rjmp	80006084 <sd_mmc_spi_check_hc+0xc>

80006158 <sd_mmc_spi_write_sector_from_ram>:
80006158:	d4 21       	pushm	r4-r7,lr
8000615a:	20 1d       	sub	sp,4
8000615c:	18 97       	mov	r7,r12
8000615e:	fe b0 fd 6b 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006162:	c0 31       	brne	80006168 <sd_mmc_spi_write_sector_from_ram+0x10>
80006164:	2f fd       	sub	sp,-4
80006166:	d8 22       	popm	r4-r7,pc
80006168:	30 1b       	mov	r11,1
8000616a:	fe 7c 28 00 	mov	r12,-55296
8000616e:	fe b0 e2 a2 	rcall	800026b2 <spi_selectChip>
80006172:	e0 68 18 22 	mov	r8,6178
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80006176:	11 89       	ld.ub	r9,r8[0x0]
80006178:	30 38       	mov	r8,3
8000617a:	f0 09 18 00 	cp.b	r9,r8
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
8000617e:	c5 40       	breq	80006226 <sd_mmc_spi_write_sector_from_ram+0xce>
80006180:	e0 64 00 fc 	mov	r4,252
80006184:	31 8c       	mov	r12,24
80006186:	68 0b       	ld.w	r11,r4[0x0]
80006188:	e0 65 18 34 	mov	r5,6196
  }

  // check for valid response
  if(r1 != 0x00)
8000618c:	fe b0 fd 9c 	rcall	80005cc4 <sd_mmc_spi_command>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80006190:	aa 8c       	st.b	r5[0x0],r12
80006192:	58 0c       	cp.w	r12,0
80006194:	c4 21       	brne	80006218 <sd_mmc_spi_write_sector_from_ram+0xc0>
80006196:	e0 6b 00 ff 	mov	r11,255
8000619a:	fe 7c 28 00 	mov	r12,-55296

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
8000619e:	fe b0 e3 1e 	rcall	800027da <spi_write>
800061a2:	e0 6b 00 fe 	mov	r11,254
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800061a6:	fe 7c 28 00 	mov	r12,-55296
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800061aa:	ee c6 fe 00 	sub	r6,r7,-512
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800061ae:	fe b0 e3 16 	rcall	800027da <spi_write>
800061b2:	0f 3b       	ld.ub	r11,r7++
800061b4:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800061b8:	fe b0 e3 11 	rcall	800027da <spi_write>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800061bc:	0c 37       	cp.w	r7,r6
800061be:	cf a1       	brne	800061b2 <sd_mmc_spi_write_sector_from_ram+0x5a>
800061c0:	e0 6b 00 ff 	mov	r11,255
800061c4:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);
800061c8:	fe b0 e3 09 	rcall	800027da <spi_write>
800061cc:	e0 6b 00 ff 	mov	r11,255
800061d0:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800061d4:	fe b0 e3 03 	rcall	800027da <spi_write>
800061d8:	e0 6b 00 ff 	mov	r11,255
800061dc:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800061e0:	fe b0 e2 fd 	rcall	800027da <spi_write>
800061e4:	fa cb ff fe 	sub	r11,sp,-2
800061e8:	fe 7c 28 00 	mov	r12,-55296
800061ec:	fe b0 e3 05 	rcall	800027f6 <spi_read>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
800061f0:	58 1c       	cp.w	r12,1
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800061f2:	c5 80       	breq	800062a2 <sd_mmc_spi_write_sector_from_ram+0x14a>
800061f4:	1b b8       	ld.ub	r8,sp[0x3]
800061f6:	aa 88       	st.b	r5[0x0],r8
800061f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800061fc:	58 58       	cp.w	r8,5
800061fe:	c1 f0       	breq	8000623c <sd_mmc_spi_write_sector_from_ram+0xe4>
80006200:	e0 6b 00 ff 	mov	r11,255
80006204:	fe 7c 28 00 	mov	r12,-55296
    spi_write(SD_MMC_SPI,0xFF);
80006208:	fe b0 e2 e9 	rcall	800027da <spi_write>
8000620c:	e0 6b 00 ff 	mov	r11,255
80006210:	fe 7c 28 00 	mov	r12,-55296
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80006214:	fe b0 e2 e3 	rcall	800027da <spi_write>
80006218:	30 1b       	mov	r11,1
8000621a:	fe 7c 28 00 	mov	r12,-55296
8000621e:	fe b0 e2 72 	rcall	80002702 <spi_unselectChip>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80006222:	2f fd       	sub	sp,-4
80006224:	d8 2a       	popm	r4-r7,pc,r12=0
80006226:	e0 64 00 fc 	mov	r4,252
8000622a:	31 8c       	mov	r12,24
8000622c:	68 0b       	ld.w	r11,r4[0x0]
8000622e:	e0 65 18 34 	mov	r5,6196
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80006232:	a9 9b       	lsr	r11,0x9
80006234:	fe b0 fd 48 	rcall	80005cc4 <sd_mmc_spi_command>
80006238:	aa 8c       	st.b	r5[0x0],r12
8000623a:	ca cb       	rjmp	80006192 <sd_mmc_spi_write_sector_from_ram+0x3a>
8000623c:	e0 6b 00 ff 	mov	r11,255
  spi_write(SD_MMC_SPI,0xFF);
80006240:	fe 7c 28 00 	mov	r12,-55296
80006244:	fe b0 e2 cb 	rcall	800027da <spi_write>
80006248:	e0 6b 00 ff 	mov	r11,255

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000624c:	fe 7c 28 00 	mov	r12,-55296
80006250:	fe b0 e2 c5 	rcall	800027da <spi_write>
  gl_ptr_mem += 512;        // Update the memory pointer.
80006254:	30 1b       	mov	r11,1
80006256:	fe 7c 28 00 	mov	r12,-55296
8000625a:	fe b0 e2 54 	rcall	80002702 <spi_unselectChip>

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000625e:	68 08       	ld.w	r8,r4[0x0]
80006260:	f0 c8 fe 00 	sub	r8,r8,-512
80006264:	89 08       	st.w	r4[0x0],r8
80006266:	fe b0 fc e7 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
8000626a:	c1 f1       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
8000626c:	fe b0 fc e4 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006270:	c1 c1       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
80006272:	fe b0 fc e1 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006276:	c1 91       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
80006278:	fe b0 fc de 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
8000627c:	c1 61       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
8000627e:	fe b0 fc db 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006282:	c1 31       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
80006284:	fe b0 fc d8 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006288:	c1 01       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
8000628a:	fe b0 fc d5 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
8000628e:	c0 d1       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
80006290:	fe b0 fc d2 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
80006294:	c0 a1       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
80006296:	fe b0 fc cf 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000629a:	c0 71       	brne	800062a8 <sd_mmc_spi_write_sector_from_ram+0x150>
8000629c:	fe b0 fc cc 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
800062a0:	c6 2b       	rjmp	80006164 <sd_mmc_spi_write_sector_from_ram+0xc>
800062a2:	3f f8       	mov	r8,-1
800062a4:	aa 88       	st.b	r5[0x0],r8
800062a6:	ca db       	rjmp	80006200 <sd_mmc_spi_write_sector_from_ram+0xa8>
800062a8:	30 1c       	mov	r12,1
800062aa:	c5 db       	rjmp	80006164 <sd_mmc_spi_write_sector_from_ram+0xc>

800062ac <sd_mmc_spi_get_if>:
800062ac:	eb cd 40 e0 	pushm	r5-r7,lr
800062b0:	20 1d       	sub	sp,4
800062b2:	fe b0 fc c1 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
800062b6:	c0 51       	brne	800062c0 <sd_mmc_spi_get_if+0x14>
800062b8:	3f fc       	mov	r12,-1
800062ba:	2f fd       	sub	sp,-4
800062bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800062c0:	30 1b       	mov	r11,1
800062c2:	fe 7c 28 00 	mov	r12,-55296
800062c6:	fe b0 e1 f6 	rcall	800026b2 <spi_selectChip>
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
800062ca:	e0 6b 01 aa 	mov	r11,426
800062ce:	e0 67 18 34 	mov	r7,6196
800062d2:	30 8c       	mov	r12,8
800062d4:	fe b0 fc f8 	rcall	80005cc4 <sd_mmc_spi_command>
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
800062d8:	ae 8c       	st.b	r7[0x0],r12
800062da:	ed bc 00 02 	bld	r12,0x2
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800062de:	c5 00       	breq	8000637e <sd_mmc_spi_get_if+0xd2>
800062e0:	e0 6b 00 ff 	mov	r11,255
800062e4:	fe 7c 28 00 	mov	r12,-55296
800062e8:	fe b0 e2 79 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800062ec:	fa c6 ff fe 	sub	r6,sp,-2
800062f0:	fe 7c 28 00 	mov	r12,-55296
800062f4:	0c 9b       	mov	r11,r6
800062f6:	fe b0 e2 80 	rcall	800027f6 <spi_read>
800062fa:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
800062fc:	c4 90       	breq	8000638e <sd_mmc_spi_get_if+0xe2>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800062fe:	1b b8       	ld.ub	r8,sp[0x3]
80006300:	e0 6b 00 ff 	mov	r11,255
80006304:	ae 88       	st.b	r7[0x0],r8
80006306:	fe 7c 28 00 	mov	r12,-55296
8000630a:	fe b0 e2 68 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000630e:	0c 9b       	mov	r11,r6
80006310:	fe 7c 28 00 	mov	r12,-55296
80006314:	fe b0 e2 71 	rcall	800027f6 <spi_read>
80006318:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
8000631a:	c4 00       	breq	8000639a <sd_mmc_spi_get_if+0xee>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000631c:	1b b8       	ld.ub	r8,sp[0x3]
8000631e:	e0 6b 00 ff 	mov	r11,255
80006322:	ae 88       	st.b	r7[0x0],r8
80006324:	fe 7c 28 00 	mov	r12,-55296
80006328:	fe b0 e2 59 	rcall	800027da <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000632c:	0c 9b       	mov	r11,r6
8000632e:	fe 7c 28 00 	mov	r12,-55296
80006332:	e0 65 18 34 	mov	r5,6196
80006336:	fe b0 e2 60 	rcall	800027f6 <spi_read>
     return 0xFF;
   return data_read;
8000633a:	58 1c       	cp.w	r12,1
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000633c:	c2 c0       	breq	80006394 <sd_mmc_spi_get_if+0xe8>
  if((r1 & 0x01) == 0) {
8000633e:	1b b8       	ld.ub	r8,sp[0x3]
80006340:	aa 88       	st.b	r5[0x0],r8
80006342:	ed b8 00 00 	bld	r8,0x0
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006346:	c3 61       	brne	800063b2 <sd_mmc_spi_get_if+0x106>
80006348:	e0 6b 00 ff 	mov	r11,255
8000634c:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006350:	fe b0 e2 45 	rcall	800027da <spi_write>
80006354:	0c 9b       	mov	r11,r6
80006356:	fe 7c 28 00 	mov	r12,-55296
8000635a:	fe b0 e2 4e 	rcall	800027f6 <spi_read>
     return 0xFF;
   return data_read;
8000635e:	58 1c       	cp.w	r12,1
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006360:	c2 00       	breq	800063a0 <sd_mmc_spi_get_if+0xf4>
  if(r1 != 0xaa) {
80006362:	1b b8       	ld.ub	r8,sp[0x3]
80006364:	ae 88       	st.b	r7[0x0],r8
80006366:	3a a9       	mov	r9,-86
80006368:	f2 08 18 00 	cp.b	r8,r9
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000636c:	c1 c1       	brne	800063a4 <sd_mmc_spi_get_if+0xf8>
8000636e:	30 1b       	mov	r11,1
80006370:	fe 7c 28 00 	mov	r12,-55296
80006374:	fe b0 e1 c7 	rcall	80002702 <spi_unselectChip>
80006378:	2f fd       	sub	sp,-4

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000637a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000637e:	30 1b       	mov	r11,1
80006380:	fe 7c 28 00 	mov	r12,-55296
80006384:	fe b0 e1 bf 	rcall	80002702 <spi_unselectChip>
80006388:	2f fd       	sub	sp,-4
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000638a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000638e:	e0 68 00 ff 	mov	r8,255
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80006392:	cb 7b       	rjmp	80006300 <sd_mmc_spi_get_if+0x54>
80006394:	3f f8       	mov	r8,-1
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006396:	aa 88       	st.b	r5[0x0],r8
80006398:	cd 8b       	rjmp	80006348 <sd_mmc_spi_get_if+0x9c>
8000639a:	e0 68 00 ff 	mov	r8,255
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000639e:	cc 0b       	rjmp	8000631e <sd_mmc_spi_get_if+0x72>
  if(r1 != 0xaa) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800063a0:	3f f8       	mov	r8,-1
800063a2:	ae 88       	st.b	r7[0x0],r8
800063a4:	30 1b       	mov	r11,1
800063a6:	fe 7c 28 00 	mov	r12,-55296
800063aa:	fe b0 e1 ac 	rcall	80002702 <spi_unselectChip>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800063ae:	3f fc       	mov	r12,-1
800063b0:	c8 5b       	rjmp	800062ba <sd_mmc_spi_get_if+0xe>
800063b2:	30 1b       	mov	r11,1
800063b4:	fe 7c 28 00 	mov	r12,-55296
800063b8:	fe b0 e1 a5 	rcall	80002702 <spi_unselectChip>
800063bc:	c7 eb       	rjmp	800062b8 <sd_mmc_spi_get_if+0xc>
800063be:	d7 03       	nop

800063c0 <sd_mmc_spi_internal_init>:
800063c0:	d4 31       	pushm	r0-r7,lr
800063c2:	20 1d       	sub	sp,4
800063c4:	e6 68 1a 80 	mov	r8,400000
800063c8:	e0 69 01 10 	mov	r9,272
800063cc:	e0 67 01 00 	mov	r7,256
800063d0:	72 0a       	ld.w	r10,r9[0x0]
800063d2:	8f 18       	st.w	r7[0x4],r8
800063d4:	0e 9b       	mov	r11,r7
800063d6:	fe 7c 28 00 	mov	r12,-55296
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800063da:	fe b0 e1 a7 	rcall	80002728 <spi_setupChipReg>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800063de:	30 1b       	mov	r11,1
800063e0:	fe 7c 28 00 	mov	r12,-55296
800063e4:	fe b0 e1 67 	rcall	800026b2 <spi_selectChip>
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
800063e8:	e0 6b 00 ff 	mov	r11,255
800063ec:	fe 7c 28 00 	mov	r12,-55296
800063f0:	fe b0 e1 f5 	rcall	800027da <spi_write>
800063f4:	e0 6b 00 ff 	mov	r11,255
800063f8:	fe 7c 28 00 	mov	r12,-55296
800063fc:	fe b0 e1 ef 	rcall	800027da <spi_write>
80006400:	e0 6b 00 ff 	mov	r11,255
80006404:	fe 7c 28 00 	mov	r12,-55296
80006408:	fe b0 e1 e9 	rcall	800027da <spi_write>
8000640c:	e0 6b 00 ff 	mov	r11,255
80006410:	fe 7c 28 00 	mov	r12,-55296
80006414:	fe b0 e1 e3 	rcall	800027da <spi_write>
80006418:	e0 6b 00 ff 	mov	r11,255
8000641c:	fe 7c 28 00 	mov	r12,-55296
80006420:	fe b0 e1 dd 	rcall	800027da <spi_write>
80006424:	e0 6b 00 ff 	mov	r11,255
80006428:	fe 7c 28 00 	mov	r12,-55296
8000642c:	fe b0 e1 d7 	rcall	800027da <spi_write>
80006430:	e0 6b 00 ff 	mov	r11,255
80006434:	fe 7c 28 00 	mov	r12,-55296
80006438:	fe b0 e1 d1 	rcall	800027da <spi_write>
8000643c:	e0 6b 00 ff 	mov	r11,255
80006440:	fe 7c 28 00 	mov	r12,-55296
80006444:	fe b0 e1 cb 	rcall	800027da <spi_write>
80006448:	e0 6b 00 ff 	mov	r11,255
8000644c:	fe 7c 28 00 	mov	r12,-55296
80006450:	fe b0 e1 c5 	rcall	800027da <spi_write>
80006454:	e0 6b 00 ff 	mov	r11,255
80006458:	fe 7c 28 00 	mov	r12,-55296
8000645c:	fe b0 e1 bf 	rcall	800027da <spi_write>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006460:	30 1b       	mov	r11,1
80006462:	fe 7c 28 00 	mov	r12,-55296
80006466:	fe b0 e1 4e 	rcall	80002702 <spi_unselectChip>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000646a:	30 08       	mov	r8,0
8000646c:	e0 69 01 14 	mov	r9,276
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006470:	30 1b       	mov	r11,1
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80006472:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80006474:	e0 61 18 22 	mov	r1,6178
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006478:	fe 7c 28 00 	mov	r12,-55296
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
  card_type = MMC_CARD;
8000647c:	a2 88       	st.b	r1[0x0],r8
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000647e:	fe b0 e1 1a 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006482:	30 0b       	mov	r11,0
80006484:	16 9c       	mov	r12,r11
80006486:	fe b0 fc 1f 	rcall	80005cc4 <sd_mmc_spi_command>
8000648a:	e0 66 18 34 	mov	r6,6196
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000648e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006490:	ac 8c       	st.b	r6[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006492:	fe 7c 28 00 	mov	r12,-55296
80006496:	fe b0 e1 36 	rcall	80002702 <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000649a:	e0 6b 00 ff 	mov	r11,255
8000649e:	fe 7c 28 00 	mov	r12,-55296
800064a2:	30 05       	mov	r5,0
800064a4:	fe b0 e1 9b 	rcall	800027da <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800064a8:	0c 90       	mov	r0,r6
800064aa:	30 12       	mov	r2,1
800064ac:	c1 78       	rjmp	800064da <sd_mmc_spi_internal_init+0x11a>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800064ae:	fe b0 e1 02 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800064b2:	30 0b       	mov	r11,0
800064b4:	16 9c       	mov	r12,r11
800064b6:	fe b0 fc 07 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800064ba:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800064bc:	a0 8c       	st.b	r0[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800064be:	fe 7c 28 00 	mov	r12,-55296
800064c2:	fe b0 e1 20 	rcall	80002702 <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800064c6:	e0 6b 00 ff 	mov	r11,255
800064ca:	fe 7c 28 00 	mov	r12,-55296
800064ce:	fe b0 e1 86 	rcall	800027da <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
800064d2:	e0 45 00 64 	cp.w	r5,100
800064d6:	e0 80 00 b4 	breq	8000663e <sd_mmc_spi_internal_init+0x27e>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800064da:	30 1b       	mov	r11,1
800064dc:	fe 7c 28 00 	mov	r12,-55296
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800064e0:	16 05       	add	r5,r11
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800064e2:	0d 84       	ld.ub	r4,r6[0x0]
800064e4:	e0 63 18 34 	mov	r3,6196
800064e8:	e4 04 18 00 	cp.b	r4,r2
800064ec:	ce 11       	brne	800064ae <sd_mmc_spi_internal_init+0xee>

  if_cond = sd_mmc_spi_get_if();
800064ee:	cd fe       	rcall	800062ac <sd_mmc_spi_get_if>
800064f0:	5b fc       	cp.w	r12,-1
  if(if_cond == -1) {
800064f2:	e0 80 00 a6 	breq	8000663e <sd_mmc_spi_internal_init+0x27e>
800064f6:	58 1c       	cp.w	r12,1
      return false; // card is bad
  } else if (if_cond == 1) {
800064f8:	e0 80 00 a6 	breq	80006644 <sd_mmc_spi_internal_init+0x284>
800064fc:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800064fe:	fe 7c 28 00 	mov	r12,-55296
80006502:	fe b0 e0 d8 	rcall	800026b2 <spi_selectChip>
80006506:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006508:	33 7c       	mov	r12,55
8000650a:	fe b0 fb dd 	rcall	80005cc4 <sd_mmc_spi_command>
8000650e:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006510:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006512:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006516:	fe b0 e0 f6 	rcall	80002702 <spi_unselectChip>
8000651a:	e0 6b 00 ff 	mov	r11,255
      card_type = SD_CARD_2;
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
8000651e:	fe 7c 28 00 	mov	r12,-55296
80006522:	fe b0 e1 5c 	rcall	800027da <spi_write>
80006526:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006528:	fe 7c 28 00 	mov	r12,-55296
8000652c:	fe b0 e0 c3 	rcall	800026b2 <spi_selectChip>
80006530:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006532:	32 9c       	mov	r12,41
80006534:	fe b0 fb c8 	rcall	80005cc4 <sd_mmc_spi_command>
80006538:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000653a:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000653c:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006540:	fe b0 e0 e1 	rcall	80002702 <spi_unselectChip>
80006544:	e0 6b 00 ff 	mov	r11,255
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80006548:	fe 7c 28 00 	mov	r12,-55296
8000654c:	fe b0 e1 47 	rcall	800027da <spi_write>
80006550:	07 88       	ld.ub	r8,r3[0x0]

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80006552:	e2 18 00 fe 	andl	r8,0xfe,COH
80006556:	e0 80 00 d3 	breq	800066fc <sd_mmc_spi_internal_init+0x33c>
8000655a:	30 08       	mov	r8,0
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
8000655c:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000655e:	a2 88       	st.b	r1[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80006560:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006564:	fe b0 e0 a7 	rcall	800026b2 <spi_selectChip>
80006568:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
8000656a:	16 9c       	mov	r12,r11
8000656c:	fe b0 fb ac 	rcall	80005cc4 <sd_mmc_spi_command>
80006570:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006572:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006574:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006578:	fe b0 e0 c5 	rcall	80002702 <spi_unselectChip>
8000657c:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006580:	fe 7c 28 00 	mov	r12,-55296
80006584:	30 05       	mov	r5,0
80006586:	fe b0 e1 2a 	rcall	800027da <spi_write>
8000658a:	30 14       	mov	r4,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
8000658c:	c1 68       	rjmp	800065b8 <sd_mmc_spi_internal_init+0x1f8>
8000658e:	fe b0 e0 92 	rcall	800026b2 <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006592:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006594:	16 9c       	mov	r12,r11
80006596:	fe b0 fb 97 	rcall	80005cc4 <sd_mmc_spi_command>
8000659a:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000659c:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000659e:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065a2:	fe b0 e0 b0 	rcall	80002702 <spi_unselectChip>
800065a6:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800065aa:	fe 7c 28 00 	mov	r12,-55296
800065ae:	fe b0 e1 16 	rcall	800027da <spi_write>
800065b2:	e0 45 00 64 	cp.w	r5,100
        // do retry counter
        retry++;
        if(retry > 100)
800065b6:	c4 40       	breq	8000663e <sd_mmc_spi_internal_init+0x27e>
800065b8:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800065ba:	fe 7c 28 00 	mov	r12,-55296
800065be:	16 05       	add	r5,r11
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800065c0:	0d 88       	ld.ub	r8,r6[0x0]
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
800065c2:	e8 08 18 00 	cp.b	r8,r4
800065c6:	ce 41       	brne	8000658e <sd_mmc_spi_internal_init+0x1ce>
800065c8:	03 88       	ld.ub	r8,r1[0x0]
800065ca:	c4 08       	rjmp	8000664a <sd_mmc_spi_internal_init+0x28a>
800065cc:	03 89       	ld.ub	r9,r1[0x0]
     if(retry == 50000)    // measured approx. 500 on several cards
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
800065ce:	30 28       	mov	r8,2
800065d0:	f0 09 18 00 	cp.b	r9,r8
800065d4:	e0 80 01 77 	breq	800068c2 <sd_mmc_spi_internal_init+0x502>
800065d8:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800065da:	fe 7c 28 00 	mov	r12,-55296
800065de:	fe b0 e0 6a 	rcall	800026b2 <spi_selectChip>
800065e2:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800065e4:	33 bc       	mov	r12,59
800065e6:	fe b0 fb 6f 	rcall	80005cc4 <sd_mmc_spi_command>
800065ea:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065ec:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800065ee:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800065f2:	fe b0 e0 88 	rcall	80002702 <spi_unselectChip>
800065f6:	e0 6b 00 ff 	mov	r11,255
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800065fa:	fe 7c 28 00 	mov	r12,-55296
800065fe:	fe b0 e0 ee 	rcall	800027da <spi_write>
80006602:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006604:	fe 7c 28 00 	mov	r12,-55296
80006608:	fe b0 e0 55 	rcall	800026b2 <spi_selectChip>
8000660c:	e0 6b 02 00 	mov	r11,512
  r1 = sd_mmc_spi_command(command, arg);
80006610:	31 0c       	mov	r12,16
80006612:	fe b0 fb 59 	rcall	80005cc4 <sd_mmc_spi_command>
80006616:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006618:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000661a:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000661e:	fe b0 e0 72 	rcall	80002702 <spi_unselectChip>
80006622:	e0 6b 00 ff 	mov	r11,255
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006626:	fe 7c 28 00 	mov	r12,-55296
8000662a:	e0 64 18 34 	mov	r4,6196
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000662e:	fe b0 e0 d6 	rcall	800027da <spi_write>
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006632:	0d 85       	ld.ub	r5,r6[0x0]
  if (r1 != 0x00)
80006634:	58 05       	cp.w	r5,0
80006636:	c0 41       	brne	8000663e <sd_mmc_spi_internal_init+0x27e>
80006638:	fe b0 fa fe 	rcall	80005c34 <sd_mmc_spi_wait_not_busy>
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000663c:	c6 31       	brne	80006702 <sd_mmc_spi_internal_init+0x342>
8000663e:	30 0c       	mov	r12,0
  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
  return true;
80006640:	2f fd       	sub	sp,-4
}
80006642:	d8 32       	popm	r0-r7,pc
80006644:	30 28       	mov	r8,2

  if_cond = sd_mmc_spi_get_if();
  if(if_cond == -1) {
      return false; // card is bad
  } else if (if_cond == 1) {
      card_type = SD_CARD_2;
80006646:	a2 88       	st.b	r1[0x0],r8
80006648:	30 28       	mov	r8,2
8000664a:	30 05       	mov	r5,0
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
8000664c:	30 14       	mov	r4,1

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000664e:	30 23       	mov	r3,2
80006650:	c1 d8       	rjmp	8000668a <sd_mmc_spi_internal_init+0x2ca>
80006652:	fe b0 e0 30 	rcall	800026b2 <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006656:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80006658:	30 1c       	mov	r12,1
8000665a:	fe b0 fb 35 	rcall	80005cc4 <sd_mmc_spi_command>
8000665e:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006660:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006662:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006666:	fe b0 e0 4e 	rcall	80002702 <spi_unselectChip>
8000666a:	e0 6b 00 ff 	mov	r11,255
      break;
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000666e:	fe 7c 28 00 	mov	r12,-55296
80006672:	fe b0 e0 b4 	rcall	800027da <spi_write>
80006676:	e0 45 c3 4f 	cp.w	r5,49999
      break;
    }
     // do retry counter
     retry++;
     if(retry == 50000)    // measured approx. 500 on several cards
8000667a:	ce 20       	breq	8000663e <sd_mmc_spi_internal_init+0x27e>
8000667c:	2f f5       	sub	r5,-1
8000667e:	0d 89       	ld.ub	r9,r6[0x0]
        return false;
  } while (r1);
80006680:	30 08       	mov	r8,0
80006682:	f0 09 18 00 	cp.b	r9,r8
80006686:	ca 30       	breq	800065cc <sd_mmc_spi_internal_init+0x20c>
80006688:	03 88       	ld.ub	r8,r1[0x0]
8000668a:	e8 08 18 00 	cp.b	r8,r4

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000668e:	c2 00       	breq	800066ce <sd_mmc_spi_internal_init+0x30e>
80006690:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006692:	fe 7c 28 00 	mov	r12,-55296
80006696:	cd e3       	brcs	80006652 <sd_mmc_spi_internal_init+0x292>

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80006698:	e6 08 18 00 	cp.b	r8,r3
8000669c:	ce d1       	brne	80006676 <sd_mmc_spi_internal_init+0x2b6>
8000669e:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800066a0:	fe 7c 28 00 	mov	r12,-55296
800066a4:	fe b0 e0 07 	rcall	800026b2 <spi_selectChip>
800066a8:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800066aa:	33 7c       	mov	r12,55
800066ac:	fe b0 fb 0c 	rcall	80005cc4 <sd_mmc_spi_command>
800066b0:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800066b2:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800066b4:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800066b8:	fe b0 e0 25 	rcall	80002702 <spi_unselectChip>
800066bc:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800066be:	fe 7c 28 00 	mov	r12,-55296
800066c2:	fe b0 df f8 	rcall	800026b2 <spi_selectChip>
800066c6:	fc 1b 40 00 	movh	r11,0x4000
  r1 = sd_mmc_spi_command(command, arg);
800066ca:	32 9c       	mov	r12,41
800066cc:	cc 7b       	rjmp	8000665a <sd_mmc_spi_internal_init+0x29a>
800066ce:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800066d0:	fe 7c 28 00 	mov	r12,-55296
800066d4:	fe b0 df ef 	rcall	800026b2 <spi_selectChip>
800066d8:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800066da:	33 7c       	mov	r12,55
800066dc:	fe b0 fa f4 	rcall	80005cc4 <sd_mmc_spi_command>
800066e0:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800066e2:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800066e4:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800066e8:	fe b0 e0 0d 	rcall	80002702 <spi_unselectChip>
800066ec:	30 1b       	mov	r11,1
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800066ee:	fe 7c 28 00 	mov	r12,-55296
800066f2:	fe b0 df e0 	rcall	800026b2 <spi_selectChip>
800066f6:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800066f8:	32 9c       	mov	r12,41
800066fa:	cb 0b       	rjmp	8000665a <sd_mmc_spi_internal_init+0x29a>
800066fc:	a2 84       	st.b	r1[0x0],r4

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
800066fe:	30 18       	mov	r8,1
80006700:	ca 5b       	rjmp	8000664a <sd_mmc_spi_internal_init+0x28a>
80006702:	30 1b       	mov	r11,1
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006704:	fe 7c 28 00 	mov	r12,-55296
80006708:	fe b0 df d5 	rcall	800026b2 <spi_selectChip>
8000670c:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
8000670e:	30 9c       	mov	r12,9
80006710:	fe b0 fa da 	rcall	80005cc4 <sd_mmc_spi_command>
80006714:	a8 8c       	st.b	r4[0x0],r12
80006716:	e0 81 01 f1 	brne	80006af8 <sd_mmc_spi_internal_init+0x738>
  // check for valid response
  if(r1 != 0x00)
8000671a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000671e:	fe 7c 28 00 	mov	r12,-55296
80006722:	fe b0 e0 5c 	rcall	800027da <spi_write>
80006726:	1a 95       	mov	r5,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006728:	fe 7c 28 00 	mov	r12,-55296
8000672c:	1a 9b       	mov	r11,sp
8000672e:	fe b0 e0 64 	rcall	800027f6 <spi_read>
80006732:	58 1c       	cp.w	r12,1
80006734:	e0 80 01 ed 	breq	80006b0e <sd_mmc_spi_internal_init+0x74e>
80006738:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000673a:	a8 88       	st.b	r4[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000673c:	3f e9       	mov	r9,-2
8000673e:	f2 08 18 00 	cp.b	r8,r9
80006742:	e0 80 00 d1 	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
80006746:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000674a:	fe 7c 28 00 	mov	r12,-55296
8000674e:	fe b0 e0 46 	rcall	800027da <spi_write>
80006752:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006754:	fe 7c 28 00 	mov	r12,-55296
80006758:	fe b0 e0 4f 	rcall	800027f6 <spi_read>
8000675c:	58 1c       	cp.w	r12,1
8000675e:	e0 80 00 c0 	breq	800068de <sd_mmc_spi_internal_init+0x51e>
80006762:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006764:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006766:	3f e9       	mov	r9,-2
80006768:	f2 08 18 00 	cp.b	r8,r9
8000676c:	e0 80 00 bc 	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
80006770:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006774:	fe 7c 28 00 	mov	r12,-55296
80006778:	fe b0 e0 31 	rcall	800027da <spi_write>
8000677c:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000677e:	fe 7c 28 00 	mov	r12,-55296
80006782:	fe b0 e0 3a 	rcall	800027f6 <spi_read>
80006786:	58 1c       	cp.w	r12,1
80006788:	e0 80 01 cb 	breq	80006b1e <sd_mmc_spi_internal_init+0x75e>
8000678c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000678e:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006790:	3f e9       	mov	r9,-2
80006792:	f2 08 18 00 	cp.b	r8,r9
80006796:	e0 80 00 a7 	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
8000679a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000679e:	fe 7c 28 00 	mov	r12,-55296
800067a2:	fe b0 e0 1c 	rcall	800027da <spi_write>
800067a6:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800067a8:	fe 7c 28 00 	mov	r12,-55296
800067ac:	fe b0 e0 25 	rcall	800027f6 <spi_read>
800067b0:	58 1c       	cp.w	r12,1
800067b2:	e0 80 01 b2 	breq	80006b16 <sd_mmc_spi_internal_init+0x756>
800067b6:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800067b8:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800067ba:	3f e9       	mov	r9,-2
800067bc:	f2 08 18 00 	cp.b	r8,r9
800067c0:	e0 80 00 92 	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
800067c4:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800067c8:	fe 7c 28 00 	mov	r12,-55296
800067cc:	fe b0 e0 07 	rcall	800027da <spi_write>
800067d0:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800067d2:	fe 7c 28 00 	mov	r12,-55296
800067d6:	fe b0 e0 10 	rcall	800027f6 <spi_read>
800067da:	58 1c       	cp.w	r12,1
800067dc:	e0 80 01 a9 	breq	80006b2e <sd_mmc_spi_internal_init+0x76e>
800067e0:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800067e2:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800067e4:	3f e9       	mov	r9,-2
800067e6:	f2 08 18 00 	cp.b	r8,r9
800067ea:	c7 d0       	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
800067ec:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800067f0:	fe 7c 28 00 	mov	r12,-55296
800067f4:	fe b0 df f3 	rcall	800027da <spi_write>
800067f8:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800067fa:	fe 7c 28 00 	mov	r12,-55296
800067fe:	fe b0 df fc 	rcall	800027f6 <spi_read>
80006802:	58 1c       	cp.w	r12,1
80006804:	e0 80 01 91 	breq	80006b26 <sd_mmc_spi_internal_init+0x766>
80006808:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000680a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000680c:	3f e9       	mov	r9,-2
8000680e:	f2 08 18 00 	cp.b	r8,r9
80006812:	c6 90       	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
80006814:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006818:	fe 7c 28 00 	mov	r12,-55296
8000681c:	fe b0 df df 	rcall	800027da <spi_write>
80006820:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006822:	fe 7c 28 00 	mov	r12,-55296
80006826:	fe b0 df e8 	rcall	800027f6 <spi_read>
8000682a:	58 1c       	cp.w	r12,1
8000682c:	e0 80 01 85 	breq	80006b36 <sd_mmc_spi_internal_init+0x776>
80006830:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006832:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006834:	3f e9       	mov	r9,-2
80006836:	f2 08 18 00 	cp.b	r8,r9
8000683a:	c5 50       	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
8000683c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006840:	fe 7c 28 00 	mov	r12,-55296
80006844:	fe b0 df cb 	rcall	800027da <spi_write>
80006848:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000684a:	fe 7c 28 00 	mov	r12,-55296
8000684e:	fe b0 df d4 	rcall	800027f6 <spi_read>
80006852:	58 1c       	cp.w	r12,1
80006854:	e0 80 01 75 	breq	80006b3e <sd_mmc_spi_internal_init+0x77e>
80006858:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
8000685a:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000685c:	3f e9       	mov	r9,-2
8000685e:	f2 08 18 00 	cp.b	r8,r9
80006862:	c4 10       	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
80006864:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006868:	fe 7c 28 00 	mov	r12,-55296
8000686c:	fe b0 df b7 	rcall	800027da <spi_write>
80006870:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80006872:	fe 7c 28 00 	mov	r12,-55296
80006876:	fe b0 df c0 	rcall	800027f6 <spi_read>
8000687a:	58 1c       	cp.w	r12,1
8000687c:	e0 80 01 68 	breq	80006b4c <sd_mmc_spi_internal_init+0x78c>
80006880:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80006882:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006884:	3f e9       	mov	r9,-2
80006886:	f2 08 18 00 	cp.b	r8,r9
8000688a:	c2 d0       	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
8000688c:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80006890:	fe 7c 28 00 	mov	r12,-55296
80006894:	fe b0 df a3 	rcall	800027da <spi_write>
80006898:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000689a:	fe 7c 28 00 	mov	r12,-55296
8000689e:	fe b0 df ac 	rcall	800027f6 <spi_read>
800068a2:	58 1c       	cp.w	r12,1
800068a4:	e0 80 01 51 	breq	80006b46 <sd_mmc_spi_internal_init+0x786>
800068a8:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
800068aa:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800068ac:	3f e9       	mov	r9,-2
800068ae:	f2 08 18 00 	cp.b	r8,r9
800068b2:	c1 90       	breq	800068e4 <sd_mmc_spi_internal_init+0x524>
800068b4:	30 1b       	mov	r11,1
  {
    if (retry > 8)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800068b6:	fe 7c 28 00 	mov	r12,-55296
800068ba:	fe b0 df 24 	rcall	80002702 <spi_unselectChip>
800068be:	30 0c       	mov	r12,0
800068c0:	cc 0a       	rjmp	80006640 <sd_mmc_spi_internal_init+0x280>
800068c2:	fe b0 fb db 	rcall	80006078 <sd_mmc_spi_check_hc>
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
    if_cond = sd_mmc_spi_check_hc();
800068c6:	5b fc       	cp.w	r12,-1
    if (if_cond == -1) {
800068c8:	fe 90 fe bb 	breq	8000663e <sd_mmc_spi_internal_init+0x27e>
800068cc:	58 1c       	cp.w	r12,1
      return false;
    } else if (if_cond == 1){
800068ce:	fe 91 fe 85 	brne	800065d8 <sd_mmc_spi_internal_init+0x218>
800068d2:	30 39       	mov	r9,3
          card_type = SD_CARD_2_SDHC;
800068d4:	e0 68 18 22 	mov	r8,6178
800068d8:	b0 89       	st.b	r8[0x0],r9
800068da:	fe 9f fe 7f 	bral	800065d8 <sd_mmc_spi_internal_init+0x218>
800068de:	3f f8       	mov	r8,-1
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800068e0:	ac 88       	st.b	r6[0x0],r8
800068e2:	c4 7b       	rjmp	80006770 <sd_mmc_spi_internal_init+0x3b0>
800068e4:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800068e8:	fe 7c 28 00 	mov	r12,-55296
800068ec:	fe b0 df 77 	rcall	800027da <spi_write>
800068f0:	fa c5 ff fe 	sub	r5,sp,-2
   spi_read(SD_MMC_SPI,&data_read);
800068f4:	fe 7c 28 00 	mov	r12,-55296
800068f8:	0a 9b       	mov	r11,r5
800068fa:	fe b0 df 7e 	rcall	800027f6 <spi_read>
800068fe:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006900:	e0 66 18 24 	mov	r6,6180
80006904:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006908:	ac 88       	st.b	r6[0x0],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000690a:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000690e:	fe b0 df 66 	rcall	800027da <spi_write>
80006912:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006914:	fe 7c 28 00 	mov	r12,-55296
80006918:	fe b0 df 6f 	rcall	800027f6 <spi_read>
8000691c:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000691e:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006922:	ac 98       	st.b	r6[0x1],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006924:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006928:	fe b0 df 59 	rcall	800027da <spi_write>
8000692c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000692e:	fe 7c 28 00 	mov	r12,-55296
80006932:	fe b0 df 62 	rcall	800027f6 <spi_read>
80006936:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006938:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000693c:	ac a8       	st.b	r6[0x2],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000693e:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006942:	fe b0 df 4c 	rcall	800027da <spi_write>
80006946:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006948:	fe 7c 28 00 	mov	r12,-55296
8000694c:	fe b0 df 55 	rcall	800027f6 <spi_read>
80006950:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006952:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006956:	ac b8       	st.b	r6[0x3],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006958:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000695c:	fe b0 df 3f 	rcall	800027da <spi_write>
80006960:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006962:	fe 7c 28 00 	mov	r12,-55296
80006966:	fe b0 df 48 	rcall	800027f6 <spi_read>
8000696a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
8000696c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006970:	ac c8       	st.b	r6[0x4],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006972:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006976:	fe b0 df 32 	rcall	800027da <spi_write>
8000697a:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
8000697c:	fe 7c 28 00 	mov	r12,-55296
80006980:	fe b0 df 3b 	rcall	800027f6 <spi_read>
80006984:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006986:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000698a:	ac d8       	st.b	r6[0x5],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
8000698c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006990:	fe b0 df 25 	rcall	800027da <spi_write>
80006994:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006996:	fe 7c 28 00 	mov	r12,-55296
8000699a:	fe b0 df 2e 	rcall	800027f6 <spi_read>
8000699e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800069a0:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069a4:	ac e8       	st.b	r6[0x6],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800069a6:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069aa:	fe b0 df 18 	rcall	800027da <spi_write>
800069ae:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800069b0:	fe 7c 28 00 	mov	r12,-55296
800069b4:	fe b0 df 21 	rcall	800027f6 <spi_read>
800069b8:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800069ba:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069be:	ac f8       	st.b	r6[0x7],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800069c0:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069c4:	fe b0 df 0b 	rcall	800027da <spi_write>
800069c8:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800069ca:	fe 7c 28 00 	mov	r12,-55296
800069ce:	fe b0 df 14 	rcall	800027f6 <spi_read>
800069d2:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800069d4:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069d8:	ed 68 00 08 	st.b	r6[8],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800069dc:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069e0:	fe b0 de fd 	rcall	800027da <spi_write>
800069e4:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
800069e6:	fe 7c 28 00 	mov	r12,-55296
800069ea:	fe b0 df 06 	rcall	800027f6 <spi_read>
800069ee:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
800069f0:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069f4:	ed 68 00 09 	st.b	r6[9],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
800069f8:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800069fc:	fe b0 de ef 	rcall	800027da <spi_write>
80006a00:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006a02:	fe 7c 28 00 	mov	r12,-55296
80006a06:	fe b0 de f8 	rcall	800027f6 <spi_read>
80006a0a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006a0c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a10:	ed 68 00 0a 	st.b	r6[10],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006a14:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a18:	fe b0 de e1 	rcall	800027da <spi_write>
80006a1c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006a1e:	fe 7c 28 00 	mov	r12,-55296
80006a22:	fe b0 de ea 	rcall	800027f6 <spi_read>
80006a26:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006a28:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a2c:	ed 68 00 0b 	st.b	r6[11],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006a30:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a34:	fe b0 de d3 	rcall	800027da <spi_write>
80006a38:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006a3a:	fe 7c 28 00 	mov	r12,-55296
80006a3e:	fe b0 de dc 	rcall	800027f6 <spi_read>
80006a42:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006a44:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a48:	ed 68 00 0c 	st.b	r6[12],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006a4c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a50:	fe b0 de c5 	rcall	800027da <spi_write>
80006a54:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006a56:	fe 7c 28 00 	mov	r12,-55296
80006a5a:	fe b0 de ce 	rcall	800027f6 <spi_read>
80006a5e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006a60:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a64:	ed 68 00 0d 	st.b	r6[13],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006a68:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a6c:	fe b0 de b7 	rcall	800027da <spi_write>
80006a70:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006a72:	fe 7c 28 00 	mov	r12,-55296
80006a76:	fe b0 de c0 	rcall	800027f6 <spi_read>
80006a7a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006a7c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a80:	ed 68 00 0e 	st.b	r6[14],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006a84:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80006a88:	fe b0 de a9 	rcall	800027da <spi_write>
80006a8c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80006a8e:	fe 7c 28 00 	mov	r12,-55296
80006a92:	fe b0 de b2 	rcall	800027f6 <spi_read>
80006a96:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80006a98:	e0 6b 00 ff 	mov	r11,255
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80006a9c:	ed 68 00 0f 	st.b	r6[15],r8
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80006aa0:	fe 7c 28 00 	mov	r12,-55296
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80006aa4:	fe b0 de 9b 	rcall	800027da <spi_write>
80006aa8:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);
80006aac:	fe 7c 28 00 	mov	r12,-55296
80006ab0:	fe b0 de 95 	rcall	800027da <spi_write>
80006ab4:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80006ab8:	fe 7c 28 00 	mov	r12,-55296
80006abc:	fe b0 de 8f 	rcall	800027da <spi_write>
80006ac0:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ac2:	fe 7c 28 00 	mov	r12,-55296
80006ac6:	fe b0 de 1e 	rcall	80002702 <spi_unselectChip>
80006aca:	fe b0 f8 09 	rcall	80005adc <sd_mmc_spi_get_capacity>
  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80006ace:	e0 69 01 10 	mov	r9,272
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80006ad2:	30 18       	mov	r8,1

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80006ad4:	72 0a       	ld.w	r10,r9[0x0]
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80006ad6:	e0 69 01 14 	mov	r9,276

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80006ada:	b2 88       	st.b	r9[0x0],r8
80006adc:	e0 68 1b 00 	mov	r8,6912
80006ae0:	ea 18 00 b7 	orh	r8,0xb7
80006ae4:	e0 6b 01 00 	mov	r11,256
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80006ae8:	8f 18       	st.w	r7[0x4],r8
80006aea:	fe 7c 28 00 	mov	r12,-55296
80006aee:	fe b0 de 1d 	rcall	80002728 <spi_setupChipReg>
  return true;
80006af2:	30 1c       	mov	r12,1
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006af4:	fe 9f fd a6 	bral	80006640 <sd_mmc_spi_internal_init+0x280>
80006af8:	30 1b       	mov	r11,1
80006afa:	fe 7c 28 00 	mov	r12,-55296
    sd_mmc_spi_init_done = false;
80006afe:	fe b0 de 02 	rcall	80002702 <spi_unselectChip>
80006b02:	e0 68 01 14 	mov	r8,276
80006b06:	30 0c       	mov	r12,0
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80006b08:	b0 85       	st.b	r8[0x0],r5
80006b0a:	fe 9f fd 9b 	bral	80006640 <sd_mmc_spi_internal_init+0x280>
80006b0e:	3f f8       	mov	r8,-1
80006b10:	a8 88       	st.b	r4[0x0],r8
80006b12:	fe 9f fe 1a 	bral	80006746 <sd_mmc_spi_internal_init+0x386>
80006b16:	3f f8       	mov	r8,-1
80006b18:	ac 88       	st.b	r6[0x0],r8
80006b1a:	fe 9f fe 55 	bral	800067c4 <sd_mmc_spi_internal_init+0x404>
80006b1e:	3f f8       	mov	r8,-1
80006b20:	ac 88       	st.b	r6[0x0],r8
80006b22:	fe 9f fe 3c 	bral	8000679a <sd_mmc_spi_internal_init+0x3da>
80006b26:	3f f8       	mov	r8,-1
80006b28:	ac 88       	st.b	r6[0x0],r8
80006b2a:	fe 9f fe 75 	bral	80006814 <sd_mmc_spi_internal_init+0x454>
80006b2e:	3f f8       	mov	r8,-1
80006b30:	ac 88       	st.b	r6[0x0],r8
80006b32:	fe 9f fe 5d 	bral	800067ec <sd_mmc_spi_internal_init+0x42c>
80006b36:	3f f8       	mov	r8,-1
80006b38:	ac 88       	st.b	r6[0x0],r8
80006b3a:	fe 9f fe 81 	bral	8000683c <sd_mmc_spi_internal_init+0x47c>
80006b3e:	3f f8       	mov	r8,-1
80006b40:	ac 88       	st.b	r6[0x0],r8
80006b42:	fe 9f fe 91 	bral	80006864 <sd_mmc_spi_internal_init+0x4a4>
80006b46:	3f f8       	mov	r8,-1
80006b48:	ac 88       	st.b	r6[0x0],r8
80006b4a:	cb 5a       	rjmp	800068b4 <sd_mmc_spi_internal_init+0x4f4>
80006b4c:	3f f8       	mov	r8,-1
80006b4e:	ac 88       	st.b	r6[0x0],r8
80006b50:	fe 9f fe 9e 	bral	8000688c <sd_mmc_spi_internal_init+0x4cc>

80006b54 <sd_mmc_spi_init>:
80006b54:	eb cd 40 10 	pushm	r4,lr
80006b58:	e0 68 01 00 	mov	r8,256
80006b5c:	fa c4 ff f8 	sub	r4,sp,-8
80006b60:	e8 ea 00 08 	ld.d	r10,r4[8]
80006b64:	f0 eb 00 08 	st.d	r8[8],r10
80006b68:	e0 69 01 10 	mov	r9,272
80006b6c:	93 0c       	st.w	r9[0x0],r12
80006b6e:	e8 ea 00 00 	ld.d	r10,r4[0]
80006b72:	f0 eb 00 00 	st.d	r8[0],r10
80006b76:	fe b0 fc 25 	rcall	800063c0 <sd_mmc_spi_internal_init>
80006b7a:	e3 cd 80 10 	ldm	sp++,r4,pc
80006b7e:	d7 03       	nop

80006b80 <sd_mmc_spi_check_presence>:
80006b80:	eb cd 40 e0 	pushm	r5-r7,lr
80006b84:	e0 67 01 14 	mov	r7,276
80006b88:	30 06       	mov	r6,0
80006b8a:	0f 88       	ld.ub	r8,r7[0x0]
80006b8c:	ec 08 18 00 	cp.b	r8,r6
bool sd_mmc_spi_check_presence(void)
{
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80006b90:	e0 81 01 2c 	brne	80006de8 <sd_mmc_spi_check_presence+0x268>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006b94:	30 1b       	mov	r11,1
80006b96:	fe 7c 28 00 	mov	r12,-55296
80006b9a:	fe b0 dd 8c 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006b9e:	30 0b       	mov	r11,0
80006ba0:	16 9c       	mov	r12,r11
80006ba2:	fe b0 f8 91 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ba6:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006ba8:	e0 67 18 34 	mov	r7,6196
80006bac:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006bae:	fe 7c 28 00 	mov	r12,-55296
80006bb2:	fe b0 dd a8 	rcall	80002702 <spi_unselectChip>
  return r1;
80006bb6:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006bb8:	ae 88       	st.b	r7[0x0],r8
80006bba:	30 16       	mov	r6,1
80006bbc:	ec 08 18 00 	cp.b	r8,r6
80006bc0:	e0 80 01 29 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006bc4:	e0 6b 00 ff 	mov	r11,255
80006bc8:	fe 7c 28 00 	mov	r12,-55296
80006bcc:	fe b0 de 07 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006bd0:	30 1b       	mov	r11,1
80006bd2:	fe 7c 28 00 	mov	r12,-55296
80006bd6:	fe b0 dd 6e 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006bda:	30 0b       	mov	r11,0
80006bdc:	16 9c       	mov	r12,r11
80006bde:	fe b0 f8 73 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006be2:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006be4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006be6:	fe 7c 28 00 	mov	r12,-55296
80006bea:	fe b0 dd 8c 	rcall	80002702 <spi_unselectChip>
  return r1;
80006bee:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006bf0:	ae 88       	st.b	r7[0x0],r8
80006bf2:	ec 08 18 00 	cp.b	r8,r6
80006bf6:	e0 80 01 0e 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006bfa:	e0 6b 00 ff 	mov	r11,255
80006bfe:	fe 7c 28 00 	mov	r12,-55296
80006c02:	fe b0 dd ec 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006c06:	30 1b       	mov	r11,1
80006c08:	fe 7c 28 00 	mov	r12,-55296
80006c0c:	fe b0 dd 53 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006c10:	30 0b       	mov	r11,0
80006c12:	16 9c       	mov	r12,r11
80006c14:	fe b0 f8 58 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c18:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006c1a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c1c:	fe 7c 28 00 	mov	r12,-55296
80006c20:	fe b0 dd 71 	rcall	80002702 <spi_unselectChip>
  return r1;
80006c24:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006c26:	ae 88       	st.b	r7[0x0],r8
80006c28:	ec 08 18 00 	cp.b	r8,r6
80006c2c:	e0 80 00 f3 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c30:	e0 6b 00 ff 	mov	r11,255
80006c34:	fe 7c 28 00 	mov	r12,-55296
80006c38:	fe b0 dd d1 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006c3c:	30 1b       	mov	r11,1
80006c3e:	fe 7c 28 00 	mov	r12,-55296
80006c42:	fe b0 dd 38 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006c46:	30 0b       	mov	r11,0
80006c48:	16 9c       	mov	r12,r11
80006c4a:	fe b0 f8 3d 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c4e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006c50:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c52:	fe 7c 28 00 	mov	r12,-55296
80006c56:	fe b0 dd 56 	rcall	80002702 <spi_unselectChip>
  return r1;
80006c5a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006c5c:	ae 88       	st.b	r7[0x0],r8
80006c5e:	ec 08 18 00 	cp.b	r8,r6
80006c62:	e0 80 00 d8 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c66:	e0 6b 00 ff 	mov	r11,255
80006c6a:	fe 7c 28 00 	mov	r12,-55296
80006c6e:	fe b0 dd b6 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006c72:	30 1b       	mov	r11,1
80006c74:	fe 7c 28 00 	mov	r12,-55296
80006c78:	fe b0 dd 1d 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006c7c:	30 0b       	mov	r11,0
80006c7e:	16 9c       	mov	r12,r11
80006c80:	fe b0 f8 22 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c84:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006c86:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006c88:	fe 7c 28 00 	mov	r12,-55296
80006c8c:	fe b0 dd 3b 	rcall	80002702 <spi_unselectChip>
  return r1;
80006c90:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006c92:	ae 88       	st.b	r7[0x0],r8
80006c94:	ec 08 18 00 	cp.b	r8,r6
80006c98:	e0 80 00 bd 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006c9c:	e0 6b 00 ff 	mov	r11,255
80006ca0:	fe 7c 28 00 	mov	r12,-55296
80006ca4:	fe b0 dd 9b 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ca8:	30 1b       	mov	r11,1
80006caa:	fe 7c 28 00 	mov	r12,-55296
80006cae:	fe b0 dd 02 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006cb2:	30 0b       	mov	r11,0
80006cb4:	16 9c       	mov	r12,r11
80006cb6:	fe b0 f8 07 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cba:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006cbc:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cbe:	fe 7c 28 00 	mov	r12,-55296
80006cc2:	fe b0 dd 20 	rcall	80002702 <spi_unselectChip>
  return r1;
80006cc6:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006cc8:	ae 88       	st.b	r7[0x0],r8
80006cca:	ec 08 18 00 	cp.b	r8,r6
80006cce:	e0 80 00 a2 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006cd2:	e0 6b 00 ff 	mov	r11,255
80006cd6:	fe 7c 28 00 	mov	r12,-55296
80006cda:	fe b0 dd 80 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006cde:	30 1b       	mov	r11,1
80006ce0:	fe 7c 28 00 	mov	r12,-55296
80006ce4:	fe b0 dc e7 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006ce8:	30 0b       	mov	r11,0
80006cea:	16 9c       	mov	r12,r11
80006cec:	fe b0 f7 ec 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cf0:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006cf2:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006cf4:	fe 7c 28 00 	mov	r12,-55296
80006cf8:	fe b0 dd 05 	rcall	80002702 <spi_unselectChip>
  return r1;
80006cfc:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006cfe:	ae 88       	st.b	r7[0x0],r8
80006d00:	ec 08 18 00 	cp.b	r8,r6
80006d04:	e0 80 00 87 	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006d08:	e0 6b 00 ff 	mov	r11,255
80006d0c:	fe 7c 28 00 	mov	r12,-55296
80006d10:	fe b0 dd 65 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006d14:	30 1b       	mov	r11,1
80006d16:	fe 7c 28 00 	mov	r12,-55296
80006d1a:	fe b0 dc cc 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006d1e:	30 0b       	mov	r11,0
80006d20:	16 9c       	mov	r12,r11
80006d22:	fe b0 f7 d1 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d26:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006d28:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d2a:	fe 7c 28 00 	mov	r12,-55296
80006d2e:	fe b0 dc ea 	rcall	80002702 <spi_unselectChip>
  return r1;
80006d32:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006d34:	ae 88       	st.b	r7[0x0],r8
80006d36:	ec 08 18 00 	cp.b	r8,r6
80006d3a:	c6 c0       	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006d3c:	e0 6b 00 ff 	mov	r11,255
80006d40:	fe 7c 28 00 	mov	r12,-55296
80006d44:	fe b0 dd 4b 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006d48:	30 1b       	mov	r11,1
80006d4a:	fe 7c 28 00 	mov	r12,-55296
80006d4e:	fe b0 dc b2 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006d52:	30 0b       	mov	r11,0
80006d54:	16 9c       	mov	r12,r11
80006d56:	fe b0 f7 b7 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d5a:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006d5c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d5e:	fe 7c 28 00 	mov	r12,-55296
80006d62:	fe b0 dc d0 	rcall	80002702 <spi_unselectChip>
  return r1;
80006d66:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006d68:	ae 88       	st.b	r7[0x0],r8
80006d6a:	ec 08 18 00 	cp.b	r8,r6
80006d6e:	c5 20       	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006d70:	e0 6b 00 ff 	mov	r11,255
80006d74:	fe 7c 28 00 	mov	r12,-55296
80006d78:	fe b0 dd 31 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006d7c:	30 1b       	mov	r11,1
80006d7e:	fe 7c 28 00 	mov	r12,-55296
80006d82:	fe b0 dc 98 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006d86:	30 0b       	mov	r11,0
80006d88:	16 9c       	mov	r12,r11
80006d8a:	fe b0 f7 9d 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d8e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006d90:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006d92:	fe 7c 28 00 	mov	r12,-55296
80006d96:	fe b0 dc b6 	rcall	80002702 <spi_unselectChip>
  return r1;
80006d9a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006d9c:	ae 88       	st.b	r7[0x0],r8
80006d9e:	ec 08 18 00 	cp.b	r8,r6
80006da2:	c3 80       	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006da4:	e0 6b 00 ff 	mov	r11,255
80006da8:	fe 7c 28 00 	mov	r12,-55296
80006dac:	fe b0 dd 17 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006db0:	30 1b       	mov	r11,1
80006db2:	fe 7c 28 00 	mov	r12,-55296
80006db6:	fe b0 dc 7e 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006dba:	30 0b       	mov	r11,0
80006dbc:	16 9c       	mov	r12,r11
80006dbe:	fe b0 f7 83 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006dc2:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006dc4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006dc6:	fe 7c 28 00 	mov	r12,-55296
80006dca:	fe b0 dc 9c 	rcall	80002702 <spi_unselectChip>
  return r1;
80006dce:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006dd0:	ae 88       	st.b	r7[0x0],r8
80006dd2:	ec 08 18 00 	cp.b	r8,r6
80006dd6:	c1 e0       	breq	80006e12 <sd_mmc_spi_check_presence+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006dd8:	e0 6b 00 ff 	mov	r11,255
80006ddc:	fe 7c 28 00 	mov	r12,-55296
80006de0:	fe b0 dc fd 	rcall	800027da <spi_write>
80006de4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006de8:	30 1b       	mov	r11,1
80006dea:	fe 7c 28 00 	mov	r12,-55296
80006dee:	fe b0 dc 62 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006df2:	30 0b       	mov	r11,0
80006df4:	33 bc       	mov	r12,59
80006df6:	fe b0 f7 67 	rcall	80005cc4 <sd_mmc_spi_command>
80006dfa:	e0 65 18 34 	mov	r5,6196
80006dfe:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e00:	aa 8c       	st.b	r5[0x0],r12
80006e02:	fe 7c 28 00 	mov	r12,-55296
80006e06:	fe b0 dc 7e 	rcall	80002702 <spi_unselectChip>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80006e0a:	0b 88       	ld.ub	r8,r5[0x0]
80006e0c:	aa 88       	st.b	r5[0x0],r8
80006e0e:	58 08       	cp.w	r8,0
      return true;
    sd_mmc_spi_init_done = false;
    return false;
80006e10:	c0 31       	brne	80006e16 <sd_mmc_spi_check_presence+0x296>
80006e12:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
      return true;
    sd_mmc_spi_init_done = false;
80006e16:	ae 86       	st.b	r7[0x0],r6
80006e18:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80006e1c <sd_mmc_spi_mem_check>:
80006e1c:	eb cd 40 e0 	pushm	r5-r7,lr
80006e20:	e0 65 01 14 	mov	r5,276
80006e24:	30 07       	mov	r7,0
80006e26:	0b 88       	ld.ub	r8,r5[0x0]
80006e28:	ee 08 18 00 	cp.b	r8,r7
80006e2c:	e0 81 01 2c 	brne	80007084 <sd_mmc_spi_mem_check+0x268>
80006e30:	30 1b       	mov	r11,1
80006e32:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006e36:	fe b0 dc 3e 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006e3a:	30 0b       	mov	r11,0
80006e3c:	16 9c       	mov	r12,r11
80006e3e:	fe b0 f7 43 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e42:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006e44:	e0 67 18 34 	mov	r7,6196
80006e48:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e4a:	fe 7c 28 00 	mov	r12,-55296
80006e4e:	fe b0 dc 5a 	rcall	80002702 <spi_unselectChip>
  return r1;
80006e52:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006e54:	ae 88       	st.b	r7[0x0],r8
80006e56:	30 16       	mov	r6,1
80006e58:	ec 08 18 00 	cp.b	r8,r6
80006e5c:	e0 80 01 29 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006e60:	e0 6b 00 ff 	mov	r11,255
80006e64:	fe 7c 28 00 	mov	r12,-55296
80006e68:	fe b0 dc b9 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006e6c:	30 1b       	mov	r11,1
80006e6e:	fe 7c 28 00 	mov	r12,-55296
80006e72:	fe b0 dc 20 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006e76:	30 0b       	mov	r11,0
80006e78:	16 9c       	mov	r12,r11
80006e7a:	fe b0 f7 25 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e7e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006e80:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006e82:	fe 7c 28 00 	mov	r12,-55296
80006e86:	fe b0 dc 3e 	rcall	80002702 <spi_unselectChip>
  return r1;
80006e8a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006e8c:	ae 88       	st.b	r7[0x0],r8
80006e8e:	ec 08 18 00 	cp.b	r8,r6
80006e92:	e0 80 01 0e 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006e96:	e0 6b 00 ff 	mov	r11,255
80006e9a:	fe 7c 28 00 	mov	r12,-55296
80006e9e:	fe b0 dc 9e 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ea2:	30 1b       	mov	r11,1
80006ea4:	fe 7c 28 00 	mov	r12,-55296
80006ea8:	fe b0 dc 05 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006eac:	30 0b       	mov	r11,0
80006eae:	16 9c       	mov	r12,r11
80006eb0:	fe b0 f7 0a 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006eb4:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006eb6:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006eb8:	fe 7c 28 00 	mov	r12,-55296
80006ebc:	fe b0 dc 23 	rcall	80002702 <spi_unselectChip>
  return r1;
80006ec0:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006ec2:	ae 88       	st.b	r7[0x0],r8
80006ec4:	ec 08 18 00 	cp.b	r8,r6
80006ec8:	e0 80 00 f3 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006ecc:	e0 6b 00 ff 	mov	r11,255
80006ed0:	fe 7c 28 00 	mov	r12,-55296
80006ed4:	fe b0 dc 83 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006ed8:	30 1b       	mov	r11,1
80006eda:	fe 7c 28 00 	mov	r12,-55296
80006ede:	fe b0 db ea 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006ee2:	30 0b       	mov	r11,0
80006ee4:	16 9c       	mov	r12,r11
80006ee6:	fe b0 f6 ef 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006eea:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006eec:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006eee:	fe 7c 28 00 	mov	r12,-55296
80006ef2:	fe b0 dc 08 	rcall	80002702 <spi_unselectChip>
  return r1;
80006ef6:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006ef8:	ae 88       	st.b	r7[0x0],r8
80006efa:	ec 08 18 00 	cp.b	r8,r6
80006efe:	e0 80 00 d8 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006f02:	e0 6b 00 ff 	mov	r11,255
80006f06:	fe 7c 28 00 	mov	r12,-55296
80006f0a:	fe b0 dc 68 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006f0e:	30 1b       	mov	r11,1
80006f10:	fe 7c 28 00 	mov	r12,-55296
80006f14:	fe b0 db cf 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006f18:	30 0b       	mov	r11,0
80006f1a:	16 9c       	mov	r12,r11
80006f1c:	fe b0 f6 d4 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f20:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006f22:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f24:	fe 7c 28 00 	mov	r12,-55296
80006f28:	fe b0 db ed 	rcall	80002702 <spi_unselectChip>
  return r1;
80006f2c:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006f2e:	ae 88       	st.b	r7[0x0],r8
80006f30:	ec 08 18 00 	cp.b	r8,r6
80006f34:	e0 80 00 bd 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006f38:	e0 6b 00 ff 	mov	r11,255
80006f3c:	fe 7c 28 00 	mov	r12,-55296
80006f40:	fe b0 dc 4d 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006f44:	30 1b       	mov	r11,1
80006f46:	fe 7c 28 00 	mov	r12,-55296
80006f4a:	fe b0 db b4 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006f4e:	30 0b       	mov	r11,0
80006f50:	16 9c       	mov	r12,r11
80006f52:	fe b0 f6 b9 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f56:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006f58:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f5a:	fe 7c 28 00 	mov	r12,-55296
80006f5e:	fe b0 db d2 	rcall	80002702 <spi_unselectChip>
  return r1;
80006f62:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006f64:	ae 88       	st.b	r7[0x0],r8
80006f66:	ec 08 18 00 	cp.b	r8,r6
80006f6a:	e0 80 00 a2 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006f6e:	e0 6b 00 ff 	mov	r11,255
80006f72:	fe 7c 28 00 	mov	r12,-55296
80006f76:	fe b0 dc 32 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006f7a:	30 1b       	mov	r11,1
80006f7c:	fe 7c 28 00 	mov	r12,-55296
80006f80:	fe b0 db 99 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006f84:	30 0b       	mov	r11,0
80006f86:	16 9c       	mov	r12,r11
80006f88:	fe b0 f6 9e 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f8c:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006f8e:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006f90:	fe 7c 28 00 	mov	r12,-55296
80006f94:	fe b0 db b7 	rcall	80002702 <spi_unselectChip>
  return r1;
80006f98:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006f9a:	ae 88       	st.b	r7[0x0],r8
80006f9c:	ec 08 18 00 	cp.b	r8,r6
80006fa0:	e0 80 00 87 	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006fa4:	e0 6b 00 ff 	mov	r11,255
80006fa8:	fe 7c 28 00 	mov	r12,-55296
80006fac:	fe b0 dc 17 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006fb0:	30 1b       	mov	r11,1
80006fb2:	fe 7c 28 00 	mov	r12,-55296
80006fb6:	fe b0 db 7e 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006fba:	30 0b       	mov	r11,0
80006fbc:	16 9c       	mov	r12,r11
80006fbe:	fe b0 f6 83 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006fc2:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006fc4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006fc6:	fe 7c 28 00 	mov	r12,-55296
80006fca:	fe b0 db 9c 	rcall	80002702 <spi_unselectChip>
  return r1;
80006fce:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80006fd0:	ae 88       	st.b	r7[0x0],r8
80006fd2:	ec 08 18 00 	cp.b	r8,r6
80006fd6:	c6 c0       	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80006fd8:	e0 6b 00 ff 	mov	r11,255
80006fdc:	fe 7c 28 00 	mov	r12,-55296
80006fe0:	fe b0 db fd 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80006fe4:	30 1b       	mov	r11,1
80006fe6:	fe 7c 28 00 	mov	r12,-55296
80006fea:	fe b0 db 64 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80006fee:	30 0b       	mov	r11,0
80006ff0:	16 9c       	mov	r12,r11
80006ff2:	fe b0 f6 69 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ff6:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80006ff8:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80006ffa:	fe 7c 28 00 	mov	r12,-55296
80006ffe:	fe b0 db 82 	rcall	80002702 <spi_unselectChip>
  return r1;
80007002:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80007004:	ae 88       	st.b	r7[0x0],r8
80007006:	ec 08 18 00 	cp.b	r8,r6
8000700a:	c5 20       	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000700c:	e0 6b 00 ff 	mov	r11,255
80007010:	fe 7c 28 00 	mov	r12,-55296
80007014:	fe b0 db e3 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80007018:	30 1b       	mov	r11,1
8000701a:	fe 7c 28 00 	mov	r12,-55296
8000701e:	fe b0 db 4a 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80007022:	30 0b       	mov	r11,0
80007024:	16 9c       	mov	r12,r11
80007026:	fe b0 f6 4f 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000702a:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8000702c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000702e:	fe 7c 28 00 	mov	r12,-55296
80007032:	fe b0 db 68 	rcall	80002702 <spi_unselectChip>
  return r1;
80007036:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80007038:	ae 88       	st.b	r7[0x0],r8
8000703a:	ec 08 18 00 	cp.b	r8,r6
8000703e:	c3 80       	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80007040:	e0 6b 00 ff 	mov	r11,255
80007044:	fe 7c 28 00 	mov	r12,-55296
80007048:	fe b0 db c9 	rcall	800027da <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000704c:	30 1b       	mov	r11,1
8000704e:	fe 7c 28 00 	mov	r12,-55296
80007052:	fe b0 db 30 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80007056:	30 0b       	mov	r11,0
80007058:	16 9c       	mov	r12,r11
8000705a:	fe b0 f6 35 	rcall	80005cc4 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000705e:	30 1b       	mov	r11,1
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80007060:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80007062:	fe 7c 28 00 	mov	r12,-55296
80007066:	fe b0 db 4e 	rcall	80002702 <spi_unselectChip>
  return r1;
8000706a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000706c:	ae 88       	st.b	r7[0x0],r8
8000706e:	ec 08 18 00 	cp.b	r8,r6
80007072:	c1 e0       	breq	800070ae <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80007074:	e0 6b 00 ff 	mov	r11,255
80007078:	fe 7c 28 00 	mov	r12,-55296
8000707c:	fe b0 db af 	rcall	800027da <spi_write>
80007080:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80007084:	30 1b       	mov	r11,1
80007086:	fe 7c 28 00 	mov	r12,-55296
8000708a:	fe b0 db 14 	rcall	800026b2 <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
8000708e:	30 0b       	mov	r11,0
80007090:	33 bc       	mov	r12,59
80007092:	fe b0 f6 19 	rcall	80005cc4 <sd_mmc_spi_command>
80007096:	e0 66 18 34 	mov	r6,6196
8000709a:	30 1b       	mov	r11,1
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000709c:	ac 8c       	st.b	r6[0x0],r12
8000709e:	fe 7c 28 00 	mov	r12,-55296
800070a2:	fe b0 db 30 	rcall	80002702 <spi_unselectChip>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800070a6:	0d 88       	ld.ub	r8,r6[0x0]
800070a8:	ac 88       	st.b	r6[0x0],r8
800070aa:	58 08       	cp.w	r8,0
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
  if (sd_mmc_spi_check_presence())
  {
    if (sd_mmc_spi_init_done == false)
800070ac:	c0 c1       	brne	800070c4 <sd_mmc_spi_mem_check+0x2a8>
800070ae:	0b 89       	ld.ub	r9,r5[0x0]
800070b0:	30 08       	mov	r8,0
800070b2:	f0 09 18 00 	cp.b	r9,r8
800070b6:	c0 30       	breq	800070bc <sd_mmc_spi_mem_check+0x2a0>
800070b8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
    {
      return sd_mmc_spi_internal_init();
800070bc:	fe b0 f9 82 	rcall	800063c0 <sd_mmc_spi_internal_init>
    }
    else
      return true;
  }
  return false;
}
800070c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
      return true;
    sd_mmc_spi_init_done = false;
800070c4:	aa 87       	st.b	r5[0x0],r7
800070c6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800070ca:	d7 03       	nop

800070cc <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
800070cc:	5e fd       	retal	0
800070ce:	d7 03       	nop

800070d0 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
800070d0:	eb cd 40 c0 	pushm	r6-r7,lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
800070d4:	30 86       	mov	r6,8
800070d6:	30 17       	mov	r7,1
800070d8:	0d 88       	ld.ub	r8,r6[0x0]
800070da:	ee 08 18 00 	cp.b	r8,r7
800070de:	c1 a0       	breq	80007112 <sd_mmc_spi_test_unit_ready+0x42>
800070e0:	c0 a3       	brcs	800070f4 <sd_mmc_spi_test_unit_ready+0x24>
800070e2:	30 29       	mov	r9,2
800070e4:	f2 08 18 00 	cp.b	r8,r9
800070e8:	c1 00       	breq	80007108 <sd_mmc_spi_test_unit_ready+0x38>
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
800070ea:	30 08       	mov	r8,0
800070ec:	30 3c       	mov	r12,3
800070ee:	ac 88       	st.b	r6[0x0],r8
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
800070f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
{
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
800070f4:	30 09       	mov	r9,0
800070f6:	e0 68 01 14 	mov	r8,276
      if (sd_mmc_spi_mem_check())
800070fa:	b0 89       	st.b	r8[0x0],r9
800070fc:	c9 0e       	rcall	80006e1c <sd_mmc_spi_mem_check>
800070fe:	c0 70       	breq	8000710c <sd_mmc_spi_test_unit_ready+0x3c>
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80007100:	ac 87       	st.b	r6[0x0],r7
80007102:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80007104:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80007108:	30 08       	mov	r8,0
8000710a:	ac 88       	st.b	r6[0x0],r8
8000710c:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
8000710e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80007112:	c8 5e       	rcall	80006e1c <sd_mmc_spi_mem_check>
80007114:	c0 91       	brne	80007126 <sd_mmc_spi_test_unit_ready+0x56>
80007116:	30 28       	mov	r8,2
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80007118:	ac 88       	st.b	r6[0x0],r8
8000711a:	e0 68 01 14 	mov	r8,276
        sd_mmc_spi_init_done = false;
8000711e:	b0 8c       	st.b	r8[0x0],r12
80007120:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80007122:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80007126:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000712a:	d7 03       	nop

8000712c <sd_mmc_spi_ram_2_mem>:
8000712c:	d4 21       	pushm	r4-r7,lr
8000712e:	18 97       	mov	r7,r12
80007130:	16 94       	mov	r4,r11
80007132:	fe b0 fd 27 	rcall	80006b80 <sd_mmc_spi_check_presence>
80007136:	e0 65 01 14 	mov	r5,276
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();

   if (!sd_mmc_spi_init_done)
8000713a:	30 08       	mov	r8,0
8000713c:	0b 86       	ld.ub	r6,r5[0x0]
8000713e:	f0 06 18 00 	cp.b	r6,r8
      sd_mmc_spi_mem_init();
   }

   if (sd_mmc_spi_init_done)
   {
     sd_mmc_spi_write_open(addr);
80007142:	c0 c0       	breq	8000715a <sd_mmc_spi_ram_2_mem+0x2e>
80007144:	0e 9c       	mov	r12,r7
80007146:	fe b0 f5 ab 	rcall	80005c9c <sd_mmc_spi_write_open>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
8000714a:	08 9c       	mov	r12,r4
8000714c:	fe b0 f8 06 	rcall	80006158 <sd_mmc_spi_write_sector_from_ram>
     {
       sd_mmc_spi_write_close();
80007150:	c0 d1       	brne	8000716a <sd_mmc_spi_ram_2_mem+0x3e>
80007152:	fe b0 f5 4f 	rcall	80005bf0 <sd_mmc_spi_write_close>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80007156:	30 2c       	mov	r12,2
//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80007158:	d8 22       	popm	r4-r7,pc
8000715a:	fe b0 f9 33 	rcall	800063c0 <sd_mmc_spi_internal_init>
   if (!sd_mmc_spi_init_done)
   {
      sd_mmc_spi_mem_init();
   }

   if (sd_mmc_spi_init_done)
8000715e:	0b 88       	ld.ub	r8,r5[0x0]
80007160:	ec 08 18 00 	cp.b	r8,r6
   {
     sd_mmc_spi_write_open(addr);
     if (!sd_mmc_spi_write_sector_from_ram(ram))
     {
       sd_mmc_spi_write_close();
80007164:	cf 01       	brne	80007144 <sd_mmc_spi_ram_2_mem+0x18>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80007166:	30 2c       	mov	r12,2
     }
     sd_mmc_spi_write_close();
80007168:	d8 22       	popm	r4-r7,pc
8000716a:	fe b0 f5 43 	rcall	80005bf0 <sd_mmc_spi_write_close>
8000716e:	d8 2a       	popm	r4-r7,pc,r12=0

80007170 <sd_mmc_spi_mem_2_ram>:
80007170:	d4 21       	pushm	r4-r7,lr
80007172:	18 97       	mov	r7,r12
80007174:	16 94       	mov	r4,r11
80007176:	fe b0 fd 05 	rcall	80006b80 <sd_mmc_spi_check_presence>
8000717a:	e0 65 01 14 	mov	r5,276
8000717e:	30 08       	mov	r8,0
80007180:	0b 86       	ld.ub	r6,r5[0x0]
80007182:	f0 06 18 00 	cp.b	r6,r8
80007186:	c0 60       	breq	80007192 <sd_mmc_spi_mem_2_ram+0x22>
   }

   if (!sd_mmc_spi_init_done)
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80007188:	0e 9c       	mov	r12,r7
8000718a:	fe b0 f5 95 	rcall	80005cb4 <sd_mmc_spi_read_open>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
8000718e:	c0 a1       	brne	800071a2 <sd_mmc_spi_mem_2_ram+0x32>
//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80007190:	da 2a       	popm	r4-r7,pc,r12=1
80007192:	fe b0 f9 17 	rcall	800063c0 <sd_mmc_spi_internal_init>
   if (!sd_mmc_spi_init_done)
   {
      sd_mmc_spi_mem_init();
   }

   if (!sd_mmc_spi_init_done)
80007196:	0b 88       	ld.ub	r8,r5[0x0]
80007198:	ec 08 18 00 	cp.b	r8,r6
8000719c:	cf 61       	brne	80007188 <sd_mmc_spi_mem_2_ram+0x18>
8000719e:	30 2c       	mov	r12,2
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
800071a0:	d8 22       	popm	r4-r7,pc
800071a2:	08 9c       	mov	r12,r4
800071a4:	fe b0 f6 dc 	rcall	80005f5c <sd_mmc_spi_read_sector_to_ram>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
800071a8:	cf 40       	breq	80007190 <sd_mmc_spi_mem_2_ram+0x20>
800071aa:	fe b0 f5 81 	rcall	80005cac <sd_mmc_spi_read_close>
800071ae:	ec 1c 00 01 	eorl	r12,0x1
800071b2:	5c 5c       	castu.b	r12
800071b4:	d8 22       	popm	r4-r7,pc
800071b6:	d7 03       	nop

800071b8 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
800071b8:	5e ff       	retal	1
800071ba:	d7 03       	nop

800071bc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
800071bc:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800071be:	58 0c       	cp.w	r12,0
800071c0:	c0 20       	breq	800071c4 <mem_test_unit_ready+0x8>
800071c2:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
800071c4:	c8 6f       	rcall	800070d0 <sd_mmc_spi_test_unit_ready>
800071c6:	d8 02       	popm	pc

800071c8 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return status;
}
800071c8:	58 0c       	cp.w	r12,0
800071ca:	5f 0c       	sreq	r12
800071cc:	5e fc       	retal	r12
800071ce:	d7 03       	nop

800071d0 <mem_wr_protect>:
  return sector_size;
}


bool mem_wr_protect(U8 lun)
{
800071d0:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
800071d2:	58 0c       	cp.w	r12,0
800071d4:	c0 20       	breq	800071d8 <mem_wr_protect+0x8>
800071d6:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
800071d8:	c7 af       	rcall	800070cc <sd_mmc_spi_wr_protect>
800071da:	d8 02       	popm	pc

800071dc <memory_2_ram>:
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
800071dc:	d4 01       	pushm	lr
800071de:	16 98       	mov	r8,r11
800071e0:	58 0c       	cp.w	r12,0
800071e2:	c0 20       	breq	800071e6 <memory_2_ram+0xa>
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
800071e4:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
800071e6:	14 9b       	mov	r11,r10
800071e8:	10 9c       	mov	r12,r8
800071ea:	cc 3f       	rcall	80007170 <sd_mmc_spi_mem_2_ram>
800071ec:	d8 02       	popm	pc
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
800071ee:	d7 03       	nop

800071f0 <ram_2_memory>:
800071f0:	d4 01       	pushm	lr
800071f2:	16 98       	mov	r8,r11
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
800071f4:	58 0c       	cp.w	r12,0
800071f6:	c0 20       	breq	800071fa <ram_2_memory+0xa>
800071f8:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
800071fa:	14 9b       	mov	r11,r10
800071fc:	10 9c       	mov	r12,r8
800071fe:	c9 7f       	rcall	8000712c <sd_mmc_spi_ram_2_mem>
80007200:	d8 02       	popm	pc
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
80007202:	d7 03       	nop

80007204 <init_adc>:
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
  (*dst)[3] = (val >> 1) & 0xfff;
}

// setup ad7923
void init_adc(void) {
80007204:	d4 01       	pushm	lr
  int i;
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80007206:	30 1b       	mov	r11,1
80007208:	fe 7c 24 00 	mov	r12,-56320
8000720c:	fe b0 da 53 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
80007210:	e0 6b ff ff 	mov	r11,65535
80007214:	fe 7c 24 00 	mov	r12,-56320
80007218:	fe b0 da e1 	rcall	800027da <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
8000721c:	30 1b       	mov	r11,1
8000721e:	fe 7c 24 00 	mov	r12,-56320
80007222:	fe b0 da 70 	rcall	80002702 <spi_unselectChip>
  // wait for powerup time (5us in datasheet)
   for(i=0; i<100; i++) { ;; }
   //  delay_ms(1);

  /// ok... do it twice
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80007226:	30 1b       	mov	r11,1
80007228:	fe 7c 24 00 	mov	r12,-56320
8000722c:	fe b0 da 43 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
80007230:	e0 6b ff ff 	mov	r11,65535
80007234:	fe 7c 24 00 	mov	r12,-56320
80007238:	fe b0 da d1 	rcall	800027da <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
8000723c:	30 1b       	mov	r11,1
8000723e:	fe 7c 24 00 	mov	r12,-56320
80007242:	fe b0 da 60 	rcall	80002702 <spi_unselectChip>
   for(i=0; i<100; i++) { ;; }
  //  delay_ms(1);
   
   // write base configuration
   cmd = AD7927_CMD_BASE << 4;
   spi_selectChip( ADC_SPI, ADC_SPI_NPCS );
80007246:	30 1b       	mov	r11,1
80007248:	fe 7c 24 00 	mov	r12,-56320
8000724c:	fe b0 da 33 	rcall	800026b2 <spi_selectChip>
   spi_write( ADC_SPI, cmd );
80007250:	e0 6b 83 10 	mov	r11,33552
80007254:	fe 7c 24 00 	mov	r12,-56320
80007258:	fe b0 da c1 	rcall	800027da <spi_write>
   spi_unselectChip( ADC_SPI, ADC_SPI_NPCS );
8000725c:	30 1b       	mov	r11,1
8000725e:	fe 7c 24 00 	mov	r12,-56320
80007262:	fe b0 da 50 	rcall	80002702 <spi_unselectChip>
   for(i=0; i<100; i++) { ;; }
}
80007266:	d8 02       	popm	pc

80007268 <adc_poll>:
80007268:	eb cd 40 c0 	pushm	r6-r7,lr
8000726c:	20 1d       	sub	sp,4
8000726e:	30 1b       	mov	r11,1
80007270:	fe 7c 24 00 	mov	r12,-56320

  //  print_dbg("\r\nsetting up channel 0 with command: ");
  //  print_dbg_ulong(cmd);

  // write to set up channel 0
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80007274:	fe b0 da 1f 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80007278:	e0 6b 83 10 	mov	r11,33552
8000727c:	fe 7c 24 00 	mov	r12,-56320
80007280:	fe b0 da ad 	rcall	800027da <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80007284:	30 1b       	mov	r11,1
80007286:	fe 7c 24 00 	mov	r12,-56320
8000728a:	fe b0 da 3c 	rcall	80002702 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
8000728e:	30 1b       	mov	r11,1
80007290:	fe 7c 24 00 	mov	r12,-56320
80007294:	fe b0 da 0f 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80007298:	e0 6b 87 10 	mov	r11,34576
8000729c:	fe 7c 24 00 	mov	r12,-56320
800072a0:	fe b0 da 9d 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
800072a4:	fa c6 ff fe 	sub	r6,sp,-2
800072a8:	fe 7c 24 00 	mov	r12,-56320
800072ac:	0c 9b       	mov	r11,r6
800072ae:	fe b0 da a4 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800072b2:	30 1b       	mov	r11,1
800072b4:	fe 7c 24 00 	mov	r12,-56320
800072b8:	fe b0 da 25 	rcall	80002702 <spi_unselectChip>
  // values need lshift because of extremely weird timing...
  (*dst)[0] = (val >> 1) & 0xfff;
800072bc:	9a 98       	ld.uh	r8,sp[0x2]
800072be:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
800072c2:	e0 67 01 28 	mov	r7,296
800072c6:	30 1b       	mov	r11,1
  //  print_dbg("\r\n got channel 0 data: ");
  //  print_dbg_ulong(val);

  // get channel 1, setup channel 2
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800072c8:	ae 08       	st.h	r7[0x0],r8
800072ca:	fe 7c 24 00 	mov	r12,-56320
800072ce:	fe b0 d9 f2 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
800072d2:	e0 6b 8b 10 	mov	r11,35600
800072d6:	fe 7c 24 00 	mov	r12,-56320
800072da:	fe b0 da 80 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
800072de:	0c 9b       	mov	r11,r6
800072e0:	fe 7c 24 00 	mov	r12,-56320
800072e4:	fe b0 da 89 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800072e8:	30 1b       	mov	r11,1
800072ea:	fe 7c 24 00 	mov	r12,-56320
800072ee:	fe b0 da 0a 	rcall	80002702 <spi_unselectChip>
  (*dst)[1] = (val >> 1) & 0xfff;
800072f2:	9a 98       	ld.uh	r8,sp[0x2]
800072f4:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
800072f8:	30 1b       	mov	r11,1

  // get channel 2, setup channel 3
  cmd = ( AD7927_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800072fa:	ae 18       	st.h	r7[0x2],r8
800072fc:	fe 7c 24 00 	mov	r12,-56320
80007300:	fe b0 d9 d9 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80007304:	e0 6b 8f 10 	mov	r11,36624
80007308:	fe 7c 24 00 	mov	r12,-56320
8000730c:	fe b0 da 67 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
80007310:	0c 9b       	mov	r11,r6
80007312:	fe 7c 24 00 	mov	r12,-56320
80007316:	fe b0 da 70 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
8000731a:	30 1b       	mov	r11,1
8000731c:	fe 7c 24 00 	mov	r12,-56320
80007320:	fe b0 d9 f1 	rcall	80002702 <spi_unselectChip>
  (*dst)[2] = (val >> 1) & 0xfff;
80007324:	9a 98       	ld.uh	r8,sp[0x2]
80007326:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
8000732a:	30 1b       	mov	r11,1
  
  // get channel 3, dummy write
  cmd = ( AD7927_CMD_BASE ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
8000732c:	ae 28       	st.h	r7[0x4],r8
8000732e:	fe 7c 24 00 	mov	r12,-56320
80007332:	fe b0 d9 c0 	rcall	800026b2 <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80007336:	e0 6b 83 10 	mov	r11,33552
8000733a:	fe 7c 24 00 	mov	r12,-56320
8000733e:	fe b0 da 4e 	rcall	800027da <spi_write>
  spi_read(ADC_SPI, &val);
80007342:	0c 9b       	mov	r11,r6
80007344:	fe 7c 24 00 	mov	r12,-56320
80007348:	fe b0 da 57 	rcall	800027f6 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
8000734c:	30 1b       	mov	r11,1
8000734e:	fe 7c 24 00 	mov	r12,-56320
80007352:	fe b0 d9 d8 	rcall	80002702 <spi_unselectChip>
  (*dst)[3] = (val >> 1) & 0xfff;
80007356:	9a 98       	ld.uh	r8,sp[0x2]
80007358:	f1 d8 c0 2c 	bfextu	r8,r8,0x1,0xc
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
8000735c:	ae 38       	st.h	r7[0x6],r8
8000735e:	e0 66 01 18 	mov	r6,280
80007362:	8e 09       	ld.sh	r9,r7[0x0]
80007364:	8c 08       	ld.sh	r8,r6[0x0]
80007366:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
8000736a:	c0 90       	breq	8000737c <adc_poll+0x114>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
8000736c:	e0 68 01 20 	mov	r8,288
      post_event(&e);
80007370:	ac 09       	st.h	r6[0x0],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80007372:	91 19       	st.w	r8[0x4],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
80007374:	30 c9       	mov	r9,12
80007376:	10 9c       	mov	r12,r8
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80007378:	91 09       	st.w	r8[0x0],r9
8000737a:	ca 5c       	rcall	800074c4 <post_event>
8000737c:	8e 19       	ld.sh	r9,r7[0x2]
8000737e:	8c 18       	ld.sh	r8,r6[0x2]
80007380:	f2 08 19 00 	cp.h	r8,r9
      adcOldVal[i] = adcVal[i];
80007384:	c0 b0       	breq	8000739a <adc_poll+0x132>
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
80007386:	e0 68 01 18 	mov	r8,280
8000738a:	b0 19       	st.h	r8[0x2],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
8000738c:	e0 68 01 20 	mov	r8,288
80007390:	91 19       	st.w	r8[0x4],r9
80007392:	30 d9       	mov	r9,13
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
80007394:	10 9c       	mov	r12,r8
80007396:	91 09       	st.w	r8[0x0],r9
80007398:	c9 6c       	rcall	800074c4 <post_event>
8000739a:	8e 29       	ld.sh	r9,r7[0x4]
8000739c:	8c 28       	ld.sh	r8,r6[0x4]
      adcOldVal[i] = adcVal[i];
8000739e:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
800073a2:	c0 b0       	breq	800073b8 <adc_poll+0x150>
      e.eventData = (S16)(adcVal[i]);
800073a4:	e0 68 01 18 	mov	r8,280
      post_event(&e);
800073a8:	b0 29       	st.h	r8[0x4],r9

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
800073aa:	e0 68 01 20 	mov	r8,288
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
800073ae:	91 19       	st.w	r8[0x4],r9
      print_dbg_ulong(adcVal[i]);
    }

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
800073b0:	30 e9       	mov	r9,14
800073b2:	10 9c       	mov	r12,r8
800073b4:	91 09       	st.w	r8[0x0],r9
800073b6:	c8 7c       	rcall	800074c4 <post_event>
800073b8:	8e 39       	ld.sh	r9,r7[0x6]
      adcOldVal[i] = adcVal[i];
800073ba:	8c 38       	ld.sh	r8,r6[0x6]
800073bc:	f2 08 19 00 	cp.h	r8,r9
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
      e.eventData = (S16)(adcVal[i]);
800073c0:	c0 b0       	breq	800073d6 <adc_poll+0x16e>

    // TODO:
    /// probably want more filtering before posting events
    if(adcVal[i] != adcOldVal[i]) {
      adcOldVal[i] = adcVal[i];
      e.eventType = getAdcEvent(i); //kAdcEvents[i];
800073c2:	e0 68 01 18 	mov	r8,280
800073c6:	b0 39       	st.h	r8[0x6],r9
      e.eventData = (S16)(adcVal[i]);
      post_event(&e);
800073c8:	e0 68 01 20 	mov	r8,288
    }
  }
}
800073cc:	91 19       	st.w	r8[0x4],r9
800073ce:	30 f9       	mov	r9,15
800073d0:	10 9c       	mov	r12,r8
800073d2:	91 09       	st.w	r8[0x0],r9
800073d4:	c7 8c       	rcall	800074c4 <post_event>
800073d6:	2f fd       	sub	sp,-4
800073d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800073dc <init_app_timers>:
  // print_dbg("\r\n polling adc from timer callback...");
  adc_poll();
}

//====== external
void init_app_timers(void) {
800073dc:	d4 01       	pushm	lr
  set_timer(&screenTimer, eScreenTimerTag, 15,   &screen_timer_callback, 1);
800073de:	30 18       	mov	r8,1
800073e0:	fe c9 ff 5c 	sub	r9,pc,-164
800073e4:	30 fa       	mov	r10,15
800073e6:	30 0b       	mov	r11,0
800073e8:	e0 6c 01 48 	mov	r12,328
  set_timer(&encTimer,    eEncTimerTag,    5,   &enc_timer_callback,    1);
800073ec:	e0 a0 0a 82 	rcall	800088f0 <set_timer>
800073f0:	30 18       	mov	r8,1
800073f2:	fe c9 ff d2 	sub	r9,pc,-46
800073f6:	10 9b       	mov	r11,r8
800073f8:	30 5a       	mov	r10,5
  //  set_timer(&adcTimer,    eAdcTimerTag,    5,   &adc_timer_callback,    1);
  // test:
  set_timer(&adcTimer,    eAdcTimerTag,    5000,   &adc_timer_callback,    1);
800073fa:	e0 6c 01 5c 	mov	r12,348
800073fe:	e0 a0 0a 79 	rcall	800088f0 <set_timer>
80007402:	30 18       	mov	r8,1
80007404:	fe c9 ff ec 	sub	r9,pc,-20
80007408:	e0 6a 13 88 	mov	r10,5000
}
8000740c:	30 3b       	mov	r11,3
8000740e:	e0 6c 01 34 	mov	r12,308
80007412:	e0 a0 0a 6f 	rcall	800088f0 <set_timer>
80007416:	d8 02       	popm	pc

80007418 <adc_timer_callback>:
80007418:	d4 01       	pushm	lr
8000741a:	c2 7f       	rcall	80007268 <adc_poll>
8000741c:	d8 02       	popm	pc
8000741e:	d7 03       	nop

80007420 <enc_timer_callback>:
80007420:	eb cd 40 f8 	pushm	r3-r7,lr
80007424:	30 08       	mov	r8,0
80007426:	e0 66 01 30 	mov	r6,304
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
8000742a:	e0 67 18 38 	mov	r7,6200
8000742e:	ac 88       	st.b	r6[0x0],r8
80007430:	e0 65 01 70 	mov	r5,368
    val = enc[i].val;
80007434:	30 08       	mov	r8,0
80007436:	30 34       	mov	r4,3
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
      e.eventType = enc[i].event;
      e.eventData = val;
      enc[i].val = 0;
80007438:	10 93       	mov	r3,r8
8000743a:	f0 08 00 19 	add	r9,r8,r8<<0x1
// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
8000743e:	f2 ce ff ff 	sub	lr,r9,-1

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
80007442:	ee 0e 00 2b 	add	r11,r7,lr<<0x2
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80007446:	ee 0e 04 2a 	ld.sh	r10,r7[lr<<0x2]
8000744a:	96 1b       	ld.sh	r11,r11[0x2]
8000744c:	f6 0c 11 00 	rsub	r12,r11,0
80007450:	f6 0a 19 00 	cp.h	r10,r11
80007454:	e0 89 00 04 	brgt	8000745c <enc_timer_callback+0x3c>
      e.eventType = enc[i].event;
80007458:	18 3a       	cp.w	r10,r12
8000745a:	c0 c4       	brge	80007472 <enc_timer_callback+0x52>
      e.eventData = val;
8000745c:	ee 09 00 29 	add	r9,r7,r9<<0x2
      enc[i].val = 0;
80007460:	72 28       	ld.w	r8,r9[0x8]
80007462:	8b 1a       	st.w	r5[0x4],r10
      post_event(&e);
80007464:	8b 08       	st.w	r5[0x0],r8
80007466:	ee 0e 0a 23 	st.h	r7[lr<<0x2],r3
8000746a:	e0 6c 01 70 	mov	r12,368
}

// encoder accumulator polling callback
static void enc_timer_callback(int tag) {
  s16 val;
  for(i=0; i<NUM_ENC; i++) {
8000746e:	c2 bc       	rcall	800074c4 <post_event>
80007470:	0d 88       	ld.ub	r8,r6[0x0]
80007472:	2f f8       	sub	r8,-1
80007474:	5c 58       	castu.b	r8
80007476:	ac 88       	st.b	r6[0x0],r8
80007478:	e8 08 18 00 	cp.b	r8,r4
      e.eventData = val;
      enc[i].val = 0;
      post_event(&e);
    }
  }
}
8000747c:	fe 98 ff df 	brls	8000743a <enc_timer_callback+0x1a>
80007480:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80007484 <screen_timer_callback>:
80007484:	d4 01       	pushm	lr
80007486:	e0 68 02 a4 	mov	r8,676
8000748a:	11 88       	ld.ub	r8,r8[0x0]
8000748c:	58 08       	cp.w	r8,0
8000748e:	c0 70       	breq	8000749c <screen_timer_callback+0x18>
  print_dbg(" \lcycles:"); print_dbg_ulong(cyclesNow - cycles);
  cycles = cyclesNow;
  */

  if(refresh) {
    e.eventType = kEventRefresh;
80007490:	e0 68 01 70 	mov	r8,368
80007494:	31 09       	mov	r9,16
    post_event(&e);
80007496:	10 9c       	mov	r12,r8
80007498:	91 09       	st.w	r8[0x0],r9
8000749a:	c1 5c       	rcall	800074c4 <post_event>
8000749c:	d8 02       	popm	pc
8000749e:	d7 03       	nop

800074a0 <init_events>:
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
800074a0:	e0 6a 01 7c 	mov	r10,380
800074a4:	30 08       	mov	r8,0
  getIdx = 0;
800074a6:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
800074a8:	e0 6a 01 80 	mov	r10,384
  int k;
  
  // set queue (circular list) to empty

  putIdx = 0;
  getIdx = 0;
800074ac:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
800074ae:	95 08       	st.w	r10[0x0],r8
800074b0:	e0 68 01 84 	mov	r8,388
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
800074b4:	f0 ca ff 00 	sub	r10,r8,-256

  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
800074b8:	91 09       	st.w	r8[0x0],r9
800074ba:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].eventType = 0;
    sysEvents[ k ].eventData = 0;
  }
}
800074bc:	2f 88       	sub	r8,-8
800074be:	14 38       	cp.w	r8,r10
800074c0:	cf c1       	brne	800074b8 <init_events+0x18>
800074c2:	5e fc       	retal	r12

800074c4 <post_event>:
800074c4:	d4 01       	pushm	lr
800074c6:	e1 bb 00 00 	mfsr	r11,0x0
800074ca:	d3 23       	ssrf	0x12
    print_dbg_ulong(e->eventType); print_dbg(".");
  } 
  */

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
800074cc:	e0 69 01 7c 	mov	r9,380
  INCR_EVENT_INDEX( putIdx );
800074d0:	72 0a       	ld.w	r10,r9[0x0]
800074d2:	f4 c8 ff ff 	sub	r8,r10,-1
800074d6:	93 08       	st.w	r9[0x0],r8
800074d8:	e0 48 00 20 	cp.w	r8,32
800074dc:	f9 b8 00 00 	moveq	r8,0
800074e0:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
800074e4:	e0 6e 01 80 	mov	lr,384
800074e8:	7c 0e       	ld.w	lr,lr[0x0]
    sysEvents[ putIdx ].eventType = e->eventType;
800074ea:	10 3e       	cp.w	lr,r8
    sysEvents[ putIdx ].eventData = e->eventData;
800074ec:	c1 00       	breq	8000750c <post_event+0x48>
800074ee:	e0 69 01 84 	mov	r9,388
800074f2:	f2 08 00 3a 	add	r10,r9,r8<<0x3
800074f6:	78 1e       	ld.w	lr,r12[0x4]

  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
  if ( putIdx != getIdx  ) {
    sysEvents[ putIdx ].eventType = e->eventType;
800074f8:	95 1e       	st.w	r10[0x4],lr
800074fa:	78 0a       	ld.w	r10,r12[0x0]
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
  }
  
  if (fReenableInterrupts) {
800074fc:	30 1c       	mov	r12,1
800074fe:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
    Enable_interrupt_level( TIMER_INT_LEVEL );
80007502:	ed bb 00 12 	bld	r11,0x12
    sysEvents[ putIdx ].eventType = e->eventType;
    sysEvents[ putIdx ].eventData = e->eventData;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80007506:	c0 20       	breq	8000750a <post_event+0x46>
80007508:	d5 23       	csrf	0x12
8000750a:	d8 02       	popm	pc
8000750c:	93 0a       	st.w	r9[0x0],r10
8000750e:	30 0c       	mov	r12,0
80007510:	cf 9b       	rjmp	80007502 <post_event+0x3e>
80007512:	d7 03       	nop

80007514 <get_next_event>:
80007514:	18 99       	mov	r9,r12
80007516:	e1 bb 00 00 	mfsr	r11,0x0
// Returns non-zero if an event was available
bool get_next_event( event_t *e ) {
  bool status;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );
8000751a:	d3 23       	ssrf	0x12
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
8000751c:	e0 68 01 7c 	mov	r8,380
80007520:	e0 6a 01 80 	mov	r10,384
80007524:	70 0c       	ld.w	r12,r8[0x0]
80007526:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
80007528:	18 38       	cp.w	r8,r12
8000752a:	c1 80       	breq	8000755a <get_next_event+0x46>
8000752c:	2f f8       	sub	r8,-1
8000752e:	95 08       	st.w	r10[0x0],r8
80007530:	e0 48 00 20 	cp.w	r8,32
80007534:	f9 b8 00 00 	moveq	r8,0
    e->eventType = sysEvents[ getIdx ].eventType;
80007538:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->eventData = sysEvents[ getIdx ].eventData;
8000753c:	e0 6a 01 84 	mov	r10,388
  Disable_interrupt_level( TIMER_INT_LEVEL );
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
80007540:	f4 08 00 3c 	add	r12,r10,r8<<0x3
80007544:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
    e->eventData = sysEvents[ getIdx ].eventData;
80007548:	78 1c       	ld.w	r12,r12[0x4]
    e->eventType  = 0xff;
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
8000754a:	93 08       	st.w	r9[0x0],r8
8000754c:	93 1c       	st.w	r9[0x4],r12
8000754e:	30 1c       	mov	r12,1
    Enable_interrupt_level( TIMER_INT_LEVEL );
80007550:	ed bb 00 12 	bld	r11,0x12
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
    e->eventData = 0;
80007554:	5e 0c       	reteq	r12
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
80007556:	d5 23       	csrf	0x12
80007558:	5e fc       	retal	r12
    e->eventData = 0;
8000755a:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->eventType = sysEvents[ getIdx ].eventType;
    e->eventData = sysEvents[ getIdx ].eventData;
    status = true;
  } else {
    e->eventType  = 0xff;
8000755c:	e0 68 00 ff 	mov	r8,255
    e->eventData = 0;
    status = false;
  }

  if (fReenableInterrupts) {
80007560:	93 1c       	st.w	r9[0x4],r12
80007562:	93 08       	st.w	r9[0x0],r8
80007564:	ed bb 00 12 	bld	r11,0x12
80007568:	5e 0c       	reteq	r12
8000756a:	cf 6b       	rjmp	80007556 <get_next_event+0x42>

8000756c <process_enc>:
  enc[3].thresh = 40;

}

// post events based on encoder movements
void process_enc( const U8 idx) {
8000756c:	eb cd 40 f8 	pushm	r3-r7,lr
  //event_t e;  
  // S8 val = 0;
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);
80007570:	e0 65 18 38 	mov	r5,6200
80007574:	f8 0c 00 14 	add	r4,r12,r12<<0x1
80007578:	ea 04 00 26 	add	r6,r5,r4<<0x2
8000757c:	0c 97       	mov	r7,r6
8000757e:	0f 3c       	ld.ub	r12,r7++
80007580:	fe b0 d6 59 	rcall	80002232 <gpio_get_pin_value>
80007584:	18 93       	mov	r3,r12
80007586:	0f 8c       	ld.ub	r12,r7[0x0]
80007588:	fe b0 d6 55 	rcall	80002232 <gpio_get_pin_value>
8000758c:	0d a8       	ld.ub	r8,r6[0x2]
8000758e:	e6 0c 00 13 	add	r3,r3,r12<<0x1

  if (pos != enc[idx].pos) {
80007592:	5c 53       	castu.b	r3
80007594:	e6 08 18 00 	cp.b	r8,r3
    enc[idx].val += enc_map[enc[idx].pos][pos];
80007598:	c0 e0       	breq	800075b4 <process_enc+0x48>
    enc[idx].pos = pos;
8000759a:	2f f4       	sub	r4,-1
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);

  if (pos != enc[idx].pos) {
    enc[idx].val += enc_map[enc[idx].pos][pos];
8000759c:	ac a3       	st.b	r6[0x2],r3
8000759e:	ea 04 04 29 	ld.sh	r9,r5[r4<<0x2]
800075a2:	e6 08 00 23 	add	r3,r3,r8<<0x2
800075a6:	fe c8 e2 ae 	sub	r8,pc,-7506
800075aa:	f0 03 06 08 	ld.sb	r8,r8[r3]
800075ae:	12 08       	add	r8,r9
800075b0:	ea 04 0a 28 	st.h	r5[r4<<0x2],r8
800075b4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

800075b8 <init_encoders>:
800075b8:	eb cd 40 e0 	pushm	r5-r7,lr
800075bc:	31 88       	mov	r8,24
800075be:	e0 67 18 38 	mov	r7,6200
// initialize encoder positions
void init_encoders(void) {
  U8 i;
  // constant data
  enc[0].pin[0] = ENC0_S0_PIN;
  enc[0].pin[1] = ENC0_S1_PIN;
800075c2:	ae 88       	st.b	r7[0x0],r8
800075c4:	31 98       	mov	r8,25
  enc[0].event = kEventEncoder0;
800075c6:	ae 98       	st.b	r7[0x1],r8
800075c8:	30 88       	mov	r8,8
  enc[1].pin[0] = ENC1_S0_PIN;
800075ca:	8f 28       	st.w	r7[0x8],r8
800075cc:	31 a8       	mov	r8,26
800075ce:	ef 68 00 0c 	st.b	r7[12],r8
  enc[1].pin[1] = ENC1_S1_PIN;
800075d2:	31 b8       	mov	r8,27
800075d4:	ef 68 00 0d 	st.b	r7[13],r8
  enc[1].event = kEventEncoder1;
800075d8:	30 98       	mov	r8,9
  enc[2].pin[0] = ENC2_S0_PIN;
800075da:	8f 58       	st.w	r7[0x14],r8
800075dc:	31 c8       	mov	r8,28
800075de:	ef 68 00 18 	st.b	r7[24],r8
  enc[2].pin[1] = ENC2_S1_PIN;
800075e2:	31 e8       	mov	r8,30
800075e4:	ef 68 00 19 	st.b	r7[25],r8
  enc[2].event = kEventEncoder2;
800075e8:	30 a8       	mov	r8,10
  enc[3].pin[0] = ENC3_S0_PIN;
800075ea:	8f 88       	st.w	r7[0x20],r8
800075ec:	32 28       	mov	r8,34
800075ee:	ef 68 00 24 	st.b	r7[36],r8
  enc[3].pin[1] = ENC3_S1_PIN;
800075f2:	32 38       	mov	r8,35
800075f4:	ef 68 00 25 	st.b	r7[37],r8
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800075f8:	30 b8       	mov	r8,11
  enc[2].pin[0] = ENC2_S0_PIN;
  enc[2].pin[1] = ENC2_S1_PIN;
  enc[2].event = kEventEncoder2;
  enc[3].pin[0] = ENC3_S0_PIN;
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
800075fa:	31 8c       	mov	r12,24
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800075fc:	8f b8       	st.w	r7[0x2c],r8
800075fe:	fe b0 d6 1a 	rcall	80002232 <gpio_get_pin_value>
80007602:	18 96       	mov	r6,r12
80007604:	0f 9c       	ld.ub	r12,r7[0x1]
80007606:	fe b0 d6 16 	rcall	80002232 <gpio_get_pin_value>
8000760a:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
8000760e:	30 f6       	mov	r6,15
    enc[i].thresh = 15;
80007610:	ae ac       	st.b	r7[0x2],r12
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80007612:	ae 36       	st.h	r7[0x6],r6
80007614:	ef 3c 00 0c 	ld.ub	r12,r7[12]
80007618:	fe b0 d6 0d 	rcall	80002232 <gpio_get_pin_value>
8000761c:	18 95       	mov	r5,r12
8000761e:	ef 3c 00 0d 	ld.ub	r12,r7[13]
80007622:	fe b0 d6 08 	rcall	80002232 <gpio_get_pin_value>
80007626:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
8000762a:	ef 56 00 12 	st.h	r7[18],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
8000762e:	ef 6c 00 0e 	st.b	r7[14],r12
80007632:	ef 3c 00 18 	ld.ub	r12,r7[24]
80007636:	fe b0 d5 fe 	rcall	80002232 <gpio_get_pin_value>
8000763a:	18 95       	mov	r5,r12
8000763c:	ef 3c 00 19 	ld.ub	r12,r7[25]
80007640:	fe b0 d5 f9 	rcall	80002232 <gpio_get_pin_value>
80007644:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = 15;
80007648:	ef 56 00 1e 	st.h	r7[30],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
8000764c:	ef 6c 00 1a 	st.b	r7[26],r12
80007650:	ef 3c 00 24 	ld.ub	r12,r7[36]
80007654:	fe b0 d5 ef 	rcall	80002232 <gpio_get_pin_value>
80007658:	18 96       	mov	r6,r12
8000765a:	ef 3c 00 25 	ld.ub	r12,r7[37]
8000765e:	fe b0 d5 ea 	rcall	80002232 <gpio_get_pin_value>
80007662:	32 88       	mov	r8,40
80007664:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
    enc[i].thresh = 15;
  }

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;
80007668:	ef 58 00 2a 	st.h	r7[42],r8
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
8000766c:	ef 6c 00 26 	st.b	r7[38],r12

  ////// TEST:
  /// enc3 scrolls a menu, make it slower
  enc[3].thresh = 40;

}
80007670:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80007674 <files_check_dsp>:
    
  }
}

// look for dsp dir, create if it doesn't exist
void files_check_dsp(void) {
80007674:	d4 01       	pushm	lr
  nav_dir_root();
80007676:	fe b0 f0 93 	rcall	8000579c <nav_dir_root>
  if (nav_filelist_findname("dsp", 0)) {
8000767a:	30 0b       	mov	r11,0
8000767c:	fe cc e3 74 	sub	r12,pc,-7308
80007680:	fe b0 ef 7a 	rcall	80005574 <nav_filelist_findname>
    print_dbg("\r\n found dsp dir? now at: ");
    print_dbg( name_buf);
    print_dbg( CRLF);
    //// print contents...
  } else {
    print_dbg("\r\n attempting to create dsp dir");
80007684:	c0 a1       	brne	80007698 <files_check_dsp+0x24>
80007686:	fe cc e2 ca 	sub	r12,pc,-7478
    nav_dir_make("dsp"); 
8000768a:	fe b0 f2 21 	rcall	80005acc <print_dbg>
8000768e:	fe cc e3 86 	sub	r12,pc,-7290
// look for dsp dir, create if it doesn't exist
void files_check_dsp(void) {
  nav_dir_root();
  if (nav_filelist_findname("dsp", 0)) {
    // ...
    nav_file_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
80007692:	fe b0 f1 bd 	rcall	80005a0c <nav_dir_make>
80007696:	d8 02       	popm	pc
80007698:	30 19       	mov	r9,1
8000769a:	31 eb       	mov	r11,30
8000769c:	12 9a       	mov	r10,r9
    print_dbg("\r\n found dsp dir? now at: ");
8000769e:	e0 6c 02 84 	mov	r12,644
800076a2:	fe b0 ee 4d 	rcall	8000533c <nav_file_name>
    print_dbg( name_buf);
800076a6:	fe cc e3 0a 	sub	r12,pc,-7414
    print_dbg( CRLF);
800076aa:	fe b0 f2 11 	rcall	80005acc <print_dbg>
800076ae:	e0 6c 02 84 	mov	r12,644
800076b2:	fe b0 f2 0d 	rcall	80005acc <print_dbg>
800076b6:	fe cc e2 fe 	sub	r12,pc,-7426
800076ba:	fe b0 f2 09 	rcall	80005acc <print_dbg>
800076be:	d8 02       	popm	pc

800076c0 <files_check_scenes>:
800076c0:	d4 01       	pushm	lr
800076c2:	fe b0 f0 6d 	rcall	8000579c <nav_dir_root>
800076c6:	30 0b       	mov	r11,0
800076c8:	fe cc e2 ec 	sub	r12,pc,-7444
800076cc:	fe b0 ef 54 	rcall	80005574 <nav_filelist_findname>
800076d0:	c0 a1       	brne	800076e4 <files_check_scenes+0x24>
800076d2:	fe cc e2 ce 	sub	r12,pc,-7474
800076d6:	fe b0 f1 fb 	rcall	80005acc <print_dbg>
800076da:	fe cc e2 fe 	sub	r12,pc,-7426
// look for scenes dir, create if it doesn't exist
void files_check_scenes(void) {
  nav_dir_root();
  if (nav_filelist_findname("scenes", 0)) {
    // ...
    nav_file_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
800076de:	fe b0 f1 97 	rcall	80005a0c <nav_dir_make>
800076e2:	d8 02       	popm	pc
800076e4:	30 19       	mov	r9,1
800076e6:	31 eb       	mov	r11,30
800076e8:	12 9a       	mov	r10,r9
    print_dbg("\r\n found scenes dir? now at: ");
800076ea:	e0 6c 02 84 	mov	r12,644
800076ee:	fe b0 ee 27 	rcall	8000533c <nav_file_name>
    print_dbg( name_buf);
800076f2:	fe cc e3 0e 	sub	r12,pc,-7410
    print_dbg( CRLF);
800076f6:	fe b0 f1 eb 	rcall	80005acc <print_dbg>
800076fa:	e0 6c 02 84 	mov	r12,644
800076fe:	fe b0 f1 e7 	rcall	80005acc <print_dbg>
80007702:	fe cc e3 4a 	sub	r12,pc,-7350
80007706:	fe b0 f1 e3 	rcall	80005acc <print_dbg>
8000770a:	d8 02       	popm	pc

8000770c <files_list>:
8000770c:	eb cd 40 e0 	pushm	r5-r7,lr
80007710:	31 eb       	mov	r11,30
80007712:	e0 6c 02 84 	mov	r12,644
80007716:	fe b0 ef 87 	rcall	80005624 <nav_dir_name>
8000771a:	fe cc e2 f2 	sub	r12,pc,-7438
8000771e:	fe b0 f1 d7 	rcall	80005acc <print_dbg>
80007722:	fe b0 ee 01 	rcall	80005324 <nav_drive_get>
80007726:	2b fc       	sub	r12,-65
  // Get the volume name
  nav_dir_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH);
  // Display general informations (drive letter and current path)
  print_dbg( "\r\nVolume is ");
  print_dbg_char( 'A' + nav_drive_get());
  print_dbg( ":\r\nDir name is ");
80007728:	fe b0 f1 a6 	rcall	80005a74 <print_dbg_char>
8000772c:	fe cc e2 f4 	sub	r12,pc,-7436
  print_dbg( name_buf);
80007730:	fe b0 f1 ce 	rcall	80005acc <print_dbg>
  print_dbg( CRLF);
80007734:	e0 6c 02 84 	mov	r12,644
80007738:	fe b0 f1 ca 	rcall	80005acc <print_dbg>
  // Try to sort items by folders
  if (!nav_filelist_first(FS_DIR)) {
8000773c:	fe cc e3 84 	sub	r12,pc,-7292
80007740:	fe b0 f1 c6 	rcall	80005acc <print_dbg>
    // Sort items by files
    nav_filelist_first(FS_FILE);
  }
  // Display items informations
  print_dbg( "\tSize (Bytes)\tName\r\n");
80007744:	30 0c       	mov	r12,0
80007746:	fe b0 f0 ab 	rcall	8000589c <nav_filelist_first>
  // reset filelist before to start the listing
  nav_filelist_reset();
8000774a:	c4 70       	breq	800077d8 <files_list+0xcc>
  // While an item can be found
  while (nav_filelist_set(0, FS_FIND_NEXT)) {
    // Get and display current item informations
    print_dbg( (nav_file_isdir()) ? "Dir\t" : "   \t");
8000774c:	fe cc e3 04 	sub	r12,pc,-7420
  // Display items informations
  print_dbg( "\tSize (Bytes)\tName\r\n");
  // reset filelist before to start the listing
  nav_filelist_reset();
  // While an item can be found
  while (nav_filelist_set(0, FS_FIND_NEXT)) {
80007750:	fe b0 f1 be 	rcall	80005acc <print_dbg>
    // Get and display current item informations
    print_dbg( (nav_file_isdir()) ? "Dir\t" : "   \t");
80007754:	fe b0 ef 22 	rcall	80005598 <nav_filelist_reset>
80007758:	fe c6 e2 f0 	sub	r6,pc,-7440
8000775c:	fe c7 e2 fc 	sub	r7,pc,-7428
80007760:	c2 08       	rjmp	800077a0 <files_list+0x94>
    print_dbg_ulong(nav_file_lgt());
80007762:	fe b0 ed e9 	rcall	80005334 <nav_file_isdir>
80007766:	ec 0c 17 10 	movne	r12,r6
    print_dbg( "\t\t");
8000776a:	ee 0c 17 00 	moveq	r12,r7
8000776e:	fe b0 f1 af 	rcall	80005acc <print_dbg>
    nav_file_name((FS_STRING)name_buf, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
80007772:	fe b0 ed dd 	rcall	8000532c <nav_file_lgt>
80007776:	fe b0 f1 87 	rcall	80005a84 <print_dbg_ulong>
8000777a:	fe cc e3 0a 	sub	r12,pc,-7414
    print_dbg( name_buf);
8000777e:	fe b0 f1 a7 	rcall	80005acc <print_dbg>
    print_dbg( CRLF);
80007782:	30 19       	mov	r9,1
80007784:	31 eb       	mov	r11,30
80007786:	12 9a       	mov	r10,r9
  // Display items informations
  print_dbg( "\tSize (Bytes)\tName\r\n");
  // reset filelist before to start the listing
  nav_filelist_reset();
  // While an item can be found
  while (nav_filelist_set(0, FS_FIND_NEXT)) {
80007788:	e0 6c 02 84 	mov	r12,644
8000778c:	fe b0 ed d8 	rcall	8000533c <nav_file_name>
80007790:	e0 6c 02 84 	mov	r12,644
    print_dbg( name_buf);
    print_dbg( CRLF);

  }
  // Display the files number
  print_dbg_ulong( nav_filelist_nb(FS_FILE));
80007794:	fe b0 f1 9c 	rcall	80005acc <print_dbg>
80007798:	fe cc e3 e0 	sub	r12,pc,-7200
8000779c:	fe b0 f1 98 	rcall	80005acc <print_dbg>
  print_dbg( "  Files\r\n");
800077a0:	30 1b       	mov	r11,1
800077a2:	30 0c       	mov	r12,0
800077a4:	fe b0 ee 32 	rcall	80005408 <nav_filelist_set>
  // Display the folders number
  print_dbg_ulong( nav_filelist_nb(FS_DIR));
800077a8:	18 95       	mov	r5,r12
800077aa:	cd c1       	brne	80007762 <files_list+0x56>
800077ac:	30 1c       	mov	r12,1
800077ae:	fe b0 f0 95 	rcall	800058d8 <nav_filelist_nb>
  print_dbg( "  Dir\r\n");
800077b2:	5c 7c       	castu.h	r12
800077b4:	fe b0 f1 68 	rcall	80005a84 <print_dbg_ulong>
}
800077b8:	fe cc e3 44 	sub	r12,pc,-7356
  print_dbg( name_buf);
  print_dbg( CRLF);
  // Try to sort items by folders
  if (!nav_filelist_first(FS_DIR)) {
    // Sort items by files
    nav_filelist_first(FS_FILE);
800077bc:	fe b0 f1 88 	rcall	80005acc <print_dbg>
800077c0:	0a 9c       	mov	r12,r5
800077c2:	fe b0 f0 8b 	rcall	800058d8 <nav_filelist_nb>
800077c6:	5c 7c       	castu.h	r12
800077c8:	fe b0 f1 5e 	rcall	80005a84 <print_dbg_ulong>
800077cc:	fe cc e3 4c 	sub	r12,pc,-7348
800077d0:	fe b0 f1 7e 	rcall	80005acc <print_dbg>
800077d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800077d8:	30 1c       	mov	r12,1
800077da:	fe b0 f0 61 	rcall	8000589c <nav_filelist_first>
800077de:	cb 7b       	rjmp	8000774c <files_list+0x40>

800077e0 <init_files>:
800077e0:	d4 01       	pushm	lr
800077e2:	fe b0 ef f3 	rcall	800057c8 <nav_reset>
800077e6:	fe b0 ef d7 	rcall	80005794 <nav_drive_nb>
800077ea:	20 1c       	sub	r12,1
800077ec:	5c 5c       	castu.b	r12
800077ee:	fe b0 ef ad 	rcall	80005748 <nav_drive_set>
800077f2:	fe b0 ef 95 	rcall	8000571c <nav_partition_mount>
800077f6:	e0 6c fa 00 	mov	r12,64000
800077fa:	e0 a0 03 1b 	rcall	80007e30 <alloc_mem>
800077fe:	c1 40       	breq	80007826 <init_files+0x46>
80007800:	e0 68 18 6c 	mov	r8,6252
80007804:	91 0c       	st.w	r8[0x0],r12
80007806:	e0 6c 07 80 	mov	r12,1920
8000780a:	e0 a0 03 13 	rcall	80007e30 <alloc_mem>
8000780e:	c0 70       	breq	8000781c <init_files+0x3c>
80007810:	e0 68 18 68 	mov	r8,6248
80007814:	91 0c       	st.w	r8[0x0],r12
80007816:	c5 5f       	rcall	800076c0 <files_check_scenes>
80007818:	c2 ef       	rcall	80007674 <files_check_dsp>
8000781a:	d8 02       	popm	pc
  // allocate SDRAM for dsp list
  tmp = (heap_t)alloc_mem(MAX_NUM_DSP * MAX_FILE_PATH_LENGTH);
  if(tmp != ALLOC_FAIL) {
    dsp_name_buf = (char*)tmp;
  } else {
    print_dbg("\r\n allocation error in files init");
8000781c:	fe cc e3 70 	sub	r12,pc,-7312
80007820:	fe b0 f1 56 	rcall	80005acc <print_dbg>
  // allocate SDRAM for blackfin boot image
  tmp = alloc_mem(MAX_BFIN_LDR_BYTES);
  if(tmp != ALLOC_FAIL) {
    load_buf = tmp;
  } else {
    print_dbg("\r\nallocation error in files init");
80007824:	cf 9b       	rjmp	80007816 <init_files+0x36>
80007826:	fe cc e3 9e 	sub	r12,pc,-7266
8000782a:	fe b0 f1 51 	rcall	80005acc <print_dbg>
8000782e:	ce cb       	rjmp	80007806 <init_files+0x26>

80007830 <init_clocks>:
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
}


// initialize clocks
void init_clocks(void) {
80007830:	d4 01       	pushm	lr
  /// from 251e...
  // Switch to OSC0 to speed up  booting
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pm_switch_to_osc0( &AVR32_PM, FOSC0, OSC0_STARTUP );
80007832:	30 3a       	mov	r10,3
80007834:	e0 6b 1b 00 	mov	r11,6912
80007838:	ea 1b 00 b7 	orh	r11,0xb7
8000783c:	fe 7c 0c 00 	mov	r12,-62464
80007840:	fe b0 d6 c6 	rcall	800025cc <pm_switch_to_osc0>

  // Set PLL0 (fed from OSC0 = 12 MHz) to 132 MHz
  pm_pll_setup( &AVR32_PM,
80007844:	31 0e       	mov	lr,16
80007846:	30 08       	mov	r8,0
80007848:	1a de       	st.w	--sp,lr
8000784a:	10 9b       	mov	r11,r8
8000784c:	30 19       	mov	r9,1
8000784e:	30 aa       	mov	r10,10
80007850:	fe 7c 0c 00 	mov	r12,-62464
80007854:	fe b0 d6 8e 	rcall	80002570 <pm_pll_setup>
		0,   // osc.
		16 ); // lockcount.

  // Set PLL operating range and divider (fpll = fvco/2)
  // -> PLL0 output = 66 MHz
  pm_pll_set_option( &AVR32_PM,
80007858:	30 08       	mov	r8,0
8000785a:	30 19       	mov	r9,1
8000785c:	10 9b       	mov	r11,r8
8000785e:	12 9a       	mov	r10,r9
80007860:	fe 7c 0c 00 	mov	r12,-62464
80007864:	fe b0 d6 97 	rcall	80002592 <pm_pll_set_option>
		     1,  // pll_freq.
		     1,  // pll_div2.
		     0 ); // pll_wbwdisable.

  // start PLL0 and wait for the lock
  pm_pll_enable( &AVR32_PM, 0 );
80007868:	30 0b       	mov	r11,0
8000786a:	fe 7c 0c 00 	mov	r12,-62464
8000786e:	fe b0 d6 9e 	rcall	800025aa <pm_pll_enable>
  pm_wait_for_pll0_locked( &AVR32_PM );
80007872:	fe 7c 0c 00 	mov	r12,-62464
80007876:	fe b0 d6 a1 	rcall	800025b8 <pm_wait_for_pll0_locked>

  // By default, all peripheral clocks to run at master clock rate

  // Set one waitstate for the flash.  Necessary for > 33MHz CPU freq.
  flashc_set_wait_state( 1 );
8000787a:	30 1c       	mov	r12,1
8000787c:	fe b0 d4 ca 	rcall	80002210 <flashc_set_wait_state>

  // Switch to PLL0 as the master clock
  pm_switch_to_clock( &AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0) ;
80007880:	30 2b       	mov	r11,2
80007882:	fe 7c 0c 00 	mov	r12,-62464
80007886:	fe b0 d6 9e 	rcall	800025c2 <pm_switch_to_clock>
8000788a:	2f fd       	sub	sp,-4
#endif

  // intitialize millisecond delay engine
  delay_init(sysclk_get_cpu_hz());
  */
}
8000788c:	d8 02       	popm	pc
8000788e:	d7 03       	nop

80007890 <init_bfin_resources>:
80007890:	eb cd 40 80 	pushm	r7,lr
80007894:	20 4d       	sub	sp,16
80007896:	fe c8 df aa 	sub	r8,pc,-8278
8000789a:	f0 ea 00 08 	ld.d	r10,r8[8]
8000789e:	fa eb 00 08 	st.d	sp[8],r10
800078a2:	f0 e8 00 00 	ld.d	r8,r8[0]
800078a6:	1a 97       	mov	r7,sp
800078a8:	fa e9 00 00 	st.d	sp[0],r8
    .spi_mode     = 1,
    .modfdis      = 1
  };

  // assign pins to SPI.
  gpio_enable_module(BFIN_SPI_GPIO_MAP,
800078ac:	30 5b       	mov	r11,5
800078ae:	fe cc df 7a 	sub	r12,pc,-8326
		     sizeof(BFIN_SPI_GPIO_MAP) / sizeof(BFIN_SPI_GPIO_MAP[0]));

  // intialize as master
  spi_initMaster(BFIN_SPI, &spiOptions);
800078b2:	fe b0 d5 2d 	rcall	8000230c <gpio_enable_module>
800078b6:	1a 9b       	mov	r11,sp
800078b8:	fe 7c 24 00 	mov	r12,-56320

  // set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(BFIN_SPI, 0, 0, 0);
800078bc:	fe b0 d6 c9 	rcall	8000264e <spi_initMaster>
800078c0:	30 09       	mov	r9,0
800078c2:	fe 7c 24 00 	mov	r12,-56320
800078c6:	12 9a       	mov	r10,r9
800078c8:	12 9b       	mov	r11,r9

  // enable SPI.
  spi_enable(BFIN_SPI);
800078ca:	fe b0 d6 df 	rcall	80002688 <spi_selectionMode>
800078ce:	fe 7c 24 00 	mov	r12,-56320

  // intialize the chip register
  spi_setupChipReg(BFIN_SPI, &spiOptions, FPBA_HZ);
800078d2:	fe b0 d7 81 	rcall	800027d4 <spi_enable>
800078d6:	1a 9b       	mov	r11,sp
800078d8:	e0 6a 14 80 	mov	r10,5248
800078dc:	ea 1a 03 ef 	orh	r10,0x3ef
800078e0:	fe 7c 24 00 	mov	r12,-56320
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
800078e4:	fe b0 d7 22 	rcall	80002728 <spi_setupChipReg>
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
  spiOptions.spck_delay = 40;	// delay between CS and transfer
  spiOptions.trans_delay = 10;	// delay between transfers
  spiOptions.stay_act = 1;
800078e8:	30 18       	mov	r8,1
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // add a second chip register for the serial ADC
  // chip select 1 is AD7923 12-bit ADC
  spiOptions.reg = ADC_SPI_NPCS;
800078ea:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate = 10000000;	// range in datasheet is 10kHz - 20MHz
800078ee:	ba 88       	st.b	sp[0x0],r8
800078f0:	e0 68 96 80 	mov	r8,38528
800078f4:	ea 18 00 98 	orh	r8,0x98
  spiOptions.bits = 16;		// 1 bit leading zero, 3 channel address, 12 data 
800078f8:	50 18       	stdsp	sp[0x4],r8
800078fa:	31 08       	mov	r8,16
  spiOptions.spi_mode = 2;	// sample on falling edge, idle high
800078fc:	fb 68 00 08 	st.b	sp[8],r8
80007900:	30 28       	mov	r8,2
  spiOptions.spck_delay = 40;	// delay between CS and transfer
80007902:	fb 68 00 0c 	st.b	sp[12],r8
80007906:	32 88       	mov	r8,40
  spiOptions.trans_delay = 10;	// delay between transfers
80007908:	fb 68 00 09 	st.b	sp[9],r8
8000790c:	30 a8       	mov	r8,10
  spiOptions.stay_act = 1;
  spiOptions.modfdis = 0;
8000790e:	fb 68 00 0a 	st.b	sp[10],r8
80007912:	30 08       	mov	r8,0
80007914:	1a 9b       	mov	r11,sp
  spi_setupChipReg( BFIN_SPI, &spiOptions, FPBA_HZ );
80007916:	fb 68 00 0d 	st.b	sp[13],r8
8000791a:	e0 6a 14 80 	mov	r10,5248
8000791e:	ea 1a 03 ef 	orh	r10,0x3ef
80007922:	fe 7c 24 00 	mov	r12,-56320
  
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
80007926:	fe b0 d7 01 	rcall	80002728 <spi_setupChipReg>
8000792a:	32 1c       	mov	r12,33
}
8000792c:	fe b0 d4 79 	rcall	8000221e <gpio_enable_pin_pull_up>
80007930:	2f cd       	sub	sp,-16
80007932:	e3 cd 80 80 	ldm	sp++,r7,pc
80007936:	d7 03       	nop

80007938 <init_gpio>:
80007938:	d4 01       	pushm	lr
8000793a:	31 8c       	mov	r12,24
8000793c:	fe b0 d4 71 	rcall	8000221e <gpio_enable_pin_pull_up>
80007940:	31 9c       	mov	r12,25
80007942:	fe b0 d4 6e 	rcall	8000221e <gpio_enable_pin_pull_up>
80007946:	31 ac       	mov	r12,26
80007948:	fe b0 d4 6b 	rcall	8000221e <gpio_enable_pin_pull_up>
8000794c:	31 bc       	mov	r12,27
8000794e:	fe b0 d4 68 	rcall	8000221e <gpio_enable_pin_pull_up>
80007952:	31 cc       	mov	r12,28
void init_gpio(void) {
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80007954:	fe b0 d4 65 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
80007958:	31 ec       	mov	r12,30
8000795a:	fe b0 d4 62 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
8000795e:	32 2c       	mov	r12,34
80007960:	fe b0 d4 5f 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80007964:	32 3c       	mov	r12,35
80007966:	fe b0 d4 5c 	rcall	8000221e <gpio_enable_pin_pull_up>

  gpio_enable_pin_pull_up(SW0_PIN);
8000796a:	32 4c       	mov	r12,36
8000796c:	fe b0 d4 59 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW1_PIN);
80007970:	32 5c       	mov	r12,37
80007972:	fe b0 d4 56 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
80007976:	32 6c       	mov	r12,38
80007978:	fe b0 d4 53 	rcall	8000221e <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW3_PIN);
8000797c:	32 7c       	mov	r12,39
8000797e:	fe b0 d4 50 	rcall	8000221e <gpio_enable_pin_pull_up>
}
80007982:	d8 02       	popm	pc

80007984 <init_local_pdca>:
80007984:	eb cd 40 b0 	pushm	r4-r5,r7,lr
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
}

// init PDCA (Peripheral DMA Controller A) resources for the SPI transfer and start a dummy transfer
void init_local_pdca(void)
{
80007988:	20 cd       	sub	sp,48
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
8000798a:	fe ca e0 82 	sub	r10,pc,-8062
8000798e:	f4 e4 00 10 	ld.d	r4,r10[16]
80007992:	fa c7 ff e8 	sub	r7,sp,-24
80007996:	fe c9 e0 56 	sub	r9,pc,-8106
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
8000799a:	ee e5 00 10 	st.d	r7[16],r4
8000799e:	f2 e4 00 10 	ld.d	r4,r9[16]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800079a2:	fa e5 00 10 	st.d	sp[16],r4
800079a6:	f4 e4 00 00 	ld.d	r4,r10[0]
800079aa:	ee e5 00 00 	st.d	r7[0],r4
800079ae:	f4 e4 00 08 	ld.d	r4,r10[8]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800079b2:	ee e5 00 08 	st.d	r7[8],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800079b6:	f2 e4 00 00 	ld.d	r4,r9[0]
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800079ba:	1a 9b       	mov	r11,sp

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800079bc:	fa e5 00 00 	st.d	sp[0],r4
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
800079c0:	30 1c       	mov	r12,1
800079c2:	f2 e4 00 08 	ld.d	r4,r9[8]

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
800079c6:	fa e5 00 08 	st.d	sp[8],r4

  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
800079ca:	fe b0 d5 89 	rcall	800024dc <pdca_init_channel>
800079ce:	0e 9b       	mov	r11,r7
800079d0:	30 0c       	mov	r12,0
}
800079d2:	fe b0 d5 85 	rcall	800024dc <pdca_init_channel>
800079d6:	2f 4d       	sub	sp,-48
800079d8:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc

800079dc <init_sd_mmc_resources>:
800079dc:	eb cd 40 80 	pushm	r7,lr
800079e0:	20 4d       	sub	sp,16
800079e2:	fe c8 e1 0e 	sub	r8,pc,-7922
    .bits = SD_MMC_SPI_BITS, // Defined in conf_sd_mmc_spi.h.
    .spck_delay = 0, 
    .trans_delay = 0, 
    .stay_act = 1, 
    .spi_mode = 0,
    .modfdis = 1 };
800079e6:	f0 ea 00 08 	ld.d	r10,r8[8]
800079ea:	fa eb 00 08 	st.d	sp[8],r10
800079ee:	f0 e8 00 00 	ld.d	r8,r8[0]
800079f2:	1a 97       	mov	r7,sp
800079f4:	fa e9 00 00 	st.d	sp[0],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP, sizeof(SD_MMC_SPI_GPIO_MAP)
800079f8:	30 4b       	mov	r11,4
800079fa:	fe cc e0 9e 	sub	r12,pc,-8034
		     / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
800079fe:	fe b0 d4 87 	rcall	8000230c <gpio_enable_module>
80007a02:	1a 9b       	mov	r11,sp
80007a04:	fe 7c 28 00 	mov	r12,-55296

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007a08:	fe b0 d6 23 	rcall	8000264e <spi_initMaster>
80007a0c:	30 09       	mov	r9,0
80007a0e:	fe 7c 28 00 	mov	r12,-55296
80007a12:	12 9a       	mov	r10,r9
80007a14:	12 9b       	mov	r11,r9

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
80007a16:	fe b0 d6 39 	rcall	80002688 <spi_selectionMode>
80007a1a:	fe 7c 28 00 	mov	r12,-55296

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
80007a1e:	fe b0 d6 db 	rcall	800027d4 <spi_enable>
80007a22:	ee e8 00 08 	ld.d	r8,r7[8]
80007a26:	20 4d       	sub	sp,16
80007a28:	fa e9 00 08 	st.d	sp[8],r8
80007a2c:	ee e8 00 00 	ld.d	r8,r7[0]
80007a30:	e0 6c 14 80 	mov	r12,5248
80007a34:	ea 1c 03 ef 	orh	r12,0x3ef
80007a38:	fa e9 00 00 	st.d	sp[0],r8
80007a3c:	fe b0 f8 8c 	rcall	80006b54 <sd_mmc_spi_init>
}
80007a40:	2f cd       	sub	sp,-16
80007a42:	2f cd       	sub	sp,-16
80007a44:	e3 cd 80 80 	ldm	sp++,r7,pc

80007a48 <init_tc>:
80007a48:	eb cd 40 80 	pushm	r7,lr
80007a4c:	fe cb e1 4c 	sub	r11,pc,-7860
80007a50:	18 97       	mov	r7,r12
80007a52:	fe b0 d6 e3 	rcall	80002818 <tc_init_waveform>
80007a56:	e0 6a 02 03 	mov	r10,515
80007a5a:	30 0b       	mov	r11,0
80007a5c:	0e 9c       	mov	r12,r7
80007a5e:	fe b0 d7 3e 	rcall	800028da <tc_write_rc>
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000

  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80007a62:	30 0b       	mov	r11,0
80007a64:	fe ca e1 68 	sub	r10,pc,-7832
80007a68:	0e 9c       	mov	r12,r7
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80007a6a:	fe b0 d7 54 	rcall	80002912 <tc_configure_interrupts>
80007a6e:	0e 9c       	mov	r12,r7
80007a70:	30 0b       	mov	r11,0

}
80007a72:	fe b0 d7 22 	rcall	800028b6 <tc_start>
80007a76:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a7a:	d7 03       	nop

80007a7c <init_oled_usart>:
80007a7c:	d4 01       	pushm	lr
80007a7e:	30 4b       	mov	r11,4
80007a80:	fe cc e1 60 	sub	r12,pc,-7840
80007a84:	fe b0 d4 44 	rcall	8000230c <gpio_enable_module>
80007a88:	e0 6a 1b 00 	mov	r10,6912
80007a8c:	ea 1a 00 b7 	orh	r10,0xb7

  // Assign GPIO to SPI.
  gpio_enable_module(USART_SPI_GPIO_MAP,
		     sizeof(USART_SPI_GPIO_MAP) / sizeof(USART_SPI_GPIO_MAP[0]));
  // Initialize USART in SPI mode from OSC0
  usart_init_spi_master(OLED_USART_SPI, &USART_SPI_OPTIONS, FOSC0);
80007a90:	fe cb e1 ac 	sub	r11,pc,-7764
80007a94:	fe 7c 1c 00 	mov	r12,-58368
  delay_ms(10);

}
80007a98:	fe b0 d8 32 	rcall	80002afc <usart_init_spi_master>
80007a9c:	d8 02       	popm	pc
80007a9e:	d7 03       	nop

80007aa0 <init_dbg_usart>:
80007aa0:	d4 01       	pushm	lr
80007aa2:	30 2b       	mov	r11,2
80007aa4:	fe cc e1 4c 	sub	r12,pc,-7860
80007aa8:	fe b0 d4 32 	rcall	8000230c <gpio_enable_module>
  // Set up GPIO for DBG_USART
  gpio_enable_module(DBG_USART_GPIO_MAP,
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(DBG_USART, &DBG_USART_OPTIONS, FPBA_HZ);
80007aac:	e0 6a 14 80 	mov	r10,5248
80007ab0:	ea 1a 03 ef 	orh	r10,0x3ef
80007ab4:	fe cb e1 8c 	sub	r11,pc,-7796
80007ab8:	fe 7c 18 00 	mov	r12,-59392
}
80007abc:	fe b0 d8 88 	rcall	80002bcc <usart_init_rs232>
80007ac0:	d8 02       	popm	pc
80007ac2:	d7 03       	nop

80007ac4 <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
80007ac4:	d4 01       	pushm	lr
  //  U8 i;
  // generate an interrupt when bfin HWAIT changes
  gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_PIN_CHANGE);
80007ac6:	30 0b       	mov	r11,0
80007ac8:	30 3c       	mov	r12,3
80007aca:	fe b0 d3 e6 	rcall	80002296 <gpio_enable_pin_interrupt>

  // enable interrupts on encoder pins
  gpio_enable_pin_interrupt( ENC0_S0_PIN,	GPIO_PIN_CHANGE);
80007ace:	30 0b       	mov	r11,0
80007ad0:	31 8c       	mov	r12,24
80007ad2:	fe b0 d3 e2 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC0_S1_PIN,	GPIO_PIN_CHANGE);
80007ad6:	30 0b       	mov	r11,0
80007ad8:	31 9c       	mov	r12,25
80007ada:	fe b0 d3 de 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S0_PIN,	GPIO_PIN_CHANGE);
80007ade:	30 0b       	mov	r11,0
80007ae0:	31 ac       	mov	r12,26
80007ae2:	fe b0 d3 da 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC1_S1_PIN,	GPIO_PIN_CHANGE);
80007ae6:	30 0b       	mov	r11,0
80007ae8:	31 bc       	mov	r12,27
80007aea:	fe b0 d3 d6 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S0_PIN,	GPIO_PIN_CHANGE);
80007aee:	30 0b       	mov	r11,0
80007af0:	31 cc       	mov	r12,28
80007af2:	fe b0 d3 d2 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC2_S1_PIN,	GPIO_PIN_CHANGE);
80007af6:	30 0b       	mov	r11,0
80007af8:	31 ec       	mov	r12,30
80007afa:	fe b0 d3 ce 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S0_PIN,	GPIO_PIN_CHANGE);
80007afe:	30 0b       	mov	r11,0
80007b00:	32 2c       	mov	r12,34
80007b02:	fe b0 d3 ca 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( ENC3_S1_PIN,	GPIO_PIN_CHANGE);
80007b06:	30 0b       	mov	r11,0
80007b08:	32 3c       	mov	r12,35
80007b0a:	fe b0 d3 c6 	rcall	80002296 <gpio_enable_pin_interrupt>

  gpio_enable_pin_interrupt( SW0_PIN,	        GPIO_PIN_CHANGE);
80007b0e:	30 0b       	mov	r11,0
80007b10:	32 4c       	mov	r12,36
80007b12:	fe b0 d3 c2 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW1_PIN,	        GPIO_PIN_CHANGE);
80007b16:	30 0b       	mov	r11,0
80007b18:	32 5c       	mov	r12,37
80007b1a:	fe b0 d3 be 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW2_PIN,	        GPIO_PIN_CHANGE);
80007b1e:	30 0b       	mov	r11,0
80007b20:	32 6c       	mov	r12,38
80007b22:	fe b0 d3 ba 	rcall	80002296 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_PIN_CHANGE);
80007b26:	30 0b       	mov	r11,0
80007b28:	32 7c       	mov	r12,39
80007b2a:	fe b0 d3 b6 	rcall	80002296 <gpio_enable_pin_interrupt>
  
  // FIXME: 
  //gpio_enable_pin_interrupt( SW_EDIT_PIN,	GPIO_PIN_CHANGE);
  
  // register IRQ for port A, 0-7
  INTC_register_interrupt( &irq_port0_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA00 / 8), AVR32_INTC_INT2 );
80007b2e:	30 2a       	mov	r10,2
80007b30:	34 0b       	mov	r11,64
80007b32:	fe cc fe 0e 	sub	r12,pc,-498
80007b36:	fe b0 d4 2f 	rcall	80002394 <INTC_register_interrupt>
  
  // register IRQ for port A, 24-30
  INTC_register_interrupt( &irq_port0_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA24 / 8), AVR32_INTC_INT2 );
80007b3a:	30 2a       	mov	r10,2
80007b3c:	34 3b       	mov	r11,67
80007b3e:	fe cc ff 32 	sub	r12,pc,-206
  
  // register IRQ for port B, 0-7
  INTC_register_interrupt( &irq_port1_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB00 / 8), AVR32_INTC_INT2 );
80007b42:	fe b0 d4 29 	rcall	80002394 <INTC_register_interrupt>
80007b46:	30 2a       	mov	r10,2
80007b48:	34 4b       	mov	r11,68
80007b4a:	fe cc fe ae 	sub	r12,pc,-338
  
  // register IRQ for PDCA transfer
  INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, AVR32_INTC_INT1); 
80007b4e:	fe b0 d4 23 	rcall	80002394 <INTC_register_interrupt>
80007b52:	30 1a       	mov	r10,1
80007b54:	36 0b       	mov	r11,96

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
80007b56:	fe cc ff 9a 	sub	r12,pc,-102
80007b5a:	fe b0 d4 1d 	rcall	80002394 <INTC_register_interrupt>
80007b5e:	30 0a       	mov	r10,0
80007b60:	e0 6b 01 c0 	mov	r11,448
}
80007b64:	fe cc ff f4 	sub	r12,pc,-12
80007b68:	fe b0 d4 16 	rcall	80002394 <INTC_register_interrupt>
80007b6c:	d8 02       	popm	pc
80007b6e:	d7 03       	nop

80007b70 <irq_tc>:
80007b70:	eb cd 40 80 	pushm	r7,lr
80007b74:	e0 67 02 a8 	mov	r7,680
80007b78:	30 18       	mov	r8,1
80007b7a:	ee ea 00 00 	ld.d	r10,r7[0]
80007b7e:	30 09       	mov	r9,0

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  //event_t e;
  tcTicks++;
80007b80:	f4 08 00 08 	add	r8,r10,r8
80007b84:	f6 09 00 49 	adc	r9,r11,r9
80007b88:	ee e9 00 00 	st.d	r7[0],r8


  process_timers();
80007b8c:	e0 a0 05 ec 	rcall	80008764 <process_timers>

  // 1/2 sec heartbeat LED
  if ((tcTicks % 500) == 0) {
80007b90:	ee ea 00 00 	ld.d	r10,r7[0]
80007b94:	e0 68 01 f4 	mov	r8,500
80007b98:	30 09       	mov	r9,0
80007b9a:	e0 a0 07 6d 	rcall	80008a74 <__avr32_umod64>
80007b9e:	58 0a       	cp.w	r10,0
80007ba0:	5c 2b       	cpc	r11
    gpio_tgl_gpio_pin(LED0_GPIO);
80007ba2:	c0 41       	brne	80007baa <irq_tc+0x3a>
80007ba4:	33 bc       	mov	r12,59
80007ba6:	fe b0 d3 6b 	rcall	8000227c <gpio_tgl_gpio_pin>
  }
 
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80007baa:	30 0b       	mov	r11,0
80007bac:	fe 7c 38 00 	mov	r12,-51200
80007bb0:	fe b0 d6 8c 	rcall	800028c8 <tc_read_sr>

}
80007bb4:	e3 cd 40 80 	ldm	sp++,r7,lr
80007bb8:	d6 03       	rete
80007bba:	d7 03       	nop

80007bbc <irq_pdca>:
80007bbc:	d4 01       	pushm	lr
80007bbe:	20 1d       	sub	sp,4
80007bc0:	d3 03       	ssrf	0x10
80007bc2:	30 0c       	mov	r12,0
80007bc4:	fe b0 d4 71 	rcall	800024a6 <pdca_disable_interrupt_transfer_complete>
80007bc8:	fe b0 f0 16 	rcall	80005bf4 <sd_mmc_spi_read_close_PDCA>
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);

  sd_mmc_spi_read_close_PDCA();//unselects the SD/MMC memory.

  // wait (FIXME)
  delay=0; while(delay < 5000) { delay++; }
80007bcc:	30 08       	mov	r8,0
80007bce:	ba 18       	st.h	sp[0x2],r8
80007bd0:	e0 69 13 87 	mov	r9,4999
80007bd4:	9a 18       	ld.sh	r8,sp[0x2]
80007bd6:	f2 08 19 00 	cp.h	r8,r9
80007bda:	e0 8b 00 0a 	brhi	80007bee <irq_pdca+0x32>
80007bde:	9a 18       	ld.sh	r8,sp[0x2]
80007be0:	2f f8       	sub	r8,-1
80007be2:	ba 18       	st.h	sp[0x2],r8
80007be4:	9a 18       	ld.sh	r8,sp[0x2]
80007be6:	f2 08 19 00 	cp.h	r8,r9
80007bea:	fe 98 ff fa 	brls	80007bde <irq_pdca+0x22>

  // Disable unnecessary channel
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80007bee:	30 1c       	mov	r12,1
80007bf0:	fe b0 d4 4e 	rcall	8000248c <pdca_disable>
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80007bf4:	30 0c       	mov	r12,0
80007bf6:	fe b0 d4 4b 	rcall	8000248c <pdca_disable>

  // Enable all interrupts.
  Enable_global_interrupt();
80007bfa:	d5 03       	csrf	0x10

  end_of_transfer = true;
80007bfc:	30 19       	mov	r9,1
80007bfe:	e0 68 1c 60 	mov	r8,7264
}
80007c02:	b0 89       	st.b	r8[0x0],r9
80007c04:	2f fd       	sub	sp,-4
80007c06:	d4 02       	popm	lr
80007c08:	d6 03       	rete
80007c0a:	d7 03       	nop

80007c0c <irq_port0_line3>:
80007c0c:	d4 01       	pushm	lr
80007c0e:	33 cc       	mov	r12,60
80007c10:	fe b0 d3 36 	rcall	8000227c <gpio_tgl_gpio_pin>
80007c14:	31 8c       	mov	r12,24
80007c16:	fe b0 d3 65 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
__attribute__((__interrupt__))
static void irq_port0_line3(void) {
  // TEST
  gpio_tgl_gpio_pin(LED1_GPIO);
  // this interrupt line includes enc0 - enc2
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
80007c1a:	c3 91       	brne	80007c8c <irq_port0_line3+0x80>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
80007c1c:	31 9c       	mov	r12,25
80007c1e:	fe b0 d3 61 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007c22:	c2 e1       	brne	80007c7e <irq_port0_line3+0x72>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
80007c24:	31 ac       	mov	r12,26
80007c26:	fe b0 d3 5d 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007c2a:	c2 31       	brne	80007c70 <irq_port0_line3+0x64>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
80007c2c:	31 bc       	mov	r12,27
80007c2e:	fe b0 d3 59 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007c32:	c1 81       	brne	80007c62 <irq_port0_line3+0x56>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
80007c34:	31 cc       	mov	r12,28
80007c36:	fe b0 d3 55 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007c3a:	c0 d1       	brne	80007c54 <irq_port0_line3+0x48>
    process_enc(2);
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC2_S1_PIN)) {
80007c3c:	31 ec       	mov	r12,30
80007c3e:	fe b0 d3 51 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007c42:	c0 70       	breq	80007c50 <irq_port0_line3+0x44>
    process_enc(2);
80007c44:	30 2c       	mov	r12,2
80007c46:	fe b0 fc 93 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S1_PIN);
80007c4a:	31 ec       	mov	r12,30
80007c4c:	fe b0 d3 56 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }
}
80007c50:	d4 02       	popm	lr
80007c52:	d6 03       	rete
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
    process_enc(2);
80007c54:	30 2c       	mov	r12,2
80007c56:	fe b0 fc 8b 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
80007c5a:	31 cc       	mov	r12,28
80007c5c:	fe b0 d3 4e 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007c60:	ce eb       	rjmp	80007c3c <irq_port0_line3+0x30>
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
80007c62:	30 1c       	mov	r12,1
80007c64:	fe b0 fc 84 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
80007c68:	31 bc       	mov	r12,27
80007c6a:	fe b0 d3 47 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007c6e:	ce 3b       	rjmp	80007c34 <irq_port0_line3+0x28>
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
80007c70:	30 1c       	mov	r12,1
80007c72:	fe b0 fc 7d 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
80007c76:	31 ac       	mov	r12,26
80007c78:	fe b0 d3 40 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007c7c:	cd 8b       	rjmp	80007c2c <irq_port0_line3+0x20>
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
80007c7e:	30 0c       	mov	r12,0
80007c80:	fe b0 fc 76 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
80007c84:	31 9c       	mov	r12,25
80007c86:	fe b0 d3 39 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007c8a:	cc db       	rjmp	80007c24 <irq_port0_line3+0x18>
static void irq_port0_line3(void) {
  // TEST
  gpio_tgl_gpio_pin(LED1_GPIO);
  // this interrupt line includes enc0 - enc2
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
80007c8c:	30 0c       	mov	r12,0
80007c8e:	fe b0 fc 6f 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
80007c92:	31 8c       	mov	r12,24
80007c94:	fe b0 d3 32 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007c98:	cc 2b       	rjmp	80007c1c <irq_port0_line3+0x10>
80007c9a:	d7 03       	nop

80007c9c <irq_port1_line0>:
80007c9c:	d4 01       	pushm	lr
80007c9e:	32 2c       	mov	r12,34
80007ca0:	fe b0 d3 20 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007ca4:	c3 91       	brne	80007d16 <irq_port1_line0+0x7a>
80007ca6:	32 3c       	mov	r12,35
80007ca8:	fe b0 d3 1c 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
  // this interrupt line includes enc3....
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
80007cac:	c2 e1       	brne	80007d08 <irq_port1_line0+0x6c>
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
  }
  // ...and switches 0-3
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
80007cae:	32 4c       	mov	r12,36
80007cb0:	fe b0 d3 18 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007cb4:	c2 31       	brne	80007cfa <irq_port1_line0+0x5e>
    process_sw(0);
    //    print_dbg( "  irq:sw:0" );
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
80007cb6:	32 5c       	mov	r12,37
80007cb8:	fe b0 d3 14 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007cbc:	c1 81       	brne	80007cec <irq_port1_line0+0x50>
    process_sw(1);
    //    print_dbg( "  irq:sw:1" );
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
80007cbe:	32 6c       	mov	r12,38
80007cc0:	fe b0 d3 10 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007cc4:	c0 d1       	brne	80007cde <irq_port1_line0+0x42>
    process_sw(2);
    //    print_dbg( "  irq:sw:2" );
    gpio_clear_pin_interrupt_flag(SW2_PIN);
  }
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
80007cc6:	32 7c       	mov	r12,39
80007cc8:	fe b0 d3 0c 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007ccc:	c0 70       	breq	80007cda <irq_port1_line0+0x3e>
    process_sw(3);
80007cce:	30 3c       	mov	r12,3
80007cd0:	e0 a0 05 32 	rcall	80008734 <process_sw>
    //    print_dbg( "  irq:sw:3" );
    gpio_clear_pin_interrupt_flag(SW3_PIN);
80007cd4:	32 7c       	mov	r12,39
80007cd6:	fe b0 d3 11 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }

}
80007cda:	d4 02       	popm	lr
80007cdc:	d6 03       	rete
    process_sw(1);
    //    print_dbg( "  irq:sw:1" );
    gpio_clear_pin_interrupt_flag(SW1_PIN);
  }
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
    process_sw(2);
80007cde:	30 2c       	mov	r12,2
80007ce0:	e0 a0 05 2a 	rcall	80008734 <process_sw>
    //    print_dbg( "  irq:sw:2" );
    gpio_clear_pin_interrupt_flag(SW2_PIN);
80007ce4:	32 6c       	mov	r12,38
80007ce6:	fe b0 d3 09 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007cea:	ce eb       	rjmp	80007cc6 <irq_port1_line0+0x2a>
    process_sw(0);
    //    print_dbg( "  irq:sw:0" );
    gpio_clear_pin_interrupt_flag(SW0_PIN);
  }
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    process_sw(1);
80007cec:	30 1c       	mov	r12,1
80007cee:	e0 a0 05 23 	rcall	80008734 <process_sw>
    //    print_dbg( "  irq:sw:1" );
    gpio_clear_pin_interrupt_flag(SW1_PIN);
80007cf2:	32 5c       	mov	r12,37
80007cf4:	fe b0 d3 02 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007cf8:	ce 3b       	rjmp	80007cbe <irq_port1_line0+0x22>
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
  }
  // ...and switches 0-3
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    process_sw(0);
80007cfa:	30 0c       	mov	r12,0
80007cfc:	e0 a0 05 1c 	rcall	80008734 <process_sw>
    //    print_dbg( "  irq:sw:0" );
    gpio_clear_pin_interrupt_flag(SW0_PIN);
80007d00:	32 4c       	mov	r12,36
80007d02:	fe b0 d2 fb 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007d06:	cd 8b       	rjmp	80007cb6 <irq_port1_line0+0x1a>
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
    process_enc(3);
80007d08:	30 3c       	mov	r12,3
80007d0a:	fe b0 fc 31 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
80007d0e:	32 3c       	mov	r12,35
80007d10:	fe b0 d2 f4 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007d14:	cc db       	rjmp	80007cae <irq_port1_line0+0x12>
// interrupt handler for PB00-PB07
__attribute__((__interrupt__))
static void irq_port1_line0(void) {
  // this interrupt line includes enc3....
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
80007d16:	30 3c       	mov	r12,3
80007d18:	fe b0 fc 2a 	rcall	8000756c <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
80007d1c:	32 2c       	mov	r12,34
80007d1e:	fe b0 d2 ed 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
80007d22:	cc 2b       	rjmp	80007ca6 <irq_port1_line0+0xa>

80007d24 <irq_port0_line0>:
80007d24:	d4 01       	pushm	lr
80007d26:	30 3c       	mov	r12,3
80007d28:	fe b0 d2 dc 	rcall	800022e0 <gpio_get_pin_interrupt_flag>
80007d2c:	c0 a0       	breq	80007d40 <irq_port0_line0+0x1c>
80007d2e:	30 3c       	mov	r12,3
80007d30:	fe b0 d2 81 	rcall	80002232 <gpio_get_pin_value>
// interrupt handler for PA00-PA07
__attribute__((__interrupt__))
static void irq_port0_line0(void) {
  // BFIN_HWAIT: set value
  if(gpio_get_pin_interrupt_flag(BFIN_HWAIT_PIN)) {
    hwait = gpio_get_pin_value(BFIN_HWAIT_PIN);
80007d34:	e0 68 01 78 	mov	r8,376
    gpio_clear_pin_interrupt_flag(BFIN_HWAIT_PIN);
80007d38:	b0 8c       	st.b	r8[0x0],r12
80007d3a:	30 3c       	mov	r12,3
80007d3c:	fe b0 d2 de 	rcall	800022f8 <gpio_clear_pin_interrupt_flag>
  }
}
80007d40:	d4 02       	popm	lr
80007d42:	d6 03       	rete

80007d44 <main>:
  } // if event
}


////main function
int main (void) {
80007d44:	eb cd 40 80 	pushm	r7,lr
  volatile avr32_tc_t *tc = APP_TC;
  
  // switch to osc0 for main clock
  //  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP); 
  // initialize clocks:
  init_clocks();
80007d48:	fe b0 fd 74 	rcall	80007830 <init_clocks>
  
  // initialize Interrupt Controllvoider
  INTC_init_interrupts();
80007d4c:	fe b0 d3 64 	rcall	80002414 <INTC_init_interrupts>

  // disable interrupts
  Disable_global_interrupt();
80007d50:	d3 03       	ssrf	0x10

  // initialize RS232 debug uart
  init_dbg_usart();
80007d52:	ca 7e       	rcall	80007aa0 <init_dbg_usart>
80007d54:	c9 4e       	rcall	80007a7c <init_oled_usart>

  // initialize oled uart in SPI mode
  init_oled_usart();
80007d56:	c4 3e       	rcall	800079dc <init_sd_mmc_resources>
80007d58:	c1 6e       	rcall	80007984 <init_local_pdca>

  // initialize SD/MMC driver resources: GPIO, SPI and SD/MMC.
  init_sd_mmc_resources();
80007d5a:	fe b0 fd 9b 	rcall	80007890 <init_bfin_resources>

  // initialize PDCA controller
  init_local_pdca();
80007d5e:	fe 7c 38 00 	mov	r12,-51200

  // initialize blackfin resources
  init_bfin_resources();
80007d62:	c7 3e       	rcall	80007a48 <init_tc>
80007d64:	fe b0 fd ea 	rcall	80007938 <init_gpio>

  // initialize application timer
  init_tc(tc);
80007d68:	ca ee       	rcall	80007ac4 <register_interrupts>
80007d6a:	e0 a0 02 4b 	rcall	80008200 <init_oled>

  // initialize other GPIO
  init_gpio();
80007d6e:	fe b0 fb 99 	rcall	800074a0 <init_events>

  // register interrupts
  register_interrupts();
80007d72:	fe b0 fc 23 	rcall	800075b8 <init_encoders>

  // initialize the OLED screen
  init_oled();
80007d76:	e0 6c 14 80 	mov	r12,5248
  
  // intialize the event queue
  init_events();
80007d7a:	ea 1c 03 ef 	orh	r12,0x3ef
  
  // intialize encoders
  init_encoders();
80007d7e:	fe b0 d1 43 	rcall	80002004 <sdramc_init>

  // initialize sdram
  sdramc_init(FMCK_HZ);
80007d82:	c4 3c       	rcall	80007e08 <init_mem>
80007d84:	d5 03       	csrf	0x10
80007d86:	fe cc e4 22 	sub	r12,pc,-7134
80007d8a:	fe b0 ee a1 	rcall	80005acc <print_dbg>
  //memory managaer
  init_mem();
80007d8e:	30 0b       	mov	r11,0
80007d90:	30 29       	mov	r9,2

  // Enable all interrupts.
  Enable_global_interrupt();
80007d92:	fe ca e4 22 	sub	r10,pc,-7134

  print_dbg("\r\nALEPH\r\n ");
80007d96:	16 9c       	mov	r12,r11
80007d98:	c7 8c       	rcall	80007e88 <screen_line>

#ifndef SKIPSD
  // Wait for a card to be inserted
  //  print_dbg("\r\nwaiting for SD card... ");

  screen_line(0, 0, "waiting for SD card...", 2); refresh=1;
80007d9a:	30 18       	mov	r8,1
80007d9c:	e0 67 02 a4 	mov	r7,676
80007da0:	ae 88       	st.b	r7[0x0],r8
80007da2:	fe b0 f8 3d 	rcall	80006e1c <sd_mmc_spi_mem_check>
80007da6:	cf e0       	breq	80007da2 <main+0x5e>
80007da8:	30 0b       	mov	r11,0
80007daa:	30 29       	mov	r9,2
  while (!sd_mmc_spi_mem_check()) {
80007dac:	fe ca e4 24 	sub	r10,pc,-7132
80007db0:	16 9c       	mov	r12,r11
    waitForCard++;
  }
  screen_line(0, 0, "card detected.", 2); refresh=1;
80007db2:	c6 bc       	rcall	80007e88 <screen_line>
80007db4:	30 18       	mov	r8,1
80007db6:	ae 88       	st.b	r7[0x0],r8
80007db8:	fe b0 fd 14 	rcall	800077e0 <init_files>
80007dbc:	fe b0 fc a8 	rcall	8000770c <files_list>
80007dc0:	fe b0 fa 22 	rcall	80007204 <init_adc>

  // set up file navigation using available drives
  init_files();
80007dc4:	fe b0 fb 0c 	rcall	800073dc <init_app_timers>

  // list files to USART
  files_list();
80007dc8:	fe cc e4 30 	sub	r12,pc,-7120

#endif 

  // send ADC config
  init_adc();
80007dcc:	fe b0 ee 80 	rcall	80005acc <print_dbg>
  init_app_timers();
80007dd0:	e0 67 02 b0 	mov	r7,688

  print_dbg("starting event loop.\n\r");
80007dd4:	e0 6c 02 b0 	mov	r12,688
  //static U64 cycles = 0;
  //static U64 cyclesNow = 0;

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {
80007dd8:	fe b0 fb 9e 	rcall	80007514 <get_next_event>
80007ddc:	cf c0       	breq	80007dd4 <main+0x90>
80007dde:	fe cc e4 2e 	sub	r12,pc,-7122
    switch(e.eventType) {
        
    case kEventSwitchDown0:
      //      if (check_init()) { return; }
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
80007de2:	6e 08       	ld.w	r8,r7[0x0]

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {

    switch(e.eventType) {
80007de4:	58 08       	cp.w	r8,0
80007de6:	c0 71       	brne	80007df4 <main+0xb0>
80007de8:	fe b0 ee 72 	rcall	80005acc <print_dbg>
        
    case kEventSwitchDown0:
      //      if (check_init()) { return; }
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
80007dec:	32 0c       	mov	r12,32
      gpio_set_gpio_pin(AVR32_PIN_PB00);
80007dee:	fe b0 d2 2d 	rcall	80002248 <gpio_set_gpio_pin>
80007df2:	cf 1b       	rjmp	80007dd4 <main+0x90>
80007df4:	58 18       	cp.w	r8,1

  key = eKeyDummy;
  
  if( get_next_event(&e) ) {

    switch(e.eventType) {
80007df6:	ce f1       	brne	80007dd4 <main+0x90>
80007df8:	fe cc e4 38 	sub	r12,pc,-7112
      //      key = eKeyFnDownA;
      print_dbg("\r\n switch down");
      gpio_set_gpio_pin(AVR32_PIN_PB00);
      break;
    case kEventSwitchUp0:
      print_dbg("\r\n switch up");
80007dfc:	fe b0 ee 68 	rcall	80005acc <print_dbg>
      gpio_clr_gpio_pin(AVR32_PIN_PB00);
80007e00:	32 0c       	mov	r12,32
80007e02:	fe b0 d2 30 	rcall	80002262 <gpio_clr_gpio_pin>
80007e06:	ce 7b       	rjmp	80007dd4 <main+0x90>

80007e08 <init_mem>:
static void sdram_test(void);

// setup heap
void init_mem(void) {

  heapSize = SDRAM_SIZE;
80007e08:	fc 19 02 00 	movh	r9,0x200
80007e0c:	e0 68 02 c0 	mov	r8,704
  pHeapStart = SDRAM;
80007e10:	91 09       	st.w	r8[0x0],r9
80007e12:	fc 19 d0 00 	movh	r9,0xd000
80007e16:	e0 68 02 b8 	mov	r8,696
  pHeapEnd = pHeapStart + heapSize;
80007e1a:	91 09       	st.w	r8[0x0],r9
80007e1c:	fc 19 d2 00 	movh	r9,0xd200
  heapOffset = 0;
80007e20:	e0 68 02 c4 	mov	r8,708
80007e24:	91 09       	st.w	r8[0x0],r9

}
80007e26:	30 09       	mov	r9,0
80007e28:	e0 68 02 bc 	mov	r8,700
80007e2c:	91 09       	st.w	r8[0x0],r9
80007e2e:	5e fc       	retal	r12

80007e30 <alloc_mem>:
80007e30:	e0 68 02 bc 	mov	r8,700
80007e34:	70 09       	ld.w	r9,r8[0x0]
80007e36:	f8 09 00 09 	add	r9,r12,r9

// allocate and return pointer
heap_t alloc_mem(u32 bytes) {
  u32 tmp = heapOffset + bytes;
  u8 mtmp = tmp % 4;
80007e3a:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
  heap_t ret;
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
80007e3e:	f7 b9 01 fc 	subne	r9,-4
80007e42:	f3 da e1 19 	subne	r9,r9,r10
  }
  if (tmp < heapSize) {
80007e46:	e0 6a 02 c0 	mov	r10,704
80007e4a:	74 0a       	ld.w	r10,r10[0x0]
    ret = pHeapStart;
    heapOffset = tmp;
80007e4c:	14 39       	cp.w	r9,r10
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
  }
  if (tmp < heapSize) {
    ret = pHeapStart;
80007e4e:	c0 62       	brcc	80007e5a <alloc_mem+0x2a>
80007e50:	91 09       	st.w	r8[0x0],r9
    heapOffset = tmp;
  } else {
    ret = (heap_t)ALLOC_FAIL;
  }
  return ret;
}
80007e52:	e0 68 02 b8 	mov	r8,696
  heap_t ret;
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
  }
  if (tmp < heapSize) {
80007e56:	70 0c       	ld.w	r12,r8[0x0]
80007e58:	5e fc       	retal	r12
80007e5a:	5e fd       	retal	0

80007e5c <write_command>:
  usart_putchar(OLED_USART_SPI, c);
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
80007e5c:	eb cd 40 80 	pushm	r7,lr
80007e60:	18 97       	mov	r7,r12
  usart_spi_selectChip(OLED_USART_SPI);
80007e62:	fe 7c 1c 00 	mov	r12,-58368
80007e66:	fe b0 d6 14 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80007e6a:	31 7c       	mov	r12,23
80007e6c:	fe b0 d1 fb 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80007e70:	0e 9b       	mov	r11,r7
80007e72:	fe 7c 1c 00 	mov	r12,-58368
80007e76:	fe b0 d6 1f 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80007e7a:	fe 7c 1c 00 	mov	r12,-58368
80007e7e:	fe b0 d6 0c 	rcall	80002a96 <usart_spi_unselectChip>
}
80007e82:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e86:	d7 03       	nop

80007e88 <screen_line>:
80007e88:	d4 31       	pushm	r0-r7,lr
80007e8a:	20 bd       	sub	sp,44
80007e8c:	50 1c       	stdsp	sp[0x4],r12
80007e8e:	50 3a       	stdsp	sp[0xc],r10
80007e90:	a1 79       	lsl	r9,0x1
80007e92:	5c 59       	castu.b	r9
80007e94:	f9 d9 c0 04 	bfextu	r12,r9,0x0,0x4
}

// draw a line and blank to end
U8 screen_line(U16 x, U16 y, char *str, U8 hl) {
  // FIXME
  hl = ( (hl << 1) & 0xf);
80007e98:	50 4c       	stdsp	sp[0x10],r12
    }
  }
}

// draw a line and blank to end
U8 screen_line(U16 x, U16 y, char *str, U8 hl) {
80007e9a:	16 91       	mov	r1,r11
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80007e9c:	15 88       	ld.ub	r8,r10[0x0]
80007e9e:	58 08       	cp.w	r8,0
80007ea0:	e0 80 00 f1 	breq	80008082 <screen_line+0x1fa>
80007ea4:	f6 c9 ff ff 	sub	r9,r11,-1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007ea8:	5c 79       	castu.h	r9
80007eaa:	a7 69       	lsl	r9,0x6
80007eac:	50 99       	stdsp	sp[0x24],r9
80007eae:	f6 c9 ff fe 	sub	r9,r11,-2
80007eb2:	5c 79       	castu.h	r9
80007eb4:	a7 69       	lsl	r9,0x6
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007eb6:	18 92       	mov	r2,r12
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007eb8:	18 93       	mov	r3,r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007eba:	50 a9       	stdsp	sp[0x28],r9
80007ebc:	f6 cc ff fd 	sub	r12,r11,-3
80007ec0:	f3 db c0 10 	bfextu	r9,r11,0x0,0x10
80007ec4:	fb 5c 00 16 	st.h	sp[22],r12
80007ec8:	50 89       	stdsp	sp[0x20],r9
80007eca:	f6 cc ff fb 	sub	r12,r11,-5
80007ece:	f6 c9 ff fc 	sub	r9,r11,-4
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80007ed2:	50 2a       	stdsp	sp[0x8],r10
80007ed4:	fb 59 00 18 	st.h	sp[24],r9
80007ed8:	fb 5c 00 1a 	st.h	sp[26],r12
80007edc:	f6 c9 ff fa 	sub	r9,r11,-6
80007ee0:	f6 cc ff f9 	sub	r12,r11,-7
80007ee4:	a5 62       	lsl	r2,0x4
80007ee6:	e0 6a 02 dc 	mov	r10,732
80007eea:	fb 59 00 1c 	st.h	sp[28],r9
80007eee:	fb 5c 00 1e 	st.h	sp[30],r12
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
80007ef2:	22 08       	sub	r8,32
80007ef4:	fe c9 e4 fc 	sub	r9,pc,-6916
80007ef8:	f2 08 00 36 	add	r6,r9,r8<<0x3
  xnum = FONT_CHARW - g->first - g->last;
80007efc:	0d 85       	ld.ub	r5,r6[0x0]
80007efe:	0d 98       	ld.ub	r8,r6[0x1]
80007f00:	ea 09 11 00 	rsub	r9,r5,0
80007f04:	f2 08 01 08 	sub	r8,r9,r8
80007f08:	30 04       	mov	r4,0
80007f0a:	f0 cb ff fa 	sub	r11,r8,-6
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007f0e:	40 18       	lddsp	r8,sp[0x4]
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  static U8 y, x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
80007f10:	5c 5b       	castu.b	r11
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007f12:	5c 88       	casts.h	r8
80007f14:	50 08       	stdsp	sp[0x0],r8
80007f16:	58 0b       	cp.w	r11,0
80007f18:	c3 e0       	breq	80007f94 <screen_line+0x10c>
80007f1a:	08 97       	mov	r7,r4
80007f1c:	30 1c       	mov	r12,1
80007f1e:	02 07       	add	r7,r1
80007f20:	f8 04 09 4e 	lsl	lr,r12,r4
80007f24:	5c 77       	castu.h	r7
80007f26:	40 09       	lddsp	r9,sp[0x0]
80007f28:	a7 67       	lsl	r7,0x6
80007f2a:	30 08       	mov	r8,0
80007f2c:	c1 88       	rjmp	80007f5c <screen_line+0xd4>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007f2e:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80007f32:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007f36:	a1 9c       	lsr	r12,0x1
80007f38:	0e 0c       	add	r12,r7
  if (x%2) {
80007f3a:	58 00       	cp.w	r0,0
80007f3c:	e0 81 00 ee 	brne	80008118 <screen_line+0x290>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007f40:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80007f44:	e0 10 ff f0 	andl	r0,0xfff0
80007f48:	06 40       	or	r0,r3
80007f4a:	f4 0c 0b 00 	st.b	r10[r12],r0
80007f4e:	2f f9       	sub	r9,-1
80007f50:	2f f8       	sub	r8,-1
80007f52:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007f54:	f0 0b 18 00 	cp.b	r11,r8
80007f58:	e0 88 00 1e 	brls	80007f94 <screen_line+0x10c>
      if( (g->data[x + g->first] & (1 << y))) {
80007f5c:	ec 08 00 0c 	add	r12,r6,r8
80007f60:	0a 0c       	add	r12,r5
80007f62:	19 ac       	ld.ub	r12,r12[0x2]
80007f64:	1c 6c       	and	r12,lr
80007f66:	ce 41       	brne	80007f2e <screen_line+0xa6>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007f68:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
  if (x%2) {
80007f6c:	e1 dc c0 01 	bfextu	r0,r12,0x0,0x1
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007f70:	a1 9c       	lsr	r12,0x1
80007f72:	0e 0c       	add	r12,r7
  if (x%2) {
80007f74:	58 00       	cp.w	r0,0
80007f76:	e0 81 00 d9 	brne	80008128 <screen_line+0x2a0>
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007f7a:	f4 0c 07 00 	ld.ub	r0,r10[r12]
80007f7e:	e0 10 ff f0 	andl	r0,0xfff0
80007f82:	f4 0c 0b 00 	st.b	r10[r12],r0
80007f86:	2f f9       	sub	r9,-1
80007f88:	2f f8       	sub	r8,-1
80007f8a:	5c 89       	casts.h	r9
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
    for(x=0; x<xnum; x++) {
80007f8c:	f0 0b 18 00 	cp.b	r11,r8
80007f90:	fe 9b ff e6 	brhi	80007f5c <screen_line+0xd4>
80007f94:	2f f4       	sub	r4,-1
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  
  for(y=0; y<FONT_CHARH; y++) {
80007f96:	58 84       	cp.w	r4,8
80007f98:	cb f1       	brne	80007f16 <screen_line+0x8e>
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
80007f9a:	40 18       	lddsp	r8,sp[0x4]
80007f9c:	16 08       	add	r8,r11
80007f9e:	5c 88       	casts.h	r8
80007fa0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80007fa4:	f9 d9 c0 01 	bfextu	r12,r9,0x0,0x1
80007fa8:	a1 99       	lsr	r9,0x1
80007faa:	58 0c       	cp.w	r12,0
80007fac:	e0 81 00 dd 	brne	80008166 <screen_line+0x2de>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007fb0:	40 8e       	lddsp	lr,sp[0x20]
80007fb2:	a7 6e       	lsl	lr,0x6
80007fb4:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007fb6:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007fba:	e0 1c ff f0 	andl	r12,0xfff0
80007fbe:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007fc2:	40 9e       	lddsp	lr,sp[0x24]
80007fc4:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007fc6:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007fca:	e0 1c ff f0 	andl	r12,0xfff0
80007fce:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007fd2:	40 ae       	lddsp	lr,sp[0x28]
80007fd4:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007fd6:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007fda:	e0 1c ff f0 	andl	r12,0xfff0
80007fde:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007fe2:	fb 1e 00 16 	ld.uh	lr,sp[22]
80007fe6:	a7 6e       	lsl	lr,0x6
80007fe8:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007fea:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80007fee:	e0 1c ff f0 	andl	r12,0xfff0
80007ff2:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80007ff6:	fb 1e 00 18 	ld.uh	lr,sp[24]
80007ffa:	a7 6e       	lsl	lr,0x6
80007ffc:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80007ffe:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80008002:	e0 1c ff f0 	andl	r12,0xfff0
80008006:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000800a:	fb 1e 00 1a 	ld.uh	lr,sp[26]
8000800e:	a7 6e       	lsl	lr,0x6
80008010:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80008012:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
80008016:	e0 1c ff f0 	andl	r12,0xfff0
8000801a:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
8000801e:	fb 1e 00 1c 	ld.uh	lr,sp[28]
80008022:	a7 6e       	lsl	lr,0x6
80008024:	12 0e       	add	lr,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80008026:	f4 0e 07 0c 	ld.ub	r12,r10[lr]
8000802a:	e0 1c ff f0 	andl	r12,0xfff0
8000802e:	f4 0e 0b 0c 	st.b	r10[lr],r12
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008032:	fb 1c 00 1e 	ld.uh	r12,sp[30]
80008036:	a7 6c       	lsl	r12,0x6
80008038:	f8 09 00 09 	add	r9,r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8000803c:	f4 09 07 0c 	ld.ub	r12,r10[r9]
80008040:	e0 1c ff f0 	andl	r12,0xfff0
80008044:	f4 09 0b 0c 	st.b	r10[r9],r12
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
80008048:	40 2c       	lddsp	r12,sp[0x8]
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
8000804a:	2f f8       	sub	r8,-1
    str++;
8000804c:	2f fc       	sub	r12,-1
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
8000804e:	5c 88       	casts.h	r8
    str++;
80008050:	50 2c       	stdsp	sp[0x8],r12
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
80008052:	50 18       	stdsp	sp[0x4],r8
  return x;
}

// draw a string with proportional spacinvg
U8 screen_string_squeeze(U16 x, U16 y, char *str, U8 a) {
  while(*str != 0) {
80008054:	19 88       	ld.ub	r8,r12[0x0]
80008056:	58 08       	cp.w	r8,0
80008058:	fe 91 ff 4d 	brne	80007ef2 <screen_line+0x6a>
8000805c:	e0 6a 02 d4 	mov	r10,724
80008060:	95 06       	st.w	r10[0x0],r6
80008062:	e0 6a 02 d0 	mov	r10,720
80008066:	b4 8b       	st.b	r10[0x0],r11
80008068:	e0 6a 02 c8 	mov	r10,712
8000806c:	30 88       	mov	r8,8
8000806e:	b4 88       	st.b	r10[0x0],r8
80008070:	e0 6a 02 d9 	mov	r10,729
80008074:	b4 8b       	st.b	r10[0x0],r11
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  return x;
80008076:	e0 6a 02 cc 	mov	r10,716
8000807a:	95 09       	st.w	r10[0x0],r9
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
8000807c:	e0 69 02 d8 	mov	r9,728
80008080:	b2 88       	st.b	r9[0x0],r8
80008082:	40 15       	lddsp	r5,sp[0x4]
80008084:	30 08       	mov	r8,0
80008086:	5c 55       	castu.b	r5
80008088:	f0 05 18 00 	cp.b	r5,r8
8000808c:	c3 15       	brlt	800080ee <screen_line+0x266>
8000808e:	40 1a       	lddsp	r10,sp[0x4]
80008090:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
80008094:	e0 62 02 cc 	mov	r2,716
80008098:	30 07       	mov	r7,0
8000809a:	ed d1 c0 08 	bfextu	r6,r1,0x0,0x8
8000809e:	14 93       	mov	r3,r10
    for(j=y; j<(FONT_CHARH + y); j++) {
800080a0:	2f 9c       	sub	r12,-7
800080a2:	64 08       	ld.w	r8,r2[0x0]
800080a4:	e0 6b 02 dc 	mov	r11,732
800080a8:	0e 94       	mov	r4,r7
800080aa:	ea 07 00 0e 	add	lr,r5,r7
800080ae:	5c 5e       	castu.b	lr
800080b0:	0c 3c       	cp.w	r12,r6
800080b2:	c1 75       	brlt	800080e0 <screen_line+0x258>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800080b4:	5c 7e       	castu.h	lr
800080b6:	f1 de c0 01 	bfextu	r8,lr,0x0,0x1
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
  } else {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800080ba:	a1 9e       	lsr	lr,0x1
800080bc:	58 08       	cp.w	r8,0
800080be:	c3 c1       	brne	80008136 <screen_line+0x2ae>
800080c0:	0c 9a       	mov	r10,r6
800080c2:	0c 99       	mov	r9,r6
800080c4:	f4 08 15 06 	lsl	r8,r10,0x6

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
800080c8:	1c 08       	add	r8,lr
800080ca:	f6 08 07 0a 	ld.ub	r10,r11[r8]
800080ce:	e0 1a ff f0 	andl	r10,0xfff0
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
800080d2:	f6 08 0b 0a 	st.b	r11[r8],r10
800080d6:	2f f9       	sub	r9,-1
800080d8:	5c 59       	castu.b	r9
800080da:	12 9a       	mov	r10,r9
800080dc:	12 3c       	cp.w	r12,r9
  //  if (hl ) { hl =0xf;a }

  x = screen_string(x, y, str, hl);
  screen_blank_line(x, y);

  print_dbg("\r\n");
800080de:	cf 34       	brge	800080c4 <screen_line+0x23c>
800080e0:	2f f7       	sub	r7,-1
800080e2:	e6 07 00 09 	add	r9,r3,r7
  if(hl > 2) { print_dbg("__"); }
800080e6:	e8 09 18 00 	cp.b	r9,r4
800080ea:	ce 04       	brge	800080aa <screen_line+0x222>
800080ec:	85 08       	st.w	r2[0x0],r8
800080ee:	fe cc ed 36 	sub	r12,pc,-4810
800080f2:	fe b0 ec ed 	rcall	80005acc <print_dbg>
  print_dbg(str);
800080f6:	30 28       	mov	r8,2
800080f8:	40 49       	lddsp	r9,sp[0x10]
800080fa:	f0 09 18 00 	cp.b	r9,r8

  return NCOLS;
}
800080fe:	e0 88 00 06 	brls	8000810a <screen_line+0x282>
80008102:	fe cc e7 32 	sub	r12,pc,-6350
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80008106:	fe b0 ec e3 	rcall	80005acc <print_dbg>
8000810a:	40 3c       	lddsp	r12,sp[0xc]
8000810c:	fe b0 ec e0 	rcall	80005acc <print_dbg>
80008110:	e0 6c 00 80 	mov	r12,128
80008114:	2f 5d       	sub	sp,-44
80008116:	d8 32       	popm	r0-r7,pc
80008118:	f4 0c 07 00 	ld.ub	r0,r10[r12]
8000811c:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80008120:	04 40       	or	r0,r2

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80008122:	f4 0c 0b 00 	st.b	r10[r12],r0
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008126:	c1 4b       	rjmp	80007f4e <screen_line+0xc6>
80008128:	f4 0c 07 00 	ld.ub	r0,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8000812c:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80008130:	f4 0c 0b 00 	st.b	r10[r12],r0
80008134:	c0 db       	rjmp	80007f4e <screen_line+0xc6>
80008136:	0c 9a       	mov	r10,r6

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80008138:	0c 99       	mov	r9,r6
8000813a:	f4 08 15 06 	lsl	r8,r10,0x6
8000813e:	1c 08       	add	r8,lr
80008140:	f6 08 07 0a 	ld.ub	r10,r11[r8]
80008144:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 y) {
  U8 i, j;
  for(i=x; i<NCOLS; i++) {
80008148:	f6 08 0b 0a 	st.b	r11[r8],r10
8000814c:	2f f9       	sub	r9,-1
8000814e:	5c 59       	castu.b	r9
80008150:	12 9a       	mov	r10,r9
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008152:	18 39       	cp.w	r9,r12
80008154:	fe 9a ff f3 	brle	8000813a <screen_line+0x2b2>
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80008158:	2f f7       	sub	r7,-1
8000815a:	e6 07 00 09 	add	r9,r3,r7
8000815e:	e8 09 18 00 	cp.b	r9,r4
80008162:	ca 44       	brge	800080aa <screen_line+0x222>
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008164:	cc 4b       	rjmp	800080ec <screen_line+0x264>
80008166:	40 8c       	lddsp	r12,sp[0x20]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80008168:	a7 6c       	lsl	r12,0x6
8000816a:	12 0c       	add	r12,r9
8000816c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80008170:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008174:	f4 0c 0b 0e 	st.b	r10[r12],lr
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80008178:	40 9c       	lddsp	r12,sp[0x24]
8000817a:	12 0c       	add	r12,r9
8000817c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80008180:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008184:	f4 0c 0b 0e 	st.b	r10[r12],lr
80008188:	40 ac       	lddsp	r12,sp[0x28]
8000818a:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8000818c:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
80008190:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80008194:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
80008198:	fb 1c 00 16 	ld.uh	r12,sp[22]
8000819c:	a7 6c       	lsl	r12,0x6
8000819e:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800081a0:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
800081a4:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800081a8:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800081ac:	fb 1c 00 18 	ld.uh	r12,sp[24]
800081b0:	a7 6c       	lsl	r12,0x6
800081b2:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800081b4:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
800081b8:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800081bc:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800081c0:	fb 1c 00 1a 	ld.uh	r12,sp[26]
800081c4:	a7 6c       	lsl	r12,0x6
800081c6:	12 0c       	add	r12,r9
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800081c8:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
800081cc:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800081d0:	f4 0c 0b 0e 	st.b	r10[r12],lr
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  static U32 pos;
  // if (x >= NCOLS) return;
  // if (y >= NROWS) return;
  pos = (y * NCOLS_2) + (x>>1);
800081d4:	fb 1c 00 1c 	ld.uh	r12,sp[28]
800081d8:	a7 6c       	lsl	r12,0x6
800081da:	12 0c       	add	r12,r9
800081dc:	f4 0c 07 0e 	ld.ub	lr,r10[r12]
  if (x%2) {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800081e0:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800081e4:	f4 0c 0b 0e 	st.b	r10[r12],lr
800081e8:	fb 1c 00 1e 	ld.uh	r12,sp[30]
800081ec:	a7 6c       	lsl	r12,0x6
800081ee:	f8 09 00 09 	add	r9,r12,r9
800081f2:	f4 09 07 0c 	ld.ub	r12,r10[r9]
800081f6:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800081fa:	f4 09 0b 0c 	st.b	r10[r9],r12
800081fe:	c2 5b       	rjmp	80008048 <screen_line+0x1c0>

80008200 <init_oled>:
80008200:	eb cd 40 c0 	pushm	r6-r7,lr
80008204:	20 2d       	sub	sp,8
80008206:	d3 03       	ssrf	0x10
80008208:	32 9c       	mov	r12,41
8000820a:	fe b0 d0 1f 	rcall	80002248 <gpio_set_gpio_pin>
8000820e:	32 9c       	mov	r12,41
80008210:	fe b0 d0 29 	rcall	80002262 <gpio_clr_gpio_pin>
80008214:	32 9c       	mov	r12,41
80008216:	fe b0 d0 19 	rcall	80002248 <gpio_set_gpio_pin>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000821a:	fe 7c 1c 00 	mov	r12,-58368
8000821e:	fe b0 d4 38 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008222:	31 7c       	mov	r12,23
80008224:	fe b0 d0 1f 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008228:	e0 6b 00 ae 	mov	r11,174
8000822c:	fe 7c 1c 00 	mov	r12,-58368
80008230:	fe b0 d4 42 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008234:	fe 7c 1c 00 	mov	r12,-58368
80008238:	fe b0 d4 2f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000823c:	fe 7c 1c 00 	mov	r12,-58368
80008240:	fe b0 d4 27 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008244:	31 7c       	mov	r12,23
80008246:	fe b0 d0 0e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000824a:	e0 6b 00 b3 	mov	r11,179
8000824e:	fe 7c 1c 00 	mov	r12,-58368
80008252:	fe b0 d4 31 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008256:	fe 7c 1c 00 	mov	r12,-58368
8000825a:	fe b0 d4 1e 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000825e:	fe 7c 1c 00 	mov	r12,-58368
80008262:	fe b0 d4 16 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008266:	31 7c       	mov	r12,23
80008268:	fe b0 cf fd 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000826c:	e0 6b 00 91 	mov	r11,145
80008270:	fe 7c 1c 00 	mov	r12,-58368
80008274:	fe b0 d4 20 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008278:	fe 7c 1c 00 	mov	r12,-58368
8000827c:	fe b0 d4 0d 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008280:	fe 7c 1c 00 	mov	r12,-58368
80008284:	fe b0 d4 05 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008288:	31 7c       	mov	r12,23
8000828a:	fe b0 cf ec 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000828e:	e0 6b 00 a8 	mov	r11,168
80008292:	fe 7c 1c 00 	mov	r12,-58368
80008296:	fe b0 d4 0f 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000829a:	fe 7c 1c 00 	mov	r12,-58368
8000829e:	fe b0 d3 fc 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800082a2:	fe 7c 1c 00 	mov	r12,-58368
800082a6:	fe b0 d3 f4 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800082aa:	31 7c       	mov	r12,23
800082ac:	fe b0 cf db 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800082b0:	33 fb       	mov	r11,63
800082b2:	fe 7c 1c 00 	mov	r12,-58368
800082b6:	fe b0 d3 ff 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800082ba:	fe 7c 1c 00 	mov	r12,-58368
800082be:	fe b0 d3 ec 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800082c2:	fe 7c 1c 00 	mov	r12,-58368
800082c6:	fe b0 d3 e4 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800082ca:	31 7c       	mov	r12,23
800082cc:	fe b0 cf cb 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800082d0:	e0 6b 00 86 	mov	r11,134
800082d4:	fe 7c 1c 00 	mov	r12,-58368
800082d8:	fe b0 d3 ee 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800082dc:	fe 7c 1c 00 	mov	r12,-58368
800082e0:	fe b0 d3 db 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800082e4:	fe 7c 1c 00 	mov	r12,-58368
800082e8:	fe b0 d3 d3 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800082ec:	31 7c       	mov	r12,23
800082ee:	fe b0 cf ba 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800082f2:	e0 6b 00 81 	mov	r11,129
800082f6:	fe 7c 1c 00 	mov	r12,-58368
800082fa:	fe b0 d3 dd 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800082fe:	fe 7c 1c 00 	mov	r12,-58368
80008302:	fe b0 d3 ca 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008306:	fe 7c 1c 00 	mov	r12,-58368
8000830a:	fe b0 d3 c2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000830e:	31 7c       	mov	r12,23
80008310:	fe b0 cf a9 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008314:	37 fb       	mov	r11,127
80008316:	fe 7c 1c 00 	mov	r12,-58368
8000831a:	fe b0 d3 cd 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000831e:	fe 7c 1c 00 	mov	r12,-58368
80008322:	fe b0 d3 ba 	rcall	80002a96 <usart_spi_unselectChip>
  write_command(0xA8);	// multiplex
  write_command(0x3F);
  write_command(0x86);	// full current range
  write_command(0x81);	// contrast to full
  write_command(0x7F);
  write_command(0xB2);	// frame freq
80008326:	e0 6c 00 b2 	mov	r12,178
8000832a:	fe b0 fd 99 	rcall	80007e5c <write_command>
  write_command(0x51);
8000832e:	35 1c       	mov	r12,81
80008330:	fe b0 fd 96 	rcall	80007e5c <write_command>
  write_command(0xA8);	// multiplex
80008334:	e0 6c 00 a8 	mov	r12,168
80008338:	fe b0 fd 92 	rcall	80007e5c <write_command>
  write_command(0x3F);
8000833c:	33 fc       	mov	r12,63
8000833e:	fe b0 fd 8f 	rcall	80007e5c <write_command>
  write_command(0xBC);	// precharge
80008342:	e0 6c 00 bc 	mov	r12,188
80008346:	fe b0 fd 8b 	rcall	80007e5c <write_command>
  write_command(0x10);
8000834a:	31 0c       	mov	r12,16
8000834c:	fe b0 fd 88 	rcall	80007e5c <write_command>
  write_command(0xBE);	// voltage
80008350:	e0 6c 00 be 	mov	r12,190
80008354:	fe b0 fd 84 	rcall	80007e5c <write_command>
  write_command(0x1C);
80008358:	31 cc       	mov	r12,28
8000835a:	fe b0 fd 81 	rcall	80007e5c <write_command>
  write_command(0xAD);	// dcdc
8000835e:	e0 6c 00 ad 	mov	r12,173
80008362:	fe b0 fd 7d 	rcall	80007e5c <write_command>
  write_command(0x02);
80008366:	30 2c       	mov	r12,2
80008368:	fe b0 fd 7a 	rcall	80007e5c <write_command>
  write_command(0xA0);	// remap
8000836c:	e0 6c 00 a0 	mov	r12,160
80008370:	fe b0 fd 76 	rcall	80007e5c <write_command>
  write_command(0x50);
80008374:	35 0c       	mov	r12,80
80008376:	fe b0 fd 73 	rcall	80007e5c <write_command>
  write_command(0xA1);	// start
8000837a:	e0 6c 00 a1 	mov	r12,161
8000837e:	fe b0 fd 6f 	rcall	80007e5c <write_command>
  write_command(0x0);
80008382:	30 0c       	mov	r12,0
80008384:	fe b0 fd 6c 	rcall	80007e5c <write_command>
  write_command(0xA2);	// offset
80008388:	e0 6c 00 a2 	mov	r12,162
8000838c:	fe b0 fd 68 	rcall	80007e5c <write_command>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008390:	fe 7c 1c 00 	mov	r12,-58368
80008394:	fe b0 d3 7d 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008398:	31 7c       	mov	r12,23
8000839a:	fe b0 cf 64 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000839e:	34 cb       	mov	r11,76
800083a0:	fe 7c 1c 00 	mov	r12,-58368
800083a4:	fe b0 d3 88 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800083a8:	fe 7c 1c 00 	mov	r12,-58368
800083ac:	fe b0 d3 75 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800083b0:	fe 7c 1c 00 	mov	r12,-58368
800083b4:	fe b0 d3 6d 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800083b8:	31 7c       	mov	r12,23
800083ba:	fe b0 cf 54 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800083be:	e0 6b 00 b1 	mov	r11,177
800083c2:	fe 7c 1c 00 	mov	r12,-58368
800083c6:	fe b0 d3 77 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800083ca:	fe 7c 1c 00 	mov	r12,-58368
800083ce:	fe b0 d3 64 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800083d2:	fe 7c 1c 00 	mov	r12,-58368
800083d6:	fe b0 d3 5c 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800083da:	31 7c       	mov	r12,23
800083dc:	fe b0 cf 43 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800083e0:	35 5b       	mov	r11,85
800083e2:	fe 7c 1c 00 	mov	r12,-58368
800083e6:	fe b0 d3 67 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800083ea:	fe 7c 1c 00 	mov	r12,-58368
800083ee:	fe b0 d3 54 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800083f2:	fe 7c 1c 00 	mov	r12,-58368
800083f6:	fe b0 d3 4c 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800083fa:	31 7c       	mov	r12,23
800083fc:	fe b0 cf 33 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008400:	e0 6b 00 b4 	mov	r11,180
80008404:	fe 7c 1c 00 	mov	r12,-58368
80008408:	fe b0 d3 56 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000840c:	fe 7c 1c 00 	mov	r12,-58368
80008410:	fe b0 d3 43 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008414:	fe 7c 1c 00 	mov	r12,-58368
80008418:	fe b0 d3 3b 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000841c:	31 7c       	mov	r12,23
8000841e:	fe b0 cf 22 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008422:	30 2b       	mov	r11,2
80008424:	fe 7c 1c 00 	mov	r12,-58368
80008428:	fe b0 d3 46 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000842c:	fe 7c 1c 00 	mov	r12,-58368
80008430:	fe b0 d3 33 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008434:	fe 7c 1c 00 	mov	r12,-58368
80008438:	fe b0 d3 2b 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000843c:	31 7c       	mov	r12,23
8000843e:	fe b0 cf 12 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008442:	e0 6b 00 b0 	mov	r11,176
80008446:	fe 7c 1c 00 	mov	r12,-58368
8000844a:	fe b0 d3 35 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000844e:	fe 7c 1c 00 	mov	r12,-58368
80008452:	fe b0 d3 22 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008456:	fe 7c 1c 00 	mov	r12,-58368
8000845a:	fe b0 d3 1a 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000845e:	31 7c       	mov	r12,23
80008460:	fe b0 cf 01 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008464:	32 8b       	mov	r11,40
80008466:	fe 7c 1c 00 	mov	r12,-58368
8000846a:	fe b0 d3 25 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
8000846e:	fe 7c 1c 00 	mov	r12,-58368
80008472:	fe b0 d3 12 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008476:	fe 7c 1c 00 	mov	r12,-58368
8000847a:	fe b0 d3 0a 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8000847e:	31 7c       	mov	r12,23
80008480:	fe b0 ce f1 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
80008484:	e0 6b 00 bf 	mov	r11,191
80008488:	fe 7c 1c 00 	mov	r12,-58368
8000848c:	fe b0 d3 14 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008490:	fe 7c 1c 00 	mov	r12,-58368
80008494:	fe b0 d3 01 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
80008498:	fe 7c 1c 00 	mov	r12,-58368
8000849c:	fe b0 d2 f9 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800084a0:	31 7c       	mov	r12,23
800084a2:	fe b0 ce e0 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800084a6:	30 fb       	mov	r11,15
800084a8:	fe 7c 1c 00 	mov	r12,-58368
800084ac:	fe b0 d3 04 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800084b0:	fe 7c 1c 00 	mov	r12,-58368
800084b4:	fe b0 d2 f1 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800084b8:	fe 7c 1c 00 	mov	r12,-58368
800084bc:	fe b0 d2 e9 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800084c0:	31 7c       	mov	r12,23
800084c2:	fe b0 ce d0 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800084c6:	e0 6b 00 a4 	mov	r11,164
800084ca:	fe 7c 1c 00 	mov	r12,-58368
800084ce:	fe b0 d2 f3 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800084d2:	fe 7c 1c 00 	mov	r12,-58368
800084d6:	fe b0 d2 e0 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800084da:	fe 7c 1c 00 	mov	r12,-58368
800084de:	fe b0 d2 d8 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800084e2:	31 7c       	mov	r12,23
800084e4:	fe b0 ce bf 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800084e8:	e0 6b 00 b8 	mov	r11,184
800084ec:	fe 7c 1c 00 	mov	r12,-58368
800084f0:	fe b0 d2 e2 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800084f4:	fe 7c 1c 00 	mov	r12,-58368
800084f8:	fe b0 d2 cf 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800084fc:	fe 7c 1c 00 	mov	r12,-58368
80008500:	fe b0 d2 c7 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008504:	31 7c       	mov	r12,23
80008506:	fe b0 ce ae 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000850a:	30 1b       	mov	r11,1
8000850c:	fe 7c 1c 00 	mov	r12,-58368
80008510:	fe b0 d2 d2 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008514:	fe 7c 1c 00 	mov	r12,-58368
80008518:	fe b0 d2 bf 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000851c:	fe 7c 1c 00 	mov	r12,-58368
80008520:	fe b0 d2 b7 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008524:	31 7c       	mov	r12,23
80008526:	fe b0 ce 9e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000852a:	31 1b       	mov	r11,17
8000852c:	fe 7c 1c 00 	mov	r12,-58368
80008530:	fe b0 d2 c2 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008534:	fe 7c 1c 00 	mov	r12,-58368
80008538:	fe b0 d2 af 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000853c:	fe 7c 1c 00 	mov	r12,-58368
80008540:	fe b0 d2 a7 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008544:	31 7c       	mov	r12,23
80008546:	fe b0 ce 8e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000854a:	32 2b       	mov	r11,34
8000854c:	fe 7c 1c 00 	mov	r12,-58368
80008550:	fe b0 d2 b2 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008554:	fe 7c 1c 00 	mov	r12,-58368
80008558:	fe b0 d2 9f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000855c:	fe 7c 1c 00 	mov	r12,-58368
80008560:	fe b0 d2 97 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008564:	31 7c       	mov	r12,23
80008566:	fe b0 ce 7e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000856a:	33 2b       	mov	r11,50
8000856c:	fe 7c 1c 00 	mov	r12,-58368
80008570:	fe b0 d2 a2 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008574:	fe 7c 1c 00 	mov	r12,-58368
80008578:	fe b0 d2 8f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000857c:	fe 7c 1c 00 	mov	r12,-58368
80008580:	fe b0 d2 87 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008584:	31 7c       	mov	r12,23
80008586:	fe b0 ce 6e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000858a:	34 3b       	mov	r11,67
8000858c:	fe 7c 1c 00 	mov	r12,-58368
80008590:	fe b0 d2 92 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008594:	fe 7c 1c 00 	mov	r12,-58368
80008598:	fe b0 d2 7f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000859c:	fe 7c 1c 00 	mov	r12,-58368
800085a0:	fe b0 d2 77 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800085a4:	31 7c       	mov	r12,23
800085a6:	fe b0 ce 5e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800085aa:	35 4b       	mov	r11,84
800085ac:	fe 7c 1c 00 	mov	r12,-58368
800085b0:	fe b0 d2 82 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800085b4:	fe 7c 1c 00 	mov	r12,-58368
800085b8:	fe b0 d2 6f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800085bc:	fe 7c 1c 00 	mov	r12,-58368
800085c0:	fe b0 d2 67 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800085c4:	31 7c       	mov	r12,23
800085c6:	fe b0 ce 4e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800085ca:	36 5b       	mov	r11,101
800085cc:	fe 7c 1c 00 	mov	r12,-58368
800085d0:	fe b0 d2 72 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800085d4:	fe 7c 1c 00 	mov	r12,-58368
800085d8:	fe b0 d2 5f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800085dc:	fe 7c 1c 00 	mov	r12,-58368
800085e0:	fe b0 d2 57 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800085e4:	31 7c       	mov	r12,23
800085e6:	fe b0 ce 3e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800085ea:	37 6b       	mov	r11,118
800085ec:	fe 7c 1c 00 	mov	r12,-58368
800085f0:	fe b0 d2 62 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800085f4:	fe 7c 1c 00 	mov	r12,-58368
800085f8:	fe b0 d2 4f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800085fc:	fe 7c 1c 00 	mov	r12,-58368
80008600:	fe b0 d2 47 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008604:	31 7c       	mov	r12,23
80008606:	fe b0 ce 2e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000860a:	31 5b       	mov	r11,21
8000860c:	fe 7c 1c 00 	mov	r12,-58368
80008610:	fe b0 d2 52 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008614:	fe 7c 1c 00 	mov	r12,-58368
80008618:	fe b0 d2 3f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000861c:	fe 7c 1c 00 	mov	r12,-58368
80008620:	fe b0 d2 37 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008624:	31 7c       	mov	r12,23
80008626:	fe b0 ce 1e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000862a:	30 0b       	mov	r11,0
8000862c:	fe 7c 1c 00 	mov	r12,-58368
80008630:	fe b0 d2 42 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008634:	fe 7c 1c 00 	mov	r12,-58368
80008638:	fe b0 d2 2f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000863c:	fe 7c 1c 00 	mov	r12,-58368
80008640:	fe b0 d2 27 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008644:	31 7c       	mov	r12,23
80008646:	fe b0 ce 0e 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000864a:	33 fb       	mov	r11,63
8000864c:	fe 7c 1c 00 	mov	r12,-58368
80008650:	fe b0 d2 32 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008654:	fe 7c 1c 00 	mov	r12,-58368
80008658:	fe b0 d2 1f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000865c:	fe 7c 1c 00 	mov	r12,-58368
80008660:	fe b0 d2 17 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008664:	31 7c       	mov	r12,23
80008666:	fe b0 cd fe 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000866a:	37 5b       	mov	r11,117
8000866c:	fe 7c 1c 00 	mov	r12,-58368
80008670:	fe b0 d2 22 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008674:	fe 7c 1c 00 	mov	r12,-58368
80008678:	fe b0 d2 0f 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000867c:	fe 7c 1c 00 	mov	r12,-58368
80008680:	fe b0 d2 07 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80008684:	31 7c       	mov	r12,23
80008686:	fe b0 cd ee 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
8000868a:	30 0b       	mov	r11,0
8000868c:	fe 7c 1c 00 	mov	r12,-58368
80008690:	fe b0 d2 12 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008694:	fe 7c 1c 00 	mov	r12,-58368
80008698:	fe b0 d1 ff 	rcall	80002a96 <usart_spi_unselectChip>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
8000869c:	fe 7c 1c 00 	mov	r12,-58368
800086a0:	fe b0 d1 f7 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800086a4:	31 7c       	mov	r12,23
800086a6:	fe b0 cd de 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800086aa:	33 fb       	mov	r11,63
800086ac:	fe 7c 1c 00 	mov	r12,-58368
800086b0:	fe b0 d2 02 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800086b4:	fe 7c 1c 00 	mov	r12,-58368
800086b8:	30 07       	mov	r7,0
800086ba:	fe b0 d1 ee 	rcall	80002a96 <usart_spi_unselectChip>

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800086be:	fe 7c 1c 00 	mov	r12,-58368
800086c2:	fe b0 d1 e6 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
800086c6:	31 7c       	mov	r12,23
800086c8:	fe b0 cd c0 	rcall	80002248 <gpio_set_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800086cc:	30 0b       	mov	r11,0
800086ce:	fe 7c 1c 00 	mov	r12,-58368
800086d2:	fe b0 d1 f1 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
800086d6:	fe 7c 1c 00 	mov	r12,-58368
800086da:	2f f7       	sub	r7,-1
800086dc:	fe b0 d1 dd 	rcall	80002a96 <usart_spi_unselectChip>
  write_command(0x75);
  write_command(0);
  write_command(63);
		
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
800086e0:	e0 47 10 00 	cp.w	r7,4096
800086e4:	ce d1       	brne	800086be <init_oled+0x4be>
  usart_spi_unselectChip(OLED_USART_SPI);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  usart_spi_selectChip(OLED_USART_SPI);
800086e6:	fe 7c 1c 00 	mov	r12,-58368
800086ea:	fe b0 d1 d2 	rcall	80002a8e <usart_spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800086ee:	31 7c       	mov	r12,23
800086f0:	fe b0 cd b9 	rcall	80002262 <gpio_clr_gpio_pin>
  usart_putchar(OLED_USART_SPI, c);
800086f4:	e0 6b 00 af 	mov	r11,175
800086f8:	fe 7c 1c 00 	mov	r12,-58368
800086fc:	fe b0 d1 dc 	rcall	80002ab4 <usart_putchar>
  usart_spi_unselectChip(OLED_USART_SPI);
80008700:	fe 7c 1c 00 	mov	r12,-58368
80008704:	fe b0 d1 c9 	rcall	80002a96 <usart_spi_unselectChip>
  // clear OLED RAM 
  for(i=0; i<GRAM_BYTES; i++) { write_data(0); }
  write_command(0xAF);	// on

  //  delay_ms(10) 
  delay = FCPU_HZ >> 8; while(delay--) {;;}
80008708:	e2 78 ef 14 	mov	r8,257812
8000870c:	30 09       	mov	r9,0
8000870e:	3f f6       	mov	r6,-1
80008710:	fa e9 00 00 	st.d	sp[0],r8
80008714:	3f f7       	mov	r7,-1
80008716:	fa e8 00 00 	ld.d	r8,sp[0]
8000871a:	f0 06 00 0a 	add	r10,r8,r6
8000871e:	f2 07 00 4b 	adc	r11,r9,r7
80008722:	fa eb 00 00 	st.d	sp[0],r10
80008726:	58 08       	cp.w	r8,0
80008728:	5c 29       	cpc	r9
8000872a:	cf 61       	brne	80008716 <init_oled+0x516>
  //  cpu_irq_enable();
  Enable_global_interrupt();
8000872c:	d5 03       	csrf	0x10

}
8000872e:	2f ed       	sub	sp,-8
80008730:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80008734 <process_sw>:
  { kEventSwitchDown2, kEventSwitchUp2 },
  { kEventSwitchDown3, kEventSwitchUp3 },
};

// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
80008734:	eb cd 40 80 	pushm	r7,lr
80008738:	20 2d       	sub	sp,8
  event_t e;   
  e.eventType = kSwitchEvents[swIdx][gpio_get_pin_value(kSwitchPins[swIdx])];
8000873a:	fe c8 ed 46 	sub	r8,pc,-4794
8000873e:	18 97       	mov	r7,r12
80008740:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80008744:	fe b0 cd 77 	rcall	80002232 <gpio_get_pin_value>
80008748:	fe c8 ed 74 	sub	r8,pc,-4748
8000874c:	f8 07 00 1c 	add	r12,r12,r7<<0x1
  post_event(&e);
80008750:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
80008754:	1a 9c       	mov	r12,sp
80008756:	50 08       	stdsp	sp[0x0],r8
}
80008758:	fe b0 f6 b6 	rcall	800074c4 <post_event>
8000875c:	2f ed       	sub	sp,-8
8000875e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008762:	d7 03       	nop

80008764 <process_timers>:
}


// process the list of timers.
// called by client at desired tick interval.
void process_timers( void ) {
80008764:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80008768:	e0 67 12 dc 	mov	r7,4828
    if ( t == 0 ) { continue; }
8000876c:	6e 06       	ld.w	r6,r7[0x0]
8000876e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008770:	c0 80       	breq	80008780 <process_timers+0x1c>
80008772:	6c 28       	ld.w	r8,r6[0x8]
80008774:	58 08       	cp.w	r8,0
80008776:	e0 8a 00 05 	brle	80008780 <process_timers+0x1c>
      // time remaining, decrement tick counter
      t->timeout--;
8000877a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
8000877c:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
8000877e:	c5 50       	breq	80008828 <process_timers+0xc4>
    if ( t == 0 ) { continue; }
80008780:	6e 16       	ld.w	r6,r7[0x4]
80008782:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008784:	c0 80       	breq	80008794 <process_timers+0x30>
80008786:	6c 28       	ld.w	r8,r6[0x8]
80008788:	58 08       	cp.w	r8,0
8000878a:	e0 8a 00 05 	brle	80008794 <process_timers+0x30>
      // time remaining, decrement tick counter
      t->timeout--;
8000878e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008790:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80008792:	c5 90       	breq	80008844 <process_timers+0xe0>
    if ( t == 0 ) { continue; }
80008794:	6e 26       	ld.w	r6,r7[0x8]
80008796:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80008798:	c0 80       	breq	800087a8 <process_timers+0x44>
8000879a:	6c 28       	ld.w	r8,r6[0x8]
8000879c:	58 08       	cp.w	r8,0
8000879e:	e0 8a 00 05 	brle	800087a8 <process_timers+0x44>
      // time remaining, decrement tick counter
      t->timeout--;
800087a2:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800087a4:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800087a6:	c5 d0       	breq	80008860 <process_timers+0xfc>
    if ( t == 0 ) { continue; }
800087a8:	6e 36       	ld.w	r6,r7[0xc]
800087aa:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800087ac:	c0 80       	breq	800087bc <process_timers+0x58>
800087ae:	6c 28       	ld.w	r8,r6[0x8]
800087b0:	58 08       	cp.w	r8,0
800087b2:	e0 8a 00 05 	brle	800087bc <process_timers+0x58>
      // time remaining, decrement tick counter
      t->timeout--;
800087b6:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800087b8:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800087ba:	c6 10       	breq	8000887c <process_timers+0x118>
    if ( t == 0 ) { continue; }
800087bc:	6e 46       	ld.w	r6,r7[0x10]
800087be:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800087c0:	c0 80       	breq	800087d0 <process_timers+0x6c>
800087c2:	6c 28       	ld.w	r8,r6[0x8]
800087c4:	58 08       	cp.w	r8,0
800087c6:	e0 8a 00 05 	brle	800087d0 <process_timers+0x6c>
      // time remaining, decrement tick counter
      t->timeout--;
800087ca:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800087cc:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800087ce:	c6 50       	breq	80008898 <process_timers+0x134>
    if ( t == 0 ) { continue; }
800087d0:	6e 56       	ld.w	r6,r7[0x14]
800087d2:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800087d4:	c0 80       	breq	800087e4 <process_timers+0x80>
800087d6:	6c 28       	ld.w	r8,r6[0x8]
800087d8:	58 08       	cp.w	r8,0
800087da:	e0 8a 00 05 	brle	800087e4 <process_timers+0x80>
      // time remaining, decrement tick counter
      t->timeout--;
800087de:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800087e0:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800087e2:	c6 90       	breq	800088b4 <process_timers+0x150>
    if ( t == 0 ) { continue; }
800087e4:	6e 66       	ld.w	r6,r7[0x18]
800087e6:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800087e8:	c0 80       	breq	800087f8 <process_timers+0x94>
800087ea:	6c 28       	ld.w	r8,r6[0x8]
800087ec:	58 08       	cp.w	r8,0
800087ee:	e0 8a 00 05 	brle	800087f8 <process_timers+0x94>
      // time remaining, decrement tick counter
      t->timeout--;
800087f2:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
800087f4:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
800087f6:	c6 d0       	breq	800088d0 <process_timers+0x16c>
    if ( t == 0 ) { continue; }
800087f8:	6e 76       	ld.w	r6,r7[0x1c]
800087fa:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
800087fc:	c0 80       	breq	8000880c <process_timers+0xa8>
800087fe:	6c 28       	ld.w	r8,r6[0x8]
80008800:	58 08       	cp.w	r8,0
80008802:	e0 8a 00 05 	brle	8000880c <process_timers+0xa8>
      // time remaining, decrement tick counter
      t->timeout--;
80008806:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80008808:	8d 28       	st.w	r6[0x8],r8
8000880a:	c0 30       	breq	80008810 <process_timers+0xac>
8000880c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
80008810:	6c 48       	ld.w	r8,r6[0x10]
80008812:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008814:	c0 30       	breq	8000881a <process_timers+0xb6>
80008816:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008818:	5d 18       	icall	r8
8000881a:	6c 08       	ld.w	r8,r6[0x0]
8000881c:	58 08       	cp.w	r8,0
	  t->timeout = t->timeoutReload;
8000881e:	c6 70       	breq	800088ec <process_timers+0x188>
80008820:	6c 38       	ld.w	r8,r6[0xc]
80008822:	8d 28       	st.w	r6[0x8],r8
80008824:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80008828:	6c 48       	ld.w	r8,r6[0x10]
8000882a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
8000882c:	c0 30       	breq	80008832 <process_timers+0xce>
8000882e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008830:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80008832:	6c 08       	ld.w	r8,r6[0x0]
80008834:	58 08       	cp.w	r8,0
80008836:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8000883a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8000883e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80008842:	c9 fb       	rjmp	80008780 <process_timers+0x1c>
80008844:	6c 48       	ld.w	r8,r6[0x10]
80008846:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008848:	c0 30       	breq	8000884e <process_timers+0xea>
8000884a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
8000884c:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000884e:	6c 08       	ld.w	r8,r6[0x0]
80008850:	58 08       	cp.w	r8,0
80008852:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80008856:	ed f8 10 03 	ld.wne	r8,r6[0xc]
8000885a:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8000885e:	c9 bb       	rjmp	80008794 <process_timers+0x30>
80008860:	6c 48       	ld.w	r8,r6[0x10]
80008862:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008864:	c0 30       	breq	8000886a <process_timers+0x106>
80008866:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008868:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
8000886a:	6c 08       	ld.w	r8,r6[0x0]
8000886c:	58 08       	cp.w	r8,0
8000886e:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80008872:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80008876:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
8000887a:	c9 7b       	rjmp	800087a8 <process_timers+0x44>
8000887c:	6c 48       	ld.w	r8,r6[0x10]
8000887e:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80008880:	c0 30       	breq	80008886 <process_timers+0x122>
80008882:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80008884:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80008886:	6c 08       	ld.w	r8,r6[0x0]
80008888:	58 08       	cp.w	r8,0
8000888a:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
8000888e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80008892:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80008896:	c9 3b       	rjmp	800087bc <process_timers+0x58>
80008898:	6c 48       	ld.w	r8,r6[0x10]
8000889a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
8000889c:	c0 30       	breq	800088a2 <process_timers+0x13e>
8000889e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800088a0:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800088a2:	6c 08       	ld.w	r8,r6[0x0]
800088a4:	58 08       	cp.w	r8,0
800088a6:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800088aa:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800088ae:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800088b2:	c8 fb       	rjmp	800087d0 <process_timers+0x6c>
800088b4:	6c 48       	ld.w	r8,r6[0x10]
800088b6:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800088b8:	c0 30       	breq	800088be <process_timers+0x15a>
800088ba:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800088bc:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800088be:	6c 08       	ld.w	r8,r6[0x0]
800088c0:	58 08       	cp.w	r8,0
800088c2:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800088c6:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800088ca:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
800088ce:	c8 bb       	rjmp	800087e4 <process_timers+0x80>
800088d0:	6c 48       	ld.w	r8,r6[0x10]
800088d2:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
800088d4:	c0 30       	breq	800088da <process_timers+0x176>
800088d6:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
800088d8:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800088da:	6c 08       	ld.w	r8,r6[0x0]
800088dc:	58 08       	cp.w	r8,0
800088de:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
800088e2:	ed f8 10 03 	ld.wne	r8,r6[0xc]
800088e6:	ed f8 1a 02 	st.wne	r6[0x8],r8
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
800088ea:	c8 7b       	rjmp	800087f8 <process_timers+0x94>
800088ec:	8f 78       	st.w	r7[0x1c],r8
800088ee:	c8 fb       	rjmp	8000880c <process_timers+0xa8>

800088f0 <set_timer>:
800088f0:	eb cd 40 e0 	pushm	r5-r7,lr
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
800088f4:	58 09       	cp.w	r9,0
800088f6:	c6 10       	breq	800089b8 <set_timer+0xc8>

// find a timer given a tag and optional callback
static swTimer_t* find_timer( timerCallback callback, int tag ) {
  int k;
  swTimer_t* t;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
800088f8:	e1 be 00 00 	mfsr	lr,0x0
 * \return True if interrupt level is enabled.
 */
static inline bool cpu_irq_level_is_enabled_flags(irqflags_t flags,
		uint32_t level)
{
	return !(flags & (1 << level));
800088fc:	ee 1e 00 04 	eorh	lr,0x4
80008900:	ed de c2 41 	bfextu	r6,lr,0x12,0x1

  Disable_interrupt_level( TIMER_INT_LEVEL );
80008904:	d3 23       	ssrf	0x12

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008906:	e0 6e 12 dc 	mov	lr,4828
    if ( t == NULL ) {
8000890a:	7c 07       	ld.w	r7,lr[0x0]
8000890c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000890e:	c0 40       	breq	80008916 <set_timer+0x26>
80008910:	6e 15       	ld.w	r5,r7[0x4]
80008912:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008914:	c5 40       	breq	800089bc <set_timer+0xcc>
    if ( t == NULL ) {
80008916:	7c 17       	ld.w	r7,lr[0x4]
80008918:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000891a:	c0 40       	breq	80008922 <set_timer+0x32>
8000891c:	6e 15       	ld.w	r5,r7[0x4]
8000891e:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008920:	c5 60       	breq	800089cc <set_timer+0xdc>
    if ( t == NULL ) {
80008922:	7c 27       	ld.w	r7,lr[0x8]
80008924:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80008926:	c0 40       	breq	8000892e <set_timer+0x3e>
80008928:	6e 15       	ld.w	r5,r7[0x4]
8000892a:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8000892c:	c5 60       	breq	800089d8 <set_timer+0xe8>
    if ( t == NULL ) {
8000892e:	7c 37       	ld.w	r7,lr[0xc]
80008930:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80008932:	c0 40       	breq	8000893a <set_timer+0x4a>
80008934:	6e 15       	ld.w	r5,r7[0x4]
80008936:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008938:	c5 40       	breq	800089e0 <set_timer+0xf0>
    if ( t == NULL ) {
8000893a:	7c 47       	ld.w	r7,lr[0x10]
8000893c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000893e:	c0 40       	breq	80008946 <set_timer+0x56>
80008940:	6e 15       	ld.w	r5,r7[0x4]
80008942:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008944:	c5 20       	breq	800089e8 <set_timer+0xf8>
    if ( t == NULL ) {
80008946:	7c 57       	ld.w	r7,lr[0x14]
80008948:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
8000894a:	c0 40       	breq	80008952 <set_timer+0x62>
8000894c:	6e 15       	ld.w	r5,r7[0x4]
8000894e:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80008950:	c5 00       	breq	800089f0 <set_timer+0x100>
    if ( t == NULL ) {
80008952:	7c 67       	ld.w	r7,lr[0x18]
80008954:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80008956:	c0 40       	breq	8000895e <set_timer+0x6e>
80008958:	6e 15       	ld.w	r5,r7[0x4]
8000895a:	0a 3b       	cp.w	r11,r5
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );

  Disable_interrupt_level( TIMER_INT_LEVEL );

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
8000895c:	c4 e0       	breq	800089f8 <set_timer+0x108>
    if ( t == NULL ) {
8000895e:	7c 77       	ld.w	r7,lr[0x1c]
80008960:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80008962:	c0 40       	breq	8000896a <set_timer+0x7a>
80008964:	6e 15       	ld.w	r5,r7[0x4]
80008966:	0a 3b       	cp.w	r11,r5
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
80008968:	c4 c0       	breq	80008a00 <set_timer+0x110>
8000896a:	58 06       	cp.w	r6,0
   
  if ( find_timer( callback, tag ) != NULL ) {
    return false;
  }

  t->callback = callback;
8000896c:	c3 41       	brne	800089d4 <set_timer+0xe4>
  t->tag = tag;
8000896e:	99 49       	st.w	r12[0x10],r9
  t->timeout = ticks;
  t->fperiodic = fPeriodic;
80008970:	99 1b       	st.w	r12[0x4],r11
  t->timeoutReload = ticks;
80008972:	99 08       	st.w	r12[0x0],r8
    return false;
  }

  t->callback = callback;
  t->tag = tag;
  t->timeout = ticks;
80008974:	99 3a       	st.w	r12[0xc],r10
}

// Add timer to pointer array. Finds first empty slot.
static bool add_timer( swTimer_t* newTimer) {
  int k;
  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
80008976:	99 2a       	st.w	r12[0x8],r10
80008978:	e1 ba 00 00 	mfsr	r10,0x0

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8000897c:	d3 23       	ssrf	0x12
8000897e:	e0 68 12 dc 	mov	r8,4828
80008982:	7c 09       	ld.w	r9,lr[0x0]
80008984:	58 09       	cp.w	r9,0
80008986:	c4 80       	breq	80008a16 <set_timer+0x126>
80008988:	70 19       	ld.w	r9,r8[0x4]
8000898a:	58 09       	cp.w	r9,0
8000898c:	c4 40       	breq	80008a14 <set_timer+0x124>
8000898e:	70 29       	ld.w	r9,r8[0x8]
80008990:	58 09       	cp.w	r9,0
80008992:	c4 70       	breq	80008a20 <set_timer+0x130>
80008994:	70 39       	ld.w	r9,r8[0xc]
80008996:	58 09       	cp.w	r9,0
80008998:	c4 60       	breq	80008a24 <set_timer+0x134>
8000899a:	70 49       	ld.w	r9,r8[0x10]
8000899c:	58 09       	cp.w	r9,0
8000899e:	c4 50       	breq	80008a28 <set_timer+0x138>
800089a0:	70 59       	ld.w	r9,r8[0x14]
800089a2:	58 09       	cp.w	r9,0
800089a4:	c4 40       	breq	80008a2c <set_timer+0x13c>
800089a6:	70 69       	ld.w	r9,r8[0x18]
800089a8:	58 09       	cp.w	r9,0
800089aa:	c4 30       	breq	80008a30 <set_timer+0x140>
800089ac:	70 78       	ld.w	r8,r8[0x1c]
      Enable_interrupt_level( TIMER_INT_LEVEL );
      return true;
    }
  }

  if (fReenableInterrupts) {
800089ae:	58 08       	cp.w	r8,0
800089b0:	c4 20       	breq	80008a34 <set_timer+0x144>
800089b2:	e6 1a 00 04 	andh	r10,0x4,COH
    Enable_interrupt_level( TIMER_INT_LEVEL );
800089b6:	c2 b0       	breq	80008a0c <set_timer+0x11c>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
800089b8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800089bc:	6e 47       	ld.w	r7,r7[0x10]
	  // tag and callback both specified and matched
	  if (fReenableInterrupts)
800089be:	0e 39       	cp.w	r9,r7
800089c0:	ca b1       	brne	80008916 <set_timer+0x26>
	    Enable_interrupt_level( TIMER_INT_LEVEL );
800089c2:	58 06       	cp.w	r6,0
800089c4:	cf a0       	breq	800089b8 <set_timer+0xc8>
800089c6:	d5 23       	csrf	0x12
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
800089c8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800089cc:	6e 47       	ld.w	r7,r7[0x10]
800089ce:	0e 39       	cp.w	r9,r7
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
800089d0:	ca 91       	brne	80008922 <set_timer+0x32>
800089d2:	cf 8b       	rjmp	800089c2 <set_timer+0xd2>
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
800089d4:	d5 23       	csrf	0x12
800089d6:	cc cb       	rjmp	8000896e <set_timer+0x7e>
800089d8:	6e 47       	ld.w	r7,r7[0x10]
800089da:	0e 39       	cp.w	r9,r7
800089dc:	ca 91       	brne	8000892e <set_timer+0x3e>
800089de:	cf 2b       	rjmp	800089c2 <set_timer+0xd2>
800089e0:	6e 47       	ld.w	r7,r7[0x10]
800089e2:	0e 39       	cp.w	r9,r7
800089e4:	ca b1       	brne	8000893a <set_timer+0x4a>
800089e6:	ce eb       	rjmp	800089c2 <set_timer+0xd2>
800089e8:	6e 47       	ld.w	r7,r7[0x10]
800089ea:	0e 39       	cp.w	r9,r7
800089ec:	ca d1       	brne	80008946 <set_timer+0x56>
800089ee:	ce ab       	rjmp	800089c2 <set_timer+0xd2>
800089f0:	6e 47       	ld.w	r7,r7[0x10]
800089f2:	0e 39       	cp.w	r9,r7
800089f4:	ca f1       	brne	80008952 <set_timer+0x62>
800089f6:	ce 6b       	rjmp	800089c2 <set_timer+0xd2>
800089f8:	6e 47       	ld.w	r7,r7[0x10]
800089fa:	0e 39       	cp.w	r9,r7
800089fc:	cb 11       	brne	8000895e <set_timer+0x6e>
800089fe:	ce 2b       	rjmp	800089c2 <set_timer+0xd2>
80008a00:	6e 47       	ld.w	r7,r7[0x10]
	return t;
      }
    }
  }

  if (fReenableInterrupts) {
80008a02:	0e 39       	cp.w	r9,r7
80008a04:	cd f0       	breq	800089c2 <set_timer+0xd2>
80008a06:	58 06       	cp.w	r6,0
      return true;
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80008a08:	cb 30       	breq	8000896e <set_timer+0x7e>
80008a0a:	ce 5b       	rjmp	800089d4 <set_timer+0xe4>
80008a0c:	d5 23       	csrf	0x12
80008a0e:	14 9c       	mov	r12,r10

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80008a10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
      timers[k] = newTimer;
80008a14:	30 19       	mov	r9,1
      Enable_interrupt_level( TIMER_INT_LEVEL );
80008a16:	fc 09 09 2c 	st.w	lr[r9<<0x2],r12
80008a1a:	d5 23       	csrf	0x12

  Disable_interrupt_level( TIMER_INT_LEVEL );

  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80008a1c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80008a20:	30 29       	mov	r9,2
80008a22:	cf ab       	rjmp	80008a16 <set_timer+0x126>
80008a24:	30 39       	mov	r9,3
80008a26:	cf 8b       	rjmp	80008a16 <set_timer+0x126>
80008a28:	30 49       	mov	r9,4
80008a2a:	cf 6b       	rjmp	80008a16 <set_timer+0x126>
80008a2c:	30 59       	mov	r9,5
80008a2e:	cf 4b       	rjmp	80008a16 <set_timer+0x126>
      }
    }
  }

  if (fReenableInterrupts) {
    Enable_interrupt_level( TIMER_INT_LEVEL );
80008a30:	30 69       	mov	r9,6
80008a32:	cf 2b       	rjmp	80008a16 <set_timer+0x126>
80008a34:	30 79       	mov	r9,7
80008a36:	cf 0b       	rjmp	80008a16 <set_timer+0x126>

80008a38 <_stext>:
80008a38:	e0 7d 00 00 	mov	sp,65536
80008a3c:	fe c0 fa 3c 	sub	r0,pc,-1476
80008a40:	e3 b0 00 01 	mtsr	0x4,r0
80008a44:	d5 53       	csrf	0x15
80008a46:	30 80       	mov	r0,8
80008a48:	31 01       	mov	r1,16
80008a4a:	02 30       	cp.w	r0,r1
80008a4c:	c0 72       	brcc	80008a5a <idata_load_loop_end>
80008a4e:	fe c2 ed 5e 	sub	r2,pc,-4770

80008a52 <idata_load_loop>:
80008a52:	a5 05       	ld.d	r4,r2++
80008a54:	a1 24       	st.d	r0++,r4
80008a56:	02 30       	cp.w	r0,r1
80008a58:	cf d3       	brcs	80008a52 <idata_load_loop>

80008a5a <idata_load_loop_end>:
80008a5a:	31 00       	mov	r0,16
80008a5c:	e0 61 1c 68 	mov	r1,7272
80008a60:	02 30       	cp.w	r0,r1
80008a62:	c0 62       	brcc	80008a6e <udata_clear_loop_end>
80008a64:	30 02       	mov	r2,0
80008a66:	30 03       	mov	r3,0

80008a68 <udata_clear_loop>:
80008a68:	a1 22       	st.d	r0++,r2
80008a6a:	02 30       	cp.w	r0,r1
80008a6c:	cf e3       	brcs	80008a68 <udata_clear_loop>

80008a6e <udata_clear_loop_end>:
80008a6e:	fe cf 0d 2a 	sub	pc,pc,3370
80008a72:	d7 03       	nop

80008a74 <__avr32_umod64>:
80008a74:	d4 31       	pushm	r0-r7,lr
80008a76:	1a 97       	mov	r7,sp
80008a78:	20 2d       	sub	sp,8
80008a7a:	10 9c       	mov	r12,r8
80008a7c:	12 95       	mov	r5,r9
80008a7e:	14 9e       	mov	lr,r10
80008a80:	16 93       	mov	r3,r11
80008a82:	16 96       	mov	r6,r11
80008a84:	58 09       	cp.w	r9,0
80008a86:	c4 41       	brne	80008b0e <__avr32_umod64+0x9a>
80008a88:	16 38       	cp.w	r8,r11
80008a8a:	e0 88 00 5a 	brls	80008b3e <__avr32_umod64+0xca>
80008a8e:	f0 08 12 00 	clz	r8,r8
80008a92:	c0 d0       	breq	80008aac <__avr32_umod64+0x38>
80008a94:	f6 08 09 46 	lsl	r6,r11,r8
80008a98:	f8 08 09 4c 	lsl	r12,r12,r8
80008a9c:	f0 0b 11 20 	rsub	r11,r8,32
80008aa0:	f4 08 09 4e 	lsl	lr,r10,r8
80008aa4:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008aa8:	f7 e6 10 06 	or	r6,r11,r6
80008aac:	f8 0a 16 10 	lsr	r10,r12,0x10
80008ab0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008ab4:	ec 0a 0d 02 	divu	r2,r6,r10
80008ab8:	fc 09 16 10 	lsr	r9,lr,0x10
80008abc:	ea 02 02 4b 	mul	r11,r5,r2
80008ac0:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008ac4:	12 3b       	cp.w	r11,r9
80008ac6:	e0 88 00 09 	brls	80008ad8 <__avr32_umod64+0x64>
80008aca:	18 09       	add	r9,r12
80008acc:	12 3c       	cp.w	r12,r9
80008ace:	e0 8b 00 05 	brhi	80008ad8 <__avr32_umod64+0x64>
80008ad2:	12 3b       	cp.w	r11,r9
80008ad4:	f3 dc eb 09 	addhi	r9,r9,r12
80008ad8:	f2 0b 01 0b 	sub	r11,r9,r11
80008adc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008ae0:	f6 0a 0d 0a 	divu	r10,r11,r10
80008ae4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008ae8:	ea 0a 02 4a 	mul	r10,r5,r10
80008aec:	1c 3a       	cp.w	r10,lr
80008aee:	e0 88 00 09 	brls	80008b00 <__avr32_umod64+0x8c>
80008af2:	18 0e       	add	lr,r12
80008af4:	1c 3c       	cp.w	r12,lr
80008af6:	e0 8b 00 05 	brhi	80008b00 <__avr32_umod64+0x8c>
80008afa:	1c 3a       	cp.w	r10,lr
80008afc:	fd dc eb 0e 	addhi	lr,lr,r12
80008b00:	fc 0a 01 0a 	sub	r10,lr,r10
80008b04:	30 0b       	mov	r11,0
80008b06:	f4 08 0a 4a 	lsr	r10,r10,r8
80008b0a:	2f ed       	sub	sp,-8
80008b0c:	d8 32       	popm	r0-r7,pc
80008b0e:	16 39       	cp.w	r9,r11
80008b10:	fe 9b ff fd 	brhi	80008b0a <__avr32_umod64+0x96>
80008b14:	f2 09 12 00 	clz	r9,r9
80008b18:	c4 61       	brne	80008ba4 <__avr32_umod64+0x130>
80008b1a:	14 38       	cp.w	r8,r10
80008b1c:	5f 8b       	srls	r11
80008b1e:	06 35       	cp.w	r5,r3
80008b20:	5f 3a       	srlo	r10
80008b22:	f7 ea 10 0a 	or	r10,r11,r10
80008b26:	f2 0a 18 00 	cp.b	r10,r9
80008b2a:	c0 60       	breq	80008b36 <__avr32_umod64+0xc2>
80008b2c:	fc 08 01 0a 	sub	r10,lr,r8
80008b30:	e6 05 01 46 	sbc	r6,r3,r5
80008b34:	14 9e       	mov	lr,r10
80008b36:	0c 9b       	mov	r11,r6
80008b38:	1c 9a       	mov	r10,lr
80008b3a:	2f ed       	sub	sp,-8
80008b3c:	d8 32       	popm	r0-r7,pc
80008b3e:	58 08       	cp.w	r8,0
80008b40:	c0 51       	brne	80008b4a <__avr32_umod64+0xd6>
80008b42:	30 19       	mov	r9,1
80008b44:	f2 08 0d 08 	divu	r8,r9,r8
80008b48:	10 9c       	mov	r12,r8
80008b4a:	f8 08 12 00 	clz	r8,r12
80008b4e:	e0 81 00 84 	brne	80008c56 <__avr32_umod64+0x1e2>
80008b52:	ec 0c 01 0b 	sub	r11,r6,r12
80008b56:	f8 03 16 10 	lsr	r3,r12,0x10
80008b5a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008b5e:	f6 03 0d 0a 	divu	r10,r11,r3
80008b62:	fc 09 16 10 	lsr	r9,lr,0x10
80008b66:	ea 0a 02 4a 	mul	r10,r5,r10
80008b6a:	f3 eb 11 09 	or	r9,r9,r11<<0x10
80008b6e:	12 3a       	cp.w	r10,r9
80008b70:	e0 88 00 09 	brls	80008b82 <__avr32_umod64+0x10e>
80008b74:	18 09       	add	r9,r12
80008b76:	12 3c       	cp.w	r12,r9
80008b78:	e0 8b 00 05 	brhi	80008b82 <__avr32_umod64+0x10e>
80008b7c:	12 3a       	cp.w	r10,r9
80008b7e:	f3 dc eb 09 	addhi	r9,r9,r12
80008b82:	14 19       	sub	r9,r10
80008b84:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008b88:	f2 03 0d 02 	divu	r2,r9,r3
80008b8c:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008b90:	ea 02 02 4a 	mul	r10,r5,r2
80008b94:	1c 3a       	cp.w	r10,lr
80008b96:	fe 98 ff b5 	brls	80008b00 <__avr32_umod64+0x8c>
80008b9a:	18 0e       	add	lr,r12
80008b9c:	1c 3c       	cp.w	r12,lr
80008b9e:	fe 9b ff b1 	brhi	80008b00 <__avr32_umod64+0x8c>
80008ba2:	ca cb       	rjmp	80008afa <__avr32_umod64+0x86>
80008ba4:	f2 0e 11 20 	rsub	lr,r9,32
80008ba8:	ea 09 09 45 	lsl	r5,r5,r9
80008bac:	f6 09 09 4b 	lsl	r11,r11,r9
80008bb0:	e6 0e 0a 43 	lsr	r3,r3,lr
80008bb4:	f0 09 09 41 	lsl	r1,r8,r9
80008bb8:	f4 09 09 42 	lsl	r2,r10,r9
80008bbc:	f0 0e 0a 48 	lsr	r8,r8,lr
80008bc0:	f4 0e 0a 4a 	lsr	r10,r10,lr
80008bc4:	0a 48       	or	r8,r5
80008bc6:	16 4a       	or	r10,r11
80008bc8:	f0 06 16 10 	lsr	r6,r8,0x10
80008bcc:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80008bd0:	e6 06 0d 04 	divu	r4,r3,r6
80008bd4:	f4 03 16 10 	lsr	r3,r10,0x10
80008bd8:	08 9b       	mov	r11,r4
80008bda:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008bde:	e8 0c 02 45 	mul	r5,r4,r12
80008be2:	06 35       	cp.w	r5,r3
80008be4:	e0 88 00 07 	brls	80008bf2 <__avr32_umod64+0x17e>
80008be8:	20 1b       	sub	r11,1
80008bea:	10 03       	add	r3,r8
80008bec:	06 38       	cp.w	r8,r3
80008bee:	e0 88 00 72 	brls	80008cd2 <__avr32_umod64+0x25e>
80008bf2:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008bf6:	0a 13       	sub	r3,r5
80008bf8:	e6 06 0d 04 	divu	r4,r3,r6
80008bfc:	f5 e5 11 06 	or	r6,r10,r5<<0x10
80008c00:	e8 0c 02 4c 	mul	r12,r4,r12
80008c04:	08 9a       	mov	r10,r4
80008c06:	0c 3c       	cp.w	r12,r6
80008c08:	e0 88 00 07 	brls	80008c16 <__avr32_umod64+0x1a2>
80008c0c:	20 1a       	sub	r10,1
80008c0e:	10 06       	add	r6,r8
80008c10:	0c 38       	cp.w	r8,r6
80008c12:	e0 88 00 5a 	brls	80008cc6 <__avr32_umod64+0x252>
80008c16:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
80008c1a:	18 16       	sub	r6,r12
80008c1c:	f6 01 06 4a 	mulu.d	r10,r11,r1
80008c20:	14 9c       	mov	r12,r10
80008c22:	16 36       	cp.w	r6,r11
80008c24:	c0 73       	brcs	80008c32 <__avr32_umod64+0x1be>
80008c26:	5f 05       	sreq	r5
80008c28:	14 32       	cp.w	r2,r10
80008c2a:	5f 3a       	srlo	r10
80008c2c:	eb ea 00 0a 	and	r10,r5,r10
80008c30:	c0 60       	breq	80008c3c <__avr32_umod64+0x1c8>
80008c32:	f8 01 01 04 	sub	r4,r12,r1
80008c36:	f6 08 01 4b 	sbc	r11,r11,r8
80008c3a:	08 9c       	mov	r12,r4
80008c3c:	e4 0c 01 0a 	sub	r10,r2,r12
80008c40:	ec 0b 01 46 	sbc	r6,r6,r11
80008c44:	ec 09 0a 4b 	lsr	r11,r6,r9
80008c48:	f4 09 0a 4a 	lsr	r10,r10,r9
80008c4c:	ec 0e 09 46 	lsl	r6,r6,lr
80008c50:	0c 4a       	or	r10,r6
80008c52:	2f ed       	sub	sp,-8
80008c54:	d8 32       	popm	r0-r7,pc
80008c56:	f0 01 11 20 	rsub	r1,r8,32
80008c5a:	f4 01 0a 4b 	lsr	r11,r10,r1
80008c5e:	f8 08 09 4c 	lsl	r12,r12,r8
80008c62:	ec 08 09 49 	lsl	r9,r6,r8
80008c66:	ec 01 0a 41 	lsr	r1,r6,r1
80008c6a:	f7 e9 10 09 	or	r9,r11,r9
80008c6e:	f8 03 16 10 	lsr	r3,r12,0x10
80008c72:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008c76:	e2 03 0d 00 	divu	r0,r1,r3
80008c7a:	f2 0b 16 10 	lsr	r11,r9,0x10
80008c7e:	ea 00 02 4e 	mul	lr,r5,r0
80008c82:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c86:	16 3e       	cp.w	lr,r11
80008c88:	e0 88 00 06 	brls	80008c94 <__avr32_umod64+0x220>
80008c8c:	18 0b       	add	r11,r12
80008c8e:	16 3c       	cp.w	r12,r11
80008c90:	e0 88 00 27 	brls	80008cde <__avr32_umod64+0x26a>
80008c94:	f6 0e 01 01 	sub	r1,r11,lr
80008c98:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008c9c:	e2 03 0d 00 	divu	r0,r1,r3
80008ca0:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80008ca4:	ea 00 02 4b 	mul	r11,r5,r0
80008ca8:	12 3b       	cp.w	r11,r9
80008caa:	e0 88 00 09 	brls	80008cbc <__avr32_umod64+0x248>
80008cae:	18 09       	add	r9,r12
80008cb0:	12 3c       	cp.w	r12,r9
80008cb2:	e0 8b 00 05 	brhi	80008cbc <__avr32_umod64+0x248>
80008cb6:	12 3b       	cp.w	r11,r9
80008cb8:	f3 dc eb 09 	addhi	r9,r9,r12
80008cbc:	f2 0b 01 0b 	sub	r11,r9,r11
80008cc0:	f4 08 09 4e 	lsl	lr,r10,r8
80008cc4:	c4 db       	rjmp	80008b5e <__avr32_umod64+0xea>
80008cc6:	0c 3c       	cp.w	r12,r6
80008cc8:	f7 ba 0b 01 	subhi	r10,1
80008ccc:	ed d8 eb 06 	addhi	r6,r6,r8
80008cd0:	ca 3b       	rjmp	80008c16 <__avr32_umod64+0x1a2>
80008cd2:	06 35       	cp.w	r5,r3
80008cd4:	f7 bb 0b 01 	subhi	r11,1
80008cd8:	e7 d8 eb 03 	addhi	r3,r3,r8
80008cdc:	c8 bb       	rjmp	80008bf2 <__avr32_umod64+0x17e>
80008cde:	16 3e       	cp.w	lr,r11
80008ce0:	f7 dc eb 0b 	addhi	r11,r11,r12
80008ce4:	cd 8b       	rjmp	80008c94 <__avr32_umod64+0x220>

80008ce6 <memcmp>:
80008ce6:	d4 01       	pushm	lr
80008ce8:	30 08       	mov	r8,0
80008cea:	c0 d8       	rjmp	80008d04 <memcmp+0x1e>
80008cec:	f8 08 07 0e 	ld.ub	lr,r12[r8]
80008cf0:	f6 08 07 09 	ld.ub	r9,r11[r8]
80008cf4:	20 1a       	sub	r10,1
80008cf6:	2f f8       	sub	r8,-1
80008cf8:	f2 0e 18 00 	cp.b	lr,r9
80008cfc:	c0 40       	breq	80008d04 <memcmp+0x1e>
80008cfe:	fc 09 01 0c 	sub	r12,lr,r9
80008d02:	d8 02       	popm	pc
80008d04:	58 0a       	cp.w	r10,0
80008d06:	cf 31       	brne	80008cec <memcmp+0x6>
80008d08:	14 9c       	mov	r12,r10
80008d0a:	d8 02       	popm	pc

80008d0c <memcpy>:
80008d0c:	58 8a       	cp.w	r10,8
80008d0e:	c2 f5       	brlt	80008d6c <memcpy+0x60>
80008d10:	f9 eb 10 09 	or	r9,r12,r11
80008d14:	e2 19 00 03 	andl	r9,0x3,COH
80008d18:	e0 81 00 97 	brne	80008e46 <memcpy+0x13a>
80008d1c:	e0 4a 00 20 	cp.w	r10,32
80008d20:	c3 b4       	brge	80008d96 <memcpy+0x8a>
80008d22:	f4 08 14 02 	asr	r8,r10,0x2
80008d26:	f0 09 11 08 	rsub	r9,r8,8
80008d2a:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80008d2e:	76 69       	ld.w	r9,r11[0x18]
80008d30:	99 69       	st.w	r12[0x18],r9
80008d32:	76 59       	ld.w	r9,r11[0x14]
80008d34:	99 59       	st.w	r12[0x14],r9
80008d36:	76 49       	ld.w	r9,r11[0x10]
80008d38:	99 49       	st.w	r12[0x10],r9
80008d3a:	76 39       	ld.w	r9,r11[0xc]
80008d3c:	99 39       	st.w	r12[0xc],r9
80008d3e:	76 29       	ld.w	r9,r11[0x8]
80008d40:	99 29       	st.w	r12[0x8],r9
80008d42:	76 19       	ld.w	r9,r11[0x4]
80008d44:	99 19       	st.w	r12[0x4],r9
80008d46:	76 09       	ld.w	r9,r11[0x0]
80008d48:	99 09       	st.w	r12[0x0],r9
80008d4a:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80008d4e:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008d52:	e0 1a 00 03 	andl	r10,0x3
80008d56:	f4 0a 11 04 	rsub	r10,r10,4
80008d5a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008d5e:	17 a9       	ld.ub	r9,r11[0x2]
80008d60:	b0 a9       	st.b	r8[0x2],r9
80008d62:	17 99       	ld.ub	r9,r11[0x1]
80008d64:	b0 99       	st.b	r8[0x1],r9
80008d66:	17 89       	ld.ub	r9,r11[0x0]
80008d68:	b0 89       	st.b	r8[0x0],r9
80008d6a:	5e fc       	retal	r12
80008d6c:	f4 0a 11 09 	rsub	r10,r10,9
80008d70:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008d74:	17 f9       	ld.ub	r9,r11[0x7]
80008d76:	b8 f9       	st.b	r12[0x7],r9
80008d78:	17 e9       	ld.ub	r9,r11[0x6]
80008d7a:	b8 e9       	st.b	r12[0x6],r9
80008d7c:	17 d9       	ld.ub	r9,r11[0x5]
80008d7e:	b8 d9       	st.b	r12[0x5],r9
80008d80:	17 c9       	ld.ub	r9,r11[0x4]
80008d82:	b8 c9       	st.b	r12[0x4],r9
80008d84:	17 b9       	ld.ub	r9,r11[0x3]
80008d86:	b8 b9       	st.b	r12[0x3],r9
80008d88:	17 a9       	ld.ub	r9,r11[0x2]
80008d8a:	b8 a9       	st.b	r12[0x2],r9
80008d8c:	17 99       	ld.ub	r9,r11[0x1]
80008d8e:	b8 99       	st.b	r12[0x1],r9
80008d90:	17 89       	ld.ub	r9,r11[0x0]
80008d92:	b8 89       	st.b	r12[0x0],r9
80008d94:	5e fc       	retal	r12
80008d96:	eb cd 40 c0 	pushm	r6-r7,lr
80008d9a:	18 99       	mov	r9,r12
80008d9c:	22 0a       	sub	r10,32
80008d9e:	b7 07       	ld.d	r6,r11++
80008da0:	b3 26       	st.d	r9++,r6
80008da2:	b7 07       	ld.d	r6,r11++
80008da4:	b3 26       	st.d	r9++,r6
80008da6:	b7 07       	ld.d	r6,r11++
80008da8:	b3 26       	st.d	r9++,r6
80008daa:	b7 07       	ld.d	r6,r11++
80008dac:	b3 26       	st.d	r9++,r6
80008dae:	22 0a       	sub	r10,32
80008db0:	cf 74       	brge	80008d9e <memcpy+0x92>
80008db2:	2f 0a       	sub	r10,-16
80008db4:	c0 65       	brlt	80008dc0 <memcpy+0xb4>
80008db6:	b7 07       	ld.d	r6,r11++
80008db8:	b3 26       	st.d	r9++,r6
80008dba:	b7 07       	ld.d	r6,r11++
80008dbc:	b3 26       	st.d	r9++,r6
80008dbe:	21 0a       	sub	r10,16
80008dc0:	5c 3a       	neg	r10
80008dc2:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80008dc6:	d7 03       	nop
80008dc8:	d7 03       	nop
80008dca:	f7 36 00 0e 	ld.ub	r6,r11[14]
80008dce:	f3 66 00 0e 	st.b	r9[14],r6
80008dd2:	f7 36 00 0d 	ld.ub	r6,r11[13]
80008dd6:	f3 66 00 0d 	st.b	r9[13],r6
80008dda:	f7 36 00 0c 	ld.ub	r6,r11[12]
80008dde:	f3 66 00 0c 	st.b	r9[12],r6
80008de2:	f7 36 00 0b 	ld.ub	r6,r11[11]
80008de6:	f3 66 00 0b 	st.b	r9[11],r6
80008dea:	f7 36 00 0a 	ld.ub	r6,r11[10]
80008dee:	f3 66 00 0a 	st.b	r9[10],r6
80008df2:	f7 36 00 09 	ld.ub	r6,r11[9]
80008df6:	f3 66 00 09 	st.b	r9[9],r6
80008dfa:	f7 36 00 08 	ld.ub	r6,r11[8]
80008dfe:	f3 66 00 08 	st.b	r9[8],r6
80008e02:	f7 36 00 07 	ld.ub	r6,r11[7]
80008e06:	f3 66 00 07 	st.b	r9[7],r6
80008e0a:	f7 36 00 06 	ld.ub	r6,r11[6]
80008e0e:	f3 66 00 06 	st.b	r9[6],r6
80008e12:	f7 36 00 05 	ld.ub	r6,r11[5]
80008e16:	f3 66 00 05 	st.b	r9[5],r6
80008e1a:	f7 36 00 04 	ld.ub	r6,r11[4]
80008e1e:	f3 66 00 04 	st.b	r9[4],r6
80008e22:	f7 36 00 03 	ld.ub	r6,r11[3]
80008e26:	f3 66 00 03 	st.b	r9[3],r6
80008e2a:	f7 36 00 02 	ld.ub	r6,r11[2]
80008e2e:	f3 66 00 02 	st.b	r9[2],r6
80008e32:	f7 36 00 01 	ld.ub	r6,r11[1]
80008e36:	f3 66 00 01 	st.b	r9[1],r6
80008e3a:	f7 36 00 00 	ld.ub	r6,r11[0]
80008e3e:	f3 66 00 00 	st.b	r9[0],r6
80008e42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008e46:	20 1a       	sub	r10,1
80008e48:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80008e4c:	f8 0a 0b 09 	st.b	r12[r10],r9
80008e50:	cf b1       	brne	80008e46 <memcpy+0x13a>
80008e52:	5e fc       	retal	r12

80008e54 <memset>:
80008e54:	18 98       	mov	r8,r12
80008e56:	c0 38       	rjmp	80008e5c <memset+0x8>
80008e58:	10 cb       	st.b	r8++,r11
80008e5a:	20 1a       	sub	r10,1
80008e5c:	58 0a       	cp.w	r10,0
80008e5e:	cf d1       	brne	80008e58 <memset+0x4>
80008e60:	5e fc       	retal	r12

Disassembly of section .exception:

80009000 <_evba>:
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 c9 a9 	rcall	80002458 <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
80009110:	d6 03       	rete

80009112 <_int1>:
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 c9 a2 	rcall	80002458 <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
8000911e:	d6 03       	rete

80009120 <_int2>:
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 c9 9b 	rcall	80002458 <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
8000912c:	d6 03       	rete

8000912e <_int3>:
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 c9 94 	rcall	80002458 <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
